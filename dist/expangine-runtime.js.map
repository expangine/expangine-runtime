{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/helpers.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","getWrappedType","isCompatible","other","exact","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","getSimplifiedType","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","has","defaultResult","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","cache","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","arg","expressions","AndExpression","e","expectedType","directly","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","PathExpression","fromPartial","pathData","isPath","getPathType","thisType","INVALID_EXPRESSION","EMPTY_PATH","isWritable","isMutating","e0","e1","e2","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","param","paramName","MISSING_FUNCTION","argName","argType","named","nameOrArgs","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","paramType","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","READONLY","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","flatten","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","some","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","takeKey","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","moveDataset","inside","movable","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","isExpression","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","objectType","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","MergedObjectType","GivenObjectType","paramProps","paramProp","merger","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getFormatter","escaped","getEscaped","content","handled","finalFormatter","formatted","startEscape","endEscape","possibleEscapeIndex","endOffset","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\nexport type RecordKey = string | number | symbol;\r\n\r\nexport type MapInput<K = any, V = any> = \r\n  Map<K, V> | \r\n  Array<[K, V]> | \r\n  (K extends string | number | symbol ? Record<K, V> : never);\r\n\r\nexport function isNumber(value: any): value is number \r\n{\r\n  return typeof value === 'number' && isFinite(value);\r\n}\r\n\r\nexport function isString(value: any): value is string \r\n{\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function isArray<T = any>(value: any): value is T[] \r\n{\r\n  return Array.isArray(value);\r\n}\r\n\r\nexport function isDate(value: any): value is Date\r\n{\r\n  return value instanceof Date;\r\n}\r\n\r\nexport function isMap<K, V>(value: any): value is Map<K, V>\r\n{\r\n  return value instanceof Map;\r\n}\r\n\r\nexport function isSet<V>(value: any): value is Set<V>\r\n{\r\n  return value instanceof Set;\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean \r\n{\r\n  return typeof value === 'boolean';\r\n}\r\n\r\nexport function isFunction(value: any): value is ((...args: any[]) => any) \r\n{\r\n  return typeof value === 'function';\r\n}\r\n\r\nexport function isObject(value: any): value is Record<string, any> \r\n{\r\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\r\n}\r\n\r\nexport function isUndefined(value: any): value is undefined \r\n{\r\n  return typeof value === 'undefined';\r\n}\r\n\r\nexport function isSameClass(a: any, b: any): boolean\r\n{\r\n  return a.constructor === b.constructor;\r\n}\r\n\r\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\r\n{\r\n  return Math.abs(x - Math.round(x)) <= epsilon;\r\n}\r\n\r\nexport function isEmpty(value: any): value is ([] | {} | null | undefined)\r\n{\r\n  if (isArray(value)) \r\n  {\r\n    return value.length === 0;\r\n  }\r\n  else if (isObject(value)) \r\n  {\r\n    for (const _prop in value) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return value === null || value === undefined;\r\n}\r\n\r\nexport function now(): number\r\n{\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function clamp(x: number, min: number, max: number): number\r\n{\r\n  return x < min ? min : x > max ? max : x;\r\n}\r\n\r\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\r\n{\r\n  if (isArray(input))\r\n  {\r\n    return new Map(input);\r\n  }\r\n  else if (isMap(input))\r\n  {\r\n    return input;\r\n  }\r\n  else if (isObject(input))\r\n  {\r\n    return new Map(objectToArray(input, (v, k) => [k, v]));\r\n  }\r\n  \r\n  return new Map();\r\n}\r\n\r\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\r\n{\r\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\r\n}\r\n\r\nexport function arraySync<V, W = V>(\r\n  target: V[],\r\n  source: W[],\r\n  matches: (target: V, source: W) => boolean,\r\n  add: (target: V[], value: W) => void,\r\n  remove: (target: V[], index: number, value: V) => void,\r\n  update: (target: V[], index: number, value: V, newValue: W) => void,\r\n): V[]\r\n{\r\n  const taken = source.map(() => false);\r\n\r\n  for (let i = target.length - 1; i >= 0; i--)\r\n  {\r\n    const targetValue = target[i];\r\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\r\n\r\n    if (matchIndex !== -1)\r\n    {\r\n      update(target, i, targetValue, source[matchIndex]);\r\n\r\n      taken[matchIndex] = true;\r\n    }\r\n    else\r\n    {\r\n      remove(target, i, targetValue);\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < source.length; i++)\r\n  {\r\n    if (!taken[i])\r\n    {\r\n      add(target, source[i]);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectSync<V, K extends RecordKey = string>(\r\n  target: Record<K, V>,\r\n  source: Record<K, V>,\r\n  add: (target: Record<K, V>, key: K, value: V) => void,\r\n  remove: (target: Record<K, V>, key: K, value: V) => void,\r\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\r\n): Record<K, V> \r\n{\r\n for (const key in target)\r\n {\r\n   if (!(key in source))\r\n   {\r\n     remove(target, key, target[key]);\r\n   }\r\n }\r\n\r\n for (const key in source)\r\n {\r\n   if (key in target)\r\n   {\r\n     update(target, key, target[key], source[key]);\r\n   }\r\n   else\r\n   {\r\n     add(target, key, source[key]);\r\n   }\r\n }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\r\n  map: Record<K, V>, \r\n  getValue: (value: V, key: K) => R, \r\n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out[getKey(key, value)] = getValue(value, key), out)\r\n  , Object.create(null));\r\n}\r\n\r\nexport function objectEach<V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\r\n{\r\n  return objectReduce(map, (value, key) => \r\n    onEach(value, key, map)\r\n  , undefined);\r\n}\r\n\r\nexport function objectValues<V, M = V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out.push(transform(value, key)), out)\r\n  , []);\r\n}\r\n\r\nexport function objectReduce<R, V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  reduce: (value: V, key: K, reduced: R) => R, \r\n  initial: R): R\r\n{\r\n  for (const key in map)\r\n  {\r\n    initial = reduce(map[key], key, initial);\r\n  }\r\n\r\n  return initial;\r\n}\r\n\r\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\r\n{\r\n  const out = Object.create(null) as Record<P, V>;\r\n\r\n  for (let i = 0; i < props.length; i++)\r\n  {\r\n    const prop = props[i];\r\n\r\n    out[prop] = getValue(prop, i);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\r\n{\r\n  const arr: T[] = [];\r\n\r\n  for (const key in map)\r\n  {\r\n    arr.push(getItem(map[key], key));\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\n\r\nexport function coalesce<T>(x?: T, y?: T): T\r\n{\r\n  return x === undefined ? y : x;\r\n}\r\n\r\nexport function padNumber(x: number, length: number, first: number = length)\r\n{\r\n  return pad(x + '', length, '0', true).substring( 0, first );\r\n}\r\n\r\nexport function pad(x: string, length: number, padding: string, before: boolean): string\r\n{\r\n  while (x.length < length)\r\n  {\r\n    before ? x = padding + x : x = x + padding;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\nexport function toString(x: any)\r\n{\r\n  return isArray(x) || isObject(x)\r\n    ? JSON.stringify(x)\r\n    : x + '';\r\n}","import { isFunction } from './fns';\r\n\r\n\r\nexport type TraverseStep = string | number;\r\n\r\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\r\n\r\nexport type TraverseRemove = () => void;\r\n\r\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\r\n\r\nexport type TraverseReplace<T> = (replaceWith: T) => void;\r\n\r\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\r\n\r\nexport interface Traversable<T>\r\n{\r\n  traverse<R>(traverse: Traverser<T, R>): R;\r\n}\r\n\r\nexport interface TraverseResult<T>\r\n{\r\n  value: T;\r\n  stack: T[];\r\n  path: TraverseStep[];\r\n}\r\n\r\nexport class Traverser<T, R = any>\r\n{\r\n\r\n  public static isTraversable<T>(x: any): x is Traversable<T>\r\n  {\r\n    return x && isFunction(x.traverse);\r\n  }\r\n\r\n  public callback: TraverseCallback<T, R>;\r\n  public stack: T[];\r\n  public path: TraverseStep[];\r\n  public result: R;\r\n  public stopped: boolean;\r\n  public remove: TraverseRemove = TraverseRemoveNoop;\r\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\r\n\r\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\r\n  {\r\n    this.callback = callback;\r\n    this.stack = [];\r\n    this.path = [];\r\n    this.stopped = false;\r\n    this.result = initialResult;\r\n  }\r\n\r\n  public enter(value: T, getInner?: () => any): R\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this.result;\r\n    }\r\n    \r\n    this.callback(value, this.stack, this.path, this);\r\n\r\n    this.remove = TraverseRemoveNoop;\r\n    this.replace = TraverseReplaceNoop;\r\n\r\n    if (getInner && !this.stopped)\r\n    {\r\n      this.stack.push(value);\r\n\r\n      getInner();\r\n\r\n      this.stack.pop();\r\n    }\r\n\r\n    return this.result;\r\n  }\r\n\r\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this;\r\n    }\r\n\r\n    this.path.push(step);\r\n\r\n    this.remove = remove;\r\n    this.replace = replace;\r\n\r\n    if (Traverser.isTraversable<T>(getStep))\r\n    {\r\n      getStep.traverse(this);\r\n    }\r\n    else\r\n    {\r\n      getStep();\r\n    }\r\n\r\n    this.path.pop();\r\n\r\n    return this;\r\n  }\r\n\r\n  public modify(getResult: (result: R) => R | undefined): this\r\n  {\r\n    const newResult = getResult(this.result);\r\n\r\n    if (newResult !== undefined)\r\n    {\r\n      this.result = newResult;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public stop(result?: R): this\r\n  {\r\n    this.result = result;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getResult(): R\r\n  {\r\n    return this.result;\r\n  }\r\n\r\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\r\n  {\r\n    const remove = this.canRemove();\r\n    const replace = this.canReplace();\r\n\r\n    if (!remove && !replace) {\r\n      return false;\r\n    }\r\n\r\n    remove\r\n      ? this.remove()\r\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\r\n\r\n    return true;\r\n  }\r\n\r\n  public canRemove(): boolean\r\n  {\r\n    return this.remove !== TraverseRemoveNoop;\r\n  }\r\n\r\n  public canReplace(): boolean\r\n  {\r\n    return this.replace !== TraverseReplaceNoop;\r\n  }\r\n\r\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\r\n  {\r\n    return this.filter((value: T) => value.constructor === construct, initialResult);\r\n  }\r\n\r\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\r\n  {\r\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\r\n      if (pass(value, stack, path)) {\r\n        this.callback(value, stack, path, traverser);\r\n      }\r\n    };\r\n\r\n    return new Traverser<T, R>(callback, initialResult);\r\n  }\r\n\r\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\r\n  {\r\n    const list: TraverseResult<T>[] = [];\r\n\r\n    return new Traverser((value, stack, path) => {\r\n      list.push({\r\n        value,\r\n        stack: stack.slice(),\r\n        path: path.slice(),\r\n      });\r\n    }, list);\r\n  }\r\n\r\n  public static count<T>(): Traverser<T, number>\r\n  {\r\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\r\n  }\r\n\r\n}","import { Expression } from './Expression';\r\nimport { Type } from './Type';\r\n\r\n\r\n\r\nexport enum ValidationSeverity \r\n{\r\n  LOW = 1,\r\n  MEDIUM = 2,\r\n  HIGH = 3,\r\n}\r\n\r\nexport enum ValidationType \r\n{\r\n  UNSAFE_OPERATION = 1,       // LOW\r\n  POSSIBLY_NULL = 2,          // MEDIUM\r\n  INCOMPATIBLE_TYPES = 3,     // HIGH\r\n  INVALID_EXPRESSION = 4,     // HIGH\r\n  MISSING_FUNCTION = 5,       // HiGH\r\n  MISSING_EXPRESSION = 6,     // HiGH\r\n  MISSING_OPERATION = 7,      // HiGH\r\n  MISSING_TYPE_NAME = 8,      // HIGH\r\n  MISSING_TYPE = 9,           // HIGH\r\n  MISSING_RELATION_NAME = 10, // HIGH\r\n  MISSING_RELATION = 11,      // HIGH\r\n  MISSING_DATA_NAME = 12,     // HIGH\r\n  MISSING_DATA = 13,          // HIGH\r\n  OUTSIDE_PATH = 14,          // HIGH\r\n  READONLY = 15,              // HIGH\r\n  EMPTY_PATH = 16,            // HIGH\r\n  INVALID_THIS = 17,          // HIGH\r\n  MISSING_METHOD = 18,        // HIGH\r\n}\r\n\r\nexport interface Validation \r\n{\r\n  type: ValidationType;\r\n  severity: ValidationSeverity;\r\n  context: Type;\r\n  subject?: Expression;\r\n  parent?: Expression;\r\n  expected?: Type;\r\n  actual?: Type;\r\n}\r\n\r\nexport type ValidationHandler = (validation: Validation) => void;\r\n","\r\nimport { isSameClass } from './fns';\r\nimport { Operations, OperationGeneric } from './Operation';\r\nimport { Expression } from './Expression';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\r\nimport { Computeds } from './Computed';\r\nimport { ReferenceData } from './ReferenceData';\r\n\r\n\r\n\r\nexport type TypeInput = TypeClass | Type;\r\n\r\nexport type TypeInputMap = Record<string, TypeInput>;\r\n\r\nexport type TypeMap = Record<string, Type>;\r\n\r\nexport interface TypeSub \r\n{ \r\n  key: string | number | Type;\r\n  value: Type;\r\n}\r\n\r\nexport type TypeResolved<T> = T extends (null | undefined)\r\n  ? undefined\r\n  : T extends TypeInput\r\n    ? Type\r\n    : T extends TypeInput[]\r\n      ? Type[]\r\n      : T extends TypeInputMap\r\n        ? Record<keyof T, Type>\r\n        : {\r\n          [K in keyof T]: TypeResolved<T[K]>\r\n        };\r\n\r\nexport interface TypeProvider \r\n{\r\n  getType(data: any, otherwise?: Type): Type;\r\n  getExpression(data: any): Expression;\r\n  getData(name: string): ReferenceData | null;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface TypeDescribeProvider\r\n{\r\n  describe(data: any): Type;\r\n  merge(type: Type, data: any): Type;\r\n}\r\n\r\nexport interface TypeCompatibleOptions\r\n{\r\n  strict?: boolean;\r\n  value?: boolean;\r\n  exact?: boolean;\r\n}\r\n\r\nexport interface TypeParser \r\n{\r\n  (data: any, types: TypeProvider): Type;\r\n}\r\n\r\nexport interface TypeClass<T extends Type<O> = any, O = any> \r\n{\r\n  id: string;\r\n  operations: Operations;\r\n  computeds: Computeds;\r\n  baseType: T;\r\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\r\n  encode(this: TypeClass<T>, type: T): any;\r\n  describePriority: number;\r\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null;\r\n  register(this: TypeClass<T>): void;\r\n  registered: boolean;\r\n  new(options: O, ...args: any[]): T;\r\n}\r\n\r\nexport abstract class Type<O = any> implements Traversable<Type>\r\n{\r\n\r\n  public options: O;\r\n  public parent: Type = null;\r\n\r\n  public constructor(options: O) \r\n  {\r\n    this.options = options;\r\n  }\r\n\r\n  public abstract getOperations(): Record<string, OperationGeneric>;\r\n\r\n  public abstract getId(): string;\r\n\r\n  public abstract merge(type: Type<O>): void;\r\n\r\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\r\n\r\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\r\n\r\n  public abstract getExactType(value: any): Type<O>;\r\n\r\n  public abstract getSimplifiedType(): Type;\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public getWrappedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\r\n\r\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\r\n  {\r\n    if (other === this)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getWrappedType(), options))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.isDeepCompatible(other, options);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public acceptsType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true });\r\n  }\r\n\r\n  public acceptsData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true, value: true });\r\n  }\r\n\r\n  public exactType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true });\r\n  }\r\n\r\n  public exactData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\r\n  }\r\n\r\n  public abstract isOptional(): boolean;\r\n\r\n  public abstract isSimple(): boolean;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\r\n\r\n  public abstract setParent(parent?: Type): void;\r\n\r\n  public abstract removeDescribedRestrictions(): void;\r\n\r\n  public abstract getCreateExpression(): Expression;\r\n\r\n  public abstract getValidateExpression(): Expression;\r\n\r\n  public abstract getCompareExpression(): Expression;\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    return newValue;\r\n  }\r\n\r\n  public getValueChangeAt(newValue: Expression): Expression\r\n  {\r\n    let node: Type = this.parent;\r\n    const path = this.getPath();\r\n\r\n    while(node)\r\n    {\r\n      const step = path.pop();\r\n\r\n      newValue = node.getValueChangeExpression(newValue, step, step);\r\n      node = node.parent;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getTypeFromPath(path: TraverseStep[]): Type | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const type = this.getTypeFromStep(path[0]);\r\n\r\n    if (!type)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return type.getTypeFromPath(path.slice(1));\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootType(): Type\r\n  {\r\n    let node: Type = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public abstract isValid(value: any): boolean;\r\n\r\n  public abstract normalize(value: any): any;\r\n\r\n  public abstract newInstance(): Type<O>;\r\n\r\n  public abstract clone(): Type<O>;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract create(): any;\r\n\r\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\r\n\r\n  public abstract fromJson(json: any): any;\r\n\r\n  public abstract toJson(value: any): any;\r\n  \r\n}","import { Type, TypeMap } from './Type';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\r\n\r\n\r\nexport interface ExpressionProvider \r\n{ \r\n  getExpression(value: any): Expression;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface ExpressionClass<T extends Expression = any> \r\n{\r\n  id: string;\r\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\r\n  encode(this: ExpressionClass<T>, expr: T): any;\r\n  new(...args: any[]): T;\r\n}\r\n\r\nexport type ExpressionValue = any | Expression;\r\n\r\nexport type ExpressionMap = Record<string, Expression>;\r\n\r\nexport abstract class Expression implements Traversable<Expression>\r\n{\r\n\r\n  public static INSTANCE = 'instance';\r\n\r\n  public parent: Expression = null;\r\n  \r\n  public abstract getId(): string;\r\n\r\n  public abstract getScope(): TypeMap | null;\r\n\r\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract clone(): Expression;\r\n\r\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\r\n\r\n  public abstract setParent(parent?: Expression): void;\r\n\r\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\r\n  \r\n  public abstract mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const step = this.getExpressionFromStep(path);\r\n\r\n    if (!step || !step[1])\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const [steps, expr] = step;\r\n\r\n    return expr.getExpressionFromPath(path.slice(steps));\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootExpression(): Expression\r\n  {\r\n    let node: Expression = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public validations(def: DefinitionProvider, context: Type): Validation[]\r\n  {\r\n    const validations: Validation[] = [];\r\n\r\n    this.validate(def, context, x => validations.push(x));\r\n\r\n    return validations;\r\n  }\r\n\r\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\r\n  {\r\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\r\n    const actualComplete = subject ? subject.getType(def, context) : null;\r\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\r\n    let test = actual;\r\n\r\n    if (!actual)\r\n    {\r\n      if (expected && !expected.isOptional())\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n        });\r\n      }\r\n    }\r\n    else\r\n    {\r\n      if (actual.isOptional() && !expected.isOptional())\r\n      {\r\n        test = test.getRequired();\r\n      }\r\n\r\n      if (!expected.acceptsType(test))\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: expected.isCompatible(actual)\r\n            ? ValidationSeverity.MEDIUM\r\n            : ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n      else if (test !== actual)\r\n      {\r\n        handler({\r\n          type: ValidationType.POSSIBLY_NULL,\r\n          severity: ValidationSeverity.MEDIUM,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (subject)\r\n    {\r\n      subject.validate(def, context, handler);\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeProvider } from './Type';\r\nimport { isFunction } from './fns';\r\nimport { Entity } from './Entity';\r\nimport { Relation, EntityRelation } from './Relation';\r\nimport { NamedMap } from './maps/NamedMap';\r\n\r\n\r\nexport interface OperationFlags\r\n{\r\n  complexity: number;\r\n  mutates: string[];\r\n}\r\n\r\nexport interface Operation<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never,\r\n  H extends (P | O) = never,\r\n  R extends (P | O) = never\r\n> extends OperationFlags {\r\n  id: string;\r\n  params: P[];\r\n  optional: O[];\r\n  scope: S[];\r\n  scopeDefaults: Record<S, string>;\r\n  hasScope: H[];\r\n  resultDependency: R[];\r\n}\r\n\r\nexport type OperationResolved<\r\n  P extends string, \r\n  O extends string, \r\n  S extends string, \r\n  H extends (P | O), \r\n  R extends (P | O)\r\n> = Operation<\r\n  string extends P ? never : P, \r\n  string extends O ? never : O, \r\n  string extends S ? never : S, \r\n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \r\n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\r\n>;\r\n\r\nexport interface OperationTypeProvider extends TypeProvider\r\n{\r\n  getEntity(name: string): Entity | null;\r\n  getEntities(): NamedMap<Entity>;\r\n  getRelation(name: string): Relation | null;\r\n  getRelations(entityName: string): EntityRelation[];\r\n}\r\n\r\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\r\n\r\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\r\n\r\nexport interface OperationTypes<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never\r\n> {\r\n  returnType: OperationTypeInput<P | O>,\r\n  params: Record<P, OperationTypeInput<P | O>>;\r\n  optional: Record<O, OperationTypeInput<P | O>>;\r\n  scope: Record<S, OperationTypeInput<P | O>>;\r\n  rawTypes?: boolean;\r\n}\r\n\r\nexport type OperationGeneric = Operation<any, any, any, any, any>;\r\n\r\nexport interface OperationPair<\r\n  P extends string = any, \r\n  O extends string = any,\r\n  S extends string = any\r\n> {\r\n  op: Operation<P, O, S, any, any>;\r\n  types: OperationTypes<P, O, S>;\r\n}\r\n\r\nexport interface OperationMapping\r\n{\r\n  from: Operation<any, any, any, any, any>;\r\n  fromTypes: OperationTypes<any, any, any>;\r\n  to: Operation<any, any, any, any, any>;\r\n  toTypes: OperationTypes<any, any, any>;\r\n  mapping: Record<string, string>;\r\n  unmapped: string[];\r\n}\r\n\r\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\r\n{\r\n  return !('baseType' in x) && isFunction(x);\r\n}\r\n\r\nexport class Operations\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, OperationGeneric>;\r\n  public types: Record<string, OperationTypes<any, any, any>>;\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.types = Object.create(null);\r\n  }\r\n\r\n  public get (id: string): OperationGeneric\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n  public getTypes (id: string): OperationTypes<any, any, any>\r\n  {\r\n    return this.types[id] || this.types[this.prefix + id];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\r\n    localId: string, \r\n    flags: Partial<OperationFlags> = {},\r\n    params: P[] = [], \r\n    optional: O[] = [], \r\n    scope: S[] = [],\r\n    hasScope: H[] = [],\r\n    resultDependency: R[] = []\r\n  ) : OperationResolved<P, O, S, H, R> \r\n  {\r\n    const id = this.prefix + localId;\r\n    const mutates = flags.mutates || [];\r\n    const complexity = flags.complexity || 0;\r\n    const scopeDefaults: Record<S, string> = Object.create(null);\r\n    scope.forEach((s) => scopeDefaults[s] = s);\r\n\r\n    const op = { \r\n      id, \r\n      mutates, \r\n      complexity, \r\n      params,\r\n      optional,\r\n      scope,\r\n      scopeDefaults,\r\n      hasScope,\r\n      resultDependency\r\n    };\r\n    \r\n    this.map[id] = op;\r\n\r\n    return op as unknown as OperationResolved<P, O, S, H, R>;\r\n  }\r\n\r\n  public setTypes(\r\n    op: Operation<never, never, never, never, never>,\r\n    returnType: OperationTypeInput<never>\r\n  ) : OperationTypes<never, never, never>\r\n  public setTypes<P extends string>(\r\n    op: Operation<P, never, never, any, any>,\r\n    returnType: OperationTypeInput<P>,\r\n    params: Record<P, OperationTypeInput<P>>\r\n  ) : OperationTypes<P, never, never>\r\n  public setTypes<P extends string, O extends string>(\r\n    op: Operation<P, O, never, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, never>\r\n  public setTypes<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>,\r\n    scope: Record<S, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, S>\r\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\r\n    op: Operation<P, O, S, any, any>, \r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\r\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\r\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\r\n  ): OperationTypes<P, O, S> {\r\n\r\n    const types = { returnType, params, optional, scope };\r\n\r\n    this.types[op.id] = types;\r\n\r\n    return types;\r\n  }\r\n\r\n}","\r\nimport { Operation } from './Operation';\r\n\r\n\r\n\r\nexport interface Computed \r\n{\r\n  id: string;\r\n  op: string;\r\n  value: string;\r\n  params: Record<string, any>;\r\n  writeable?: {\r\n    op: string;\r\n    value: string;\r\n    newValue: string;\r\n    params: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport class Computeds\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, Computed>;\r\n  public list: Computed[];\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.list = [];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp: Computed = {\r\n      id,\r\n      op: op.id,\r\n      value: value || op.params[0],\r\n      params: params || {},\r\n    };\r\n\r\n    this.map[id] = comp;\r\n    this.list.push(comp);\r\n\r\n    return comp;\r\n  }\r\n\r\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp = this.map[id];\r\n\r\n    comp.writeable = { \r\n      op: op.id,\r\n      value,\r\n      newValue,\r\n      params: params || {},\r\n    };\r\n\r\n    return comp;\r\n  }\r\n\r\n  public get (id: string): Computed\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n}","\r\nexport const ID = {\r\n  Entity: '@',\r\n  Any: 'any',\r\n  Boolean: 'bool',\r\n  Color: 'color',\r\n  Date: 'date',\r\n  Enum: 'enum',\r\n  Function: 'func',\r\n  List: 'list',\r\n  Many: 'many',\r\n  Not: 'not',\r\n  Map: 'map',\r\n  Null: 'null',\r\n  Number: 'num',\r\n  Object: 'obj',\r\n  Optional: '?',\r\n  Reference: 'ref',\r\n  Relation: 'rel',\r\n  Set: 'set',\r\n  Text: 'text',\r\n  Tuple: 'tuple',\r\n  Delimiter: ':',\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\r\n\r\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\r\n\r\nconst ops = BooleanOperations;\r\n\r\nexport const BooleanOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  and: ops.set('&', {}, ['a', 'b']),\r\n\r\n  or: ops.set('|', {}, ['a', 'b']),\r\n\r\n  xor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  not: ops.set('!', {}, ['a']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isTrue: ops.set('t?', {}, ['value']),\r\n\r\n  isFalse: ops.set('f?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\n\r\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\r\n\r\nexport interface DataTypeComparator\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\r\n}\r\n\r\nexport interface DataTypeEquality\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\r\n}\r\n\r\nexport interface DataTypeCopier\r\n{\r\n  priority: number;\r\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\r\n}\r\n\r\nexport interface DataTypeJson<T = any>\r\n{\r\n  priority: number;\r\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\r\n  fromJson(json: any, fromJson: (json: any) => any): T;\r\n}\r\n\r\nexport interface DataTypeAccessor<T = any>\r\n{\r\n  priority: number;\r\n  isValid(value: any, step: any): boolean;\r\n  set(value: T, step: any, stepValue: any): void;\r\n  get(value: T, step: any): any;\r\n  remove(value: T, step: any): any;\r\n  has(value: T, step: any): any;\r\n}\r\n\r\nexport interface DataTypeRegistryOperations\r\n{\r\n  objectSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): void;\r\n  objectRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;\r\n  arrayAdd<T>(arr: T[], item: T): void;\r\n  arrayRemove<T>(arr: T[], index: number): T;\r\n  arraySet<T>(arr: T[], index: number, item: T): T;\r\n}\r\n\r\nexport class DataTypeRegistry implements DataTypeRegistryOperations\r\n{\r\n\r\n  public static TYPES: DataTypeRaw[] = [\r\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\r\n  ];\r\n\r\n  private compareTypes: Record<DataTypeRaw, number>;\r\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\r\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\r\n  private copyList: DataTypeCopier[];\r\n  private jsonList: DataTypeJson[];\r\n  private accessorList: DataTypeAccessor[];\r\n\r\n  public objectSet: DataTypeRegistryOperations['objectSet']\r\n    = (obj, prop, value) => obj[prop] = value;\r\n  public objectRemove: DataTypeRegistryOperations['objectRemove']\r\n    = (obj, prop) => delete obj[prop];\r\n  public arrayAdd: DataTypeRegistryOperations['arrayAdd']\r\n    = (arr, item) => arr.push(item);\r\n  public arrayRemove: DataTypeRegistryOperations['arrayRemove']\r\n    = (arr, index) => arr.splice(index, 1)[0];\r\n  public arraySet: DataTypeRegistryOperations['arraySet']\r\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\r\n\r\n  public constructor()\r\n  {\r\n    this.compareTypes = this.createTypeMap((_, index) => index);\r\n    this.compareMap = this.createTypeMap(() => []);\r\n    this.equalsMap = this.createTypeMap(() => []);\r\n    this.copyList = [];\r\n    this.jsonList = [];\r\n    this.accessorList = [];\r\n  }\r\n\r\n  public compare(a: any, b: any): number\r\n  {\r\n    const comparator = (x: any, y: any): number =>\r\n    {\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\r\n      }\r\n\r\n      const compares = this.compareMap[xtype];\r\n\r\n      for (const compare of compares)\r\n      {\r\n        const result = compare.compare(x, y, comparator);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return x === y ? 0 : x < y ? -1 : 1;\r\n    };\r\n\r\n    return comparator(a, b);\r\n  }\r\n\r\n  public getCompare(less: number, more: number): number\r\n  {\r\n    return less === 0 && more === 0\r\n      ? 0\r\n      : less < more ? 1 : -1;\r\n  }\r\n\r\n  public addCompare(compare: DataTypeComparator): this\r\n  {\r\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\r\n  }\r\n\r\n  public equals(a: any, b: any): boolean\r\n  {\r\n    const equalitor = (x: any, y: any): boolean =>\r\n    {\r\n      if (x === y)\r\n      {\r\n        return true;\r\n      }\r\n\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const equals = this.equalsMap[xtype];\r\n\r\n      for (const equality of equals)\r\n      {\r\n        const result = equality.equals(x, y, equalitor);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    return equalitor(a, b);\r\n  }\r\n\r\n  public addEquals(equals: DataTypeEquality): this\r\n  {\r\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\r\n  }\r\n\r\n  public copy<T>(x: T, containsCycles: boolean = false): T\r\n  {\r\n    if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof x === 'object')\r\n    {\r\n      const copiers = this.copyList;\r\n\r\n      if (containsCycles)\r\n      {\r\n        const copied = new Map();\r\n  \r\n        const setObjectCopy = (original: any, copy: any) => \r\n        {\r\n          copied.set(original, copy);\r\n        };\r\n  \r\n        const copyObject = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            const existing = copied.get(a);\r\n  \r\n            if (existing !== undefined)\r\n            {\r\n              return existing;\r\n            }\r\n  \r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyObject(x);\r\n      }\r\n      else\r\n      {\r\n        const setObjectCopy = (original: any, copy: any) => {};\r\n\r\n        const copyValue = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyValue(x);\r\n      }\r\n\r\n      \r\n    }\r\n  \r\n    return x;\r\n  }\r\n\r\n  public addCopier(copier: DataTypeCopier): this\r\n  {\r\n    return this.addToPriorityList(this.copyList, copier);\r\n  }\r\n\r\n  public toJson<T>(value: T): any\r\n  {\r\n    if (!value) return value; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof value === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: T): any =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.toJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n\r\n        return x;\r\n      };\r\n      \r\n      return jsonObject(value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public fromJson<T>(json: any): T\r\n  {\r\n    if (!json) return json; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof json === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: any): T =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.fromJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n        \r\n        return x;\r\n      };\r\n\r\n      return jsonObject(json);\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public addJson<T>(json: DataTypeJson<T>): this\r\n  {\r\n    return this.addToPriorityList(this.jsonList, json);\r\n  }\r\n\r\n  public get(value: any, step: any): any\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        return access.get(value, step);\r\n      }\r\n    }\r\n  }\r\n\r\n  public set(value: any, step: any, stepValue: any): boolean\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        access.set(value, step, stepValue);\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public remove(value: any, step: any): boolean\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        access.remove(value, step);\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public has<O = false>(value: any, step: any, defaultResult: O = false as unknown as O): boolean | O\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        return access.has(value, step);\r\n      }\r\n    }\r\n\r\n    return defaultResult;\r\n  }\r\n\r\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\r\n  {\r\n    return this.addToPriorityList(this.accessorList, accessor);\r\n  }\r\n\r\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\r\n  {\r\n    const map: Record<DataTypeRaw, V> = Object.create(null);\r\n    \r\n    DataTypeRegistry.TYPES.forEach((type, index) => \r\n    {\r\n      map[type] = create(type, index);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\r\n  {\r\n    list.push(value);\r\n    list.sort((a, b) => b.priority - a.priority);\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport const DataTypes = new DataTypeRegistry();","\r\nimport { isBoolean, isEmpty } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_TRUE_PROBABILITY = 0.5;\r\n\r\nexport interface BooleanOptions \r\n{\r\n  true?: Record<string, true>;\r\n  false?: Record<string, true>;\r\n}\r\n\r\nexport class BooleanType extends Type<BooleanOptions> \r\n{\r\n\r\n  public static id = ID.Boolean;\r\n\r\n  public static operations = BooleanOperations;\r\n\r\n  public static computeds = BooleanComputeds;\r\n\r\n  public static baseType = new BooleanType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): BooleanType \r\n  {\r\n    return new BooleanType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: BooleanType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return isBoolean(data) ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'boolean';\r\n\r\n    DataTypes.addCompare({\r\n      priority, \r\n      type,\r\n      compare: (a, b) => {\r\n        return (a ? 1 : 0) - (b ? 1 : 0);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => a === b,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return BooleanType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return BooleanType.operations.map;\r\n  }\r\n\r\n  public merge(type: BooleanType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (options.exact || options.strict)\r\n    {\r\n      return other instanceof BooleanType;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (isBoolean(value))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    const asKey = value + '';\r\n\r\n    if (this.options.true && this.options.true[asKey])\r\n    {\r\n      return true;\r\n    }\r\n    \r\n    if (this.options.false && this.options.false[asKey])\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isBoolean(value))\r\n    {\r\n      const asKey = value + '';\r\n\r\n      if (this.options.true && this.options.true[asKey])\r\n      {\r\n        return true;\r\n      }\r\n      \r\n      if (this.options.false && this.options.false[asKey])\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): BooleanType\r\n  {\r\n    return new BooleanType({});\r\n  }\r\n\r\n  public clone(): BooleanType\r\n  {\r\n    return new BooleanType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return BooleanType.encode(this);\r\n  }\r\n\r\n  public create(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\r\n  }\r\n\r\n  public fromJson(json: boolean): boolean\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: boolean): boolean\r\n  {\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPR = 1;\r\n\r\nexport class NotExpression extends Expression \r\n{\r\n\r\n  public static STEP_NOT = 'not';\r\n\r\n  public static id = 'not';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \r\n  {\r\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\r\n    \r\n    return new NotExpression(expression);\r\n  }\r\n\r\n  public static encode(expr: NotExpression): any \r\n  {\r\n    const expression = expr.expression.encode();\r\n\r\n    return [this.id, expression];\r\n  }\r\n\r\n  public expression: Expression;\r\n\r\n  public constructor(expression: Expression) \r\n  {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new NotExpression(this.expression.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === NotExpression.STEP_NOT\r\n      ? [1, this.expression]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expression.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return this.expression.mutates(def, arg);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class AndExpression extends Expression \r\n{\r\n\r\n  public static id = 'and';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new AndExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: AndExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AndExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AndExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new AndExpression(this.expressions.map(e => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)    \r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\r\n\r\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\r\n\r\nconst ops = AnyOperations;\r\nconst ANY_COMPLEXITY = {\r\n  complexity: 2\r\n};\r\n\r\nexport const AnyOps = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\r\n\r\n  isDefined: ops.set('isDefined', {}, ['value']),\r\n\r\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\r\n\r\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\r\n\r\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport class NullType extends Type<null> \r\n{\r\n\r\n  public static id = ID.Null;\r\n\r\n  public static operations = new Operations(ID.Null + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\r\n\r\n  public static baseType = new NullType(null);\r\n\r\n  public static decode(data: any[]): NullType \r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public static encode(type: NullType): any \r\n  {\r\n    return this.id;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return data === null ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NullType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NullType.operations.map;\r\n  }\r\n\r\n  public merge(type: NullType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof NullType;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.null();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.isEqual, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.null(),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null || value === undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public clone(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NullType.encode(this);\r\n  }\r\n\r\n  public create(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public toJson(value: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nexport class NoExpression extends Expression \r\n{\r\n\r\n  public static id = 'noop';\r\n\r\n  public static readonly instance = new NoExpression();\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \r\n  {\r\n    return this.instance\r\n  }\r\n\r\n  public static encode(expr: NoExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isObject, isString } from '../fns';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nexport class AnyType extends Type \r\n{\r\n\r\n  public static id = ID.Any;\r\n\r\n  public static operations = AnyOperations;\r\n\r\n  public static computeds = AnyComputeds;\r\n\r\n  public static baseType = new AnyType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): AnyType \r\n  {\r\n    return this.baseType;\r\n  }\r\n\r\n  public static encode(type: AnyType): any \r\n  {\r\n    return this.id\r\n  }\r\n\r\n  public static describePriority: number = 8;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (isObject(data) && isString(data.$any))\r\n    {\r\n      return new AnyType({});\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AnyType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return AnyType.operations.map;\r\n  }\r\n\r\n  public merge(type: AnyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isCompatible(other: Type): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.string();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.true();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public clone(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AnyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return DataTypes.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return DataTypes.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { isString } from '../fns';\r\nimport { AnyType } from '../types/Any';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_DEFINE = 1;\r\nconst INDEX_BODY = 2;\r\n\r\nexport class DefineExpression extends Expression \r\n{\r\n\r\n  public static STEP_DEFINE = 'define';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static id = 'def';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \r\n  {\r\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    \r\n    return new DefineExpression(define, body);\r\n  }\r\n\r\n  public static encode(expr: DefineExpression): any \r\n  {\r\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\r\n\r\n    return [this.id, define, expr.body.encode()];\r\n  }\r\n\r\n  public define: [string, Expression][];\r\n  public body: Expression;\r\n\r\n  public constructor(define: [string, Expression][], body: Expression) \r\n  {\r\n    super();\r\n    this.define = define;\r\n    this.body = body;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DefineExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    const scope = {};\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\r\n\r\n    return scope;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DefineExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { scope, context } = def.getContextWithScope(original);\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\r\n\r\n    return this.body.getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\r\n        this.define.forEach(([name, defined], index) => \r\n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\r\n        )\r\n      );\r\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DefineExpression.STEP_BODY\r\n      ? [1, this.body]\r\n      : steps[0] === DefineExpression.STEP_DEFINE\r\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.define.forEach(([name, defined]) => defined.setParent(this));\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const defineContext = def.getContextWithScope(context);\r\n\r\n    this.define.forEach(([name, defined]) => \r\n    {\r\n      defined.validate(def, defineContext.context, handler);\r\n\r\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\r\n    });\r\n    \r\n    this.body.validate(def, defineContext.context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const [, defined] of this.define)    \r\n    {\r\n      if (defined.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public with(name: string, value: ExpressionValue): DefineExpression\r\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\r\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\r\n  {\r\n    const append = isString(nameOrDefines)\r\n      ? { [nameOrDefines]: value }\r\n      : nameOrDefines;\r\n\r\n    for (const name in append)\r\n    {\r\n      const expr = Exprs.parse(append[name]);\r\n      const existing = this.define.find(([varName]) => varName === name);\r\n\r\n      if (existing) {\r\n        existing[1] = expr;\r\n      } else {\r\n        this.define.push([name, expr]);\r\n      }\r\n\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): DefineExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class DoExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'do';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new DoExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: DoExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DoExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === DoExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.condition.mutates(def, arg, directly) || \r\n      this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public do(body: Expression, condition?: Expression): DoExpression\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    if (condition)\r\n    {\r\n      this.condition = condition;\r\n      this.condition.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public while(condition: Expression): DoExpression\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_CHAIN = 1;\r\n\r\nexport class ChainExpression extends Expression \r\n{\r\n\r\n  public static id = 'chain';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \r\n  {\r\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\r\n\r\n    return new ChainExpression(chain);\r\n  }\r\n\r\n  public static encode(expr: ChainExpression): any \r\n  {\r\n    const chain = expr.chain.map(e => e.encode());\r\n\r\n    return [this.id, chain];\r\n  }\r\n\r\n  public chain: Expression[];\r\n\r\n  public constructor(chain: Expression[]) \r\n  {\r\n    super();\r\n    this.chain = chain;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ChainExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ChainExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ChainExpression(this.chain.map(c => c.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.chain[this.chain.length - 1].getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.chain.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.chain.length\r\n      ? [1, this.chain[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.chain.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.chain.forEach(subject => \r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const link of this.chain)\r\n    {\r\n      if (link.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public add(exprs: Expression | Expression[]): ChainExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    for (const expr of append)\r\n    {\r\n      this.chain.push(expr);\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_COMMENT = 1;\r\n\r\nexport class CommentExpression extends Expression \r\n{\r\n\r\n  public static id = 'comment';\r\n\r\n  public static readonly instance = new CommentExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \r\n  {\r\n    const comment = data[INDEX_COMMENT];\r\n\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static encode(expr: CommentExpression): any \r\n  {\r\n    return [this.id, expr.comment];\r\n  }\r\n\r\n  public comment: string;\r\n\r\n  public constructor(comment: string)\r\n  {\r\n    super();\r\n    this.comment = comment;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return CommentExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return CommentExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new CommentExpression(this.comment);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class GetExpression extends Expression \r\n{\r\n\r\n  public static id = 'get';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \r\n  {\r\n    if (data[INDEX_PATH])\r\n    {\r\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\r\n    }\r\n    \r\n    return new GetExpression();\r\n  }\r\n\r\n  public static encode(expr: GetExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetExpression();\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return context;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\r\n\r\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\r\n\r\nconst ops = TextOperations;\r\n\r\nexport const TextOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  uuid: ops.set('uuid'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  append: ops.set('+', {}, ['value', 'append']),\r\n\r\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\r\n\r\n  lower: ops.set('lo', {}, ['value']),\r\n\r\n  upper: ops.set('up', {}, ['value']),\r\n\r\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\r\n\r\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\r\n\r\n  repeat: ops.set('repeat', {}, ['value', 'times']),\r\n\r\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\r\n\r\n  chars: ops.set('chars', {}, ['value']),\r\n\r\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\r\n\r\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\r\n\r\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\r\n\r\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\r\n\r\n  startsWith: ops.set('starts', {}, ['value', 'test']),\r\n\r\n  endsWith: ops.set('ends', {}, ['value', 'test']),\r\n\r\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\r\n\r\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\r\n\r\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\r\n\r\n  length: ops.set('len', {}, ['value']),\r\n\r\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\r\n\r\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\r\n\r\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\r\n\r\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\r\n\r\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\r\n\r\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.set('base64', {}, ['value']),\r\n\r\n  unbase64: ops.set('unbase64', {}, ['value']),\r\n\r\n  encodeURI: ops.set('encodeURI', {}, ['value']),\r\n\r\n  decodeURI: ops.set('decodeURI', {}, ['value']),\r\n\r\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\r\n\r\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\r\n\r\n  md5: ops.set('md5', {}, ['value']),\r\n\r\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\r\n\r\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\r\n\r\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['value']),\r\n\r\n  isNotEmpty: ops.set('n?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLower: ops.set('lo?', {}, ['value']),\r\n\r\n  isUpper: ops.set('up?', {}, ['value']),\r\n\r\n  isUuid: ops.set('uuid?', {}, ['value']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTextComputeds.set('toUpper', TextOps.upper);\r\nTextComputeds.set('toLower', TextOps.lower);\r\nTextComputeds.set('chars', TextOps.chars);\r\nTextComputeds.set('trim', TextOps.trim);\r\nTextComputeds.set('soundex', TextOps.soundex);\r\nTextComputeds.set('metaphone', TextOps.metaphone);\r\nTextComputeds.set('base64', TextOps.base64);\r\nTextComputeds.set('unbase64', TextOps.unbase64);\r\nTextComputeds.set('encodeURI', TextOps.encodeURI);\r\nTextComputeds.set('decodeURI', TextOps.decodeURI);\r\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\r\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\r\nTextComputeds.set('md5', TextOps.md5);\r\nTextComputeds.set('toNumber', TextOps.toNumber);\r\nTextComputeds.set('isEmpty', TextOps.isEmpty);\r\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\r\nTextComputeds.set('isLower', TextOps.isLower);\r\nTextComputeds.set('isUpper', TextOps.isUpper);","\r\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\r\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from './Enum';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 1;\r\nconst RANDOM_MAX = 16;\r\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\r\n\r\nexport interface TextOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  requireUpper?: boolean;\r\n  requireLower?: boolean;\r\n  forceUpper?: boolean;\r\n  forceLower?: boolean;\r\n  matches?: RegExp;\r\n}\r\n\r\nexport class TextType extends Type<TextOptions> \r\n{\r\n\r\n  public static id = ID.Text;\r\n\r\n  public static operations = TextOperations;\r\n\r\n  public static computeds = TextComputeds;\r\n  \r\n  public static baseType = new TextType({});\r\n\r\n  public static decode(data: any[]): TextType \r\n  {\r\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: TextType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): TextOptions\r\n  {\r\n    const matches = options.matches;\r\n\r\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: TextOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n    const matches = encoded.matches;\r\n\r\n    if (matches) encoded.matches = [matches.source, matches.flags];\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 3;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isString(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new TextType({\r\n      min: data.length,\r\n      max: data.length,\r\n      requireLower: data.toLowerCase() === data,\r\n      requireUpper: data.toUpperCase() === data\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 4;\r\n    const type: DataTypeRaw = 'string';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a.localeCompare(b);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<string>({\r\n      priority,\r\n      isValid: isString,\r\n      get: (x, step) => x[step],\r\n      set: (x, step, value) => {},\r\n      remove: (x, step) => x.substring(0, step) + x.substring(step + 1),\r\n      has: (x, step) => x[step] !== undefined,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TextType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TextType.operations.map;\r\n  }\r\n\r\n  public merge(type: TextType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.requireLower = o1.requireLower && o2.requireLower;\r\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          return Types.CHAR;\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof TextType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax > max))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const lower = this.options.forceLower || this.options.requireUpper;\r\n      const otherLower = other.options.forceLower || other.options.requireLower;\r\n\r\n      if (lower && !otherLower)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const upper = this.options.forceUpper || this.options.requireUpper;\r\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\r\n\r\n      if (upper && !otherUpper)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const matches = this.options.matches;\r\n      const otherMatches = other.options.matches;\r\n\r\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.compare, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      ignoreCase: Exprs.true(),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isString(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (matches && matches instanceof RegExp && !matches.test(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isString(value))\r\n    {\r\n      if (this.options.forceLower)\r\n      {\r\n        value = value.toLowerCase();\r\n      }\r\n\r\n      if (this.options.forceUpper)\r\n      {\r\n        value = value.toUpperCase();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TextType\r\n  {\r\n    return new TextType({});\r\n  }\r\n\r\n  public clone(): TextType\r\n  {\r\n    return new TextType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TextType.encode(this);\r\n  }\r\n\r\n  public create(): string\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\r\n    const lower = requireLower || forceLower;\r\n    const upper = requireUpper || forceUpper;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const n = rnd(chosenMin, chosenMax + 1, true);\r\n    let out = '';\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\r\n    }\r\n\r\n    if (lower) out = out.toLowerCase();\r\n    if (upper) out = out.toUpperCase();\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: string): string\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: string): string\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\r\n\r\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\r\n\r\nconst ops = MapOperations;\r\n\r\nexport const MapOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\r\n\r\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\r\n\r\n  has: ops.set('has', {}, ['map', 'key']),\r\n\r\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\r\n\r\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\r\n\r\n  count: ops.set('count', { }, ['map']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\r\n\r\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\r\n\r\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nMapComputeds.set('copy', MapOps.copy);\r\nMapComputeds.set('keys', MapOps.keys);\r\nMapComputeds.set('values', MapOps.values);\r\nMapComputeds.set('entries', MapOps.entries);\r\nMapComputeds.set('pairs', MapOps.pairs);\r\nMapComputeds.set('count', MapOps.count);","\r\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { TextType } from './Text';\r\nimport { Expression } from '../Expression';\r\nimport { Exprs } from '../Exprs';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { MapOps } from '../ops/MapOps';\r\nimport { Types } from '../Types';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_KEY = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CONSTANTS = 3;\r\n\r\nexport interface EnumOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n  constants: Map<any, any>;\r\n}\r\n\r\nexport class EnumType extends Type<EnumOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n  \r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Enum;\r\n\r\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\r\n  \r\n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\r\n\r\n  public static decode(data: any[], types: TypeProvider): EnumType \r\n  {\r\n    const key = types.getType(data[INDEX_KEY]);\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n\r\n    return new EnumType({ key, value, constants });\r\n  }\r\n\r\n  public static encode(type: EnumType): any \r\n  {\r\n    const { key, value, constants } = type.options;\r\n\r\n    return [\r\n      this.id,\r\n      key.encode(),\r\n      value.encode(),\r\n      Array.from(constants.entries()).map(([k, v]) => [\r\n        key.toJson(k),\r\n        value.toJson(v)\r\n      ])\r\n    ];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EnumType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.value.getOperations();\r\n  }\r\n\r\n  public merge(type: EnumType): void\r\n  {\r\n    const c1 = this.options.constants;\r\n    const c2 = type.options.constants;\r\n\r\n    this.options.key = Types.merge(this.options.key, type.options.key);\r\n    this.options.value = Types.merge(this.options.value, type.options.value);\r\n\r\n    for (const [key, value] of c2.entries())\r\n    {\r\n      c1.set(key, value);\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.value.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.value.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.value;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public getWrappedType(): Type\r\n  {\r\n    return this.options.value;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof EnumType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { key, value } = this.options;\r\n\r\n    if (options.exact)\r\n    {\r\n      if (!key.isCompatible(other.options.key, options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value.isCompatible(other.options.value);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.options.value.isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.value.isSimple();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EnumType.STEP_KEY\r\n      ? this.options.key\r\n      : step === EnumType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.value.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.options.value.getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.options.value.getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === EnumType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    const { constants, value } = this.options;\r\n\r\n    if (!value.isValid(test))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const constantValue of constants.values())\r\n    {\r\n      if (DataTypes.compare(constantValue, test) === 0)\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.options.value.normalize(value);\r\n  }\r\n\r\n  public newInstance(): EnumType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n      constants: new Map(),\r\n    });\r\n  }\r\n\r\n  public clone(): EnumType\r\n  {\r\n    const { key, value, constants } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n      constants: new Map(constants.entries()),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EnumType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    const { value, constants } = this.options;\r\n    const firstKey = constants.keys().next();\r\n\r\n    return firstKey ? constants.get(firstKey) : value.create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const values = Array.from(this.options.constants.values());\r\n\r\n    return values[rnd(0, values.length, true)];\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.options.value.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.options.value.toJson(value);\r\n  }\r\n\r\n}","\r\nimport { isArray, isString, isNumber } from '../fns';\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { Type } from '../Type';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\nimport { NumberType } from '../types/Number';\r\nimport { Traverser } from '../Traverser';\r\nimport { AnyType } from '../types/Any';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_CONSTANT = 1;\r\n\r\nexport class ConstantExpression extends Expression \r\n{\r\n\r\n  public static has(e: Expression, constant: any): boolean\r\n  {\r\n    return e instanceof ConstantExpression && e.value === constant;\r\n  }\r\n\r\n  public static is(e: Expression): e is ConstantExpression\r\n  {\r\n    return e instanceof ConstantExpression;\r\n  }\r\n\r\n  public static id = 'constant';\r\n\r\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \r\n  {\r\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ConstantExpression): any \r\n  {\r\n    const value = AnyType.baseType.toJson(expr.value);\r\n\r\n    return isArray(value)\r\n      ? [this.id, value]\r\n      : value;\r\n  }\r\n\r\n  public value: any;\r\n\r\n  public constructor(value: any) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ConstantExpression.id;\r\n  }\r\n\r\n  public getComplexity(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ConstantExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ConstantExpression(DataTypes.copy(this.value));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const value = this.value;\r\n\r\n    if (isString(value)) \r\n    {\r\n      return new EnumType({\r\n        key: TextType.baseType.newInstance(),\r\n        value: TextType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    if (isNumber(value)) \r\n    {\r\n      return new EnumType({\r\n        key: NumberType.baseType.newInstance(),\r\n        value: NumberType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    const described = def.describe(this.value);\r\n\r\n    if (described)\r\n    {\r\n      described.removeDescribedRestrictions();\r\n    }\r\n\r\n    return described;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { GetExpression } from './Get';\r\nimport { ConstantExpression } from './Constant';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class PathExpression extends Expression \r\n{\r\n\r\n  public static id = 'path';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \r\n  {\r\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\r\n    \r\n    return new PathExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: PathExpression): any \r\n  {\r\n    return [this.id, expr.expressions.map((e) => e.encode())];\r\n  }\r\n\r\n  public static createForLegacy(path: Expression[])\r\n  {\r\n    for (let i = path.length - 1; i >= 0; i--)\r\n    {\r\n      const node = path[i];\r\n\r\n      if (node instanceof PathExpression)\r\n      {\r\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\r\n        {\r\n          path.splice(i, 1, ...node.expressions);\r\n        }\r\n      }\r\n    }\r\n\r\n    return new PathExpression(path);\r\n  }\r\n\r\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\r\n  {\r\n    const isPath = pathData[0] === PathExpression.id;\r\n    const path = isPath\r\n      ? PathExpression.decode(pathData, exprs)\r\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\r\n\r\n    if (isPath) {\r\n      exprs.setLegacy();\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return PathExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return PathExpression.encode(this);\r\n  }\r\n\r\n  public clone(): PathExpression\r\n  {\r\n    return new PathExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getPathType(this.expressions, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n    \r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const path = this.expressions;\r\n\r\n    if (path.length === 0)\r\n    {\r\n      handler({\r\n        type: ValidationType.EMPTY_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    let thisType = path[0].getType(def, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: path[0],\r\n        parent: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      path[0].validate(def, context, handler);\r\n\r\n      for (let i = 1; i < path.length; i++)\r\n      {\r\n        const node = path[i];\r\n\r\n        node.validate(def, context, handler, thisType);\r\n\r\n        thisType = node.isPathNode()\r\n          ? node.getType(def, context, thisType)\r\n          : thisType.getSubType(node, def, context);\r\n\r\n        if (!thisType)\r\n        {\r\n          handler({\r\n            type: ValidationType.INVALID_EXPRESSION,\r\n            severity: ValidationSeverity.HIGH,\r\n            context,\r\n            subject: node,\r\n            parent: this,\r\n          });\r\n          \r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)\r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public isWritable(defs: DefinitionProvider)\r\n  {\r\n    return this.expressions.length > 0\r\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\r\n      : false;\r\n  }\r\n\r\n  public isMutating(arg: string, directly: boolean = false): boolean\r\n  {\r\n    const e0 = this.expressions[0];\r\n    const e1 = this.expressions[1];\r\n    const e2 = this.expressions[2]; // tslint:disable-line: no-magic-numbers\r\n\r\n    if (!(e0 instanceof GetExpression && e1 instanceof ConstantExpression && e1.value === arg))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return directly ? true : !!e2;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_EXPRESSION = 2;\r\n\r\nexport class ComputedExpression extends Expression \r\n{\r\n\r\n  public static STEP_EXPRESSION = 'expression';\r\n\r\n  public static id = 'comp';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider) \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    if (data[INDEX_EXPRESSION]) \r\n    {\r\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\r\n    }\r\n    \r\n    return new ComputedExpression(name);\r\n  }\r\n\r\n  public static encode(expr: ComputedExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string) \r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ComputedExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const comp = def.getComputed(this.name);\r\n\r\n    if (!comp)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    const op = def.getOperation(comp.op);    \r\n    \r\n    return op ? op.complexity : 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ComputedExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ComputedExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.OUTSIDE_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      if (!def.hasComputed(thisType, this.name))\r\n      {\r\n        handler({\r\n          type: ValidationType.INVALID_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject: this,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    const comp = defs.getComputed(this.name);\r\n\r\n    return !comp || !!comp.writeable;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { NumberType } from '../types/Number';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { isNumber } from '../fns';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_VARIABLE = 1;\r\nconst INDEX_START = 2;\r\nconst INDEX_END = 3;\r\nconst INDEX_BODY = 4;\r\nconst INDEX_BREAK = 5;\r\nconst INDEX_MAX = 6;\r\n\r\nexport class ForExpression extends Expression \r\n{\r\n\r\n  public static STEP_START = 'start';\r\n\r\n  public static STEP_END = 'end';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'for';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \r\n  {\r\n    const variable = data[INDEX_VARIABLE];\r\n    const start = exprs.getExpression(data[INDEX_START]);\r\n    const end = exprs.getExpression(data[INDEX_END]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new ForExpression(variable, start, end, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: ForExpression): any \r\n  {\r\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public variable: string;\r\n  public start: Expression;\r\n  public end: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.variable = variable;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ForExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.variable]: NumberType.baseType.newInstance(),\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ForExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\r\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\r\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ForExpression.STEP_START\r\n      ? [1, this.start]\r\n      : steps[0] === ForExpression.STEP_END\r\n        ? [1, this.end]\r\n        : steps[0] === ForExpression.STEP_BODY\r\n          ? [1, this.body]\r\n          : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.start.setParent(this);\r\n    this.end.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\r\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.start.mutates(def, arg, directly) || \r\n      this.end.mutates(def, arg, directly) || \r\n      this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    this.variable = variable;\r\n\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      this.body = body;\r\n      this.body.setParent(this);\r\n    }\r\n\r\n    if (breakVariable)\r\n    {\r\n      this.breakVariable = breakVariable;\r\n    }\r\n\r\n    if (isNumber(maxIterations))\r\n    {\r\n      this.maxIterations = maxIterations;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public startAt(start: ExpressionValue): ForExpression\r\n  {\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public endAt(end: ExpressionValue): ForExpression\r\n  {\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): ForExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string)\r\n  {\r\n    this.variable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetDataExpression extends Expression \r\n{\r\n\r\n  public static id = 'data';\r\n\r\n  public static readonly instance = new GetDataExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetDataExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetDataExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetDataExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetDataExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const data = def.getData(this.name);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getData(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }  \r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false; \r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\r\n\r\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\r\n\r\nconst ops = EntityOperations;\r\n\r\nexport const EntityOps = \r\n{\r\n\r\n  newInstance: ops.set('newInstance', {}, ['name'], ['initial'], [], [], ['name']),\r\n\r\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\r\n\r\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\r\n\r\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\r\n\r\nconst ops = ObjectOperations;\r\n\r\nexport const ObjectOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  has: ops.set('has', {}, ['object', 'key']),\r\n\r\n  get: ops.set('get', {}, ['object', 'key']),\r\n\r\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\r\n\r\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\r\n\r\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nObjectComputeds.set('copy', ObjectOps.copy);","\r\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport interface ObjectOptions \r\n{\r\n  props: TypeMap;\r\n}\r\n\r\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \r\n{\r\n\r\n  public static wilcardProperty = '*';\r\n\r\n  public static id = ID.Object;\r\n\r\n  public static operations = ObjectOperations;\r\n\r\n  public static computeds = ObjectComputeds;\r\n\r\n  public static baseType = new ObjectType({ props: {} });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ObjectType \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\r\n    \r\n    return new ObjectType({ props });\r\n  }\r\n\r\n  public static encode(type: ObjectType): any \r\n  {\r\n    const props = objectMap(type.options.props, p => p.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public static describePriority: number = 5;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isObject(data) || data === null)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const type = new ObjectType({ props: {} });\r\n\r\n    cache.set(data, type);\r\n\r\n    type.options.props = objectMap(data, d => describer.describe(d));\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 7;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, reader);\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, writer);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isObject(x)) {\r\n          const newObject: any = {};\r\n\r\n          setObjectCopy(x, newObject);\r\n  \r\n          for (const prop in x) {\r\n            newObject[copy(prop)] = copy(x[prop]);\r\n          }\r\n  \r\n          return newObject;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        if (a === null) return 1;\r\n        if (b === null) return -1;\r\n\r\n        let less = 0;\r\n        let more = 0;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            less++;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            more++;\r\n          }\r\n        }\r\n\r\n        for (const prop in a) {\r\n          if (prop in b)\r\n          {\r\n            const c = compare(a[prop], b[prop]);\r\n\r\n            if (c < 0) less++;\r\n            if (c > 0) more++;\r\n          }\r\n        }\r\n\r\n        return DataTypes.getCompare(less, more);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        if ((a === null) !== (b === null)) return false;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            return false;\r\n          } else if (!equals(a[prop], b[prop])) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<Record<string, any>>({\r\n      priority,\r\n      isValid: (value) => isObject(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue),\r\n      remove: (value, step) => DataTypes.objectRemove(value, step),\r\n      has: (value, step) => step in value,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ObjectType.operations.map;\r\n  }\r\n\r\n  public merge(type: Type<O>): void\r\n  {\r\n    const p1 = this.options.props;\r\n    const p2 = type.options.props;\r\n\r\n    for (const prop in p1)\r\n    {\r\n      if (prop in p2 && p2[prop])\r\n      {\r\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\r\n      }\r\n      else if (p1[prop])\r\n      {\r\n        p1[prop] = Types.optional(p1[prop]);\r\n      }\r\n    }\r\n\r\n    for (const prop in p2)\r\n    {\r\n      if (!(prop in p1) && p2[prop])\r\n      {\r\n        p1[prop] = Types.optional(p2[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (isString(expr.value))\r\n      {\r\n        return this.options.props[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof TextType)\r\n      {\r\n        const types = objectValues(this.options.props);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n    }\r\n\r\n    return this.getWildcardType();\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const props = objectValues(this.options.props);\r\n\r\n    return [\r\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\r\n      {\r\n        key: new EnumType({\r\n          key: TextType.baseType,\r\n          value: TextType.baseType,\r\n          constants: new Map(\r\n            objectValues(this.options.props, (prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(props, NullType.baseType),\r\n      },\r\n      { \r\n        key: TextType.baseType, \r\n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\r\n      }\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.options.props, \r\n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => DataTypes.objectRemove(this.options.props, prop))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options.props[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof ObjectType)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!other.options.props[prop]) \r\n      {\r\n        if (props[prop].isOptional())\r\n        {\r\n          continue;\r\n        }\r\n        else\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      if (!props[prop].isCompatible(other.options.props[prop], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (options.exact)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop])\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    else if (wildcard)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.object(\r\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ObjectOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop) \r\n        }).run(\r\n          t ? t.getValidateExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop),\r\n          test: Exprs.get('test', prop) \r\n        }).run(\r\n          t ? t.getCompareExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = property\r\n    const hasFrom = from !== null && from !== undefined;\r\n    const hasTo = to !== null && to !== undefined;\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from !== to) // rename\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: Exprs.get('value', from),\r\n        }),\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isObject(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop].isValid(value[prop])) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (wildcard)\r\n    {\r\n      for (const prop in value)\r\n      {\r\n        if (!props[prop] && !wildcard.isValid(value[prop]))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ObjectType<O>\r\n  {\r\n    return new ObjectType({ props: {} } as O);\r\n  }\r\n\r\n  public clone(): ObjectType<O>\r\n  {\r\n    return new ObjectType<O>({\r\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\r\n    } as O);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    const { props } = this.options;\r\n    const out: any = Object.create(null);\r\n    \r\n    for (const prop in props)\r\n    {\r\n      const propType = props[prop];\r\n\r\n      if (propType && !propType.isOptional())\r\n      {\r\n        out[prop] = propType.create();\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { props } = this.options;\r\n    const out: any = Object.create(null);\r\n\r\n    for (const prop in props)\r\n    {\r\n      if (props[prop])\r\n      {\r\n        out[prop] = props[prop].random(rnd);\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return objectMap(json, (value, key) => {\r\n      const propType = this.options.props[key];\r\n\r\n      return propType ? propType.fromJson(value) : value;\r\n    });\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return objectMap(value, (subvalue, key) => {\r\n      const propType = this.options.props[key];\r\n      \r\n      return propType ? propType.toJson(subvalue) : subvalue;\r\n    });\r\n  }\r\n\r\n  public getWildcardType(): Type | null\r\n  {\r\n    return this.options.props[ObjectType.wilcardProperty] || null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { ObjectType } from './Object';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class EntityType extends Type<string>\r\n{\r\n\r\n  public static STEP_ENTITY = 'entity';\r\n\r\n  public static id = ID.Entity;\r\n\r\n  public static operations = EntityOperations;\r\n\r\n  public static computeds = EntityComputeds;\r\n\r\n  public static baseType = new EntityType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): EntityType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new EntityType( type, types );\r\n  }\r\n\r\n  public static encode(type: EntityType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(name: string, provider: TypeProvider): EntityType\r\n  {\r\n    return new EntityType(name, provider);\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    return this.provider\r\n      ? this.provider.getType(this.options, NullType.baseType)\r\n      : ObjectType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EntityType.id;\r\n  }\r\n\r\n  public merge(type: EntityType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n    // return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public getWrappedType(): Type\r\n  {\r\n    return this.getType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof EntityType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EntityType.STEP_ENTITY\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === aliased\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EntityType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EntityType } from '../types/Entity';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetEntityExpression extends Expression \r\n{\r\n\r\n  public static id = 'entity';\r\n\r\n  public static readonly instance = new GetEntityExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetEntityExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetEntityExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetEntityExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetEntityExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EntityType(this.name, def);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getEntity(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false; \r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetRelationExpression extends Expression \r\n{\r\n\r\n  public static id = 'relation';\r\n\r\n  public static readonly instance = new GetRelationExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetRelationExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetRelationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetRelationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetRelationExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EnumType({\r\n      key: TextType.baseType,\r\n      value: TextType.baseType,\r\n      constants: new Map([\r\n        ['relation', this.name],\r\n      ])\r\n    });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getRelation(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false; \r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { NoExpression } from './No';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_CASES = 1;\r\nconst INDEX_OTHERWISE = 2;\r\n\r\nexport class IfExpression extends Expression \r\n{\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_IF = 'if';\r\n\r\n  public static STEP_THEN = 'then';\r\n\r\n  public static STEP_ELSE = 'else';\r\n\r\n  public static id = 'if';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \r\n  {\r\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\r\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\r\n\r\n    return new IfExpression(cases, otherwise);\r\n  }\r\n\r\n  public static encode(expr: IfExpression): any \r\n  {\r\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.otherwise, undefined)\r\n      ? [this.id, cases]\r\n      : [this.id, cases, expr.otherwise.encode()];\r\n  }\r\n\r\n  public cases: [Expression, Expression][];\r\n  public otherwise: Expression;\r\n\r\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \r\n  {\r\n    super();\r\n    this.cases = cases;\r\n    this.otherwise = otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return IfExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [test, result]) => Math.max(\r\n        max, \r\n        test.getComplexity(def, context),\r\n        result.getComplexity(def, context)\r\n      ), \r\n      this.otherwise.getComplexity(def, context)\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return IfExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([test, value]) => value)\r\n      .concat(this.otherwise)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(IfExpression.STEP_CASES, () => \r\n        this.cases.forEach(([condition, result], index) => \r\n          traverse.step(index, () => {\r\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\r\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\r\n          })\r\n        )\r\n      );\r\n      if (this.otherwise !== NoExpression.instance) {\r\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\r\n      }\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === IfExpression.STEP_CASES\r\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n        ? steps[2] === IfExpression.STEP_IF\r\n          ? [3, this.cases[steps[1]][0]]\r\n          : steps[2] === IfExpression.STEP_THEN\r\n            ? [3, this.cases[steps[1]][1]]\r\n            : null\r\n        : null\r\n      : steps[0] === IfExpression.STEP_ELSE\r\n        ? [1, this.otherwise]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.cases.forEach(([condition, result]) => {\r\n      condition.setParent(this);\r\n      result.setParent(this);\r\n    });\r\n\r\n    this.otherwise.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.cases.forEach(([condition, result]) => \r\n    {\r\n      this.validateType(def, context, expectedType, condition, handler);\r\n      \r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.otherwise.validate(def, context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const [condition, result] of this.cases)\r\n    {\r\n      if (condition.mutates(def, arg, directly) || result.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return this.otherwise.mutates(def, arg, directly);\r\n  }\r\n\r\n  public if(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(body: Expression)\r\n  {\r\n    this.cases[this.cases.length - 1][1] = body;\r\n\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public elseif(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public else(body: Expression)\r\n  {\r\n    this.otherwise = body;\r\n    this.otherwise.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_ARGS = 2;\r\n\r\nexport class InvokeExpression extends Expression \r\n{\r\n\r\n  public static id = 'invoke';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new InvokeExpression(name, args);\r\n  }\r\n\r\n  public static encode(expr: InvokeExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.name, args];\r\n  }\r\n\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return InvokeExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return func.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return InvokeExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    return func\r\n      ? func.getReturnType(def, argTypes)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args ,arg))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    \r\n    if (!func) \r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_FUNCTION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      const params: TypeMap = {};\r\n\r\n      objectEach(func.params.options.props, (param, paramName) =>\r\n      {\r\n        const arg = this.args[paramName];\r\n\r\n        this.validateType(def, context, param, arg, handler);\r\n\r\n        if (arg)\r\n        {\r\n          params[paramName] = arg.getType(def, context);\r\n        }\r\n      });\r\n\r\n      // func.options.expression.validate(def, Types.object(params), handler);\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const argName in this.args)\r\n    {\r\n      const argType = this.args[argName];\r\n\r\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && func.mutates(def, argName)))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false; \r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return `Function \"${this.name}\" does not exist`;\r\n    }\r\n\r\n    return func.expression;\r\n  }\r\n\r\n  public named(name: string): InvokeExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): InvokeExpression\r\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { EntityType } from '../types/Entity';\r\nimport { DataTypes } from '../DataTypes';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_ENTITY = 1;\r\nconst INDEX_NAME = 2;\r\nconst INDEX_ARGS = 3;\r\n\r\nexport class MethodExpression extends Expression \r\n{\r\n\r\n  public static id = 'method';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \r\n  {\r\n    const entity = data[INDEX_ENTITY];\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new MethodExpression(entity, name, args);\r\n  }\r\n\r\n  public static encode(expr: MethodExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.entity, expr.name, args];\r\n  }\r\n\r\n  public entity: string;\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(entity: string, name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.entity = entity;\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MethodExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity || !entity.methods[this.name])\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return entity.methods[this.name].expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MethodExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return null;\r\n    }\r\n    \r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    argTypes[Expression.INSTANCE] = entity.type;\r\n    \r\n    return method.getReturnType(def, argTypes);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args, arg))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_THIS,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_METHOD,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const params: TypeMap = {};\r\n\r\n    params[Expression.INSTANCE] = entity.type;\r\n\r\n    objectEach(method.params.options.props, (param, paramName) =>\r\n    {\r\n      const arg = this.args[paramName];\r\n\r\n      this.validateType(def, context, param, arg, handler);\r\n\r\n      if (arg)\r\n      {\r\n        params[paramName] = arg.getType(def, context);\r\n      }\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const argName in this.args)\r\n    {\r\n      const argType = this.args[argName];\r\n\r\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && method.mutates(def, argName)))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return `Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    return method.expression;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public named(name: string): MethodExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): MethodExpression\r\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class OrExpression extends Expression \r\n{\r\n\r\n  public static id = 'or';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new OrExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: OrExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OrExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OrExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OrExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types: Type[] = this.expressions\r\n      .map(e => e.getType(def, context))\r\n      .concat(BooleanType.baseType)\r\n      .filter(t => !!t)\r\n    ;\r\n    \r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)\r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Operation } from '../Operation';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { AndExpression } from './And';\r\nimport { OrExpression } from './Or';\r\nimport { NotExpression } from './Not';\r\nimport { DataTypes } from '../DataTypes';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_PARAMS = 2;\r\nconst INDEX_SCOPE = 3;\r\n\r\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \r\n{\r\n\r\n  public static id = 'op';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\r\n    \r\n    return new OperationExpression(name, params, scopeAlias);\r\n  }\r\n\r\n  public static encode(expr: OperationExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return isEmpty(expr.scopeAlias)\r\n      ? [this.id, expr.name, params]\r\n      : [this.id, expr.name, params, expr.scopeAlias]\r\n  }\r\n\r\n  public static create<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\r\n  }\r\n\r\n  public name: string;\r\n  public params: ExpressionMap;\r\n  public scopeAlias: Record<string, string>;\r\n\r\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.params = params;\r\n    this.scopeAlias = scopeAlias;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OperationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const op = def.getOperation(this.name);\r\n    let complexity = op ? op.complexity : 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OperationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const { name, params, scopeAlias } = this;\r\n    const operation = def.getOperation(name);\r\n    const operationTypes = def.getOperationTypes(name);\r\n\r\n    if (!operation)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_OPERATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\r\n    const scopeContext = operation.hasScope.length > 0\r\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\r\n      : context;\r\n\r\n    for (const paramName in expectedTypes)\r\n    {\r\n      const optional = operation.optional.indexOf(paramName) !== -1;\r\n      const expectedRequired = expectedTypes[paramName];\r\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\r\n      const subject = params[paramName];\r\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n      const paramContext = hasScope ? scopeContext : context;\r\n      \r\n      this.validateType(def, paramContext, expected, subject, handler);\r\n    }\r\n\r\n    for (const paramName in params)\r\n    {\r\n      const subject = params[paramName];\r\n      const operationType = operationTypes.params[paramName];\r\n\r\n      if (!(paramName in expectedTypes) && operationType)\r\n      {\r\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n        const paramContext = hasScope ? scopeContext : context;\r\n\r\n        handler({\r\n          type: ValidationType.MISSING_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context: paramContext,\r\n          subject,\r\n          parent: this,\r\n        });\r\n\r\n        params[paramName].validate(def, paramContext, handler);\r\n      }\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    const { name, params } = this;\r\n    const operation = def.getOperation(name);\r\n\r\n    if (!operation)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const paramName in params)\r\n    {\r\n      const paramType = params[paramName];\r\n\r\n      if (paramType.mutates(def, arg, directly) || (paramType instanceof PathExpression && paramType.isMutating(arg, true) && operation.mutates.indexOf(paramName) !== -1))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\r\n  {\r\n    const param = Exprs.parse(value);\r\n\r\n    this.params[name] = param;\r\n    param.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\r\n  {\r\n    this.scopeAlias[scoped] = alias;\r\n\r\n    return this;\r\n  }\r\n\r\n  public and(exprs: Expression | Expression[]): AndExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new AndExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public or(exprs: Expression | Expression[]): OrExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new OrExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public not(): NotExpression\r\n  {\r\n    return new NotExpression(this);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\n\r\nexport class ReturnExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'return';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    \r\n    return new ReturnExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ReturnExpression): any \r\n  {\r\n    const returnValue = expr.value.encode();\r\n\r\n    return returnValue !== undefined\r\n      ? [this.id, returnValue]\r\n      : [this.id];\r\n  }\r\n\r\n  public value: Expression;\r\n\r\n  public constructor(value: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReturnExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.value.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReturnExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ReturnExpression(this.value.encode());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.value \r\n      ? this.value.getType(def, context)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ReturnExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.value.mutates(def, arg, directly);\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\n\r\nexport class SetExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'set';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n\r\n    return new SetExpression(path, value);\r\n  }\r\n\r\n  public static encode(expr: SetExpression): any \r\n  {\r\n    return [this.id, expr.path.encode(), expr.value.encode()];\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue)\r\n  {\r\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n\r\n  public constructor(path: PathExpression, value: Expression) \r\n  {\r\n    super();\r\n\r\n    this.path = path;\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SetExpression(this.path.clone(), this.value.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\r\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SetExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === SetExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      this.validateType(def, context, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public to(value: ExpressionValue): SetExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.path.isMutating(arg, directly) || \r\n      this.value.mutates(def, arg, directly) || \r\n      this.path.mutates(def, arg, directly);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { Operation } from '../Operation';\r\nimport { NoExpression } from './No';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_OP = 2;\r\nconst INDEX_CASES = 3;\r\nconst INDEX_DEFAULT_CASE = 4;\r\n\r\nexport class SwitchExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_CASE = 'case';\r\n\r\n  public static STEP_RESULT = 'result';\r\n\r\n  public static STEP_DEFAULT = 'default';\r\n\r\n  public static id = 'switch';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const op = data[INDEX_OP];\r\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\r\n      tests.map((t: any) => exprs.getExpression(t)), \r\n      exprs.getExpression(result)\r\n    ]);\r\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\r\n\r\n    return new SwitchExpression(value, op, cases, defaultCase);\r\n  }\r\n\r\n  public static encode(expr: SwitchExpression): any \r\n  {\r\n    const value = expr.value.encode();\r\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.defaultCase, undefined)\r\n      ? [this.id, value, expr.op, cases]\r\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\r\n  }\r\n\r\n  public value: Expression;\r\n  public op: string;\r\n  public cases: [Expression[], Expression][];\r\n  public defaultCase: Expression;\r\n\r\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n    this.op = op;\r\n    this.cases = cases;\r\n    this.defaultCase = defaultCase;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SwitchExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [tests, result]) => Math.max(\r\n        max, \r\n        result.getComplexity(def, context), \r\n        tests.reduce((tmax, t) => Math.max(\r\n          tmax, \r\n          t.getComplexity(def, context)\r\n        ), 0)\r\n      ), \r\n      Math.max(\r\n        this.value.getComplexity(def, context), \r\n        this.defaultCase.getComplexity(def, context)\r\n      )\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SwitchExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([tests, value]) => value)\r\n      .concat(this.defaultCase)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n      traverse.step(SwitchExpression.STEP_CASES, () => \r\n        this.cases.forEach(([tests, result], caseIndex) =>\r\n          traverse.step(caseIndex, () => {\r\n            traverse.step(SwitchExpression.STEP_CASE, () => \r\n              tests.forEach((test, index) => \r\n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\r\n              )\r\n            );\r\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\r\n          })  \r\n        )\r\n      );\r\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SwitchExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : steps[0] === SwitchExpression.STEP_CASES\r\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n          ? steps[2] === SwitchExpression.STEP_CASE\r\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\r\n              ? [4, this.cases[steps[1]][0][steps[3]]]\r\n              : null\r\n            : steps[2] === SwitchExpression.STEP_RESULT\r\n              ? [3, this.cases[steps[1]][1]]\r\n              : null\r\n            : null\r\n        : steps[0] === SwitchExpression.STEP_DEFAULT\r\n          ? [1, this.defaultCase]\r\n          : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n    this.cases.forEach(([tests, result]) => {\r\n      tests.forEach(e => e.setParent(this));\r\n      result.setParent(this);\r\n    });\r\n    this.defaultCase.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n\r\n    this.cases.forEach(([tests, result]) => \r\n    {\r\n      tests.forEach(e => e.validate(def, context, handler));\r\n\r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.defaultCase.validate(def, context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    if (this.value.mutates(def, arg, directly))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    for (const [tests, result] of this.cases)\r\n    {\r\n      if (result.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n\r\n      for (const test of tests)\r\n      {\r\n        if (test.mutates(def, arg, directly))\r\n        {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.defaultCase.mutates(def, arg, directly);\r\n  }\r\n\r\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.op = op ? op.id : this.op;\r\n\r\n    return this;\r\n  }\r\n\r\n  public case(testValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const n = this.cases.length - 1;\r\n    const test = Exprs.parse(testValue);\r\n\r\n    test.setParent(this);\r\n\r\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\r\n    {\r\n      this.cases[n][0].push(test);\r\n    }\r\n    else\r\n    {\r\n      this.cases.push([[test], NoExpression.instance]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(bodyValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const body = Exprs.parse(bodyValue);\r\n\r\n    this.cases[this.cases.length - 1][1] = body;\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public default(body: ExpressionValue)\r\n  {\r\n    this.defaultCase = Exprs.parse(body);\r\n    this.defaultCase.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { TextType } from '../types/Text';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_TEMPLATE = 1;\r\nconst INDEX_PARAMS = 2;\r\n\r\nexport class TemplateExpression extends Expression \r\n{\r\n\r\n  public static id = 'tmpl';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \r\n  {\r\n    const template = data[INDEX_TEMPLATE];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    \r\n    return new TemplateExpression(template, params);\r\n  }\r\n\r\n  public static encode(expr: TemplateExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return [this.id, expr.template, params];\r\n  }\r\n\r\n  public template: string;\r\n  public params: ExpressionMap;\r\n\r\n  public constructor(template: string, params: ExpressionMap) \r\n  {\r\n    super();\r\n    this.template = template;\r\n    this.params = params;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TemplateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    let complexity = 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TemplateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return TextType.baseType.newInstance();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.params, subject =>\r\n    {\r\n      this.validateType(def, context, TextType.baseType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const param in this.params)\r\n    {\r\n      if (this.params[param].mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public param(name: string, value: ExpressionValue): TemplateExpression\r\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\r\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\r\n  {\r\n    const append = isString(nameOrParams)\r\n      ? { [nameOrParams]: value }\r\n      : nameOrParams;\r\n\r\n    for (const paramName in append)\r\n    {\r\n      const param = Exprs.parse(append[paramName]);\r\n      this.params[paramName] = param;\r\n      param.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyType } from '../types/Any';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst DEFAULT_CURRENT = 'current';\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CURRENT = 3;\r\n\r\nexport class UpdateExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'up';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \r\n\r\n    return new UpdateExpression(path, value, currentVariable);\r\n  }\r\n\r\n  public static encode(expr: UpdateExpression): any \r\n  {\r\n    const path = expr.path.encode();\r\n    const value = expr.value.encode();\r\n\r\n    return expr.currentVariable === DEFAULT_CURRENT\r\n      ? [this.id, path, value]\r\n      : [this.id, path, value, expr.currentVariable]\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\r\n  {\r\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n  public currentVariable: string;\r\n\r\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \r\n  {\r\n    super();\r\n    this.path = path;\r\n    this.value = value;\r\n    this.currentVariable = currentVariable;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return UpdateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.currentVariable]: AnyType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return UpdateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\r\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === UpdateExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === UpdateExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      const valueContext = def.getContext(context, {\r\n        [this.currentVariable]: expectedType,\r\n      });\r\n\r\n      this.validateType(def, valueContext, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.path.isMutating(arg, directly) || this.value.mutates(def, arg, directly) || this.path.mutates(def, arg, directly);\r\n  }\r\n\r\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.currentVariable = currentVariable || this.currentVariable;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string): UpdateExpression\r\n  {\r\n    this.currentVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class WhileExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'while';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new WhileExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: WhileExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n    \r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return WhileExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return WhileExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === WhileExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === WhileExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.condition.mutates(def, arg, directly) || \r\n      this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public while(condition: Expression)\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public do(body: Expression)\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\r\n\r\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\r\n\r\nconst ops = TupleOperations;\r\n\r\nexport const TupleOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  get: ops.set('get', {}, ['value', 'index']),\r\n\r\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\r\n\r\n  // Comparisons\r\n  \r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTupleComputeds.set('copy', TupleOps.copy);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\r\n\r\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\r\n\r\nconst ops = NumberOperations;\r\n\r\nexport const NumberOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  pi: ops.set('pi'),\r\n\r\n  pi2: ops.set('2pi'),\r\n\r\n  piHalf: ops.set('hpi'),\r\n\r\n  e: ops.set('e'),\r\n\r\n  sqrt2: ops.set('sqrt2'),\r\n\r\n  sqrt12: ops.set('sqrt1/2'),\r\n\r\n  ln2: ops.set('ln2'),\r\n\r\n  ln10: ops.set('ln10'),\r\n\r\n  log2e: ops.set('log2e'),\r\n\r\n  log10e: ops.set('log10e'),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.set('+', {}, ['value', 'addend']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor']),\r\n\r\n  min: ops.set('min', {}, ['a', 'b']),\r\n\r\n  max: ops.set('max', {}, ['a', 'b']),\r\n  \r\n  pow: ops.set('^^', {}, ['value', 'exponent']),\r\n  \r\n  atan2: ops.set('atan2', {}, ['x', 'y']),\r\n  \r\n  hypot: ops.set('hyp', {}, ['a', 'b']),\r\n  \r\n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\r\n  \r\n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\r\n\r\n  bitAnd: ops.set('&', {}, ['a', 'b']),\r\n\r\n  bitOr: ops.set('|', {}, ['a', 'b']),\r\n\r\n  bitXor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  sqrt: ops.set('sqrt', {}, ['value']),\r\n\r\n  sq: ops.set('^2', {}, ['value']),\r\n  \r\n  cbrt: ops.set('cbrt', {}, ['value']),\r\n  \r\n  floor: ops.set('floor', {}, ['value']),\r\n  \r\n  ceil: ops.set('ceil', {}, ['value']),\r\n  \r\n  up: ops.set('up', {}, ['value']),\r\n  \r\n  down: ops.set('down', {}, ['value']),\r\n  \r\n  round: ops.set('round', {}, ['value']),\r\n  \r\n  abs: ops.set('abs', {}, ['value']),\r\n  \r\n  neg: ops.set('neg', {}, ['value']),\r\n  \r\n  sign: ops.set('sign', {}, ['value']),\r\n  \r\n  log: ops.set('log', {}, ['value']),\r\n  \r\n  sin: ops.set('sin', {}, ['value']),\r\n  \r\n  cos: ops.set('cos', {}, ['value']),\r\n  \r\n  tan: ops.set('tan', {}, ['value']),\r\n  \r\n  sinh: ops.set('sinh', {}, ['value']),\r\n  \r\n  cosh: ops.set('cosh', {}, ['value']),\r\n\r\n  asin: ops.set('asin', {}, ['value']),\r\n  \r\n  acos: ops.set('acos', {}, ['value']),\r\n  \r\n  atan: ops.set('atan', {}, ['value']),\r\n  \r\n  factorial: ops.set('!', {}, ['value']),\r\n\r\n  bitFlip: ops.set('~', {}, ['value']),\r\n\r\n  // Other\r\n\r\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\r\n\r\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\r\n\r\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\r\n\r\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\r\n\r\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\r\n\r\n  fromPercent: ops.set('fromPercent', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\r\n\r\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\r\n\r\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\r\n\r\n  isPositive: ops.set('+?', {}, ['value']),\r\n\r\n  isNegative: ops.set('-?', {}, ['value']),\r\n\r\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\r\n\r\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nNumberComputeds.set('floor', NumberOps.floor);\r\nNumberComputeds.set('ceil', NumberOps.ceil);\r\nNumberComputeds.set('up', NumberOps.up);\r\nNumberComputeds.set('down', NumberOps.down);\r\nNumberComputeds.set('round', NumberOps.round);\r\nNumberComputeds.set('abs', NumberOps.abs);\r\nNumberComputeds.set('negate', NumberOps.neg);\r\nNumberComputeds.set('sign', NumberOps.sign);\r\nNumberComputeds.set('isZero', NumberOps.isZero);\r\nNumberComputeds.set('isWhole', NumberOps.isWhole);\r\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\r\nNumberComputeds.set('isPositive', NumberOps.isPositive);\r\nNumberComputeds.set('isNegative', NumberOps.isNegative);\r\nNumberComputeds.set('toText', NumberOps.toText);","\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\nimport { ID } from '../types/ID';\r\n\r\n\r\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\r\n\r\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\r\n\r\nconst ops = ListOperations;\r\n\r\nexport const ListOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\r\n\r\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\r\n\r\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\r\n\r\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\r\n\r\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\r\n\r\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\r\n\r\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\r\n\r\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\r\n\r\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\r\n\r\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\r\n\r\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\r\n\r\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\r\n\r\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\r\n\r\n  count: ops.set('count', {}, ['list']),\r\n\r\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\r\n\r\n  flatten: ops.set('flatten', {}, ['list'], [], [], [], ['list']),\r\n\r\n  // Iteration\r\n\r\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\r\n\r\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\r\n\r\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\r\n\r\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\r\n\r\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\r\n\r\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\r\n\r\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\r\n\r\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['list']),\r\n\r\n  isNotEmpty: ops.set('!0', {}, ['list']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n  \r\n};\r\n\r\nListComputeds.set('copy', ListOps.copy);\r\nListComputeds.set('reversed', ListOps.reverse);\r\nListComputeds.set('shuffled', ListOps.shuffle);\r\nListComputeds.set('first', ListOps.first);\r\nListComputeds.set('last', ListOps.last);\r\nListComputeds.set('random', ListOps.random);\r\nListComputeds.set('isEmpty', ListOps.isEmpty);\r\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\r\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { NumberType } from './Number';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from './Tuple';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_ITEM = 1;\r\nconst INDEX_OPTIONS = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\nconst REQUIRED_SUB_MIN = 10;\r\n\r\nexport interface ListOptions \r\n{\r\n  item: Type;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport class ListType extends Type<ListOptions> \r\n{\r\n\r\n  public static STEP_ITEM = 'item';\r\n\r\n  public static id = ID.List;\r\n\r\n  public static operations = ListOperations;\r\n\r\n  public static computeds = ListComputeds;\r\n\r\n  public static baseType = new ListType({ item: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ListType \r\n  {\r\n    const item = types.getType(data[INDEX_ITEM]);\r\n    const options = data[INDEX_OPTIONS] || {};\r\n\r\n    return new ListType({ item, ...options });\r\n  }\r\n\r\n  public static encode(type: ListType): any \r\n  {\r\n    const options: any = { ...type.options };\r\n    const item = options.item;\r\n    delete options.item;\r\n\r\n    return isEmpty(options)\r\n      ? [this.id, item.encode()]\r\n      : [this.id, item.encode(), options];\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isArray(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const type = new ListType({\r\n      item: AnyType.baseType,\r\n      min: data.length,\r\n      max: data.length\r\n    });\r\n\r\n    cache.set(data, type);\r\n\r\n    let item = describer.describe(data[0]);\r\n\r\n    for (let i = 1; i < data.length; i++)\r\n    {\r\n      item = describer.merge(item, data[i]);\r\n    }\r\n\r\n    type.options.item = item;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 8;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      toJson: (json, writer) => {\r\n        if (isArray(json)) {\r\n          return json.map(writer);\r\n        }\r\n      },\r\n      fromJson: (json, reader) => {\r\n        if (isArray(json)) {\r\n          return json.map(reader);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isArray(a);\r\n        const bt = isArray(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (at) {\r\n          let dl = a.length - b.length;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            for (let i = 0; i < a.length; i++) {\r\n              const c = compare(a[i], b[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isArray(a);\r\n        const bl = isArray(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (al)\r\n        {\r\n          if (a.length !== b.length)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (let i = 0; i < a.length; i++)\r\n          {\r\n            if (!equals(a[i], b[i]))\r\n            {\r\n              return false\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isArray(x)) {\r\n          const newArray: any[] = [];\r\n\r\n          setObjectCopy(x, newArray);\r\n\r\n          for (const item of x) {\r\n            newArray.push(copy(item));\r\n          }\r\n\r\n          return newArray;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<any[]>({\r\n      priority,\r\n      isValid: (value) => isArray(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\r\n      remove: (value, step) => DataTypes.arrayRemove(value, step),\r\n      has: (value, step) => value[step] !== undefined,\r\n    });\r\n  }\r\n\r\n  public static forItem(itemOrClass: TypeInput)\r\n  {\r\n    const item = Types.parse(itemOrClass);\r\n    \r\n    return new ListType({ item });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ListType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ListType.operations.map;\r\n  }\r\n\r\n  public merge(type: ListType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.item = Types.merge(o1.item, o2.item);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.max = Math.max(o1.max, o2.max);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return isNumber(this.options.min) && expr.value < this.options.min\r\n          ? this.options.item\r\n          : Types.optional(this.options.item);\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.optional(this.options.item);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\r\n          {\r\n            return this.options.item;\r\n          }\r\n\r\n          return Types.optional(this.options.item);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const { min, item } = this.options;\r\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\r\n    const required: TypeSub[] = [];\r\n\r\n    for (let i = 0; i < requiredMin; i++) {\r\n      required.push({ key: i, value: item });\r\n    }\r\n\r\n    return [\r\n      ...required,\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(item) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    if (!options.strict &&\r\n      !options.exact &&\r\n      other instanceof TupleType &&\r\n      !other.options.some(o => !item.isCompatible(o, options)))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof ListType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!item.isCompatible(other.options.item, options))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ListType.STEP_ITEM \r\n      ? this.options.item \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.item.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { item } = this.options;\r\n\r\n    item.removeDescribedRestrictions();\r\n\r\n    this.options = { item };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ListOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.get('value'),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.item.getCompareExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = item\r\n    return Exprs.op(ListOps.map, {\r\n      list: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      item: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!Array.isArray(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { item, min, max } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const val of value)\r\n    {\r\n      if (!item.isValid(val)) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isArray(value))\r\n    {\r\n      const item = this.options.item; \r\n\r\n      for (let i = 0; i < value.length; i++)\r\n      {\r\n        value[i] = item.normalize(value[i]);\r\n      }\r\n    }\r\n    \r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ListType\r\n  {\r\n    const { item } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): ListType\r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.clone(),\r\n      min,\r\n      max,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ListType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const start = Math.min(chosenMin, chosenMax);\r\n    const end = Math.max(chosenMin, chosenMax);\r\n    const n = rnd(start, end + 1, true);\r\n    const out: any[] = [];\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out.push(this.options.item.random(rnd));\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\r\nimport { NumberOps } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ListType } from './List';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\n\r\n\r\nconst INDEX_ELEMENTS = 1;\r\n\r\nexport class TupleType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Tuple;\r\n\r\n  public static operations = TupleOperations;\r\n\r\n  public static computeds = TupleComputeds;\r\n\r\n  public static baseType = new TupleType([]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): TupleType \r\n  {\r\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\r\n\r\n    return new TupleType(elements);\r\n  }\r\n\r\n  public static encode(type: TupleType): any \r\n  {\r\n    const elements = type.options.map(t => t.encode());\r\n\r\n    return [this.id, elements];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static forItem(types: TypeInput[])\r\n  {\r\n    return new TupleType(types.map((t) => Types.parse(t)));\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TupleType.operations.map;\r\n  }\r\n\r\n  public merge(type: TupleType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return this.options[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.mergeMany(this.options, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\r\n          \r\n          return Types.mergeMany(types, NullType.baseType);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      ...this.options.map((value, key) => ({ key, value })),\r\n      { key: 'length', value: Types.LENGTH },\r\n      {\r\n        key: new EnumType({\r\n          key: NumberType.baseType,\r\n          value: NumberType.baseType,\r\n          constants: new Map(\r\n            this.options.map((prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(this.options, NullType.baseType),\r\n      },\r\n      { \r\n        key: Types.INDEX, \r\n        value: Types.optional(\r\n          Types.mergeMany(this.options, NullType.baseType)\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.tuple(\r\n      ...this.options.map((t) => t.getCreateExpression())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs\r\n      .op(TupleOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      })\r\n      .and(this.options.map((t, i) => Exprs\r\n        .define({ value: Exprs.get('value', i) })\r\n        .run(t.getValidateExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(NumberOps.cmp, {\r\n        value: Exprs.get('value', 'length'),\r\n        test: Exprs.get('test', 'length'),\r\n      }),\r\n      ...this.options.map((t, i) => Exprs\r\n        .define({\r\n          value: Exprs.get('value', i),\r\n          test: Exprs.get('test', i),\r\n        })\r\n        .run(t.getCompareExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = element index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ListOps.insert, {\r\n          list: Exprs.get('value'),\r\n          index: to,\r\n          item: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ListOps.removeAt, {\r\n          list: Exprs.get('value'),\r\n          index: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!options.exact && \r\n      !options.strict && \r\n      other instanceof ListType && \r\n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\r\n      isNumber(other.options.min) &&\r\n      other.options.min >= this.options.length)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof TupleType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const a = this.options;\r\n    const b = other.options;\r\n\r\n    if (b.length < a.length || (options.exact && a.length !== b.length))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; i++)\r\n    {\r\n      if (!a[i].isCompatible(b[i], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      if (!elements[i].isValid(value[i]))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      value[i] = elements[i].normalize(value[i]);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TupleType\r\n  {\r\n    return new TupleType([]);\r\n  }\r\n\r\n  public clone(): TupleType\r\n  {\r\n    return new TupleType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return this.options.map(e => e.create());\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options.map(e => e.random(rnd));\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.fromJson(json[i]));\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.toJson(value[i]));\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from '../types/Tuple';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class TupleExpression extends Expression \r\n{\r\n\r\n  public static id = 'tuple';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new TupleExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: TupleExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.expressions.forEach(subject =>\r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)\r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { objectMap, objectReduce, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ObjectType } from '../types/Object';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport class ObjectExpression extends Expression \r\n{\r\n\r\n  public static id = 'obj';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\r\n    \r\n    return new ObjectExpression(props);\r\n  }\r\n\r\n  public static encode(expr: ObjectExpression): any \r\n  {\r\n    const props = objectMap(expr.props, e => e.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public props: ExpressionMap;\r\n\r\n  public constructor(props: ExpressionMap) \r\n  {\r\n    super();\r\n    this.props = props;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.props, (expr, prop) =>\r\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => DataTypes.objectRemove(this.props, prop))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.props\r\n      ? [1, this.props[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.props, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.props, e => e.validate(def, context, handler));\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const prop in this.props)\r\n    {\r\n      if (this.props[prop].mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\r\nimport { NotExpression } from './exprs/Not';\r\nimport { AndExpression } from './exprs/And';\r\nimport { NoExpression } from './exprs/No';\r\nimport { DefineExpression } from './exprs/Define';\r\nimport { DoExpression } from './exprs/Do';\r\nimport { ChainExpression } from './exprs/Chain';\r\nimport { CommentExpression } from './exprs/Comment';\r\nimport { ComputedExpression } from './exprs/Computed';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { ForExpression } from './exprs/For';\r\nimport { GetExpression } from './exprs/Get';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { IfExpression } from './exprs/If';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { OperationExpression } from './exprs/Operation';\r\nimport { Operation } from './Operation';\r\nimport { OrExpression } from './exprs/Or';\r\nimport { PathExpression } from './exprs/Path';\r\nimport { ReturnExpression } from './exprs/Return';\r\nimport { SetExpression } from './exprs/Set';\r\nimport { SwitchExpression } from './exprs/Switch';\r\nimport { TemplateExpression } from './exprs/Template';\r\nimport { UpdateExpression } from './exprs/Update';\r\nimport { WhileExpression } from './exprs/While';\r\nimport { TupleExpression } from './exprs/Tuple';\r\nimport { ObjectExpression } from './exprs/Object';\r\nimport { isArray, isObject, objectMap } from './fns';\r\nimport { Type } from './Type';\r\n\r\n\r\nexport class Exprs\r\n{\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      expr.setParent();\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  public static parse(values: ExpressionValue[]): Expression[]\r\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\r\n  public static parse(value: ExpressionValue): Expression\r\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\r\n  {\r\n    return isArray(value)\r\n      ? value.map((v) => this.parse(v))\r\n      : value instanceof Expression \r\n        ? value\r\n        : isObject(value)\r\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\r\n          : new ConstantExpression(value);\r\n  }\r\n\r\n  public static cast(valueType: Type, targetType: Type): Expression;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\r\n  {\r\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\r\n    const op = valueType.getOperations()[opId];\r\n\r\n    return op\r\n      ? this.op(op, { value: this.get('value') })\r\n      : createOnMissing\r\n        ? this.setParent(targetType.getCreateExpression())\r\n        : null as unknown as Expression;\r\n  }\r\n\r\n  public static and(...exprs: Expression[]): AndExpression\r\n  {\r\n    return this.setParent(new AndExpression(exprs));\r\n  }\r\n\r\n  public static body(...exprs: Expression[]): ChainExpression\r\n  {\r\n    return this.setParent(new ChainExpression(exprs));\r\n  }\r\n\r\n  public static const(value: any): ConstantExpression\r\n  {\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\r\n  {\r\n    return this.setParent(new DefineExpression([], body).with(vars));\r\n  }\r\n\r\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\r\n  {\r\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\r\n  {\r\n    return path.length === 0\r\n      ? new GetExpression()\r\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\r\n  }\r\n\r\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\r\n  }\r\n\r\n  public static computed(name: string): ComputedExpression\r\n  {\r\n    return this.setParent(new ComputedExpression(name));\r\n  }\r\n\r\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\r\n  {\r\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\r\n  }\r\n\r\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\r\n  }\r\n\r\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\r\n  }\r\n\r\n  public static noop(): NoExpression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public static not(expr: Expression): NotExpression\r\n  {\r\n    return this.setParent(new NotExpression(expr));\r\n  }\r\n\r\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\r\n  {\r\n    return this.setParent(new ObjectExpression(this.parse(props)));\r\n  }\r\n\r\n  public static op<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\r\n  }\r\n\r\n  public static or(...exprs: Expression[]): OrExpression\r\n  {\r\n    return this.setParent(new OrExpression(exprs));\r\n  }\r\n\r\n  public static path(...exprs: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\r\n      ? exprs[0]\r\n      : new PathExpression(this.parse(exprs)));\r\n  }\r\n\r\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\r\n  {\r\n    return this.setParent(new ReturnExpression(this.parse(value)));\r\n  }\r\n\r\n  public static set(...path: ExpressionValue[]): SetExpression\r\n  {\r\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\r\n  {\r\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\r\n  }\r\n\r\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\r\n  {\r\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\r\n  }\r\n\r\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\r\n  {\r\n    return this.setParent(new TupleExpression(this.parse(elements)));\r\n  }\r\n\r\n  public static update(...path: ExpressionValue[]): UpdateExpression\r\n  {\r\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\r\n  {\r\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static undefined()\r\n  {\r\n    return this.const(undefined);\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return this.const(null);\r\n  }\r\n\r\n  public static true()\r\n  {\r\n    return this.const(true);\r\n  }\r\n\r\n  public static false()\r\n  {\r\n    return this.const(false);\r\n  }\r\n\r\n  public static zero()\r\n  {\r\n    return this.const(0);\r\n  }\r\n\r\n  public static one()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareEqual()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareLess()\r\n  {\r\n    return this.const(-1);\r\n  }\r\n\r\n  public static compareGreater()\r\n  {\r\n    return this.const(+1);\r\n  }\r\n\r\n  public static string()\r\n  {\r\n    return this.const('');\r\n  }\r\n\r\n  public static comment(comment: string)\r\n  {\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static entity(name: string)\r\n  {\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static relation(name: string)\r\n  {\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static data(name: string)\r\n  {\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n}","\r\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\r\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 0;\r\nconst RANDOM_MAX = 10;\r\n\r\nexport interface NumberOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  whole?: boolean;\r\n}\r\n\r\nexport class NumberType extends Type<NumberOptions> \r\n{\r\n\r\n  public static WHOLE_EPSILON = 0.000001;\r\n\r\n  public static id = ID.Number;\r\n\r\n  public static operations = NumberOperations;\r\n\r\n  public static computeds = NumberComputeds;\r\n\r\n  public static baseType = new NumberType({});\r\n\r\n  public static decode(data: any[]): NumberType \r\n  {\r\n    return new NumberType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: NumberType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isNumber(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new NumberType({\r\n      min: data,\r\n      max: data,\r\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static EQUALS_EPSILON = 0.000001;\r\n\r\n  public static COMPARES_EPSILON = 0.000001;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'number';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a < b\r\n          ? (b - a) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : -1\r\n          : (a - b) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : 1;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type: 'bigint',\r\n      compare: (a, b) => {\r\n        return a - b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type: 'bigint',\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NumberType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NumberType.operations.map;\r\n  }\r\n\r\n  public merge(type: NumberType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.whole = o1.whole && o2.whole;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof NumberType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isNumber(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, whole } = this.options;\r\n\r\n    if (isNumber(min) && value < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (whole && !isWhole(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NumberType\r\n  {\r\n    return new NumberType({});\r\n  }\r\n\r\n  public clone(): NumberType\r\n  {\r\n    return new NumberType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NumberType.encode(this);\r\n  }\r\n\r\n  public create(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, whole } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n\r\n    return rnd(chosenMin, chosenMax, whole);\r\n  }\r\n\r\n  public fromJson(json: number): number\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: number): number\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\n\r\nconst MAP: string[] = [\r\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\r\n];\r\n\r\n\r\nexport const en: LocaleOptions = \r\n{\r\n  weekStartsOn: 0,\r\n  firstWeekContainsDate: 4,\r\n\r\n  am: 'am',\r\n  pm: 'pm',\r\n\r\n  formatLT: 'h:mm A',\r\n  formatLTS: 'h:mm:ss A',\r\n  formatL: 'MM/DD/Y',\r\n  formatl: 'M/D/Y',\r\n  formatLL: 'MMMM D, Y',\r\n  formatll: 'MMM D, Y',\r\n  formatLLL: 'MMMM D, Y h:mm A',\r\n  formatlll: 'MMM D, Y h:mm A',\r\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\r\n  formatllll: 'ddd, MMM D, Y h:mm A',\r\n\r\n  suffix: (value: number) => \r\n  {\r\n    const TH_SPECIAL_MIN = 11;\r\n    const TH_SPECIAL_MAX = 13;\r\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\r\n\r\n    return value + suffix;\r\n  },\r\n\r\n  list: (items) => \r\n  {\r\n    const last: number = items.length - 1;\r\n    let out: string = items[0];\r\n\r\n    for (let i = 1; i < last; i++) \r\n    {\r\n      out += ', ' + items[i];\r\n    }\r\n\r\n    if (last > 0) {\r\n      out += ' and ' + items[last];\r\n    }\r\n\r\n    return out;\r\n  },\r\n\r\n  months: [\r\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\r\n  ],\r\n\r\n  weekdays: [\r\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\r\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\r\n  ],\r\n\r\n};\r\n","\r\nimport { en } from './en';\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\nexport let currentLocale: LocaleOptions = en;","\r\n\r\n/**\r\n * The number of milliseconds in a second.\r\n */\r\nexport const MILLIS_IN_SECOND: number = 1000;\r\n\r\n/**\r\n * The number of seconds in a minute.\r\n */\r\nexport const SECONDS_IN_MINUTE: number = 60;\r\n\r\n/**\r\n * The number of hours in a day (not including DST days).\r\n */\r\nexport const HOURS_IN_DAY: number = 24;\r\n\r\n/**\r\n * The number of days in a week.\r\n */\r\nexport const DAYS_IN_WEEK: number = 7;\r\n\r\n/**\r\n * The number of milliseconds in a minute.\r\n */\r\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in an hour.\r\n */\r\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in a day (not including DST days).\r\n */\r\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\r\n\r\n/**\r\n * The number of months in a quarter.\r\n */\r\nexport const MONTHS_IN_QUARTER = 3;\r\n\r\n/**\r\n * The number of months in a year.\r\n */\r\nexport const MONTHS_IN_YEAR: number = 12;\r\n\r\n/**\r\n * The first day of a month.\r\n */\r\nexport const DAY_MIN: number = 1;\r\n\r\n/**\r\n * The last day of the longest month.\r\n */\r\nexport const DAY_MAX: number = 31;\r\n\r\n/**\r\n * The last hour of the day.\r\n */\r\nexport const HOUR_MAX: number = 23;\r\n\r\n/**\r\n * The last minute of the hour.\r\n */\r\nexport const MINUTE_MAX: number = 59;\r\n\r\n/**\r\n * The last second of the minute.\r\n */\r\nexport const SECOND_MAX: number = 59;\r\n\r\n/**\r\n * The last millisecond of the second.\r\n */\r\nexport const MILLIS_MAX: number = 999;\r\n\r\n/**\r\n * The last day of the week.\r\n */\r\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\r\nimport { currentLocale } from '../../locales';\r\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\r\nimport { isDate, isNumber, isString } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport type Unit = \r\n  'millis' | \r\n  'second' | \r\n  'minute' | \r\n  'hour' | \r\n  'day' | \r\n  'week' | \r\n  'month' |\r\n  'quarter' |\r\n  'year';\r\n\r\nexport type UnitRecord<T> = Record<Unit, T>;\r\n\r\nexport type Adjuster = (value: number) => number;\r\n\r\nexport const adjusters: Record<string, Adjuster> = \r\n{\r\n  none:     (value) => value,\r\n  floor:    (value) => Math.floor(value),\r\n  ceil:     (value) => Math.ceil(value),\r\n  round:    (value) => Math.round(value),\r\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\r\n};\r\n\r\nexport type Getter = (x: Date) => number;\r\n\r\nexport const getters: Record<string, Getter> = \r\n{\r\n  timestamp:            d => d.valueOf(),\r\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\r\n  millis:               d => d.getMilliseconds(),\r\n  second:               d => d.getSeconds(),\r\n  minute:               d => d.getMinutes(),\r\n  hour:                 d => d.getHours(),\r\n  day:                  d => d.getDay(),\r\n  dayOfMonth:           d => d.getDate(),\r\n  lastDayOfMonth:       getLastDayOfMonth,\r\n  dayOfYear:            getDayOfYear,\r\n  dayOfWeek:            getDayOfWeek,\r\n  week:                 getWeekOfYear,\r\n  weekOfMonth:          getWeekOfMonthISO,\r\n  weekspanOfMonth:      getWeekspanOfMonth,\r\n  fullWeekOfMonth:      getFullWeekOfMonth,\r\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\r\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\r\n  weekOfYear:           getWeekOfYearISO,\r\n  weekspanOfYear:       getWeekspanOfYear,\r\n  fullWeekOfYear:       getFullWeekOfYear,\r\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\r\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\r\n  month:                d => d.getMonth(),\r\n  quarter:              getQuarter,\r\n  year:                 d => d.getFullYear(),\r\n  timeIdentifier:       getTimeIdentifier,\r\n  dayIdentifier:        getDayIdentifier,\r\n  weekIdentifier:       getWeekIdentifier,\r\n  monthIdentifier:      getMonthIdentifier,\r\n  quarterIdentifier:    getQuarterIdentifier,\r\n};\r\n\r\nexport type Setter = (x: Date, value: number) => void;\r\n\r\nexport const setters: Record<string, Setter> = \r\n{\r\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\r\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\r\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\r\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\r\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\r\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\r\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\r\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\r\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\r\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\r\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\r\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\r\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\r\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\r\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\r\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\r\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\r\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\r\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\r\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\r\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\r\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\r\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\r\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\r\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\r\n};\r\n\r\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const startOf: UnitRecord<Starter> = \r\n{\r\n  millis:   x => x,\r\n  second:   startOfSecond,\r\n  minute:   startOfMinute,\r\n  hour:     startOfHour,\r\n  day:      startOfDay,\r\n  week:     startOfWeek,\r\n  month:    startOfMonth,\r\n  quarter:  startOfQuarter,\r\n  year:     startOfYear,\r\n};\r\n\r\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const endOf: UnitRecord<Ender> = \r\n{\r\n  millis:   x => x,\r\n  second:   endOfSecond,\r\n  minute:   endOfMinute,\r\n  hour:     endOfHour,\r\n  day:      endOfDay,\r\n  week:     endOfWeek,\r\n  month:    endOfMonth,\r\n  quarter:  endOfQuarter,\r\n  year:     endOfYear,\r\n};\r\n\r\nexport type Adder = (x: Date, amount: number) => void;\r\n\r\nexport const add: UnitRecord<Adder> = \r\n{\r\n  millis:   addMilliseconds,\r\n  second:   addSeconds,\r\n  minute:   addMinutes,\r\n  hour:     addHours,\r\n  day:      addDays,\r\n  week:     addWeeks,\r\n  month:    addMonths,\r\n  quarter:  addQuarters,\r\n  year:     addYears,\r\n};\r\n\r\nexport type Differ = (a: Date, b: Date) => number;\r\n\r\nexport const diff: UnitRecord<Differ> = \r\n{\r\n  millis:   diffMilliseconds,\r\n  second:   diffSeconds,\r\n  minute:   diffMinutes,\r\n  hour:     diffHours,\r\n  day:      diffDays,\r\n  week:     diffWeeks,\r\n  month:    diffMonths,\r\n  quarter:  diffQuarters,\r\n  year:     diffYears,\r\n};\r\n\r\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\r\n{\r\n  const b = new Date(a.getTime());\r\n\r\n  mutator(b, options);\r\n\r\n  return b;\r\n}\r\n\r\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\r\n{\r\n  const starter = startOf[precision];\r\n  const x = mutate(a, starter, options);\r\n  const y = mutate(b, starter, options);\r\n\r\n  return x.getTime() - y.getTime();\r\n}\r\n\r\nexport type DateParserGroup = [number, number, number, number, number, number, number];\r\n\r\nexport const DateParsers: Array<{\r\n  pattern: RegExp;\r\n  groups: DateParserGroup;\r\n}> = [\r\n  { \r\n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [1, 2, 3, 5, 8, 10, 12 ],\r\n  },\r\n  { \r\n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [3, 1, 2, 5, 8, 10, 12 ],\r\n  }\r\n];\r\n\r\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\r\n{\r\n  if (isDate(value))\r\n  {\r\n    return value;\r\n  }\r\n\r\n  if (isNumber(value) && value > 0)\r\n  {\r\n    return new Date(value);\r\n  }\r\n\r\n  if (isString(value))\r\n  {\r\n    for (const parser of DateParsers)\r\n    {\r\n      const { pattern, groups } = parser;\r\n      const match = pattern.exec(value);\r\n\r\n      if (match) \r\n      {\r\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\r\n\r\n        for (let i = 0; i < times.length; i++) {\r\n          const x = parseInt(match[groups[i]]);\r\n          if (isFinite(x)) {\r\n            times[i] = i === 1 ? x - 1 : x;\r\n          }\r\n        }\r\n\r\n        return parseAsUTC\r\n          ? new Date(Date.UTC(...times))\r\n          : new Date(...times);\r\n      }\r\n    }\r\n\r\n    if (parseAsUTC)\r\n    {\r\n      const withUTC = value + ' UTC';\r\n      const parsedUTC = Date.parse(withUTC);\r\n\r\n      if (isFinite(parsedUTC))\r\n      {\r\n        return new Date(parsedUTC);\r\n      }\r\n    }\r\n\r\n    const parsed = Date.parse(value);\r\n\r\n    if (isFinite(parsed))\r\n    {\r\n      return new Date(parsed);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getTimeIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100000000\r\n       + (x.getMonth() + 1) * 1000000\r\n       + x.getDate() * 10000\r\n       + x.getHours() * 100\r\n       + x.getMinutes();\r\n}\r\n\r\nexport function getDayIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10000\r\n       + (x.getMonth() + 1) * 100\r\n       + x.getDate();\r\n}\r\n\r\nexport function getWeekIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 1000\r\n       + getWeekOfYear(x);\r\n}\r\n\r\nexport function getMonthIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100\r\n       + (x.getMonth() + 1);\r\n}\r\n\r\nexport function getQuarterIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10\r\n       + getQuarter(x);\r\n}\r\n\r\nexport function getLastDayOfMonth(x: Date): number\r\n{\r\n  return getDaysInMonth(x) - x.getDate() + 1;\r\n}\r\n\r\nexport function getLastWeekspanOfYear(x: Date): number\r\n{\r\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekspanOfYear(x: Date): number\r\n{\r\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\r\n}\r\n\r\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\r\n}\r\n\r\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const lastOfYear = mutate(x, endOfYear);\r\n  const week = getWeekOfYearISO(x, options);\r\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\r\n  const lastWeek = weekMax - week;\r\n\r\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \r\n    ? lastWeek + 1\r\n    : lastWeek;\r\n}\r\n\r\nexport function getWeekspanOfMonth(x: Date): number\r\n{\r\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getLastWeekspanOfMonth(x: Date): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\r\n  \r\n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { firstWeekContainsDate } = options;\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { weekStartsOn } = options;\r\n  const day = x.getDay();\r\n\r\n  return day < weekStartsOn \r\n    ? day - weekStartsOn + DAYS_IN_WEEK\r\n    : day - weekStartsOn;\r\n}\r\n\r\nexport function getDayOfYear(a: Date): number\r\n{\r\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\r\n}\r\n\r\nexport function getDateOffset(x: Date): number\r\n{\r\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\r\n}\r\n\r\nexport function isDaylightSavingTime(x: Date): boolean\r\n{\r\n  const offset = getDateOffset(x);\r\n\r\n  return (\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\r\n  );\r\n}\r\n\r\nexport function isLeapYear(x: Date): boolean\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\n\r\nexport function getDaysInYear(x: Date): number\r\n{\r\n  return isLeapYear(x) ? 366 : 365;\r\n}\r\n\r\nexport const daysInMonth = [\r\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n];\r\n\r\nexport function getDaysInMonth(x: Date): number\r\n{\r\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\r\n}\r\n\r\nexport function getAbsoluteTimestamp(a: Date): number\r\n{\r\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\r\n}\r\n\r\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\r\n{\r\n  const b = new Date(a.getTime());\r\n  const offsetMinutes = b.getTimezoneOffset();\r\n\r\n  b.setSeconds(0, 0);\r\n\r\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\r\n\r\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\r\n}\r\n\r\nexport function getQuarter(x: Date): number\r\n{\r\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function startOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(0);\r\n}\r\n\r\nexport function startOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(0, 0);\r\n}\r\n\r\nexport function startOfHour(x: Date): void\r\n{\r\n  x.setMinutes(0, 0, 0);\r\n}\r\n\r\nexport function startOfDay(x: Date): void\r\n{\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() - dayOfWeek);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfMonth(x: Date): void\r\n{\r\n  x.setDate(DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfYear(x: Date): void\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  x.setTime(0);\r\n  x.setFullYear(year, 0, 1);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function endOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(MILLIS_MAX);\r\n}\r\n\r\nexport function endOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfHour(x: Date): void\r\n{\r\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfDay(x: Date): void\r\n{\r\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfMonth(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfYear(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function addMilliseconds(x: Date, amount: number): void\r\n{\r\n  x.setTime(x.getTime() + amount);\r\n}\r\n\r\nexport function addSeconds(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\r\n}\r\n\r\nexport function addMinutes(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\r\n}\r\n\r\nexport function addHours(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\r\n}\r\n\r\nexport function addDays(x: Date, amount: number): void\r\n{\r\n  x.setDate(x.getDate() + amount);\r\n}\r\n\r\nexport function addWeeks(x: Date, amount: number): void\r\n{\r\n  addDays(x, amount * DAYS_IN_WEEK);\r\n}\r\n\r\nexport function addMonths(x: Date, amount: number): void\r\n{\r\n  const month = x.getMonth() + amount;\r\n\r\n  const y = new Date(0);\r\n  y.setFullYear(y.getFullYear(), month, 1);\r\n  y.setHours(0, 0, 0, 0);\r\n  const dayMax = getDaysInMonth(y);\r\n\r\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\r\n}\r\n\r\nexport function addQuarters(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function addYears(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_YEAR);\r\n}\r\n\r\nexport function diffMilliseconds(a: Date, b: Date): number\r\n{\r\n  return a.getTime() - b.getTime();\r\n}\r\n\r\nexport function diffSeconds(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\r\n}\r\n\r\nexport function diffMinutes(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\r\n}\r\n\r\nexport function diffHours(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\r\n}\r\n\r\nexport function diffDays(a: Date, b: Date): number \r\n{\r\n  const leftTimestamp = getAbsoluteTimestamp(a);\r\n  const rightTimestamp = getAbsoluteTimestamp(b);\r\n\r\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\r\n}\r\n\r\nexport function diffWeeks(a: Date, b: Date): number\r\n{\r\n  return diffDays(a, b) / DAYS_IN_WEEK;\r\n}\r\n\r\nexport function diffMonths(a: Date, b: Date): number\r\n{\r\n  const years = a.getFullYear() - b.getFullYear();\r\n  const months = a.getMonth() - b.getMonth();\r\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\r\n\r\n  return years * MONTHS_IN_YEAR + months + date;\r\n}\r\n\r\nexport function diffQuarters(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\r\n}\r\n\r\nexport function diffYears(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\r\n}\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\r\n\r\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\r\n\r\nconst ops = DateOperations;\r\n\r\nexport const DateOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  now: ops.set('now'),\r\n\r\n  today: ops.set('today'),\r\n\r\n  tomorrow: ops.set('today+'),\r\n\r\n  yesterday: ops.set('today-'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromTimestamp: ops.set('>tms', {}, ['value']),\r\n\r\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\r\n\r\n  min: ops.set('min', {}, ['value', 'test']),\r\n\r\n  max: ops.set('max', {}, ['value', 'test']),\r\n\r\n  get: ops.set('get', {}, ['value', 'property']),\r\n\r\n  set: ops.set('set', {}, ['value', 'property', 'set']),\r\n\r\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\r\n\r\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\r\n\r\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  daysInMonth: ops.set('dim', {}, ['value']),\r\n\r\n  daysInYear: ops.set('diy', {}, ['value']),\r\n\r\n  weeksInYear: ops.set('wiy', {}, ['value']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\r\n\r\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\r\n\r\n  timezoneOffset: ops.set('offset', {}, ['value']),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.set('toText', {}, ['value', 'format']),\r\n\r\n  toISOText: ops.set('toISOText', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n \r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\r\n\r\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\r\n\r\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  isDST: ops.set('dst?', {}, ['value']),\r\n\r\n  isLeapYear: ops.set('leap?', {}, ['value']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\r\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\r\n\r\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\r\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\r\n\r\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\r\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\r\n\r\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\r\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\r\n\r\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\r\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\r\n\r\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\r\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\r\n\r\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\r\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\r\n\r\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\r\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\r\n\r\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\r\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\r\n\r\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\r\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\r\n\r\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\r\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\r\n\r\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\r\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\r\n\r\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\r\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\r\n\r\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\r\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\r\n\r\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\r\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\r\n\r\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\r\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\r\n\r\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\r\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\r\n\r\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\r\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\r\n\r\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\r\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\r\n\r\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\r\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\r\n\r\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\r\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\r\n\r\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\r\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\r\n\r\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\r\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\r\n\r\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\r\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\r\n\r\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\r\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\r\n\r\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\r\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\r\n\r\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\r\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\r\n\r\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\r\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\r\n\r\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\r\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\r\n\r\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\r\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\r\n\r\n\r\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\r\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\r\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\r\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\r\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\r\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\r\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\r\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\r\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\r\nDateComputeds.set('daysInYear', DateOps.daysInYear);\r\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\r\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\r\nDateComputeds.set('toISOText', DateOps.toISOText);\r\nDateComputeds.set('isDST', DateOps.isDST);\r\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\r\n","\r\nimport { isDate, isEmpty, isObject, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\r\nimport { Expression } from '../Expression';\r\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\nexport interface DateOptions \r\n{\r\n  parseAsUTC?: boolean;\r\n  validateMin?: Date;\r\n  validateMax?: Date;\r\n  forceMin?: Date;\r\n  forceMax?: Date;\r\n  forceStartOf?: Unit;\r\n  forceEndOf?: Unit;\r\n  withTime?: boolean;\r\n}\r\n\r\nexport class DateType extends Type<DateOptions> \r\n{\r\n\r\n  public static id = ID.Date;\r\n\r\n  public static operations = DateOperations;\r\n\r\n  public static computeds = DateComputeds;\r\n\r\n  public static baseType = new DateType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): DateType \r\n  {\r\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: DateType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): DateOptions\r\n  {\r\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\r\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\r\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\r\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: DateOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n\r\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\r\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\r\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\r\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isDate(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new DateType({\r\n      validateMin: new Date(data.getTime()),\r\n      validateMax: new Date(data.getTime())\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 9;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n\r\n        if (at) {\r\n          return a.getTime() - b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return false;\r\n\r\n        if (at) {\r\n          return a.getTime() === b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\r\n          return new Date(json.value);\r\n        }\r\n      },\r\n      toJson: (json: Date) => {\r\n        if (isDate(json)) {\r\n          return { $any: 'date', value: json.toISOString() };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, _, setObjectCopy) => {\r\n        if (isDate(x)) {\r\n          const newDate = new Date(x.getTime());\r\n\r\n          setObjectCopy(x, newDate);\r\n  \r\n          return newDate;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DateType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return DateType.operations.map;\r\n  }\r\n\r\n  public merge(type: DateType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\r\n    \r\n    if (o1.validateMin && o2.validateMin)\r\n    {\r\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\r\n    }\r\n\r\n    if (o1.validateMax && o2.validateMax)\r\n    {\r\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof DateType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      if (other.options.withTime && !this.options.withTime)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const min = this.getMin();\r\n      const otherMin = other.getMin();\r\n\r\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.getMax();\r\n      const otherMax = other.getMax();\r\n\r\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const { forceStartOf, forceEndOf } = this.options;\r\n\r\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { parseAsUTC, withTime } = this.options;\r\n\r\n    this.options = { parseAsUTC, withTime };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    const { parseAsUTC, validateMin, validateMax } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMin && parsed.getTime() < validateMin.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMax && parsed.getTime() > validateMax.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    if (forceMin && parsed.getTime() < forceMin.getTime())\r\n    {\r\n      parsed.setTime(forceMin.getTime());\r\n    }\r\n    \r\n    if (forceMax && parsed.getTime() > forceMax.getTime())\r\n    {\r\n      parsed.setTime(forceMax.getTime());\r\n    }\r\n\r\n    if (forceStartOf)\r\n    {\r\n      startOf[forceStartOf](parsed);\r\n    }\r\n\r\n    if (forceEndOf)\r\n    {\r\n      endOf[forceEndOf](parsed);\r\n    }\r\n\r\n    return parsed;\r\n  }\r\n\r\n  public newInstance(): DateType\r\n  {\r\n    return new DateType({});\r\n  }\r\n\r\n  public clone(): DateType\r\n  {\r\n    return new DateType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DateType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return new Date();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const value = new Date();\r\n\r\n    const min = this.getMin();\r\n    const max = this.getMax();\r\n\r\n    const start = min ? min.getTime() : value.getTime();\r\n    const end = max ? max.getTime() : value.getTime();\r\n\r\n    return new Date(rnd(start, end, true));\r\n  }\r\n\r\n  public getMin(): Date | undefined\r\n  {\r\n    return this.options.validateMin || this.options.forceMin;\r\n  }\r\n\r\n  public getMax(): Date | undefined\r\n  {\r\n    return this.options.validateMax || this.options.forceMax;\r\n  }\r\n\r\n  public fromJson(json: string): Date\r\n  {\r\n    return new Date(json);\r\n  }\r\n\r\n  public toJson(value: Date): string\r\n  {\r\n    return value ? value.toISOString() : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations, OperationGeneric } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { isSameClass, isNumber } from '../fns';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_MANY = 1;\r\n\r\nexport class ManyType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Many;\r\n\r\n  public static operations = new Operations(ID.Many + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\r\n\r\n  public static baseType = new ManyType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ManyType \r\n  {\r\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\r\n\r\n    return new ManyType(many);\r\n  }\r\n\r\n  public static encode(type: ManyType): any \r\n  {\r\n    const many = type.options.map(t => t.encode());\r\n\r\n    return [this.id, many];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public operations?: Record<string, OperationGeneric>;\r\n\r\n  public getOperations()\r\n  {\r\n    if (!this.operations)\r\n    {\r\n      this.operations = {};\r\n\r\n      this.options.forEach(many => \r\n      {\r\n        const ops = many.getOperations();\r\n        \r\n        for (const prop in ops) \r\n        {\r\n          this.operations[prop] = ops[prop];\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.operations;\r\n  }\r\n\r\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const many = this.options;\r\n\r\n    for (const type of many)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ManyType.id;\r\n  }\r\n\r\n  public merge(type: ManyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    for (const sub of this.options)\r\n    {\r\n      const subType = sub.getSubType(expr, def, context);\r\n\r\n      if (subType)\r\n      {\r\n        return subType;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const subs: TypeSub[] = [];\r\n\r\n    this.options.forEach(type => {\r\n      type.getSubTypes(def).forEach(sub => {\r\n        const matching = subs.find(existing => \r\n          existing.key === sub.key || (\r\n            existing.key instanceof Type && \r\n            sub.key instanceof Type && \r\n            isSameClass(existing.key, sub.key)\r\n          )\r\n        );\r\n\r\n        if (!matching) {\r\n          subs.push(sub);\r\n        }\r\n      });\r\n    });\r\n\r\n    subs.sort((a, b) => {\r\n      const ad = a.key instanceof Type ? 1 : 0;\r\n      const bd = b.key instanceof Type ? 1 : 0;\r\n\r\n      return ad - bd;\r\n    });\r\n\r\n    return subs;\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.length === 1\r\n      ? this.options[0]\r\n      : this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.isOptional()\r\n      ? new ManyType(this.options.map((o) => o.getRequired()))\r\n      : this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options[0].getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...this.options.map((t) => t.getValidateExpression())\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'), \r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = sub type index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (hasFrom && !hasTo) // removed\r\n    {\r\n      const targetType = from === 0 ? this.options[1] : this.options[0];\r\n      const valueType = this.options[from];\r\n      const casting = Exprs.cast(valueType, targetType);\r\n\r\n      return Exprs\r\n        .if(targetType.getValidateExpression())\r\n        .than(Exprs.get('value'))\r\n        .else(casting)\r\n      ;\r\n    }\r\n    else if (!hasFrom && hasTo) // added\r\n    {\r\n      return newValue;\r\n    }\r\n    else if (to === from && hasFrom) // change\r\n    {\r\n      return Exprs\r\n        .if(Exprs.not(this.getValidateExpression()))\r\n        .than(newValue)\r\n        .else(Exprs.get('value'))\r\n      ;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\r\n  }\r\n\r\n  public newInstance(): ManyType\r\n  {\r\n    return new ManyType([]);\r\n  }\r\n\r\n  public clone(): ManyType\r\n  {\r\n    return new ManyType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ManyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options.length > 0\r\n      ? this.options[0].create()\r\n      : null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const options = this.options;\r\n    const chosen = rnd(0, options.length, true);\r\n\r\n    return options[chosen].random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      const parsed = many.normalize(json);\r\n\r\n      if (parsed !== null && parsed !== undefined)\r\n      {\r\n        return parsed;\r\n      }\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      if (many.isValid(value))\r\n      {\r\n        return many.toJson(value);\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { isObject, isMap, isSameClass, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { TextType } from './Text';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_KEY = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface MapOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n}\r\n\r\nexport class MapType extends Type<MapOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Map;\r\n\r\n  public static operations = MapOperations;\r\n\r\n  public static computeds = MapComputeds;\r\n\r\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): MapType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\r\n\r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public static encode(type: MapType): any \r\n  {\r\n    const { key, value } = type.options;\r\n\r\n    return key !== TextType.baseType\r\n      ? [this.id, value.encode()]\r\n      : [this.id, value.encode(), key.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isMap(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let key: Type = new AnyType({});\r\n    let value: Type = new AnyType({});\r\n\r\n    const type = new MapType({ key, value });\r\n\r\n    cache.set(data, type);\r\n\r\n    for (const [entryKey, entryValue] of data.entries())\r\n    {\r\n      key = describer.merge(key, entryKey);\r\n      value = describer.merge(value, entryValue);\r\n    }\r\n\r\n    type.options.key = key;\r\n    type.options.value = value;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 10;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\r\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isMap(json)) {\r\n          return {\r\n            $any: 'map',\r\n            value: Array.from(json.entries())\r\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isMap(x)) {\r\n          const newMap = new Map();\r\n\r\n          setObjectCopy(x, newMap);\r\n  \r\n          for (const [key, value] of x.entries()) {\r\n            newMap.set(copy(key), copy(value));\r\n          }\r\n  \r\n          return newMap;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          let less = 0;\r\n          let more = 0;\r\n\r\n          for (const key of a.keys()) {\r\n            if (!b.has(key)) {\r\n              less++;\r\n            }\r\n          }\r\n\r\n          for (const key of b.keys()) {\r\n            if (!a.has(key)) {\r\n              more++;\r\n            } else {\r\n              const c = compare(a.get(key), b.get(key));\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n          }\r\n\r\n          return DataTypes.getCompare(less, more);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return false;\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          if (a.size !== b.size) {\r\n            return false;\r\n          }\r\n\r\n          for (const [key, value] of a.entries()) {\r\n            if (!b.has(key)) {\r\n              return false;\r\n            } else if (!equals(value, b.get(key))) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<Map<any, any>>({\r\n      priority,\r\n      isValid: (value) => isMap(value),\r\n      get: (value, step) => value.get(step),\r\n      set: (value, step, stepValue) => value.set(step, stepValue),\r\n      remove: (value, step) => value.delete(step),\r\n      has: (value, step) => value.has(step),\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    const key = Types.parse(keyOrClass);\r\n    \r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MapType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return MapType.operations.map;\r\n  }\r\n\r\n  public merge(type: MapType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.key = Types.merge(o1.key, o2.key);\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (this.options.key.isValid(expr.value))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (isSameClass(exprType, this.options.key))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: this.options.key, value: this.options.value },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof MapType && \r\n      this.options.key.isCompatible(other.options.key, options) && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === MapType.STEP_KEY\r\n      ? this.options.key\r\n      : step === MapType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.key.removeDescribedRestrictions();\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(MapOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.value.getValidateExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === MapType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Map || isObject(test))\r\n    {\r\n      const { key, value } = this.options;\r\n\r\n      return this.iterate(test, true, (k, v) => {\r\n        if (!key.isValid(k) || !value.isValid(v)) {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const entries: [any, any][] = [];\r\n\r\n    this.iterate(test, undefined, (k, v) => {\r\n      entries.push([\r\n        key.normalize(k),\r\n        value.normalize(v)\r\n      ]);\r\n    });\r\n\r\n    return new Map(entries);\r\n  }\r\n\r\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\r\n  {\r\n    if (map instanceof Map)\r\n    {\r\n      for (const [key, value] of map.entries())\r\n      {\r\n        const result = onItem(key, value);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    else if (isObject(map))\r\n    {\r\n      for (const prop in map)\r\n      {\r\n        const result = onItem(prop, map[prop]);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return otherwise;\r\n  }\r\n\r\n  public newInstance(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MapType.encode(this);\r\n  }\r\n\r\n  public create(): Map<any, any>\r\n  {\r\n    return new Map();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Map<any, any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const k = key.random(rnd);\r\n      const v = value.random(rnd);\r\n\r\n      out.set(k, v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<[any, any]>): Map<any, any>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new Map(json.map(([k, v]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n  }\r\n\r\n  public toJson(map: Map<any, any>): Array<[any, any]>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return Array.from(map.entries()).map(([k, v]) => [\r\n      key.toJson(k),\r\n      value.toJson(v)\r\n    ]);\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { Types } from '../Types';\r\nimport { AnyType } from './Any';\r\n\r\n\r\nconst INDEX_TYPE = 1;\r\nconst RANDOM_CHANCE = 0.3;\r\n\r\nexport class OptionalType extends Type<Type>\r\n{\r\n\r\n  public static STEP_OPTIONAL = 'optional';\r\n\r\n  public static id = ID.Optional;\r\n\r\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\r\n\r\n  public static baseType = new OptionalType(AnyType.baseType);\r\n\r\n  public static decode(data: any[], types: TypeProvider): OptionalType \r\n  {\r\n    const type = types.getType(data[INDEX_TYPE]);\r\n\r\n    return new OptionalType( type );\r\n  }\r\n\r\n  public static encode(type: OptionalType): any \r\n  {\r\n    return [this.id, type.options.encode()];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(type: TypeInput): OptionalType\r\n  {\r\n    return new OptionalType(Types.parse(type));\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OptionalType.id;\r\n  }\r\n\r\n  public merge(type: OptionalType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.options.getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.options;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof OptionalType\r\n      ? this.options.isCompatible(other.options, options)\r\n      : this.options.isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === OptionalType.STEP_OPTIONAL\r\n      ? this.options\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'),\r\n        test: Exprs.undefined(),\r\n      }),\r\n      this.options.getValidateExpression(),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.define({\r\n      valueMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n      testMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('test'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n    }, Exprs\r\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\r\n      .than(Exprs.compareEqual())\r\n      .if(Exprs.get('valueMissing'))\r\n      .than(Exprs.compareLess())\r\n      .if(Exprs.get('testMissing'))\r\n      .than(Exprs.compareGreater())\r\n      .else(this.options.getCompareExpression()),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = optional\r\n    return Exprs\r\n      .if(this.options.getValidateExpression())\r\n      .than(newValue)\r\n      .else(Exprs.get('value'))\r\n    ;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null \r\n      || value === undefined\r\n      || this.options.isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value === null || value === undefined\r\n      ? value\r\n      : this.options.normalize(value);\r\n  }\r\n\r\n  public newInstance(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.newInstance());\r\n  }\r\n\r\n  public clone(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.clone());\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OptionalType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options ? this.options.create() : undefined;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\r\n      ? this.options.random(rnd)\r\n      : undefined;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NOT = 1;\r\n\r\nexport class NotType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Not;\r\n\r\n  public static operations = new Operations(ID.Not + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\r\n\r\n  public static baseType = new NotType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): NotType \r\n  {\r\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\r\n\r\n    return new NotType(not);\r\n  }\r\n\r\n  public static encode(type: NotType): any \r\n  {\r\n    const not = type.options.map(t => t.encode());\r\n\r\n    return [this.id, not];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getOperations()\r\n  { \r\n    return {};\r\n  }\r\n\r\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const not = this.options;\r\n\r\n    for (const type of not)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotType.id;\r\n  }\r\n\r\n  public merge(type: NotType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\r\n  }\r\n\r\n  public newInstance(): NotType\r\n  {\r\n    return new NotType([]);\r\n  }\r\n\r\n  public clone(): NotType\r\n  {\r\n    return new NotType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return AnyType.baseType.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return AnyType.baseType.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\r\n\r\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\r\n\r\nconst ops = ColorOperations;\r\n\r\n\r\nexport const ColorOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create', {}),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\r\n\r\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  clamp: ops.set('clamp', {}, ['value']),\r\n\r\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\r\n\r\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  format: ops.set('format', {}, ['value', 'format']),\r\n\r\n  parse: ops.set('parse', {}, ['value']),\r\n\r\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\r\n\r\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\r\n\r\n  darken: ops.set('darken', {}, ['value', 'amount']),\r\n\r\n  toHSL: ops.set('->hsl', {}, ['value']),\r\n\r\n  fromHSL: ops.set('<-hsl', {}, ['value']),\r\n\r\n  luminance: ops.set('luminance', {}, ['value']),\r\n\r\n  contrast: ops.set('contrast', {}, ['value', 'test']),\r\n\r\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\r\n\r\n  opaque: ops.set('opaque', {}, ['value']),\r\n\r\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\r\n\r\n  distance: ops.set('distance', {}, ['value', 'test']),\r\n\r\n  named: ops.set('named', {}, ['name']),\r\n\r\n  getName: ops.set('getName', {}, ['value']),\r\n\r\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nColorComputeds.set('toHSL', ColorOps.toHSL);\r\nColorComputeds.set('luminance', ColorOps.luminance);\r\nColorComputeds.set('inverted', ColorOps.invert);\r\nColorComputeds.set('opaque', ColorOps.opaque);\r\nColorComputeds.set('name', ColorOps.getName);","\r\nimport { isObject, isNumber, clamp } from '../../fns';\r\n\r\n\r\nexport const COMPONENT_MIN = 0;\r\nexport const COMPONENT_MAX = 255;\r\n\r\nexport interface Color\r\n{\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n}\r\n\r\nexport function isColor(x: any): x is Color\r\n{\r\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\r\n}\r\n\r\nexport function clampComponent(x: number): number\r\n{\r\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\r\n}","\r\nimport { Color } from './Color';\r\nimport { Type } from '../../Type';\r\n\r\n\r\n\r\nexport type ColorSpaceToColor<T> = (color: T) => Color;\r\n\r\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\r\n\r\nexport type ColorFormatParser<T> = (value: any) => T | null;\r\n\r\nexport type ColorFormatFormatter<T> = (color: T) => any;\r\n\r\n\r\nexport interface ColorFormat<T>\r\n{\r\n  code: string;\r\n  name: string;\r\n  parser: ColorFormatParser<T>;\r\n  formatter: ColorFormatFormatter<T>;\r\n}\r\n\r\n\r\nexport class ColorSpace<T>\r\n{\r\n  public code: string;\r\n  public name: string;\r\n  public type: Type;\r\n  public toColor: ColorSpaceToColor<T>;\r\n  public fromColor: ColorSpaceFromColor<T>;\r\n  public formatMap: Record<string, ColorFormat<T>>;\r\n  public formats: ColorFormat<T>[];\r\n\r\n  public constructor(code: string, name: string)\r\n  {\r\n    this.code = code;\r\n    this.name = name;\r\n    this.formatMap = {};\r\n    this.formats = [];\r\n  }\r\n\r\n  public setType(type: Type): this\r\n  {\r\n    this.type = type;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setToColor(toColor: ColorSpaceToColor<T>): this\r\n  {\r\n    this.toColor = toColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\r\n  {\r\n    this.fromColor = fromColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addFormat(format: ColorFormat<T>): this\r\n  {\r\n    this.formatMap[format.code] = format;\r\n    this.formats.push(format);\r\n\r\n    return this;\r\n  }\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\r\nimport { isString, pad } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\r\n  .setToColor((color) => color)\r\n  .setFromColor((color) => color)\r\n  .addFormat({\r\n    code: 'default',\r\n    name: 'Default',\r\n    parser: (data) => {\r\n      if (!isColor(data)) {\r\n        return null;\r\n      }\r\n\r\n      return data;\r\n    },\r\n    formatter: (color) => {\r\n      return color;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'bestfit',\r\n    name: 'Best Fit',\r\n    parser: (data) => {\r\n      return null;\r\n    },\r\n    formatter: (color) => {\r\n      if (color.a === COMPONENT_MAX) {\r\n        const r = formatHex(color.r);\r\n        const g = formatHex(color.g);\r\n        const b = formatHex(color.b);\r\n\r\n        return '#' + r + g + b;\r\n      } else {\r\n        const r = clampComponent(color.r);\r\n        const g = clampComponent(color.g);\r\n        const b = clampComponent(color.b);\r\n        const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n      }\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexShort',\r\n    name: 'Hex (#rgb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r + r, 16),\r\n        g: parseInt(g + g, 16),\r\n        b: parseInt(b + b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r).substring(0, 1);\r\n      const g = formatHex(color.g).substring(0, 1);\r\n      const b = formatHex(color.b).substring(0, 1);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hex',\r\n    name: 'Hex (#rrggbb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexLong',\r\n    name: 'Hex (#rrggbbaa)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: parseInt(a, 16),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n      const a = formatHex(color.a);\r\n\r\n      return '#' + r + g + b + a;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgb',\r\n    name: 'rgb(r, g, b)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n\r\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgba',\r\n    name: 'rgba(r, g, b, a)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction parseComponent(x: string): number\r\n{\r\n  return x.indexOf('%') === -1\r\n    ? clampComponent(parseInt(x, 10))\r\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\r\n}\r\n\r\nfunction formatHex(x: number)\r\n{\r\n  return pad(clampComponent(x).toString(16), 2, '0', true);\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { COMPONENT_MAX, clampComponent } from './Color';\r\nimport { isString, clamp, isObject, isNumber } from '../../fns';\r\nimport { NumberType } from '../../types/Number';\r\nimport { ObjectType } from '../../types/Object';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\r\n\r\n\r\nexport function isColorHSL(x: any): x is ColorHSL\r\n{\r\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\r\n}\r\n\r\n\r\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\r\n  .setType(new ObjectType({props: {\r\n    h: new NumberType({ min: 0, max: 360, whole: true }),\r\n    s: new NumberType({ min: 0, max: 100, whole: true }),\r\n    l: new NumberType({ min: 0, max: 100, whole: true }),\r\n    a: new NumberType({ min: 0, max: 255, whole: true }),\r\n  }}))\r\n  .setToColor((color) => {\r\n    const H = normalizeHue(color.h);\r\n    const L = clampPercent(color.l) / 100;\r\n    const S = clampPercent(color.s) / 100;\r\n    const C = (1 - Math.abs(2 * L - 1)) * S;\r\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\r\n    const m = L - C / 2;\r\n    const r1 = H < 60 || H >= 300\r\n      ? C\r\n      : H >= 120 && H < 240\r\n        ? 0\r\n        : X;\r\n    const g1 = H >= 240\r\n      ? 0\r\n      : H >= 60 && H < 180\r\n        ? C\r\n        : X;\r\n    const b1 = H <= 120\r\n      ? 0\r\n      : H >= 180 && H < 300\r\n        ? C\r\n        : X;\r\n\r\n    return {\r\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\r\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\r\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\r\n      a: color.a\r\n    };\r\n  })\r\n  .setFromColor((color) => {\r\n    const R = clampComponent(color.r);\r\n    const G = clampComponent(color.g);\r\n    const B = clampComponent(color.b);\r\n    const r1 = R / COMPONENT_MAX;\r\n    const g1 = G / COMPONENT_MAX;\r\n    const b1 = B / COMPONENT_MAX;\r\n    const Cmax = Math.max(r1, g1, b1);\r\n    const Cmin = Math.min(r1, g1, b1);\r\n    const delta = Cmax - Cmin;\r\n    const L = (Cmax + Cmin) / 2;\r\n    const h = delta === 0\r\n      ? 0\r\n      : Cmax === r1\r\n        ? ((g1 - b1) / delta) % 6\r\n        : Cmax === g1\r\n          ? ((b1 - r1) / delta) + 2\r\n          : ((r1 - g1) / delta) + 4;\r\n    const s = delta === 0\r\n      ? 0\r\n      : delta / (1 - Math.abs(2 * L - 1));\r\n\r\n    return {\r\n      h: normalizeHue(Math.round(h * 60)),\r\n      s: clampPercent(Math.round(s * 100)),\r\n      l: clampPercent(Math.round(L * 100)),\r\n      a: color.a,\r\n    };\r\n  })\r\n  .addFormat({\r\n    code: 'hsl',\r\n    name: 'HSL',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n\r\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hsla',\r\n    name: 'HSLA',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l, a] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction normalizeHue(h: number): number\r\n{\r\n  return h < 0 \r\n    ? 360 - Math.abs(h % 360)\r\n    : h % 360;\r\n}\r\n\r\nfunction clampPercent(x: number)\r\n{\r\n  return clamp(x, 0, 100);\r\n}","\r\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\r\nimport { ID } from './ID';\r\nimport { NumberType } from './Number';\r\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\r\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\r\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\r\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\r\nimport { ObjectType, ObjectOptions } from './Object';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\n\r\nexport interface ColorOptions extends ObjectOptions\r\n{\r\n  hasAlpha?: boolean;\r\n}\r\n\r\n\r\nexport class ColorType extends ObjectType<ColorOptions>\r\n{\r\n\r\n  public static readonly componentType = new NumberType({ \r\n    min: COMPONENT_MIN, \r\n    max: COMPONENT_MAX, \r\n    whole: true \r\n  });\r\n\r\n  public static readonly componentProps = {\r\n    r: ColorType.componentType,\r\n    g: ColorType.componentType,\r\n    b: ColorType.componentType,\r\n    a: ColorType.componentType,\r\n  };\r\n\r\n  public static spaces: ColorSpace<any>[] = [\r\n    ColorSpaceRGB,\r\n    ColorSpaceHSL,\r\n  ];\r\n\r\n  public static id = ID.Color;\r\n\r\n  public static operations = ColorOperations;\r\n\r\n  public static computeds = ColorComputeds;\r\n\r\n  public static baseType = new ColorType({ hasAlpha: true });\r\n\r\n  public static decode(data: any[]): ColorType \r\n  {\r\n    return new ColorType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: ColorType): any \r\n  {\r\n    return type.options.hasAlpha\r\n      ? [this.id, { hasAlpha: true }]\r\n      : this.id;\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    const parsed = ColorType.baseType.normalize(data);\r\n\r\n    if (!parsed)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new ColorType({\r\n      hasAlpha: parsed.a !== COMPONENT_MAX,\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static getFormat(id: string): ColorFormat<any> | undefined\r\n  {\r\n    const [spaceId, formatId] = id.split(':');\r\n    const space = this.spaces.find((s) => s.code === spaceId);\r\n\r\n    return space\r\n      ? space.formatMap[formatId]\r\n      : undefined;\r\n  }\r\n\r\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\r\n  {\r\n    super({\r\n      ...colorOptions,\r\n      props: ColorType.componentProps,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ColorType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ColorType.operations.map;\r\n  }\r\n\r\n  public merge(type: ColorType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (other instanceof ColorType)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.strict && \r\n        !options.exact &&\r\n        other instanceof ObjectType &&\r\n        other.isCompatible(this)) \r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    super.removeDescribedRestrictions();\r\n\r\n    delete this.options.hasAlpha;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.normalize(value) !== undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    for (const space of ColorType.spaces)\r\n    {\r\n      for (const formats of space.formats)\r\n      {\r\n        const parsed = formats.parser(value);\r\n\r\n        if (parsed !== null)\r\n        {\r\n          return space.toColor(parsed);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public newInstance(): ColorType\r\n  {\r\n    return new ColorType({});\r\n  }\r\n\r\n  public clone(): ColorType\r\n  {\r\n    return new ColorType({\r\n      hasAlpha: this.options.hasAlpha,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ColorType.encode(this);\r\n  }\r\n\r\n  public create(): Color\r\n  {\r\n    return { r: 0, g: 0, b: 0, a: 0 };\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\r\n  {\r\n    return {\r\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      a: COMPONENT_MAX,\r\n    };\r\n  }\r\n\r\n  public fromJson(json: Color): Color\r\n  {\r\n    return {\r\n      r: json.r,\r\n      g: json.g,\r\n      b: json.b,\r\n      a: json.a,\r\n    };\r\n  }\r\n\r\n  public toJson(value: Color): Color\r\n  {\r\n    return value ? {\r\n      r: value.r,\r\n      g: value.g,\r\n      b: value.b,\r\n      a: value.a,\r\n    } : null;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Set RGB color space type.\r\n */\r\nColorSpaceRGB.setType(ColorType.baseType);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\r\n\r\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\r\n\r\nconst ops = SetOperations;\r\n\r\nexport const SetOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\r\n\r\n  has: ops.set('has', {}, ['set', 'value']),\r\n\r\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\r\n\r\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\r\n\r\n  count: ops.set('count', { }, ['set']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nSetComputeds.set('copy', SetOps.copy);\r\nSetComputeds.set('values', SetOps.values);\r\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { FuncOptions, Func } from './Func';\r\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\r\nimport { Type, TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Exprs } from './Exprs';\r\nimport { Runtime } from './Runtime';\r\nimport { EnumType } from './types/Enum';\r\nimport { Relation } from './Relation';\r\nimport { ListOps } from './ops/ListOps';\r\nimport { AnyOps } from './ops/AnyOps';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface EntityOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  type: any;\r\n  instances: any[];\r\n  primaryType?: EntityPrimaryType,\r\n  key?: any;\r\n  describe?: any;\r\n  transcoders?: Record<string, EntityTranscoderOptions>;\r\n  indexes?: Record<string, EntityIndexOptions>;\r\n  methods?: Record<string, Func | FuncOptions>;\r\n}\r\n\r\nexport interface EntityIndex\r\n{\r\n  name: string;\r\n  props: string[];\r\n  types?: Type[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityIndexOptions\r\n{\r\n  props: string[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityTranscoder\r\n{\r\n  encode: Expression;\r\n  decode: Expression;\r\n  encodedType: Type;\r\n}\r\n\r\nexport interface EntityTranscoderOptions\r\n{\r\n  encode: any;\r\n  decode: any;\r\n  encodedType: any;\r\n}\r\n\r\nexport type EntityPropPair = [string, Type];\r\n\r\nexport interface EntityProps\r\n{\r\n  type: EntityKeyType;\r\n  props: EntityPropPair[];\r\n  relation?: Relation;\r\n}\r\n\r\nexport enum EntityKeyType\r\n{\r\n  PRIMARY,\r\n  FOREIGN,\r\n  NONE\r\n}\r\n\r\nexport enum EntityPrimaryType\r\n{\r\n  GIVEN,\r\n  AUTO_INCREMENT,\r\n  UUID\r\n}\r\n\r\nexport interface EntityEvents\r\n{\r\n  change(entity: Entity): void;\r\n  renamed(entity: Entity, oldName: string): void;\r\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\r\n  removeProp(entity: Entity, prop: string): void;\r\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \r\n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\r\n  addIndex(entity: Entity, index: EntityIndex): void;\r\n  removeIndex(entity: Entity, index: EntityIndex): void;\r\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\r\n  addMethod(entity: Entity, method: Func): void;\r\n  removeMethod(entity: Entity, method: Func): void;\r\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\r\n}\r\n\r\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\r\n    return new Entity({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      type: Types.object(),\r\n      instances: [],\r\n      methods: Object.create(null),\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public static uuid(): string {\r\n    // tslint:disable: no-magic-numbers no-bitwise\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n      const r = Math.random() * 16 | 0\r\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n\r\n      return v.toString(16);\r\n    });\r\n    // tslint:enable: no-magic-numbers no-bitwise\r\n  }\r\n\r\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\r\n    [EntityPrimaryType.GIVEN]: null,\r\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\r\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\r\n  };\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public type: ObjectType;\r\n  public instances: any[];\r\n  public methods: Record<string, Func>;\r\n  public key: Expression;\r\n  public keyType: Type;\r\n  public describe: Expression;\r\n  public transcoders: Record<string, EntityTranscoder>;\r\n  public indexes: Record<string, EntityIndex>;\r\n  public primaryType: EntityPrimaryType;\r\n\r\n  public constructor(options: EntityOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n    this.instances = options.instances && options.instances.length\r\n      ? options.instances.map((i) => this.type.fromJson(i))\r\n      : [];\r\n    this.methods = this.decodeMethods(defs, options.methods);\r\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\r\n    this.indexes = this.decodeIndexes(options.indexes);\r\n    this.primaryType = isNumber(options.primaryType)\r\n        ? options.primaryType\r\n        : EntityPrimaryType.AUTO_INCREMENT;\r\n    this.key = options.key \r\n      ? defs.getExpression(options.key)\r\n      : this.getPrimaryKeyExpression();\r\n    this.keyType = this.key.getType(defs, this.getKeyContext());\r\n    this.describe = options.describe\r\n      ? defs.getExpression(options.describe)\r\n      : Exprs.noop();\r\n  }\r\n\r\n  public sync(options: EntityOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n\r\n      this.instances = options instanceof Entity\r\n        ? options.instances\r\n        : options.instances && options.instances.length\r\n          ? options.instances.map((i) => this.type.fromJson(i))\r\n          : [];\r\n\r\n      objectSync(\r\n        this.methods, \r\n        this.decodeMethods(defs, options.methods),\r\n        (target, prop, method) => this.addMethod(method, true),\r\n        (target, prop) => this.removeMethod(prop, true),\r\n        (target, prop, existing, updated) => existing.sync(updated, defs),\r\n      ),\r\n      \r\n      objectSync(\r\n        this.transcoders,\r\n        this.decodeTranscoders(defs, options.transcoders),\r\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\r\n        (target, prop) => this.removeTranscoder(prop, true),\r\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\r\n      );\r\n\r\n      objectSync(\r\n        this.indexes,\r\n        this.decodeIndexes(options.indexes),\r\n        (target, name, index) => this.addIndex(name, index, true),\r\n        (target, name) => this.removeIndex(name, true),\r\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\r\n      );\r\n\r\n      this.primaryType = isNumber(options.primaryType)\r\n          ? options.primaryType\r\n          : EntityPrimaryType.AUTO_INCREMENT;\r\n      this.key = options.key \r\n        ? defs.getExpression(options.key)\r\n        : this.getPrimaryKeyExpression();\r\n      this.keyType = this.key.getType(defs, this.getKeyContext());\r\n      this.describe = options.describe\r\n        ? defs.getExpression(options.describe)\r\n        : Exprs.noop();\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.trigger('change', this);\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: EntityOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('change', this);\r\n  }\r\n\r\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\r\n  {\r\n    return methods\r\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\r\n      : {};\r\n  }\r\n\r\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\r\n  {\r\n    return method instanceof Func\r\n      ? method\r\n      : Func.create(defs, method);\r\n  }\r\n\r\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\r\n  {\r\n    return transcoders\r\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\r\n      : {};\r\n  }\r\n\r\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\r\n  {\r\n    return options.encode instanceof Expression\r\n      ? options\r\n      : {\r\n          encode: defs.getExpression(options.encode),\r\n          decode: defs.getExpression(options.decode),\r\n          encodedType: defs.getType(options.encodedType),\r\n        };\r\n  }\r\n\r\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\r\n  {\r\n    return indexes\r\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\r\n          name,\r\n          props,\r\n          unique,\r\n          primary,\r\n        }))\r\n      : {};\r\n  }\r\n\r\n  public encode(): EntityOptions \r\n  {\r\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\r\n\r\n    return {\r\n      name,\r\n      created, \r\n      updated,\r\n      description,\r\n      meta,\r\n      type: type.encode(),\r\n      instances: instances.map((i) => type.toJson(i)),\r\n      methods: objectMap(methods, (m) => m.encode()),\r\n      key: key.encode(),\r\n      describe: describe.encode(),\r\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\r\n        encode: encode.encode(),\r\n        decode: decode.encode(),\r\n        encodedType: encodedType.encode(),\r\n      })),\r\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\r\n        props,\r\n        unique,\r\n        primary,\r\n      })),\r\n    };\r\n  }\r\n\r\n  public canStore(defs: Definitions): boolean\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\r\n\r\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public updateKeyType(defs: Definitions)\r\n  {\r\n    const keyType = this.key.getType(defs, this.getKeyContext());\r\n\r\n    if (keyType)\r\n    {\r\n      this.keyType = keyType;\r\n    }\r\n  }\r\n\r\n  public renameProp(prop: string, newProp: string)\r\n  {\r\n    let changed = false;\r\n    const transcoder = this.transcoders[prop];\r\n\r\n    if (transcoder)\r\n    {\r\n      DataTypes.objectRemove(this.transcoders, prop);\r\n      DataTypes.objectSet(this.transcoders, newProp, transcoder);\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props[i] = newProp;\r\n\r\n        this.updateIndex(index.name, true);\r\n        changed = true;\r\n      }\r\n    });\r\n\r\n    this.trigger('renameProp', this, newProp, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public removeProp(prop: string)\r\n  {\r\n    let changed = false;\r\n\r\n    if (prop in this.transcoders)\r\n    {\r\n      this.removeTranscoder(prop, true);\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index, indexName) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props.splice(i, 1);\r\n        changed = true;\r\n\r\n        if (index.props.length === 0)\r\n        {\r\n          this.removeIndex(indexName, true);\r\n        }\r\n        else\r\n        {\r\n          this.updateIndex(indexName, true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.trigger('removeProp', this, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public getEntityProps(): EntityProps\r\n  {\r\n    const primary = this.getPrimary();\r\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\r\n      prop,\r\n      primary.types && primary.types[i]\r\n        ? primary.types[i]\r\n        : this.type.options.props[prop]\r\n    ]);\r\n\r\n    return {\r\n      type: EntityKeyType.PRIMARY,\r\n      props,\r\n    };\r\n  }\r\n\r\n  public getKey(run: Runtime, instance: any): any\r\n  {\r\n    const { type, key } = this;\r\n\r\n    return run.run(key, { instance, type });\r\n  }\r\n\r\n  public setKey(instance: any)\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const prop = this.getDynamicPrimaryKey();\r\n\r\n    if (instance[prop])\r\n    {\r\n      return;\r\n    }\r\n\r\n    switch (this.primaryType)\r\n    {\r\n      case EntityPrimaryType.AUTO_INCREMENT:\r\n        DataTypes.objectSet(instance, prop, this.instances.reduce((a, b) => isNumber(b[prop]) ? Math.max(a, b[prop]) : a, 0) + 1);\r\n        break;\r\n      case EntityPrimaryType.UUID:\r\n        DataTypes.objectSet(instance, prop, Entity.uuid());\r\n        break;\r\n    }\r\n  }\r\n\r\n  public takeKey(run: Runtime, instance: any): any\r\n  {\r\n    this.setKey(instance);\r\n\r\n    return this.getKey(run, instance);\r\n  }\r\n\r\n  public getDescribe(run: Runtime, instance: any): any\r\n  {\r\n    const { type, describe } = this;\r\n\r\n    return run.run(describe, { instance, type });\r\n  }\r\n\r\n  public getDecodedPropertyTypes(): TypeMap\r\n  {\r\n    return this.type.options.props;\r\n  }\r\n\r\n  public getPropertyTypeFor(forProperty?: string)\r\n  {\r\n    return forProperty\r\n    ? Types.enumForText([forProperty])\r\n    : this.getPropertyType(); \r\n  }\r\n\r\n  public getEncodedPropertyTypes(): TypeMap\r\n  {\r\n    return objectMap(this.type.options.props, \r\n      (type, prop) => prop in this.transcoders\r\n        ? this.transcoders[prop].encodedType\r\n        : type\r\n    );\r\n  }\r\n\r\n  public getEncodedType(): ObjectType\r\n  {\r\n    return Types.object(this.getEncodedPropertyTypes());\r\n  }\r\n\r\n  public getDecodedType(): ObjectType\r\n  {\r\n    return this.type;\r\n  }\r\n\r\n  public getProperties(): string[]\r\n  {\r\n    return Object.keys(this.getDecodedPropertyTypes());\r\n  }\r\n\r\n  public getPropertyType(): EnumType\r\n  {\r\n    return Types.enumForText(this.getProperties());\r\n  }\r\n\r\n  public getKeyReturnType()\r\n  {\r\n    return this.keyType;\r\n  }\r\n\r\n  public getKeyContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getDescribeContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getEncoded(run: Runtime, instance: any): any\r\n  {\r\n    const encoded: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\r\n    }\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const encoder = property in transcoders\r\n      ? transcoders[property].encode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return encoder\r\n      ? run.run(encoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getEncodeContext(forProperty?: string): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getDecodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getDecodeExpected(forProperty);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\r\n  {\r\n    return forProperty && forProperty in this.transcoders\r\n      ? this.transcoders[forProperty].encodedType\r\n      : defaultType;\r\n  }\r\n\r\n  public getDecoded(run: Runtime, encoded: any): any\r\n  {\r\n    const instance: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\r\n    }\r\n\r\n    return instance;\r\n  }\r\n\r\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const decoder = property in transcoders\r\n      ? transcoders[property].decode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return decoder\r\n      ? run.run(decoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getEncodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getDecodeExpected(forProperty?: string)\r\n  {\r\n    return forProperty\r\n      ? this.type.options.props[forProperty] || Types.any()\r\n      : Types.any();\r\n  }\r\n\r\n  public getIndexExpectedType()\r\n  {\r\n    return Types.set(this.getPropertyType());\r\n  }\r\n\r\n  public getDynamicPrimaryKey(): string\r\n  {\r\n    const existing = this.type.options.props;\r\n\r\n    return !('id' in existing)\r\n      ? 'id'\r\n      : !('_id' in existing)\r\n        ? '_id'\r\n        : '__id';\r\n  }\r\n\r\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\r\n  {\r\n    const primary = this.getPrimary(name);\r\n\r\n    return primary.props.length > 1\r\n      ? Exprs.op(ListOps.join, {\r\n          list: primary.props.map((prop) => \r\n            Exprs.get('instance', prop)\r\n          ),\r\n          delimiter: Exprs.const(separator),\r\n          toText: Exprs.op(AnyOps.asText, {\r\n            value: Exprs.get('item'),\r\n          }),\r\n        })\r\n      : Exprs.get('instance', primary.props[0]);\r\n  }\r\n\r\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\r\n  {\r\n    const defined = name in this.indexes\r\n      ? this.indexes[name]\r\n      : objectReduce(this.indexes, \r\n          (index, indexName, first) => first ? first : index.primary ? index : first, \r\n        null);\r\n\r\n    if (defined)\r\n    {\r\n      return defined;\r\n    }\r\n\r\n    if (returnDynamic)\r\n    {\r\n      const id = this.getDynamicPrimaryKey();\r\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\r\n\r\n      return {\r\n        name,\r\n        props: [id],\r\n        types: [type],\r\n        unique: true,\r\n        primary: true,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getUniqueIndexes(): EntityIndex[]\r\n  {\r\n    return objectReduce(this.indexes, (index, indexName, unique) => {\r\n      if (index.unique) {\r\n        unique.push(index);\r\n      }\r\n\r\n      return unique;\r\n    }, []);\r\n  }\r\n\r\n  public addPrimary(props: string | string[]): this\r\n  {\r\n    this.addIndex('primary', {\r\n      props: isArray(props) ? props : [props], \r\n      unique: true, \r\n      primary: true\r\n    });\r\n\r\n    this.primaryType = EntityPrimaryType.GIVEN;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.indexes[name];\r\n    const index: EntityIndex = { ...options, name };\r\n\r\n    DataTypes.objectSet(this.indexes, name, index);\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateIndex', this, index, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addIndex', this, index);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    this.trigger('updateIndex', this, index, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    DataTypes.objectRemove(this.indexes, name);\r\n\r\n    this.trigger('removeIndex', this, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameIndex(name: string, newName: string): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    if (index && name !== newName)\r\n    {\r\n      const previous = { ...index, props: index.props.slice() };\r\n\r\n      index.name = newName;\r\n\r\n      DataTypes.objectRemove(this.indexes, name);\r\n      DataTypes.objectSet(this.indexes, newName, index);\r\n\r\n      this.trigger('updateIndex', this, index, previous);\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.transcoders[prop];\r\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\r\n\r\n    DataTypes.objectSet(this.transcoders, prop, transcoder);\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addTranscoder', this, name, transcoder);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      DataTypes.objectRemove(this.transcoders, name);\r\n\r\n      this.trigger('removeTranscoder', this, name, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addMethod(method: Func, delayChange: boolean = false): this\r\n  {\r\n    const existing = this.methods[method.name];\r\n\r\n    DataTypes.objectSet(this.methods, method.name, method);\r\n\r\n    if (existing)\r\n    {\r\n      this.trigger('updateMethod', this, method, existing);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addMethod', this, method);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method && name !== newName)\r\n    {\r\n      method.name = newName;\r\n\r\n      DataTypes.objectRemove(this.methods, name);\r\n      DataTypes.objectSet(this.methods, newName, method);\r\n\r\n      this.trigger('updateMethod', this, method, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeMethod(name: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method)\r\n    {\r\n      DataTypes.objectRemove(this.methods, name);\r\n\r\n      this.trigger('removeMethod', this, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { isObject, isArray, isSet, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface SetOptions \r\n{\r\n  value: Type;\r\n}\r\n\r\nexport class SetType extends Type<SetOptions> \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Set;\r\n\r\n  public static operations = SetOperations;\r\n\r\n  public static computeds = SetComputeds;\r\n\r\n  public static baseType = new SetType({ value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): SetType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public static encode(type: SetType): any \r\n  {\r\n    const { value } = type.options;\r\n\r\n    return [this.id, value.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isSet(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let value: Type = new AnyType({});\r\n\r\n    const type = new SetType({ value });\r\n\r\n    cache.set(data, type);\r\n\r\n    for (const [setValue] of data.entries())\r\n    {\r\n      value = describer.merge(value, setValue);\r\n    }\r\n\r\n    type.options.value = value;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 11;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\r\n          return new Set(json.value.map(reader));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isSet(json)) {\r\n          return {\r\n            $any: 'set',\r\n            value: Array.from(json.entries()).map(writer),\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isSet(x)) {\r\n          const newSet = new Set();\r\n\r\n          setObjectCopy(x, newSet);\r\n  \r\n          for (const [value] of x.entries()) {\r\n            newSet.add(copy(value));\r\n          }\r\n  \r\n          return newSet;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isSet(a);\r\n        const bt = isSet(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isSet(a) && isSet(b)) {\r\n          let dl = a.size - b.size;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            const avalues = Array.from(a);\r\n            const bvalues = Array.from(b);\r\n\r\n            for (let i = 0; i < avalues.length; i++) {\r\n              const c = compare(avalues[i], bvalues[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isSet(a);\r\n        const bl = isSet(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (isSet(a) && isSet(b))\r\n        {\r\n          if (a.size !== b.size)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (const value of a)\r\n          {\r\n            if (!b.has(value))\r\n            {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return SetType.operations.map;\r\n  }\r\n\r\n  public merge(type: SetType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof SetType && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === SetType.STEP_VALUE \r\n      ? this.options.value\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(SetOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = value\r\n    return Exprs.op(SetOps.map, {\r\n      set: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      value: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Set || isArray(test))\r\n    {\r\n      const { value } = this.options;\r\n\r\n      return !Array.from(test).some((v) => !value.isValid(v));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { value } = this.options;\r\n    \r\n    return new Set(Array.from(test).map((v) => value.normalize(v)));\r\n  }\r\n\r\n  public newInstance(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetType.encode(this);\r\n  }\r\n\r\n  public create(): Set<any>\r\n  {\r\n    return new Set();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Set<any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const v = value.random(rnd);\r\n\r\n      out.add(v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<any>): Set<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new Set(json.map((v) => value.fromJson(v)));\r\n  }\r\n\r\n  public toJson(set: Set<any>): Array<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return Array.from(set.entries()).map((v) => value.toJson(v));\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved, TypeProvider } from './Type';\r\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\r\nimport { NumberType } from './types/Number'\r\nimport { AnyType } from './types/Any';\r\nimport { BooleanType } from './types/Boolean';\r\nimport { DateOptions, DateType } from './types/Date';\r\nimport { TextType, TextOptions } from './types/Text';\r\nimport { EnumType } from './types/Enum';\r\nimport { ObjectType } from './types/Object';\r\nimport { ListType } from './types/List';\r\nimport { ManyType } from './types/Many';\r\nimport { MapType } from './types/Map';\r\nimport { NullType } from './types/Null';\r\nimport { OptionalType } from './types/Optional';\r\nimport { TupleType } from './types/Tuple';\r\nimport { NotType } from './types/Not';\r\nimport { ColorType } from './types/Color';\r\nimport { SetType } from './types/Set';\r\nimport { EntityType } from './types/Entity';\r\n\r\n\r\nexport class Types\r\n{\r\n\r\n  public static INDEX = Types.index();\r\n\r\n  public static LENGTH = Types.index();\r\n\r\n  public static CHAR = Types.char();\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      type.setParent();\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  public static any()\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\r\n  {\r\n    return new BooleanType({ true: trues, false: falses });\r\n  }\r\n\r\n  public static date(options: DateOptions = {})\r\n  {\r\n    return new DateType(options);\r\n  }\r\n\r\n  public static entity(name: string, types: TypeProvider)\r\n  {\r\n    return new EntityType(name, types);\r\n  }\r\n\r\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.parse(value),\r\n      key: this.parse(key),\r\n      constants: toMap(constants),\r\n    }));\r\n  }\r\n\r\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.text(),\r\n      key: this.text(),\r\n      constants: isMap(constants)\r\n        ? constants\r\n        : isArray(constants[0])\r\n          ? new Map(constants as Array<[string, string]>)\r\n          : new Map((constants as string[]).map((c) => [c, c]))\r\n    }));\r\n  }\r\n\r\n  public static list(item: TypeInput, min?: number, max?: number)\r\n  {\r\n    return this.setParent(new ListType({\r\n      item: this.parse(item),\r\n      min, \r\n      max,\r\n    }));\r\n  }\r\n\r\n  public static many(types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\r\n  {\r\n    return this.setParent(new ManyType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static not(types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\r\n  {\r\n    return this.setParent(new NotType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static map(value: TypeInput, key: TypeInput = TextType)\r\n  {\r\n    return this.setParent(new MapType({ \r\n      key: this.parse(key),\r\n      value: this.parse(value)\r\n    }));\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return NullType.baseType\r\n  }\r\n\r\n  public static number(min?: number, max?: number, whole?: boolean)\r\n  {\r\n    return new NumberType({ min, max, whole });\r\n  }\r\n\r\n  public static int(min?: number, max?: number)\r\n  {\r\n    return new NumberType({ min, max, whole: true });\r\n  }\r\n\r\n  public static index(max?: number)\r\n  {\r\n    return new NumberType({ min: 0, max, whole: true });\r\n  }\r\n\r\n  public static char()\r\n  {\r\n    return new TextType({ min: 1, max: 1 });\r\n  }\r\n\r\n  public static object(props: TypeInputMap = {})\r\n  {\r\n    return this.setParent(new ObjectType({ \r\n      props: this.resolve(props),\r\n    }));\r\n  }\r\n\r\n  public static optional(type: TypeInput): Type\r\n  {\r\n    const innerType = this.parse(type);\r\n\r\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\r\n  }\r\n\r\n  public static color(options: { hasAlpha?: boolean } = {})\r\n  {\r\n    return this.setParent(new ColorType(options));\r\n  }\r\n\r\n  public static set(value: TypeInput)\r\n  {\r\n    return this.setParent(new SetType({\r\n      value: this.parse(value),\r\n    }));\r\n  }\r\n\r\n  public static text(options: TextOptions = {})\r\n  {\r\n    return new TextType(options);\r\n  }\r\n\r\n  public static tuple(types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\r\n  {\r\n    return this.setParent(new TupleType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static parse(input: TypeInput): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : input.baseType.newInstance();\r\n  }\r\n\r\n  public static simplify(type: Type): Type;\r\n  public static simplify(type: Type | null): Type | null;\r\n  public static simplify(type: Type | null): Type | null\r\n  {\r\n    return type ? type.getSimplifiedType() : null;\r\n  }\r\n\r\n  public static resolve<T>(types: T): TypeResolved<T>\r\n  {\r\n    let result: any;\r\n\r\n    if (!types)\r\n    {\r\n    }\r\n    else if (types instanceof Type)\r\n    {\r\n      result = types;\r\n    }\r\n    else if ((types as any).baseType instanceof Type)\r\n    {\r\n      result = (types as any).baseType.newInstance();\r\n    }\r\n    else if (isArray(types))\r\n    {\r\n      result = types.map(t => this.resolve(t));\r\n    }\r\n    else if (isObject(types))\r\n    {\r\n      result = objectMap(types as any, t => this.resolve(t));\r\n    }\r\n\r\n    return result as unknown as TypeResolved<T>;\r\n  }\r\n\r\n  public static reduce(type: Type[]): Type\r\n  {\r\n    return type.length === 1 ? type[0] : new ManyType(type);\r\n  }\r\n\r\n  public static explode(outerType: Type): Type[]\r\n  {\r\n    return outerType instanceof ManyType ? outerType.options : [outerType];\r\n  }\r\n\r\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\r\n  {\r\n    if (type instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof OptionalType && type.options instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof ManyType) \r\n    {\r\n      const oneOf = type.options.find((t) => t instanceof maybe);\r\n\r\n      if (oneOf) \r\n      {\r\n        return this.optional(oneOf);\r\n      }\r\n\r\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\r\n\r\n      if (oneOfOptional) \r\n      {\r\n        return oneOfOptional;\r\n      }\r\n    }\r\n\r\n    return this.optional(maybe);\r\n  }\r\n\r\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\r\n  {\r\n    if (readonlyTypes.length === 0)\r\n    {\r\n      return noTypes;\r\n    }\r\n\r\n    if (readonlyTypes.find(t => t instanceof AnyType))\r\n    {\r\n      return AnyType.baseType;\r\n    }\r\n\r\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\r\n\r\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\r\n  }\r\n\r\n  public static merge(a: Type, b: Type): Type\r\n  {\r\n    if (a instanceof AnyType)\r\n    {\r\n      return b;\r\n    }\r\n\r\n    const optional = \r\n      a instanceof OptionalType ||\r\n      b instanceof OptionalType;\r\n\r\n    const ar = a.getRequired();\r\n    const br = b.getRequired();\r\n\r\n    if (isSameClass(ar, br))\r\n    {\r\n      ar.merge(br);\r\n\r\n      return optional ? this.optional(ar) : ar;\r\n    }\r\n\r\n    if (ar instanceof ManyType || br instanceof ManyType)\r\n    {\r\n      const atypes = this.explode(ar);\r\n      const btypes = this.explode(br);\r\n      const an = atypes.length;\r\n\r\n      for (const ktype of btypes)\r\n      {\r\n        let matched = false;\r\n        const koptional = ktype instanceof OptionalType;\r\n        const krequired: Type = koptional ? ktype.options : ktype;\r\n\r\n        for (let i = 0; i < an; i++)\r\n        {\r\n          const itype = atypes[i];\r\n          const ioptional = itype instanceof OptionalType;\r\n          const irequired: Type = ioptional ? itype.options : itype;\r\n\r\n          if (isSameClass(irequired, krequired))\r\n          {\r\n            matched = true;\r\n            irequired.merge(krequired);\r\n\r\n            if (koptional && !ioptional) \r\n            {\r\n              atypes[i] = this.optional(irequired);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!matched)\r\n        {\r\n          atypes.push(ktype);\r\n        }\r\n      }\r\n\r\n      return optional\r\n        ? this.optional(this.reduce(atypes))\r\n        : this.reduce(atypes);\r\n    }\r\n\r\n    return this.many(a, b);\r\n  }\r\n\r\n}","\r\nexport class LinkedNode<T> \r\n{\r\n\r\n  public value: T;\r\n  public next: LinkedNode<T>;\r\n  public prev: LinkedNode<T>;\r\n\r\n  constructor(value: T) \r\n  {\r\n    this.value = value;\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  // List Operations\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public clear() \r\n  {\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  public addLast(value: T): LinkedNode<T> \r\n  {\r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this.prev);\r\n    \r\n    return node;\r\n  }\r\n\r\n  public addFirst(value: T): LinkedNode<T> \r\n  { \r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this);\r\n\r\n    return node;\r\n  }\r\n\r\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \r\n  {\r\n    const stop = this;\r\n    let curr = this.next;\r\n    let count = 0;\r\n\r\n    while (curr !== stop) \r\n    {\r\n      const next = curr.next;\r\n      callback(curr.value, count, curr);\r\n      curr = next;\r\n      count++;\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  // Item Operations\r\n\r\n  public isRemoved()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public remove() \r\n  {\r\n    if (!this.isRemoved()) \r\n    {\r\n      this.next.prev = this.prev;\r\n      this.prev.next = this.next;\r\n      this.next = this.prev = this;\r\n    }\r\n  }\r\n\r\n  public linkAfter(node: LinkedNode<T>) \r\n  {\r\n    this.remove();\r\n    this.next = node.next;\r\n    this.prev = node;\r\n    node.next.prev = this;\r\n    node.next = this;\r\n  }\r\n\r\n}\r\n","import { isArray } from './fns';\r\nimport { LinkedNode } from './LinkedNode';\r\n\r\n\r\n\r\nexport type EventCallback<\r\n  E, \r\n  K extends keyof E = any, \r\n  A extends any[] = EventTypeArgs<E, K>,\r\n  R = EventTypeResult<E, K>  \r\n> = (type: K, ...payload: A) => R;\r\n\r\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\r\n\r\nexport type EventCallbackMap<E> = \r\n{\r\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\r\n};\r\n\r\nexport type EventTypeResult<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<any, infer R>\r\n    ? R\r\n    : never;\r\n\r\nexport type EventTypeArgs<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<infer A, any>\r\n    ? A\r\n    : never;\r\n\r\nexport class EventBase<E> \r\n{\r\n\r\n  private listeners: EventCallbackMap<E> = Object.create(null);\r\n\r\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \r\n  {\r\n    const listeners = this.getListeners(event, false);\r\n    const results: R[] = [];\r\n\r\n    if (listeners) \r\n    { \r\n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  public hasListeners<K extends keyof E>(event: K): boolean\r\n  {\r\n    return this.getListeners(event) !== null;\r\n  }\r\n\r\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\r\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\r\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \r\n  {\r\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\r\n\r\n    if (!listeners && create) \r\n    {\r\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\r\n    }\r\n\r\n    return listeners || null;\r\n  }\r\n\r\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const events = isArray(event) ? event : [event];\r\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\r\n    \r\n    return () => nodes.forEach((n) => n.remove());\r\n  }\r\n\r\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const off = this.on(event, (type, ...payload) => {\r\n      off();\r\n      \r\n      return handler(type, ...payload);\r\n    });\r\n\r\n    return off;\r\n  }\r\n\r\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \r\n  {\r\n    if (event) \r\n    {\r\n      if (Array.isArray(event)) \r\n      {\r\n        event.forEach((e) => this.off(e, handler));\r\n      } \r\n      else \r\n      {\r\n        const listeners = this.listeners[event];\r\n\r\n        if (listeners) \r\n        {\r\n          if (handler) \r\n          {\r\n            listeners.each((other, index, node) => {\r\n              if (other === handler) {\r\n                node.remove();\r\n              }\r\n            });\r\n          }\r\n          else \r\n          {\r\n            listeners.clear();\r\n          }\r\n        }\r\n      }\r\n    } \r\n    else \r\n    {\r\n      this.listeners = Object.create(null);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n","import { ObjectType, ObjectOptions } from './types/Object';\r\nimport { TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Exprs } from './Exprs';\r\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { DataTypes } from './DataTypes';\r\nimport { EventBase } from './EventBase';\r\n\r\n\r\nexport interface FuncOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  params: any;\r\n  expression: any;\r\n  defaults: any;\r\n  tests: FuncTest[];\r\n}\r\n\r\nexport interface FuncTest\r\n{\r\n  name: string;\r\n  description: string;\r\n  args: any;\r\n  expected: any;\r\n}\r\n\r\nexport interface FuncEvents\r\n{\r\n  changed(func: Func): void;\r\n  renamed(func: Func, oldName: string): void;\r\n  renameParameter(func: Func, param: string, oldParam: string): void;\r\n  removeParameter(func: Func, param: string): void;\r\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\r\n  addTest(func: Func, test: FuncTest): void;\r\n  removeTest(func: Func, test: FuncTest): void;\r\n  updateTest(func: Func, test: FuncTest): void;\r\n}\r\n\r\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\r\n    return new Func({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      params: Types.object(),\r\n      expression: Exprs.noop(),\r\n      defaults: {},\r\n      tests: [],\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public params: ObjectType<ObjectOptions>;\r\n  public expression: Expression;\r\n  public defaults: any;\r\n  public tests: FuncTest[];\r\n\r\n  public constructor(options: FuncOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.defaults = this.params.fromJson(options.defaults);\r\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\r\n  }\r\n\r\n  public sync(options: FuncOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.params = options instanceof Func\r\n        ? options.params\r\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\r\n      this.expression = options instanceof Func\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n      this.defaults = options instanceof Func\r\n        ? options.defaults\r\n        : this.params.fromJson(options.defaults);\r\n\r\n      arraySync(\r\n        this.tests, \r\n        options instanceof Func\r\n          ? options.tests\r\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\r\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \r\n        (target, value) => this.addTest(value, true),\r\n        (target, index) => this.removeTest(index, true),\r\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: FuncOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): FuncOptions \r\n  {\r\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      description, \r\n      meta,\r\n      params: params.encode(),\r\n      expression: expression.encode(),\r\n      defaults: params.toJson(defaults),\r\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\r\n    };\r\n  }\r\n\r\n  public renameParameter(name: string, newName: string): boolean\r\n  {\r\n    const paramType = this.params.options.props[name];\r\n\r\n    if (paramType)\r\n    {\r\n      DataTypes.objectSet(this.params.options.props, newName, paramType);\r\n      DataTypes.objectRemove(this.params.options.props, name);\r\n\r\n      if (name in this.defaults)\r\n      {\r\n        DataTypes.objectSet(this.defaults, newName, this.defaults[name]);\r\n        DataTypes.objectRemove(this.defaults, name);\r\n      }\r\n\r\n      this.trigger('renameParameter', this, newName, name);\r\n      this.changed();\r\n    }\r\n\r\n    return !!paramType;\r\n  }\r\n\r\n  public removeParameter(name: string): boolean\r\n  {\r\n    const exists = name in this.params.options.props;\r\n\r\n    if (exists)\r\n    {\r\n      DataTypes.objectRemove(this.params.options.props, name);\r\n      DataTypes.objectRemove(this.defaults, name);\r\n\r\n      this.trigger('removeParameter', this, name);\r\n      this.changed();\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public addTest(test: FuncTest, delayChange: boolean = false)\r\n  {\r\n    this.tests.push(test);\r\n\r\n    this.trigger('addTest', this, test);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(test)\r\n      ? this.tests[test]\r\n      : test;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newTest);\r\n\r\n      this.trigger('updateTest', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(test)\r\n      ? test\r\n      : this.tests.indexOf(test);\r\n    const exists = index >= 0 && index < this.tests.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.tests[index];\r\n      \r\n      this.trigger('removeTest', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \r\n  {\r\n    const context = Types.object({\r\n      ...this.params.options.props,\r\n      ...paramsTypes,\r\n    });\r\n\r\n    return this.expression.getType(defs, context);\r\n  }\r\n\r\n  public getParamTypes(): ObjectType\r\n  {\r\n    return isEmpty(this.defaults)\r\n      ? this.params\r\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\r\n  }\r\n\r\n  public getParamType(param: string)\r\n  {\r\n    const propType = this.params.options.props[param];\r\n\r\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\r\n      ? propType.getRequired()\r\n      : propType;\r\n  }\r\n\r\n  public getArguments(args: any, returnNew: boolean = true)\r\n  {\r\n    const target = returnNew ? { ...args } : args;\r\n\r\n    for (const prop in this.defaults)\r\n    {\r\n      const propType = this.params.options.props[prop];\r\n\r\n      if (!propType.getRequired().isValid(target[prop]))\r\n      {\r\n        DataTypes.objectSet(target, prop, DataTypes.copy(this.defaults[prop]));\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.tests.forEach((test) =>\r\n    {\r\n      test.args = cmd({ value: test.args });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    if (!(arg in this.params.options.props))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.expression.mutates(def, arg, false);\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { MapInput, toMap, reverseMap, now } from './fns';\r\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface RelationTypeKey\r\n{\r\n  name: string;\r\n  props: string[];\r\n}\r\n\r\nexport interface RelationOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  kind: RelationKind;\r\n  subject: RelationTypeKey;\r\n  subjectRelationName?: string;\r\n  morphs?: [string, any];\r\n  morphsToRelated?: MapInput<any, string>;\r\n  related: RelationTypeKey[];\r\n  relatedRelationName?: string;\r\n  multiple?: boolean;\r\n  required?: boolean;\r\n  owns?: boolean;\r\n  extension?: boolean;\r\n}\r\n\r\nexport interface EntityRelation\r\n{\r\n  relation: Relation;\r\n  name: string;\r\n  kind: RelationKind;\r\n  related: RelationTypeKey[];\r\n  morphs?: EntityPropPair;\r\n  morphsToRelated?: Map<any, string>;\r\n  relatedToMorphs?: Map<string, any>;\r\n  where?: [string, any];\r\n  itemType: Type;\r\n  relationType: Type;\r\n  cascade: RelationCascade;\r\n  local: string[];\r\n}\r\n\r\nexport enum RelationKind\r\n{\r\n  HAS_MANY,\r\n  BELONGS_TO,\r\n  HAS_ONE,\r\n  ONE,\r\n  HAS_ONE_POLYMORPHIC,\r\n  ONE_POLYMORPHIC,\r\n}\r\n\r\nexport enum RelationCascade\r\n{\r\n  NONE,\r\n  CASCADE,\r\n  SET_NULL,\r\n  RESTRICT\r\n}\r\n\r\nexport interface RelationEvents\r\n{\r\n  changed(relation: Relation): void;\r\n  renamed(relation: Relation, oldName: string): void;\r\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\r\n}\r\n\r\nexport class Relation extends EventBase<RelationEvents>\r\n{\r\n\r\n  /**\r\n   * A unique name for the relationship between the subject type and related types.\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * When the relation was created.\r\n   */\r\n  public created: number;\r\n\r\n  /**\r\n   * When the relation was last updated.\r\n   */\r\n  public updated: number;\r\n  \r\n  /**\r\n   * A name-props pair for the type that has the foreign key. The name is the\r\n   * aliased type name and the props are the properties on it that reference\r\n   * the related type or types.\r\n   */\r\n  public subject: RelationTypeKey; \r\n  \r\n  /**\r\n   * The name the subject uses to refer to the related types.\r\n   */\r\n  public subjectRelationName: string;\r\n\r\n  /**\r\n   * A name-type pair for a property that exists on the subject type that is \r\n   * used to determine which related type.\r\n   */\r\n  public morphs: EntityPropPair | null;\r\n\r\n  /**\r\n   * A map of values from the morphs property to the related type names.\r\n   */\r\n  public morphsToRelated: Map<any, string>;\r\n\r\n  /**\r\n   * The list of name-prop pairs that the subject type can be related to based\r\n   * on the morph \r\n   */\r\n  public related: RelationTypeKey[];\r\n  \r\n  /**\r\n   * The name the related types use to refer to the subject.\r\n   */\r\n  public relatedRelationName: string;\r\n\r\n  /**\r\n   * A map from related type names to the morph value.\r\n   */\r\n  public relatedToMorphs: Map<string, any>;\r\n\r\n  /**\r\n   * The kind of relation created.\r\n   */\r\n  public kind: RelationKind;\r\n\r\n  /**\r\n   * List or single related instance?\r\n   */\r\n  public multiple: boolean;\r\n\r\n  /**\r\n   * Remove subject if related is removed\r\n   */\r\n  public required: boolean;\r\n\r\n  /**\r\n   * When related is being removed, stop it. I own it. But when subject is\r\n   * removed then remove the related.\r\n   */\r\n  public owns: boolean;\r\n\r\n  /**\r\n   * Related types extend the subject, the subject has a morph value to know\r\n   * which type it is.\r\n   */\r\n  public extension: boolean;\r\n\r\n  /**\r\n   * Needed for retrieving aliased types and their current properties.\r\n   */\r\n  protected defs: Definitions;\r\n\r\n  \r\n  public constructor(defs: Definitions, options: RelationOptions)\r\n  {\r\n    super();\r\n\r\n    this.defs = defs;\r\n    this.name = options.name;\r\n    this.updated = options.updated || now();\r\n    this.created = options.created || now();\r\n    this.kind = options.kind;\r\n    this.subject = options.subject;\r\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n    this.morphs = options.morphs\r\n      ? this.decodeTypePair(options.morphs)\r\n      : null;\r\n    this.morphsToRelated = toMap(options.morphsToRelated);\r\n    this.related = options.related;\r\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n    this.multiple = !!options.multiple;\r\n    this.required = !!options.required;\r\n    this.owns = !!options.owns;\r\n    this.extension = !!options.extension;\r\n  }\r\n\r\n  public sync(options: RelationOptions | Relation, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.updated = options.updated || now();\r\n      this.created = options.created || now();\r\n      this.kind = options.kind;\r\n      this.subject = options.subject;\r\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n      this.morphs = options.morphs\r\n        ? this.decodeTypePair(options.morphs)\r\n        : null;\r\n      this.morphsToRelated = toMap(options.morphsToRelated);\r\n      this.related = options.related;\r\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n      this.multiple = !!options.multiple;\r\n      this.required = !!options.required;\r\n      this.owns = !!options.owns;\r\n      this.extension = !!options.extension;\r\n      \r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: RelationOptions | Relation): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\r\n  {\r\n    return [prop, this.defs.getType(propType)];\r\n  }\r\n\r\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\r\n  {\r\n    return pair\r\n      ? [pair[0], pair[1].encode()]\r\n      : null;\r\n  }\r\n\r\n  public encode(): RelationOptions\r\n  {\r\n    const { \r\n      name, created, updated,\r\n      kind, subject, subjectRelationName, \r\n      morphs, morphsToRelated, \r\n      related, relatedRelationName, \r\n      multiple, required, owns, extension \r\n    } = this;\r\n\r\n    return {\r\n      name,\r\n      updated,\r\n      created,\r\n      kind,\r\n      subject,\r\n      subjectRelationName,\r\n      morphs: this.encodeTypePair(morphs),\r\n      morphsToRelated: Array.from(morphsToRelated.entries()),\r\n      related,\r\n      relatedRelationName,\r\n      multiple, required, owns, extension,\r\n    };\r\n  }\r\n\r\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\r\n  {\r\n    return related.find((r) => r.name === name);\r\n  }\r\n\r\n  public rename(name: string, newName: string)\r\n  {\r\n    this.renameReference(name, newName, [this.subject]);\r\n    this.renameReference(name, newName, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      withName.name = newName;\r\n    }\r\n  }\r\n\r\n  public remove(name: string)\r\n  {\r\n    this.removeReference(name, [this.subject]);\r\n    this.removeReference(name, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removeReference(name: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      related.splice(i, 1);\r\n      related[i].props = [];\r\n    }\r\n  }\r\n\r\n  public renameProp(name: string, prop: string, newProp: string)\r\n  {\r\n    this.renamePropReference(name, prop, newProp, [this.subject]);\r\n    this.renamePropReference(name, prop, newProp, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      const i = withName.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        withName.props[i] = newProp;\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeProp(name: string, prop: string)\r\n  {\r\n    this.removePropReference(name, prop, [this.subject]);\r\n    this.removePropReference(name, prop, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const withName = related[i];\r\n      const k = withName.props.indexOf(prop);\r\n\r\n      if (k !== -1)\r\n      {\r\n        withName.props.splice(k, 1);\r\n\r\n        if (withName.props.length === 0)\r\n        {\r\n          related.splice(i, 1);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getPropTypes(related: RelationTypeKey[]): Type[]\r\n  {\r\n    const types: Type[] = [];\r\n\r\n    related.forEach(({ name, props }) => \r\n    {\r\n      const entity = this.defs.getEntity(name);\r\n      const primary = entity.getEntityProps();\r\n\r\n      props.forEach((_, i) =>\r\n      {\r\n        const propType = primary.props[i][1];\r\n\r\n        types[i] = types[i]\r\n          ? Types.merge(types[i], propType)\r\n          : propType.clone();\r\n      });\r\n    });\r\n\r\n    return types;\r\n  }\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.subject.props.length === 0\r\n        || this.related.length === 0;\r\n  }\r\n\r\n  private getItemType(related: RelationTypeKey[]): Type\r\n  {\r\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\r\n    const itemType = typesResolved.length > 1\r\n      ? Types.many(typesResolved)\r\n      : typesResolved[0];\r\n\r\n    return itemType;\r\n  }\r\n\r\n  public getSubjectRelation(subjectName: string): EntityRelation | null\r\n  {\r\n    if (this.subject.name !== subjectName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.subjectRelationName;\r\n    const local = this.subject.props;\r\n    const related = this.related;\r\n    const itemType = this.getItemType(related);\r\n    const cascade = this.owns && this.multiple\r\n      ? RelationCascade.CASCADE\r\n      : this.required\r\n        ? RelationCascade.RESTRICT\r\n        : RelationCascade.SET_NULL;\r\n    const relationType = this.required\r\n      ? itemType\r\n      : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.BELONGS_TO\r\n      : this.kind; \r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.morphs = this.morphs;\r\n      relation.morphsToRelated = this.morphsToRelated;\r\n      relation.relatedToMorphs = this.relatedToMorphs;\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getRelatedRelation(relatedName: string): EntityRelation | null\r\n  {\r\n    const withName = this.getRelatedWithName(relatedName, this.related);\r\n\r\n    if (!withName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.relatedRelationName;\r\n    const local = withName.props;\r\n    const related = [this.subject];\r\n    const itemType = this.getItemType(related);\r\n    const cascade = RelationCascade.NONE;\r\n    const relationType = this.multiple\r\n      ? Types.list(itemType)\r\n      : this.required\r\n        ? itemType\r\n        : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.HAS_MANY\r\n      : this.morphs\r\n        ? RelationKind.ONE_POLYMORPHIC\r\n        : RelationKind.ONE;\r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.where = [\r\n        this.morphs[0],\r\n        this.relatedToMorphs.get(relatedName)\r\n      ];\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getTypeProps(name: string): EntityProps[]\r\n  {\r\n    const typeProps: EntityProps[] = [];\r\n\r\n    if (this.subject.name === name)\r\n    {\r\n      const propTypesList = this.getPropTypes(this.related);\r\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\r\n\r\n      typeProps.push({\r\n        type: EntityKeyType.FOREIGN,\r\n        props,\r\n        relation: this,\r\n      });\r\n\r\n      if (this.morphs)\r\n      {\r\n        typeProps.push({\r\n          type: EntityKeyType.NONE,\r\n          props: [this.morphs],\r\n          relation: this,\r\n        });\r\n      }\r\n    }\r\n\r\n    return typeProps;\r\n  }\r\n\r\n  // one{id} has many many{one_id}\r\n  public static hasMany(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string, \r\n    many: string, \r\n    oneRelationName?: string, \r\n    manyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.many;\r\n    const subjectRelationName = options.manyRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_MANY,\r\n      subject: { \r\n        name: options.many,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps\r\n      }],\r\n      relatedRelationName,\r\n      multiple: true,\r\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n    });\r\n  }\r\n\r\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\r\n  public static belongsTo(defs: Definitions, options: {\r\n    name?: string,\r\n    oneOfMany: string,\r\n    belongsTo: string, \r\n    oneOfManyRelationName?: string,\r\n    belongsToRelationName?: string, \r\n    foreignKeyPrefix?: string, \r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation \r\n  {\r\n    return this.hasMany(defs, {\r\n      name: options.name,\r\n      one: options.belongsTo,\r\n      many: options.oneOfMany,\r\n      oneRelationName: options.belongsToRelationName,\r\n      manyRelationName: options.oneOfManyRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // hasOne{one_id} has one one{id}\r\n  public static hasOne(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    one: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName?: string,\r\n    oneRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.hasOne;\r\n    const subjectRelationName = options.hasOneRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps,\r\n      }],\r\n      relatedRelationName,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // one{id} belongs to belongsTo{one_id}\r\n  public static belongsToOne(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string,\r\n    belongsTo: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    oneRelationName?: string,\r\n    belongsToRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    return this.hasOne(defs, {\r\n      name: options.name,\r\n      hasOne: options.belongsTo,\r\n      one: options.one,\r\n      required: options.required,\r\n      owns: options.owns,\r\n      hasOneRelationName: options.belongsToRelationName,\r\n      oneRelationName: options.oneRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n    })\r\n  }\r\n\r\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\r\n  public static hasOnePolymorphic(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    morphs: [string, any],\r\n    morphsToRelated: MapInput<any, string>,\r\n    poly: string[],\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName: string,\r\n    polyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const subjectRelationName = options.hasOneRelationName;\r\n    const relatedRelationName = options.polyRelationName || options.hasOne;\r\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const related = options.poly.map((polyName) => ({\r\n      name: polyName, \r\n      props: defs.getEntity(polyName).getPrimary().props\r\n    }));\r\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related,\r\n      relatedRelationName,\r\n      morphs: options.morphs,\r\n      morphsToRelated: options.morphsToRelated,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { NoExpression } from './exprs/No';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { arraySync, isNumber, now } from './fns';\r\n\r\n\r\nexport interface ProgramOptions\r\n{\r\n  name: string;\r\n  author: string;\r\n  description: string;\r\n  meta: any;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  datasets: ProgramDataSet[];\r\n  expression: any;\r\n}\r\n\r\nexport interface ProgramDataSet\r\n{\r\n  name: string;\r\n  data: any;\r\n  created: number;\r\n  updated: number;\r\n  meta: any;\r\n}\r\n\r\nexport interface ProgramEvents\r\n{\r\n  changed(program: Program): void;\r\n  renamed(program: Program, oldName: string): void;\r\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\r\n  addDataset(program: Program, dataset: ProgramDataSet): void;\r\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\r\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\r\n  moveDataset(program: Program, dataset: ProgramDataSet, from: number, to: number): void;\r\n}\r\n\r\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\r\n    return new Program({\r\n      name,\r\n      author: '',\r\n      description: '',\r\n      meta: null,\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      datasets: [{\r\n        name: 'Data Set #1',\r\n        data: Object.create(null),\r\n        created: now(),\r\n        updated: now(),\r\n        meta: null,\r\n      }],\r\n      expression: NoExpression.instance,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public author: string;\r\n  public description: string;\r\n  public meta: any;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public datasets: ProgramDataSet[];\r\n  public expression: Expression;\r\n\r\n  public constructor(options: ProgramOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.author = options.author;\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.created = options.created;\r\n    this.updated = options.updated;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\r\n  }\r\n\r\n  public sync(options: ProgramOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.author = options.author;\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.created = options.created;\r\n      this.updated = options.updated;\r\n      this.dataType = options instanceof Program\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.expression = options instanceof Program\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n\r\n      arraySync(\r\n        this.datasets, \r\n        options instanceof Program\r\n          ? options.datasets\r\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\r\n        (a, b) => a.name === b.name || a.created === b.created,\r\n        (target, value) => this.addDataset(value, true),\r\n        (target, index, value) => this.removeDataset(index, true),\r\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ProgramOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ProgramOptions \r\n  {\r\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\r\n\r\n    return {\r\n      name,\r\n      author,\r\n      description,\r\n      meta,\r\n      created,\r\n      updated,\r\n      dataType: dataType.encode(),\r\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\r\n      expression: expression.encode(),\r\n    };\r\n  }\r\n\r\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\r\n  {\r\n    this.datasets.push(dataset);\r\n\r\n    this.trigger('addDataset', this, dataset);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public moveDataset(dataset: ProgramDataSet | number, to: number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(dataset)\r\n      ? dataset\r\n      : this.datasets.indexOf(dataset);\r\n    const exists = index >= 0 && index < this.datasets.length;\r\n    const inside = to >= 0 && to < this.datasets.length;\r\n    const movable = exists && inside;\r\n\r\n    if (movable)\r\n    {\r\n      const data = this.datasets[index];\r\n\r\n      this.datasets.splice(index, 1);\r\n      this.datasets.splice(to, 0, data);\r\n\r\n      this.trigger('moveDataset', this, data, index, to);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return movable;\r\n  }\r\n\r\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: Partial<ProgramDataSet>, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(dataset)\r\n      ? this.datasets[dataset]\r\n      : dataset;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newDataset);\r\n\r\n      this.trigger('updateDataset', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(dataset)\r\n      ? dataset\r\n      : this.datasets.indexOf(dataset);\r\n    const exists = index >= 0 && index < this.datasets.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.datasets[index];\r\n\r\n      DataTypes.arrayRemove(this.datasets, index);\r\n      \r\n      this.trigger('removeDataset', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.datasets.forEach((dataset) => \r\n    {\r\n      dataset.data = cmd({ value: dataset.data });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n  \r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Expression } from './Expression';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { now } from './fns';\r\n\r\n\r\nexport interface ReferenceDataOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  data: any;\r\n  meta: any;\r\n}\r\n\r\nexport interface ReferenceDataEvents\r\n{\r\n  changed(data: ReferenceData): void;\r\n  renamed(data: ReferenceData, oldName: string): void;\r\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\r\n}\r\n\r\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\r\n    return new ReferenceData({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      data: Object.create(null),\r\n      meta: null,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public data: any;\r\n  public meta: any;\r\n\r\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.meta = options.meta;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.data = this.dataType.fromJson(options.data);\r\n  }\r\n\r\n  public sync(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.meta = options.meta;\r\n      this.dataType = options instanceof ReferenceData\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.data = options instanceof ReferenceData\r\n        ? options.data\r\n        : this.dataType.fromJson(options.data);\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ReferenceDataOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ReferenceDataOptions\r\n  {\r\n    const { name, created, updated, meta, dataType, data } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      meta,\r\n      dataType: dataType.encode(),\r\n      data: dataType.toJson(data),\r\n    };\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    this.data = runtime.run(transform, { value: this.data });\r\n\r\n    this.changed();\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class ReferenceType extends Type<string>\r\n{\r\n\r\n  public static STEP_REFERENCED = 'referenced';\r\n\r\n  public static id = ID.Reference;\r\n\r\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\r\n\r\n  public static baseType = new ReferenceType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ReferenceType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new ReferenceType( type, types );\r\n  }\r\n\r\n  public static encode(type: ReferenceType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    if (!this.provider)\r\n    {\r\n      return NullType.baseType;\r\n    }\r\n\r\n    const data = this.provider.getData(this.options);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReferenceType.id;\r\n  }\r\n\r\n  public merge(type: ReferenceType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof ReferenceType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ReferenceType.STEP_REFERENCED\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === referenced\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReferenceType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, isObject } from '../fns';\r\n\r\n\r\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\r\n\r\n\r\nexport class FastMap<T>\r\n{\r\n\r\n  public indexes: Record<string, number>;\r\n  public keys: string[];\r\n  public values: T[];\r\n\r\n  public constructor(options?: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: FastMapOptions<T>)\r\n  {\r\n    if (options instanceof Map)\r\n    {\r\n      for (const [key, value] of options.entries())\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (options instanceof FastMap)\r\n    {\r\n      for (let i = 0; i < options.length(); i++)\r\n      {\r\n        this.set(options.keyAt(i), options.valueAt(i));\r\n      }\r\n    }\r\n    else if (isArray(options))\r\n    {\r\n      for (const [key, value] of options)\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (isObject(options))\r\n    {\r\n      for (const key in options)\r\n      {\r\n        this.set(key, options[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\r\n  {\r\n    const all = new FastMap(options);\r\n\r\n    this.filter((_, key) => all.has(key));\r\n    \r\n    all.forEach((value, key) => {\r\n      if (this.has(key) && combine) {\r\n        combine(this.get(key), value);\r\n      } else {\r\n        this.set(key, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  public clear()\r\n  {\r\n    this.indexes = Object.create(null);\r\n    this.keys = [];\r\n    this.values = [];\r\n  }\r\n\r\n  public length(): number\r\n  {\r\n    return this.keys.length;\r\n  }\r\n\r\n  public valueAt(i: number): T | undefined\r\n  {\r\n    return this.values[i];\r\n  }\r\n\r\n  public keyAt(i: number): string | undefined\r\n  {\r\n    return this.keys[i];\r\n  }\r\n\r\n  public pairAt(i: number): [string, T] | [undefined, undefined]\r\n  {\r\n    return [this.keys[i], this.values[i]];\r\n  }\r\n\r\n  public has(key: string | T): boolean\r\n  { \r\n    return isString(key) ? key in this.indexes : this.values.includes(key);\r\n  }\r\n\r\n  public set(key: string, value: T)\r\n  {\r\n    const i = this.indexes[key];\r\n\r\n    if (isNumber(i)) \r\n    {\r\n      this.values.splice(i, 1, value);\r\n    } \r\n    else \r\n    {\r\n      this.indexes[key] = this.values.length;\r\n      this.values.push(value);\r\n      this.keys.push(key);\r\n    }\r\n  }\r\n\r\n  public rekey(old: string | T, newKey: string): boolean\r\n  {\r\n    const i = this.indexOf(old);\r\n    const exists = i !== -1;\r\n\r\n    if (exists)\r\n    {\r\n      delete this.indexes[this.keys[i]];\r\n      this.indexes[newKey] = i;\r\n      this.keys.splice(i, 1, newKey);\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public sort(cmp: (a: T, b: T) => number)\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\r\n  }\r\n\r\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\r\n  }\r\n\r\n  public reindex(): void\r\n  {\r\n    const keys = this.keys;\r\n    const indexes = Object.create(null);\r\n\r\n    for (let i = 0; i < keys.length; i++)\r\n    {\r\n      indexes[keys[i]] = i;\r\n    }\r\n\r\n    this.indexes = indexes;\r\n  }\r\n\r\n  public swap(i: number, k: number): boolean\r\n  {\r\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const ikey = this.keys[i];\r\n    const ivalue = this.values[i];\r\n    const kkey = this.keys[k];\r\n    const kvalue = this.values[k];\r\n\r\n    this.indexes[ikey] = k;\r\n    this.indexes[kkey] = i;\r\n\r\n    this.keys.splice(i, 1, kkey);\r\n    this.keys.splice(k, 1, ikey);\r\n\r\n    this.values.splice(i, 1, kvalue);\r\n    this.values.splice(k, 1, ivalue);\r\n\r\n    return true;\r\n  }\r\n\r\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\r\n  {\r\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\r\n  }\r\n\r\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const { keys, values } = this;\r\n      const removing = values[i];\r\n\r\n      if (respectOrder)\r\n      {\r\n        this.removeAt(i);\r\n      }\r\n      else\r\n      {\r\n        delete this.indexes[keys[i]];\r\n        const lastKey = keys.pop();\r\n        const lastValue = values.pop();\r\n\r\n        if (i !== keys.length)\r\n        {\r\n          keys.splice(i, 1, lastKey);\r\n          values.splice(i, 1, lastValue);\r\n          this.indexes[lastKey] = i;\r\n        }\r\n      }\r\n\r\n      return removing;\r\n    }\r\n  }\r\n\r\n  public removeAt(i: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (i < 0 || i >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    delete this.indexes[keys[i]];\r\n    keys.splice(i, 1);\r\n    values.splice(i, 1);\r\n\r\n    while (++i < keys.length)\r\n    {\r\n      this.indexes[keys[i]]--;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public move(from: number, to: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (from !== to)\r\n    {\r\n      const value = values[from];\r\n      const key = keys[from];\r\n\r\n      values.splice(from, 1);\r\n      keys.splice(from, 1);\r\n\r\n      values.splice(to, 0, value);\r\n      keys.splice(to, 0, key);\r\n      \r\n      this.reindex();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public moveToFront(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, 0);\r\n  }\r\n\r\n  public moveToBack(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, this.keys.length - 1);\r\n  }\r\n\r\n  public indexOf(key: string | T): number\r\n  {\r\n    return isString(key) \r\n      ? key in this.indexes\r\n        ? this.indexes[key]\r\n        : -1\r\n      : this.values.indexOf(key);\r\n  }\r\n\r\n  public keyOf(value: T): string | undefined\r\n  {\r\n    const i = this.values.indexOf(value);\r\n\r\n    return i === -1 ? undefined : this.keys[i];\r\n  }\r\n\r\n  public toPairs(): Array<[string, T]>\r\n  {\r\n    return this.values.map((value, i) => [this.keys[i], value]);\r\n  }\r\n\r\n  public toMap(): Map<string, T>\r\n  {\r\n    return new Map(this.toPairs());\r\n  }\r\n\r\n  public toObject(): Record<string, T>\r\n  {\r\n    const obj = Object.create(null);\r\n\r\n    for (let i = 0; i < this.keys.length; i++)\r\n    {\r\n      obj[this.keys[i]] = this.values[i];\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  public clone(): FastMap<T>\r\n  {\r\n    return new FastMap(this);\r\n  }\r\n\r\n  public forEach(iterator: (value: T, key: string) => void)\r\n  {\r\n    const { keys, values } = this;\r\n    let i = 0;\r\n\r\n    while (i < keys.length)\r\n    {\r\n      const key = keys[i];\r\n      const value = values[i];\r\n\r\n      iterator(value, key);\r\n\r\n      if (keys[i] === key)\r\n      {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  public filter(pass: (value: T, key: string) => boolean)\r\n  {\r\n    const { values, keys, indexes } = this;\r\n    let passed = 0; \r\n    \r\n    for (let i = 0; i < values.length; i++) \r\n    {\r\n      const value = values[i];\r\n      const key = keys[i];\r\n\r\n      if (pass(value, key))\r\n      {\r\n        values[passed] = value;\r\n        keys[passed] = key;\r\n        indexes[key] = passed;\r\n        passed++;\r\n      }\r\n      else\r\n      {\r\n        delete indexes[key];\r\n      }\r\n    }\r\n\r\n    if (passed < values.length)\r\n    {\r\n      values.splice(passed, values.length - passed);\r\n      keys.splice(passed, keys.length - passed);\r\n    }\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\r\nimport { FastMap, FastMapOptions } from './FastMap';\r\n\r\n\r\nexport interface Named\r\n{\r\n  name: string;\r\n}\r\n\r\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\r\n\r\nexport class NamedMap<N extends Named> extends FastMap<N>\r\n{\r\n\r\n  public static isNamedArray<N extends Named>(x: any): x is N[]\r\n  {\r\n    return isArray(x) && x.length > 0 && isString(x[0].name);\r\n  }\r\n\r\n  public constructor(options?: NamedMapOptions<N>)\r\n  {\r\n    super();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: NamedMapOptions<N>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: NamedMapOptions<N>)\r\n  {\r\n    if (NamedMap.isNamedArray(options))\r\n    {\r\n      for (const named of options)\r\n      {\r\n        this.add(named);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      super.merge(options);\r\n    }\r\n  }\r\n\r\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\r\n  {\r\n    super.sync(new NamedMap(options), combine);\r\n  }\r\n\r\n  public syncManual<O extends Named = N>(\r\n    sourceOptions: NamedMapOptions<O>,\r\n    add: (target: this, value: O, key: string) => void,\r\n    remove: (target: this, value: N, key: string) => void,\r\n    update: (target: this, value: N, newValue: O, key: string) => void,\r\n    matches?: (a: N, b: O) => boolean,\r\n  ): this {\r\n    const source = new NamedMap<O>(sourceOptions);\r\n\r\n    if (matches) {\r\n      arraySync(\r\n        this.values, \r\n        source.values, \r\n        matches, \r\n        (target, value) => add(this, value, value.name), \r\n        (target, index, value) => remove(this, value, value.name),\r\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\r\n      );\r\n    } else {\r\n      this.forEach((targetValue, targetKey) => {\r\n        const existing = source.get(targetKey);\r\n        if (existing === undefined) {\r\n          remove(this, targetValue, targetKey);\r\n        } else {\r\n          update(this, targetValue, existing, targetKey);\r\n        }\r\n      });\r\n\r\n      source.forEach((sourceValue, sourceKey) => {\r\n        if (!this.has(sourceKey)) {\r\n          add(this, sourceValue, sourceKey);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public rename(namedInput: string | N, newName: string): boolean\r\n  {\r\n    const named = this.get(namedInput);\r\n    const valid = !!named && named.name !== newName;\r\n    \r\n    if (valid)\r\n    {\r\n      this.rekey(named, newName);\r\n      \r\n      named.name = newName;\r\n    }\r\n\r\n    return valid;\r\n  }\r\n\r\n  public has(named: string | N): boolean\r\n  {\r\n    return this.nameOf(named) in this.indexes;\r\n  }\r\n\r\n  public add(named: N)\r\n  {\r\n    this.set(named.name, named);\r\n  }\r\n\r\n  public nameOf(named: string | N): string\r\n  {\r\n    return isString(named) ? named : named.name;\r\n  }\r\n\r\n  public valueOf(named: string | N): N\r\n  {\r\n    return isString(named) ? this.get(named) : named;\r\n  }\r\n\r\n  public indexOf(named: string | N): number\r\n  {\r\n    const i = this.indexes[this.nameOf(named)];\r\n\r\n    return isNumber(i) ? i : -1;\r\n  }\r\n\r\n  public keyOf(named: N): string | undefined\r\n  {\r\n    return named.name;\r\n  }\r\n\r\n  public clone(): NamedMap<N>\r\n  {\r\n    return new NamedMap(this);\r\n  }\r\n\r\n}","\r\nimport { isArray, isString, objectMap, objectValues, objectEach } from './fns';\r\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\r\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\r\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\r\nimport { Computeds, Computed } from './Computed';\r\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\r\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\r\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\r\nimport { Func, FuncOptions, FuncTest } from './Func';\r\nimport { Types } from './Types';\r\nimport { Traverser } from './Traverser';\r\nimport { ID } from './types/ID';\r\nimport { EntityType } from './types/Entity';\r\nimport { AnyType } from './types/Any';\r\nimport { ManyType } from './types/Many';\r\nimport { ObjectType } from './types/Object';\r\nimport { NullType } from './types/Null';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { NoExpression } from './exprs/No';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { ReferenceType } from './types/Reference';\r\nimport { NamedMap } from './maps/NamedMap';\r\nimport { FastMap } from './maps/FastMap';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\n\r\nexport interface DefinitionsImportOptions\r\n{\r\n  entities?: Record<string, Entity | EntityOptions>;\r\n  functions?: Record<string, Func | FuncOptions>;\r\n  relations?: Record<string, RelationOptions>;\r\n  programs?: Record<string, Program | ProgramOptions>;\r\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\r\n}\r\n\r\nexport interface DefinitionsOptions extends DefinitionsImportOptions\r\n{\r\n  types?: TypeClass[];\r\n  expressions?: ExpressionClass[];\r\n}\r\n\r\nexport type DefinitionsReferenceSource = \r\n  Program | \r\n  [Program, ProgramDataSet] |\r\n  Entity | \r\n  [Entity, 'key' | 'describe'] |\r\n  [Entity, string, EntityTranscoder] |\r\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\r\n  [Entity, Func] |\r\n  [Entity, Func, 'params' | 'returnType'] |\r\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\r\n  Func | \r\n  [Func, 'params' | 'returnType'] |\r\n  [Func, FuncTest, 'args' | 'expected'] |\r\n  Relation |\r\n  ReferenceData;\r\n\r\nexport type DefinitionsEntityReference = (\r\n  { value: EntityType, root: Type } |\r\n  { value: GetEntityExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport type DefinitionsDataReference = (\r\n  { value: ReferenceType, root: Type } |\r\n  { value: GetDataExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport interface DefinitionsRelationReference\r\n{\r\n  value: GetRelationExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsFunctionReference\r\n{\r\n  value: InvokeExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionReference<E extends Expression>\r\n{\r\n  value: E;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeReference<T extends Type>\r\n{\r\n  value: T;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataTypeReference<T extends Type>\r\n{\r\n  type: T;\r\n  data: any;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataInstance\r\n{\r\n  data: any;\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeInstance\r\n{\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionInstance\r\n{\r\n  expr: Expression;\r\n  context: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsEvents\r\n{\r\n  changed(defs: Definitions): void;\r\n  sync(defs: Definitions, options: DefinitionsOptions): void;\r\n\r\n  addRelation(defs: Definitions, relation: Relation): void;\r\n  removeRelation(defs: Definitions, relation: Relation): void;\r\n  updateRelation(defs: Definitions, relation: Relation): void;\r\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\r\n  clearRelations(defs: Definitions, relations: Relation[]): void;\r\n  changedRelations(defs: Definitions): void;\r\n  \r\n  addProgram(defs: Definitions, program: Program): void;\r\n  removeProgram(defs: Definitions, program: Program): void;\r\n  updateProgram(defs: Definitions, program: Program): void;\r\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\r\n  clearPrograms(defs: Definitions, programs: Program[]): void;\r\n  changedPrograms(defs: Definitions): void;\r\n  \r\n  addEntity(defs: Definitions, entity: Entity): void;\r\n  removeEntity(defs: Definitions, entity: Entity): void;\r\n  updateEntity(defs: Definitions, entity: Entity): void;\r\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\r\n  clearEntities(defs: Definitions, entities: Entity[]): void;\r\n  changedEntities(defs: Definitions): void;\r\n  \r\n  addFunction(defs: Definitions, func: Func): void;\r\n  removeFunction(defs: Definitions, func: Func): void;\r\n  updateFunction(defs: Definitions, func: Func): void;\r\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\r\n  clearFunctions(defs: Definitions, functions: Func[]): void;\r\n  changedFunctions(defs: Definitions): void;\r\n\r\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\r\n  changedMethods(defs: Definitions): void;\r\n  \r\n  addData(defs: Definitions, data: ReferenceData): void;\r\n  removeData(defs: Definitions, data: ReferenceData): void;\r\n  updateData(defs: Definitions, data: ReferenceData): void;\r\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\r\n  clearData(defs: Definitions, data: ReferenceData[]): void;\r\n  changedData(defs: Definitions): void;\r\n}\r\n\r\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\r\n{\r\n\r\n  public types: Record<string, TypeClass>;\r\n  public typeList: TypeClass[];\r\n  public describers: TypeClass[];\r\n  public parsers: Record<string, TypeParser>;\r\n  public expressions: Record<string, ExpressionClass>;\r\n  public operations: Operations;\r\n  public computeds: Computeds;\r\n\r\n  public relations: NamedMap<Relation>;\r\n  public programs: NamedMap<Program>;\r\n  public entities: NamedMap<Entity>;\r\n  public functions: NamedMap<Func>;\r\n  public data: NamedMap<ReferenceData>;\r\n\r\n  public keyExpectedType: Type;\r\n  public describeExpectedType: Type;\r\n\r\n  private legacy: boolean = false;\r\n\r\n  public constructor(initial?: DefinitionsOptions)\r\n  { \r\n    super();\r\n\r\n    this.types = Object.create(null);\r\n    this.typeList = [];\r\n    this.describers = [];\r\n    this.expressions = Object.create(null);\r\n    this.operations = new Operations('');\r\n    this.computeds = new Computeds('');\r\n    this.parsers = Object.create(null);\r\n\r\n    this.entities = new NamedMap();\r\n    this.functions = new NamedMap();\r\n    this.relations = new NamedMap();\r\n    this.programs = new NamedMap();\r\n    this.data = new NamedMap();\r\n\r\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\r\n    this.describeExpectedType = Types.text();\r\n\r\n    if (initial) \r\n    {\r\n      this.add(initial);\r\n    }\r\n  }\r\n\r\n  public isLegacy(): boolean\r\n  {\r\n    return this.legacy;\r\n  }\r\n\r\n  public setLegacy(): void\r\n  {\r\n    this.legacy = true;\r\n  }\r\n\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\r\n  {\r\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\r\n  }\r\n\r\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\r\n  { \r\n    const copy = new Definitions({\r\n      types: objectValues(this.types),\r\n      expressions: objectValues(this.expressions),\r\n      entities: this.encodeMap(this.entities, deepCopy),\r\n      functions: this.encodeMap(this.functions, deepCopy),\r\n      relations: this.encodeMap(this.relations, deepCopy),\r\n      programs: this.encodeMap(this.programs, deepCopy),\r\n      data: this.encodeMap(this.data, deepCopy),\r\n    });\r\n\r\n    if (initial)\r\n    {\r\n      copy.add(initial);\r\n    }\r\n\r\n    return copy;\r\n  }\r\n  \r\n  public changed()\r\n  {\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public add(options: DefinitionsOptions)\r\n  {\r\n    if (options.types) \r\n    {\r\n      options.types.forEach(type => this.addType(type, true));\r\n    }\r\n\r\n    this.sortDescribers();\r\n\r\n    if (options.expressions) \r\n    {\r\n      options.expressions.forEach(expr => this.addExpression(expr));\r\n    }\r\n\r\n    this.import(options);\r\n  }\r\n\r\n  public describe(completeData: any): Type\r\n  {\r\n    const described: Map<any, any> = new Map();\r\n\r\n    const provider: TypeDescribeProvider = \r\n    {\r\n      describe: (data) => \r\n      {\r\n        let describedType = described.get(data);\r\n\r\n        if (describedType !== undefined) \r\n        {\r\n          return describedType;\r\n        }\r\n\r\n        for (const describer of this.describers)\r\n        {\r\n          describedType = describer.describe(data, provider, described);\r\n    \r\n          if (describedType)\r\n          {\r\n            return describedType;\r\n          }\r\n        }\r\n\r\n        return AnyType.baseType;\r\n      },\r\n      merge: (type, data) => \r\n      {\r\n        return this.merge(type, data);\r\n      },\r\n    };\r\n\r\n    return provider.describe(completeData);\r\n  }\r\n\r\n  public merge(type: Type, data: any): Type\r\n  {\r\n    return Types.merge(type, this.describe(data));\r\n  }\r\n  \r\n  public sortDescribers()\r\n  {\r\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\r\n  }\r\n\r\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \r\n  {\r\n    this.types[type.id] = type;\r\n    this.typeList.push(type);\r\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\r\n    this.describers.push(type);\r\n\r\n    if (!delaySort)\r\n    {\r\n      this.sortDescribers();\r\n    }\r\n\r\n    if (!type.registered)\r\n    {\r\n      type.registered = true;\r\n      type.register();\r\n    }\r\n  }\r\n\r\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\r\n  {\r\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\r\n\r\n    return found ? found.name : false;\r\n  }\r\n\r\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const data = dataOptions instanceof ReferenceData \r\n      ? dataOptions \r\n      : ReferenceData.create(this, dataOptions);\r\n\r\n    const existing = this.data.get(data.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(data, this);\r\n      }\r\n      else\r\n      {\r\n        this.data.add(data);\r\n      }\r\n      \r\n      this.trigger('updateData', this, data);\r\n    }\r\n    else\r\n    {\r\n      this.data.add(data);\r\n\r\n      this.trigger('addData', this, data);\r\n    }\r\n\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getData(name: string): ReferenceData | null\r\n  {\r\n    return this.data.get(name, null);\r\n  }\r\n\r\n  public getDatas(): NamedMap<ReferenceData>\r\n  {\r\n    return this.data;\r\n  }\r\n\r\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n\r\n    if (!data)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.data.remove(data, respectOrder);\r\n\r\n    this.trigger('removeData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearData(delayChange: boolean = false)\r\n  {\r\n    const data = this.data.values.slice();\r\n\r\n    this.data.clear();\r\n\r\n    this.trigger('clearData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n    const oldName = data.name;\r\n    \r\n    if (!this.data.rename(data, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getDataReferences(data);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof ReferenceType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    data.trigger('renamed', data, oldName);\r\n    data.changed();\r\n\r\n    this.trigger('renameData', this, data, oldName);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const func = funcOptions instanceof Func \r\n      ? funcOptions \r\n      : Func.create(this, funcOptions);\r\n\r\n    const existing = this.functions.get(func.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(func, this);\r\n      }\r\n      else\r\n      {\r\n        this.functions.add(func);\r\n      }\r\n      \r\n      this.trigger('updateFunction', this, func);\r\n    }\r\n    else\r\n    {\r\n      this.functions.add(func);\r\n\r\n      this.trigger('addFunction', this, func);\r\n    }\r\n\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction(name: string): Func | null\r\n  {\r\n    return this.functions.get(name, null);\r\n  }  \r\n\r\n  public getFunctions(): NamedMap<Func>\r\n  {\r\n    return this.functions;\r\n  }\r\n\r\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const program = programOptions instanceof Program \r\n      ? programOptions \r\n      : Program.create(this, programOptions);\r\n\r\n    const existing = this.programs.get(program.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(program, this);\r\n      }\r\n      else\r\n      {\r\n        this.programs.add(program);\r\n      }\r\n      \r\n      this.trigger('updateProgram', this, program);\r\n    }\r\n    else\r\n    {\r\n      this.programs.add(program);\r\n\r\n      this.trigger('addProgram', this, program);\r\n    }\r\n\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getProgram(name: string): Program | null\r\n  {\r\n    return this.programs.get(name, null);\r\n  }\r\n\r\n  public getPrograms(): NamedMap<Program>\r\n  {\r\n    return this.programs;\r\n  }\r\n\r\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n\r\n    if (!program)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    this.programs.remove(program, respectOrder);\r\n\r\n    this.trigger('removeProgram', this, program);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearPrograms(delayChange: boolean = false)\r\n  {\r\n    const programs = this.programs.values.slice();\r\n\r\n    this.programs.clear();\r\n\r\n    this.trigger('clearPrograms', this, programs);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n  \r\n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const entity = entityOptions instanceof Entity\r\n      ? entityOptions\r\n      : Entity.create(this, entityOptions);\r\n\r\n    const existing = this.entities.get(entity.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(entity, this);\r\n      }\r\n      else\r\n      {\r\n        this.entities.add(entity);\r\n      }\r\n      \r\n      this.trigger('updateEntity', this, entity);\r\n    }\r\n    else\r\n    {\r\n      this.entities.add(entity);\r\n\r\n      this.trigger('addEntity', this, entity);\r\n    }\r\n\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getEntity(name: string): Entity | null\r\n  {\r\n    return this.entities.get(name, null);\r\n  }\r\n\r\n  public getEntities(): NamedMap<Entity>\r\n  {\r\n    return this.entities;\r\n  }\r\n\r\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const relation = relationOptions instanceof Relation \r\n      ? relationOptions \r\n      : new Relation(this, relationOptions);\r\n\r\n    const existing = this.relations.get(relation.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(relation, this);\r\n      }\r\n      else\r\n      {\r\n        this.relations.add(relation);\r\n      }\r\n      \r\n      this.trigger('updateRelation', this, relation);\r\n    }\r\n    else\r\n    {\r\n      this.relations.add(relation);\r\n\r\n      this.trigger('addRelation', this, relation);\r\n    }\r\n\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getRelation(name: string): Relation | null\r\n  {\r\n    return this.relations.get(name, null);\r\n  }\r\n\r\n  public getRelations(entityName: string): EntityRelation[]\r\n  {\r\n    const relations: EntityRelation[] = [];\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      const subjectRelation = relation.getSubjectRelation(entityName);\r\n\r\n      if (subjectRelation)\r\n      {\r\n        relations.push(subjectRelation);\r\n      }\r\n\r\n      const relatedRelation = relation.getRelatedRelation(entityName);\r\n\r\n      if (relatedRelation)\r\n      {\r\n        relations.push(relatedRelation);\r\n      }\r\n    });\r\n\r\n    return relations;\r\n  }\r\n\r\n  public getEntityProps(name: string): EntityProps[]\r\n  {\r\n    const keys: EntityProps[] = [];\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      keys.push(entity.getEntityProps());\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        keys.push(...relation.getTypeProps(name));\r\n      });\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n\r\n    if (!relation)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.remove(relation, respectOrder);\r\n\r\n    this.trigger('removeRelation', this, relation);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearRelations(delayChange: boolean = false)\r\n  {\r\n    const relations = this.relations.values.slice();\r\n\r\n    this.relations.clear();\r\n\r\n    this.trigger('clearRelations', this, relations);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n    const oldName = program.name;\r\n\r\n    if (!this.programs.rename(program, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    program.trigger('renamed', program, oldName);\r\n    program.changed();\r\n\r\n    this.trigger('renameProgram', this, program, oldName);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n    const oldName = entity.name;\r\n\r\n    if (!this.entities.rename(entity, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.forEach((relation) => \r\n    {\r\n      relation.rename(name, newName);\r\n    });\r\n\r\n    const refs = this.getEntityReferences(name);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof EntityType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    const methods = this.getMethodReferences(name);\r\n\r\n    methods.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    entity.trigger('renamed', entity, oldName);\r\n    entity.changed();\r\n\r\n    this.trigger('renameEntity', this, entity, oldName);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.renameProp(prop, newProp);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.renameProp(entity.name, prop, newProp);\r\n      });\r\n    }\r\n  }\r\n\r\n  public removeEntityProp(name: string | Entity, prop: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.removeProp(prop);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.removeProp(entity.name, prop);\r\n\r\n        if (relation.isEmpty())\r\n        {\r\n          this.relations.remove(relation);\r\n        }\r\n      });\r\n    } \r\n  }\r\n\r\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.entities.remove(entity, respectOrder);\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      relation.remove(name);\r\n\r\n      if (relation.isEmpty())\r\n      {\r\n        this.relations.remove(relation, respectOrder);\r\n      }\r\n    });\r\n\r\n    this.trigger('removeEntity', this, entity);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearEntities(delayChange: boolean = false)\r\n  {\r\n    const entities = this.entities.values.slice();\r\n\r\n    this.entities.clear();\r\n\r\n    this.trigger('clearEntities', this, entities);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const refs = this.getEntityDataReferences(entity);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.root.setParent();\r\n\r\n      const dataTransform = ref.type.getValueChangeAt(transform);\r\n\r\n      ref.data = runtime.run(dataTransform, { value: ref.data });\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n    const oldName = relation.name;\r\n\r\n    if (!this.relations.rename(relation, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getRelationReferences(relation);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    relation.trigger('renamed', relation, oldName);\r\n    relation.changed();\r\n\r\n    this.trigger('renameRelation', this, relation, oldName);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n    const oldName = func.name;\r\n\r\n    if (!this.functions.rename(func, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(func);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    func.trigger('renamed', func, oldName);\r\n    func.changed();\r\n\r\n    this.trigger('renameFunction', this, func, oldName);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\r\n      DataTypes.objectRemove(ref.value.args, oldName);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectRemove(ref.value.args, name);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.functions.remove(func, respectOrder);\r\n\r\n    this.trigger('removeFunction', this, func);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearFunctions(delayChange: boolean = false)\r\n  {\r\n    const functions = this.functions.values.slice();\r\n    \r\n    this.functions.clear();\r\n\r\n    this.trigger('clearFunctions', this, functions);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = methodOptions instanceof Func \r\n      ? methodOptions \r\n      : Func.create(this, methodOptions);\r\n\r\n    const existing = entity.methods[method.name];\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(method, this);\r\n      }\r\n      else\r\n      {\r\n        entity.addMethod(method);\r\n      }\r\n      \r\n      this.trigger('updateMethod', this, method, entity);\r\n    }\r\n    else\r\n    {\r\n      entity.addMethod(method);\r\n\r\n      this.trigger('addMethod', this, method, entity);\r\n    }\r\n\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const oldName = method.name;\r\n\r\n    entity.renameMethod(oldName, newName);\r\n\r\n    const refs = this.getMethodReferences(entity, method);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    method.trigger('renamed', method, oldName);\r\n    method.changed();\r\n\r\n    this.trigger('renameMethod', this, method, entity, oldName);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\r\n      DataTypes.objectRemove(ref.value.args, oldName);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectRemove(ref.value.args, name);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    entity.removeMethod(method.name);\r\n\r\n\r\n    this.trigger('removeMethod', this, method, entity);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  \r\n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \r\n  {\r\n    const parsed = this.getType(value);\r\n\r\n    return parsed instanceof kind ? parsed : otherwise;\r\n  }\r\n\r\n  public getType(value: any, otherwise?: Type): Type \r\n  {\r\n    if (value instanceof Type)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const id = isArray(value) ? value[0] : value;\r\n    const data = isArray(value) ? value : [];\r\n    const parser = this.parsers[id];\r\n\r\n    if (!parser)\r\n    {\r\n      if (this.entities.has(id))\r\n      {\r\n        return this.entities.get(id).type;\r\n      }\r\n\r\n      if (otherwise)\r\n      {\r\n        return otherwise;\r\n      }\r\n      \r\n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\r\n    }\r\n    \r\n    return parser(data, this);\r\n  }\r\n\r\n  public getBaseTypes(): Type[]\r\n  {\r\n    return this.typeList.map((t) => t.baseType);\r\n  }\r\n\r\n  public getSimpleTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => t.isSimple());\r\n  }\r\n\r\n  public getComplexTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => !t.isSimple());\r\n  }\r\n\r\n  public getSimpleTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => t.baseType.isSimple());\r\n  }\r\n\r\n  public getComplexTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => !t.baseType.isSimple());\r\n  }\r\n\r\n  public getComputed(id: string): Computed | null\r\n  {\r\n    const comp = this.computeds.get(id);\r\n\r\n    if (comp)\r\n    {\r\n      return comp;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.computeds.get(id) : null;\r\n  }\r\n\r\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\r\n  {\r\n    const comp = this.getComputed(id);\r\n\r\n    if (!comp)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const op = this.getOperation(comp.op);\r\n    const types = this.getOperationTypes(comp.op);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\r\n  }\r\n\r\n  public getComputedsFor(valueType: Type): Computed[]\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? typeClass.computeds.list : [];\r\n  }\r\n\r\n  public hasComputed(valueType: Type, id: string): boolean\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? !!typeClass.computeds.get(id) : false;\r\n  }\r\n\r\n  public getOperation(id: string): OperationGeneric | null\r\n  {\r\n    const op = this.operations.get(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.get(id) : null;\r\n  }\r\n\r\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\r\n  {\r\n    const op = this.operations.getTypes(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.getTypes(id) : null;\r\n  }\r\n\r\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\r\n  {\r\n    const op = this.getOperation(id);\r\n    const types = this.getOperationTypes(id);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const returnType = types.returnType;\r\n\r\n    if (returnType instanceof Type)\r\n    {\r\n      return returnType;\r\n    }\r\n\r\n    if (!isOperationTypeFunction(returnType))\r\n    {\r\n      return returnType.baseType.newInstance();\r\n    }\r\n\r\n    const paramTypes = op.resultDependency.length > 0\r\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\r\n      : {};\r\n\r\n    return this.getOperationInputType(types.returnType, paramTypes);\r\n  }\r\n\r\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!opTypes)\r\n    {\r\n      return {};\r\n    }\r\n\r\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\r\n\r\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\r\n  }\r\n\r\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const types: TypeMap = {};\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!op || !opTypes)\r\n    {\r\n      return types;\r\n    }\r\n    \r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) === -1)\r\n      {\r\n        const paramType = params[param].getType(this, context);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) !== -1)\r\n      {\r\n        const paramType = params[param].getType(this, paramContext);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const param of op.params)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\r\n      }\r\n    }\r\n\r\n    for (const param of op.optional)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\r\n      }\r\n    }\r\n\r\n    return types;\r\n  }\r\n\r\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\r\n  {\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    return scopedContext;\r\n  }\r\n\r\n  public getContextWithScope(original: Type, scope: TypeMap = {})\r\n  {\r\n    const context = original instanceof ObjectType\r\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\r\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\r\n\r\n    return { context, scope };\r\n  }\r\n\r\n  public getContext(original: Type, scope: TypeMap): Type\r\n  {\r\n    return this.getContextWithScope(original, scope).context;\r\n  }\r\n\r\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\r\n  {\r\n    type ParamTuple = [string, Type, number];\r\n\r\n    const from = this.getOperation(fromId);\r\n    const fromTypes = this.getOperationTypes(toId);\r\n    const fromVars = from.params.concat(from.optional);\r\n    const to = this.getOperation(toId);\r\n    const toTypes = this.getOperationTypes(toId);\r\n    const mapping: Record<string, string> = Object.create(null);\r\n    const mapped: TypeMap = Object.create(null);\r\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \r\n      [key, value, fromVars.indexOf(key)];\r\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\r\n      .filter(([,, index]) => index >= 0)\r\n      .sort(([,, a], [,, b]) => a - b);\r\n\r\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \r\n    {\r\n      if (paramTypes.length === 0)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      let chosenIndex = -1;\r\n\r\n      if (isOperationTypeFunction(typeInput))\r\n      {\r\n        chosenIndex = paramTypes.findIndex(([, type]) => \r\n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\r\n        \r\n        if (chosenIndex === -1)\r\n        {\r\n          chosenIndex = paramTypes.findIndex(([, type]) =>\r\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\r\n        }\r\n      }\r\n      else\r\n      {\r\n        const paramType = Types.parse(typeInput);\r\n\r\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\r\n      }\r\n\r\n      if (chosenIndex === -1)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      const chosen = paramTypes[chosenIndex];\r\n      paramTypes.splice(chosenIndex, 1);\r\n      mapping[chosen[0]] = param;\r\n      mapped[param] = chosen[1];\r\n    };\r\n    \r\n    for (const param of to.params)\r\n    {\r\n      const tuple = getParamTuple(param, toTypes.params[param]);\r\n\r\n      if (tuple === null)\r\n      {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    for (const optional of to.optional)\r\n    {\r\n      getParamTuple(optional, toTypes.optional[optional]);\r\n    }\r\n\r\n    const unmapped = paramTypes.map(([key]) => key);\r\n    \r\n    return { from, fromTypes, to, toTypes, mapping, unmapped };\r\n  }\r\n\r\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\r\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\r\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : 'baseType' in input\r\n        ? input.baseType.clone()\r\n        : params\r\n          ? Types.parse(input(params, this))\r\n          : null;\r\n  }\r\n\r\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\r\n  }\r\n\r\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\r\n  {\r\n    return this.getOperations()\r\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\r\n      .filter((mapping) => !!mapping);\r\n  }\r\n\r\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) => \r\n    {\r\n      const paramName = op.params[0];\r\n      const opTypeInput = types.params[paramName];\r\n\r\n      if (opTypeInput) \r\n      {\r\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\r\n\r\n        if (opType)\r\n        {\r\n          if (type.acceptsType(opType))\r\n          {\r\n            return true;\r\n          }\r\n\r\n          if (acceptsDynamic && \r\n            op.resultDependency.length > 0 && \r\n            isOperationTypeFunction(types.returnType) && \r\n            (opType instanceof AnyType || opType instanceof NullType))\r\n          {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\r\n  }\r\n\r\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) =>\r\n    {\r\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\r\n\r\n      if (returnType)\r\n      {\r\n        if (type.acceptsType(returnType))\r\n        {\r\n          return true;\r\n        }\r\n\r\n        if (acceptsDynamic && \r\n          op.resultDependency.length > 0 && \r\n          isOperationTypeFunction(types.returnType) && \r\n          (returnType instanceof AnyType || returnType instanceof NullType))\r\n        {\r\n          return true;\r\n        }\r\n      }      \r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\r\n  {\r\n    return this.getOperationsForParamTypes(objectMap(params, expr => \r\n    {\r\n      const type = expr.getType(this, context);\r\n\r\n      return type ? type.getSimplifiedType() : undefined;\r\n    }));\r\n  }\r\n\r\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\r\n  {\r\n    const paramNames = Object.keys(paramTypes);\r\n\r\n    return this.getOperations(({ types }) => \r\n    {\r\n      for (const param of paramNames)\r\n      {\r\n        const opTypeInput = types.params[param] || types.optional[param];\r\n\r\n        if (!opTypeInput)\r\n        {\r\n          return false;\r\n        }\r\n\r\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\r\n\r\n        if (!opType || !paramTypes[param].acceptsType(opType))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\r\n  {\r\n    const ops: OperationPair[] = [];\r\n\r\n    const iterateOperations = (operations: Operations) => \r\n    {\r\n      const map = operations.map;\r\n\r\n      for (const id in map)\r\n      {\r\n        const op = map[id];\r\n        const types = operations.types[id];\r\n        const pair = { op, types };\r\n\r\n        if (onOperation(pair))\r\n        {\r\n          ops.push(pair);\r\n        }\r\n      }\r\n    };\r\n\r\n    iterateOperations(this.operations);\r\n\r\n    objectEach(this.types, t => iterateOperations(t.operations));\r\n\r\n    return ops;\r\n  }\r\n\r\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let thisType = path[0].getType(this, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let optional = thisType.isOptional();\r\n\r\n    for (let i = 1; i < stopBefore; i++)\r\n    {\r\n      const node = path[i];\r\n\r\n      thisType = node.isPathNode()\r\n        ? node.getType(this, context, thisType)\r\n        : thisType.getSubType(node, this, context);\r\n\r\n      if (!thisType)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      optional = optional || thisType.isOptional();\r\n    }\r\n\r\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\r\n  }\r\n\r\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \r\n  {\r\n    this.expressions[expr.id] = expr;\r\n  }\r\n\r\n  public getExpression(value: any): Expression \r\n  {\r\n    if (value instanceof Expression)\r\n    {\r\n      return value;\r\n    }\r\n    else if (isArray(value))\r\n    {\r\n      const exprClass = this.expressions[value[0]];\r\n\r\n      if (!exprClass)\r\n      {\r\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\r\n      }\r\n\r\n      return exprClass.decode(value, this);\r\n    }\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public isExpression(value: any): value is (Expression | [string, ...any[]])\r\n  {\r\n    return value instanceof Expression || (isArray(value) && isString(value[0]) && value[0] in this.expressions);\r\n  }\r\n\r\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\r\n  { \r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsEntityReference[]).concat(exprs);\r\n  }\r\n\r\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\r\n  {\r\n    const name = data ? this.data.nameOf(data) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsDataReference[]).concat(exprs);\r\n  }\r\n\r\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.type.options);\r\n    });\r\n  }\r\n\r\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\r\n  {\r\n    const name = relation ? this.relations.nameOf(relation) : undefined;\r\n\r\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n  }\r\n\r\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const name = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\r\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\r\n    const methodName = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\r\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsTypeReference<T>[] = [];\r\n\r\n    this.getTypeInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((ref) => {\r\n        if (ref instanceof typeClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsDataTypeReference<T>[] = [];\r\n\r\n    this.getDataInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((type) => {\r\n        if (type instanceof typeClass) {\r\n          refs.push({\r\n            type, \r\n            data: instance.data,\r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\r\n  {\r\n    const refs: DefinitionsExpressionReference<E>[] = [];\r\n\r\n    this.getExpressionInstances().forEach((instance) => {\r\n      instance.expr.traverse(new Traverser((ref) => {\r\n        if (ref instanceof exprClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.expr,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataInstances(): DefinitionsDataInstance[]\r\n  {\r\n    const instances: DefinitionsDataInstance[] = [];\r\n\r\n\r\n    this.programs.forEach((program) => {\r\n      program.datasets.forEach((dataset) => {\r\n        instances.push({\r\n          data: dataset.data,\r\n          type: program.dataType,\r\n          source: [program, dataset],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      const returnType = func.getReturnType(this);\r\n\r\n      func.tests.forEach((test) => {\r\n        instances.push({\r\n          data: test.args,\r\n          type: func.params,\r\n          source: [func, test, 'args'],\r\n        });\r\n\r\n        instances.push({\r\n          data: test.expected,\r\n          type: returnType,\r\n          source: [func, test, 'expected'],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        data: data.data,\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      if (entity.instances && entity.instances.length > 0) {\r\n        instances.push({\r\n          data: entity.instances,\r\n          type: Types.list(entity.type),\r\n          source: entity,\r\n        });\r\n      }\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        const returnType = method.getReturnType(this);\r\n\r\n        method.tests.forEach((test) => {\r\n          instances.push({\r\n            data: test.args,\r\n            type: method.params,\r\n            source: [entity, method, test, 'args'],\r\n          });\r\n\r\n          instances.push({\r\n            data: test.expected,\r\n            type: returnType,\r\n            source: [entity, method, test, 'expected'],\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\r\n  {\r\n    const instances: DefinitionsTypeInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        type: program.dataType,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        type: func.params,\r\n        source: [func, 'params'],\r\n      });\r\n\r\n      if (dynamic) {\r\n        instances.push({\r\n          type: func.getReturnType(this),\r\n          source: [func, 'returnType'],\r\n        });\r\n      }\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      instances.push({\r\n        type: entity.type,\r\n        source: entity,\r\n      });\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          type: method.params,\r\n          source: [entity, method, 'params'],\r\n        });\r\n\r\n        if (dynamic) {\r\n          instances.push({\r\n            type: method.getReturnType(this),\r\n            source: [entity, method, 'returnType'],\r\n          });\r\n        }\r\n      });\r\n\r\n      if (dynamic) {\r\n        if (entity.key !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getKeyContext(),\r\n            source: [entity, 'key'],\r\n          });\r\n        }\r\n        \r\n        if (entity.describe !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getDescribeContext(),\r\n            source: [entity, 'describe'],\r\n          });\r\n        }\r\n      }\r\n\r\n      objectEach(entity.transcoders, (transcoder, prop) => {\r\n        instances.push({\r\n          type: transcoder.encodedType,\r\n          source: [entity, prop, transcoder],\r\n        });\r\n      });\r\n    });\r\n\r\n    if (dynamic) {\r\n      this.relations.forEach((relation) => {\r\n        if (relation.morphs) {\r\n          instances.push({\r\n            type: relation.morphs[1],\r\n            source: relation,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\r\n  {\r\n    const instances: DefinitionsExpressionInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        context: program.dataType,\r\n        expr: program.expression,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        context: func.params,\r\n        expr: func.expression,\r\n        source: func,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          context: method.getParamTypes(),\r\n          expr: method.expression,\r\n          source: [entity, method],\r\n        });\r\n      });\r\n\r\n      if (entity.canStore(this)) {\r\n        instances.push({\r\n          context: entity.getKeyContext(),\r\n          expr: entity.key,\r\n          source: [entity, 'key'],\r\n        });\r\n\r\n        instances.push({\r\n          context: entity.getDescribeContext(),\r\n          expr: entity.describe,\r\n          source: [entity, 'describe'],\r\n        });\r\n\r\n        objectEach(entity.transcoders, (transcoder, prop) => {\r\n          instances.push({\r\n            context: entity.getEncodeContext(prop),\r\n            expr: transcoder.encode,\r\n            source: [entity, prop, transcoder, 'encode'],\r\n          });\r\n\r\n          instances.push({\r\n            context: entity.getDecodeContext(prop),\r\n            expr: transcoder.decode,\r\n            source: [entity, prop, transcoder, 'decode'],\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public export(): DefinitionsImportOptions\r\n  {\r\n    return {\r\n      entities: this.encodeMap(this.entities),\r\n      functions: this.encodeMap(this.functions),\r\n      relations: this.encodeMap(this.relations),\r\n      programs: this.encodeMap(this.programs),\r\n      data: this.encodeMap(this.data),\r\n    };\r\n  }\r\n\r\n  public sync(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      this.data.syncManual(\r\n        exported.data,\r\n        (map, value) => this.addData(value, false, true),\r\n        (map, value) => this.removeData(value, false, true, true),\r\n        (map, value, newValue) => this.addData(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      this.functions.syncManual(\r\n        exported.functions,\r\n        (map, value) => this.addFunction(value, false, true),\r\n        (map, value) => this.removeFunction(value, false, true, true),\r\n        (map, value, newValue) => this.addFunction(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.entities)\r\n    {\r\n      this.entities.syncManual(\r\n        exported.entities,\r\n        (map, value) => this.addEntity(value, false, true),\r\n        (map, value) => this.removeEntity(value, false, true, true),\r\n        (map, value, newValue) => this.addEntity(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      this.relations.syncManual(\r\n        exported.relations,\r\n        (map, value) => this.addRelation(value, false, true),\r\n        (map, value) => this.removeRelation(value, false, true, true),\r\n        (map, value, newValue) => this.addRelation(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      this.programs.syncManual(\r\n        exported.programs,\r\n        (map, value) => this.addProgram(value, false, true),\r\n        (map, value) => this.removeProgram(value, true, true),\r\n        (map, value, newValue) => this.addProgram(newValue, true, true),\r\n      );\r\n    }\r\n  }\r\n\r\n  public import(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      objectEach(exported.data, (data) => \r\n        this.addData(data)\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      objectEach(exported.functions, (func) => \r\n        this.addFunction(func)\r\n      );\r\n    }\r\n\r\n    if (exported.entities) \r\n    {\r\n      objectEach(exported.entities, (instance) => \r\n        this.addEntity(instance)\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      objectEach(exported.relations, (options) => \r\n        this.addRelation(options)\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      objectEach(exported.programs, (options) => \r\n        this.addProgram(options)\r\n      );\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\r\nimport { Definitions } from './Definitions';\r\nimport { Expression, ExpressionClass } from './Expression';\r\nimport { isArray } from './fns';\r\nimport { Operation } from './Operation';\r\nimport { Computed } from './Computed';\r\nimport { Func } from './Func';\r\n\r\n\r\n\r\nexport class Runtime<Context = any, Result = any>\r\n{\r\n\r\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\r\n\r\n  public defs: Definitions;\r\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\r\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\r\n  public returnProperty: string;\r\n\r\n  public constructor (defs: Definitions) \r\n  {\r\n    this.defs = defs;\r\n    this.ops = Object.create(null);\r\n    this.exprs = Object.create(null);\r\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\r\n  }\r\n\r\n  public extend(defs?: Definitions): Runtime<Context, Result>\r\n  {\r\n    const copy = new Runtime(defs || this.defs);\r\n\r\n    Object.assign(copy.ops, this.ops);\r\n    Object.assign(copy.exprs, this.exprs);\r\n    copy.returnProperty = this.returnProperty;\r\n\r\n    return copy;\r\n  }\r\n\r\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\r\n    operation: Operation<P, O, S, any, any>, \r\n    impl: OperationToCommand<Context, Result, P, O, S>\r\n  ): this \r\n  {\r\n    this.ops[operation.id] = impl;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\r\n  {\r\n    this.exprs[type.id] = getter;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction (name: string): Func\r\n  {\r\n    return this.defs.getFunction(name);\r\n  }\r\n\r\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \r\n  {\r\n    return this.ops[id];\r\n  }\r\n\r\n  public getComputed (id: string): Computed | null \r\n  {\r\n    return this.defs.getComputed(id);\r\n  }\r\n  \r\n  public getOperationScopeDefaults (id: string): Record<string, string>\r\n  {\r\n    const op = this.defs.getOperation(id);\r\n\r\n    return op ? op.scopeDefaults : {};\r\n  }\r\n\r\n  public getExpression (id: string): CommandBuilder<Context, Result>\r\n  {\r\n    return this.exprs[id];\r\n  }\r\n\r\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\r\n  {\r\n    return this.exprs[expr.getId()](expr, provider);\r\n  }\r\n\r\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\r\n  {\r\n    return this.eval(expr, provider)(context);\r\n  }\r\n\r\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \r\n  {\r\n    return isArray(value)\r\n      ? this.getCommand(this.defs.getExpression(value), provider)\r\n      : value instanceof Expression\r\n        ? this.getCommand(value, provider)\r\n        : () => value;\r\n  }\r\n\r\n}","import { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_PATH = 2;\r\n\r\nexport class SubExpression extends Expression \r\n{\r\n\r\n  public static id = 'sub';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \r\n  {\r\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\r\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n    exprs.setLegacy();\r\n\r\n    return PathExpression.createForLegacy([value, ...path]);\r\n  }\r\n\r\n  public static encode(expr: SubExpression): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n}","\r\nimport { Definitions } from '../Definitions';\r\n\r\nimport { EntityType } from '../types/Entity';\r\nimport { AnyType } from '../types/Any';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { ColorType } from '../types/Color';\r\nimport { DateType } from '../types/Date';\r\nimport { EnumType } from '../types/Enum';\r\nimport { ListType } from '../types/List';\r\nimport { ManyType } from '../types/Many';\r\nimport { MapType } from '../types/Map';\r\nimport { NotType } from '../types/Not';\r\nimport { NullType } from '../types/Null';\r\nimport { NumberType } from '../types/Number';\r\nimport { ObjectType } from '../types/Object';\r\nimport { OptionalType } from '../types/Optional';\r\nimport { ReferenceType } from '../types/Reference';\r\nimport { SetType } from '../types/Set';\r\nimport { TextType } from '../types/Text';\r\nimport { TupleType } from '../types/Tuple';\r\n\r\nimport { AndExpression } from '../exprs/And';\r\nimport { ChainExpression } from '../exprs/Chain';\r\nimport { CommentExpression } from '../exprs/Comment';\r\nimport { ComputedExpression } from '../exprs/Computed';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { DefineExpression } from '../exprs/Define';\r\nimport { DoExpression } from '../exprs/Do';\r\nimport { ForExpression } from '../exprs/For';\r\nimport { GetExpression } from '../exprs/Get';\r\nimport { GetDataExpression } from '../exprs/GetData';\r\nimport { GetEntityExpression } from '../exprs/GetEntity';\r\nimport { GetRelationExpression } from '../exprs/GetRelation';\r\nimport { IfExpression } from '../exprs/If';\r\nimport { InvokeExpression } from '../exprs/Invoke';\r\nimport { MethodExpression } from '../exprs/Method';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { NotExpression } from '../exprs/Not';\r\nimport { ObjectExpression } from '../exprs/Object';\r\nimport { OperationExpression } from '../exprs/Operation';\r\nimport { OrExpression } from '../exprs/Or';\r\nimport { PathExpression } from '../exprs/Path';\r\nimport { ReturnExpression } from '../exprs/Return';\r\nimport { SetExpression } from '../exprs/Set';\r\nimport { SubExpression } from '../exprs/Sub';\r\nimport { SwitchExpression } from '../exprs/Switch';\r\nimport { TemplateExpression } from '../exprs/Template';\r\nimport { TupleExpression } from '../exprs/Tuple';\r\nimport { UpdateExpression } from '../exprs/Update';\r\nimport { WhileExpression } from '../exprs/While';\r\n\r\n\r\n\r\nexport const defs = new Definitions({\r\n  types: [\r\n    EntityType,\r\n    AnyType,\r\n    BooleanType, \r\n    ColorType,\r\n    DateType,\r\n    EnumType,\r\n    ListType, \r\n    ManyType,\r\n    MapType,\r\n    NotType,\r\n    NullType,\r\n    NumberType, \r\n    ObjectType, \r\n    OptionalType,\r\n    ReferenceType,\r\n    SetType,\r\n    TextType,\r\n    TupleType,\r\n  ],\r\n  expressions: [\r\n    AndExpression,\r\n    ChainExpression,\r\n    CommentExpression,\r\n    ComputedExpression,\r\n    ConstantExpression,\r\n    DefineExpression,\r\n    DoExpression,\r\n    ForExpression,\r\n    GetExpression,\r\n    GetDataExpression,\r\n    GetEntityExpression,\r\n    GetRelationExpression,\r\n    IfExpression,\r\n    InvokeExpression,\r\n    MethodExpression,\r\n    NoExpression,\r\n    NotExpression,\r\n    ObjectExpression,\r\n    OperationExpression,\r\n    OrExpression,\r\n    PathExpression,\r\n    ReturnExpression,\r\n    SetExpression,\r\n    SubExpression,    \r\n    SwitchExpression,\r\n    TemplateExpression,\r\n    TupleExpression,\r\n    UpdateExpression,\r\n    WhileExpression,\r\n  ]\r\n});","\r\nimport { EntityType } from '../../types/Entity';\r\nimport { EntityOps } from '../EntityOps';\r\nimport { Types } from '../../Types';\r\nimport { isArray, objectMap } from '../../fns';\r\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\r\nimport { ObjectType, ObjectOptions } from '../../types/Object';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { NullType } from '../../types/Null';\r\nimport { TextType } from '../../types/Text';\r\nimport { Type } from '../../Type';\r\nimport { EntityRelation } from '../../Relation';\r\n\r\nconst ops = EntityType.operations;\r\n\r\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \r\n  i.name instanceof EntityType\r\n    ? i.name\r\n    : ObjectType.baseType;\r\n\r\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\r\n  if (i.name instanceof EntityType) {\r\n    return i.name;\r\n  }\r\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\r\n  \r\n  return entities.length === 0\r\n    ? NullType.baseType\r\n    : entities.length === 1\r\n      ? entities[0]\r\n      : Types.many(entities);\r\n};\r\n\r\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\r\n  if (!(i.name instanceof EntityType)) {\r\n    return null;\r\n  }\r\n\r\n  const relations = provider.getRelations(i.name.options);\r\n\r\n  if (i.relation instanceof EnumType) {\r\n    const relationName = i.relation.options.constants.get('relation');\r\n\r\n    if (relationName) {\r\n      const match = relations.find((r) => r.name === relationName);\r\n\r\n      if (match) {\r\n        return match;\r\n      }\r\n    }\r\n  }\r\n\r\n  return relations;\r\n};\r\n\r\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation === null) {\r\n    return NullType.baseType;\r\n  } else if (isArray(typeRelation)) {\r\n    return Types.many(\r\n      typeRelation.map((relation) => Types.enum(\r\n        TextType,\r\n        TextType,\r\n        [['relation', relation.name]],\r\n      ))\r\n    );\r\n  } else {\r\n    return i.relation;\r\n  }\r\n};\r\n\r\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\r\n  const typeRelation = GetTypeRelation(i, defs);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.relationType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.itemType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\n\r\nexport const EntityOpsTypes = \r\n{\r\n\r\n  newInstance: ops.setTypes(EntityOps.newInstance, \r\n    GetNamedType,\r\n    { name: GetName },\r\n    { initial: (i, provider) => {\r\n      if (i.name instanceof EntityType) {\r\n        const type = i.name.getType();\r\n        if (type instanceof ObjectType) {\r\n          const objectType = type as ObjectType<ObjectOptions>;\r\n          \r\n          return Types.object(objectMap(objectType.options.props, (value) => Types.optional(value.clone())));\r\n        }\r\n      }\r\n      return ObjectType.baseType;\r\n    }}\r\n  ),\r\n\r\n  get: ops.setTypes(EntityOps.get, \r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity) {\r\n        return AnyType;\r\n      }\r\n\r\n      return Types.list(entity.type);\r\n    },\r\n    { name: GetName },\r\n    { where: BooleanType },\r\n    { instance: GetNamedType },\r\n  ),\r\n\r\n  getKey: ops.setTypes(EntityOps.getKey,\r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity || !entity.key) {\r\n        return AnyType;\r\n      }\r\n\r\n      return entity.keyType;\r\n    },\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  save: ops.setTypes(EntityOps.save, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  remove: ops.setTypes(EntityOps.remove, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  setRelated: ops.setTypes(EntityOps.setRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\r\n  ),\r\n\r\n  addRelated: ops.setTypes(EntityOps.addRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \r\n  ),\r\n\r\n  getRelated: ops.setTypes(EntityOps.getRelated,\r\n    (i, defs) => GetRelatedRelationType(i, defs),\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\r\n  ),\r\n\r\n  isRelated: ops.setTypes(EntityOps.isRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n};\r\n\r\nEntityOpsTypes.newInstance.rawTypes = true;\r\nEntityOpsTypes.get.rawTypes = true;\r\nEntityOpsTypes.getKey.rawTypes = true;\r\nEntityOpsTypes.save.rawTypes = true;\r\nEntityOpsTypes.remove.rawTypes = true;\r\nEntityOpsTypes.setRelated.rawTypes = true;\r\nEntityOpsTypes.addRelated.rawTypes = true;\r\nEntityOpsTypes.removeRelated.rawTypes = true;\r\nEntityOpsTypes.clearRelated.rawTypes = true;\r\nEntityOpsTypes.getRelated.rawTypes = true;\r\nEntityOpsTypes.isRelated.rawTypes = true;\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { AnyOps } from '../AnyOps';\r\nimport { OptionalType } from '../../types/Optional';\r\nimport { ManyType } from '../../types/Many';\r\nimport { NullType } from '../../types/Null';\r\nimport { Type } from '../../Type';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = AnyType.operations;\r\n\r\nexport const AnyOpsTypes = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\r\n\r\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\r\n\r\n  isDefined: ops.setTypes(AnyOps.isDefined, \r\n    BooleanType,\r\n    { value: AnyType }\r\n  ),\r\n\r\n  getDefined: ops.setTypes(AnyOps.getDefined, \r\n    BooleanType,\r\n    { value: AnyType, defined: AnyType },\r\n    {},\r\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\r\n  ),\r\n\r\n  coalesce: ops.setTypes(AnyOps.coalesce, \r\n    i => {\r\n      let optional = true;\r\n      const types: Type[] = [];\r\n      const checkType = (x?: Type) => {\r\n        if (!optional) return;\r\n        \r\n        if (x) {\r\n          let xoptional = x instanceof OptionalType;\r\n          const xinner = xoptional ? x.options as Type : x;\r\n\r\n          if (xinner instanceof ManyType) {\r\n            xinner.options.forEach((y) => {\r\n              const yoptional = y instanceof OptionalType;\r\n              const yinner = yoptional ? y.options as Type : y;\r\n\r\n              xoptional = xoptional || yoptional;\r\n\r\n              if (!types.some(t => t.exactType(yinner))) {\r\n                types.push(yinner);\r\n              }\r\n            });\r\n          }\r\n\r\n          optional = optional && xoptional;\r\n\r\n          if (!types.some(t => t.exactType(xinner))) {\r\n            types.push(xinner);\r\n          }\r\n        }\r\n      };\r\n\r\n      checkType(i.a);\r\n      checkType(i.b);\r\n      checkType(i.c);\r\n      checkType(i.d);\r\n      checkType(i.e);\r\n\r\n      return types.length > 1\r\n        ? optional\r\n          ? Types.optional(new ManyType(types))\r\n          : new ManyType(types)\r\n        : types.length === 1\r\n          ? optional\r\n            ? Types.optional(types[0])\r\n            : types[0]\r\n          : NullType;\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  require: ops.setTypes(AnyOps.require, \r\n    i => i.value instanceof OptionalType\r\n      ? i.value.options\r\n      : i.value || AnyType,\r\n    { value: i => i.value || AnyType },\r\n  ),\r\n\r\n  ternary: ops.setTypes(AnyOps.ternary, \r\n    (i) => {\r\n      if (i.truthy && i.falsy) {\r\n        return Types.mergeMany([i.truthy, i.falsy]);\r\n      } else if (i.truthy) {\r\n        return i.truthy;\r\n      } else if (i.falsy) {\r\n        return i.falsy;\r\n      } else {\r\n        return AnyType;\r\n      }\r\n    },\r\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\r\n\r\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\r\n\r\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\r\n\r\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\r\n\r\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\r\n\r\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\r\n\r\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\r\n\r\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\r\n\r\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n};\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { BooleanOps } from '../BooleanOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = BooleanType.operations;\r\n\r\n\r\nexport const BooleanOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(BooleanOps.create, BooleanType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(BooleanOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\r\n\r\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\r\n\r\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\r\n\r\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\r\n\r\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\r\n\r\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\r\n\r\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\r\n\r\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\r\n\r\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\r\n\r\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\r\n\r\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\r\n\r\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\r\n\r\n};","\r\nimport { ColorType } from '../../types/Color';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ColorOps } from '../ColorOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\r\nimport { Color } from '../../util/color/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ColorType.operations;\r\n\r\nexport const ColorComponentEnum = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['r', 'r'],\r\n    ['g', 'g'],\r\n    ['b', 'b'],\r\n    ['a', 'a'],\r\n  ]),\r\n});\r\n\r\nexport const ColorOrNumber = new ManyType([\r\n  ColorType.baseType,\r\n  new NumberType({ }),\r\n]);\r\n\r\nexport const ColorFormats = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\r\n    ['#rgb', 'rgb:hexShort'],\r\n    ['#rrggbb', 'rgb:hex'],\r\n    ['#rrggbbaa', 'rgb:hexLong'],\r\n    ['rgb(r, g, b)', 'rgb:rgb'],\r\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\r\n    ['hsl(h, s, l)', 'hsl:hsl'],\r\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\r\n  ]),\r\n});\r\n\r\nexport const ColorNames = new EnumType({\r\n  key: TextType.baseType,\r\n  value: ColorType.baseType,\r\n  constants: new Map<string, Color>([\r\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\r\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\r\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\r\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\r\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\r\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\r\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\r\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\r\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\r\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\r\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\r\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\r\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\r\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\r\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\r\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\r\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\r\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\r\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\r\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\r\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\r\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\r\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\r\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\r\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\r\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\r\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\r\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\r\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\r\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\r\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\r\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\r\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\r\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\r\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\r\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\r\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\r\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\r\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\r\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\r\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\r\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\r\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\r\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\r\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\r\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\r\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\r\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\r\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\r\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\r\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\r\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\r\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\r\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\r\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\r\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\r\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\r\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\r\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\r\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\r\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\r\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\r\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\r\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\r\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\r\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\r\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\r\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\r\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\r\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\r\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\r\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\r\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\r\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\r\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\r\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\r\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\r\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\r\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\r\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\r\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\r\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\r\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\r\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\r\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\r\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\r\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\r\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\r\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\r\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\r\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\r\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\r\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\r\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\r\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\r\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\r\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\r\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\r\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\r\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\r\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\r\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\r\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\r\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\r\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\r\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\r\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\r\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\r\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\r\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\r\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\r\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\r\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\r\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\r\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\r\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\r\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\r\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\r\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\r\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\r\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\r\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\r\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\r\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\r\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\r\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\r\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\r\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\r\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\r\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\r\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\r\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\r\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\r\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\r\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\r\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\r\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\r\n  ]),\r\n});\r\n\r\n// a = bottom layer (0 -> 1)\r\n// b = top layer (0 -> 1)\r\n\r\nexport const ColorBlendModes = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Multiply', 'multiply'],         // a * b\r\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\r\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\r\n    ['Dodge', 'dodge'],               // a / (1 - b)\r\n    ['Burn', 'burn'],                 // (1 - b) / a\r\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\r\n    ['Addition', 'add'],              // a + b\r\n    ['Subtract', 'sub'],              // a - b\r\n    ['Difference', 'diff'],           // b - a\r\n    ['Darken Only', 'darken'],        // min(a, b)\r\n    ['Lighten Only', 'lighten'],      // max(a, b)\r\n  ]),\r\n});\r\n\r\n\r\nexport const ColorOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ColorOps.create, ColorType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ColorOps.maybe, \r\n    (i) => Types.maybe(i.value, ColorType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(ColorOps.cmp, \r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ColorOps.copy, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  build: ops.setTypes(ColorOps.build, \r\n    ColorType,\r\n    { r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType }\r\n  ),\r\n\r\n  map: ops.setTypes(ColorOps.map, \r\n    ColorType,\r\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  op: ops.setTypes(ColorOps.op, \r\n    ColorType,\r\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  clamp: ops.setTypes(ColorOps.clamp, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  add: ops.setTypes(ColorOps.add, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  adds: ops.setTypes(ColorOps.adds, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  sub: ops.setTypes(ColorOps.sub, \r\n    ColorType,\r\n    { value: ColorType, subtrahend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mul: ops.setTypes(ColorOps.mul, \r\n    ColorType,\r\n    { value: ColorType, multiplier: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  div: ops.setTypes(ColorOps.div, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mod: ops.setTypes(ColorOps.mod, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  format: ops.setTypes(ColorOps.format, \r\n    TextType,\r\n    { value: ColorType, format: ColorFormats }\r\n  ),\r\n\r\n  parse: ops.setTypes(ColorOps.parse, \r\n    Types.optional(ColorType),\r\n    { value: AnyType }\r\n  ),\r\n\r\n  lerp: ops.setTypes(ColorOps.lerp,\r\n    ColorType,\r\n    { start: ColorType, end: ColorType, delta: NumberType }\r\n  ),\r\n\r\n  lighten: ops.setTypes(ColorOps.lighten,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  darken: ops.setTypes(ColorOps.darken,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  toHSL: ops.setTypes(ColorOps.toHSL,\r\n    ColorSpaceHSL.type,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\r\n    ColorType,\r\n    { value: ColorSpaceHSL.type }\r\n  ),\r\n\r\n  luminance: ops.setTypes(ColorOps.luminance,\r\n    NumberType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  contrast: ops.setTypes(ColorOps.contrast,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  invert: ops.setTypes(ColorOps.invert,\r\n    ColorType,\r\n    { value: ColorType },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  opaque: ops.setTypes(ColorOps.opaque,\r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  alpha: ops.setTypes(ColorOps.alpha,\r\n    ColorType,\r\n    { value: ColorType, alpha: NumberType }\r\n  ),\r\n\r\n  distance: ops.setTypes(ColorOps.distance,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  named: ops.setTypes(ColorOps.named,\r\n    ColorType,\r\n    { name: ColorNames }\r\n  ),\r\n\r\n  getName: ops.setTypes(ColorOps.getName,\r\n    TextType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  blend: ops.setTypes(ColorOps.blend, \r\n    ColorType,\r\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ColorOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ColorOps.isEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ColorOps.isLess, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ColorOps.isGreater, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\r\n\r\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\r\n\r\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\r\n\r\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\r\n\r\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\r\n\r\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\r\n\r\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\r\n\r\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\r\n\r\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\r\n\r\n};\r\n","import { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\n\r\nimport { DateOps } from '../DateOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = DateType.operations;\r\n\r\nconst DateProperty = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Timestamp', 'timestamp'],\r\n    ['Timestamp (seconds)', 'timestampSeconds'],\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Day of Month', 'dayOfMonth'],\r\n    ['Last Day of Month', 'lastDayOfMonth'],\r\n    ['Day of Year', 'dayOfYear'],\r\n    ['Day of Week', 'dayOfWeek'],\r\n    ['Week', 'week'],\r\n    ['Week of Month', 'weekOfMonth'],\r\n    ['Weekspan of Month', 'weekspanOfMonth'],\r\n    ['Full Week of Month', 'fullWeekOfMonth'],\r\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\r\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\r\n    ['Week of Year', 'weekOfYear'],\r\n    ['Weekspan of Year', 'weekspanOfYear'],\r\n    ['Full Week of Year', 'fullWeekOfYear'],\r\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\r\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year'],\r\n    ['Time Identifier', 'timeIdentifier'],\r\n    ['Day Identifier', 'dayIdentifier'],\r\n    ['Week Identifier', 'weekIdentifier'],\r\n    ['Month Identifier', 'monthIdentifier'],\r\n    ['Quarter Identifier', 'quarterIdentifier']\r\n  ])\r\n});\r\n\r\nconst DateUnits = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Week', 'week'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year']\r\n  ])\r\n});\r\n\r\nconst DateAdjust = new EnumType({\r\n  key: TextType.baseType.newInstance(),\r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['None', 'none'],\r\n    ['Floor', 'floor'],\r\n    ['Ceil', 'ceil'],\r\n    ['Round', 'round'],\r\n    ['Truncate', 'truncate'],\r\n    ['Up', 'up'],\r\n    ['Down', 'down']\r\n  ])\r\n})\r\n\r\n\r\nexport const DateOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(DateOps.create, DateType),\r\n\r\n  now: ops.setTypes(DateOps.now, DateType),\r\n\r\n  today: ops.setTypes(DateOps.today, DateType),\r\n\r\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\r\n\r\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(DateOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\r\n\r\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\r\n\r\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\r\n\r\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\r\n\r\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\r\n\r\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\r\n\r\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\r\n\r\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\r\n\r\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\r\n\r\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\r\n\r\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\r\n\r\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\r\n\r\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\r\n\r\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\r\n\r\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\r\n\r\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\r\n \r\n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\r\n\r\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\r\n\r\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\r\n\r\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\r\n\r\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\r\n\r\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\r\n\r\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\r\n\r\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\r\n\r\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\r\n\r\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\r\n\r\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\r\n\r\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\r\n\r\n};","import { Type, TypeInput, TypeMap } from \"../../Type\";\r\nimport { ObjectType } from \"../../types/Object\";\r\nimport { EntityType } from \"../../types/Entity\";\r\nimport { EnumType } from \"../../types/Enum\";\r\nimport { ManyType } from \"../../types/Many\";\r\nimport { Types } from \"../../Types\";\r\nimport { OptionalType } from \"../../types/Optional\";\r\n\r\n\r\n\r\nexport function MergedObjectType(types: Type[]): ObjectType\r\n{\r\n    const props: TypeMap = {};\r\n\r\n    for (const type of types) \r\n    {\r\n        const objectType = GivenObjectType(type, undefined, MergedObjectType);\r\n        \r\n        if (objectType instanceof ObjectType) \r\n        {\r\n            const paramProps = objectType.options.props;\r\n\r\n            for (const prop in paramProps) \r\n            {\r\n                const paramProp = paramProps[prop];\r\n\r\n                if (prop in props && paramProp instanceof OptionalType) \r\n                {\r\n                    props[prop] = Types.mergeMany([paramProp, props[prop]]);\r\n                } \r\n                else \r\n                {\r\n                    props[prop] = paramProp;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return new ObjectType({ props });\r\n}\r\n\r\nexport function GivenObjectType(type?: Type, otherwise?: TypeInput, merger?: (multiple: Type[]) => Type): TypeInput\r\n{\r\n    return type instanceof ObjectType \r\n        ? type \r\n        : type instanceof EntityType \r\n            ? type.getType()\r\n            : type instanceof EnumType\r\n                ? GivenObjectType(type.options.value, otherwise)\r\n                : type instanceof ManyType && type.options.some((e) => GivenObjectType(e)) && merger\r\n                    ? merger(type.options.filter((e) => GivenObjectType(e)))\r\n                    : type instanceof OptionalType\r\n                        ? GivenObjectType(type.options, otherwise)\r\n                        : otherwise;\r\n}\r\n  ","\r\nimport { Type, TypeInput } from '../../Type';\r\nimport { ListType } from '../../types/List';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\nimport { MapType } from '../../types/Map';\r\nimport { DateType } from '../../types/Date';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { ListOps } from '../ListOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\nimport { GivenObjectType, MergedObjectType } from './helpers';\r\n\r\n\r\nconst ops = ListType.operations;\r\n\r\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\r\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\r\nconst GivenList = (i: {list?: Type}) => RequireList(i.list, ListType);\r\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value, ListType);\r\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\r\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\r\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\r\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\r\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\r\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\r\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\r\n\r\n\r\nexport const ListOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ListOps.create, ListType),\r\n\r\n  createLike: ops.setTypes(ListOps.createLike, \r\n    GivenList,\r\n    { list: GivenList },\r\n  ),\r\n\r\n  createFor: ops.setTypes(ListOps.createFor, \r\n    i => ListType.forItem(i.item || AnyType),\r\n    { item: i => i.item || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ListOps.maybe, \r\n    (i) => Types.maybe(i.value, ListType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  build: ops.setTypes(ListOps.build, \r\n    i => ListType.forItem(i.item || AnyType), \r\n    { count: NumberType, item: i => i.item || AnyType },\r\n    { sameItem: BooleanType },\r\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\r\n  ),\r\n\r\n  get: ops.setTypes(ListOps.get, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  set: ops.setTypes(ListOps.set, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType, value: GivenListItem }\r\n  ),\r\n\r\n  add: ops.setTypes(ListOps.add, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addFirst: ops.setTypes(ListOps.addFirst, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addLast: ops.setTypes(ListOps.addLast, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  insert: ops.setTypes(ListOps.insert, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem, index: NumberType }\r\n  ),\r\n\r\n  remove: ops.setTypes(ListOps.remove,  \r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  removeFirst: ops.setTypes(ListOps.removeFirst,\r\n    GivenListItemOptional, \r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeLast: ops.setTypes(ListOps.removeLast,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeAt: ops.setTypes(ListOps.removeAt,  \r\n    GivenListItemOptional,\r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \r\n    GivenList,\r\n    { list: GivenList, where: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  clear: ops.setTypes(ListOps.clear, \r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  contains: ops.setTypes(ListOps.contains,\r\n    BooleanType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  find: ops.setTypes(ListOps.find,\r\n    GivenListItemOptional,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  copy: ops.setTypes(ListOps.copy,\r\n    GivenList,\r\n    { list: GivenList },\r\n    { deepCopy: GivenListItem },\r\n    { copy: GivenListItem }\r\n  ),\r\n\r\n  reverse: ops.setTypes(ListOps.reverse,\r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  exclude: ops.setTypes(ListOps.exclude,  \r\n    GivenList,\r\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  overlap: ops.setTypes(ListOps.overlap,  \r\n    GivenList,\r\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  sort: ops.setTypes(ListOps.sort,   \r\n    GivenList,\r\n    { list: GivenList, compare: NumberType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  shuffle: ops.setTypes(ListOps.shuffle, \r\n    GivenList,\r\n    { list: GivenList },\r\n    { times: NumberType }\r\n  ),\r\n\r\n  unique: ops.setTypes(ListOps.unique,   \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  duplicates: ops.setTypes(ListOps.duplicates,  \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    { once: BooleanType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  take: ops.setTypes(ListOps.take,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  skip: ops.setTypes(ListOps.skip,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  drop: ops.setTypes(ListOps.drop,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  append: ops.setTypes(ListOps.append,\r\n    GivenList,\r\n    { list: GivenList, append: GivenList }\r\n  ),\r\n\r\n  prepend: ops.setTypes(ListOps.prepend,\r\n    GivenList,\r\n    { list: GivenList, prepend: GivenList }\r\n  ),\r\n\r\n  indexOf: ops.setTypes(ListOps.indexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  findIndex: ops.setTypes(ListOps.findIndex,\r\n    NumberType,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  last: ops.setTypes(ListOps.last,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  first: ops.setTypes(ListOps.first,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  count: ops.setTypes(ListOps.count,\r\n    NumberType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  randomList: ops.setTypes(ListOps.randomList,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  random: ops.setTypes(ListOps.random,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  flatten: ops.setTypes(ListOps.flatten,\r\n    (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\r\n      ? GivenObjectType(i.list.options.item, undefined, MergedObjectType)\r\n      : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\r\n        ? MergedObjectType(i.list.options.filter((e) => GivenObjectType(e, undefined, MergedObjectType)))\r\n        : ObjectType,\r\n    { list: (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\r\n        ? i.list\r\n        : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\r\n          ? i.list\r\n          : ListType\r\n    }\r\n  ),\r\n\r\n  // Iteration\r\n\r\n  join: ops.setTypes(ListOps.join,\r\n    TextType,\r\n    { list: GivenList },\r\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  each: ops.setTypes(ListOps.each,\r\n    GivenList,\r\n    { list: GivenList, each: AnyType },\r\n    { reverse: BooleanType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  filter: ops.setTypes(ListOps.filter,\r\n    GivenList,\r\n    { list: GivenList, filter: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  not: ops.setTypes(ListOps.not,\r\n    GivenList,\r\n    { list: GivenList, not: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(ListOps.map,\r\n    i => ListType.forItem(i.transform || AnyType),\r\n    { list: GivenList, transform: i => i.transform || AnyType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  split: ops.setTypes(ListOps.split,\r\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\r\n    { list: GivenList, pass: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  reduce: ops.setTypes(ListOps.reduce,\r\n    GivenReducer,\r\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\r\n    {},\r\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ListOps.cmp,\r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  group: ops.setTypes(ListOps.group, \r\n    i => ListType.forItem(Types.object({\r\n      by: i.by || AnyType,\r\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\r\n    })),\r\n    { list: GivenList, by: i => i.by || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toListMap: ops.setTypes(ListOps.toListMap, \r\n    i => MapType.forItem(\r\n      ListType.forItem(i.getValue || GivenListItem(i)), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toMap: ops.setTypes(ListOps.toMap,\r\n    i => MapType.forItem(\r\n      i.getValue || GivenListItem(i), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.setTypes(ListOps.joinInner, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinLeft: ops.setTypes(ListOps.joinLeft, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinRight: ops.setTypes(ListOps.joinRight, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinFull: ops.setTypes(ListOps.joinFull, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinCross: ops.setTypes(ListOps.joinCross, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\r\n    { },\r\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.setTypes(ListOps.min,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  max: ops.setTypes(ListOps.max,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  sum: ops.setTypes(ListOps.sum,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  avg: ops.setTypes(ListOps.avg,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  std: ops.setTypes(ListOps.std,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  variance: ops.setTypes(ListOps.variance,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  median: ops.setTypes(ListOps.median,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitand: ops.setTypes(ListOps.bitand,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitor: ops.setTypes(ListOps.bitor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitxor: ops.setTypes(ListOps.bitxor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ListOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEmpty: ops.setTypes(ListOps.isEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ListOps.isEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(ListOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ListOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  // Casts\r\n  \r\n\r\n  asAny: ops.setTypes(ListOps.asAny, \r\n    AnyType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asBoolean: ops.setTypes(ListOps.asBoolean, \r\n    BooleanType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asColor: ops.setTypes(ListOps.asColor, \r\n    ColorType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asDate: ops.setTypes(ListOps.asDate, \r\n    DateType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asList: ops.setTypes(ListOps.asList, \r\n    GivenValueList,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asMap: ops.setTypes(ListOps.asMap,\r\n    i => MapType.forItem(GivenValueListItem(i)),\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asNumber: ops.setTypes(ListOps.asNumber, \r\n    NumberType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asObject: ops.setTypes(ListOps.asObject,\r\n    ObjectType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asText: ops.setTypes(ListOps.asText, \r\n    TextType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asTuple: ops.setTypes(ListOps.asTuple, \r\n    TupleType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asSet: ops.setTypes(ListOps.asSet, \r\n    i => SetType.forItem(GivenValueListItem(i)), \r\n    { value: GivenValueList }\r\n  ),\r\n  \r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { MapType } from '../../types/Map';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { MapOps } from '../MapOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { objectValues } from '../../fns';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = MapType.operations;\r\n\r\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\r\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\r\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\r\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\r\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\r\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\r\n\r\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\r\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\r\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\r\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\r\n\r\nexport const MapOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(MapOps.create, MapType),\r\n\r\n  createLike: ops.setTypes(MapOps.createLike, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n  ),\r\n\r\n  createFor: ops.setTypes(MapOps.createFor, \r\n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\r\n    { value: i => i.value || AnyType },\r\n    { key: i => i.key || TextType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(MapOps.maybe, \r\n    (i) => Types.maybe(i.value, MapType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  get: ops.setTypes(MapOps.get, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  set: ops.setTypes(MapOps.set, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\r\n    {},\r\n    { existingValue: GivenMapValue }\r\n  ),\r\n\r\n  has: ops.setTypes(MapOps.has, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  delete: ops.setTypes(MapOps.delete, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  keys: ops.setTypes(MapOps.keys, \r\n    i => ListType.forItem(GivenMapKey(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  values: ops.setTypes(MapOps.values, \r\n    i => ListType.forItem(GivenMapValue(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  entries: ops.setTypes(MapOps.entries, \r\n    i => Types.object({\r\n      keys: ListType.forItem(GivenMapKey(i)),\r\n      values: ListType.forItem(GivenMapValue(i)),\r\n    }),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  pairs: ops.setTypes(MapOps.pairs, \r\n    i => ListType.forItem(Types.object({\r\n      key: GivenMapKey(i),\r\n      value: GivenMapValue(i)\r\n    })),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  clear: ops.setTypes(MapOps.clear, \r\n    GivenMap,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  count: ops.setTypes(MapOps.count, \r\n    NumberType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  cmp: ops.setTypes(MapOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  copy: ops.setTypes(MapOps.copy, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(MapOps.map, \r\n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\r\n    { map: GivenMap },\r\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\r\n    ObjectType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \r\n    (i) => {\r\n      if (!(i.object instanceof ObjectType)) {\r\n        return MapType;\r\n      }\r\n\r\n      const propTypes = objectValues((i.object as ObjectType).options.props);\r\n      \r\n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\r\n    },\r\n    { object: i => i.object || ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(MapOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(MapOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(MapOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(MapOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\r\n\r\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\r\n\r\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\r\n\r\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\r\n\r\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\r\n\r\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\r\n\r\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\r\n\r\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\r\n\r\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\r\n\r\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { DateType } from '../../types/Date';\r\n\r\nimport { NumberOps } from '../NumberOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = NumberType.operations;\r\n\r\n\r\nconst BitMethod = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['has the bits', 'contain'],              // value & test === test\r\n    ['does not have the bits', 'notcontain'], // value & test !== test\r\n    ['has some of the bits', 'overlap'],      // value & test !== 0\r\n    ['has none of the bits', 'none'],         // value & test === 0\r\n    ['has the same bits', 'equal'],           // value === test\r\n    ['does not have the same bits', 'not'],   // value !== test\r\n    ['has all bits in', 'subset'],            // test & value === value\r\n  ])\r\n});\r\n\r\n\r\nexport const NumberOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(NumberOps.create, NumberType ),\r\n\r\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\r\n\r\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\r\n\r\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\r\n\r\n  e: ops.setTypes(NumberOps.e, NumberType ),\r\n\r\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\r\n\r\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\r\n\r\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\r\n\r\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\r\n\r\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\r\n\r\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\r\n\r\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\r\n\r\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\r\n\r\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\r\n  \r\n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\r\n  \r\n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\r\n  \r\n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.setTypes(NumberOps.maybe, \r\n    (i) => Types.maybe(i.value, NumberType),\r\n    { value: AnyType } \r\n  ),\r\n  \r\n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\r\n\r\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\r\n  \r\n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\r\n  \r\n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\r\n  \r\n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\r\n  \r\n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\r\n  \r\n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\r\n  \r\n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\r\n  \r\n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\r\n  \r\n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\r\n  \r\n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\r\n  \r\n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\r\n  \r\n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\r\n  \r\n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\r\n  \r\n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\r\n  \r\n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\r\n  \r\n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\r\n\r\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\r\n  \r\n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\r\n  \r\n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\r\n  \r\n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\r\n\r\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\r\n\r\n  // Other\r\n\r\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\r\n\r\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\r\n\r\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\r\n\r\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\r\n\r\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\r\n\r\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\r\n\r\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\r\n\r\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\r\n\r\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\r\n\r\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \r\n    BooleanType,\r\n    { value: NumberType, method: BitMethod, test: NumberType },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\r\n\r\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\r\n\r\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\r\n\r\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\r\n\r\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\r\n\r\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\r\n\r\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\r\n\r\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\r\n\r\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ObjectOps } from '../ObjectOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\nimport { MergedObjectType } from './helpers';\r\n\r\n\r\nconst ops = ObjectType.operations;\r\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\r\n\r\nexport const ObjectOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ObjectOps.create, \r\n    GivenObject\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ObjectOps.maybe, \r\n    (i) => Types.maybe(i.value, ObjectType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  has: ops.setTypes(ObjectOps.has, \r\n    BooleanType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  get: ops.setTypes(ObjectOps.get, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  set: ops.setTypes(ObjectOps.set, \r\n    GivenObject,\r\n    { object: GivenObject, key: TextType, value: AnyType },\r\n    {},\r\n    { existingValue: AnyType }\r\n  ),\r\n\r\n  delete: ops.setTypes(ObjectOps.delete, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ObjectOps.cmp, \r\n    NumberType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ObjectOps.copy, \r\n    GivenObject,\r\n    { object: GivenObject }\r\n  ),\r\n\r\n  merge: ops.setTypes(ObjectOps.merge, \r\n    (i) => MergedObjectType(['a', 'b', 'c', 'd', 'e'].map(k => i[k])),\r\n    { a: ObjectType, b: ObjectType },\r\n    { c: ObjectType, d: ObjectType, e: ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ObjectOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ObjectOps.isEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ObjectOps.isLess, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ObjectOps.isGreater, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\r\n\r\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\r\n\r\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\r\n\r\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\r\n\r\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\r\n\r\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\r\n\r\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\r\n\r\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\r\n\r\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { SetOps } from '../SetOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { MapType } from '../../types/Map';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = SetType.operations;\r\n\r\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\r\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\r\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\r\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\r\n\r\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\r\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\r\n\r\nexport const SetOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(SetOps.create, SetType),\r\n\r\n  createLike: ops.setTypes(SetOps.createLike, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n  ),\r\n\r\n  createFor: ops.setTypes(SetOps.createFor, \r\n    i => ListType.forItem(i.value || AnyType),\r\n    { value: i => i.value || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(SetOps.maybe, \r\n    (i) => Types.maybe(i.value, SetType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  add: ops.setTypes(SetOps.add, \r\n    GivenSet,\r\n    { set: GivenSet, value: GivenSetValue },\r\n  ),\r\n\r\n  has: ops.setTypes(SetOps.has, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  delete: ops.setTypes(SetOps.delete, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  values: ops.setTypes(SetOps.values, \r\n    i => ListType.forItem(GivenSetValue(i)),\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  clear: ops.setTypes(SetOps.clear, \r\n    GivenSet,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  count: ops.setTypes(SetOps.count, \r\n    NumberType,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  cmp: ops.setTypes(SetOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  copy: ops.setTypes(SetOps.copy, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n    { deepCopy: GivenSetValue },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(SetOps.map, \r\n    i => SetType.forItem(i.transform || GivenSetValue(i)),\r\n    { set: GivenSet },\r\n    { transform: i => i.transform || GivenSetValue(i) },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(SetOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(SetOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isLess: ops.setTypes(SetOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreater: ops.setTypes(SetOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\r\n\r\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\r\n\r\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\r\n\r\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\r\n\r\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\r\n\r\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\r\n\r\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\r\n\r\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\r\n\r\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { ListType } from '../../types/List';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { TextOps } from '../TextOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = TextType.operations;\r\nconst TextListType = ListType.forItem(TextType);\r\nconst RegexMatchType = Types.object({\r\n  index: NumberType,\r\n  lastIndex: NumberType,\r\n  input: TextType,\r\n  groups: TextListType,\r\n});\r\n\r\n\r\nexport const TextOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TextOps.create, TextType),\r\n\r\n  uuid: ops.setTypes(TextOps.uuid, TextType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TextOps.maybe, \r\n    (i) => Types.maybe(i.value, TextType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\r\n\r\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\r\n\r\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\r\n\r\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\r\n\r\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\r\n\r\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\r\n\r\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\r\n\r\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\r\n\r\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\r\n\r\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\r\n\r\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\r\n\r\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\r\n\r\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\r\n\r\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\r\n\r\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\r\n\r\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\r\n\r\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \r\n    ListType.forItem(RegexMatchType), \r\n    { value: TextType, regex: TextType }, \r\n    { ignoreCase: BooleanType, multiline: BooleanType }\r\n  ),\r\n\r\n  regexReplace: ops.setTypes(TextOps.regexReplace, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replacement: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n  ),\r\n\r\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replace: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n    { match: RegexMatchType }\r\n  ),\r\n\r\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\r\n\r\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\r\n\r\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\r\n\r\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\r\n\r\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\r\n\r\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\r\n\r\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\r\n\r\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\r\n\r\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\r\n\r\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\r\n\r\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\r\n\r\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\r\n\r\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\r\n\r\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\r\n\r\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\r\n\r\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\r\n\r\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\r\n\r\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\r\n\r\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\r\n\r\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n};\r\n","\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { TupleOps } from '../TupleOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\nimport { NullType } from '../../types/Null';\r\n\r\n\r\nconst ops = TupleType.operations;\r\n\r\n\r\nexport const TupleOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TupleOps.create, TupleType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TupleOps.maybe, \r\n    (i) => Types.maybe(i.value, TupleType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\r\n\r\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\r\n\r\n  build: ops.setTypes(TupleOps.build, \r\n    (i) => {\r\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\r\n      let elements: Type[] = [];\r\n      let list = false;\r\n      \r\n      for (const param of params) \r\n      {\r\n        const paramType = i[param];\r\n\r\n        if (paramType) \r\n        {\r\n          if (paramType instanceof TupleType) \r\n          {\r\n            elements = elements.concat(paramType.options);\r\n          }\r\n          else if (paramType instanceof ListType)\r\n          {\r\n            list = true;\r\n            elements.push(paramType.options.item);\r\n          }\r\n          else \r\n          {\r\n            elements.push(paramType);\r\n          }\r\n        }\r\n      }\r\n\r\n      return list\r\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\r\n        : new TupleType(elements);\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\r\n\r\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\r\n\r\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\r\n\r\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\r\n\r\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\r\n\r\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\r\n\r\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\r\n\r\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\r\n\r\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\r\n\r\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n};\r\n","import { isString } from '../fns';\r\n\r\n\r\nexport type Formatter<T> = (item: T) => string;\r\n\r\nexport interface FormatterMap<T> \r\n{\r\n  [key: string]: Formatter<T>;\r\n}\r\n\r\nexport interface FormatSection<T>\r\n{\r\n  size: number;\r\n  formats: FormatterMap<T>;\r\n}\r\n\r\nexport interface FormatEscapes\r\n{\r\n  [first: string]: {\r\n    start: string;\r\n    startEscape: string;\r\n    end: string;\r\n    endEscape: string;\r\n  };\r\n}\r\n\r\nexport class Format<T>\r\n{\r\n\r\n  private cached: FormatterMap<T> = {};\r\n\r\n  private sections: FormatSection<T>[] = [];\r\n\r\n  private escapes: FormatEscapes;\r\n\r\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\r\n  {\r\n    this.add(formats);\r\n    this.escapes = escapes;\r\n  }\r\n\r\n  public add(map: FormatterMap<T>): this;\r\n  public add(key: string, formatter: Formatter<T>): this;\r\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\r\n  {\r\n    if (isString(keyOrMap))\r\n    {\r\n      if (formatter)\r\n      {\r\n        this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      for (const key in keyOrMap)\r\n      {\r\n        this.getSection(key.length).formats[key] = keyOrMap[key];\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getSection(size: number): FormatSection<T>\r\n  {\r\n    const guess = this.sections.length - size;\r\n    const guessSection = this.sections[guess];\r\n\r\n    if (guessSection && guessSection.size === size)\r\n    {\r\n      return guessSection;\r\n    }\r\n\r\n    for (const section of this.sections)\r\n    {\r\n      if (section.size === size)\r\n      {\r\n        return section;\r\n      }\r\n    }\r\n\r\n    const newSection = { size, formats: {} };\r\n\r\n    this.sections.push(newSection);\r\n    this.sortBySize();\r\n\r\n    return newSection;\r\n  }\r\n\r\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\r\n  {\r\n    if (format in this.cached)\r\n    {\r\n      return this.cached[format];\r\n    }\r\n\r\n    const sections = this.sections;\r\n    const formats: Formatter<T>[] = [];\r\n    let constant: string = '';\r\n\r\n    for (let i = 0; i < format.length; i++)\r\n    {\r\n      const escaped = this.getEscaped(format, i);\r\n\r\n      if (escaped !== false)\r\n      {\r\n        const [ content, end ] = escaped;\r\n\r\n        constant += content;\r\n        i = end - 1;\r\n\r\n        continue;\r\n      }\r\n\r\n      let handled: boolean = false;\r\n\r\n      for (let k = 0; k < sections.length && !handled; k++)\r\n      {\r\n        const section = sections[ k ];\r\n        const part: string = format.substring( i, i + section.size );\r\n\r\n        if (part.length === section.size)\r\n        {\r\n          const formatter = section.formats[ part ];\r\n\r\n          if (formatter)\r\n          {\r\n            formats.push(formatter);\r\n            i += section.size - 1;\r\n            handled = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (handled)\r\n      {\r\n        if (constant)\r\n        {\r\n          const copy = constant;\r\n\r\n          formats.splice(formats.length - 1, 0, () => copy);\r\n          constant = '';\r\n        }\r\n      }\r\n      else\r\n      {\r\n        constant += format.charAt(i);\r\n      }\r\n    }\r\n\r\n    if (constant)\r\n    {\r\n      formats.push(() => constant);\r\n    }\r\n\r\n    const finalFormatter = (item: T) => \r\n    {\r\n      let formatted: string = '';\r\n\r\n      for (const formatter of formats)\r\n      {\r\n        formatted += formatter(item);\r\n      }\r\n\r\n      return formatted;\r\n    };\r\n\r\n    if (cache)\r\n    {\r\n      this.cached[format] = finalFormatter;\r\n    }\r\n\r\n    return finalFormatter;\r\n  }\r\n\r\n  public format (format: string, item: T, cache: boolean = false): string\r\n  {\r\n    return this.getFormatter(format, cache)(item);\r\n  }\r\n\r\n  private sortBySize()\r\n  {\r\n    this.sections.sort((a, b) => b.size - a.size);\r\n  }\r\n\r\n  private getEscaped (x: string, i: number): false | [string, number]\r\n  {\r\n    const c = x.charAt(i);\r\n    const escaped = this.escapes[c];\r\n\r\n    if (!escaped)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { start, end, startEscape, endEscape } = escaped;\r\n\r\n    const possibleStart = x.substring(i, i + start.length);\r\n\r\n    if (possibleStart !== start)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\r\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\r\n\r\n    if (possibleEscape === startEscape)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    i += start.length;\r\n\r\n    const endOffset = endEscape.indexOf(end);\r\n    let last = x.indexOf(end, i);\r\n    let content: string = x.substring(i, last);\r\n\r\n    i = last - endOffset;\r\n\r\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\r\n    {\r\n      content = content.substring(0, content.length - endOffset);\r\n      content += end;\r\n      i += endEscape.length;\r\n      last = x.indexOf(end, i);\r\n      content += x.substring(i, last);\r\n      i = last - endOffset;\r\n    }\r\n\r\n    if (last === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return [content, last + end.length];\r\n  }\r\n\r\n}\r\n","\r\nimport { Format } from '../Format';\r\nimport { LocaleOptions } from '../../Locale';\r\nimport { padNumber } from '../../fns';\r\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\r\n  M:          ([day]) => (day.getMonth() + 1) + '',\r\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\r\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\r\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\r\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\r\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\r\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\r\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\r\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\r\n  D:          ([day]) => day.getDate() + '',\r\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\r\n  DD:         ([day]) => padNumber(day.getDate(), 2),\r\n  DDD:        ([day]) => getDayOfYear(day) + '',\r\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\r\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\r\n  d:          ([day]) => day.getDay() + '',\r\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\r\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\r\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\r\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\r\n  e:          ([day]) => getDayOfWeek(day) + '',\r\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\r\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\r\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\r\n  w:          ([day]) => getWeekOfYear(day) + '',\r\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\r\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\r\n  W:          ([day]) => getWeekOfYearISO(day) + '',\r\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\r\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\r\n  Y:          ([day]) => day.getFullYear() + '',\r\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\r\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\r\n  H:          ([day]) => day.getHours() + '',\r\n  HH:         ([day]) => padNumber(day.getHours(), 2),\r\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\r\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\r\n  k:          ([day]) => (day.getHours() + 1) + '',\r\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\r\n  m:          ([day]) => day.getMinutes() + '',\r\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\r\n  s:          ([day]) => day.getSeconds() + '',\r\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\r\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\r\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\r\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\r\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\r\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\r\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\r\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\r\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\r\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\r\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\r\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\r\n  Z:          ([day]) => formatOffset(day, ':'),\r\n  ZZ:         ([day]) => formatOffset(day, ''),\r\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\r\n  x:          ([day]) => day.valueOf() + '',\r\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\r\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\r\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\r\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\r\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\r\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\r\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\r\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\r\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\r\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\r\n}, {\r\n  '[': {\r\n    start: '[',\r\n    startEscape: '\\\\[',\r\n    end: ']',\r\n    endEscape: '\\\\]'\r\n  },\r\n  \"'\": {\r\n    start: \"'\",\r\n    startEscape: \"''\",\r\n    end: \"'\",\r\n    endEscape: \"''\"\r\n  }\r\n});\r\n\r\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\r\n\r\nfunction formatOffset(day: Date, splitter: string): string\r\n{\r\n  const off = getDateOffset(day);\r\n  const hr = Math.floor(Math.abs(off) / 100);\r\n  const mn = Math.abs(off) % 100;\r\n\r\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\r\n}","\r\nexport * from './fns';\r\n\r\nexport * from './Command';\r\nexport * from './DefinitionProvider';\r\nexport * from './Definitions';\r\nexport * from './DataTypes';\r\nexport * from './Entity';\r\nexport * from './EventBase';\r\nexport * from './Expression';\r\nexport * from './Exprs';\r\nexport * from './Func';\r\nexport * from './LinkedNode';\r\nexport * from './Locale';\r\nexport * from './Operation';\r\nexport * from './Computed';\r\nexport * from './Program';\r\nexport * from './ReferenceData';\r\nexport * from './Relation';\r\nexport * from './Runtime';\r\nexport * from './Type';\r\nexport * from './Types';\r\nexport * from './Traverser';\r\nexport * from './Validate';\r\n\r\nexport * from './maps/FastMap';\r\nexport * from './maps/NamedMap';\r\n\r\nexport * from './types/ID';\r\nexport * from './types/Entity';\r\nexport * from './types/Any';\r\nexport * from './types/Boolean';\r\nexport * from './types/Color';\r\nexport * from './types/Date';\r\nexport * from './types/Enum';\r\nexport * from './types/List';\r\nexport * from './types/Many';\r\nexport * from './types/Map';\r\nexport * from './types/Not';\r\nexport * from './types/Null';\r\nexport * from './types/Number';\r\nexport * from './types/Object';\r\nexport * from './types/Optional';\r\nexport * from './types/Set';\r\nexport * from './types/Text';\r\nexport * from './types/Tuple';\r\n\r\nexport * from './exprs/And';\r\nexport * from './exprs/Chain';\r\nexport * from './exprs/Comment';\r\nexport * from './exprs/Computed';\r\nexport * from './exprs/Constant';\r\nexport * from './exprs/Define';\r\nexport * from './exprs/Do';\r\nexport * from './exprs/For';\r\nexport * from './exprs/Get';\r\nexport * from './exprs/GetData';\r\nexport * from './exprs/GetEntity';\r\nexport * from './exprs/GetRelation';\r\nexport * from './exprs/If';\r\nexport * from './exprs/Invoke';\r\nexport * from './exprs/Method';\r\nexport * from './exprs/No';\r\nexport * from './exprs/Not';\r\nexport * from './exprs/Object';\r\nexport * from './exprs/Operation';\r\nexport * from './exprs/Or';\r\nexport * from './exprs/Path';\r\nexport * from './exprs/Return';\r\nexport * from './exprs/Set';\r\nexport * from './exprs/Sub';\r\nexport * from './exprs/Switch';\r\nexport * from './exprs/Template';\r\nexport * from './exprs/Tuple';\r\nexport * from './exprs/Update';\r\nexport * from './exprs/While';\r\n\r\nexport * from './def';\r\n\r\nexport * from './ops/EntityOps';\r\nexport * from './ops/AnyOps';\r\nexport * from './ops/BooleanOps';\r\nexport * from './ops/ColorOps';\r\nexport * from './ops/DateOps';\r\nexport * from './ops/ListOps';\r\nexport * from './ops/MapOps';\r\nexport * from './ops/NumberOps';\r\nexport * from './ops/ObjectOps';\r\nexport * from './ops/SetOps';\r\nexport * from './ops/TextOps';\r\nexport * from './ops/TupleOps';\r\n\r\nexport * from './ops/types/EntityOpsTypes';\r\nexport * from './ops/types/AnyOpsTypes';\r\nexport * from './ops/types/BooleanOpsTypes';\r\nexport * from './ops/types/ColorOpsTypes';\r\nexport * from './ops/types/DateOpsTypes';\r\nexport * from './ops/types/ListOpsTypes';\r\nexport * from './ops/types/MapOpsTypes';\r\nexport * from './ops/types/NumberOpsTypes';\r\nexport * from './ops/types/ObjectOpsTypes';\r\nexport * from './ops/types/SetOpsTypes';\r\nexport * from './ops/types/TextOpsTypes';\r\nexport * from './ops/types/TupleOpsTypes';\r\n\r\nexport * from './locales';\r\n\r\nexport * from './util/color/Color';\r\nexport * from './util/color/ColorSpace';\r\nexport * from './util/color/ColorSpaceHSL';\r\nexport * from './util/color/ColorSpaceRGB';\r\nexport * from './util/date/DateConstants';\r\nexport * from './util/date/DateFormat';\r\nexport * from './util/date/DateFunctions';\r\nexport * from './util/Format';"],"sourceRoot":""}