{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./FlowType.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./types/Generic.ts","webpack://[name]/./types/Function.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Flow.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./exprs/Assert.ts","webpack://[name]/./exprs/Function.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/helpers.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./back/index.ts","webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/startup","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","isNumber","value","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","i","targetValue","matchIndex","findIndex","sourceValue","objectSync","key","objectMap","getValue","getKey","objectReduce","out","Object","create","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","FlowType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","some","condition","someInstance","find","options","parent","getChildType","name","getChildTypes","getParentOfType","type","getRequired","isWrapper","getWrappedType","isCompatible","other","exact","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","_","getTypeFromPath","getTypeFromStep","hasExpression","e","id","getId","isValidFlow","def","child","EXIT","getContextFor","steps","context","thisType","isDynamic","getInnerExpression","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","validations","validate","validateType","expectedComplex","subject","handler","expected","getSimplifiedType","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","INSTANCE","isOperationTypeFunction","prefix","types","get","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","loop","mutates","complexity","scopeDefaults","forEach","s","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Generic","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","ops","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","has","defaultResult","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","true","false","describe","describer","cache","baseType","register","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","Exprs","getValidateExpression","getCompareExpression","asKey","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","Type","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","arg","Expression","expressions","AndExpression","d","expectedType","directly","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","cloneVar","defined","stringifyVar","keys","join","applyToScope","n","variable","inner","getContextWithScope","STEP_DEFINE","STEP_BODY","defineContext","with","nameOrDefines","exprValue","parse","varName","run","DEFAULT_MAX_ITERATIONS","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","Types","STEP_CONDITION","bodyContext","getContext","BREAK","CONTINUE","do","while","withMax","iterations","chain","ChainExpression","c","append","comment","CommentExpression","part","setLegacy","PathExpression","createForLegacy","GetExpression","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","ConstantExpression","is","LENGTH","CHAR","exprType","NumberType","EnumType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","delete","pairs","clear","toPlainObject","fromPlainObject","c1","c2","CHILD_KEY","CHILD_VALUE","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","described","ZERO","ONE","currentVariable","SetExpression","fromPartial","STEP_PATH","isWritable","READONLY","valueContext","INVALID_EXPRESSION","isMutating","withVariable","pathData","isPath","getPathType","EMPTY_PATH","e0","e1","e2","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","start","end","by","ForExpression","hasBy","hasMax","STEP_START","STEP_END","STEP_BY","startAt","endAt","inc","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","p","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","t","getWildcardType","wilcardProperty","wildcard","object","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","GenericType","base","getFunction","FunctionType","getResolvedType","returns","paramsData","getParamTypesType","inputTypes","getParamTypes","paramName","assign","inputType","paramType","getProvided","getParamType","param","getReturnType","last","getOverloaded","overloaded","typePath","typeParent","resolved","func","CHILD_RETURN","otherParams","resolvedOther","returnsOther","paramsOther","paramTypeOther","paramNameOther","STEP_RETURNS","paramValue","isExpression","fromJsonArguments","args","toJsonArguments","InvokeExpression","contextFunc","argTypes","MISSING_FUNCTION","argName","argType","contextExpression","named","nameOrArgs","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","opTypes","getOperationTypes","getScopedContext","getOperationExpectedTypes","outerContext","paramTypes","scopeParam","scopeType","getOperationInputType","operation","operationTypes","expectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","alias","scoped","FlowExpression","returnValue","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","randomList","flatten","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","requiredMin","required","CHILD_ITEM","TupleType","o","STEP_ITEM","chosenMin","chosenMax","elements","tuple","TupleExpression","ObjectExpression","propExpr","message","AssertExpression","STEP_MESSAGE","captured","aliases","FunctionExpression","hasAliases","getArgumentsAliased","getBodyContext","getCapturedTypes","setCapturedFromContext","findCaptured","setCaptured","inContext","local","p0","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","RETURN","break","continue","exit","switch","assert","zero","one","compareEqual","compareLess","compareGreater","relation","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","SECONDS_IN_MINUTE","HOURS_IN_DAY","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","property","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","CHILD_OPTIONAL","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","r","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","l","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","m","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","innerType","generic","simplify","resolve","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","output","yoptional","yinner","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","parseExpression","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","removeParameter","exists","delayChange","newTest","removed","paramsTypes","getArguments","returnNew","refactor","runtime","cmd","getCommand","EventBase","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","takeKey","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","moveDataset","inside","movable","newDataset","ReferenceData","ReferenceType","CHILD_REFERENCED","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","expressionParsers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getComputedsFor","typeClass","getOperationParamTypes","rawTypes","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","getExpressionKind","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","exprClass","getExpressionInstances","dynamic","export","exported","flowProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getter","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","objectType","AnyOpsTypes","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","mode","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","MergedObjectType","GivenObjectType","paramProps","paramProp","merger","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getFormatter","escaped","getEscaped","content","handled","finalFormatter","formatted","startEscape","endEscape","possibleEscapeIndex","endOffset","DateFormat","Format","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn","addBackwardsCompatibility","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","definition","defineProperty","enumerable","prototype","hasOwnProperty","call","Symbol","toStringTag"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(self, function() {\nreturn ","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is Record<string, any> \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): value is ([] | {} | null | undefined)\n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function now(): number\n{\n  return new Date().getTime();\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<O extends Record<string, any>, M extends Record<keyof O, any>>(\n  map: O, \n  getValue: <K extends keyof O>(value: O[K], key: K) => M[K]): M;\nexport function objectMap<O extends Record<string, any>, M extends Record<string, any>>(\n  map: O, \n  getValue: <K extends keyof O>(value: O[K], key: K) => K extends keyof M ? M[K] : never,\n  getKey?: <K extends keyof O, J extends string>(key: K, value: O[K]) => J): M\n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey ? getKey(key, value) : key] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<O extends Record<string, any>>(\n  map: O, \n  onEach: <K extends keyof O>(value: O[K], key: K, map: O) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<O extends Record<string, any> = any, M = O[keyof O]>(\n  map: O, \n  transform: <K extends keyof O>(value: O[K], key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n  public static some<T>(condition: (value: T) => boolean): Traverser<T, boolean>\n  {\n    return new Traverser<T, boolean>((value, stack, path, traverser) => {\n      if (condition(value)) {\n        traverser.stop(true);\n      }\n    }, false);\n  }\n\n  public static someInstance<T>(construct: { new(): T }): Traverser<T, boolean>\n  {\n    return new Traverser<T, boolean>((value, stack, path, traverser) => {\n      if (value.constructor === construct) {\n        traverser.stop(true);\n      }\n    }, false);\n  }\n\n  public static find<T>(condition: (value: T) => boolean): Traverser<T, T | null>\n  {\n    return new Traverser<T, T | null>((value, stack, path, traverser) => {\n      if (condition(value)) {\n        traverser.stop(value);\n      }\n    }, null);\n  }\n\n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n  OUTSIDE_PATH = 14,          // HIGH\n  READONLY = 15,              // HIGH\n  EMPTY_PATH = 16,            // HIGH\n  INVALID_THIS = 17,          // HIGH\n  MISSING_METHOD = 18,        // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;\n","\n\nexport enum FlowType {\n  CONTINUE = 'continue',\n  BREAK = 'break',\n  RETURN = 'return',\n  EXIT = 'exit'\n}\n","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputFor<T> = TypeClass<Type<T>, T> | Type<T>;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeInputMapFor<T> = {\n  [K in keyof T]: TypeInputFor<T[K]>;\n};\n\nexport type TypeMap = Record<string, Type>;\n\nexport type TypeMapFor<T> = {\n  [K in keyof T]: Type<T[K]>;\n};\n\nexport type TypeChild = string | number;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  isExpression(value: any): value is (Expression | [string, ...any[]]);\n  getData(name: string): ReferenceData | null;\n  setLegacy(): void;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<D, O> = any, D = any, O = any>\n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type<D, O> | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<D = any, O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<D, O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return [];\n  }\n\n  public getParentOfType<T extends Type, R = any>(type: TypeClass<T, R>): T | null\n  {\n    let parent: Type = this.parent;\n\n    while (parent)\n    {\n      if (parent.constructor === type)\n      {\n        return parent as T;\n      }\n\n      parent = parent.parent;\n    }\n\n    return null;\n  }\n\n  public abstract getExactType(value: D): Type;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getWrappedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): value is D;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<D, O>;\n\n  public abstract clone(): Type<D, O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): D;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): D;\n\n  public abstract fromJson(json: any): D;\n\n  public abstract toJson(value: D): any;\n  \n}","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\nimport { FlowType } from \"./FlowType\";\nimport { isFunction } from './fns';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n  getType(data: any, otherwise?: Type): Type;\n  setLegacy(): void;\n}\n\nexport interface ExpressionParser \n{\n  (data: any[], exprs: ExpressionProvider): Expression;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public static INSTANCE = 'instance';\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider, context: Type, thisType?: Type): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public hasExpression(condition: ExpressionClass | ((e: Expression) => boolean)): boolean {\n    return this.traverse(new Traverser<Expression>((e, path, step, traverser) => {\n      if (isFunction(condition) ? condition(e) : condition.id === e.getId()) {\n        traverser.stop(true);\n      }\n    }, false));\n  }\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\n  \n  public abstract mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;\n\n  public isValidFlow(def: DefinitionProvider, type: FlowType, child?: Expression): boolean\n  {\n    return type === FlowType.EXIT\n      ? true\n      : this.parent\n        ? this.parent.isValidFlow(def, type, this)\n        : false;\n  }\n\n  public getContextFor(steps: TraverseStep[], def: DefinitionProvider, context: Type, thisType?: Type): Type\n  {\n    return context;\n  }\n\n  public isDynamic(): boolean\n  {\n    return true;\n  }\n\n  public getInnerExpression(def: DefinitionProvider, context: any, parent?: any): Expression | string | false\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return false;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return true;\n  }\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n  loop?: boolean;\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = [],\n    loop?: boolean\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency,\n      loop\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed \n{\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n  writeable?: {\n    op: string;\n    value: string;\n    newValue: string;\n    params: Record<string, any>;\n  };\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp = this.map[id];\n\n    comp.writeable = { \n      op: op.id,\n      value,\n      newValue,\n      params: params || {},\n    };\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Generic: 'generic',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport interface DataTypeAccessor<T = any>\n{\n  priority: number;\n  isValid(value: any, step: any): boolean;\n  set(value: T, step: any, stepValue: any): void;\n  get(value: T, step: any): any;\n  remove(value: T, step: any): any;\n  has(value: T, step: any): any;\n}\n\nexport interface DataTypeRegistryOperations\n{\n  objectSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): void;\n  objectRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;\n  arrayAdd<T>(arr: T[], item: T): void;\n  arrayRemove<T>(arr: T[], index: number): T;\n  arraySet<T>(arr: T[], index: number, item: T): T;\n}\n\nexport class DataTypeRegistry implements DataTypeRegistryOperations\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n  private accessorList: DataTypeAccessor[];\n\n  public objectSet: DataTypeRegistryOperations['objectSet']\n    = (obj, prop, value) => obj[prop] = value;\n  public objectRemove: DataTypeRegistryOperations['objectRemove']\n    = (obj, prop) => delete obj[prop];\n  public arrayAdd: DataTypeRegistryOperations['arrayAdd']\n    = (arr, item) => arr.push(item);\n  public arrayRemove: DataTypeRegistryOperations['arrayRemove']\n    = (arr, index) => arr.splice(index, 1)[0];\n  public arraySet: DataTypeRegistryOperations['arraySet']\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n    this.accessorList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  public get(value: any, step: any): any\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.get(value, step);\n      }\n    }\n  }\n\n  public set(value: any, step: any, stepValue: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.set(value, step, stepValue);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public remove(value: any, step: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.remove(value, step);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public has<O = false>(value: any, step: any, defaultResult: O = false as unknown as O): boolean | O\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.has(value, step);\n      }\n    }\n\n    return defaultResult;\n  }\n\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\n  {\n    return this.addToPriorityList(this.accessorList, accessor);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<boolean, BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options.true) && isEmpty(type.options.false)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: boolean): Type\n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): value is boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): boolean\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expression.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expression.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return this.expression.mutates(def, arg);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)    \n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null | undefined, null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): value is (null | undefined)\n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): value is any \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isArray, isObject, isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport type DefineVar = string | Record<string, string | number>;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [DefineVar, any]) => [this.cloneVar(name), exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [this.cloneVar(name), defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public static cloneVar(v: DefineVar): DefineVar\n  {\n    return isObject(v) ? { ...v } : v;\n  }\n\n  public static stringifyVar(v: DefineVar): string\n  {\n    return isString(v) ? v : Object.keys(v).sort().join(',');\n  }\n\n  public define: [DefineVar, Expression][];\n  public body: Expression;\n\n  public constructor(define: [DefineVar, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.define.reduce((max, [_, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public applyToScope(scope: TypeMap, name: DefineVar, type: Type)\n  {\n    if (isString(name))\n    {\n      scope[name] = type;\n    }\n    else\n    {\n      for (const n in name)\n      {\n        scope[n] = type.getChildType(name[n]) || AnyType.baseType;\n      }\n    }\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => \n    {\n      this.applyToScope(scope, name, AnyType.baseType);\n    });\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [DefineExpression.cloneVar(name), variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => \n    {\n      this.applyToScope(scope, name, defined.getType(def, context));\n    });\n\n    return this.body.getType(def, context);\n  }\n\n  public getContextFor(steps: TraverseStep[], def: DefinitionProvider, context: Type, thisType?: Type): Type\n  {\n    const inner = def.getContextWithScope(context);\n\n    for (const [name, defined] of this.define) \n    {\n      if (steps[0] === DefineExpression.STEP_DEFINE && steps[1] === DefineExpression.stringifyVar(name)) \n      {\n        break;\n      }\n\n      this.applyToScope(inner.scope, name, defined.getType(def, inner.context));\n    }\n\n    return inner.context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(DefineExpression.stringifyVar(name), defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => DefineExpression.stringifyVar(name) === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      this.applyToScope(defineContext.scope, name, defined.getType(def, defineContext.context));\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [, defined] of this.define)    \n    {\n      if (defined.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.body.mutates(def, arg, directly);\n  }\n\n  public with(name: DefineVar, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue> | Array<[DefineVar, ExpressionValue]>): DefineExpression\n  public with(nameOrDefines: DefineVar | Record<string, ExpressionValue> | Array<[DefineVar, ExpressionValue]>, value?: ExpressionValue): DefineExpression\n  {\n    const add = (name: DefineVar, exprValue: ExpressionValue) =>\n    {\n      const expr = Exprs.parse(exprValue);\n      const existing = this.define.find(([varName]) => DefineExpression.stringifyVar(varName) === DefineExpression.stringifyVar(name));\n\n      if (existing)\n      {\n        existing[1] = expr;\n      }\n      else\n      {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    };\n\n    if (value !== undefined)\n    {\n      add(name, value);\n    }\n    else if (isArray(nameOrDefines))\n    {\n      for (const [name, define] of nameOrDefines)\n      {\n        add(name, define);\n      }\n    }\n    else if (isObject(nameOrDefines))\n    {\n      for (const name in nameOrDefines)\n      {\n        add(name, nameOrDefines[name]);\n      }\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { FlowType } from \"../FlowType\";\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_MAX = 3;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    return expr.maxIterations !== this.MAX_ITERATIONS\n      ? [this.id, expr.condition.encode(), expr.body.encode(), expr.maxIterations]\n      : [this.id, expr.condition.encode(), expr.body.encode()];\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 1 + Math.max(\n      this.condition.getComplexity(def, context), \n      this.body.getComplexity(def, context)\n    );\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public isValidFlow(def: DefinitionProvider, type: FlowType, child?: Expression): boolean\n  {\n    return (child === this.body && (type === FlowType.BREAK || type === FlowType.CONTINUE)) || super.isValidFlow(def, type);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.chain.length\n      ? this.chain[this.chain.length - 1].isDynamic()\n      : false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const link of this.chain)\n    {\n      if (link.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    if (data[INDEX_PATH])\n    {\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\n    }\n    \n    return new GetExpression();\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression();\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<string, TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n\n    DataTypes.addAccessor<string>({\n      priority,\n      isValid: isString,\n      get: (x, step) => x[step],\n      set: (x, step, value) => {},\n      remove: (x, step) => x.substring(0, step) + x.substring(step + 1),\n      has: (x, step) => x[step] !== undefined,\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): value is string \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): string\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare'], [] as never, true),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map'], true),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map'], true),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map'], [] as never, [] as never, [] as never, [] as never, true),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [] as never, [] as never, [] as never, ['object'], true),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual'], [] as never, true),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual'], [] as never, true),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare'], [] as never, true),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare'], [] as never, true),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare'], [] as never, true),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare'], [] as never, true),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions<K = any, V = any> \n{\n  key: Type<K, any>;\n  value: Type<V, any>;\n  constants: Map<K, V>;\n}\n\nexport class EnumType<K = any, V = any> extends Type<V, EnumOptions<K, V>> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static CHILD_KEY = 'key';\n\n  public static CHILD_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType<string, string>({ \n    key: TextType.baseType,\n    value: TextType.baseType,\n    constants: new Map(),\n  });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    switch (name) {\n      case EnumType.CHILD_KEY:\n        return this.options.key;\n      case EnumType.CHILD_VALUE:\n        return this.options.value;\n    }\n\n    return null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return [EnumType.CHILD_KEY, EnumType.CHILD_VALUE];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this.options.value;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): test is V \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next().value;\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static ZERO = new ConstantExpression(0);\n\n  public static ONE = new ConstantExpression(1);\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\nconst NO_VARIABLE = '';\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT]; \n\n    return new SetExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    const path = expr.path.encode();\n    const value = expr.value.encode();\n\n    return expr.currentVariable\n      ? [this.id, path, value, expr.currentVariable]\n      : [this.id, path, value];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = NO_VARIABLE)\n  {\n    return new SetExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = NO_VARIABLE) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    return this.currentVariable\n      ? { [this.currentVariable]: AnyType.baseType }\n      : null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.clone(), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public getContextFor(steps: TraverseStep[], def: DefinitionProvider, context: Type, thisType?: Type): Type\n  {\n    if (steps[0] === SetExpression.STEP_VALUE && this.currentVariable)\n    {\n      return def.getContext(context, this.getScope());\n    }\n    else\n    {\n      return context;\n    }\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      const valueContext = this.currentVariable\n        ? def.getContext(context, {\n            [this.currentVariable]: expectedType,\n          })\n        : context;\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || this.value.mutates(def, arg, directly) || this.path.mutates(def, arg, directly);\n  }\n\n  public to(value: ExpressionValue, currentVariable: string = NO_VARIABLE): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): SetExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { isNumber } from '../fns';\nimport { GetExpression } from './Get';\nimport { ConstantExpression } from './Constant';\nimport { SetExpression } from './Set';\n\n\nconst INDEX_PATH = 1;\n\nexport class PathExpression extends Expression \n{\n\n  public static id = 'path';\n\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \n  {\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\n    \n    return new PathExpression(expressions);\n  }\n\n  public static encode(expr: PathExpression): any \n  {\n    return [this.id, expr.expressions.map((e) => e.encode())];\n  }\n\n  public static createForLegacy(path: Expression[])\n  {\n    for (let i = path.length - 1; i >= 0; i--)\n    {\n      const node = path[i];\n\n      if (node instanceof PathExpression)\n      {\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\n        {\n          path.splice(i, 1, ...node.expressions);\n        }\n      }\n    }\n\n    return new PathExpression(path);\n  }\n\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\n  {\n    const isPath = pathData[0] === PathExpression.id;\n    const path = isPath\n      ? PathExpression.decode(pathData, exprs)\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\n\n    if (isPath) {\n      exprs.setLegacy();\n    }\n\n    return path;\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return PathExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    let max = 0;\n    let thisType = context;\n\n    for (const expr of this.expressions)\n    {\n      const complexity = expr.getComplexity(def, context, thisType);\n\n      if (complexity > max)\n      {\n        max = complexity;\n      }\n\n      thisType = expr.getType(def, context, thisType);\n    }\n\n    return max;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return PathExpression.encode(this);\n  }\n\n  public clone(): PathExpression\n  {\n    return new PathExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.expressions, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    \n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const path = this.expressions;\n\n    if (path.length === 0)\n    {\n      handler({\n        type: ValidationType.EMPTY_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    let thisType = path[0].getType(def, context);\n\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: path[0],\n        parent: this,\n      });\n    }\n    else\n    {\n      path[0].validate(def, context, handler);\n\n      for (let i = 1; i < path.length; i++)\n      {\n        const node = path[i];\n\n        node.validate(def, context, handler, thisType);\n\n        thisType = node.isPathNode()\n          ? node.getType(def, context, thisType)\n          : thisType.getSubType(node, def, context);\n\n        if (!thisType)\n        {\n          handler({\n            type: ValidationType.INVALID_EXPRESSION,\n            severity: ValidationSeverity.HIGH,\n            context,\n            subject: node,\n            parent: this,\n          });\n          \n          break;\n        }\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public isWritable(defs: DefinitionProvider)\n  {\n    return this.expressions.length > 0\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\n      : false;\n  }\n\n  public isMutating(arg: string, directly: boolean = false): boolean\n  {\n    const e0 = this.expressions[0];\n    const e1 = this.expressions[1];\n    const e2 = this.expressions[2]; // tslint:disable-line: no-magic-numbers\n\n    if (!(e0 instanceof GetExpression && e1 instanceof ConstantExpression && e1.value === arg))\n    {\n      return false;\n    }\n\n    return directly ? true : !!e2;\n  }\n\n  public set(value: Expression, currentVariable?: string): SetExpression\n  {\n    return new SetExpression(this.clone(), value, currentVariable);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n\n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider) \n  {\n    const name = data[INDEX_NAME];\n\n    if (data[INDEX_EXPRESSION]) \n    {\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\n    }\n    \n    return new ComputedExpression(name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string) \n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return op ? op.complexity : 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.OUTSIDE_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      if (!def.hasComputed(thisType, this.name))\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject: this,\n        });\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    const comp = defs.getComputed(this.name);\n\n    return !comp || !!comp.writeable;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\nimport { ConstantExpression } from './Constant';\nimport { FlowType } from \"../FlowType\";\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BY = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static STEP_BY = 'by';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const by = exprs.getExpression(data[INDEX_BY]) || new ConstantExpression(1);\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, by, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const data = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasBy = !(expr.by instanceof ConstantExpression) || expr.by.value !== 1;\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (hasBy) {\n      data.push(expr.by.encode());\n    } else if (hasMax) {\n      data.push(1);\n    }\n\n    if (hasMax) {\n      data.push(expr.maxIterations);\n    }\n\n    return data;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public by: Expression;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, by: Expression, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.by = by;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 1 + Math.max(\n      this.start.getComplexity(def, context), \n      this.end.getComplexity(def, context), \n      this.body.getComplexity(def, context), \n      this.by.getComplexity(def, context)\n    );\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.by.clone(), this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public getContextFor(steps: TraverseStep[], def: DefinitionProvider, context: Type, thisType?: Type): Type\n  {\n    if (steps[0] === ForExpression.STEP_BODY)\n    {\n      return def.getContext(context, this.getScope());\n    }\n    else\n    {\n      return context;\n    }\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n      traverse.step(ForExpression.STEP_BY, this.by, (replaceWith) => this.by = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : steps[0] === ForExpression.STEP_BY\n            ? [1, this.by]\n            : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n    this.by.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n    this.validateType(def, context, NumberType.baseType, this.by, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.start.mutates(def, arg, directly) || \n      this.end.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly) || \n      this.by.mutates(def, arg, directly);\n  }\n\n  public isValidFlow(def: DefinitionProvider, type: FlowType, child?: Expression): boolean\n  {\n    return (child === this.body && (type === FlowType.BREAK || type === FlowType.CONTINUE)) || super.isValidFlow(def, type);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, by?: ExpressionValue, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (by)\n    {\n      this.by = Exprs.parse(by);\n      this.by.setParent(this);\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public inc(by: ExpressionValue): ForExpression\n  {\n    this.by = Exprs.parse(by);\n    this.by.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }  \n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], ['initial'], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild, TypeMapFor } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport type ObjectInterface = Record<string, any>;\n\nexport interface ObjectOptions<O extends ObjectInterface> \n{\n  props: TypeMapFor<O>;\n}\n\nexport class ObjectType<D extends ObjectInterface = ObjectInterface, O extends ObjectOptions<D> = ObjectOptions<D>> extends Type<D, O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    const type = new ObjectType<any>({ props: {} });\n\n    cache.set(data, type);\n\n    type.options.props = objectMap(data, d => describer.describe(d));\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n\n    DataTypes.addAccessor<Record<string, any>>({\n      priority,\n      isValid: (value) => isObject(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue),\n      remove: (value, step) => DataTypes.objectRemove(value, step),\n      has: (value, step) => step in value,\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<D>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        (p1 as any)[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key: key as string, value })),\n      {\n        key: new EnumType<string, string>({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map<string, string>(\n            objectValues(this.options.props, (prop, key) => [key as string, key as string]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return this.options.props[name] || null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return Object.keys(this.options.props);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop as string, type, (replaceWith) => this.options.props[prop] = replaceWith, () => DataTypes.objectRemove(this.options.props, prop))\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        if (props[prop].isOptional())\n        {\n          continue;\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.set('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): value is D \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<D, O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<D, O>\n  {\n    return new ObjectType<D, O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n    \n    for (const prop in props)\n    {\n      const propType = props[prop];\n\n      if (propType && !propType.isOptional())\n      {\n        out[prop] = propType.create();\n      }\n    }\n\n    return out;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): D\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key as any];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: D): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<any, string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType(): Type\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n    // return this.getType().getSimplifiedType();\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this.getType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): value is any \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def, context),\n        result.getComplexity(def, context)\n      ), \n      this.otherwise.getComplexity(def, context)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [condition, result] of this.cases)\n    {\n      if (condition.mutates(def, arg, directly) || result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.otherwise.mutates(def, arg, directly);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { FunctionType } from './Function';\nimport { AnyType } from './Any';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_DEFAULT = 2;\n\nexport interface GenericOptions \n{\n  path: TypeChild[];\n  base?: Type;\n}\n\nexport class GenericType extends Type<any, GenericOptions>\n{\n\n  public static id = ID.Generic;\n\n  public static operations = new Operations(ID.Generic + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Generic + ID.Delimiter);\n\n  public static baseType = new GenericType({ path: [] });\n\n  public static decode(data: any[], types: TypeProvider): GenericType \n  {\n    const path = data[INDEX_PATH];\n    const base = data[INDEX_DEFAULT]\n      ? types.getType(data[INDEX_DEFAULT])\n      : undefined;\n\n    return new GenericType({ path, base });\n  }\n\n  public static encode(type: GenericType): any \n  {\n    const path = type.options.path.slice();\n\n    return type.options.base\n      ? [this.id, path, type.options.base.encode()]\n      : [this.id, path];\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getFunction(): FunctionType | null\n  {\n    let parent = this.parent;\n\n    while (parent) \n    {\n      if (parent instanceof FunctionType) \n      {\n        return parent;\n      }\n\n      parent = parent.parent;\n    }\n\n    return null;\n  }\n\n  public getResolvedType(): Type\n  {\n    const { path, base } = this.options;\n    \n    return this.getFunction()?.getTypeFromPath(path) || base || AnyType.baseType;\n  }\n\n  public getId(): string\n  {\n    return GenericType.id;\n  }\n\n  public getOperations()\n  {\n    return this.getResolvedType().getOperations();\n  }\n\n  public merge(type: GenericType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getResolvedType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getResolvedType().getSubTypes(def);\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return this.getResolvedType().getChildType(name);\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return this.getResolvedType().getChildTypes();\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getResolvedType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this.getResolvedType();\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getResolvedType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getResolvedType().isOptional();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getResolvedType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getResolvedType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getResolvedType().getCompareExpression();\n  }\n\n  public isValid(value: any): value is any \n  {\n    return this.getResolvedType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getResolvedType().normalize(value);\n  }\n\n  public newInstance(): GenericType\n  {\n    return new GenericType({ path: [] });\n  }\n\n  public clone(): GenericType\n  {\n    const path = this.options.path.slice();\n    const base = this.options.base?.clone();\n\n    return new GenericType({ path, base });\n  }\n\n  public encode(): any \n  {\n    return GenericType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getResolvedType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getResolvedType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getResolvedType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getResolvedType().toJson(value);\n  }\n\n}\n","\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider, TypeMap, TypeProvider, TypeChild, TypeMapFor } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { isFunction, objectMap, objectEach, isString } from '../fns';\nimport { DataTypes } from '../DataTypes';\nimport { GenericType } from './Generic';\nimport { FunctionExpression } from '../exprs/Function';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_PROPS = 1;\nconst INDEX_RETURN = 2;\n\nexport type FunctionParams = Record<string, any>;\n\nexport type FunctionTypeProvider<T, P extends FunctionParams> = Type<T> | ((params: Partial<TypeMapFor<P>>, types: TypeProvider) => Type<T>);\n\nexport interface FunctionOptions<P extends FunctionParams = any, R = any>\n{\n  params: {\n    [K in keyof P]: FunctionTypeProvider<P[K], P>\n  };\n  returns?: FunctionTypeProvider<R, P>;\n}\n\nexport type FunctionInterface<P extends FunctionParams = any, R = any> = (params: P) => R;\n\nexport type FunctionValue<P extends FunctionParams = any, R = any> = \n  FunctionExpression |\n  FunctionInterface<P, R> |\n  string;\n\nexport class FunctionType<P extends FunctionParams = any, R = any> extends Type<FunctionValue<P, R>, FunctionOptions<P, R>> \n{\n\n  public static STEP_RETURNS = 'returns';\n\n  public static CHILD_RETURN = 'returns';\n\n  public static id = ID.Function;\n\n  public static operations = new Operations(ID.Function + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Function + ID.Delimiter);\n\n  public static baseType = new FunctionType({ params: {} }, null);\n\n  public static decode(data: any[], types: TypeProvider): FunctionType \n  {\n    const params = objectMap(data[INDEX_PROPS], (p) => types.getType(p));\n    const returns = data[INDEX_RETURN]\n      ? types.getType(data[INDEX_RETURN])\n      : undefined;\n    \n    return new FunctionType({ params, returns }, types);\n  }\n\n  public static encode(type: FunctionType): any \n  {\n    const { params, returns } = type.options;\n\n    const paramsData = objectMap(params, p => p instanceof Type ? p.encode() : undefined);\n\n    return returns instanceof Type\n      ? [this.id, paramsData, returns.encode()]\n      : [this.id, paramsData];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public provider: TypeProvider;\n\n  public constructor(options: FunctionOptions<P, R>, provider: TypeProvider)\n  {\n    super(options);\n\n    this.provider = provider;\n  }\n\n  public getParamTypesType(inputTypes: Partial<TypeMapFor<P>> = {}): ObjectType<P>\n  {\n    return new ObjectType({ props: this.getParamTypes(inputTypes) });\n  }\n\n  public getParamTypes(inputTypes: Partial<TypeMapFor<P>> = {}): TypeMapFor<P>\n  {\n    const { params } = this.options;\n    const out: TypeMapFor<P> = Object.create(null);\n\n    Object.assign(out, inputTypes);\n\n    for (const paramName in params)\n    {\n      const inputType = inputTypes[paramName];\n      const paramType = this.getProvided(params[paramName], out);\n\n      if (!inputType || !paramType.acceptsType(inputType))\n      {\n        out[paramName] = paramType;\n      }\n    }\n\n    return out;\n  }\n\n  public getParamType<K extends keyof P>(param: K, inputTypes: Partial<TypeMapFor<P>> = {}): Type<P[K]> | null\n  {\n    return this.getProvided(this.options.params[param], inputTypes);\n  }\n\n  public getReturnType(inputTypes: Partial<TypeMapFor<P>> = {}): Type<R> | null\n  {\n    return this.getProvided(this.options.returns, inputTypes);\n  }\n\n  public getProvided<T>(provider: FunctionTypeProvider<T, P>, inputTypes?: Partial<TypeMapFor<P>>): Type<T>\n  public getProvided<T>(provider: FunctionTypeProvider<T, P> | undefined, inputTypes?: Partial<TypeMapFor<P>>): Type<T> | null\n  public getProvided<T>(provider: FunctionTypeProvider<T, P>, inputTypes: Partial<TypeMapFor<P>> = {}): Type<T> | null\n  {\n    return provider instanceof Type\n      ? provider\n      : typeof provider === 'function' \n        ? provider(inputTypes, this.provider)\n        : null;\n  }\n\n  public getTypeFromPath(path: TypeChild[], inputTypes: TypeMap = {}): Type | null\n  {\n    let last: Type = inputTypes[path[0]] instanceof Type\n      ? inputTypes[path[0]]\n      : this.getChildType(path[0]);\n\n    for (let i = 1; i < path.length; i++)\n    {\n      last = last?.getChildType(path[i]);\n    }\n\n    return last || null;\n  }\n\n  public getOverloaded(inputTypes: TypeMap = {}): FunctionType\n  {\n    const overloaded = this.clone();\n\n    overloaded.traverse(new Traverser((type, typePath, typeParent, traverser) => \n    {\n      if (type instanceof GenericType)\n      {\n        while (type && type instanceof GenericType)\n        {\n          const resolved = overloaded.getResolvedType(type, inputTypes);\n\n          if (resolved === type)\n          {\n            break;\n          }\n          else\n          {\n            type = resolved;\n          }\n        }\n\n        if (type)\n        {\n          traverser.replace(type);\n        }\n      }\n    }));\n\n    return overloaded;\n  }\n\n  public getResolvedType(type: GenericType, inputTypes: Partial<TypeMapFor<P>> = {}): Type\n  {\n    const { path, base } = type.options;\n\n    let resolved = this.getTypeFromPath(path, inputTypes);\n\n    if (resolved === type)\n    {\n      return base;\n    }\n\n    let func: FunctionType = this;\n\n    while (!resolved)\n    {\n      func = func.getParentOfType(FunctionType);\n\n      if (!func)\n      {\n        break;\n      }\n\n      resolved = func.getTypeFromPath(path, inputTypes);\n    }\n\n    return resolved || base;\n  }\n\n  public getId(): string\n  {\n    return FunctionType.id;\n  }\n\n  public getOperations()\n  {\n    return {};\n  }\n\n  public merge(type: FunctionType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    const params = this.getParamTypes();\n\n    if (name === FunctionType.CHILD_RETURN)\n    {\n      return this.getReturnType(params);\n    }\n\n    return params[name] || null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    const { params } = this.options;\n\n    return Object.keys(params).concat(FunctionType.CHILD_RETURN);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof FunctionType))\n    {\n      return false;\n    }\n\n    const otherParams = other.getParamTypes();\n    const resolved = this.getOverloaded(otherParams);\n    const resolvedOther = other.getOverloaded();\n    const { params, returns } = resolved.options;\n    const { params: paramsOther, returns: returnsOther } = resolvedOther.options;\n\n    if (Boolean(returns) !== Boolean(returnsOther))\n    {\n      return false;\n    }\n\n    if (!(returns as Type).isCompatible(returnsOther as Type, options))\n    {\n      return false; \n    }\n    \n    for (const paramName in params)\n    {\n      if (!params[paramName])\n      {\n        continue;\n      }\n\n      if (!(paramName in paramsOther) && (options.exact || !(params[paramName] as Type).isOptional()))\n      {\n        return false;\n      }\n\n      const paramType = params[paramName];\n      const paramTypeOther = paramsOther[paramName];\n\n      if (!(paramType as Type).isCompatible(paramTypeOther as Type, options))\n      {\n        return false;\n      }\n    }\n\n    for (const paramNameOther in paramsOther)\n    {\n      if (!paramsOther[paramNameOther])\n      {\n        continue;\n      }\n      \n      if (!params[paramNameOther] && (options.exact || !(paramsOther[paramNameOther] as Type).isOptional()))\n      {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<A>(traverse: Traverser<Type, A>): A\n  {\n    const { params } = this.options;\n\n    return traverse.enter(this, () => \n    {\n      objectEach(params, (type, paramName) => \n      {\n        const paramType = this.getProvided(type);\n        \n        if (paramType)\n        {\n          traverse.step(paramName as string, paramType, (replaceWith) => DataTypes.objectSet(params, paramName, replaceWith), () => DataTypes.objectRemove(params, paramName))\n        }\n      });\n\n      const returnType = this.getReturnType();\n\n      if (returnType)\n      {\n        traverse.step(FunctionType.STEP_RETURNS, returnType, (replaceWith) => DataTypes.objectSet(this.options, 'returns', replaceWith), () => DataTypes.objectRemove(this.options, 'returns'));\n      }\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    const { params, returns } = this.options;\n    const param = params[step];\n\n    return step === FunctionType.STEP_RETURNS\n      ? returns instanceof Type\n        ? returns\n        : null\n      : param instanceof Type\n        ? param\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    const { params, returns } = this.options;\n\n    for (const paramName in params)\n    {\n      const paramValue = params[paramName];\n\n      if (paramValue instanceof Type)\n      {\n        paramValue.setParent(this);\n      }\n    }\n\n    if (returns && returns instanceof Type)\n    {\n      returns.setParent(this);\n    }\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { params, returns } = this.options;\n\n    for (const paramName in params)\n    {\n      const paramValue = params[paramName];\n\n      if (paramValue instanceof Type)\n      {\n        paramValue.removeDescribedRestrictions();\n      }\n    }\n\n    if (returns && returns instanceof Type)\n    {\n      returns.removeDescribedRestrictions();\n    }\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public isValid(value: any): value is FunctionValue<P, R>\n  {\n    return isFunction(value) || \n      isString(value) || \n      this.provider.isExpression(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.provider.isExpression(value)\n      ? this.provider.getExpression(value)\n      : value;\n  }\n\n  public newInstance(): FunctionType\n  {\n    return new FunctionType({ params: {} }, this.provider);\n  }\n\n  public clone(): FunctionType\n  {\n    return new FunctionType({\n      params: objectMap(this.options.params, \n        (p) => p instanceof Type ? p.clone(): p\n      ),\n      returns: this.options.returns instanceof Type \n        ? this.options.returns.clone() \n        : this.options.returns,\n    }, this.provider);\n  }\n\n  public encode(): any \n  {\n    return FunctionType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJsonArguments(json: any): any\n  {\n    const { params } = this.options;\n    const args: any = {};\n\n    for (const paramName in params) {\n      const paramType = params[paramName];\n\n      if (paramType instanceof Type && paramName in json) {\n        args[paramName] = paramType.fromJson(json[paramName]);\n      }\n    }\n\n    return args;\n  }\n\n  public toJsonArguments(args: any): any\n  {\n    const { params } = this.options;\n    const json: any = {};\n\n    for (const paramName in params) {\n      const paramType = params[paramName];\n\n      if (paramType instanceof Type && paramName in args) {\n        json[paramName] = paramType.fromJson(args[paramName]);\n      }\n    }\n\n    return json;\n  }\n\n  public fromJson(json: any): FunctionValue<P, R>\n  {\n    return this.provider.isExpression(json)\n      ? this.provider.getExpression(json)\n      : json;\n  }\n\n  public toJson(value: FunctionValue<P, R>): any\n  {\n    return value instanceof Expression\n      ? value.encode()\n      : value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\nimport { ObjectInterface, ObjectType } from '../types/Object';\nimport { FunctionType } from '../types/Function';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getFunction(def: DefinitionProvider, context: Type, thisType?: Type): { type: FunctionType, expression?: Expression } | null\n  {\n    if (this.name)\n    {\n      const contextFunc = context.getChildType(this.name);\n\n      if (contextFunc instanceof FunctionType)\n      {\n        return { type: contextFunc };\n      }\n      else\n      {\n        return def.getFunction(this.name);\n      }\n    }\n    else if (thisType instanceof FunctionType)\n    {\n      return { type: thisType };\n    }\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type, thisType?: Type): number\n  {\n    const func = this.getFunction(def, context, thisType);\n\n    return func?.expression\n      ? func.expression.getComplexity(def, context, thisType)\n      : 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    const func = this.getFunction(def, context, thisType);\n\n    if (!func)\n    {\n      return null;\n    }\n\n    const args = objectMap(this.args, (a) => a.getType(def, context));\n\n    if (!func.type)\n    {\n      return func.expression?.getType(def, new ObjectType({ props: args }));\n    }\n    \n    const overloaded = func.type.getOverloaded(args);\n    const returns = overloaded.getReturnType();\n\n    if (returns)\n    {\n      return returns;\n    }\n\n    if (func.expression)\n    {\n      return func.expression.getType(def, overloaded.getParamTypesType());\n    }\n\n    return null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args ,arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    const func = this.getFunction(def, context, thisType);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n      const resolved = func.type.getOverloaded(argTypes);\n      const paramTypes = resolved.getParamTypes();\n\n      objectEach<ObjectInterface>(paramTypes, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && func.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false; \n  }\n\n  public getInnerExpression(def: DefinitionProvider, context: any, parent?: any): Expression | string | false\n  {\n    const contextExpression = context[this.name];\n    const expression = parent instanceof Expression\n      ? parent\n      : contextExpression instanceof Expression\n        ? contextExpression\n        : def.getFunction(this.name)?.expression;\n\n    if (!expression)\n    {\n      return 'Function does not exist';\n    }\n\n    return expression;\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { EntityType } from '../types/Entity';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\nimport { ObjectInterface } from '../types/Object';\n\n\nconst INDEX_ENTITY = 1;\nconst INDEX_NAME = 2;\nconst INDEX_ARGS = 3;\n\nexport class MethodExpression extends Expression \n{\n\n  public static id = 'method';\n\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \n  {\n    const entity = data[INDEX_ENTITY];\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new MethodExpression(entity, name, args);\n  }\n\n  public static encode(expr: MethodExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.entity, expr.name, args];\n  }\n\n  public entity: string;\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(entity: string, name: string, args: ExpressionMap) \n  {\n    super();\n    this.entity = entity;\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return MethodExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity || !entity.methods[this.name])\n    {\n      return 0;\n    }\n\n    return entity.methods[this.name].expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return MethodExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      return null;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return null;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return null;\n    }\n    \n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    argTypes[Expression.INSTANCE] = entity.type;\n    \n    return method.getReturnType(def, context, argTypes);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args, arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      handler({\n        type: ValidationType.INVALID_THIS,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      handler({\n        type: ValidationType.MISSING_METHOD,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const params: TypeMap = {};\n\n    params[Expression.INSTANCE] = entity.type;\n\n    objectEach<ObjectInterface>(method.type.options.params, (param, paramName) =>\n    {\n      const arg = this.args[paramName];\n\n      this.validateType(def, context, param, arg, handler);\n\n      if (arg)\n      {\n        params[paramName] = arg.getType(def, context);\n      }\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return false;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && method.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getInnerExpression(def: DefinitionProvider, context: any, parent?: any): Expression | string | false\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return `Entity \"${this.entity}\" does not exist`;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\n    }\n\n    return method.expression;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public named(name: string): MethodExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): MethodExpression\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\nimport { FlowType } from \"../FlowType\";\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public getContextFor(steps: TraverseStep[], def: DefinitionProvider, context: Type, thisType?: Type): Type\n  {\n    const op = def.getOperation(this.name);\n    const opTypes = def.getOperationTypes(this.name)\n\n    if (op && opTypes && op.hasScope.indexOf(name) !== -1) \n    {\n      return this.getScopedContext(def, context);\n    }\n\n    return context;\n  }\n\n  public getParamTypes(def: DefinitionProvider, context: Type): TypeMap\n  {\n    return def.getOperationExpectedTypes(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public getScopedContext(def: DefinitionProvider, outerContext: Type): Type\n  {\n    const op = def.getOperation(this.name);\n    const opTypes = def.getOperationTypes(this.name)\n    \n    if (!op || !opTypes)\n    {\n      return outerContext;\n    }\n\n    const paramTypes = this.getParamTypes(def, outerContext);\n    const { context, scope } = def.getContextWithScope(outerContext);\n\n    for (const scopeParam of op.scope) \n    {\n      const scopeType = def.getOperationInputType(opTypes.scope[scopeParam], paramTypes);\n\n      if (scopeType) \n      {\n        const alias = this.scopeAlias[scopeParam] || scopeParam;\n\n        scope[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const { name, params } = this;\n    const operation = def.getOperation(name);\n\n    if (!operation)\n    {\n      return false;\n    }\n\n    for (const paramName in params)\n    {\n      const paramType = params[paramName];\n\n      if (paramType.mutates(def, arg, directly) || (paramType instanceof PathExpression && paramType.isMutating(arg, true) && operation.mutates.indexOf(paramName) !== -1))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public isValidFlow(def: DefinitionProvider, type: FlowType): boolean\n  {\n    const operation = def.getOperation(name);\n\n    if (operation && operation.loop && (type === FlowType.BREAK || type === FlowType.CONTINUE))\n    {\n      return true;\n    }\n\n    return super.isValidFlow(def, type);\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { FlowType } from '../FlowType';\n\n\nconst INDEX_TYPE = 1;\nconst INDEX_VALUE = 2;\n\nexport class FlowExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'flow';\n\n  public static decode(data: any[], exprs: ExpressionProvider): FlowExpression \n  {\n    const type = data[INDEX_TYPE];\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new FlowExpression(type, value);\n  }\n\n  public static encode(expr: FlowExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, expr.type, returnValue]\n      : [this.id, expr.type];\n  }\n\n  public type: FlowType;\n  public value: Expression;\n\n  public constructor(type: FlowType, value: Expression) \n  {\n    super();\n    this.type = type;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return FlowExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.value.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.value.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return FlowExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new FlowExpression(this.type, this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(FlowExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === FlowExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.value.mutates(def, arg, directly);\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def, context), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def, context)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def, context), \n        this.defaultCase.getComplexity(def, context)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    if (this.value.mutates(def, arg, directly))\n    {\n      return true;\n    }\n\n    for (const [tests, result] of this.cases)\n    {\n      if (result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n\n      for (const test of tests)\n      {\n        if (test.mutates(def, arg, directly))\n        {\n          return true;\n        }\n      }\n    }\n\n    return this.defaultCase.mutates(def, arg, directly);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const param in this.params)\n    {\n      if (this.params[param].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { FlowType } from \"../FlowType\";\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_MAX = 3;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    return expr.maxIterations !== this.MAX_ITERATIONS\n      ? [this.id, expr.condition.encode(), expr.body.encode(), expr.maxIterations]\n      : [this.id, expr.condition.encode(), expr.body.encode()];\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 1 + Math.max(\n      this.condition.getComplexity(def, context), \n      this.body.getComplexity(def, context)\n    );\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public isValidFlow(def: DefinitionProvider, type: FlowType, child?: Expression): boolean\n  {\n    return (child === this.body && (type === FlowType.BREAK || type === FlowType.CONTINUE)) || super.isValidFlow(def, type);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list'], true),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], [] as never, true),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list'], true),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list'], true),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list'], true),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list'], true),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list'], true),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list'], true),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list'], true),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list'], true),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list'], true),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where'], [] as never, true),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list'], true),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  flatten: ops.set('flatten', {}, ['list'], [], [], [], ['list'], true),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText'], [] as never, true),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list'], true),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list'], true),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list'], true),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list'], true),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list'], true),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce'], true),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare'], [] as never, true),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue'], true),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue'], true),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue'], true),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join'], true),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join'], true),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join'], true),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join'], true),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join'], true),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value'], [] as never, true),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], [] as never, true),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], [] as never, true),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare'], [] as never, true),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare'], [] as never, true),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare'], [] as never, true),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare'], [] as never, true),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions<I = any> \n{\n  item: Type<I>;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType<I = any> extends Type<I[], ListOptions<I>> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static CHILD_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    const type = new ListType({\n      item: AnyType.baseType,\n      min: data.length,\n      max: data.length\n    });\n\n    cache.set(data, type);\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    type.options.item = item;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<any[]>({\n      priority,\n      isValid: (value) => isArray(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\n      remove: (value, step) => DataTypes.arrayRemove(value, step),\n      has: (value, step) => value[step] !== undefined,\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    switch (name) {\n      case ListType.CHILD_ITEM:\n        return this.options.item;\n    }\n    \n    return null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return [ListType.CHILD_ITEM];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): value is I[] \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport type TupleOptions<E extends any[]> = \n  unknown extends E\n  ? Type[]\n  : { [K in keyof E]: Type<E[K]> };\n\nexport class TupleType<E extends any[] = any> extends Type<E, TupleOptions<E>>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: Type<E, TupleOptions<E>>): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return this.options[name] || null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return this.options.map((_, i) => i);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.set('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): value is E\n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType<E>\n  {\n    return new TupleType([]) as any as TupleType<E>;\n  }\n\n  public clone(): TupleType<E>\n  {\n    return new TupleType(this.options.map(e => e.clone())) as any as TupleType<E>;\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): E\n  {\n    return this.options.map(e => e.create()) as E;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): E\n  {\n    return this.options.map((e, i) => e.fromJson(json[i])) as E;\n  }\n\n  public toJson(value: E): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    for (const prop in this.props)\n    {\n      const propExpr = this.props[prop];\n\n      if (propExpr && propExpr.isDynamic())\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => DataTypes.objectRemove(this.props, prop))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const prop in this.props)\n    {\n      if (this.props[prop].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NoExpression } from './No';\nimport { NullType } from '../types/Null';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_CONDITION = 1;\nconst INDEX_MESSAGE = 2;\n\nexport class AssertExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n  public static STEP_MESSAGE = 'message';\n\n  public static id = 'assert';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AssertExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const message = exprs.getExpression(data[INDEX_MESSAGE]) || NoExpression.instance;\n    \n    return new AssertExpression(condition, message);\n  }\n\n  public static encode(expr: AssertExpression): any \n  {\n    return expr.message === NoExpression.instance\n      ? [this.id, expr.condition.encode()]\n      : [this.id, expr.condition.encode(), expr.message.encode()];\n  }\n\n  public condition: Expression;\n  public message: Expression;\n\n  public constructor(condition: Expression, message: Expression = NoExpression.instance) \n  {\n    super();\n    this.condition = condition;\n    this.message = message;\n  }\n\n  public getId(): string\n  {\n    return AssertExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.condition.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AssertExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AssertExpression(this.condition.clone(), this.message.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(AssertExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(AssertExpression.STEP_MESSAGE, this.message, (replaceWith) => this.message = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === AssertExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === AssertExpression.STEP_MESSAGE\n        ? [1, this.message]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.message.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    if (this.message !== NoExpression.instance) {\n      this.validateType(def, context, TextType.baseType, this.message, handler);\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || this.message.mutates(def, arg, directly);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isEmpty, isNumber, isObject, isString } from '../fns';\nimport { Type, TypeChild, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\nimport { FunctionType } from '../types/Function';\nimport { GetExpression } from './Get';\nimport { ConstantExpression } from './Constant';\nimport { ObjectType } from '../types/Object';\n\n\nconst INDEX_TYPE = 1;\nconst INDEX_BODY = 2;\nconst INDEX_CAPTURED = 3;\nconst INDEX_ALIASES = 4;\n\nexport class FunctionExpression extends Expression \n{\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'func';\n\n  public static decode(data: any[], exprs: ExpressionProvider): FunctionExpression \n  {\n    const type = exprs.getType(data[INDEX_TYPE]) as FunctionType;\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const captured = isArray(data[INDEX_CAPTURED]) ? data[INDEX_CAPTURED].slice() : [];\n    const aliases = isObject(data[INDEX_ALIASES]) ? data[INDEX_ALIASES] : undefined;\n    \n    return new FunctionExpression(type, body, captured, aliases);\n  }\n\n  public static encode(expr: FunctionExpression): any \n  {\n    const hasAliases = !isEmpty(expr.aliases);\n    const out = [\n      this.id, \n      expr.type.encode(), \n      expr.body.encode()\n    ];\n\n    if (expr.captured.length > 0 || hasAliases) {\n      out.push(expr.captured.slice());\n    }\n    if (hasAliases) {\n      out.push({ ...expr.aliases });\n    }\n\n    return out;\n  }\n\n  public type: FunctionType;\n  public body: Expression;\n  public captured: TypeChild[];\n  public aliases?: Record<string, string>;\n\n  public constructor(type: FunctionType, body: Expression, captured: TypeChild[] = [], aliases?: Record<string, string>) \n  {\n    super();\n\n    this.type = type;\n    this.body = body;\n    this.captured = captured;\n    this.aliases = aliases;\n  }\n\n  public getId(): string\n  {\n    return FunctionExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.body.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return FunctionExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new FunctionExpression(this.type.clone(), this.body.clone(), this.captured.slice(), DataTypes.copy(this.aliases));\n  }\n\n  public getArgumentsAliased(): TypeMap\n  {\n    const args = this.type.getParamTypes();\n    \n    if (this.aliases)\n    {\n      for (const argName in this.aliases)\n      {\n        const aliasName = this.aliases[argName];\n\n        args[aliasName] = args[argName];\n        delete args[argName];\n      }\n    }\n\n    return args;\n  }\n\n  public getBodyContext(def: DefinitionProvider, context: Type): Type\n  {\n    const props: TypeMap = {\n      ...this.getArgumentsAliased(),\n      ...this.getCapturedTypes(context),\n    };\n\n    return new ObjectType({ props });\n  }\n\n  public setCapturedFromContext(context: Type): void\n  {\n    this.captured = this.findCaptured( (child) => Boolean(context.getChildType(child)) );\n  }\n\n  public setCaptured(inContext: (child: TypeChild) => boolean): void\n  {\n    this.captured = this.findCaptured(inContext);\n  }\n\n  public getCapturedTypes(context: Type): TypeMap\n  {\n    return this.captured.reduce(\n      (out, name) => {\n        out[name] = context.getChildType(name);\n\n        return out;\n      },\n      Object.create(null) as TypeMap,\n    );\n  }\n\n  public findCaptured(inContext: (child: TypeChild) => boolean): TypeChild[]\n  {\n    const local = this.getArgumentsAliased();\n    const captured: Record<TypeChild, true> = {};\n\n    this.body.traverse(new Traverser((expr) => \n    {\n      if (expr instanceof PathExpression)\n      {\n        const path = expr.expressions;\n        const p0 = path[0];\n        const p1 = path[1];\n        \n        if (p0 instanceof GetExpression && \n           p1 instanceof ConstantExpression && \n           !(p1.value in local) && \n           (isString(p1.value) || isNumber(p1.value)) &&\n           inContext(p1.value))\n        {\n          captured[p1.value] = true;\n        }\n      }\n    }));\n\n    return Object.keys(captured);\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    return thisType ? this.type : this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(FunctionExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === FunctionExpression.STEP_BODY\n      ? [1, this.body]\n      : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const args = this.type.getParamTypes();\n    const resolved = this.type.getOverloaded(args);\n\n    if (resolved.getReturnType())\n    {\n      const bodyContext = this.getBodyContext(def, context);\n\n      this.validateType(def, bodyContext, resolved.getReturnType(), this.body, handler);\n    }\n\n    this.body.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const { body, type } = this;\n    const args = type.getParamTypes();\n\n    for (const argName in args)\n    {\n      if (body.mutates(def, argName, false))\n      {\n        return true;\n      }\n    }\n\n    return false; \n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    return this.body;\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { PathExpression } from './exprs/Path';\nimport { FlowExpression } from './exprs/Flow';\nimport { FlowType } from \"./FlowType\";\nimport { SetExpression } from './exprs/Set';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type, TypeChild } from './Type';\nimport { AssertExpression } from './exprs/Assert';\nimport { FunctionExpression } from './exprs/Function';\nimport { FunctionType } from './types/Function';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Record<string, ExpressionValue>, ExpressionMap>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, by: ExpressionValue = new ConstantExpression(1), maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, this.parse(by), maxIterations));\n  }\n\n  public static get(): GetExpression\n  public static get(...path: ExpressionValue[]): PathExpression\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\n  {\n    return path.length === 0\n      ? new GetExpression()\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\n  }\n\n  public static computed(name: string): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static func(type: FunctionType, body: Expression, captured: TypeChild[] = [], aliases?: Record<string, string>): FunctionExpression\n  {\n    return this.setParent(new FunctionExpression(type, body, captured, aliases));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): MethodExpression\n  {\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static path(...exprs: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\n      ? exprs[0]\n      : new PathExpression(this.parse(exprs)));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): FlowExpression\n  {\n    return this.setParent(new FlowExpression(FlowType.RETURN, this.parse(value)));\n  }\n\n  public static break(): FlowExpression\n  {\n    return this.setParent(new FlowExpression(FlowType.BREAK, NoExpression.instance));\n  }\n\n  public static continue(): FlowExpression\n  {\n    return this.setParent(new FlowExpression(FlowType.CONTINUE, NoExpression.instance));\n  }\n\n  public static exit(value: ExpressionValue = NoExpression.instance): FlowExpression\n  {\n    return this.setParent(new FlowExpression(FlowType.EXIT, this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, maxIterations));\n  }\n\n  public static assert(condition: Expression, message: ExpressionValue = NoExpression.instance)\n  {\n    return this.setParent(new AssertExpression(condition, this.parse(message)));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<number, NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): value is number \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0);\n  y.setFullYear(y.getFullYear(), month, 1);\n  y.setHours(0, 0, 0, 0);\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\n\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\n\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\n\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\n\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\n\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\n\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\n\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\n\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\n\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\n\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\n\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\n\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\n\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\n\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\n\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\n\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\n\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\n\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\n\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\n\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\n\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\n\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\n\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\n\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\n\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\n\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\n\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\n\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\n\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\n\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<Date, DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): value is Date \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): Date \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): Date\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Date\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<any, Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return this.options[name] || null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return this.options.map((_, i) => i);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): value is any \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions<K = any, V = any>\n{\n  key: Type<K>;\n  value: Type<V>;\n}\n\nexport class MapType<K = any, V = any> extends Type<Map<K, V>, MapOptions<K, V>> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static CHILD_KEY = 'key';\n\n  public static CHILD_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType<string, any>({ \n    key: TextType.baseType,\n    value: AnyType.baseType\n  });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = types.getType(data[INDEX_KEY], TextType.baseType);\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    const type = new MapType({ key, value });\n\n    cache.set(data, type);\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    type.options.key = key;\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<Map<any, any>>({\n      priority,\n      isValid: (value) => isMap(value),\n      get: (value, step) => value.get(step),\n      set: (value, step, stepValue) => value.set(step, stepValue),\n      remove: (value, step) => value.delete(step),\n      has: (value, step) => value.has(step),\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    switch (name) {\n      case MapType.CHILD_KEY:\n        return this.options.key;\n      case MapType.CHILD_VALUE:\n        return this.options.value;\n    }\n\n    return null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return [MapType.CHILD_KEY, MapType.CHILD_VALUE];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): test is Map<K, V> \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop in map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport type OptionalInterface<T> = T | undefined | null;\n\nexport class OptionalType<T = any> extends Type<OptionalInterface<T>, Type<T>>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static CHILD_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return name === OptionalType.CHILD_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return [OptionalType.CHILD_OPTIONAL];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): value is OptionalInterface<T>\n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType<T>\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType<T>\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): OptionalInterface<T>\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): OptionalInterface<T>\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): OptionalInterface<T>\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: OptionalInterface<T>): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<any, Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return this.options[name] || null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return this.options.map((_, i) => i);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): value is any \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions<Color>\n{\n  hasAlpha?: boolean;\n}\n\nexport class ColorType extends ObjectType<Color, ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): ColorType | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): value is Color \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [] as never, [] as never, [] as never, ['set'], true),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test'], [] as never, [] as never, [] as never, [] as never, true),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set'], true),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set'], true),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test'], [] as never, [] as never, [] as never, [] as never, true),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test'], [] as never, [] as never, [] as never, [] as never, true),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test'], [] as never, [] as never, [] as never, [] as never, true),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test'], [] as never, [] as never, [] as never, [] as never, true),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test'], [] as never, [] as never, [] as never, [] as never, true),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test'], [] as never, [] as never, [] as never, [] as never, true),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      created, \n      updated,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, prop);\n      DataTypes.objectSet(this.transcoders, newProp, transcoder);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        DataTypes.objectSet(instance, prop, this.instances.reduce((a, b) => isNumber(b[prop]) ? Math.max(a, b[prop]) : a, 0) + 1);\n        break;\n      case EntityPrimaryType.UUID:\n        DataTypes.objectSet(instance, prop, Entity.uuid());\n        break;\n    }\n  }\n\n  public takeKey(run: Runtime, instance: any): any\n  {\n    this.setKey(instance);\n\n    return this.getKey(run, instance);\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    DataTypes.objectSet(this.indexes, name, index);\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    DataTypes.objectRemove(this.indexes, name);\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      DataTypes.objectRemove(this.indexes, name);\n      DataTypes.objectSet(this.indexes, newName, index);\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    DataTypes.objectSet(this.transcoders, prop, transcoder);\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, name);\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    DataTypes.objectSet(this.methods, method.name, method);\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      DataTypes.objectRemove(this.methods, name);\n      DataTypes.objectSet(this.methods, newName, method);\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      DataTypes.objectRemove(this.methods, name);\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions<V> \n{\n  value: Type<V>;\n}\n\nexport class SetType<V = any> extends Type<Set<V>, SetOptions<V>>\n{\n\n  public static STEP_VALUE = 'value';\n\n  public static CHILD_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    const type = new SetType({ value });\n\n    cache.set(data, type);\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return name === SetType.CHILD_VALUE\n      ? this.options.value\n      : null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return [SetType.CHILD_VALUE];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): test is Set<V>\n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<V>): Set<V>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<V>): Array<V>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.values()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeClass, TypeResolved, TypeProvider, TypeInputFor, TypeInputMapFor } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\nimport { EntityType } from './types/Entity';\nimport { GenericType } from './types/Generic';\nimport { FunctionType } from './types/Function';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static entity(name: string, types: TypeProvider)\n  {\n    return new EntityType(name, types);\n  }\n\n  public static enum<K = any, V = any>(value: TypeInputFor<V>, key: TypeInputFor<K> = TextType as any, constants: MapInput = new Map<K, V>([]))\n  {\n    return this.setParent(new EnumType<K, V>({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType<string, string>({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list<I = any>(item: TypeInputFor<I>, min?: number, max?: number)\n  {\n    return this.setParent(new ListType<I>({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map<K = string, V = any>(value: TypeInputFor<V>, key: TypeInputFor<K> = TextType as any)\n  {\n    return this.setParent(new MapType<K, V>({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object<O = any>(props: TypeInputMapFor<O> = Object.create(null))\n  {\n    return this.setParent(new ObjectType<O>({ \n      props: objectMap(props, (v) => this.parse(v)),\n    }));\n  }\n\n  public static optional<T = any>(type: TypeInputFor<T>): Type<T | undefined | null>\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set<V = any>(value: TypeInputFor<V>)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple<E extends any[]>(types: TypeInputMapFor<E>): TupleType\n  public static tuple<E extends any[]>(...types: TypeInputMapFor<E>): TupleType\n  public static tuple<E extends any[]>(...types: TypeInputMapFor<E> | [TypeInputMapFor<E>]): TupleType<E>\n  {\n    return this.setParent(new TupleType<E>(\n      (isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))) as any\n    ));\n  }\n\n  public static generic(path: string[], base?: Type): GenericType\n  {\n    return this.setParent(new GenericType({ path, base }));\n  }\n\n  public static func<P = any, R = any>(types: TypeProvider, params: TypeInputMapFor<P>, returns?: TypeInputFor<R>): FunctionType<P, R>\n  {\n    return this.setParent(new FunctionType<P, R>({\n      params: objectMap(params, (p) => this.parse(p)),\n      returns: returns ? this.parse(returns) : undefined,\n    }, types));\n  }\n\n  public static parse<V = any>(input: TypeInputFor<V>): Type<V>\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n  public static coalesce(input: Type[], otherwise: Type = NullType.baseType): Type\n  {\n    let optional = true;\n    const output: Type[] = [];\n\n    for (const x of input)\n    {\n      if (!optional) break;\n      \n      if (x) \n      {\n        let xoptional = x instanceof OptionalType;\n        const xinner = xoptional ? x.options as Type : x;\n\n        if (xinner instanceof ManyType) \n        {\n          xinner.options.forEach((y) => \n          {\n            const yoptional = y instanceof OptionalType;\n            const yinner = yoptional ? y.options as Type : y;\n\n            xoptional = xoptional || yoptional;\n\n            if (!output.some(t => t.exactType(yinner))) {\n              output.push(yinner);\n            }\n          });\n        }\n\n        optional = optional && xoptional;\n\n        if (!output.some(t => t.exactType(xinner))) \n        {\n          output.push(xinner);\n        }\n      }\n    }\n\n    return output.length > 1\n      ? optional\n        ? Types.optional(new ManyType(output))\n        : new ManyType(output)\n      : output.length === 1\n        ? optional\n          ? Types.optional(output[0])\n          : output[0]\n        : otherwise;\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  private listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { arraySync, isNumber, now } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\nimport { FunctionType } from './types/Function';\nimport { FunctionExpression } from './exprs/Function';\nimport { FlowExpression } from './exprs/Flow';\nimport { Traverser } from './Traverser';\nimport { FlowType } from './FlowType';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  type: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      type: Types.func(defs, {}, Types.null()),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public type: FunctionType;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, FunctionType);\n    this.expression = this.parseExpression(defs, options.expression);\n    this.defaults = this.type.fromJsonArguments(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.type.fromJsonArguments(t.args) }));\n  }\n\n  protected parseExpression(defs: Definitions, expr: any): FunctionExpression\n  {\n    let e = defs.getExpression(expr);\n\n    if (!e.traverse(Traverser.some((c) => c instanceof FlowExpression && c.type === FlowType.RETURN))) \n    {\n      e = new FlowExpression(FlowType.RETURN, e);\n    }\n\n    return e instanceof FunctionExpression\n      ? e\n      : new FunctionExpression(this.type, e);\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = options instanceof Func\n        ? options.type\n        : defs.getTypeKind(options.type, FunctionType);\n      this.expression = options instanceof Func\n        ? options.expression\n        : this.parseExpression(defs, options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.type.fromJsonArguments(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.type.fromJsonArguments(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, created, updated, description, meta, type, expression, defaults, tests } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      description, \n      meta,\n      type: type.encode(),\n      expression: expression.encode(),\n      defaults: type.toJsonArguments(defaults),\n      tests: tests.map((t) => ({ ...t, args: type.toJsonArguments(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const params = this.type.options.params;\n    const paramType = params[name];\n\n    if (paramType)\n    {\n      DataTypes.objectSet(params, newName, paramType);\n      DataTypes.objectRemove(params, name);\n\n      if (name in this.defaults)\n      {\n        DataTypes.objectSet(this.defaults, newName, this.defaults[name]);\n        DataTypes.objectRemove(this.defaults, name);\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const params = this.type.options.params;\n    const exists = name in params;\n\n    if (exists)\n    {\n      DataTypes.objectRemove(params, name);\n      DataTypes.objectRemove(this.defaults, name);\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, context: Type, paramsTypes: TypeMap = {}) \n  {\n    return this.type.getOverloaded(paramsTypes).getReturnType() || this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): TypeMap\n  {\n    return this.type.getParamTypes();\n  }\n\n  public getParamType(param: string): Type | null\n  {\n    const paramType = this.type.getParamType(param);\n\n    return paramType\n      ? paramType.isOptional() && \n        param in this.defaults && \n        paramType.isValid(this.defaults[param])\n        ? paramType.getRequired()\n        : paramType\n      : null;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.type.getParamType(prop);\n\n      if (propType && !propType.getRequired().isValid(target[prop]))\n      {\n        DataTypes.objectSet(target, prop, DataTypes.copy(this.defaults[prop]));\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    if (!(arg in this.type.options.params))\n    {\n      return false;\n    }\n\n    return this.expression.mutates(def, arg, false);\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap, now } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n\n  /**\n   * When the relation was created.\n   */\n  public created: number;\n\n  /**\n   * When the relation was last updated.\n   */\n  public updated: number;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.updated = options.updated || now();\n    this.created = options.created || now();\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.updated = options.updated || now();\n      this.created = options.created || now();\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, created, updated,\n      kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      updated,\n      created,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber, now } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n  moveDataset(program: Program, dataset: ProgramDataSet, from: number, to: number): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now(),\n        updated: now(),\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public moveDataset(dataset: ProgramDataSet | number, to: number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n    const inside = to >= 0 && to < this.datasets.length;\n    const movable = exists && inside;\n\n    if (movable)\n    {\n      const data = this.datasets[index];\n\n      this.datasets.splice(index, 1);\n      this.datasets.splice(to, 0, data);\n\n      this.trigger('moveDataset', this, data, index, to);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return movable;\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: Partial<ProgramDataSet>, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n\n      DataTypes.arrayRemove(this.datasets, index);\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { now } from './fns';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, created, updated, meta, dataType, data } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<any, string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static CHILD_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getChildType(name: TypeChild): Type | null\n  {\n    return name === ReferenceType.CHILD_REFERENCED\n      ? this.getType()\n      : null;\n  }\n\n  public getChildTypes(): TypeChild[]\n  {\n    return [ReferenceType.CHILD_REFERENCED];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): value is any \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, isString, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap, ExpressionParser } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\n  changedMethods(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public expressionParsers: Record<string, ExpressionParser>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  private legacy: boolean = false;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.expressionParsers = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  public isLegacy(): boolean\n  {\n    return this.legacy;\n  }\n\n  public setLegacy(): void\n  {\n    this.legacy = true;\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(completeData: any): Type\n  {\n    const described: Map<any, any> = new Map();\n\n    const provider: TypeDescribeProvider = \n    {\n      describe: (data) => \n      {\n        let describedType = described.get(data);\n\n        if (describedType !== undefined) \n        {\n          return describedType;\n        }\n\n        for (const describer of this.describers)\n        {\n          describedType = describer.describe(data, provider, described);\n    \n          if (describedType)\n          {\n            return describedType;\n          }\n        }\n\n        return AnyType.baseType;\n      },\n      merge: (type, data) => \n      {\n        return this.merge(type, data);\n      },\n    };\n\n    return provider.describe(completeData);\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    const methods = this.getMethodReferences(name);\n\n    methods.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = methodOptions instanceof Func \n      ? methodOptions \n      : Func.create(this, methodOptions);\n\n    const existing = entity.methods[method.name];\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(method, this);\n      }\n      else\n      {\n        entity.addMethod(method);\n      }\n      \n      this.trigger('updateMethod', this, method, entity);\n    }\n    else\n    {\n      entity.addMethod(method);\n\n      this.trigger('addMethod', this, method, entity);\n    }\n\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsExpressionReference<MethodExpression>[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    const oldName = method.name;\n\n    entity.renameMethod(oldName, newName);\n\n    const refs = this.getMethodReferences(entity, method);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    method.trigger('renamed', method, oldName);\n    method.changed();\n\n    this.trigger('renameMethod', this, method, entity, oldName);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsExpressionReference<MethodExpression>[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsExpressionReference<MethodExpression>[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\n    {\n      return false;\n    }\n\n    entity.removeMethod(method.name);\n\n\n    this.trigger('removeMethod', this, method, entity);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>): T | null \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T): T \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    if (path.length === 0)\n    {\n      return null;\n    }\n\n    let thisType = path[0].getType(this, context);\n\n    if (!thisType)\n    {\n      return null;\n    }\n\n    let optional = thisType.isOptional();\n\n    for (let i = 1; i < stopBefore; i++)\n    {\n      const node = path[i];\n\n      thisType = node.isPathNode()\n        ? node.getType(this, context, thisType)\n        : thisType.getSubType(node, this, context);\n\n      if (!thisType)\n      {\n        return null;\n      }\n\n      optional = optional || thisType.isOptional();\n    }\n\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n    this.expressionParsers[expr.id] = (data, exprs) => expr.decode(data, exprs);\n  }\n\n  public getExpressionKind<E extends Expression>(value: any, kind: ExpressionClass<E>): E | null \n  public getExpressionKind<E extends Expression>(value: any, kind: ExpressionClass<E>, otherwise: E): E\n  public getExpressionKind<E extends Expression>(value: any, kind: ExpressionClass<E>, otherwise: E | null = null): E | null \n  {\n    const parsed = this.getExpression(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const parser = this.expressionParsers[value[0]];\n      \n      if (!parser)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return parser(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public isExpression(value: any): value is (Expression | [string, ...any[]])\n  {\n    return value instanceof Expression || (isArray(value) && isString(value[0]) && value[0] in this.expressions);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsExpressionReference<MethodExpression>[]\n  {\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\n    const methodName = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.type.getReturnType();\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.type.getParamTypesType(),\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.type.getReturnType();\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.type.getParamTypesType(),\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.type,\n        source: [func],\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.type,\n          source: [entity, method],\n        });\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      // TODO context should include closured variables\n      instances.push({\n        context: func.type.getParamTypesType(),\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.type.getParamTypesType(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$flow';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public flowProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.flowProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.flowProperty = this.flowProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : value instanceof Expression\n        ? this.getCommand(value, provider)\n        : () => value;\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { FunctionType } from '../types/Function';\nimport { GenericType } from '../types/Generic';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AssertExpression } from '../exprs/Assert';\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { FunctionExpression } from '../exprs/Function';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { MethodExpression } from '../exprs/Method';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { PathExpression } from '../exprs/Path';\nimport { FlowExpression } from '../exprs/Flow';\nimport { SetExpression } from '../exprs/Set';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    FunctionType,\n    GenericType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    AssertExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    FunctionExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    MethodExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    PathExpression,\n    FlowExpression,\n    SetExpression, \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    SetExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray, objectMap } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType, ObjectOptions } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName },\n    { initial: (i, provider) => {\n      if (i.name instanceof EntityType) {\n        const type = i.name.getType();\n        if (type instanceof ObjectType) {\n          const objectType = type as ObjectType<any, ObjectOptions<any>>;\n          \n          return Types.object(objectMap(objectType.options.props, (value) => Types.optional(value.clone())));\n        }\n      }\n\n      return ObjectType.baseType;\n    }}\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => Types.coalesce([i.a, i.b, i.c, i.d, i.e]),\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","import { Type, TypeInput, TypeMap } from \"../../Type\";\nimport { ObjectType } from \"../../types/Object\";\nimport { EntityType } from \"../../types/Entity\";\nimport { EnumType } from \"../../types/Enum\";\nimport { ManyType } from \"../../types/Many\";\nimport { Types } from \"../../Types\";\nimport { OptionalType } from \"../../types/Optional\";\n\n\n\nexport function MergedObjectType(types: Type[]): ObjectType\n{\n    const props: TypeMap = {};\n\n    for (const type of types) \n    {\n        const objectType = GivenObjectType(type, undefined, MergedObjectType);\n        \n        if (objectType instanceof ObjectType) \n        {\n            const paramProps = objectType.options.props;\n\n            for (const prop in paramProps) \n            {\n                const paramProp = paramProps[prop];\n\n                if (prop in props && paramProp instanceof OptionalType) \n                {\n                    props[prop] = Types.mergeMany([paramProp, props[prop]]);\n                } \n                else \n                {\n                    props[prop] = paramProp;\n                }\n            }\n        }\n    }\n\n    return new ObjectType({ props });\n}\n\nexport function GivenObjectType(type?: Type, otherwise?: TypeInput, merger?: (multiple: Type[]) => Type): TypeInput\n{\n    return type instanceof ObjectType \n        ? type \n        : type instanceof EntityType \n            ? type.getType()\n            : type instanceof EnumType\n                ? GivenObjectType(type.options.value, otherwise)\n                : type instanceof ManyType && type.options.some((e) => GivenObjectType(e)) && merger\n                    ? merger(type.options.filter((e) => GivenObjectType(e)))\n                    : type instanceof OptionalType\n                        ? GivenObjectType(type.options, otherwise)\n                        : otherwise;\n}\n  ","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { GivenObjectType, MergedObjectType } from './helpers';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list, ListType);\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value, ListType);\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  flatten: ops.setTypes(ListOps.flatten,\n    (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n      ? GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n      : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\n        ? MergedObjectType(i.list.options.filter((e) => GivenObjectType(e, undefined, MergedObjectType)))\n        : ObjectType,\n    { list: (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n        ? i.list\n        : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\n          ? i.list\n          : ListType\n    }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    ObjectType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { MergedObjectType } from './helpers';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => MergedObjectType(['a', 'b', 'c', 'd', 'e'].map(k => i[k])),\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number;\n  formats: FormatterMap<T>;\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  };\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this;\n  public add(key: string, formatter: Formatter<T>): this;\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      if (formatter)\n      {\n        this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n      }\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter;\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n}\n","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}","import { Definitions } from '../Definitions';\nimport { Expression } from '../Expression';\nimport { FlowExpression } from '../exprs/Flow';\nimport { FlowType } from \"../FlowType\";\nimport { PathExpression } from '../exprs/Path';\nimport { SetExpression } from '../exprs/Set';\n\n\nexport function addBackwardsCompatibility(def: Definitions)\n{\n  const RETURN_ID = 'return';\n  const SUB_ID = 'sub';\n  const UPDATE_ID = 'up';\n  const UPDATE_CURRENT = 'current';\n\n  const i0 = 0;\n  const i1 = 1;\n  const i2 = 2;\n  const i3 = 3;\n\n  def.expressionParsers[RETURN_ID] = (data, exprs) => {\n    exprs.setLegacy();\n\n    return FlowExpression.decode([data[i0], FlowType.RETURN, data[1]], exprs);\n  };\n\n  def.expressionParsers[UPDATE_ID] = (data, exprs) => {\n    exprs.setLegacy();\n\n    return SetExpression.decode([data[i0], data[i1], data[i2], data[i3] || UPDATE_CURRENT], exprs);\n  };\n\n  def.expressionParsers[SUB_ID] = (data, exprs) => {\n    const value: Expression = exprs.getExpression(data[i1]);\n    const path: Expression[] = data[i2].map((part: any) => exprs.getExpression(part));\n\n    exprs.setLegacy();\n\n    return PathExpression.createForLegacy([value, ...path]);\n  };\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(961);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}