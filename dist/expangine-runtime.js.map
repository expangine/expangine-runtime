{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Type.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./Entity.ts","webpack://[name]/./Relation.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","traverse","getInner","pop","step","getStep","isTraversable","getResult","newResult","replaceWith","canRemove","canReplace","construct","filter","pass","traverser","list","slice","options","parent","other","exact","isWrapper","isCompatible","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","newValue","to","node","getPath","getValueChangeExpression","getRootType","type","_","stop","getTypeFromStep","getTypeFromPath","ValidationSeverity","ValidationType","getRootExpression","getExpressionFromStep","steps","expr","getExpressionFromPath","def","context","validations","validate","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","getRequired","acceptsType","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","start","subjects","forEach","getSubType","INVALID_EXPRESSION","isOperationTypeFunction","Operations","prefix","types","id","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","op","returnType","Computeds","comp","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","BooleanComputeds","BooleanOps","set","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","DataTypeRegistry","compareTypes","createTypeMap","index","compareMap","equalsMap","copyList","jsonList","comparator","xtype","ytype","compares","compare","less","more","addToPriorityList","equalitor","equals","equality","containsCycles","copiers","copied","setObjectCopy","original","copy","copyObject","existing","copier","copierCopy","copyValue","parsers","jsonObject","parser","toJson","json","fromJson","TYPES","sort","priority","DataTypes","INDEX_OPTIONS","RANDOM_TRUE_PROBABILITY","data","describer","baseType","addCompare","addEquals","operations","enter","asKey","true","false","encode","rnd","computeds","describePriority","registered","INDEX_EXPR","expression","super","exprs","getExpression","getComplexity","clone","STEP_NOT","setParent","validateType","INDEX_EXPRESSIONS","expressions","e","splice","expectedType","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","null","instance","$any","string","INDEX_DEFINE","INDEX_BODY","body","defined","variable","getContextWithScope","STEP_DEFINE","STEP_BODY","defineContext","nameOrDefines","append","parse","find","varName","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","INDEX_CONDITION","INDEX_BREAK","INDEX_MAX","condition","breakVariable","maxIterations","parseInt","MAX_ITERATIONS","hasMax","getScope","STEP_CONDITION","bodyContext","getContext","iterations","INDEX_CHAIN","chain","INDEX_COMMENT","comment","INDEX_NAME","INDEX_EXPRESSION","getComputed","getOperation","getComputedReturnType","STEP_EXPRESSION","hasComputed","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_MIN","RANDOM_MAX","RANDOM_CHARACTERS","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","has","delete","keys","pairs","clear","count","toPlainObject","fromPlainObject","INDEX_KEY","INDEX_VALUE","INDEX_CONSTANTS","getOperations","c1","c2","merge","getSubTypes","isSimple","STEP_KEY","STEP_VALUE","getCreateExpression","getValidateExpression","getCompareExpression","transformKey","constantValue","normalize","newInstance","firstKey","next","INDEX_CONSTANT","constant","described","describe","removeDescribedRestrictions","INDEX_VARIABLE","INDEX_START","INDEX_END","end","STEP_START","STEP_END","INDEX_PATH","part","getPathType","validatePath","nodeValue","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","INDEX_PROPS","addJson","reader","writer","addCopier","newObject","getCompare","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","run","hasFrom","hasTo","random","propType","subvalue","provider","getExactType","STEP_ENTITY","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","INDEX_CASES","INDEX_OTHERWISE","cases","otherwise","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","INDEX_ARGS","args","func","getFunction","argTypes","getReturnType","arg","param","paramName","MISSING_FUNCTION","nameOrArgs","argName","INDEX_PARAMS","INDEX_SCOPE","scopeAlias","getOperationReturnType","operation","operationTypes","getOperationTypes","MISSING_OPERATION","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","scoped","alias","returnValue","STEP_PATH","valueType","INDEX_OP","INDEX_DEFAULT_CASE","defaultCase","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","testValue","bodyValue","INDEX_TEMPLATE","template","nameOrParams","DEFAULT_CURRENT","INDEX_CURRENT","currentVariable","valueContext","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","INDEX_ITEM","REQUIRED_SUB_MIN","item","at","bt","dl","al","newArray","itemOrClass","some","requiredMin","required","STEP_ITEM","val","chosenMin","chosenMax","INDEX_ELEMENTS","elements","tuple","simplify","force","autoSetParent","targetType","createOnMissing","opId","getId","vars","with","const","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","getTime","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","now","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","INDEX_MANY","many","ops","subType","subs","forMany","casting","cast","if","than","else","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","INDEX_TYPE","RANDOM_CHANCE","STEP_OPTIONAL","valueMissing","testMissing","compareEqual","compareLess","compareGreater","INDEX_NOT","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","named","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","ColorSpace","code","formatMap","formats","toColor","fromColor","ColorSpaceRGB","setToColor","color","setFromColor","addFormat","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","setType","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","componentProps","hasAlpha","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","setValue","newSet","avalues","bvalues","trues","falses","text","resolve","innerType","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","explode","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","LinkedNode","prev","linkAfter","curr","isRemoved","EntityKeyType","EntityPrimaryType","RelationKind","RelationCascade","event","payload","listeners","getListeners","results","listener","nodes","off","on","defs","description","meta","getTypeKind","defaults","hasChanges","addTest","removeTest","updateTest","trigger","changed","newName","paramType","exists","delayChange","newTest","assign","removed","paramsTypes","getParamType","returnNew","runtime","cmd","getCommand","instances","methods","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","method","addMethod","removeMethod","updated","sync","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","decode","encodedType","primary","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","newProp","updateIndex","indexName","getPrimary","PRIMARY","getDynamicPrimaryKey","UUID","forProperty","enumForText","getPropertyType","getEncodedPropertyTypes","getDecodedPropertyTypes","getProperties","getEncodedValue","encoder","getDecodedType","getPropertyTypeFor","getDecodeExpected","defaultType","any","getDecodedValue","decoder","overrideValueType","getEncodedType","getEncodeExpected","separator","delimiter","returnDynamic","PRIMARY_TYPES","previous","int","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","pair","encodeTypePair","renameReference","withName","getRelatedWithName","removeReference","renamePropReference","removePropReference","getEntityProps","typesResolved","subjectName","local","itemType","getItemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","relation","HAS_MANY","BELONGS_TO","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","typeProps","propTypesList","getPropTypes","FOREIGN","oneRelationName","manyRelationName","one","foreignKeyPrefix","relatedProps","subjectProps","hasMany","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","created","datasets","addDataset","removeDataset","updateDataset","dataset","newDataset","STEP_REFERENCED","keyAt","valueAt","combine","all","includes","old","newKey","reset","toPairs","ak","av","bk","bv","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","reindex","move","obj","iterator","passed","isNamedArray","sourceOptions","targetKey","sourceKey","namedInput","valid","rekey","nameOf","typeList","describers","entities","functions","relations","programs","number","toObject","deepCopy","encodeMap","addType","sortDescribers","addExpression","import","delaySort","register","found","entity","dataOptions","dataInput","stopWithReferences","getDataReferences","oldName","rename","refs","ref","funcOptions","programOptions","program","programInput","entityOptions","relationOptions","entityName","subjectRelation","getSubjectRelation","relatedRelation","getRelatedRelation","getTypeProps","relationInput","getRelationReferences","entityInput","getEntityReferences","renameProp","removeProp","getEntityDataReferences","dataTransform","getValueChangeAt","funcInput","getFunctionReferences","renameParameter","removeParameter","Error","getBaseTypes","typeName","getOperationInputType","typeClass","getTypes","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeTarget","scopeParam","scopeType","scopedContext","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForType","getOperationMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnType","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","getParamTypes","canStore","getEncodeContext","getDecodeContext","exported","syncManual","addData","removeData","addFunction","removeFunction","addEntity","removeEntity","addRelation","removeRelation","addProgram","removeProgram","returnProperty","DEFAULT_RETURN_PROPERTY","impl","eval","GetNamedType","GetName","getEntities","GetTypeRelation","getRelations","relationName","GetRelation","typeRelation","enum","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","setTypes","AnyOpsTypes","checkType","xoptional","xinner","yoptional","yinner","exactType","truthy","falsy","forItem","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","once","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","escaped","startEscape","endEscape","possibleEscapeIndex","endOffset","content","cache","getEscaped","handled","finalFormatter","formatted","getFormatter","DateFormat","M","Mo","locale","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","do","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAQ,qBAAuBD,IAE/BD,EAAK,qBAAuBC,IAR9B,CASGK,OAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,+BC1E9C,SAASC,EAASf,GAEvB,MAAwB,iBAAVA,GAAsBgB,SAAShB,GAGxC,SAASiB,EAASjB,GAEvB,MAAwB,iBAAVA,EAGT,SAASkB,EAAiBlB,GAE/B,OAAOmB,MAAMD,QAAQlB,GAGhB,SAASoB,EAAOpB,GAErB,OAAOA,aAAiBqB,KAGnB,SAASC,EAAYtB,GAE1B,OAAOA,aAAiBuB,IAGnB,SAASC,EAASxB,GAEvB,OAAOA,aAAiByB,IAGnB,SAASC,EAAU1B,GAExB,MAAwB,kBAAVA,EAGT,SAAS2B,EAAW3B,GAEzB,MAAwB,mBAAVA,EAGT,SAAS4B,EAAS5B,GAEvB,MAAwB,iBAAVA,GAAgC,OAAVA,IAAmBmB,MAAMD,QAAQlB,GAGhE,SAAS6B,EAAY7B,GAE1B,YAAwB,IAAVA,EAGT,SAAS8B,EAAYC,EAAQC,GAElC,OAAOD,EAAEE,cAAgBD,EAAEC,YAGtB,SAASC,EAAQC,EAAWC,EAAkB,MAEnD,OAAOC,KAAKC,IAAIH,EAAIE,KAAKE,MAAMJ,KAAOC,EAGjC,SAASI,EAAQxC,GAEtB,GAAIkB,EAAQlB,GAEV,OAAwB,IAAjBA,EAAMyC,OAEV,GAAIb,EAAS5B,GAClB,CACE,IAAK,MAAM0C,KAAS1C,EAElB,OAAO,EAGT,OAAO,EAGT,OAAOA,QAGF,SAAS2C,EAAMR,EAAWS,EAAaC,GAE5C,OAAOV,EAAIS,EAAMA,EAAMT,EAAIU,EAAMA,EAAMV,EAGlC,SAASW,EAAwBC,GAEtC,OAAI7B,EAAQ6B,GAEH,IAAIxB,IAAIwB,GAERzB,EAAMyB,GAENA,EAEAnB,EAASmB,GAET,IAAIxB,IAAIyB,EAAcD,EAAO,CAACE,EAAGC,IAAM,CAACA,EAAGD,KAG7C,IAAI1B,IAGN,SAAS4B,EAAiBC,GAE/B,OAAO,IAAI7B,IAAIJ,MAAMkC,KAAKD,EAAIE,WAAWF,IAAI,EAAEF,EAAGD,KAAO,CAACA,EAAGC,KAGxD,SAASK,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGA,MAAMC,EAAQL,EAAOL,IAAI,KAAM,GAE/B,IAAK,IAAIrE,EAAIyE,EAAOf,OAAS,EAAG1D,GAAK,EAAGA,IACxC,CACE,MAAMgF,EAAcP,EAAOzE,GACrBiF,EAAaP,EAAOQ,UAAWC,GAAgBR,EAAQK,EAAaG,KAEtD,IAAhBF,GAEFH,EAAOL,EAAQzE,EAAGgF,EAAaN,EAAOO,IAEtCF,EAAME,IAAc,GAIpBJ,EAAOJ,EAAQzE,EAAGgF,GAItB,IAAK,IAAIhF,EAAI,EAAGA,EAAI0E,EAAOhB,OAAQ1D,IAE5B+E,EAAM/E,IAET4E,EAAIH,EAAQC,EAAO1E,IAIvB,OAAOyE,EAGF,SAASW,EACdX,EACAC,EACAE,EACAC,EACAC,GAGD,IAAK,MAAMvD,KAAOkD,EAEVlD,KAAOmD,GAEXG,EAAOJ,EAAQlD,EAAKkD,EAAOlD,IAI/B,IAAK,MAAMA,KAAOmD,EAEZnD,KAAOkD,EAETK,EAAOL,EAAQlD,EAAKkD,EAAOlD,GAAMmD,EAAOnD,IAIxCqD,EAAIH,EAAQlD,EAAKmD,EAAOnD,IAI3B,OAAOkD,EAGF,SAASY,EACdhB,EACAiB,EACAC,EAAkC,CAAEhE,GAAQA,IAE5C,OAAOiE,EAAanB,EAAK,CAACpD,EAAOM,EAAKkE,KACnCA,EAAIF,EAAOhE,EAAKN,IAAUqE,EAASrE,EAAOM,GAAMkE,GACjD/E,OAAOY,OAAO,OAGX,SAASoE,EACdrB,EACAsB,GAEA,OAAOH,EAAanB,EAAK,CAACpD,EAAOM,IAC/BoE,EAAO1E,EAAOM,EAAK8C,QACnBuB,GAGG,SAASC,EACdxB,EACAyB,EAAqC,CAAE5B,GAAMA,IAE7C,OAAOsB,EAAanB,EAAK,CAACpD,EAAOM,EAAKkE,KACnCA,EAAIM,KAAKD,EAAU7E,EAAOM,IAAOkE,GAClC,IAGG,SAASD,EACdnB,EACA2B,EACAC,GAEA,IAAK,MAAM1E,KAAO8C,EAEhB4B,EAAUD,EAAO3B,EAAI9C,GAAMA,EAAK0E,GAGlC,OAAOA,EAGF,SAASC,EAAqCC,EAAYb,GAE/D,MAAMG,EAAM/E,OAAOY,OAAO,MAE1B,IAAK,IAAItB,EAAI,EAAGA,EAAImG,EAAMzC,OAAQ1D,IAClC,CACE,MAAMoG,EAAOD,EAAMnG,GAEnByF,EAAIW,GAAQd,EAASc,EAAMpG,GAG7B,OAAOyF,EAGF,SAASxB,EAAyCI,EAAmBgC,GAE1E,MAAMC,EAAW,GAEjB,IAAK,MAAM/E,KAAO8C,EAEhBiC,EAAIP,KAAKM,EAAQhC,EAAI9C,GAAMA,IAG7B,OAAO+E,EAIF,SAASC,EAAYnD,EAAOoD,GAEjC,YAAaZ,IAANxC,EAAkBoD,EAAIpD,EAGxB,SAASqD,EAAUrD,EAAWM,EAAgBgD,EAAgBhD,GAEnE,OAAOiD,EAAIvD,EAAI,GAAIM,EAAQ,KAAK,GAAMkD,UAAW,EAAGF,GAG/C,SAASC,EAAIvD,EAAWM,EAAgBmD,EAAiBC,GAE9D,KAAO1D,EAAEM,OAASA,GAEhBoD,EAAS1D,EAAIyD,EAAUzD,EAAIA,GAAQyD,EAGrC,OAAOzD,EAGF,SAAS,EAASA,GAEvB,OAAOjB,EAAQiB,IAAMP,EAASO,GAC1B2D,KAAKC,UAAU5D,GACfA,EAAI,G,OC5QH,MAAM6D,EAAqC,OAIrCC,EAA4C,OAclD,MAAM,EAgBX,YAAmBC,EAAkCC,GAH9C,KAAAvC,OAAyBoC,EACzB,KAAAI,QAA8BH,EAInCI,KAAKH,SAAWA,EAChBG,KAAKC,MAAQ,GACbD,KAAKE,KAAO,GACZF,KAAKG,SAAU,EACfH,KAAKI,OAASN,EAnBT,qBAAwBhE,GAE7B,OAAOA,GAAKR,EAAWQ,EAAEuE,UAoBpB,MAAM1G,EAAU2G,GAErB,OAAIN,KAAKG,QAEAH,KAAKI,QAGdJ,KAAKH,SAASlG,EAAOqG,KAAKC,MAAOD,KAAKE,KAAMF,MAE5CA,KAAKzC,OAASoC,EACdK,KAAKD,QAAUH,EAEXU,IAAaN,KAAKG,UAEpBH,KAAKC,MAAMxB,KAAK9E,GAEhB2G,IAEAN,KAAKC,MAAMM,OAGNP,KAAKI,QAGP,KAAKI,EAAoBC,EAAuCV,EAA8BH,EAAqBrC,EAAyBoC,GAEjJ,OAAIK,KAAKG,QAEAH,MAGTA,KAAKE,KAAKzB,KAAK+B,GAEfR,KAAKzC,OAASA,EACdyC,KAAKD,QAAUA,EAEX,EAAUW,cAAiBD,GAE7BA,EAAQJ,SAASL,MAIjBS,IAGFT,KAAKE,KAAKK,MAEHP,MAGF,OAAOW,GAEZ,MAAMC,EAAYD,EAAUX,KAAKI,QAOjC,YALkB9B,IAAdsC,IAEFZ,KAAKI,OAASQ,GAGTZ,KAGF,KAAKI,GAIV,OAFAJ,KAAKI,OAASA,EAEPJ,KAGF,YAEL,OAAOA,KAAKI,OAGP,gBAAgBS,GAErB,MAAMtD,EAASyC,KAAKc,YACdf,EAAUC,KAAKe,aAErB,SAAKxD,IAAWwC,KAIhBxC,EACIyC,KAAKzC,SACLyC,KAAKD,QAAQzE,EAAWuF,GAAeA,IAAgBA,IAEpD,GAGF,YAEL,OAAOb,KAAKzC,SAAWoC,EAGlB,aAEL,OAAOK,KAAKD,UAAYH,EAGnB,YAAYoB,EAAwClB,EAAmBE,KAAKI,QAEjF,OAAOJ,KAAKiB,OAAQtH,GAAaA,EAAMiC,cAAgBoF,EAAWlB,GAG7D,OAAOoB,EAA2DpB,EAAmBE,KAAKI,QAQ/F,OAAO,IAAI,EAN8B,CAACzG,EAAOsG,EAAOC,EAAMiB,KACxDD,EAAKvH,EAAOsG,EAAOC,IACrBF,KAAKH,SAASlG,EAAOsG,EAAOC,EAAMiB,IAIDrB,GAGhC,cAEL,MAAMsB,EAA4B,GAElC,OAAO,IAAI,EAAU,CAACzH,EAAOsG,EAAOC,KAClCkB,EAAK3C,KAAK,CACR9E,QACAsG,MAAOA,EAAMoB,QACbnB,KAAMA,EAAKmB,WAEZD,GAGE,eAEL,OAAO,IAAI,EAAU,CAACzH,EAAOsG,EAAOC,EAAMiB,IAAcA,EAAUf,SAAU,IC5GzE,MAAe,EAMpB,YAAmBkB,GAFZ,KAAAC,OAAe,KAIpBvB,KAAKsB,QAAUA,EAiBV,cAEL,OAAOtB,KAGF,YAEL,OAAO,EAKF,aAAawB,EAAaF,EAAiC,IAEhE,OAAIE,IAAUxB,SAKTsB,EAAQG,QAASD,EAAME,cAAe1B,KAAK2B,aAAaH,EAAMI,oBAAqBN,OAKpFA,EAAQO,SAAWpG,EAAYuE,KAAMwB,KAAWxB,KAAK8B,sBAKlD9B,KAAK+B,iBAAiBP,EAAOF,IAG5B,oBAER,OAAO,EAGF,YAAYE,GAEjB,OAAOxB,KAAK2B,aAAaH,EAAO,CAAEK,QAAQ,IAGrC,YAAYL,GAEjB,OAAOxB,KAAK2B,aAAaH,EAAO,CAAEK,QAAQ,EAAMlI,OAAO,IAGlD,UAAU6H,GAEf,OAAOxB,KAAK2B,aAAaH,EAAO,CAAEC,OAAO,EAAMI,QAAQ,IAGlD,UAAUL,GAEf,OAAOxB,KAAK2B,aAAaH,EAAO,CAAEC,OAAO,EAAMI,QAAQ,EAAMlI,OAAO,IAmB/D,yBAAyBqI,EAAsBhF,EAAqBiF,GAEzE,OAAOD,EAGF,iBAAiBA,GAEtB,IAAIE,EAAalC,KAAKuB,OACtB,MAAMrB,EAAOF,KAAKmC,UAElB,KAAMD,GACN,CACE,MAAM1B,EAAON,EAAKK,MAElByB,EAAWE,EAAKE,yBAAyBJ,EAAUxB,EAAMA,GACzD0B,EAAOA,EAAKX,OAGd,OAAOS,EAGF,UAEL,OAAOhC,KAAKqC,cAAchC,SAAS,IAAI,EAAU,CAACiC,EAAMC,EAAGrC,EAAMiB,KAE3DmB,IAAStC,MAEXmB,EAAUqB,KAAKtC,EAAKmB,YAKnB,gBAAgBnB,GAErB,GAAoB,IAAhBA,EAAK9D,OAEP,OAAO4D,KAGT,MAAMsC,EAAOtC,KAAKyC,gBAAgBvC,EAAK,IAEvC,OAAKoC,EAKEA,EAAKI,gBAAgBxC,EAAKmB,MAAM,IAH9B,KAMJ,gBAAgBb,GAErB,OAAO,KAGF,cAEL,IAAI0B,EAAalC,KAEjB,KAAOkC,EAAKX,QAEVW,EAAOA,EAAKX,OAGd,OAAOW,GCvOX,IAAYS,EAOAC,GAPZ,SAAYD,GAEV,iBACA,uBACA,mBAJF,CAAYA,MAAkB,KAO9B,SAAYC,GAEV,2CACA,qCACA,+CACA,+CACA,2CACA,+CACA,6CACA,6CACA,mCACA,sDACA,4CACA,8CACA,oCAdF,CAAYA,MAAc,KCWnB,MAAe,EAAtB,cAGS,KAAArB,OAAqB,KAoBrB,UAEL,OAAOvB,KAAK6C,oBAAoBxC,SAAS,IAAI,EAAU,CAACiC,EAAMC,EAAGrC,EAAMiB,KAEjEmB,IAAStC,MAEXmB,EAAUqB,KAAKtC,EAAKmB,YAKnB,sBAAsBnB,GAE3B,GAAoB,IAAhBA,EAAK9D,OAEP,OAAO4D,KAGT,MAAMQ,EAAOR,KAAK8C,sBAAsB5C,GAExC,IAAKM,IAASA,EAAK,GAEjB,OAAO,KAGT,MAAOuC,EAAOC,GAAQxC,EAEtB,OAAOwC,EAAKC,sBAAsB/C,EAAKmB,MAAM0B,IAGxC,sBAAsBA,GAE3B,OAAO,KAGF,oBAEL,IAAIb,EAAmBlC,KAEvB,KAAOkC,EAAKX,QAEVW,EAAOA,EAAKX,OAGd,OAAOW,EAGF,YAAYgB,EAAyBC,GAE1C,MAAMC,EAA4B,GAIlC,OAFApD,KAAKqD,SAASH,EAAKC,EAASrH,GAAKsH,EAAY3E,KAAK3C,IAE3CsH,EAGC,aAAaF,EAAyBC,EAAeG,EAAuBC,EAA4BC,EAA4BjC,EAAqBvB,MAEjK,MAAMyD,EAAWH,EAAkBA,EAAgB1B,oBAAsB,KACnE8B,EAAiBH,EAAUA,EAAQI,QAAQT,EAAKC,GAAW,KAC3DS,EAASF,EAAiBA,EAAe9B,oBAAsB,KACrE,IAAIiC,EAAOD,EAENA,GAgBCA,EAAOE,eAAiBL,EAASK,eAEnCD,EAAOA,EAAKE,eAGTN,EAASO,YAAYH,GAcjBA,IAASD,GAEhBJ,EAAQ,CACNlB,KAAMM,EAAeqB,cACrBC,SAAUvB,EAAmBwB,OAC7BhB,UACAI,UACAhC,SACAkC,WACAG,WArBFJ,EAAQ,CACNlB,KAAMM,EAAewB,mBACrBF,SAAUT,EAAS9B,aAAaiC,GAC5BjB,EAAmBwB,OACnBxB,EAAmB0B,KACvBlB,UACAI,UACAhC,SACAkC,WACAG,YA9BAH,IAAaA,EAASK,cAExBN,EAAQ,CACNlB,KAAMM,EAAewB,mBACrBF,SAAUvB,EAAmB0B,KAC7BlB,UACAI,UACAhC,SACAkC,aAuCFF,GAEFA,EAAQF,SAASH,EAAKC,EAASK,GAIzB,aAAaN,EAAyBC,EAAemB,EAAaC,EAAwBf,EAA4BjC,EAAqBvB,MAEnJ,IAAIkC,EAAOoC,EAEXC,EAASC,QAAQjB,IAEXrB,IAEFA,EAAOA,EAAKuC,WAAWlB,EAASL,EAAKC,IAGlCjB,GAEHsB,EAAQ,CACNlB,KAAMM,EAAe8B,mBACrBR,SAAUvB,EAAmB0B,KAC7Bd,UACAJ,UACA5B,WAIJgC,EAAQF,SAASH,EAAKC,EAASK,MCjG9B,SAASmB,EAA0C7I,GAExD,QAAS,aAAcA,IAAMR,EAAWQ,GAGnC,MAAM8I,EAQX,YAAmBC,GAEjB7E,KAAK6E,OAASA,EACd7E,KAAKjD,IAAM3D,OAAOY,OAAO,MACzBgG,KAAK8E,MAAQ1L,OAAOY,OAAO,MAGtB,IAAK+K,GAEV,OAAO/E,KAAKjD,IAAIgI,IAAO/E,KAAKjD,IAAIiD,KAAK6E,OAASE,GAGzC,SAAUA,GAEf,OAAO/E,KAAK8E,MAAMC,IAAO/E,KAAK8E,MAAM9E,KAAK6E,OAASE,GAG7C,IACLC,EACAC,EAAiC,GACjCC,EAAc,GACdC,EAAgB,GAChBC,EAAa,GACbC,EAAgB,GAChBC,EAAwB,IAGxB,MAAMP,EAAK/E,KAAK6E,OAASG,EACnBO,EAAUN,EAAMM,SAAW,GAC3BC,EAAaP,EAAMO,YAAc,EACjCC,EAAmCrM,OAAOY,OAAO,MACvDoL,EAAMZ,QAAS/J,GAAMgL,EAAchL,GAAKA,GAExC,MAAMiL,EAAK,CACTX,KACAQ,UACAC,aACAN,SACAC,WACAC,QACAK,gBACAJ,WACAC,oBAKF,OAFAtF,KAAKjD,IAAIgI,GAAMW,EAERA,EAyBF,SACLA,EACAC,EACAT,EAA+C9L,OAAOY,OAAO,MAC7DmL,EAAiD/L,OAAOY,OAAO,MAC/DoL,EAA8ChM,OAAOY,OAAO,OAG5D,MAAM8K,EAAQ,CAAEa,aAAYT,SAAQC,WAAUC,SAI9C,OAFApF,KAAK8E,MAAMY,EAAGX,IAAMD,EAEbA,GC9KJ,MAAMc,EAQX,YAAmBf,GAEjB7E,KAAK6E,OAASA,EACd7E,KAAKjD,IAAM3D,OAAOY,OAAO,MACzBgG,KAAKoB,KAAO,GAGP,IAA6E4D,EAAiBU,EAAoC/L,EAAWuL,GAElJ,MAAMH,EAAK/E,KAAK6E,OAASG,EACnBa,EAAiB,CACrBd,KACAW,GAAIA,EAAGX,GACPpL,MAAOA,GAAS+L,EAAGR,OAAO,GAC1BA,OAAQA,GAAU,IAMpB,OAHAlF,KAAKjD,IAAIgI,GAAMc,EACf7F,KAAKoB,KAAK3C,KAAKoH,GAERA,EAGF,IAAKd,GAEV,OAAO/E,KAAKjD,IAAIgI,IAAO/E,KAAKjD,IAAIiD,KAAK6E,OAASE,IC5C3C,MAAMe,EAAK,CAChBC,OAAQ,IACRC,IAAK,MACLC,QAAS,OACTC,MAAO,QACPlL,KAAM,OACNmL,KAAM,OACNC,SAAU,OACVC,KAAM,OACNC,KAAM,OACNC,IAAK,MACLrL,IAAK,MACLsL,KAAM,OACNC,OAAQ,MACRrN,OAAQ,MACRsN,SAAU,IACVC,UAAW,MACXC,SAAU,MACVxL,IAAK,MACLyL,KAAM,OACNC,MAAO,QACPC,UAAW,KChBAC,EAAoB,IAAIpC,EAAWkB,EAAGG,QAAUH,EAAGiB,WAEnDE,EAAmB,IAAIrB,EAAUE,EAAGG,QAAUH,EAAGiB,WAExD,EAAMC,EAECE,EACb,CAIElN,OAAQ,EAAImN,IAAI,UAIhBC,MAAO,EAAID,IAAI,QAAS,GAAI,CAAC,UAE7BE,IAAK,EAAIF,IAAI,IAAK,GAAI,CAAC,IAAK,MAE5BG,GAAI,EAAIH,IAAI,IAAK,GAAI,CAAC,IAAK,MAE3BI,IAAK,EAAIJ,IAAI,IAAK,GAAI,CAAC,IAAK,MAE5BK,IAAK,EAAIL,IAAI,IAAK,GAAI,CAAC,MAEvBM,IAAK,EAAIN,IAAI,MAAO,GAAI,CAAC,QAAS,SAIlCO,QAAS,EAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BQ,OAAQ,EAAIR,IAAI,KAAM,GAAI,CAAC,UAE3BS,QAAS,EAAIT,IAAI,KAAM,GAAI,CAAC,UAE5BU,QAAS,EAAIV,IAAI,IAAK,GAAI,CAAC,QAAS,SAEpCW,WAAY,EAAIX,IAAI,KAAM,GAAI,CAAC,QAAS,SAIxCY,MAAO,EAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,EAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,EAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,EAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,EAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,EAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,EAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,EAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,EAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,EAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,EAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WCpC7B,MAAMsN,EAaX,cAEE1I,KAAK2I,aAAe3I,KAAK4I,cAAc,CAACrG,EAAGsG,IAAUA,GACrD7I,KAAK8I,WAAa9I,KAAK4I,cAAc,IAAM,IAC3C5I,KAAK+I,UAAY/I,KAAK4I,cAAc,IAAM,IAC1C5I,KAAKgJ,SAAW,GAChBhJ,KAAKiJ,SAAW,GAGX,QAAQvN,EAAQC,GAErB,MAAMuN,EAAa,CAACpN,EAAQoD,KAE1B,MAAMiK,SAAerN,EACfsN,SAAelK,EAErB,GAAIiK,IAAUC,EAEZ,OAAOpJ,KAAK2I,aAAaQ,GAASnJ,KAAK2I,aAAaS,GAGtD,MAAMC,EAAWrJ,KAAK8I,WAAWK,GAEjC,IAAK,MAAMG,KAAWD,EACtB,CACE,MAAMjJ,EAASkJ,EAAQA,QAAQxN,EAAGoD,EAAGgK,GAErC,QAAe5K,IAAX8B,EAEF,OAAOA,EAIX,OAAOtE,IAAMoD,EAAI,EAAIpD,EAAIoD,GAAK,EAAI,GAGpC,OAAOgK,EAAWxN,EAAGC,GAGhB,WAAW4N,EAAcC,GAE9B,OAAgB,IAATD,GAAuB,IAATC,EACjB,EACAD,EAAOC,EAAO,GAAK,EAGlB,WAAWF,GAEhB,OAAOtJ,KAAKyJ,kBAAkBzJ,KAAK8I,WAAWQ,EAAQhH,MAAOgH,GAGxD,OAAO5N,EAAQC,GAEpB,MAAM+N,EAAY,CAAC5N,EAAQoD,KAEzB,GAAIpD,IAAMoD,EAER,OAAO,EAGT,MAAMiK,SAAerN,EAGrB,GAAIqN,WAFiBjK,EAInB,OAAO,EAGT,MAAMyK,EAAS3J,KAAK+I,UAAUI,GAE9B,IAAK,MAAMS,KAAYD,EACvB,CACE,MAAMvJ,EAASwJ,EAASD,OAAO7N,EAAGoD,EAAGwK,GAErC,QAAepL,IAAX8B,EAEF,OAAOA,EAIX,OAAO,GAGT,OAAOsJ,EAAUhO,EAAGC,GAGf,UAAUgO,GAEf,OAAO3J,KAAKyJ,kBAAkBzJ,KAAK+I,UAAUY,EAAOrH,MAAOqH,GAGtD,KAAQ7N,EAAM+N,GAA0B,GAE7C,IAAK/N,EAAG,OAAOA,EAEf,GAAiB,iBAANA,EACX,CACE,MAAMgO,EAAU9J,KAAKgJ,SAErB,GAAIa,EACJ,CACE,MAAME,EAAS,IAAI7O,IAEb8O,EAAgB,CAACC,EAAeC,KAEpCH,EAAO5C,IAAI8C,EAAUC,IAGjBC,EAAczO,IAElB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,EACX,CACE,MAAM0O,EAAWL,EAAOxQ,IAAImC,GAE5B,QAAiB4C,IAAb8L,EAEF,OAAOA,EAGT,IAAK,MAAMC,KAAUP,EACrB,CACE,MAAMQ,EAAaD,EAAOH,KAAKxO,EAAGyO,EAAYH,GAE9C,QAAmB1L,IAAfgM,EAEF,OAAOA,GAKb,OAAO5O,GAGT,OAAOyO,EAAWrO,GAGpB,CACE,MAAMkO,EAAgB,CAACC,EAAeC,OAEhCK,EAAa7O,IAEjB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,EAET,IAAK,MAAM2O,KAAUP,EACrB,CACE,MAAMQ,EAAaD,EAAOH,KAAKxO,EAAG6O,EAAWP,GAE7C,QAAmB1L,IAAfgM,EAEF,OAAOA,EAKb,OAAO5O,GAGT,OAAO6O,EAAUzO,IAMrB,OAAOA,EAGF,UAAUuO,GAEf,OAAOrK,KAAKyJ,kBAAkBzJ,KAAKgJ,SAAUqB,GAGxC,OAAU1Q,GAEf,IAAKA,EAAO,OAAOA,EAEnB,GAAqB,iBAAVA,EACX,CACE,MAAM6Q,EAAUxK,KAAKiJ,SAEfwB,EAAc3O,IAElB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,EAET,IAAK,MAAM4O,KAAUF,EACrB,CACE,MAAMpK,EAASsK,EAAOC,OAAO7O,EAAG2O,GAEhC,QAAenM,IAAX8B,EAEF,OAAOA,EAKb,OAAOtE,GAGT,OAAO2O,EAAW9Q,GAGpB,OAAOA,EAGF,SAAYiR,GAEjB,IAAKA,EAAM,OAAOA,EAElB,GAAoB,iBAATA,EACX,CACE,MAAMJ,EAAUxK,KAAKiJ,SAEfwB,EAAc3O,IAElB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,EAET,IAAK,MAAM4O,KAAUF,EACrB,CACE,MAAMpK,EAASsK,EAAOG,SAAS/O,EAAG2O,GAElC,QAAenM,IAAX8B,EAEF,OAAOA,EAKb,OAAOtE,GAGT,OAAO2O,EAAWG,GAGpB,OAAOA,EAGF,QAAWA,GAEhB,OAAO5K,KAAKyJ,kBAAkBzJ,KAAKiJ,SAAU2B,GAGvC,cAAiB5Q,GAEvB,MAAM+C,EAA8B3D,OAAOY,OAAO,MAOlD,OALA0O,EAAiBoC,MAAMtG,QAAQ,CAAClC,EAAMuG,KAEpC9L,EAAIuF,GAAQtI,EAAOsI,EAAMuG,KAGpB9L,EAGD,kBAAkDqE,EAAWzH,GAKnE,OAHAyH,EAAK3C,KAAK9E,GACVyH,EAAK2J,KAAK,CAACrP,EAAGC,IAAMA,EAAEqP,SAAWtP,EAAEsP,UAE5BhL,MAnRK,EAAA8K,MAAuB,CACnC,UAAW,SAAU,SAAU,SAAU,SAAU,SAAU,YAAa,YAuRvE,MAAMG,EAAY,IAAIvC,EC9SvBwC,EAAgB,EAChBC,EAA0B,GAQzB,MAAM,UAAoB,EAWxB,cAAcC,EAAatG,GAEhC,OAAO,IAAI,EAAYsG,EAAKF,IAAkB,IAGzC,cAAc5I,GAEnB,OAAOnG,EAAQmG,EAAKhB,SAChBtB,KAAK+E,GACL,CAAC/E,KAAK+E,GAAIzC,EAAKhB,SAKd,gBAAgB8J,EAAWC,GAEhC,OAAOhQ,EAAU+P,GAAQpL,KAAKsL,SAAW,KAKpC,kBAKLL,EAAUM,WAAW,CACnBP,SAJe,EAKf1I,KAJwB,UAKxBgH,QAAS,CAAC5N,EAAGC,KACHD,EAAI,EAAI,IAAMC,EAAI,EAAI,KAIlCsP,EAAUO,UAAU,CAClBR,SAZe,EAaf1I,KAZwB,UAaxBqH,OAAQ,CAACjO,EAAGC,IAAMD,IAAMC,IAIrB,QAEL,OAAO,EAAYoJ,GAGd,gBAEL,OAAO,EAAY0G,WAAW1O,IAGzB,MAAMuF,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,OAAO,KAGF,YAAYD,GAEjB,MAAO,GAGF,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,OAAIA,EAAQG,QAASH,EAAQO,QAEpBL,aAAiB,EAMrB,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYnB,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAe,MAE9BvB,KAAKuB,OAASA,EAGT,+BAKA,sBAEL,OAAO,GAAMmE,GAAGwB,EAAWlN,OAAQ,IAG9B,wBAEL,OAAO,GAAM0L,GAAGwB,EAAWQ,QAAS,CAClC/N,MAAO,GAAMJ,IAAI,WAId,uBAEL,OAAO,GAAMmM,GAAGwB,EAAWO,IAAK,CAC9B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,QAAQI,GAEb,GAAI0B,EAAU1B,GAEZ,OAAO,EAGT,MAAMgS,EAAQhS,EAAQ,GAEtB,SAAIqG,KAAKsB,QAAQsK,OAAQ5L,KAAKsB,QAAQsK,KAAKD,QAKvC3L,KAAKsB,QAAQuK,QAAS7L,KAAKsB,QAAQuK,MAAMF,IAQxC,UAAUhS,GAEf,IAAK0B,EAAU1B,GACf,CACE,MAAMgS,EAAQhS,EAAQ,GAEtB,GAAIqG,KAAKsB,QAAQsK,MAAQ5L,KAAKsB,QAAQsK,KAAKD,GAEzC,OAAO,EAGT,GAAI3L,KAAKsB,QAAQuK,OAAS7L,KAAKsB,QAAQuK,MAAMF,GAE3C,OAAO,EAIX,OAAOhS,EAGF,cAEL,OAAO,IAAI,EAAY,IAGlB,QAEL,OAAO,IAAI,EAAYsR,EAAUf,KAAKlK,KAAKsB,UAGtC,SAEL,OAAO,EAAYwK,OAAO9L,MAGrB,SAEL,OAAO,EAGF,OAAO+L,GAEZ,OAAOA,EAAI,EAAG,GAAG,GAASZ,EAGrB,SAASP,GAEd,OAAOA,EAGF,OAAOjR,GAEZ,OAAOA,GArNK,EAAAoL,GAAKe,EAAGG,QAER,EAAAwF,WAAazE,EAEb,EAAAgF,UAAY/E,EAEZ,EAAAqE,SAAW,IAAI,EAAY,IAc3B,EAAAW,iBAA2B,EAO3B,EAAAC,YAAsB,EC1CtC,MAAMC,EAAa,EAEZ,MAAM,UAAsB,EAuBjC,YAAmBC,GAEjBC,QACArM,KAAKoM,WAAaA,EAnBb,cAAchB,EAAakB,GAEhC,MAAMF,EAAaE,EAAMC,cAAcnB,EAAKe,IAE5C,OAAO,IAAI,EAAcC,GAGpB,cAAcpJ,GAEnB,MAAMoJ,EAAapJ,EAAKoJ,WAAWN,SAEnC,MAAO,CAAC9L,KAAK+E,GAAIqH,GAWZ,QAEL,OAAO,EAAcrH,GAGhB,cAAc7B,GAEnB,OAAOlD,KAAKoM,WAAWI,cAActJ,GAGhC,WAEL,OAAO,KAGF,SAEL,OAAO,EAAc4I,OAAO9L,MAGvB,QAEL,OAAO,IAAI,EAAcA,KAAKoM,WAAWK,SAGpC,QAAQvJ,EAAyBC,GAEtC,OAAO,EAAYmI,SAGd,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BK,EAASG,KAAK,EAAckM,SAAU1M,KAAKoM,WAAavL,GAAgBb,KAAKoM,WAAavL,IAIvF,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,EAAc2J,SAC9B,CAAC,EAAG1M,KAAKoM,YACT,KAGC,UAAU7K,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKoM,WAAWO,UAAU3M,MAGrB,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAK4M,aAAa1J,EAAKC,EAAS,EAAYmI,SAAUtL,KAAKoM,WAAY5I,IA/E3D,EAAAkJ,SAAW,MAEX,EAAA3H,GAAK,MCNrB,MAAM8H,EAAoB,EAEnB,MAAM,WAAsB,EAqBjC,YAAmBC,GAEjBT,QACArM,KAAK8M,YAAcA,EAnBd,cAAc1B,EAAakB,GAEhC,MAAMQ,EAAc1B,EAAKyB,GAAmB9P,IAAK/D,GAAWsT,EAAMC,cAAcvT,IAEhF,OAAO,IAAI,GAAc8T,GAGpB,cAAc9J,GAEnB,MAAM8J,EAAc9J,EAAK8J,YAAY/P,IAAIgQ,GAAKA,EAAEjB,UAEhD,MAAO,CAAC9L,KAAK+E,GAAI+H,GAWZ,QAEL,OAAO,GAAc/H,GAGhB,cAAc7B,GAEnB,OAAOlD,KAAK8M,YAAYpO,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAO,GAG3E,WAEL,OAAO,KAGF,SAEL,OAAO,GAAc4I,OAAO9L,MAGvB,QAEL,OAAO,IAAI,GAAcA,KAAK8M,YAAY/P,IAAIgQ,GAAKA,EAAEN,UAGhD,QAAQvJ,EAAyBC,GAEtC,OAAO,EAAYmI,SAGd,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAK8M,YAAYtI,QAAQ,CAACxB,EAAM6F,IAC9BxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAK8M,YAAYE,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAK8M,YAAYE,OAAOnE,EAAO,MAKhI,sBAAsB9F,GAE3B,OAAOrI,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAK8M,YAAY1Q,OACrD,CAAC,EAAG4D,KAAK8M,YAAY/J,EAAM,KAC3B,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAK8M,YAAYtI,QAAQuI,GAAKA,EAAEJ,UAAU3M,OAGrC,SAASkD,EAAyBC,EAAeK,GAEtD,MAAMyJ,EAAe,EAAY3B,SAEjCtL,KAAK8M,YAAYtI,QAAQjB,IAEvBvD,KAAK4M,aAAa1J,EAAKC,EAAS8J,EAAc1J,EAASC,MAnF7C,GAAAuB,GAAK,MCTd,MAAMmI,GAAgB,IAAItI,EAAWkB,EAAGE,IAAMF,EAAGiB,WAE3CoG,GAAe,IAAIvH,EAAUE,EAAGE,IAAMF,EAAGiB,WAEhD,GAAMmG,GACNE,GAAiB,CACrB5H,WAAY,GAGD6H,GACb,CAIE5F,IAAK,GAAIN,IAAI,MAAOiG,GAAgB,CAAC,QAAS,SAE9ClD,KAAM,GAAI/C,IAAI,OAAQiG,GAAgB,CAAC,UAEvCE,UAAW,GAAInG,IAAI,YAAa,GAAI,CAAC,UAErCoG,WAAY,GAAIpG,IAAI,aAAc,GAAI,CAAC,QAAS,WAAY,GAAI,CAAC,WAAY,CAAC,WAAY,CAAC,UAE3FlI,SAAU,GAAIkI,IAAI,WAAY,GAAI,CAAC,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,GAAI,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MAE5FqG,QAAS,GAAIrG,IAAI,UAAW,GAAI,CAAC,SAAU,GAAI,GAAI,GAAI,CAAC,UAExDsG,QAAS,GAAItG,IAAI,UAAW,GAAI,CAAC,YAAa,SAAU,SAAU,GAAI,GAAI,GAAI,CAAC,SAAU,UAIzFO,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BU,QAAS,GAAIV,IAAI,IAAKiG,GAAgB,CAAC,QAAS,SAEhDtF,WAAY,GAAIX,IAAI,KAAMiG,GAAgB,CAAC,QAAS,SAEpDM,OAAQ,GAAIvG,IAAI,IAAKiG,GAAgB,CAAC,QAAS,SAE/CO,cAAe,GAAIxG,IAAI,KAAMiG,GAAgB,CAAC,QAAS,SAEvDQ,UAAW,GAAIzG,IAAI,IAAKiG,GAAgB,CAAC,QAAS,SAElDS,iBAAkB,GAAI1G,IAAI,KAAMiG,GAAgB,CAAC,QAAS,SAI1DrF,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WC5D7B,MAAM,WAAiB,EAWrB,cAAcgQ,GAEnB,OAAO,GAASE,SAGX,cAAchJ,GAEnB,OAAOtC,KAAK+E,GAKP,gBAAgBqG,GAErB,OAAgB,OAATA,EAAgBpL,KAAKsL,SAAW,KAKlC,mBAKA,QAEL,OAAO,GAASvG,GAGX,gBAEL,OAAO,GAAS0G,WAAW1O,IAGtB,MAAMuF,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,OAAO,KAGF,YAAYD,GAEjB,MAAO,GAGF,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,OAAOE,aAAiB,GAGnB,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYnB,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAe,OAKzB,+BAKA,sBAEL,OAAO,GAAMuM,OAGR,wBAEL,OAAO,GAAMpI,GAAG2H,GAAOxF,QAAS,CAC9BlO,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMiK,SAIT,uBAEL,OAAO,GAAMpI,GAAG2H,GAAO5F,IAAK,CAC1B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,QAAQI,GAEb,OAAOA,QAGF,UAAUA,GAEf,OAAOA,EAGF,cAEL,OAAOqG,KAGF,QAEL,OAAOA,KAGF,SAEL,OAAO,GAAS8L,OAAO9L,MAGlB,SAEL,OAAO,KAGF,OAAO+L,GAEZ,OAAO,KAGF,SAASnB,GAEd,OAAO,KAGF,OAAOjR,GAEZ,OAAO,MAhKK,GAAAoL,GAAKe,EAAGU,KAER,GAAAiF,WAAa,IAAI7G,EAAWkB,EAAGU,KAAOV,EAAGiB,WAEzC,GAAAiF,UAAY,IAAIpG,EAAUE,EAAGU,KAAOV,EAAGiB,WAEvC,GAAAuE,SAAW,IAAI,GAAS,MAYxB,GAAAW,iBAA2B,EAO3B,GAAAC,YAAsB,EC/B/B,MAAM,WAAqB,EAOzB,cAAcd,EAAakB,GAEhC,OAAOtM,KAAK+N,SAGP,cAAc/K,GAEnB,MAAO,CAAChD,KAAK+E,IAGR,QAEL,OAAO,GAAaA,GAGf,cAAc7B,GAEnB,OAAO,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAa4I,OAAO9L,MAGtB,QAEL,OAAOA,KAGF,QAAQkD,EAAyBC,GAEtC,OAAO,GAASmI,SAGX,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAqB,OAK/B,SAAS2B,EAAyBC,EAAeK,KAtD1C,GAAAuB,GAAK,OAEI,GAAAgJ,SAAW,IAAI,GCFjC,MAAM,WAAgB,EAWpB,cAAc3C,EAAatG,GAEhC,OAAO9E,KAAKsL,SAGP,cAAchJ,GAEnB,OAAOtC,KAAK+E,GAKP,gBAAgBqG,EAAWC,GAEhC,OAAI9P,EAAS6P,IAASxQ,EAASwQ,EAAK4C,MAE3B,IAAI,GAAQ,IAGd,KAKF,mBAKA,QAEL,OAAO,GAAQjJ,GAGV,gBAEL,OAAO,GAAQ0G,WAAW1O,IAGrB,MAAMuF,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,OAAO,KAGF,YAAYD,GAEjB,MAAO,GAGF,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGF,aAAawB,GAElB,OAAO,EAGC,iBAAiBA,EAAaF,GAEtC,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYjB,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAe,MAE9BvB,KAAKuB,OAASA,EAGT,+BAKA,sBAEL,OAAO,GAAM0M,SAGR,wBAEL,OAAO,GAAMrC,OAGR,uBAEL,OAAO,GAAMlG,GAAG2H,GAAO5F,IAAK,CAC1B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,QAAQI,GAEb,OAAO,EAGF,UAAUA,GAEf,OAAOA,EAGF,cAEL,OAAO,IAAI,GAAQ,IAGd,QAEL,OAAO,IAAI,GAAQ,IAGd,SAEL,OAAO,GAAQmS,OAAO9L,MAGjB,SAEL,MAAO,GAGF,OAAO+L,GAEZ,OAAO,KAGF,SAASnB,GAEd,OAAOK,EAAUJ,SAASD,GAGrB,OAAOjR,GAEZ,OAAOsR,EAAUN,OAAOhR,IAvKZ,GAAAoL,GAAKe,EAAGE,IAER,GAAAyF,WAAayB,GAEb,GAAAlB,UAAYmB,GAEZ,GAAA7B,SAAW,IAAI,GAAQ,IAYvB,GAAAW,iBAA2B,EAY3B,GAAAC,YAAsB,EClCtC,MAAMgC,GAAe,EACfC,GAAa,EAEZ,MAAM,WAAyB,EA2BpC,YAAmB/V,EAAgCgW,GAEjD/B,QACArM,KAAK5H,OAASA,EACd4H,KAAKoO,KAAOA,EAtBP,cAAchD,EAAakB,GAEhC,MAAMlU,EAASgT,EAAK8C,IAAcnR,IAAI,EAAE9D,EAAMD,KAAsB,CAACC,EAAMqT,EAAMC,cAAcvT,KACzFoV,EAAO9B,EAAMC,cAAcnB,EAAK+C,KAEtC,OAAO,IAAI,GAAiB/V,EAAQgW,GAG/B,cAAcpL,GAEnB,MAAM5K,EAAS4K,EAAK5K,OAAO2E,IAAI,EAAE9D,EAAMoV,KAAa,CAACpV,EAAMoV,EAAQvC,WAEnE,MAAO,CAAC9L,KAAK+E,GAAI3M,EAAQ4K,EAAKoL,KAAKtC,UAa9B,QAEL,OAAO,GAAiB/G,GAGnB,cAAc7B,GAEnB,OAAOlD,KAAK5H,OAAOsG,OAAO,CAAClC,GAAMvD,EAAM8T,KAAO/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAOlD,KAAKoO,KAAK5B,cAActJ,IAGtG,WAEL,MAAMkC,EAAQ,GAId,OAFApF,KAAK5H,OAAOoM,QAAQ,EAAEvL,EAAMoV,KAAajJ,EAAMnM,GAAQ,GAAQqS,UAExDlG,EAGF,SAEL,OAAO,GAAiB0G,OAAO9L,MAG1B,QAEL,OAAO,IAAI,GAAiBA,KAAK5H,OAAO2E,IAAI,EAAE9D,EAAMqV,KAAc,CAACrV,EAAMqV,EAAS7B,UAAWzM,KAAKoO,KAAK3B,SAGlG,QAAQvJ,EAAyB+G,GAEtC,MAAM,MAAE7E,EAAK,QAAEjC,GAAYD,EAAIqL,oBAAoBtE,GAInD,OAFAjK,KAAK5H,OAAOoM,QAAQ,EAAEvL,EAAMoV,KAAajJ,EAAMnM,GAAQoV,EAAQ1K,QAAQT,EAAKC,IAErEnD,KAAKoO,KAAKzK,QAAQT,EAAKC,GAGzB,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAiBgO,YAAa,IAC1CxO,KAAK5H,OAAOoM,QAAQ,EAAEvL,EAAMoV,GAAUxF,IACpCxI,EAASG,KAAKvH,EAAMoV,EAAUxN,GAAgBb,KAAK5H,OAAOyQ,GAAOmE,OAAO,EAAG,EAAGnM,GAAc,IAAMb,KAAK5H,OAAO4U,OAAOnE,EAAO,MAGhIxI,EAASG,KAAK,GAAiBiO,UAAWzO,KAAKoO,KAAOvN,GAAgBb,KAAKoO,KAAOvN,KAK/E,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAiB0L,UACjC,CAAC,EAAGzO,KAAKoO,MACTrL,EAAM,KAAO,GAAiByL,YAC5B,CAAC,EAAGxO,KAAK5H,OAAO6I,OAAO,EAAEhI,KAAUA,IAAS8J,EAAM,IAAIhG,IAAI,EAAEwF,EAAGS,KAAUA,GAAM,IAC/E,KAID,UAAUzB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAK5H,OAAOoM,QAAQ,EAAEvL,EAAMoV,KAAaA,EAAQ1B,UAAU3M,OAC3DA,KAAKoO,KAAKzB,UAAU3M,MAGf,SAASkD,EAAyBC,EAAeK,GAEtD,MAAMkL,EAAgBxL,EAAIqL,oBAAoBpL,GAE9CnD,KAAK5H,OAAOoM,QAAQ,EAAEvL,EAAMoV,MAE1BA,EAAQhL,SAASH,EAAKwL,EAAcvL,QAASK,GAE7CkL,EAActJ,MAAMnM,GAAQoV,EAAQ1K,QAAQT,EAAKwL,EAAcvL,WAGjEnD,KAAKoO,KAAK/K,SAASH,EAAKwL,EAAcvL,QAASK,GAK1C,KAAKmL,EAAyDhV,GAEnE,MAAMiV,EAAShU,EAAS+T,GACpB,CAAE,CAACA,GAAgBhV,GACnBgV,EAEJ,IAAK,MAAM1V,KAAQ2V,EACnB,CACE,MAAM5L,EAAO,GAAM6L,MAAMD,EAAO3V,IAC1BmR,EAAWpK,KAAK5H,OAAO0W,KAAK,EAAEC,KAAaA,IAAY9V,GAEzDmR,EACFA,EAAS,GAAKpH,EAEdhD,KAAK5H,OAAOqG,KAAK,CAACxF,EAAM+J,IAG1BA,EAAK2J,UAAU3M,MAGjB,OAAOA,KAGF,IAAIgD,GAKT,OAHAhD,KAAKoO,KAAOpL,EACZhD,KAAKoO,KAAKzB,UAAU3M,MAEbA,MAhJK,GAAAwO,YAAc,SAEd,GAAAC,UAAY,OAEZ,GAAA1J,GAAK,MCXrB,MAAMiK,GAAyB,IACzBC,GAAgB,QAChBC,GAAkB,EAClB,GAAa,EACbC,GAAc,EACdC,GAAY,EAEX,MAAM,WAAqB,EAyChC,YAAmBC,EAAuBjB,EAAkBkB,EAAwBL,GAAeM,EAAwBP,IAEzH3C,QACArM,KAAKqP,UAAYA,EACjBrP,KAAKoO,KAAOA,EACZpO,KAAKsP,cAAgBA,EACrBtP,KAAKuP,cAAgBA,EApChB,cAAcnE,EAAakB,GAEhC,MAAM+C,EAAY/C,EAAMC,cAAcnB,EAAK8D,KACrCd,EAAO9B,EAAMC,cAAcnB,EAAK,KAChCkE,EAAgBlE,EAAK+D,KAAgBF,GACrCzS,EAAMgT,SAASpE,EAAKgE,MAAepP,KAAKyP,eAE9C,OAAO,IAAI,GAAaJ,EAAWjB,EAAMkB,EAAe9S,GAGnD,cAAcwG,GAEnB,MAAM7E,EAAM,CAAC6B,KAAK+E,GAAI/B,EAAKqM,UAAUvD,SAAU9I,EAAKoL,KAAKtC,UACnD4D,EAAS1M,EAAKuM,gBAAkBvP,KAAKyP,eAS3C,OAPIzM,EAAKsM,gBAAkBL,IAAiBS,IAC1CvR,EAAIM,KAAKuE,EAAKsM,eAEZI,GACFvR,EAAIM,KAAKuE,EAAKuM,eAGTpR,EAiBF,QAEL,OAAO,GAAa4G,GAGf,cAAc7B,GAEnB,OAAOlH,KAAKQ,IAAIwD,KAAKqP,UAAU7C,cAActJ,GAAMlD,KAAKoO,KAAK5B,cAActJ,IAAQ,EAG9E,WAEL,MAAO,CACL,CAAClD,KAAKsP,eAAgB,EAAYhE,UAI/B,SAEL,OAAO,GAAaQ,OAAO9L,MAGtB,QAEL,OAAO,IAAI,GAAaA,KAAKqP,UAAU5C,QAASzM,KAAKoO,KAAK3B,QAASzM,KAAKsP,cAAetP,KAAKuP,eAGvF,QAAQrM,EAAyB+G,GAEtC,MAAM,QAAE9G,GAAYD,EAAIqL,oBAAoBtE,EAAUjK,KAAK2P,YAErDvB,EAAOpO,KAAKoO,KAAKzK,QAAQT,EAAKC,GAEpC,OAAOiL,EAAO,GAAMjJ,SAASiJ,GAAQ,KAGhC,SAAY/N,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAaoP,eAAgB5P,KAAKqP,UAAYxO,GAAgBb,KAAKqP,UAAYxO,GAC7FR,EAASG,KAAK,GAAaiO,UAAWzO,KAAKoO,KAAOvN,GAAgBb,KAAKoO,KAAOvN,KAI3E,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAa6M,eAC7B,CAAC,EAAG5P,KAAKqP,WACTtM,EAAM,KAAO,GAAa0L,UACxB,CAAC,EAAGzO,KAAKoO,MACT,KAGD,UAAU7M,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKqP,UAAU1C,UAAU3M,MACzBA,KAAKoO,KAAKzB,UAAU3M,MAGf,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAK4M,aAAa1J,EAAKC,EAAS,EAAYmI,SAAUtL,KAAKqP,UAAW7L,GAEtE,MAAMqM,EAAc3M,EAAI4M,WAAW3M,EAASnD,KAAK2P,YAEjD3P,KAAKoO,KAAK/K,SAASH,EAAK2M,EAAarM,GAGhC,GAAG4K,EAAkBiB,GAW1B,OATArP,KAAKoO,KAAOA,EACZpO,KAAKoO,KAAKzB,UAAU3M,MAEhBqP,IAEFrP,KAAKqP,UAAYA,EACjBrP,KAAKqP,UAAU1C,UAAU3M,OAGpBA,KAGF,MAAMqP,GAKX,OAHArP,KAAKqP,UAAYA,EACjBrP,KAAKqP,UAAU1C,UAAU3M,MAElBA,KAGF,UAAU/G,GAIf,OAFA+G,KAAKsP,cAAgBrW,EAEd+G,KAGF,QAAQ+P,GAIb,OAFA/P,KAAKuP,cAAgBQ,EAEd/P,MAtJK,GAAA4P,eAAiB,YAEjB,GAAAnB,UAAY,OAEZ,GAAAgB,eAAiBT,GAEjB,GAAAjK,GAAK,KCjBrB,MAAMiL,GAAc,EAEb,MAAM,WAAwB,EAqBnC,YAAmBC,GAEjB5D,QACArM,KAAKiQ,MAAQA,EAnBR,cAAc7E,EAAakB,GAEhC,MAAM2D,EAAQ7E,EAAK4E,IAAajT,IAAK/D,GAAWsT,EAAMC,cAAcvT,IAEpE,OAAO,IAAI,GAAgBiX,GAGtB,cAAcjN,GAEnB,MAAMiN,EAAQjN,EAAKiN,MAAMlT,IAAIgQ,GAAKA,EAAEjB,UAEpC,MAAO,CAAC9L,KAAK+E,GAAIkL,GAWZ,QAEL,OAAO,GAAgBlL,GAGlB,cAAc7B,GAEnB,OAAOlD,KAAKiQ,MAAMvR,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAO,GAGrE,WAEL,OAAO,KAGF,SAEL,OAAO,GAAgB4I,OAAO9L,MAGzB,QAEL,OAAO,IAAI,GAAgBA,KAAKiQ,MAAMlT,IAAIhE,GAAKA,EAAE0T,UAG5C,QAAQvJ,EAAyBC,GAEtC,OAAOnD,KAAKiQ,MAAMjQ,KAAKiQ,MAAM7T,OAAS,GAAGuH,QAAQT,EAAKC,GAGjD,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAKiQ,MAAMzL,QAAQ,CAACxB,EAAM6F,IACxBxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAKiQ,MAAMjD,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKiQ,MAAMjD,OAAOnE,EAAO,MAKpH,sBAAsB9F,GAE3B,OAAOrI,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKiQ,MAAM7T,OAC/C,CAAC,EAAG4D,KAAKiQ,MAAMlN,EAAM,KACrB,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKiQ,MAAMzL,QAAQuI,GAAKA,EAAEJ,UAAU3M,OAG/B,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAKiQ,MAAMzL,QAAQjB,IAEjBA,EAAQF,SAASH,EAAKC,EAASK,KAI5B,IAAI8I,GAET,MAAMsC,EAAS/T,EAAQyR,GAASA,EAAQ,CAACA,GAEzC,IAAK,MAAMtJ,KAAQ4L,EAEjB5O,KAAKiQ,MAAMxR,KAAKuE,GAChBA,EAAK2J,UAAU3M,MAGjB,OAAOA,MA/FK,GAAA+E,GAAK,QCLrB,MAAMmL,GAAgB,EAEf,MAAM,WAA0B,EAqBrC,YAAmBC,GAEjB9D,QACArM,KAAKmQ,QAAUA,EAjBV,cAAc/E,EAAakB,GAEhC,MAAM6D,EAAU/E,EAAK8E,IAErB,OAAO,IAAI,GAAkBC,GAGxB,cAAcnN,GAEnB,MAAO,CAAChD,KAAK+E,GAAI/B,EAAKmN,SAWjB,QAEL,OAAO,GAAkBpL,GAGpB,cAAc7B,GAEnB,OAAO,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAkB4I,OAAO9L,MAG3B,QAEL,OAAO,IAAI,GAAkBA,KAAKmQ,SAG7B,QAAQjN,EAAyBC,GAEtC,OAAO,GAASmI,SAGX,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAGT,SAAS2B,EAAyBC,EAAeK,KAhE1C,GAAAuB,GAAK,UAEI,GAAAgJ,SAAW,IAAI,GAAkB,ICR1D,MAAMqC,GAAa,EACbC,GAAmB,EAElB,MAAM,WAA2B,EAuBtC,YAAmBjE,EAAwBnT,GAEzCoT,QACArM,KAAKoM,WAAaA,EAClBpM,KAAK/G,KAAOA,EApBP,cAAcmS,EAAakB,GAEhC,MAAMrT,EAAOmS,EAAKgF,IACZhE,EAAaE,EAAMC,cAAcnB,EAAKiF,KAE5C,OAAO,IAAI,GAAmBjE,EAAYnT,GAGrC,cAAc+J,GAEnB,MAAO,CAAChD,KAAK+E,GAAI/B,EAAK/J,KAAM+J,EAAKoJ,WAAWN,UAavC,QAEL,OAAO,GAAmB/G,GAGrB,cAAc7B,GAEnB,MAAM2C,EAAO3C,EAAIoN,YAAYtQ,KAAK/G,MAElC,IAAK4M,EAEH,OAAO,EAGT,MAAMH,EAAKxC,EAAIqN,aAAa1K,EAAKH,IAEjC,OAAO1J,KAAKQ,IAAIkJ,EAAKA,EAAGF,WAAa,EAAGxF,KAAKoM,WAAWI,cAActJ,IAGjE,WAEL,OAAO,KAGF,SAEL,OAAO,GAAmB4I,OAAO9L,MAG5B,QAEL,OAAO,IAAI,GAAmBA,KAAKoM,WAAWN,SAAU9L,KAAK/G,MAGxD,QAAQiK,EAAyBC,GAEtC,OAAOD,EAAIsN,sBAAsBxQ,KAAK/G,KAAM+G,KAAKoM,WAAWzI,QAAQT,EAAKC,IAGpE,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BK,EAASG,KAAK,GAAmBiQ,gBAAiBzQ,KAAKoM,WAAavL,GAAgBb,KAAKoM,WAAavL,IAInG,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAmB0N,gBACnC,CAAC,EAAGzQ,KAAKoM,YACT,KAGC,UAAU7K,EAAqB,MAEpCvB,KAAKuB,OAASA,EACdvB,KAAKoM,WAAWO,UAAU3M,MAGrB,SAASkD,EAAyBC,EAAeK,GAEtD,MAAM8H,EAAWtL,KAAKoM,WAAWzI,QAAQT,EAAKC,GAEzCmI,GAAapI,EAAIwN,YAAYpF,EAAUtL,KAAK/G,OAE/CuK,EAAQ,CACNlB,KAAMM,EAAe8B,mBACrBR,SAAUvB,EAAmB0B,KAC7BlB,UACAI,QAASvD,KAAKoM,WACd7K,OAAQvB,OAIZA,KAAKoM,WAAW/I,SAASH,EAAKC,EAASK,IArG3B,GAAAiN,gBAAkB,aAElB,GAAA1L,GAAK,OCVd,MAAM4L,GAAiB,IAAI/L,EAAWkB,EAAGe,KAAOf,EAAGiB,WAE7C6J,GAAgB,IAAIhL,EAAUE,EAAGe,KAAOf,EAAGiB,WAElD,GAAM4J,GAECE,GACb,CAIE7W,OAAQ,GAAImN,IAAI,UAEhB2J,KAAM,GAAI3J,IAAI,QAIdC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7ByH,OAAQ,GAAIzH,IAAI,IAAK,GAAI,CAAC,QAAS,WAEnC4J,QAAS,GAAI5J,IAAI,MAAO,GAAI,CAAC,QAAS,YAEtC6J,MAAO,GAAI7J,IAAI,KAAM,GAAI,CAAC,UAE1B8J,MAAO,GAAI9J,IAAI,KAAM,GAAI,CAAC,UAE1B+J,KAAM,GAAI/J,IAAI,IAAK,GAAI,CAAC,QAAS,SAAU,CAAC,YAE5CpH,QAAS,GAAIoH,IAAI,UAAW,GAAI,CAAC,QAAS,OAAQ,YAElDgK,OAAQ,GAAIhK,IAAI,SAAU,GAAI,CAAC,QAAS,UAExCiK,MAAO,GAAIjK,IAAI,QAAS,GAAI,CAAC,QAAS,MAAO,CAAC,UAE9CkK,MAAO,GAAIlK,IAAI,QAAS,GAAI,CAAC,UAE7BmK,IAAK,GAAInK,IAAI,MAAO,GAAI,CAAC,SAAU,CAAC,QAAS,QAE7CoK,QAAS,GAAIpK,IAAI,KAAM,GAAI,CAAC,QAAS,UAAW,CAAC,UAEjDqK,YAAa,GAAIrK,IAAI,MAAO,GAAI,CAAC,QAAS,UAAW,CAAC,UAEtDsK,KAAM,GAAItK,IAAI,OAAQ,GAAI,CAAC,SAAU,CAAC,QAAS,QAE/CuK,WAAY,GAAIvK,IAAI,SAAU,GAAI,CAAC,QAAS,SAE5CwK,SAAU,GAAIxK,IAAI,OAAQ,GAAI,CAAC,QAAS,SAExCyK,QAAS,GAAIzK,IAAI,UAAW,CAAE3B,WAAY,GAAK,CAAC,SAAU,CAAC,MAAO,QAElEqM,UAAW,GAAI1K,IAAI,YAAa,CAAE3B,WAAY,GAAK,CAAC,UAEpDsM,SAAU,GAAI3K,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAEvDpJ,OAAQ,GAAI+K,IAAI,MAAO,GAAI,CAAC,UAE5BmC,QAAS,GAAInC,IAAI,MAAO,GAAI,CAAC,QAAS,QAAS,CAAC,eAEhD4K,KAAM,GAAI5K,IAAI,OAAQ,GAAI,CAAC,QAAS,WAAY,CAAC,eAEjD9H,IAAK,GAAI8H,IAAI,MAAO,GAAI,CAAC,QAAS,UAAW,OAAQ,CAAC,MAAO,WAE7D6K,UAAW,GAAI7K,IAAI,YAAa,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAEvE8K,WAAY,GAAI9K,IAAI,aAAc,GAAI,CAAC,QAAS,SAAU,CAAC,QAAS,aAAc,cAElF+K,WAAY,GAAI/K,IAAI,aAAc,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAEzEgL,cAAe,GAAIhL,IAAI,gBAAiB,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAE/EiL,aAAc,GAAIjL,IAAI,eAAgB,GAAI,CAAC,QAAS,QAAS,eAAgB,CAAC,MAAO,aAAc,cAEnGkL,oBAAqB,GAAIlL,IAAI,sBAAuB,GAAI,CAAC,QAAS,QAAS,WAAY,CAAC,MAAO,aAAc,aAAc,CAAC,SAAU,CAAC,YAEvImL,aAAc,GAAInL,IAAI,eAAgB,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAQ7EoL,OAAQ,GAAIpL,IAAI,SAAU,GAAI,CAAC,UAE/BqL,SAAU,GAAIrL,IAAI,WAAY,GAAI,CAAC,UAEnCsL,UAAW,GAAItL,IAAI,YAAa,GAAI,CAAC,UAErCuL,UAAW,GAAIvL,IAAI,YAAa,GAAI,CAAC,UAErCwL,mBAAoB,GAAIxL,IAAI,qBAAsB,GAAI,CAAC,UAEvDyL,mBAAoB,GAAIzL,IAAI,qBAAsB,GAAI,CAAC,UAEvD0L,IAAK,GAAI1L,IAAI,MAAO,GAAI,CAAC,UAEzB2L,QAAS,GAAI3L,IAAI,UAAW,GAAI,CAAC,QAAS,WAE1C4L,QAAS,GAAI5L,IAAI,UAAW,GAAI,CAAC,QAAS,WAE1C6L,SAAU,GAAI7L,IAAI,WAAY,GAAI,CAAC,SAAU,CAAC,iBAI9CO,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BhL,QAAS,GAAIgL,IAAI,KAAM,GAAI,CAAC,UAE5B8L,WAAY,GAAI9L,IAAI,KAAM,GAAI,CAAC,UAE/BU,QAAS,GAAIV,IAAI,IAAK,GAAI,CAAC,IAAK,KAAM,CAAC,eAEvCW,WAAY,GAAIX,IAAI,KAAM,GAAI,CAAC,IAAK,KAAM,CAAC,eAE3CuG,OAAQ,GAAIvG,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,eAE7CwG,cAAe,GAAIxG,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,eAErDyG,UAAW,GAAIzG,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,eAEhD0G,iBAAkB,GAAI1G,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,eAExD+L,QAAS,GAAI/L,IAAI,MAAO,GAAI,CAAC,UAE7BgM,QAAS,GAAIhM,IAAI,MAAO,GAAI,CAAC,UAE7BiM,OAAQ,GAAIjM,IAAI,QAAS,GAAI,CAAC,UAI9BY,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpCwV,GAAczJ,IAAI,UAAW0J,GAAQI,OACrCL,GAAczJ,IAAI,UAAW0J,GAAQG,OACrCJ,GAAczJ,IAAI,QAAS0J,GAAQQ,OACnCT,GAAczJ,IAAI,OAAQ0J,GAAQY,MAClCb,GAAczJ,IAAI,UAAW0J,GAAQe,SACrChB,GAAczJ,IAAI,YAAa0J,GAAQgB,WACvCjB,GAAczJ,IAAI,SAAU0J,GAAQ0B,QACpC3B,GAAczJ,IAAI,WAAY0J,GAAQ2B,UACtC5B,GAAczJ,IAAI,YAAa0J,GAAQ4B,WACvC7B,GAAczJ,IAAI,YAAa0J,GAAQ6B,WACvC9B,GAAczJ,IAAI,qBAAsB0J,GAAQ8B,oBAChD/B,GAAczJ,IAAI,qBAAsB0J,GAAQ+B,oBAChDhC,GAAczJ,IAAI,MAAO0J,GAAQgC,KACjCjC,GAAczJ,IAAI,WAAY0J,GAAQmC,UACtCpC,GAAczJ,IAAI,UAAW0J,GAAQ1U,SACrCyU,GAAczJ,IAAI,aAAc0J,GAAQoC,YACxCrC,GAAczJ,IAAI,UAAW0J,GAAQqC,SACrCtC,GAAczJ,IAAI,UAAW0J,GAAQsC,SClKrC,MAAM,GAAgB,EAChBE,GAAa,EACbC,GAAa,GACbC,GAAoB,uEAanB,MAAM,WAAiB,EAWrB,cAAcnI,GAEnB,OAAO,IAAI,GAASpL,KAAKwT,cAAcpI,EAAK,KAAkB,KAGzD,cAAc9I,GAEnB,OAAOnG,EAAQmG,EAAKhB,SAChBtB,KAAK+E,GACL,CAAC/E,KAAK+E,GAAI/E,KAAKyT,cAAcnR,EAAKhB,UAGhC,qBAAqBA,GAE3B,MAAMjE,EAAUiE,EAAQjE,QAIxB,OAFIA,IAASiE,EAAQjE,QAAU,IAAIqW,OAAOrW,EAAQ,GAAIA,EAAQ,KAEvDiE,EAGD,qBAAqBA,GAE3B,MAAMqS,EAAO,iBAAarS,GACpBjE,EAAUsW,EAAQtW,QAIxB,OAFIA,IAASsW,EAAQtW,QAAU,CAACA,EAAQD,OAAQC,EAAQ4H,QAEjD0O,EAKF,gBAAgBvI,GAErB,OAAKxQ,EAASwQ,GAKP,IAAI,GAAS,CAClB7O,IAAK6O,EAAKhP,OACVI,IAAK4O,EAAKhP,OACVwX,aAAcxI,EAAKyI,gBAAkBzI,EACrC0I,aAAc1I,EAAK2I,gBAAkB3I,IAP9B,KAaJ,kBAKLH,EAAUM,WAAW,CACnBP,SAJe,EAKf1I,KAJwB,SAKxBgH,QAAS,CAAC5N,EAAGC,IACJD,EAAEsY,cAAcrY,KAI3BsP,EAAUO,UAAU,CAClBR,SAZe,EAaf1I,KAZwB,SAaxBqH,OAAQ,CAACjO,EAAGC,IACHD,IAAMC,IAKZ,QAEL,OAAO,GAASoJ,GAGX,gBAEL,OAAO,GAAS0G,WAAW1O,IAGtB,MAAMuF,GAEX,MAAM2R,EAAKjU,KAAKsB,QACV4S,EAAK5R,EAAKhB,QAEhB2S,EAAGzX,IAAMR,KAAKQ,IAAIyX,EAAGzX,IAAK0X,EAAG1X,KAC7ByX,EAAG1X,IAAMP,KAAKO,IAAI0X,EAAG1X,IAAK2X,EAAG3X,KAC7B0X,EAAGL,aAAeK,EAAGL,cAAgBM,EAAGN,aACxCK,EAAGH,aAAeG,EAAGH,cAAgBI,EAAGJ,aAGnC,WAAW9Q,EAAkBE,EAAyBC,GAE3D,GAAI,GAAmBgR,GAAGnR,GAC1B,CACE,GAAmB,WAAfA,EAAKrJ,MAEP,OAAO,GAAMya,OAGf,GAAI1Z,EAASsI,EAAKrJ,OAEhB,OAAO,GAAM0a,KAIjB,IAAIC,EAAWtR,EAAKW,QAAQT,EAAKC,GAEjC,GAAImR,EACJ,CAGE,IAFAA,EAAWA,EAASvQ,yBAEI,GAEtB,OAAO,GAAMsQ,KAGf,GAAIC,aAAoB,GACxB,CACE,GAAIA,EAAShT,QAAQ3H,iBAAiB,GAEpC,OAAO,GAAM0a,KAGf,GAAIC,EAAShT,QAAQ3H,iBAAiB,GACtC,CACE,MAAM4a,EAASzZ,MAAMkC,KAAKsX,EAAShT,QAAQkT,UAAUD,UAErD,GAAsB,IAAlBA,EAAOnY,QAA8B,WAAdmY,EAAO,GAEhC,OAAO,GAAMH,UAOhB,YAAYlR,GAEjB,MAAO,CACL,CAAEjJ,IAAK,SAAUN,MAAO,GAAMya,QAC9B,CAAEna,IAAK,GAAMwa,MAAO9a,MAAO,GAAMwL,SAAS,GAAMkP,QAI7C,aAAa1a,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,KAAME,aAAiB,IAErB,OAAO,EAGT,GAAIF,EAAQ3H,MACZ,CACE,MAAM4C,EAAMyD,KAAKsB,QAAQ/E,IACnBmY,EAAWlT,EAAMF,QAAQ/E,IAE/B,GAAIA,KAASmY,GAAYA,EAAWnY,GAElC,OAAO,EAGT,MAAMC,EAAMwD,KAAKsB,QAAQ9E,IACnBmY,EAAWnT,EAAMF,QAAQ9E,IAE/B,GAAIA,KAASmY,GAAYA,EAAWnY,GAElC,OAAO,EAGT,MAAMwU,EAAQhR,KAAKsB,QAAQsT,YAAc5U,KAAKsB,QAAQwS,aAChDe,EAAarT,EAAMF,QAAQsT,YAAcpT,EAAMF,QAAQsS,aAE7D,GAAI5C,IAAU6D,EAEZ,OAAO,EAGT,MAAM5D,EAAQjR,KAAKsB,QAAQwT,YAAc9U,KAAKsB,QAAQwS,aAChDiB,EAAavT,EAAMF,QAAQwT,YAActT,EAAMF,QAAQwS,aAE7D,GAAI7C,IAAU8D,EAEZ,OAAO,EAGT,MAAM1X,EAAU2C,KAAKsB,QAAQjE,QACvB2X,EAAexT,EAAMF,QAAQjE,QAEnC,GAAIA,KAAa2X,GAAgBA,EAAa5X,SAAWC,EAAQD,QAE/D,OAAO,EAIX,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYiD,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAe,MAE9BvB,KAAKuB,OAASA,EAGT,8BAELvB,KAAKsB,QAAU,GAGV,sBAEL,OAAO,GAAMoE,GAAGmL,GAAQ7W,OAAQ,IAG3B,wBAEL,OAAO,GAAM0L,GAAGmL,GAAQnJ,QAAS,CAC/B/N,MAAO,GAAMJ,IAAI,WAId,uBAEL,OAAO,GAAMmM,GAAGmL,GAAQvH,QAAS,CAC/B3P,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,QAChB0b,WAAY,GAAMrJ,SAIf,QAAQjS,GAEb,IAAKiB,EAASjB,GAEZ,OAAO,EAGT,MAAM,IAAE4C,EAAG,IAAEC,EAAG,aAAEoX,EAAY,aAAEE,EAAY,QAAEzW,EAAO,WAAEuX,EAAU,WAAEE,GAAe9U,KAAKsB,QAEvF,QAAI5G,EAAS6B,IAAQ5C,EAAMyC,OAASG,OAKhC7B,EAAS8B,IAAQ7C,EAAMyC,OAASI,OAKhCoX,GAAgBja,IAAUA,EAAMka,gBAAkBe,OAKlDd,GAAgBna,IAAUA,EAAMoa,gBAAkBe,MAKlDzX,GAAWA,aAAmBqW,SAAWrW,EAAQwG,KAAKlK,OAQrD,UAAUA,GAef,OAbIiB,EAASjB,KAEPqG,KAAKsB,QAAQsT,aAEfjb,EAAQA,EAAMka,eAGZ7T,KAAKsB,QAAQwT,aAEfnb,EAAQA,EAAMoa,gBAIXpa,EAGF,cAEL,OAAO,IAAI,GAAS,IAGf,QAEL,OAAO,IAAI,GAASsR,EAAUf,KAAKlK,KAAKsB,UAGnC,SAEL,OAAO,GAASwK,OAAO9L,MAGlB,SAEL,MAAO,GAGF,OAAO+L,GAEZ,MAAM,IAAExP,EAAG,IAAEC,EAAG,aAAEoX,EAAY,WAAEgB,EAAU,aAAEd,EAAY,WAAEgB,GAAe9U,KAAKsB,QACxE0P,EAAQ4C,GAAgBgB,EACxB3D,EAAQ6C,GAAgBgB,EAGxB3a,EAAI4R,EAFQ9M,EAAS1C,EAAK8W,IACdpU,EAASzC,EAAK8W,IACK,GAAG,GACxC,IAAInV,EAAM,GAEV,IAAK,IAAIzF,EAAI,EAAGA,EAAIyB,EAAGzB,IAErByF,GAAOoV,GAAkB2B,OAAOnJ,EAAI,EAAGwH,GAAkBnX,QAAQ,IAMnE,OAHI4U,IAAO7S,EAAMA,EAAI0V,eACjB5C,IAAO9S,EAAMA,EAAI4V,eAEd5V,EAGF,SAASyM,GAEd,OAAOA,EAGF,OAAOjR,GAEZ,OAAOA,GA/WK,GAAAoL,GAAKe,EAAGe,KAER,GAAA4E,WAAakF,GAEb,GAAA3E,UAAY4E,GAEZ,GAAAtF,SAAW,IAAI,GAAS,IAiCxB,GAAAW,iBAA2B,EAiB3B,GAAAC,YAAsB,ECrF/B,MAAMiJ,GAAgB,IAAIvQ,EAAWkB,EAAG5K,IAAM4K,EAAGiB,WAE3CqO,GAAe,IAAIxP,EAAUE,EAAG5K,IAAM4K,EAAGiB,WAEhD,GAAMoO,GAECE,GACb,CAIErb,OAAQ,GAAImN,IAAI,UAEhBmO,WAAY,GAAInO,IAAI,aAAc,GAAI,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAE5DoO,UAAW,GAAIpO,IAAI,YAAa,GAAI,CAAC,SAAU,CAAC,OAAS,GAAI,GAAI,CAAC,QAAS,QAI3EC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7B5N,IAAK,GAAI4N,IAAI,MAAO,GAAI,CAAC,MAAO,OAAQ,GAAI,GAAI,GAAI,CAAC,QAErDA,IAAK,GAAIA,IAAI,MAAO,CAAE5B,QAAS,CAAC,QAAU,CAAC,MAAO,MAAO,SAAU,GAAI,CAAC,iBAAkB,CAAC,SAAU,CAAC,QAEtGiQ,IAAK,GAAIrO,IAAI,MAAO,GAAI,CAAC,MAAO,QAEhCsO,OAAQ,GAAItO,IAAI,SAAU,CAAE5B,QAAS,CAAC,QAAU,CAAC,MAAO,QAExDmQ,KAAM,GAAIvO,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAE/D+O,OAAQ,GAAIpN,IAAI,SAAU,CAAE3B,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEnEvI,QAAS,GAAIkK,IAAI,UAAW,CAAE3B,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAErEmQ,MAAO,GAAIxO,IAAI,QAAS,CAAE3B,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEjEoQ,MAAO,GAAIzO,IAAI,QAAS,CAAE5B,QAAS,CAAC,QAAU,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEpEsQ,MAAO,GAAI1O,IAAI,QAAS,GAAK,CAAC,QAE9BM,IAAK,GAAIN,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAEpG0E,KAAM,GAAI/C,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,OAAQ,CAAC,WAAY,eAAgB,CAAC,MAAO,MAAO,SAAU,CAAC,WAAY,eAAgB,CAAC,QAEtIzI,IAAK,GAAIoK,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,CAAC,YAAa,gBAAiB,CAAC,MAAO,MAAO,SAAU,CAAC,YAAa,gBAAiB,CAAC,QAExIsQ,cAAe,GAAI3O,IAAI,QAAS,CAAE3B,WAAY,GAAK,CAAC,QAEpDuQ,gBAAiB,GAAI5O,IAAI,YAAa,CAAE3B,WAAY,GAAK,CAAC,UAAW,GAAI,GAAI,GAAI,CAAC,WAIlFkC,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BU,QAAS,GAAIV,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAEtGsC,WAAY,GAAIX,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAE1GkI,OAAQ,GAAIvG,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAErGmI,cAAe,GAAIxG,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAE7GoI,UAAW,GAAIzG,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAExGqI,iBAAkB,GAAI1G,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAIhHuC,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpCga,GAAajO,IAAI,OAAQkO,GAAOnL,MAChCkL,GAAajO,IAAI,OAAQkO,GAAOK,MAChCN,GAAajO,IAAI,SAAUkO,GAAOd,QAClCa,GAAajO,IAAI,UAAWkO,GAAOpY,SACnCmY,GAAajO,IAAI,QAASkO,GAAOM,OACjCP,GAAajO,IAAI,QAASkO,GAAOQ,OCzFjC,MAAMG,GAAY,EACZC,GAAc,EACdC,GAAkB,EASjB,MAAM,WAAiB,EAerB,cAAc9K,EAAatG,GAEhC,MAAM7K,EAAM6K,EAAMnB,QAAQyH,EAAK4K,KACzBrc,EAAQmL,EAAMnB,QAAQyH,EAAK6K,KAC3BzB,EAAY,IAAItZ,IAAIkQ,EAAK8K,IAAiBnZ,IAAI,EAAEF,EAAGD,KAAmB,CAC1E3C,EAAI4Q,SAAShO,GACblD,EAAMkR,SAASjO,MAGjB,OAAO,IAAI,GAAS,CAAE3C,MAAKN,QAAO6a,cAG7B,cAAclS,GAEnB,MAAM,IAAErI,EAAG,MAAEN,EAAK,UAAE6a,GAAclS,EAAKhB,QAEvC,MAAO,CACLtB,KAAK+E,GACL9K,EAAI6R,SACJnS,EAAMmS,SACNhR,MAAMkC,KAAKwX,EAAUvX,WAAWF,IAAI,EAAEF,EAAGD,KAAO,CAC9C3C,EAAI0Q,OAAO9N,GACXlD,EAAMgR,OAAO/N,MAOZ,kBAEL,OAAO,KAKF,mBAKA,QAEL,OAAO,GAASmI,GAGX,gBAEL,OAAO/E,KAAKsB,QAAQ3H,MAAMwc,gBAGrB,MAAM7T,GAEX,MAAM8T,EAAKpW,KAAKsB,QAAQkT,UAClB6B,EAAK/T,EAAKhB,QAAQkT,UAExBxU,KAAKsB,QAAQrH,IAAM,GAAMqc,MAAMtW,KAAKsB,QAAQrH,IAAKqI,EAAKhB,QAAQrH,KAC9D+F,KAAKsB,QAAQ3H,MAAQ,GAAM2c,MAAMtW,KAAKsB,QAAQ3H,MAAO2I,EAAKhB,QAAQ3H,OAElE,IAAK,MAAOM,EAAKN,KAAU0c,EAAGpZ,UAE5BmZ,EAAGjP,IAAIlN,EAAKN,GAIT,WAAWqJ,EAAkBE,EAAyBC,GAE3D,OAAOnD,KAAKsB,QAAQ3H,MAAM8K,WAAWzB,EAAME,EAAKC,GAG3C,YAAYD,GAEjB,OAAOlD,KAAKsB,QAAQ3H,MAAM4c,YAAYrT,GAGjC,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAAKsB,QAAQ3H,MAGf,YAEL,OAAO,EAGC,iBAAiB6H,EAAaF,EAAiC,IAEvE,KAAME,aAAiB,IAErB,OAAO,EAGT,MAAM,IAAEvH,EAAG,MAAEN,GAAUqG,KAAKsB,QAE5B,QAAIA,EAAQG,QAELxH,EAAI0H,aAAaH,EAAMF,QAAQrH,IAAKqH,KAMpC3H,EAAMgI,aAAaH,EAAMF,QAAQ3H,OAGnC,aAEL,OAAOqG,KAAKsB,QAAQ3H,MAAMmK,aAGrB,WAEL,OAAO9D,KAAKsB,QAAQ3H,MAAM6c,WAGrB,SAAYnW,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAASiW,SAAUzW,KAAKsB,QAAQrH,IAAM4G,GAAgBb,KAAKsB,QAAQrH,IAAM4G,GACvFR,EAASG,KAAK,GAASkW,WAAY1W,KAAKsB,QAAQ3H,MAAQkH,GAAgBb,KAAKsB,QAAQ3H,MAAQkH,KAI1F,gBAAgBL,GAErB,OAAOA,IAAS,GAASiW,SACrBzW,KAAKsB,QAAQrH,IACbuG,IAAS,GAASkW,WAChB1W,KAAKsB,QAAQ3H,MACb,KAGD,UAAU4H,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQrH,IAAI0S,UAAU3M,MAC3BA,KAAKsB,QAAQ3H,MAAMgT,UAAU3M,MAGxB,+BAKA,sBAEL,OAAOA,KAAKsB,QAAQ3H,MAAMgd,sBAGrB,wBAEL,OAAO3W,KAAKsB,QAAQ3H,MAAMid,wBAGrB,uBAEL,OAAO5W,KAAKsB,QAAQ3H,MAAMkd,uBAGrB,yBAAyB7U,EAAsBhF,EAAqBiF,GAGzE,OAAIjF,IAAS,GAASyZ,SAEb,GAAM/Q,GAAG2P,GAAOtY,IAAK,CAC1BA,IAAK,GAAMxD,IAAI,SACfud,aAAc9U,GACb,CACD/H,IAAK,QACLN,MAAO,gBAKF,GAAM+L,GAAG2P,GAAOtY,IAAK,CAC1BA,IAAK,GAAMxD,IAAI,SACfiF,UAAWwD,IAKV,QAAQ6B,GAEb,MAAM,UAAE2Q,EAAS,MAAE7a,GAAUqG,KAAKsB,QAElC,IAAK3H,EAAM+N,QAAQ7D,GAEjB,OAAO,EAGT,IAAK,MAAMkT,KAAiBvC,EAAUD,SAEpC,GAA+C,IAA3CtJ,EAAU3B,QAAQyN,EAAelT,GAEnC,OAAO,EAIX,OAAO,EAGF,UAAUlK,GAEf,OAAOqG,KAAKsB,QAAQ3H,MAAMqd,UAAUrd,GAG/B,cAEL,MAAM,IAAEM,EAAG,MAAEN,GAAUqG,KAAKsB,QAE5B,OAAO,IAAI,GAAS,CAClBrH,IAAKA,EAAIgd,cACTtd,MAAOA,EAAMsd,cACbzC,UAAW,IAAItZ,MAIZ,QAEL,MAAM,IAAEjB,EAAG,MAAEN,EAAK,UAAE6a,GAAcxU,KAAKsB,QAEvC,OAAO,IAAI,GAAS,CAClBrH,IAAKA,EAAIwS,QACT9S,MAAOA,EAAM8S,QACb+H,UAAW,IAAItZ,IAAIsZ,EAAUvX,aAI1B,SAEL,OAAO,GAAS6O,OAAO9L,MAGlB,SAEL,MAAM,MAAErG,EAAK,UAAE6a,GAAcxU,KAAKsB,QAC5B4V,EAAW1C,EAAUkB,OAAOyB,OAElC,OAAOD,EAAW1C,EAAUjb,IAAI2d,GAAYvd,EAAMK,SAG7C,OAAO+R,GAEZ,MAAMwI,EAASzZ,MAAMkC,KAAKgD,KAAKsB,QAAQkT,UAAUD,UAEjD,OAAOA,EAAOxI,EAAI,EAAGwI,EAAOnY,QAAQ,IAG/B,SAASwO,GAEd,OAAO5K,KAAKsB,QAAQ3H,MAAMkR,SAASD,GAG9B,OAAOjR,GAEZ,OAAOqG,KAAKsB,QAAQ3H,MAAMgR,OAAOhR,IAjRrB,GAAA8c,SAAW,MAEX,GAAAC,WAAa,QAEb,GAAA3R,GAAKe,EAAGK,KAER,GAAAsF,WAAa,IAAI7G,EAAWkB,EAAGK,KAAOL,EAAGiB,WAEzC,GAAAiF,UAAY,IAAIpG,EAAUE,EAAGK,KAAOL,EAAGiB,WAEvC,GAAAuE,SAAW,IAAI,GAAS,CAAErR,IAAK,GAASqR,SAAU3R,MAAO,GAAS2R,SAAUkJ,UAAW,IAAItZ,MA6B3F,GAAA+Q,kBAA4B,EAO5B,GAAAC,YAAsB,EC7DtC,MAAMkL,GAAiB,EAEhB,MAAM,WAA2B,EAiCtC,YAAmBzd,GAEjB0S,QACArM,KAAKrG,MAAQA,EAjCR,WAAWoT,EAAesK,GAE/B,OAAOtK,aAAa,IAAsBA,EAAEpT,QAAU0d,EAGjD,UAAUtK,GAEf,OAAOA,aAAa,GAKf,cAAc3B,EAAapI,GAEhC,MAAMrJ,EAAQ,GAAQ2R,SAAST,SAASO,EAAKgM,KAE7C,OAAO,IAAI,GAAmBzd,GAGzB,cAAcqJ,GAEnB,MAAMrJ,EAAQ,GAAQ2R,SAASX,OAAO3H,EAAKrJ,OAE3C,OAAOkB,EAAQlB,GACX,CAACqG,KAAK+E,GAAIpL,GACVA,EAWC,QAEL,OAAO,GAAmBoL,GAGrB,gBAEL,OAAO,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAmB+G,OAAO9L,MAG5B,QAEL,OAAO,IAAI,GAAmBiL,EAAUf,KAAKlK,KAAKrG,QAG7C,QAAQuJ,EAAyBC,GAEtC,MAAMxJ,EAAQqG,KAAKrG,MAEnB,GAAIiB,EAASjB,GAEX,OAAO,IAAI,GAAS,CAClBM,IAAK,GAASqR,SAAS2L,cACvBtd,MAAO,GAAS2R,SAAS2L,cACzBzC,UAAW,IAAItZ,IAAI,CAAC,CAACvB,EAAOA,OAIhC,GAAIe,EAASf,GAEX,OAAO,IAAI,GAAS,CAClBM,IAAK,GAAWqR,SAAS2L,cACzBtd,MAAO,GAAW2R,SAAS2L,cAC3BzC,UAAW,IAAItZ,IAAI,CAAC,CAACvB,EAAOA,OAIhC,MAAM2d,EAAYpU,EAAIqU,SAASvX,KAAKrG,OAOpC,OALI2d,GAEFA,EAAUE,8BAGLF,EAGF,SAAYjX,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAGT,SAAS2B,EAAyBC,EAAeK,KA7F1C,GAAAuB,GAAK,WChBrB,MAAM,GAAyB,IACzB,GAAgB,QAChB0S,GAAiB,EACjBC,GAAc,EACdC,GAAY,EACZ,GAAa,EACb,GAAc,EACd,GAAY,EAEX,MAAM,WAAsB,EA+CjC,YAAmBrJ,EAAkBhK,EAAmBsT,EAAiBxJ,EAAkBkB,EAAwB,GAAeC,EAAwB,IAExJlD,QACArM,KAAKsO,SAAWA,EAChBtO,KAAKsE,MAAQA,EACbtE,KAAK4X,IAAMA,EACX5X,KAAKoO,KAAOA,EACZpO,KAAKsP,cAAgBA,EACrBtP,KAAKuP,cAAgBA,EA1ChB,cAAcnE,EAAakB,GAEhC,MAAMgC,EAAWlD,EAAKqM,IAChBnT,EAAQgI,EAAMC,cAAcnB,EAAKsM,KACjCE,EAAMtL,EAAMC,cAAcnB,EAAKuM,KAC/BvJ,EAAO9B,EAAMC,cAAcnB,EAAK,KAChCkE,EAAgBlE,EAAK,KAAgB,GACrC5O,EAAMgT,SAASpE,EAAK,MAAepL,KAAKyP,eAE9C,OAAO,IAAI,GAAcnB,EAAUhK,EAAOsT,EAAKxJ,EAAMkB,EAAe9S,GAG/D,cAAcwG,GAEnB,MAAM7E,EAAM,CAAC6B,KAAK+E,GAAI/B,EAAKsL,SAAUtL,EAAKsB,MAAMwH,SAAU9I,EAAK4U,IAAI9L,SAAU9I,EAAKoL,KAAKtC,UACjF4D,EAAS1M,EAAKuM,gBAAkBvP,KAAKyP,eAS3C,OAPIzM,EAAKsM,gBAAkB,IAAiBI,IAC1CvR,EAAIM,KAAKuE,EAAKsM,eAEZI,GACFvR,EAAIM,KAAKuE,EAAKuM,eAGTpR,EAqBF,QAEL,OAAO,GAAc4G,GAGhB,cAAc7B,GAEnB,OAAOlH,KAAKQ,IAAIwD,KAAKsE,MAAMkI,cAActJ,GAAMlD,KAAK4X,IAAIpL,cAActJ,GAAMlD,KAAKoO,KAAK5B,cAActJ,IAAQ,EAGvG,WAEL,MAAO,CACL,CAAClD,KAAKsO,UAAW,GAAWhD,SAAS2L,cACrC,CAACjX,KAAKsP,eAAgB,EAAYhE,UAI/B,SAEL,OAAO,GAAcQ,OAAO9L,MAGvB,QAEL,OAAO,IAAI,GAAcA,KAAKsO,SAAUtO,KAAKsE,MAAMmI,QAASzM,KAAK4X,IAAInL,QAASzM,KAAKoO,KAAK3B,QAASzM,KAAKsP,cAAetP,KAAKuP,eAGrH,QAAQrM,EAAyB+G,GAEtC,MAAM,QAAE9G,GAAYD,EAAIqL,oBAAoBtE,EAAUjK,KAAK2P,YAErDvB,EAAOpO,KAAKoO,KAAKzK,QAAQT,EAAKC,GAEpC,OAAOiL,EAAO,GAAMjJ,SAASiJ,GAAQ,KAGhC,SAAY/N,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAcqX,WAAY7X,KAAKsE,MAAQzD,GAAgBb,KAAKsE,MAAQzD,GAClFR,EAASG,KAAK,GAAcsX,SAAU9X,KAAK4X,IAAM/W,GAAgBb,KAAK4X,IAAM/W,GAC5ER,EAASG,KAAK,GAAciO,UAAWzO,KAAKoO,KAAOvN,GAAgBb,KAAKoO,KAAOvN,KAI5E,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAc8U,WAC9B,CAAC,EAAG7X,KAAKsE,OACTvB,EAAM,KAAO,GAAc+U,SACzB,CAAC,EAAG9X,KAAK4X,KACT7U,EAAM,KAAO,GAAc0L,UACzB,CAAC,EAAGzO,KAAKoO,MACT,KAGH,UAAU7M,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKsE,MAAMqI,UAAU3M,MACrBA,KAAK4X,IAAIjL,UAAU3M,MACnBA,KAAKoO,KAAKzB,UAAU3M,MAGf,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAK4M,aAAa1J,EAAKC,EAAS,GAAWmI,SAAUtL,KAAKsE,MAAOd,GACjExD,KAAK4M,aAAa1J,EAAKC,EAAS,GAAWmI,SAAUtL,KAAK4X,IAAKpU,GAE/D,MAAMqM,EAAc3M,EAAI4M,WAAW3M,EAASnD,KAAK2P,YAEjD3P,KAAKoO,KAAK/K,SAASH,EAAK2M,EAAarM,GAGhC,KAAK8K,EAAkBhK,EAAwBsT,EAAsBxJ,EAAmBkB,EAAwBC,GA0BrH,OAxBAvP,KAAKsO,SAAWA,EAEhBtO,KAAKsE,MAAQ,GAAMuK,MAAMvK,GACzBtE,KAAKsE,MAAMqI,UAAU3M,MAErBA,KAAK4X,IAAM,GAAM/I,MAAM+I,GACvB5X,KAAK4X,IAAIjL,UAAU3M,MAEfoO,IAEFpO,KAAKoO,KAAOA,EACZpO,KAAKoO,KAAKzB,UAAU3M,OAGlBsP,IAEFtP,KAAKsP,cAAgBA,GAGnB5U,EAAS6U,KAEXvP,KAAKuP,cAAgBA,GAGhBvP,KAGF,QAAQsE,GAKb,OAHAtE,KAAKsE,MAAQ,GAAMuK,MAAMvK,GACzBtE,KAAKsE,MAAMqI,UAAU3M,MAEdA,KAGF,MAAM4X,GAKX,OAHA5X,KAAK4X,IAAM,GAAM/I,MAAM+I,GACvB5X,KAAK4X,IAAIjL,UAAU3M,MAEZA,KAGF,IAAIgD,GAKT,OAHAhD,KAAKoO,KAAOpL,EACZhD,KAAKoO,KAAKzB,UAAU3M,MAEbA,KAGF,aAAa/G,GAIlB,OAFA+G,KAAKsO,SAAWrV,EAET+G,KAGF,UAAU/G,GAIf,OAFA+G,KAAKsP,cAAgBrW,EAEd+G,KAGF,QAAQ+P,GAIb,OAFA/P,KAAKuP,cAAgBQ,EAEd/P,MA1MK,GAAA6X,WAAa,QAEb,GAAAC,SAAW,MAEX,GAAArJ,UAAY,OAEZ,GAAAgB,eAAiB,GAEjB,GAAA1K,GAAK,MCvBrB,MAAMgT,GAAa,EAEZ,MAAM,WAAsB,EA0BjC,YAAmB7X,GAEjBmM,QACArM,KAAKE,KAAOA,EAxBP,cAAckL,EAAakB,GAEhC,MAAMpM,EAAqBkL,EAAK2M,IAAYhb,IAAKib,GAAc1L,EAAMC,cAAcyL,IAEnF,OAAO,IAAI,GAAc9X,GAGpB,cAAc8C,GAEnB,MAAM9C,EAAO8C,EAAK9C,KAAKnD,IAAIgQ,GAAKA,EAAEjB,UAElC,MAAO,CAAC9L,KAAK+E,GAAI7E,GAGZ,cAAcA,GAEnB,OAAO,IAAI,GAAc,GAAM2O,MAAM3O,IAWhC,QAEL,OAAO,GAAc6E,GAGhB,cAAc7B,GAEnB,OAAOlD,KAAKE,KAAKxB,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAO,GAGpE,WAEL,OAAO,KAGF,SAEL,OAAO,GAAc4I,OAAO9L,MAGvB,QAEL,OAAO,IAAI,GAAcA,KAAKE,KAAKnD,IAAKvC,GAAMA,EAAEiS,UAG3C,QAAQvJ,EAAyBC,GAEtC,OAAOD,EAAI+U,YAAYjY,KAAKE,KAAMiD,GAG7B,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAKE,KAAKsE,QAAQ,CAACxB,EAAM6F,IACvBxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAKE,KAAK8M,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKE,KAAK8M,OAAOnE,EAAO,MAKlH,sBAAsB9F,GAE3B,OAAOrI,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKE,KAAK9D,OAC9C,CAAC,EAAG4D,KAAKE,KAAK6C,EAAM,KACpB,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKE,KAAKsE,QAAQuI,GAAKA,EAAEJ,UAAU3M,OAG9B,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAKkY,aAAahV,EAAKC,EAASA,EAASnD,KAAKE,KAAMsD,GAG/C,IAAIR,GAET,MAAM4L,EAAS/T,EAAQmI,GACnBA,EACA,CAACA,GAEL,IAAK,MAAMmV,KAAavJ,EACxB,CACE,MAAM1M,EAAO,GAAM2M,MAAMsJ,GACzBnY,KAAKE,KAAKzB,KAAKyD,GACfA,EAAKyK,UAAU3M,MAGjB,OAAOA,MApGK,GAAA+E,GAAK,MCNrB,MAAM,GAAa,EAEZ,MAAM,WAA0B,EAqBrC,YAAmB9L,GAEjBoT,QACArM,KAAK/G,KAAOA,EAjBP,cAAcmS,EAAakB,GAEhC,MAAMrT,EAAOmS,EAAK,IAElB,OAAO,IAAI,GAAkBnS,GAGxB,cAAc+J,GAEnB,MAAO,CAAChD,KAAK+E,GAAI/B,EAAK/J,MAWjB,QAEL,OAAO,GAAkB8L,GAGpB,cAAc7B,GAEnB,OAAO,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAkB4I,OAAO9L,MAG3B,QAEL,OAAO,IAAI,GAAkBA,KAAK/G,MAG7B,QAAQiK,EAAyBC,GAEtC,MAAMiI,EAAOlI,EAAIkV,QAAQpY,KAAK/G,MAE9B,OAAOmS,EAAOA,EAAKiN,SAAW,GAAS/M,SAGlC,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAGT,SAAS2B,EAAyBC,EAAeK,GAEjDxD,KAAK/G,KASAiK,EAAIkV,QAAQpY,KAAK/G,OAEzBuK,EAAQ,CACNlB,KAAMM,EAAe0V,aACrBpU,SAAUvB,EAAmB0B,KAC7BlB,UACA5B,OAAQvB,OAbVwD,EAAQ,CACNlB,KAAMM,EAAe2V,kBACrBrU,SAAUvB,EAAmB0B,KAC7BlB,UACA5B,OAAQvB,QA1EA,GAAA+E,GAAK,OAEI,GAAAgJ,SAAW,IAAI,GAAkB,ICVnD,MAAMyK,GAAmB,IAAI5T,EAAWkB,EAAGC,OAASD,EAAGiB,WAEjD0R,GAAkB,IAAI7S,EAAUE,EAAGC,OAASD,EAAGiB,WAEtD,GAAMyR,GAECE,GACb,CAEEzB,YAAa,GAAI9P,IAAI,cAAe,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAE/D5N,IAAK,GAAI4N,IAAI,MAAO,GAAI,CAAC,QAAS,CAAC,SAAU,CAAC,YAAa,CAAC,SAAU,CAAC,SAEvElJ,OAAQ,GAAIkJ,IAAI,SAAU,GAAI,CAAC,OAAQ,YAAa,GAAI,GAAI,GAAI,CAAC,SAEjEwR,KAAM,GAAIxR,IAAI,OAAQ,CAAE5B,QAAS,CAAC,aAAe,CAAC,OAAQ,YAAa,GAAI,GAAI,GAAI,CAAC,SAEpFhI,OAAQ,GAAI4J,IAAI,SAAU,CAAE5B,QAAS,CAAC,aAAe,CAAC,OAAQ,YAAa,GAAI,GAAI,GAAI,CAAC,SAExFqT,WAAY,GAAIzR,IAAI,aAAc,CAAE3B,WAAY,EAAGD,QAAS,CAAC,WAAY,YAAe,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,aAE1JsT,WAAY,GAAI1R,IAAI,aAAc,CAAE5B,QAAS,CAAC,WAAY,YAAc,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,aAE1IuT,cAAe,GAAI3R,IAAI,gBAAiB,CAAE5B,QAAS,CAAC,WAAY,YAAc,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,aAEhJwT,aAAc,GAAI5R,IAAI,eAAgB,CAAE3B,WAAY,EAAGD,QAAS,CAAC,aAAe,CAAC,OAAQ,WAAY,YAAa,GAAI,GAAI,GAAI,CAAC,OAAQ,aAEvIyT,WAAY,GAAI7R,IAAI,aAAc,CAAE3B,WAAY,GAAK,CAAC,OAAQ,WAAY,YAAa,GAAI,GAAI,GAAI,CAAC,OAAQ,aAE5GyT,UAAW,GAAI9R,IAAI,YAAa,GAAI,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,cC7B3F+R,GAAmB,IAAItU,EAAWkB,EAAG1M,OAAS0M,EAAGiB,WAEjDoS,GAAkB,IAAIvT,EAAUE,EAAG1M,OAAS0M,EAAGiB,WAEtD,GAAMmS,GAECE,GACb,CAIEpf,OAAQ,GAAImN,IAAI,UAIhBC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7BqO,IAAK,GAAIrO,IAAI,MAAO,GAAI,CAAC,SAAU,QAEnC5N,IAAK,GAAI4N,IAAI,MAAO,GAAI,CAAC,SAAU,QAEnCA,IAAK,GAAIA,IAAI,MAAO,CAAE5B,QAAS,CAAC,WAAa,CAAC,SAAU,MAAO,SAAU,GAAI,CAAC,iBAAkB,GAAI,CAAC,WAErGkQ,OAAQ,GAAItO,IAAI,MAAO,CAAE5B,QAAS,CAAC,WAAa,CAAC,SAAU,QAE3DkC,IAAK,GAAIN,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC+C,KAAM,GAAI/C,IAAI,OAAQ,GAAI,CAAC,UAAW,GAAI,GAAI,GAAI,CAAC,WAEnDmP,MAAO,GAAInP,IAAI,QAAS,GAAI,CAAC,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,GAAI,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MAItFO,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BU,QAAS,GAAIV,IAAI,IAAK,GAAI,CAAC,QAAS,SAEpCW,WAAY,GAAIX,IAAI,KAAM,GAAI,CAAC,QAAS,SAExCuG,OAAQ,GAAIvG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCwG,cAAe,GAAIxG,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CyG,UAAW,GAAIzG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtC0G,iBAAkB,GAAI1G,IAAI,KAAM,GAAI,CAAC,QAAS,SAI9CY,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpC+d,GAAgBhS,IAAI,OAAQiS,GAAUlP,MC9DtC,MAAMmP,GAAc,EAOb,MAAM,WAA4D,EAahE,cAAcjO,EAAatG,GAEhC,MAAMjG,EAAQd,EAAUqN,EAAKiO,IAAc1f,GAASmL,EAAMnB,QAAQhK,IAElE,OAAO,IAAI,GAAW,CAAEkF,UAGnB,cAAcyD,GAEnB,MAAMzD,EAAQd,EAAUuE,EAAKhB,QAAQzC,MAAOrE,GAAKA,EAAEsR,UAEnD,MAAO,CAAC9L,KAAK+E,GAAIlG,GAKZ,gBAAgBuM,EAAWC,GAEhC,OAAK9P,EAAS6P,IAAkB,OAATA,EAKhB,IAAI,GAAW,CACpBvM,MAAOd,EAAUqN,EAAMpS,GAAKqS,EAAUkM,SAASve,MAJxC,KAUJ,kBAKLiS,EAAUqO,QAAQ,CAChBtO,SAJe,EAKfH,SAAU,CAACD,EAAM2O,KACf,GAAIhe,EAASqP,GACX,OAAO7M,EAAU6M,EAAM2O,IAG3B5O,OAAQ,CAACC,EAAM4O,KACb,GAAIje,EAASqP,GACX,OAAO7M,EAAU6M,EAAM4O,MAK7BvO,EAAUwO,UAAU,CAClBzO,SAlBe,EAmBfd,KAAM,CAACpO,EAAGoO,EAAMF,KACd,GAAIzO,EAASO,GAAI,CACf,MAAM4d,EAAiB,GAEvB1P,EAAclO,EAAG4d,GAEjB,IAAK,MAAM5a,KAAQhD,EACjB4d,EAAUxP,EAAKpL,IAASoL,EAAKpO,EAAEgD,IAGjC,OAAO4a,MAKbzO,EAAUM,WAAW,CACnBP,SAnCe,EAoCf1I,KAnCwB,SAoCxBgH,QAAS,CAAC5N,EAAGC,EAAG2N,KACd,GAAU,OAAN5N,EAAY,OAAO,EACvB,GAAU,OAANC,EAAY,OAAQ,EAExB,IAAI4N,EAAO,EACPC,EAAO,EAEX,IAAK,MAAM1K,KAAQpD,EACXoD,KAAQnD,GACZ4N,IAIJ,IAAK,MAAMzK,KAAQnD,EACXmD,KAAQpD,GACZ8N,IAIJ,IAAK,MAAM1K,KAAQpD,EACjB,GAAIoD,KAAQnD,EACZ,CACE,MAAM5C,EAAIuQ,EAAQ5N,EAAEoD,GAAOnD,EAAEmD,IAEzB/F,EAAI,GAAGwQ,IACPxQ,EAAI,GAAGyQ,IAIf,OAAOyB,EAAU0O,WAAWpQ,EAAMC,MAItCyB,EAAUO,UAAU,CAClBR,SAvEe,EAwEf1I,KAvEwB,SAwExBqH,OAAQ,CAACjO,EAAGC,EAAGgO,KACb,GAAW,OAANjO,IAAuB,OAANC,GAAa,OAAO,EAE1C,IAAK,MAAMmD,KAAQpD,EACjB,KAAMoD,KAAQnD,GACZ,OAAO,EAIX,IAAK,MAAMmD,KAAQnD,EAAG,CACpB,KAAMmD,KAAQpD,GACZ,OAAO,EACF,IAAKiO,EAAOjO,EAAEoD,GAAOnD,EAAEmD,IAC5B,OAAO,EAIX,OAAO,KAKN,QAEL,OAAO,GAAWiG,GAGb,gBAEL,OAAO,GAAW0G,WAAW1O,IAGxB,MAAMuF,GAEX,MAAMsX,EAAK5Z,KAAKsB,QAAQzC,MAClBgb,EAAKvX,EAAKhB,QAAQzC,MAExB,IAAK,MAAMC,KAAQ8a,EAEb9a,KAAQ+a,GAAMA,EAAG/a,GAEnB8a,EAAG9a,GAAQ,GAAMwX,MAAMsD,EAAG9a,GAAO+a,EAAG/a,IAE7B8a,EAAG9a,KAEV8a,EAAG9a,GAAQ,GAAMqG,SAASyU,EAAG9a,KAIjC,IAAK,MAAMA,KAAQ+a,EAEX/a,KAAQ8a,IAAOC,EAAG/a,KAEtB8a,EAAG9a,GAAQ,GAAMqG,SAAS0U,EAAG/a,KAK5B,WAAWkE,EAAkBE,EAAyBC,GAE3D,GAAI,GAAmBgR,GAAGnR,IAEpBpI,EAASoI,EAAKrJ,OAEhB,OAAOqG,KAAKsB,QAAQzC,MAAMmE,EAAKrJ,OAInC,IAAI2a,EAAWtR,EAAKW,QAAQT,EAAKC,GAEjC,GAAImR,EACJ,CAGE,IAFAA,EAAWA,EAASvQ,yBAEI,GACxB,CACE,MAAMe,EAAQvG,EAAayB,KAAKsB,QAAQzC,OAExC,OAAO,GAAMib,UAAUhV,EAAO,GAASwG,UAGzC,GAAIgJ,aAAoB,GACxB,CACE,MACMxP,EADShK,MAAMkC,KAAKsX,EAAShT,QAAQkT,UAAUD,UAChCxX,IAAKvC,GAAMwF,KAAKsB,QAAQzC,MAAMrE,IAAIyG,OAAOrH,KAAOA,GAErE,OAAO,GAAMkgB,UAAUhV,EAAO,GAASwG,WAI3C,OAAOtL,KAAK+Z,kBAGP,YAAY7W,GAEjB,MAAMrE,EAAQN,EAAayB,KAAKsB,QAAQzC,OAExC,MAAO,IACFN,EAAayB,KAAKsB,QAAQzC,MAAO,CAAClF,EAAOM,KAAQ,CAAGA,MAAKN,WAC5D,CACEM,IAAK,IAAI,GAAS,CAChBA,IAAK,GAASqR,SACd3R,MAAO,GAAS2R,SAChBkJ,UAAW,IAAItZ,IACbqD,EAAayB,KAAKsB,QAAQzC,MAAO,CAACC,EAAM7E,IAAQ,CAACA,EAAKA,OAG1DN,MAAO,GAAMmgB,UAAUjb,EAAO,GAASyM,WAEzC,CACErR,IAAK,GAASqR,SACd3R,MAAO,GAAMwL,SAAS,GAAM2U,UAAUjb,EAAO,GAASyM,aAKrD,aAAa3R,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGF,SAAYK,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1B5B,EAAW4B,KAAKsB,QAAQzC,MACtB,CAACyD,EAAMxD,IAASuB,EAASG,KAAK1B,EAAMwD,EAAOzB,GAAgBb,KAAKsB,QAAQzC,MAAMC,GAAQ+B,EAAa,WAAab,KAAKsB,QAAQzC,MAAMC,MAKlI,gBAAgB0B,GAErB,OAAOR,KAAKsB,QAAQzC,MAAM2B,IAAS,KAG9B,UAAUe,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdnD,EAAW4B,KAAKsB,QAAQzC,MAAOjF,GAAKA,EAAIA,EAAE+S,UAAU3M,MAAQ,GAGvD,8BAEL5B,EAAW4B,KAAKsB,QAAQzC,MAAOjF,GAAKA,EAAIA,EAAE4d,8BAAgC,GAGlE,iBAAiBhW,EAAaF,GAEtC,KAAME,aAAiB,IAErB,OAAO,EAGT,MAAM3C,EAAQmB,KAAKsB,QAAQzC,MAE3B,IAAK,MAAMC,KAAQD,EAEjB,GAAIC,IAAS,GAAWkb,iBAKnBnb,EAAMC,GAAX,CAKA,IAAK0C,EAAMF,QAAQzC,MAAMC,GAEvB,OAAO,EAGT,IAAKD,EAAMC,GAAM6C,aAAaH,EAAMF,QAAQzC,MAAMC,GAAOwC,GAEvD,OAAO,EAIX,MAAM2Y,EAAWja,KAAK+Z,kBAEtB,GAAIzY,EAAQG,OAEV,IAAK,MAAM3C,KAAQ0C,EAAMF,QAAQzC,MAE/B,IAAKA,EAAMC,IAAS0C,EAAMF,QAAQzC,MAAMC,GAEtC,OAAO,OAIR,GAAImb,EAEP,IAAK,MAAMnb,KAAQ0C,EAAMF,QAAQzC,MAE/B,IAAKA,EAAMC,IAAS0C,EAAMF,QAAQzC,MAAMC,KAAUmb,EAAStY,aAAaH,EAAMF,QAAQzC,MAAMC,GAAOwC,GAEjG,OAAO,EAKb,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,sBAEL,OAAO,GAAMlH,OACX2D,EAAUiC,KAAKsB,QAAQzC,MAAQjF,GAAMA,EAAIA,EAAE+c,sBAAwB,GAAMuD,SAItE,wBAEL,OAAO,GAAM7S,IACX,GAAM3B,GAAG0T,GAAU1R,QAAS,CAC1B/N,MAAO,GAAMJ,IAAI,cAEhBgF,EAAayB,KAAKsB,QAAQzC,MAAO,CAACjF,EAAGkF,IACtC,GAAM1G,OAAO,CACXuB,MAAO,GAAMJ,IAAI,QAASuF,KACzBqb,IACDvgB,EAAIA,EAAEgd,wBAA0B,GAAMhL,UAMvC,uBAEL,OAAO,GAAMtE,MACR/I,EAAayB,KAAKsB,QAAQzC,MAAO,CAACjF,EAAGkF,IACtC,GAAM1G,OAAO,CACXuB,MAAO,GAAMJ,IAAI,QAASuF,GAC1B+E,KAAM,GAAMtK,IAAI,OAAQuF,KACvBqb,IACDvgB,EAAIA,EAAEid,uBAAyB,GAAMjL,UAMtC,yBAAyB5J,EAAsBhF,EAAqBiF,GAGzE,MAAMmY,EAAUpd,QACVqd,EAAQpY,QAEd,OAAKmY,GAAWC,EAEP,GAAMjiB,OAAO,CAAEmJ,OAAQ,GAAMhI,IAAI,UACtC,GAAMmM,GAAG0T,GAAUjS,IAAK,CACtB/M,OAAQ,GAAMb,IAAI,SAClBU,IAAKgI,EACLtI,MAAOqI,KAIJoY,IAAYC,EAEZ,GAAMjM,KACX,GAAM1I,GAAG0T,GAAU3D,OAAQ,CACzBrb,OAAQ,GAAMb,IAAI,SAClBU,IAAK+C,IAEP,GAAMzD,IAAI,UAGLyD,IAASiF,EAET,GAAMmM,KACX,GAAM1I,GAAG0T,GAAUjS,IAAK,CACtB/M,OAAQ,GAAMb,IAAI,SAClBU,IAAKgI,EACLtI,MAAO,GAAMJ,IAAI,QAASyD,KAE5B,GAAM0I,GAAG0T,GAAU3D,OAAQ,CACzBrb,OAAQ,GAAMb,IAAI,SAClBU,IAAK+C,IAEP,GAAMzD,IAAI,UAGLyD,IAASiF,GAAMmY,EAEf,GAAMhM,KACX,GAAM5Q,OAAO,QAASR,GACnBiF,GAAGD,EAAU,SAChB,GAAMzI,IAAI,UAIPyI,EAGF,QAAQrI,GAEb,IAAK4B,EAAS5B,GAEZ,OAAO,EAGT,MAAMkF,EAAQmB,KAAKsB,QAAQzC,MAE3B,IAAK,MAAMC,KAAQD,EAEjB,GAAIC,IAAS,GAAWkb,iBAKnBnb,EAAMC,KAKND,EAAMC,GAAM4I,QAAQ/N,EAAMmF,IAE7B,OAAO,EAIX,MAAMmb,EAAWja,KAAK+Z,kBAEtB,GAAIE,EAEF,IAAK,MAAMnb,KAAQnF,EAEjB,IAAKkF,EAAMC,KAAUmb,EAASvS,QAAQ/N,EAAMmF,IAE1C,OAAO,EAKb,OAAO,EAGF,UAAUnF,GAEf,OAAOA,EAGF,cAEL,OAAO,IAAI,GAAW,CAAEkF,MAAO,KAG1B,QAEL,OAAO,IAAI,GAAc,CACvBA,MAAOd,EAAUiC,KAAKsB,QAAQzC,MAAOrE,GAAKA,EAAIA,EAAEiS,QAAUjS,KAIvD,SAEL,OAAO,GAAWsR,OAAO9L,MAGpB,SAEL,OAAO5G,OAAOY,OAAO,MAGhB,OAAO+R,GAEZ,MAAM,MAAElN,GAAUmB,KAAKsB,QACjBnD,EAAW/E,OAAOY,OAAO,MAE/B,IAAK,MAAM8E,KAAQD,EAEbA,EAAMC,KAERX,EAAIW,GAAQD,EAAMC,GAAMwb,OAAOvO,IAInC,OAAO5N,EAGF,SAASyM,GAEd,OAAO7M,EAAU6M,EAAM,CAACjR,EAAOM,KAC7B,MAAMsgB,EAAWva,KAAKsB,QAAQzC,MAAM5E,GAEpC,OAAOsgB,EAAWA,EAAS1P,SAASlR,GAASA,IAI1C,OAAOA,GAEZ,OAAOoE,EAAUpE,EAAO,CAAC6gB,EAAUvgB,KACjC,MAAMsgB,EAAWva,KAAKsB,QAAQzC,MAAM5E,GAEpC,OAAOsgB,EAAWA,EAAS5P,OAAO6P,GAAYA,IAI3C,kBAEL,OAAOxa,KAAKsB,QAAQzC,MAAM,GAAWmb,kBAAoB,MAnhB7C,GAAAA,gBAAkB,IAElB,GAAAjV,GAAKe,EAAG1M,OAER,GAAAqS,WAAayN,GAEb,GAAAlN,UAAYmN,GAEZ,GAAA7N,SAAW,IAAI,GAAW,CAAEzM,MAAO,KAgBnC,GAAAoN,iBAA2B,EAc3B,GAAAC,YAAsB,ECtDtC,MAAM,GAAa,EAEZ,MAAM,WAAmB,EA8C9B,YAAmBjT,EAAcwhB,GAE/BpO,MAAMpT,GAEN+G,KAAKya,SAAWA,EArCX,cAAcrP,EAAatG,GAEhC,MAAMxC,EAAO8I,EAAK,IAElB,OAAO,IAAI,GAAY9I,EAAMwC,GAGxB,cAAcxC,GAEnB,MAAO,CAACtC,KAAK+E,GAAIzC,EAAKhB,SAKjB,gBAAgB8J,EAAWC,GAEhC,OAAO,KAKF,mBAKA,WAAWpS,EAAcwhB,GAE9B,OAAO,IAAI,GAAWxhB,EAAMwhB,GAYvB,UAEL,OAAOza,KAAKya,SACRza,KAAKya,SAAS9W,QAAQ3D,KAAKsB,QAAS,GAASgK,UAC7C,GAAWA,SAGV,gBAEL,OAAOtL,KAAK2D,UAAUwS,gBAGjB,QAEL,OAAO,GAAWpR,GAGb,MAAMzC,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,OAAOnD,KAAK2D,UAAUc,WAAWzB,EAAME,EAAKC,GAGvC,YAAYD,GAEjB,OAAOlD,KAAK2D,UAAU4S,YAAYrT,GAG7B,aAAavJ,GAElB,OAAOqG,KAAK2D,UAAU+W,aAAa/gB,GAG9B,oBAEL,OAAOqG,KAAK2D,UAAU/B,oBAGd,iBAAiBJ,EAAaF,GAEtC,OAAOE,aAAiB,GACpBxB,KAAK2D,UAAUhC,aAAaH,EAAMmC,UAAWrC,GAC7CtB,KAAK2D,UAAUhC,aAAaH,EAAOF,GAGlC,aAEL,OAAOtB,KAAK2D,UAAUG,aAGjB,WAEL,OAAO9D,KAAK2D,UAAU6S,WAGd,oBAER,OAAO,EAGF,SAAYnW,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BK,EAASG,KAAK,GAAWma,YAAa3a,KAAK2D,UAAY9C,GAAgBA,aAAuB,GAAab,KAAKsB,QAAUT,EAAYS,QAAU,IAI7I,gBAAgBd,GAErB,OAAOA,IAAS,GAAWma,YACvB3a,KAAK2D,UACL,KAGC,UAAUpC,EAAe,MAE9BvB,KAAKuB,OAASA,EAGT,+BAKA,sBAEL,OAAOvB,KAAK2D,UAAUgT,sBAGjB,wBAEL,OAAO3W,KAAK2D,UAAUiT,wBAGjB,uBAEL,OAAO5W,KAAK2D,UAAUkT,uBAGjB,yBAAyB7U,EAAsBhF,EAAqBiF,GAGzE,OAAOD,EAGF,QAAQrI,GAEb,OAAOqG,KAAK2D,UAAU+D,QAAQ/N,GAGzB,UAAUA,GAEf,OAAOqG,KAAK2D,UAAUqT,UAAUrd,GAG3B,cAEL,OAAO,IAAI,GAAWqG,KAAKsB,QAAStB,KAAKya,UAGpC,QAEL,OAAO,IAAI,GAAWza,KAAKsB,QAAStB,KAAKya,UAGpC,SAEL,OAAO,GAAW3O,OAAO9L,MAGpB,SAEL,OAAOA,KAAK2D,UAAU3J,SAGjB,OAAO+R,GAEZ,OAAO/L,KAAK2D,UAAU2W,OAAOvO,GAGxB,SAASnB,GAEd,OAAO5K,KAAK2D,UAAUkH,SAASD,GAG1B,OAAOjR,GAEZ,OAAOqG,KAAK2D,UAAUgH,OAAOhR,IAzMjB,GAAAghB,YAAc,SAEd,GAAA5V,GAAKe,EAAGC,OAER,GAAA0F,WAAa+M,GAEb,GAAAxM,UAAYyM,GAEZ,GAAAnN,SAAW,IAAI,GAAW,GAAI,MAc9B,GAAAW,kBAA4B,EAO5B,GAAAC,YAAsB,ECpCtC,MAAM,GAAa,EAEZ,MAAM,WAA4B,EAqBvC,YAAmBjT,GAEjBoT,QACArM,KAAK/G,KAAOA,EAjBP,cAAcmS,EAAakB,GAEhC,MAAMrT,EAAOmS,EAAK,IAElB,OAAO,IAAI,GAAoBnS,GAG1B,cAAc+J,GAEnB,MAAO,CAAChD,KAAK+E,GAAI/B,EAAK/J,MAWjB,QAEL,OAAO,GAAoB8L,GAGtB,cAAc7B,GAEnB,OAAO,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAoB4I,OAAO9L,MAG7B,QAEL,OAAO,IAAI,GAAoBA,KAAK/G,MAG/B,QAAQiK,EAAyBC,GAEtC,OAAO,IAAI,GAAWnD,KAAK/G,KAAMiK,GAG5B,SAAY7C,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAGT,SAAS2B,EAAyBC,EAAeK,GAEjDxD,KAAK/G,KASAiK,EAAI0X,UAAU5a,KAAK/G,OAE3BuK,EAAQ,CACNlB,KAAMM,EAAeiY,aACrB3W,SAAUvB,EAAmB0B,KAC7BlB,UACA5B,OAAQvB,OAbVwD,EAAQ,CACNlB,KAAMM,EAAekY,kBACrB5W,SAAUvB,EAAmB0B,KAC7BlB,UACA5B,OAAQvB,QAxEA,GAAA+E,GAAK,SAEI,GAAAgJ,SAAW,IAAI,GAAoB,ICN5D,MAAM,GAAa,EAEZ,MAAM,WAA8B,EAqBzC,YAAmB9U,GAEjBoT,QACArM,KAAK/G,KAAOA,EAjBP,cAAcmS,EAAakB,GAEhC,MAAMrT,EAAOmS,EAAK,IAElB,OAAO,IAAI,GAAsBnS,GAG5B,cAAc+J,GAEnB,MAAO,CAAChD,KAAK+E,GAAI/B,EAAK/J,MAWjB,QAEL,OAAO,GAAsB8L,GAGxB,cAAc7B,GAEnB,OAAO,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAsB4I,OAAO9L,MAG/B,QAEL,OAAO,IAAI,GAAsBA,KAAK/G,MAGjC,QAAQiK,EAAyBC,GAEtC,OAAO,IAAI,GAAS,CAClBlJ,IAAK,GAASqR,SACd3R,MAAO,GAAS2R,SAChBkJ,UAAW,IAAItZ,IAAI,CACjB,CAAC,WAAY8E,KAAK/G,UAKjB,SAAYoH,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAGT,SAAS2B,EAAyBC,EAAeK,GAEjDxD,KAAK/G,KASAiK,EAAI6X,YAAY/a,KAAK/G,OAE7BuK,EAAQ,CACNlB,KAAMM,EAAeoY,iBACrB9W,SAAUvB,EAAmB0B,KAC7BlB,UACA5B,OAAQvB,OAbVwD,EAAQ,CACNlB,KAAMM,EAAeqY,sBACrB/W,SAAUvB,EAAmB0B,KAC7BlB,UACA5B,OAAQvB,QA9EA,GAAA+E,GAAK,WAEI,GAAAgJ,SAAW,IAAI,GAAsB,ICH9D,MAAMmN,GAAc,EACdC,GAAkB,EAEjB,MAAM,WAAqB,EAiChC,YAAmBC,EAAmCC,GAEpDhP,QACArM,KAAKob,MAAQA,EACbpb,KAAKqb,UAAYA,EAxBZ,cAAcjQ,EAAakB,GAEhC,MAAM8O,EAAQhQ,EAAK8P,IAAane,IAAI,EAAE8G,EAAMzD,KAAwB,CAACkM,EAAMC,cAAc1I,GAAOyI,EAAMC,cAAcnM,KAC9Gib,EAAY/O,EAAMC,cAAcnB,EAAK+P,KAE3C,OAAO,IAAI,GAAaC,EAAOC,GAG1B,cAAcrY,GAEnB,MAAMoY,EAAQpY,EAAKoY,MAAMre,IAAI,EAAE8G,EAAMzD,KAAY,CAACyD,EAAKiI,SAAU1L,EAAO0L,WAExE,OAAO,GAAmB0J,IAAIxS,EAAKqY,eAAW/c,GAC1C,CAAC0B,KAAK+E,GAAIqW,GACV,CAACpb,KAAK+E,GAAIqW,EAAOpY,EAAKqY,UAAUvP,UAa/B,QAEL,OAAO,GAAa/G,GAGf,cAAc7B,GAEnB,OAAOlD,KAAKob,MAAM1c,OAChB,CAAClC,GAAMqH,EAAMzD,KAAYpE,KAAKQ,IAC5BA,EACAqH,EAAK2I,cAActJ,GACnB9C,EAAOoM,cAActJ,IAEvBlD,KAAKqb,UAAU7O,cAActJ,IAI1B,WAEL,OAAO,KAGF,SAEL,OAAO,GAAa4I,OAAO9L,MAGtB,QAEL,OAAO,IAAI,GAAaA,KAAKob,MAAMre,IAAI,EAAEsS,EAAWiM,KAAU,CAACjM,EAAU5C,QAAS6O,EAAK7O,UAAWzM,KAAKqb,UAAU5O,SAG5G,QAAQvJ,EAAyBC,GAEtC,MAAM2B,EAAQ9E,KAAKob,MAChBre,IAAI,EAAE8G,EAAMlK,KAAWA,GACvB4hB,OAAOvb,KAAKqb,WACZpa,OAAO8L,KAAOA,GACdhQ,IAAIgQ,GAAKA,EAAEpJ,QAAQT,EAAKC,IACxBlC,OAAOrH,KAAOA,GAGjB,OAAO,GAAMkgB,UAAUhV,EAAO,GAASwG,UAGlC,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAagb,WAAY,IACrCxb,KAAKob,MAAM5W,QAAQ,EAAE6K,EAAWjP,GAASyI,IACvCxI,EAASG,KAAKqI,EAAO,KACnBxI,EAASG,KAAK,GAAaib,QAASpM,EAAYxO,GAAgBb,KAAKob,MAAMvS,GAAOmE,OAAO,EAAG,EAAGnM,IAC/FR,EAASG,KAAK,GAAakb,UAAWtb,EAASS,GAAgBb,KAAKob,MAAMvS,GAAOmE,OAAO,EAAG,EAAGnM,QAIhGb,KAAKqb,YAAc,GAAatN,UAClC1N,EAASG,KAAK,GAAamb,UAAW3b,KAAKqb,UAAYxa,GAAgBb,KAAKqb,UAAYxa,KAMvF,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAayY,WAC7B9gB,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKob,MAAMhf,OAC1C2G,EAAM,KAAO,GAAa0Y,QACxB,CAAC,EAAGzb,KAAKob,MAAMrY,EAAM,IAAI,IACzBA,EAAM,KAAO,GAAa2Y,UACxB,CAAC,EAAG1b,KAAKob,MAAMrY,EAAM,IAAI,IACzB,KACJ,KACFA,EAAM,KAAO,GAAa4Y,UACxB,CAAC,EAAG3b,KAAKqb,WACT,KAID,UAAU9Z,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKob,MAAM5W,QAAQ,EAAE6K,EAAWjP,MAC9BiP,EAAU1C,UAAU3M,MACpBI,EAAOuM,UAAU3M,QAGnBA,KAAKqb,UAAU1O,UAAU3M,MAGpB,SAASkD,EAAyBC,EAAeK,GAEtD,MAAMyJ,EAAe,EAAY3B,SAEjCtL,KAAKob,MAAM5W,QAAQ,EAAE6K,EAAWjP,MAE9BJ,KAAK4M,aAAa1J,EAAKC,EAAS8J,EAAcoC,EAAW7L,GAEzDpD,EAAOiD,SAASH,EAAKC,EAASK,KAGhCxD,KAAKqb,UAAUhY,SAASH,EAAKC,EAASK,GAGjC,GAAG6L,EAAuBjB,GAW/B,OATApO,KAAKob,MAAM3c,KAAK,CAAC4Q,EAAWjB,GAAQ,GAAaL,WAEjDsB,EAAU1C,UAAU3M,MAEhBoO,GAEFA,EAAKzB,UAAU3M,MAGVA,KAGF,KAAKoO,GAMV,OAJApO,KAAKob,MAAMpb,KAAKob,MAAMhf,OAAS,GAAG,GAAKgS,EAEvCA,EAAKzB,UAAU3M,MAERA,KAGF,OAAOqP,EAAuBjB,GAWnC,OATApO,KAAKob,MAAM3c,KAAK,CAAC4Q,EAAWjB,GAAQ,GAAaL,WAEjDsB,EAAU1C,UAAU3M,MAEhBoO,GAEFA,EAAKzB,UAAU3M,MAGVA,KAGF,KAAKoO,GAKV,OAHApO,KAAKqb,UAAYjN,EACjBpO,KAAKqb,UAAU1O,UAAU3M,MAElBA,MAxLK,GAAAwb,WAAa,QAEb,GAAAC,QAAU,KAEV,GAAAC,UAAY,OAEZ,GAAAC,UAAY,OAEZ,GAAA5W,GAAK,KClBrB,MAAM,GAAa,EACb6W,GAAa,EAEZ,MAAM,WAAyB,EAuBpC,YAAmB3iB,EAAc4iB,GAE/BxP,QACArM,KAAK/G,KAAOA,EACZ+G,KAAK6b,KAAOA,EAtBP,cAAczQ,EAAakB,GAEhC,MAAMrT,EAAOmS,EAAK,IACZyQ,EAAO9d,EAAUqN,EAAKwQ,IAAa7O,GAAKT,EAAMC,cAAcQ,IAElE,OAAO,IAAI,GAAiB9T,EAAM4iB,GAG7B,cAAc7Y,GAEnB,MAAM6Y,EAAO9d,EAAUiF,EAAK6Y,KAAMngB,GAAKA,EAAEoQ,UAEzC,MAAO,CAAC9L,KAAK+E,GAAI/B,EAAK/J,KAAM4iB,GAavB,QAEL,OAAO,GAAiB9W,GAGnB,cAAc7B,GAEnB,MAAM4Y,EAAO5Y,EAAI6Y,YAAY/b,KAAK/G,MAElC,OAAK6iB,EAKEA,EAAK1P,WAAWI,cAActJ,GAH5B,EAMJ,WAEL,OAAO,KAGF,SAEL,OAAO,GAAiB4I,OAAO9L,MAG1B,QAEL,OAAO,IAAI,GAAiBA,KAAK/G,KAAM8E,EAAUiC,KAAK6b,KAAOngB,GAAMA,EAAE+Q,UAGhE,QAAQvJ,EAAyBC,GAEtC,MAAM2Y,EAAO5Y,EAAI6Y,YAAY/b,KAAK/G,MAC5B+iB,EAAWje,EAAUiC,KAAK6b,KAAOngB,GAAMA,EAAEiI,QAAQT,EAAKC,IAE5D,OAAO2Y,EACHA,EAAKG,cAAc/Y,EAAK8Y,GACxB,KAGC,SAAY3b,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1B5B,EAAW4B,KAAK6b,KAAM,CAAC7Y,EAAMkZ,IAC3B7b,EAASG,KAAK0b,EAAKlZ,EAAOnC,GAAgBb,KAAK6b,KAAKK,GAAOrb,EAAa,WAAab,KAAK6b,KAAKK,MAK9F,sBAAsBnZ,GAE3B,OAAOA,EAAM,KAAM/C,KAAK6b,KACpB,CAAC,EAAG7b,KAAK6b,KAAK9Y,EAAM,KACpB,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdnD,EAAW4B,KAAK6b,KAAM9O,GAAKA,EAAEJ,UAAU3M,OAGlC,SAASkD,EAAyBC,EAAeK,GAEtD,MAAMsY,EAAO5Y,EAAI6Y,YAAY/b,KAAK/G,MAElC,GAAK6iB,EAUL,CACE,MAAM5W,EAAkB,GAExB9G,EAAW0d,EAAK5W,OAAO5D,QAAQzC,MAAO,CAACsd,EAAOC,KAE5C,MAAMF,EAAMlc,KAAK6b,KAAKO,GAEtBpc,KAAK4M,aAAa1J,EAAKC,EAASgZ,EAAOD,EAAK1Y,GAExC0Y,IAEFhX,EAAOkX,GAAaF,EAAIvY,QAAQT,EAAKC,WAnBzCK,EAAQ,CACNlB,KAAMM,EAAeyZ,iBACrBnY,SAAUvB,EAAmB0B,KAC7BlB,UACAI,QAASvD,OAuBR,MAAM/G,GAIX,OAFA+G,KAAK/G,KAAOA,EAEL+G,KAKF,IAAIsc,EAAsD3iB,GAE/D,MAAMiV,EAAShU,EAAS0hB,GACpB,CAAE,CAACA,GAAa3iB,GAChB2iB,EAEJ,IAAK,MAAMC,KAAW3N,EACtB,CACE,MAAMsN,EAAM,GAAMrN,MAAMD,EAAO2N,IAE/Bvc,KAAK6b,KAAKU,GAAWL,EAErBA,EAAIvP,UAAU3M,MAGhB,OAAOA,MArJK,GAAA+E,GAAK,SCJrB,MAAM,GAAoB,EAEnB,MAAM,WAAqB,EAqBhC,YAAmB+H,GAEjBT,QACArM,KAAK8M,YAAcA,EAnBd,cAAc1B,EAAakB,GAEhC,MAAMQ,EAAc1B,EAAK,IAAmBrO,IAAK/D,GAAWsT,EAAMC,cAAcvT,IAEhF,OAAO,IAAI,GAAa8T,GAGnB,cAAc9J,GAEnB,MAAM8J,EAAc9J,EAAK8J,YAAY/P,IAAIgQ,GAAKA,EAAEjB,UAEhD,MAAO,CAAC9L,KAAK+E,GAAI+H,GAWZ,QAEL,OAAO,GAAa/H,GAGf,cAAc7B,GAEnB,OAAOlD,KAAK8M,YAAYpO,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAO,GAG3E,WAEL,OAAO,KAGF,SAEL,OAAO,GAAa4I,OAAO9L,MAGtB,QAEL,OAAO,IAAI,GAAaA,KAAK8M,YAAY/P,IAAKgQ,GAAMA,EAAEN,UAGjD,QAAQvJ,EAAyBC,GAEtC,MAAM2B,EAAgB9E,KAAK8M,YACxB/P,IAAIgQ,GAAKA,EAAEpJ,QAAQT,EAAKC,IACxBoY,OAAO,EAAYjQ,UACnBrK,OAAOrH,KAAOA,GAGjB,OAAO,GAAMkgB,UAAUhV,EAAO,GAASwG,UAGlC,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAK8M,YAAYtI,QAAQ,CAACxB,EAAM6F,IAC9BxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAK8M,YAAYE,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAK8M,YAAYE,OAAOnE,EAAO,MAKhI,sBAAsB9F,GAE3B,OAAOrI,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAK8M,YAAY1Q,OACrD,CAAC,EAAG4D,KAAK8M,YAAY/J,EAAM,KAC3B,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAK8M,YAAYtI,QAAQuI,GAAKA,EAAEJ,UAAU3M,OAGrC,SAASkD,EAAyBC,EAAeK,GAEtD,MAAMyJ,EAAe,EAAY3B,SAEjCtL,KAAK8M,YAAYtI,QAAQjB,IAEvBvD,KAAK4M,aAAa1J,EAAKC,EAAS8J,EAAc1J,EAASC,MAzF7C,GAAAuB,GAAK,KCFrB,MAAM,GAAa,EACbyX,GAAe,EACfC,GAAc,EAEb,MAAM,WAA0G,EAmCrH,YAAmBxjB,EAAciM,EAAuBwX,EAAqC,IAE3FrQ,QACArM,KAAK/G,KAAOA,EACZ+G,KAAKkF,OAASA,EACdlF,KAAK0c,WAAaA,EAnCb,cAActR,EAAakB,GAEhC,MAAMrT,EAAOmS,EAAK,IACZlG,EAAwBnH,EAAUqN,EAAKoR,IAAe7iB,GAAS2S,EAAMC,cAAc5S,IACnF+iB,EAAqCtR,EAAKqR,KAAgB,GAEhE,OAAO,IAAI,GAAoBxjB,EAAMiM,EAAQwX,GAGxC,cAAc1Z,GAEnB,MAAMkC,EAASnH,EAAUiF,EAAKkC,OAAQ6H,GAAKA,EAAEjB,UAE7C,OAAO3P,EAAQ6G,EAAK0Z,YAChB,CAAC1c,KAAK+E,GAAI/B,EAAK/J,KAAMiM,GACrB,CAAClF,KAAK+E,GAAI/B,EAAK/J,KAAMiM,EAAQlC,EAAK0Z,YAGjC,cACLhX,EACAR,EACAwX,EAAyCtjB,OAAOY,OAAO,OAEvD,OAAO,IAAI,GAA6B0L,EAAGX,GAAIG,EAAQwX,GAelD,QAEL,OAAO,GAAoB3X,GAGtB,cAAc7B,GAEnB,MAAMwC,EAAKxC,EAAIqN,aAAavQ,KAAK/G,MACjC,IAAIuM,EAAaE,EAAKA,EAAGF,WAAa,EAEtC,IAAK,MAAM1G,KAAQkB,KAAKkF,OAEtBM,EAAaxJ,KAAKQ,IAAIgJ,EAAYxF,KAAKkF,OAAOpG,GAAM0N,cAActJ,IAGpE,OAAOsC,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAoBsG,OAAO9L,MAG7B,QAEL,OAAO,IAAI,GAAoBA,KAAK/G,KAAM8E,EAAUiC,KAAKkF,OAAS1K,GAAMA,EAAEiS,SAAU,OAAF,UAAOzM,KAAK0c,aAGzF,QAAQxZ,EAAyBC,GAEtC,OAAOD,EAAIyZ,uBAAuB3c,KAAK/G,KAAM+G,KAAKkF,OAAQlF,KAAK0c,WAAYvZ,GAGtE,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1B5B,EAAW4B,KAAKkF,OAAQ,CAAClC,EAAMmZ,IAC7B9b,EAASG,KAAK2b,EAAOnZ,EAAOnC,GAAgBb,KAAKkF,OAAOiX,GAAStb,EAAa,WAAab,KAAKkF,OAAOiX,MAKtG,sBAAsBpZ,GAE3B,OAAOA,EAAM,KAAM/C,KAAKkF,OACpB,CAAC,EAAGlF,KAAKkF,OAAOnC,EAAM,KACtB,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdnD,EAAW4B,KAAKkF,OAAQ6H,GAAKA,EAAEJ,UAAU3M,OAGpC,SAASkD,EAAyBC,EAAeK,GAEtD,MAAM,KAAEvK,EAAI,OAAEiM,EAAM,WAAEwX,GAAe1c,KAC/B4c,EAAY1Z,EAAIqN,aAAatX,GAC7B4jB,EAAiB3Z,EAAI4Z,kBAAkB7jB,GAE7C,IAAK2jB,EASH,YAPApZ,EAAQ,CACNlB,KAAMM,EAAema,kBACrB7Y,SAAUvB,EAAmB0B,KAC7BlB,UACAI,QAASvD,OAMb,MAAMgd,EAAgB9Z,EAAI+Z,0BAA0BhkB,EAAMiM,EAAQwX,EAAYvZ,GACxE+Z,EAAeN,EAAUvX,SAASjJ,OAAS,EAC7C8G,EAAIia,yBAAyBlkB,EAAM+jB,EAAeN,EAAYvZ,GAC9DA,EAEJ,IAAK,MAAMiZ,KAAaY,EACxB,CACE,MAAM7X,GAAsD,IAA3CyX,EAAUzX,SAASoM,QAAQ6K,GACtCgB,EAAmBJ,EAAcZ,GACjC3Y,EAAW0B,EAAW,GAAMA,SAASiY,GAAoBA,EACzD7Z,EAAU2B,EAAOkX,GAEjBiB,GADsD,IAA3CT,EAAUvX,SAASkM,QAAQ6K,GACZc,EAAe/Z,EAE/CnD,KAAK4M,aAAa1J,EAAKma,EAAc5Z,EAAUF,EAASC,GAG1D,IAAK,MAAM4Y,KAAalX,EACxB,CACE,MAAM3B,EAAU2B,EAAOkX,GACjBkB,EAAgBT,EAAe3X,OAAOkX,GAE5C,KAAMA,KAAaY,IAAkBM,EACrC,CACE,MACMD,GADsD,IAA3CT,EAAUvX,SAASkM,QAAQ6K,GACZc,EAAe/Z,EAE/CK,EAAQ,CACNlB,KAAMM,EAAe2a,mBACrBrZ,SAAUvB,EAAmB0B,KAC7BlB,QAASka,EACT9Z,UACAhC,OAAQvB,OAGVkF,EAAOkX,GAAW/Y,SAASH,EAAKma,EAAc7Z,KAK7C,MAAMvK,EAAaU,GAExB,MAAMwiB,EAAQ,GAAMtN,MAAMlV,GAK1B,OAHAqG,KAAKkF,OAAOjM,GAAQkjB,EACpBA,EAAMxP,UAAU3M,MAETA,KAGF,MAAMwd,EAAWC,GAItB,OAFAzd,KAAK0c,WAAWc,GAAUC,EAEnBzd,KAGF,IAAIsM,GAET,MAAMsC,EAAS/T,EAAQyR,GAASA,EAAQ,CAACA,GAEzC,OAAO,IAAI,GAAc,CAACtM,MAAoBub,OAAO3M,IAGhD,GAAGtC,GAER,MAAMsC,EAAS/T,EAAQyR,GAASA,EAAQ,CAACA,GAEzC,OAAO,IAAI,GAAa,CAACtM,MAAoBub,OAAO3M,IAG/C,MAEL,OAAO,IAAI,EAAc5O,OAhMb,GAAA+E,GAAK,KCdrB,MAAM,GAAc,EAEb,MAAM,WAAyB,EAyBpC,YAAmBpL,GAEjB0S,QACArM,KAAKrG,MAAQA,EArBR,cAAcyR,EAAakB,GAEhC,MAAM3S,EAAQ2S,EAAMC,cAAcnB,EAAK,KAEvC,OAAO,IAAI,GAAiBzR,GAGvB,cAAcqJ,GAEnB,MAAM0a,EAAc1a,EAAKrJ,MAAMmS,SAE/B,YAAuBxN,IAAhBof,EACH,CAAC1d,KAAK+E,GAAI2Y,GACV,CAAC1d,KAAK+E,IAWL,QAEL,OAAO,GAAiBA,GAGnB,cAAc7B,GAEnB,OAAOlD,KAAKrG,MAAM6S,cAActJ,GAG3B,WAEL,OAAO,KAGF,SAEL,OAAO,GAAiB4I,OAAO9L,MAG1B,QAEL,OAAO,IAAI,GAAiBA,KAAKrG,MAAMmS,UAGlC,QAAQ5I,EAAyBC,GAEtC,OAAOnD,KAAKrG,MACRqG,KAAKrG,MAAMgK,QAAQT,EAAKC,GACxB,KAGC,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BK,EAASG,KAAK,GAAiBkW,WAAY1W,KAAKrG,MAAQkH,GAAgBb,KAAKrG,MAAQkH,IAIlF,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAiB2T,WACjC,CAAC,EAAG1W,KAAKrG,OACT,KAGC,UAAU4H,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKrG,MAAMgT,UAAU3M,MAGhB,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAKrG,MAAM0J,SAASH,EAAKC,EAASK,IAnFtB,GAAAkT,WAAa,QAEb,GAAA3R,GAAK,SCJrB,MAAM,GAAa,EACb,GAAc,EAEb,MAAM,WAAsB,EAgCjC,YAAmB7E,EAAoBvG,GAErC0S,QACArM,KAAKE,KAAOA,EACZF,KAAKrG,MAAQA,EA3BR,cAAcyR,EAAakB,GAEhC,MAAMpM,EAAqBkL,EAAK,IAAYrO,IAAKib,GAAc1L,EAAMC,cAAcyL,IAC7Ere,EAAQ2S,EAAMC,cAAcnB,EAAK,KAEvC,OAAO,IAAI,GAAclL,EAAMvG,GAG1B,cAAcqJ,GAEnB,MAAM9C,EAAO8C,EAAK9C,KAAKnD,IAAIgQ,GAAKA,EAAEjB,UAElC,MAAO,CAAC9L,KAAK+E,GAAI7E,EAAM8C,EAAKrJ,MAAMmS,UAG7B,cAAc5L,EAAyBvG,GAE5C,OAAO,IAAI,GAAc,GAAMkV,MAAM3O,GAAO,GAAM2O,MAAMlV,IAanD,QAEL,OAAO,GAAcoL,GAGhB,cAAc7B,GAEnB,OAAOlD,KAAKE,KAAKxB,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAOlD,KAAKrG,MAAM6S,cAActJ,IAG7F,WAEL,OAAO,KAGF,SAEL,OAAO,GAAc4I,OAAO9L,MAGvB,QAEL,OAAO,IAAI,GAAcA,KAAKE,KAAKnD,IAAKvC,GAAMA,EAAEiS,SAAUzM,KAAKrG,MAAM8S,SAGhE,QAAQvJ,EAAyBC,GAEtC,OAAO,EAAYmI,SAGd,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAcmd,UAAW,IACrC3d,KAAKE,KAAKsE,QAAQ,CAACxB,EAAM6F,IACvBxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAKE,KAAK8M,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKE,KAAK8M,OAAOnE,EAAO,MAGvHxI,EAASG,KAAK,GAAckW,WAAY1W,KAAKrG,MAAQkH,GAAgBb,KAAKrG,MAAQkH,KAK/E,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAc4a,UAC9BjjB,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKE,KAAK9D,OACzC,CAAC,EAAG4D,KAAKE,KAAK6C,EAAM,KACpB,KACFA,EAAM,KAAO,GAAc2T,WACzB,CAAC,EAAG1W,KAAKrG,OACT,KAID,UAAU4H,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKE,KAAKsE,QAAQuI,GAAKA,EAAEJ,UAAU3M,OACnCA,KAAKrG,MAAMgT,UAAU3M,MAGhB,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAKkY,aAAahV,EAAKC,EAASA,EAASnD,KAAKE,KAAMsD,GAEpD,MAAMyJ,EAAe/J,EAAI+U,YAAYjY,KAAKE,KAAMiD,GAE5C8J,GAEFjN,KAAK4M,aAAa1J,EAAKC,EAAS8J,EAAcjN,KAAKrG,MAAO6J,GAIvD,IAAIR,GAET,MAAM4L,EAAS/T,EAAQmI,GACnBA,EACA,CAACA,GAEL,IAAK,MAAMmV,KAAavJ,EACxB,CACE,MAAM1M,EAAO,GAAM2M,MAAMsJ,GACzBnY,KAAKE,KAAKzB,KAAKyD,GACfA,EAAKyK,UAAU3M,MAGjB,OAAOA,KAGF,GAAGrG,GAKR,OAHAqG,KAAKrG,MAAQ,GAAMkV,MAAMlV,GACzBqG,KAAKrG,MAAMgT,UAAU3M,MAEdA,MApIK,GAAA2d,UAAY,OAEZ,GAAAjH,WAAa,QAEb,GAAA3R,GAAK,MCXrB,MAAM,GAAc,EACd,GAAa,EAEZ,MAAM,WAAsB,EAiCjC,YAAmBpL,EAAmBuG,GAEpCmM,QACArM,KAAKrG,MAAQA,EACbqG,KAAKE,KAAOA,EA5BP,cAAckL,EAAakB,GAEhC,MAAM3S,EAAoB2S,EAAMC,cAAcnB,EAAK,KAC7ClL,EAAqBkL,EAAK,IAAYrO,IAAKib,GAAc1L,EAAMC,cAAcyL,IAEnF,OAAO,IAAI,GAAcre,EAAOuG,GAG3B,cAAc8C,GAEnB,MAAMrJ,EAAQqJ,EAAKrJ,MAAMmS,SACnB5L,EAAO8C,EAAK9C,KAAKnD,IAAIgQ,GAAKA,EAAEjB,UAElC,MAAO,CAAC9L,KAAK+E,GAAIpL,EAAOuG,GAGnB,cAAcvG,EAAwBuG,GAE3C,OAAO,IAAI,GAAc,GAAM2O,MAAMlV,GAAQ,GAAMkV,MAAM3O,IAapD,QAEL,OAAO,GAAc6E,GAGhB,cAAc7B,GAEnB,OAAOlD,KAAKE,KAAKxB,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAOlD,KAAKrG,MAAM6S,cAActJ,IAG7F,WAEL,OAAO,KAGF,SAEL,OAAO,GAAc4I,OAAO9L,MAGvB,QAEL,OAAO,IAAI,GAAcA,KAAKrG,MAAM8S,QAASzM,KAAKE,KAAKnD,IAAKvC,GAAMA,EAAEiS,UAG/D,QAAQvJ,EAAyBC,GAEtC,MAAMya,EAAY5d,KAAKrG,MAAMgK,QAAQT,EAAKC,GAE1C,OAAOya,EACH1a,EAAI+U,YAAYjY,KAAKE,KAAM0d,GAC3B,KAGC,SAAYvd,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAckW,WAAY1W,KAAKrG,MAAQkH,GAAgBb,KAAKrG,MAAQkH,GAClFR,EAASG,KAAK,GAAcmd,UAAW,KACrC3d,KAAKE,KAAKsE,QAAQ,CAACxB,EAAM6F,IACvBxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAKE,KAAK8M,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKE,KAAK8M,OAAOnE,EAAO,SAOpH,sBAAsB9F,GAE3B,OAAOA,EAAM,KAAO,GAAc4a,UAC9BjjB,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKE,KAAK9D,OACzC,CAAC,EAAG4D,KAAKE,KAAK6C,EAAM,KACpB,KACFA,EAAM,KAAO,GAAc2T,WACzB,CAAC,EAAG1W,KAAKrG,OACT,KAID,UAAU4H,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKrG,MAAMgT,UAAU3M,MACrBA,KAAKE,KAAKsE,QAAQuI,GAAKA,EAAEJ,UAAU3M,OAG9B,SAASkD,EAAyBC,EAAeK,GAEtD,MAAMlB,EAAOtC,KAAKrG,MAAMgK,QAAQT,EAAKC,GAErCnD,KAAKkY,aAAahV,EAAKC,EAASb,EAAMtC,KAAKE,KAAMsD,GAEjDxD,KAAKrG,MAAM0J,SAASH,EAAKC,EAASK,GAG7B,KAAKR,GAKV,OAHAhD,KAAKrG,MAAQ,GAAMkV,MAAM7L,GACzBhD,KAAKrG,MAAMgT,UAAU3M,MAEdA,KAGF,IAAIgD,GAET,MAAM4L,EAAS/T,EAAQmI,GACnBA,EACA,CAACA,GAEL,IAAK,MAAMmV,KAAavJ,EACxB,CACE,MAAM1M,EAAO,GAAM2M,MAAMsJ,GACzBnY,KAAKE,KAAKzB,KAAKyD,GACfA,EAAKyK,UAAU3M,MAGjB,OAAOA,MAtIK,GAAA2d,UAAY,OAEZ,GAAAjH,WAAa,QAEb,GAAA3R,GAAK,MCLrB,MAAM,GAAc,EACd8Y,GAAW,EACX,GAAc,EACdC,GAAqB,EAEpB,MAAM,WAAyB,EA2CpC,YAAmBnkB,EAAmB+L,EAAY0V,EAAqC2C,GAErF1R,QACArM,KAAKrG,MAAQA,EACbqG,KAAK0F,GAAKA,EACV1F,KAAKob,MAAQA,EACbpb,KAAK+d,YAAcA,EAlCd,cAAc3S,EAAakB,GAEhC,MAAM3S,EAAQ2S,EAAMC,cAAcnB,EAAK,KACjC1F,EAAK0F,EAAKyS,IACVzC,EAAQhQ,EAAK,IAAarO,IAAI,EAAEihB,EAAO5d,KAA0B,CACrE4d,EAAMjhB,IAAKnD,GAAW0S,EAAMC,cAAc3S,IAC1C0S,EAAMC,cAAcnM,KAEhB2d,EAAczR,EAAMC,cAAcnB,EAAK0S,KAE7C,OAAO,IAAI,GAAiBnkB,EAAO+L,EAAI0V,EAAO2C,GAGzC,cAAc/a,GAEnB,MAAMrJ,EAAQqJ,EAAKrJ,MAAMmS,SACnBsP,EAAQpY,EAAKoY,MAAMre,IAAI,EAAEihB,EAAO5d,KAAY,CAAC4d,EAAMjhB,IAAInD,GAAKA,EAAEkS,UAAW1L,EAAO0L,WAEtF,OAAO,GAAmB0J,IAAIxS,EAAK+a,iBAAazf,GAC5C,CAAC0B,KAAK+E,GAAIpL,EAAOqJ,EAAK0C,GAAI0V,GAC1B,CAACpb,KAAK+E,GAAIpL,EAAOqJ,EAAK0C,GAAI0V,EAAOpY,EAAK+a,YAAYjS,UAiBjD,QAEL,OAAO,GAAiB/G,GAGnB,cAAc7B,GAEnB,OAAOlD,KAAKob,MAAM1c,OAChB,CAAClC,GAAMwhB,EAAO5d,KAAYpE,KAAKQ,IAC7BA,EACA4D,EAAOoM,cAActJ,GACrB8a,EAAMtf,OAAO,CAACuf,EAAMrkB,IAAMoC,KAAKQ,IAC7ByhB,EACArkB,EAAE4S,cAActJ,IACf,IAELlH,KAAKQ,IACHwD,KAAKrG,MAAM6S,cAActJ,GACzBlD,KAAK+d,YAAYvR,cAActJ,KAK9B,WAEL,OAAO,KAGF,SAEL,OAAO,GAAiB4I,OAAO9L,MAG1B,QAEL,OAAO,IAAI,GAAiBA,KAAKrG,MAAM8S,QAASzM,KAAK0F,GAAI1F,KAAKob,MAAMre,IAAI,EAAEihB,EAAO1C,KAAU,CAAC0C,EAAMjhB,IAAKnD,GAAMA,EAAE6S,SAAU6O,EAAK7O,UAAWzM,KAAK+d,YAAYtR,SAGrJ,QAAQvJ,EAAyBC,GAEtC,MAAM2B,EAAQ9E,KAAKob,MAChBre,IAAI,EAAEihB,EAAOrkB,KAAWA,GACxB4hB,OAAOvb,KAAK+d,aACZ9c,OAAO8L,KAAOA,GACdhQ,IAAIgQ,GAAKA,EAAEpJ,QAAQT,EAAKC,IACxBlC,OAAOrH,KAAOA,GAGjB,OAAO,GAAMkgB,UAAUhV,EAAO,GAASwG,UAGlC,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAiBkW,WAAY1W,KAAKrG,MAAQkH,GAAgBb,KAAKrG,MAAQkH,GACrFR,EAASG,KAAK,GAAiBgb,WAAY,IACzCxb,KAAKob,MAAM5W,QAAQ,EAAEwZ,EAAO5d,GAAS8d,IACnC7d,EAASG,KAAK0d,EAAW,KACvB7d,EAASG,KAAK,GAAiB2d,UAAW,IACxCH,EAAMxZ,QAAQ,CAACX,EAAMgF,IACnBxI,EAASG,KAAKqI,EAAOhF,EAAOhD,GAAgBmd,EAAMhR,OAAOnE,EAAO,EAAGhI,GAAc,IAAMmd,EAAMhR,OAAOnE,EAAO,MAG/GxI,EAASG,KAAK,GAAiB4d,YAAahe,EAASS,GAAgBb,KAAKob,MAAM8C,GAAWlR,OAAO,EAAG,EAAGnM,QAI9GR,EAASG,KAAK,GAAiB6d,aAAcre,KAAK+d,YAAcld,GAAgBb,KAAK+d,YAAcld,KAKhG,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAiB2T,WACjC,CAAC,EAAG1W,KAAKrG,OACToJ,EAAM,KAAO,GAAiByY,WAC5B9gB,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKob,MAAMhf,OAC1C2G,EAAM,KAAO,GAAiBob,UAC5BzjB,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKob,MAAMrY,EAAM,IAAI,GAAG3G,OACvD,CAAC,EAAG4D,KAAKob,MAAMrY,EAAM,IAAI,GAAGA,EAAM,KAClC,KACFA,EAAM,KAAO,GAAiBqb,YAC5B,CAAC,EAAGpe,KAAKob,MAAMrY,EAAM,IAAI,IACzB,KACF,KACJA,EAAM,KAAO,GAAiBsb,aAC5B,CAAC,EAAGre,KAAK+d,aACT,KAIH,UAAUxc,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKrG,MAAMgT,UAAU3M,MACrBA,KAAKob,MAAM5W,QAAQ,EAAEwZ,EAAO5d,MAC1B4d,EAAMxZ,QAAQuI,GAAKA,EAAEJ,UAAU3M,OAC/BI,EAAOuM,UAAU3M,QAEnBA,KAAK+d,YAAYpR,UAAU3M,MAGtB,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAKrG,MAAM0J,SAASH,EAAKC,EAASK,GAElCxD,KAAKob,MAAM5W,QAAQ,EAAEwZ,EAAO5d,MAE1B4d,EAAMxZ,QAAQuI,GAAKA,EAAE1J,SAASH,EAAKC,EAASK,IAE5CpD,EAAOiD,SAASH,EAAKC,EAASK,KAGhCxD,KAAK+d,YAAY1a,SAASH,EAAKC,EAASK,GAGnC,IAAI7J,EAAwB+L,GAMjC,OAJA1F,KAAKrG,MAAQ,GAAMkV,MAAMlV,GACzBqG,KAAKrG,MAAMgT,UAAU3M,MACrBA,KAAK0F,GAAKA,EAAKA,EAAGX,GAAK/E,KAAK0F,GAErB1F,KAGF,KAAKse,GAEV,MAAMnkB,EAAI6F,KAAKob,MAAMhf,OAAS,EACxByH,EAAO,GAAMgL,MAAMyP,GAazB,OAXAza,EAAK8I,UAAU3M,MAEX7F,GAAK,GAAK6F,KAAKob,MAAMjhB,GAAG,KAAO,GAAa4T,SAE9C/N,KAAKob,MAAMjhB,GAAG,GAAGsE,KAAKoF,GAItB7D,KAAKob,MAAM3c,KAAK,CAAC,CAACoF,GAAO,GAAakK,WAGjC/N,KAGF,KAAKue,GAEV,MAAMnQ,EAAO,GAAMS,MAAM0P,GAKzB,OAHAve,KAAKob,MAAMpb,KAAKob,MAAMhf,OAAS,GAAG,GAAKgS,EACvCA,EAAKzB,UAAU3M,MAERA,KAGF,QAAQoO,GAKb,OAHApO,KAAK+d,YAAc,GAAMlP,MAAMT,GAC/BpO,KAAK+d,YAAYpR,UAAU3M,MAEpBA,MAlNK,GAAA0W,WAAa,QAEb,GAAA8E,WAAa,QAEb,GAAA2C,UAAY,OAEZ,GAAAC,YAAc,SAEd,GAAAC,aAAe,UAEf,GAAAtZ,GAAK,SCtBrB,MAAMyZ,GAAiB,EACjB,GAAe,EAEd,MAAM,WAA2B,EAuBtC,YAAmBC,EAAkBvZ,GAEnCmH,QACArM,KAAKye,SAAWA,EAChBze,KAAKkF,OAASA,EAtBT,cAAckG,EAAakB,GAEhC,MAAMmS,EAAWrT,EAAKoT,IAChBtZ,EAAwBnH,EAAUqN,EAAK,IAAezR,GAAS2S,EAAMC,cAAc5S,IAEzF,OAAO,IAAI,GAAmB8kB,EAAUvZ,GAGnC,cAAclC,GAEnB,MAAMkC,EAASnH,EAAUiF,EAAKkC,OAAQ6H,GAAKA,EAAEjB,UAE7C,MAAO,CAAC9L,KAAK+E,GAAI/B,EAAKyb,SAAUvZ,GAa3B,QAEL,OAAO,GAAmBH,GAGrB,cAAc7B,GAEnB,IAAIsC,EAAa,EAEjB,IAAK,MAAM1G,KAAQkB,KAAKkF,OAEtBM,EAAaxJ,KAAKQ,IAAIgJ,EAAYxF,KAAKkF,OAAOpG,GAAM0N,cAActJ,IAGpE,OAAOsC,EAGF,WAEL,OAAO,KAGF,SAEL,OAAO,GAAmBsG,OAAO9L,MAG5B,QAEL,OAAO,IAAI,GAAmBA,KAAKye,SAAU1gB,EAAUiC,KAAKkF,OAAS1K,GAAMA,EAAEiS,UAGxE,QAAQvJ,EAAyBC,GAEtC,OAAO,GAASmI,SAAS2L,cAGpB,SAAY5W,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1B5B,EAAW4B,KAAKkF,OAAQ,CAAClC,EAAMmZ,IAC7B9b,EAASG,KAAK2b,EAAOnZ,EAAOnC,GAAgBb,KAAKkF,OAAOiX,GAAStb,EAAa,WAAab,KAAKkF,OAAOiX,MAKtG,sBAAsBpZ,GAE3B,OAAOA,EAAM,KAAM/C,KAAKkF,OACpB,CAAC,EAAGlF,KAAKkF,OAAOnC,EAAM,KACtB,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdnD,EAAW4B,KAAKkF,OAAQ6H,GAAKA,EAAEJ,UAAU3M,OAGpC,SAASkD,EAAyBC,EAAeK,GAEtDpF,EAAW4B,KAAKkF,OAAQ3B,IAEtBvD,KAAK4M,aAAa1J,EAAKC,EAAS,GAASmI,SAAU/H,EAASC,KAMzD,MAAMkb,EAAwD/kB,GAEnE,MAAMiV,EAAShU,EAAS8jB,GACpB,CAAE,CAACA,GAAe/kB,GAClB+kB,EAEJ,IAAK,MAAMtC,KAAaxN,EACxB,CACE,MAAMuN,EAAQ,GAAMtN,MAAMD,EAAOwN,IACjCpc,KAAKkF,OAAOkX,GAAaD,EACzBA,EAAMxP,UAAU3M,MAGlB,OAAOA,MA9GK,GAAA+E,GAAK,OCLrB,MAAM4Z,GAAkB,UAClB,GAAa,EACb,GAAc,EACdC,GAAgB,EAEf,MAAM,WAAyB,EAqCpC,YAAmB1e,EAAoBvG,EAAmBklB,EAA0BF,IAElFtS,QACArM,KAAKE,KAAOA,EACZF,KAAKrG,MAAQA,EACbqG,KAAK6e,gBAAkBA,EAjClB,cAAczT,EAAakB,GAEhC,MAAMpM,EAAqBkL,EAAK,IAAYrO,IAAKib,GAAc1L,EAAMC,cAAcyL,IAC7Ere,EAAQ2S,EAAMC,cAAcnB,EAAK,KACjCyT,EAAkBzT,EAAKwT,KAAkBD,GAE/C,OAAO,IAAI,GAAiBze,EAAMvG,EAAOklB,GAGpC,cAAc7b,GAEnB,MAAM9C,EAAO8C,EAAK9C,KAAKnD,IAAIgQ,GAAKA,EAAEjB,UAC5BnS,EAAQqJ,EAAKrJ,MAAMmS,SAEzB,OAAO9I,EAAK6b,kBAAoBF,GAC5B,CAAC3e,KAAK+E,GAAI7E,EAAMvG,GAChB,CAACqG,KAAK+E,GAAI7E,EAAMvG,EAAOqJ,EAAK6b,iBAG3B,cAAc3e,EAAyBvG,EAAwBklB,EAA0BF,IAE9F,OAAO,IAAI,GAAiB,GAAM9P,MAAM3O,GAAO,GAAM2O,MAAMlV,GAAQklB,GAe9D,QAEL,OAAO,GAAiB9Z,GAGnB,cAAc7B,GAEnB,OAAOlD,KAAKE,KAAKxB,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAOlD,KAAKrG,MAAM6S,cAActJ,IAG7F,WAEL,MAAO,CACL,CAAClD,KAAK6e,iBAAkB,GAAQvT,UAI7B,SAEL,OAAO,GAAiBQ,OAAO9L,MAG1B,QAEL,OAAO,IAAI,GAAiBA,KAAKE,KAAKnD,IAAKvC,GAAMA,EAAEiS,SAAUzM,KAAKrG,MAAM8S,QAASzM,KAAK6e,iBAGjF,QAAQ3b,EAAyBC,GAEtC,OAAO,EAAYmI,SAGd,SAAYjL,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAiBmd,UAAW,IACxC3d,KAAKE,KAAKsE,QAAQ,CAACxB,EAAM6F,IACvBxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAKE,KAAK8M,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKE,KAAK8M,OAAOnE,EAAO,MAGvHxI,EAASG,KAAK,GAAiBkW,WAAY1W,KAAKrG,MAAQkH,GAAgBb,KAAKrG,MAAQkH,KAKlF,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAiB4a,UACjCjjB,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAKE,KAAK9D,OACzC,CAAC,EAAG4D,KAAKE,KAAK6C,EAAM,KACpB,KACFA,EAAM,KAAO,GAAiB2T,WAC5B,CAAC,EAAG1W,KAAKrG,OACT,KAID,UAAU4H,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKE,KAAKsE,QAAQuI,GAAKA,EAAEJ,UAAU3M,OACnCA,KAAKrG,MAAMgT,UAAU3M,MAGhB,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAKkY,aAAahV,EAAKC,EAASA,EAASnD,KAAKE,KAAMsD,GAEpD,MAAMyJ,EAAe/J,EAAI+U,YAAYjY,KAAKE,KAAMiD,GAEhD,GAAI8J,EACJ,CACE,MAAM6R,EAAe5b,EAAI4M,WAAW3M,EAAS,CAC3C,CAACnD,KAAK6e,iBAAkB5R,IAG1BjN,KAAK4M,aAAa1J,EAAK4b,EAAc7R,EAAcjN,KAAKrG,MAAO6J,IAI5D,IAAIR,GAET,MAAM4L,EAAS/T,EAAQmI,GACnBA,EACA,CAACA,GAEL,IAAK,MAAMmV,KAAavJ,EACxB,CACE,MAAM1M,EAAO,GAAM2M,MAAMsJ,GACzBnY,KAAKE,KAAKzB,KAAKyD,GACfA,EAAKyK,UAAU3M,MAIjB,OAAOA,KAGF,GAAGrG,EAAwBklB,GAMhC,OAJA7e,KAAKrG,MAAQ,GAAMkV,MAAMlV,GACzBqG,KAAKrG,MAAMgT,UAAU3M,MACrBA,KAAK6e,gBAAkBA,GAAmB7e,KAAK6e,gBAExC7e,KAGF,aAAa/G,GAIlB,OAFA+G,KAAK6e,gBAAkB5lB,EAEhB+G,MAzJK,GAAA2d,UAAY,OAEZ,GAAAjH,WAAa,QAEb,GAAA3R,GAAK,KCdrB,MAAM,GAAyB,IACzB,GAAgB,QAChB,GAAkB,EAClB,GAAa,EACb,GAAc,EACd,GAAY,EAEX,MAAM,WAAwB,EAyCnC,YAAmBsK,EAAuBjB,EAAkBkB,EAAwB,GAAeC,EAAwB,IAEzHlD,QACArM,KAAKqP,UAAYA,EACjBrP,KAAKoO,KAAOA,EACZpO,KAAKsP,cAAgBA,EACrBtP,KAAKuP,cAAgBA,EApChB,cAAcnE,EAAakB,GAEhC,MAAM+C,EAAY/C,EAAMC,cAAcnB,EAAK,KACrCgD,EAAO9B,EAAMC,cAAcnB,EAAK,KAChCkE,EAAgBlE,EAAK,KAAgB,GACrC5O,EAAMgT,SAASpE,EAAK,MAAepL,KAAKyP,eAE9C,OAAO,IAAI,GAAgBJ,EAAWjB,EAAMkB,EAAe9S,GAGtD,cAAcwG,GAEnB,MAAM7E,EAAM,CAAC6B,KAAK+E,GAAI/B,EAAKqM,UAAUvD,SAAU9I,EAAKoL,KAAKtC,UACnD4D,EAAS1M,EAAKuM,gBAAkBvP,KAAKyP,eAS3C,OAPIzM,EAAKsM,gBAAkB,IAAiBI,IAC1CvR,EAAIM,KAAKuE,EAAKsM,eAEZI,GACFvR,EAAIM,KAAKuE,EAAKuM,eAGTpR,EAiBF,QAEL,OAAO,GAAgB4G,GAGlB,cAAc7B,GAEnB,OAAOlH,KAAKQ,IAAIwD,KAAKqP,UAAU7C,cAActJ,GAAMlD,KAAKoO,KAAK5B,cAActJ,IAAQ,EAG9E,WAEL,MAAO,CACL,CAAClD,KAAKsP,eAAgB,EAAYhE,UAI/B,SAEL,OAAO,GAAgBQ,OAAO9L,MAGzB,QAEL,OAAO,IAAI,GAAgBA,KAAKqP,UAAU5C,QAASzM,KAAKoO,KAAK3B,QAASzM,KAAKsP,cAAetP,KAAKuP,eAG1F,QAAQrM,EAAyB+G,GAEtC,MAAM,QAAE9G,GAAYD,EAAIqL,oBAAoBtE,EAAUjK,KAAK2P,YAErDvB,EAAOpO,KAAKoO,KAAKzK,QAAQT,EAAKC,GAEpC,OAAOiL,EAAO,GAAMjJ,SAASiJ,GAAQ,KAGhC,SAAY/N,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAgBoP,eAAgB5P,KAAKqP,UAAYxO,GAAgBb,KAAKqP,UAAYxO,GAChGR,EAASG,KAAK,GAAgBiO,UAAWzO,KAAKoO,KAAOvN,GAAgBb,KAAKoO,KAAOvN,KAI9E,sBAAsBkC,GAE3B,OAAOA,EAAM,KAAO,GAAgB6M,eAChC,CAAC,EAAG5P,KAAKqP,WACTtM,EAAM,KAAO,GAAgB0L,UAC3B,CAAC,EAAGzO,KAAKoO,MACT,KAGD,UAAU7M,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAKqP,UAAU1C,UAAU3M,MACzBA,KAAKoO,KAAKzB,UAAU3M,MAGf,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAK4M,aAAa1J,EAAKC,EAAS,EAAYmI,SAAUtL,KAAKqP,UAAW7L,GAEtE,MAAMqM,EAAc3M,EAAI4M,WAAW3M,EAASnD,KAAK2P,YAEjD3P,KAAKoO,KAAK/K,SAASH,EAAK2M,EAAarM,GAGhC,MAAM6L,GAKX,OAHArP,KAAKqP,UAAYA,EACjBrP,KAAKqP,UAAU1C,UAAU3M,MAElBA,KAGF,GAAGoO,GAKR,OAHApO,KAAKoO,KAAOA,EACZpO,KAAKoO,KAAKzB,UAAU3M,MAEbA,KAGF,UAAU/G,GAIf,OAFA+G,KAAKsP,cAAgBrW,EAEd+G,KAGF,QAAQ+P,GAIb,OAFA/P,KAAKuP,cAAgBQ,EAEd/P,MAhJK,GAAA4P,eAAiB,YAEjB,GAAAnB,UAAY,OAEZ,GAAAgB,eAAiB,GAEjB,GAAA1K,GAAK,QCpBd,MAAMga,GAAkB,IAAIna,EAAWkB,EAAGgB,MAAQhB,EAAGiB,WAE/CiY,GAAiB,IAAIpZ,EAAUE,EAAGgB,MAAQhB,EAAGiB,WAEpD,GAAMgY,GAECE,GACb,CAIEjlB,OAAQ,GAAImN,IAAI,UAIhBC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7BM,IAAK,GAAIN,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC+C,KAAM,GAAI/C,IAAI,OAAQ,GAAI,CAAC,UAE3B+X,MAAO,GAAI/X,IAAI,QAAS,GAAI,CAAC,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,GAAI,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MAEtF5N,IAAK,GAAI4N,IAAI,MAAO,GAAI,CAAC,QAAS,UAElCA,IAAK,GAAIA,IAAI,MAAO,CAAE5B,QAAS,CAAC,UAAY,CAAC,QAAS,QAAS,YAI/DmC,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BU,QAAS,GAAIV,IAAI,IAAK,GAAI,CAAC,QAAS,SAEpCW,WAAY,GAAIX,IAAI,KAAM,GAAI,CAAC,QAAS,SAExCuG,OAAQ,GAAIvG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCwG,cAAe,GAAIxG,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CyG,UAAW,GAAIzG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtC0G,iBAAkB,GAAI1G,IAAI,KAAM,GAAI,CAAC,QAAS,SAI9CY,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpC4jB,GAAe7X,IAAI,OAAQ8X,GAAS/U,MCrE7B,MAAMiV,GAAmB,IAAIva,EAAWkB,EAAGW,OAASX,EAAGiB,WAEjDqY,GAAkB,IAAIxZ,EAAUE,EAAGW,OAASX,EAAGiB,WAEtD,GAAMoY,GAECE,GACb,CAIErlB,OAAQ,GAAImN,IAAI,UAEhBmY,GAAI,GAAInY,IAAI,MAEZoY,IAAK,GAAIpY,IAAI,OAEbqY,OAAQ,GAAIrY,IAAI,OAEhB4F,EAAG,GAAI5F,IAAI,KAEXsY,MAAO,GAAItY,IAAI,SAEfuY,OAAQ,GAAIvY,IAAI,WAEhBwY,IAAK,GAAIxY,IAAI,OAEbyY,KAAM,GAAIzY,IAAI,QAEd0Y,MAAO,GAAI1Y,IAAI,SAEf2Y,OAAQ,GAAI3Y,IAAI,UAIhB7J,IAAK,GAAI6J,IAAI,IAAK,GAAI,CAAC,QAAS,WAEhCmK,IAAK,GAAInK,IAAI,IAAK,GAAI,CAAC,QAAS,eAEhC4Y,IAAK,GAAI5Y,IAAI,IAAK,GAAI,CAAC,QAAS,eAEhC6Y,IAAK,GAAI7Y,IAAI,IAAK,GAAI,CAAC,QAAS,YAEhC8Y,IAAK,GAAI9Y,IAAI,IAAK,GAAI,CAAC,QAAS,YAEhC5K,IAAK,GAAI4K,IAAI,MAAO,GAAI,CAAC,IAAK,MAE9B3K,IAAK,GAAI2K,IAAI,MAAO,GAAI,CAAC,IAAK,MAE9B+Y,IAAK,GAAI/Y,IAAI,KAAM,GAAI,CAAC,QAAS,aAEjCgZ,MAAO,GAAIhZ,IAAI,QAAS,GAAI,CAAC,IAAK,MAElCiZ,MAAO,GAAIjZ,IAAI,MAAO,GAAI,CAAC,IAAK,MAEhCkZ,OAAQ,GAAIlZ,IAAI,SAAU,CAAE3B,WAAY,GAAK,CAAC,IAAK,MAEnD8a,IAAK,GAAInZ,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,IAAK,MAE7C+a,OAAQ,GAAIpZ,IAAI,IAAK,GAAI,CAAC,IAAK,MAE/BqZ,MAAO,GAAIrZ,IAAI,IAAK,GAAI,CAAC,IAAK,MAE9BsZ,OAAQ,GAAItZ,IAAI,IAAK,GAAI,CAAC,IAAK,MAE/BM,IAAK,GAAIN,IAAI,MAAO,GAAI,CAAC,QAAS,SAIlCC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7BuZ,KAAM,GAAIvZ,IAAI,OAAQ,GAAI,CAAC,UAE3BwZ,GAAI,GAAIxZ,IAAI,KAAM,GAAI,CAAC,UAEvByZ,KAAM,GAAIzZ,IAAI,OAAQ,GAAI,CAAC,UAE3B0Z,MAAO,GAAI1Z,IAAI,QAAS,GAAI,CAAC,UAE7B2Z,KAAM,GAAI3Z,IAAI,OAAQ,GAAI,CAAC,UAE3B4Z,GAAI,GAAI5Z,IAAI,KAAM,GAAI,CAAC,UAEvB6Z,KAAM,GAAI7Z,IAAI,OAAQ,GAAI,CAAC,UAE3BjL,MAAO,GAAIiL,IAAI,QAAS,GAAI,CAAC,UAE7BlL,IAAK,GAAIkL,IAAI,MAAO,GAAI,CAAC,UAEzB8Z,IAAK,GAAI9Z,IAAI,MAAO,GAAI,CAAC,UAEzB+Z,KAAM,GAAI/Z,IAAI,OAAQ,GAAI,CAAC,UAE3Bga,IAAK,GAAIha,IAAI,MAAO,GAAI,CAAC,UAEzBia,IAAK,GAAIja,IAAI,MAAO,GAAI,CAAC,UAEzBka,IAAK,GAAIla,IAAI,MAAO,GAAI,CAAC,UAEzBma,IAAK,GAAIna,IAAI,MAAO,GAAI,CAAC,UAEzBoa,KAAM,GAAIpa,IAAI,OAAQ,GAAI,CAAC,UAE3Bqa,KAAM,GAAIra,IAAI,OAAQ,GAAI,CAAC,UAE3Bsa,KAAM,GAAIta,IAAI,OAAQ,GAAI,CAAC,UAE3Bua,KAAM,GAAIva,IAAI,OAAQ,GAAI,CAAC,UAE3Bwa,KAAM,GAAIxa,IAAI,OAAQ,GAAI,CAAC,UAE3Bya,UAAW,GAAIza,IAAI,IAAK,GAAI,CAAC,UAE7B0a,QAAS,GAAI1a,IAAI,IAAK,GAAI,CAAC,UAI3B7K,MAAO,GAAI6K,IAAI,QAAS,GAAI,CAAC,QAAS,MAAO,QAE7C2a,eAAgB,GAAI3a,IAAI,iBAAkB,GAAI,CAAC,OAAQ,QAAS,UAEhE4a,KAAM,GAAI5a,IAAI,OAAQ,GAAI,CAAC,QAAS,QAAS,QAI7C4E,IAAK,GAAI5E,IAAI,MAAO,GAAI,GAAI,CAAC,MAAO,MAAO,QAAS,eAIpD6a,WAAY,GAAI7a,IAAI,aAAc,GAAI,CAAC,SAAU,CAAC,OAAQ,cAE1D8a,OAAQ,GAAI9a,IAAI,SAAU,GAAI,CAAC,SAAU,CAAC,SAAU,SAAU,YAAa,YAAa,cAAe,sBAEvG+a,UAAW,GAAI/a,IAAI,YAAa,GAAI,CAAC,SAAU,CAAC,YAAa,YAAa,sBAE1Egb,YAAa,GAAIhb,IAAI,cAAe,GAAI,CAAC,UAIzCO,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3Bib,OAAQ,GAAIjb,IAAI,KAAM,GAAI,CAAC,SAAU,CAAC,YAEtCU,QAAS,GAAIV,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,YAE9CW,WAAY,GAAIX,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,YAElDuG,OAAQ,GAAIvG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCwG,cAAe,GAAIxG,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CyG,UAAW,GAAIzG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtC0G,iBAAkB,GAAI1G,IAAI,KAAM,GAAI,CAAC,QAAS,SAE9Ckb,UAAW,GAAIlb,IAAI,KAAM,GAAI,CAAC,QAAS,MAAO,OAAQ,CAAC,eAAgB,iBAEvEtL,QAAS,GAAIsL,IAAI,KAAM,GAAI,CAAC,SAAU,CAAC,YAEvCmb,UAAW,GAAInb,IAAI,KAAM,GAAI,CAAC,SAAU,CAAC,YAEzCob,WAAY,GAAIpb,IAAI,KAAM,GAAI,CAAC,UAE/Bqb,WAAY,GAAIrb,IAAI,KAAM,GAAI,CAAC,UAE/Bsb,YAAa,GAAItb,IAAI,KAAM,GAAI,CAAC,QAAS,MAAO,CAAC,YAEjDub,WAAY,GAAIvb,IAAI,MAAO,GAAI,CAAC,QAAS,SAAU,SAInDY,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpCgkB,GAAgBjY,IAAI,QAASkY,GAAUwB,OACvCzB,GAAgBjY,IAAI,OAAQkY,GAAUyB,MACtC1B,GAAgBjY,IAAI,KAAMkY,GAAU0B,IACpC3B,GAAgBjY,IAAI,OAAQkY,GAAU2B,MACtC5B,GAAgBjY,IAAI,QAASkY,GAAUnjB,OACvCkjB,GAAgBjY,IAAI,MAAOkY,GAAUpjB,KACrCmjB,GAAgBjY,IAAI,SAAUkY,GAAU4B,KACxC7B,GAAgBjY,IAAI,OAAQkY,GAAU6B,MACtC9B,GAAgBjY,IAAI,SAAUkY,GAAU+C,QACxChD,GAAgBjY,IAAI,UAAWkY,GAAUxjB,SACzCujB,GAAgBjY,IAAI,YAAakY,GAAUiD,WAC3ClD,GAAgBjY,IAAI,aAAckY,GAAUkD,YAC5CnD,GAAgBjY,IAAI,aAAckY,GAAUmD,YAC5CpD,GAAgBjY,IAAI,SAAUkY,GAAU4C,QChNjC,MAAMU,GAAiB,IAAI/d,EAAWkB,EAAGO,KAAOP,EAAGiB,WAE7C6b,GAAgB,IAAIhd,EAAUE,EAAGO,KAAOP,EAAGiB,WAElD,GAAM4b,GAECE,GACb,CAIE7oB,OAAQ,GAAImN,IAAI,UAEhBmO,WAAY,GAAInO,IAAI,aAAc,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAE7DoO,UAAW,GAAIpO,IAAI,YAAa,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAI3DC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7B+X,MAAO,GAAI/X,IAAI,MAAO,GAAI,CAAC,QAAS,QAAS,CAAC,YAAa,CAAC,OAAQ,QAAS,OAAQ,SAAU,CAAC,QAAS,CAAC,SAE1G5N,IAAK,GAAI4N,IAAI,MAAO,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAExDA,IAAK,GAAIA,IAAI,MAAO,GAAI,CAAC,OAAQ,QAAS,SAAU,GAAI,GAAI,GAAI,CAAC,SAEjE7J,IAAK,GAAI6J,IAAI,IAAK,CAAE5B,QAAS,CAAC,SAAW,CAAC,OAAQ,QAAS,GAAI,GAAI,GAAI,CAAC,SAExEud,SAAU,GAAI3b,IAAI,KAAM,CAAE5B,QAAS,CAAC,SAAW,CAAC,OAAQ,QAAS,GAAI,GAAI,GAAI,CAAC,SAE9Ewd,QAAS,GAAI5b,IAAI,KAAM,CAAE5B,QAAS,CAAC,SAAW,CAAC,OAAQ,QAAS,GAAI,GAAI,GAAI,CAAC,SAE7Eyd,OAAQ,GAAI7b,IAAI,KAAM,CAAE5B,QAAS,CAAC,SAAW,CAAC,OAAQ,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAErFhI,OAAQ,GAAI4J,IAAI,IAAK,CAAE5B,QAAS,CAAC,QAASC,WAAY,GAAM,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEtIyd,YAAa,GAAI9b,IAAI,KAAM,CAAE5B,QAAS,CAAC,SAAW,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEzE2d,WAAY,GAAI/b,IAAI,KAAM,CAAE5B,QAAS,CAAC,SAAW,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAExE4d,SAAU,GAAIhc,IAAI,KAAM,CAAE5B,QAAS,CAAC,SAAW,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE/E6d,YAAa,GAAIjc,IAAI,KAAM,CAAE5B,QAAS,CAAC,SAAW,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,CAAC,SAEhHqQ,MAAO,GAAIzO,IAAI,QAAS,CAAE5B,QAAS,CAAC,SAAW,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEtE8d,SAAU,GAAIlc,IAAI,WAAY,CAAE3B,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAE9GsJ,KAAM,GAAI3H,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,CAAC,QAAS,WAAY,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,CAAC,SAEzH0E,KAAM,GAAI/C,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,QAAS,CAAC,YAAa,CAAC,QAAS,CAAC,YAAa,CAAC,SAE1F8d,QAAS,GAAInc,IAAI,UAAW,CAAE3B,WAAY,IAAO,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAExE+d,QAAS,GAAIpc,IAAI,UAAW,CAAE5B,QAAS,CAAC,QAASC,WAAY,GAAM,CAAC,OAAQ,UAAW,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEhJge,QAAS,GAAIrc,IAAI,UAAW,CAAE3B,WAAY,GAAK,CAAC,OAAQ,UAAW,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAE5HuF,KAAM,GAAI5D,IAAI,OAAQ,CAAE5B,QAAS,CAAC,QAASC,WAAY,GAAO,CAAC,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEhIie,QAAS,GAAItc,IAAI,UAAW,CAAE5B,QAAS,CAAC,QAASC,WAAY,GAAK,CAAC,QAAS,CAAC,SAAU,GAAI,GAAI,CAAC,SAEhGke,OAAQ,GAAIvc,IAAI,SAAU,CAAE3B,WAAY,GAAK,CAAC,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAE/Gme,WAAY,GAAIxc,IAAI,QAAS,CAAE3B,WAAY,GAAK,CAAC,OAAQ,WAAY,CAAC,QAAS,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAExHoe,KAAM,GAAIzc,IAAI,OAAQ,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE1D0c,KAAM,GAAI1c,IAAI,OAAQ,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE1D2c,KAAM,GAAI3c,IAAI,OAAQ,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE1DyH,OAAQ,GAAIzH,IAAI,SAAU,GAAI,CAAC,OAAQ,UAAW,GAAI,GAAI,GAAI,CAAC,SAE/D4J,QAAS,GAAI5J,IAAI,UAAW,GAAI,CAAC,OAAQ,WAAY,GAAI,GAAI,GAAI,CAAC,SAElEoK,QAAS,GAAIpK,IAAI,UAAW,CAAE3B,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,CAAC,SAAU,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEhIgM,YAAa,GAAIrK,IAAI,cAAe,CAAE3B,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,CAAC,SAAU,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAExI5H,UAAW,GAAIuJ,IAAI,YAAa,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,CAAC,UAAW,SAAU,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAExHue,KAAM,GAAI5c,IAAI,OAAQ,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEjD/H,MAAO,GAAI+H,IAAI,QAAS,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEnD0O,MAAO,GAAI1O,IAAI,QAAS,GAAI,CAAC,SAE7B6c,WAAY,GAAI7c,IAAI,aAAc,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAEtEmT,OAAQ,GAAInT,IAAI,SAAU,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAIrD8c,KAAM,GAAI9c,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,QAAS,CAAC,YAAa,SAAU,SAAU,UAAW,CAAC,OAAQ,OAAQ,SAAU,CAAC,WAE5H0e,KAAM,GAAI/c,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,OAAQ,QAAS,CAAC,WAAY,CAAC,OAAQ,OAAQ,SAAU,CAAC,QAAS,CAAC,SAE9GvE,OAAQ,GAAIkG,IAAI,SAAU,CAAE3B,WAAY,GAAK,CAAC,OAAQ,UAAW,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAAW,CAAC,SAE7GgC,IAAK,GAAIL,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,OAAQ,CAAC,SAEjGzI,IAAK,GAAIoK,IAAI,MAAO,CAAE3B,WAAY,GAAI,CAAC,OAAQ,aAAc,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,aAAc,CAAC,SAE5G4L,MAAO,GAAIjK,IAAI,QAAS,CAAE3B,WAAY,GAAI,CAAC,OAAQ,QAAS,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,QAAS,CAAC,SAEtG9G,OAAQ,GAAIyI,IAAI,SAAU,CAAE3B,WAAY,GAAI,CAAC,OAAQ,SAAU,WAAY,GAAI,CAAC,OAAQ,OAAQ,QAAS,WAAY,CAAC,UAAW,CAAC,WAElIiC,IAAK,GAAIN,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAErG2e,MAAO,GAAIhd,IAAI,QAAS,CAAE3B,WAAY,GAAK,CAAC,OAAQ,MAAO,CAAC,YAAa,CAAC,OAAQ,OAAQ,SAAU,CAAC,KAAM,YAAa,CAAC,OAAQ,KAAM,aAEvI4e,UAAW,GAAIjd,IAAI,YAAa,CAAE3B,WAAY,GAAK,CAAC,OAAQ,UAAW,CAAC,YAAa,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,YAAa,CAAC,OAAQ,SAAU,aAE3J/I,MAAO,GAAI0K,IAAI,QAAS,CAAE3B,WAAY,GAAK,CAAC,OAAQ,UAAW,CAAC,YAAa,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,YAAa,CAAC,OAAQ,SAAU,aAInJ6e,UAAW,GAAIld,IAAI,YAAa,CAAE3B,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAEpI8e,SAAU,GAAInd,IAAI,WAAY,CAAE3B,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAElI+e,UAAW,GAAIpd,IAAI,YAAa,CAAE3B,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAEpIgf,SAAU,GAAIrd,IAAI,WAAY,CAAE3B,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAElIif,UAAW,GAAItd,IAAI,YAAa,CAAE3B,WAAY,GAAK,CAAC,IAAK,IAAK,QAAS,GAAI,CAAC,QAAS,SAAU,CAAC,QAAS,CAAC,SAI1GjJ,IAAK,GAAI4K,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1FhJ,IAAK,GAAI2K,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1Fkf,IAAK,GAAIvd,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1Fmf,IAAK,GAAIxd,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1Fof,IAAK,GAAIzd,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1Fqf,SAAU,GAAI1d,IAAI,WAAY,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAEpGsf,OAAQ,GAAI3d,IAAI,SAAU,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAEhGuf,OAAQ,GAAI5d,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE9Fwf,MAAO,GAAI7d,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE5Fyf,OAAQ,GAAI9d,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAI9FkC,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BhL,QAAS,GAAIgL,IAAI,KAAM,GAAI,CAAC,SAE5B8L,WAAY,GAAI9L,IAAI,KAAM,GAAI,CAAC,SAE/BU,QAAS,GAAIV,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAEtGsC,WAAY,GAAIX,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAE1GkI,OAAQ,GAAIvG,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAEtGmI,cAAe,GAAIxG,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAE9GoI,UAAW,GAAIzG,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAEzGqI,iBAAkB,GAAI1G,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAIjHuC,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpCwnB,GAAczb,IAAI,OAAQ0b,GAAQ3Y,MAClC0Y,GAAczb,IAAI,WAAY0b,GAAQS,SACtCV,GAAczb,IAAI,WAAY0b,GAAQY,SACtCb,GAAczb,IAAI,QAAS0b,GAAQzjB,OACnCwjB,GAAczb,IAAI,OAAQ0b,GAAQkB,MAClCnB,GAAczb,IAAI,SAAU0b,GAAQvI,QACpCsI,GAAczb,IAAI,UAAW0b,GAAQ1mB,SACrCymB,GAAczb,IAAI,aAAc0b,GAAQ5P,YC/LxC,MAAMiS,GAAa,EACb,GAAgB,EAChB,GAAa,EACb,GAAa,EACbC,GAAmB,GASlB,MAAM,WAAiB,EAarB,cAAc/Z,EAAatG,GAEhC,MAAMsgB,EAAOtgB,EAAMnB,QAAQyH,EAAK8Z,KAC1B5jB,EAAU8J,EAAK,KAAkB,GAEvC,OAAO,IAAI,GAAS,OAAD,QAAGga,QAAS9jB,IAG1B,cAAcgB,GAEnB,MAAMhB,EAAO,iBAAagB,EAAKhB,SACzB8jB,EAAO9jB,EAAQ8jB,KAGrB,cAFO9jB,EAAQ8jB,KAERjpB,EAAQmF,GACX,CAACtB,KAAK+E,GAAIqgB,EAAKtZ,UACf,CAAC9L,KAAK+E,GAAIqgB,EAAKtZ,SAAUxK,GAKxB,gBAAgB8J,EAAWC,GAEhC,IAAKxQ,EAAQuQ,GAEX,OAAO,KAGT,IAAIga,EAAO/Z,EAAUkM,SAASnM,EAAK,IAEnC,IAAK,IAAI1S,EAAI,EAAGA,EAAI0S,EAAKhP,OAAQ1D,IAE/B0sB,EAAO/Z,EAAUiL,MAAM8O,EAAMha,EAAK1S,IAGpC,OAAO,IAAI,GAAS,CAClB0sB,OACA7oB,IAAK6O,EAAKhP,OACVI,IAAK4O,EAAKhP,SAMP,kBAKL6O,EAAUqO,QAAQ,CAChBtO,SAJe,EAKfL,OAAQ,CAACC,EAAM4O,KACb,GAAI3e,EAAQ+P,GACV,OAAOA,EAAK7N,IAAIyc,IAGpB3O,SAAU,CAACD,EAAM2O,KACf,GAAI1e,EAAQ+P,GACV,OAAOA,EAAK7N,IAAIwc,MAKtBtO,EAAUM,WAAW,CACnBP,SAlBe,EAmBf1I,KAlBwB,SAmBxBgH,QAAS,CAAC5N,EAAGC,EAAG2N,KACd,MAAM+b,EAAKxqB,EAAQa,GACb4pB,EAAKzqB,EAAQc,GAEnB,GAAI0pB,IAAOC,EAAI,OAAQD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE/C,GAAID,EAAI,CACN,IAAIE,EAAK7pB,EAAEU,OAAST,EAAES,OAEtB,GAAW,IAAPmpB,EAAU,CACZ,IAAIhc,EAAO,EACPC,EAAO,EAEX,IAAK,IAAI9Q,EAAI,EAAGA,EAAIgD,EAAEU,OAAQ1D,IAAK,CACjC,MAAMK,EAAIuQ,EAAQ5N,EAAEhD,GAAIiD,EAAEjD,IAEtBK,EAAI,GAAGwQ,IACPxQ,EAAI,GAAGyQ,IAGb+b,EAAKta,EAAU0O,WAAWpQ,EAAMC,GAGlC,OAAO+b,MAKbta,EAAUO,UAAU,CAClBR,SAjDe,EAkDf1I,KAjDwB,SAkDxBqH,OAAQ,CAACjO,EAAGC,EAAGgO,KACb,MAAM6b,EAAK3qB,EAAQa,GAGnB,GAAI8pB,IAFO3qB,EAAQc,GAEJ,OAAO,EAEtB,GAAI6pB,EACJ,CACE,GAAI9pB,EAAEU,SAAWT,EAAES,OAEjB,OAAO,EAGT,IAAK,IAAI1D,EAAI,EAAGA,EAAIgD,EAAEU,OAAQ1D,IAE5B,IAAKiR,EAAOjO,EAAEhD,GAAIiD,EAAEjD,IAElB,OAAO,EAIX,OAAO,MAKbuS,EAAUwO,UAAU,CAClBzO,SA9Ee,EA+Efd,KAAM,CAACpO,EAAGoO,EAAMF,KACd,GAAInP,EAAQiB,GAAI,CACd,MAAM2pB,EAAkB,GAExBzb,EAAclO,EAAG2pB,GAEjB,IAAK,MAAML,KAAQtpB,EACjB2pB,EAAShnB,KAAKyL,EAAKkb,IAGrB,OAAOK,MAMR,eAAeC,GAEpB,MAAMN,EAAO,GAAMvW,MAAM6W,GAEzB,OAAO,IAAI,GAAS,CAAEN,SAGjB,QAEL,OAAO,GAASrgB,GAGX,gBAEL,OAAO,GAAS0G,WAAW1O,IAGtB,MAAMuF,GAEX,MAAM2R,EAAKjU,KAAKsB,QACV4S,EAAK5R,EAAKhB,QAEhB2S,EAAGmR,KAAO,GAAM9O,MAAMrC,EAAGmR,KAAMlR,EAAGkR,MAClCnR,EAAG1X,IAAMP,KAAKO,IAAI0X,EAAG1X,IAAK2X,EAAG3X,KAC7B0X,EAAGzX,IAAMR,KAAKQ,IAAIyX,EAAGzX,IAAK0X,EAAG1X,KAGxB,WAAWwG,EAAkBE,EAAyBC,GAE3D,GAAI,GAAmBgR,GAAGnR,GAC1B,CACE,GAAmB,WAAfA,EAAKrJ,MAEP,OAAO,GAAMya,OAGf,GAAI1Z,EAASsI,EAAKrJ,OAEhB,OAAOe,EAASsF,KAAKsB,QAAQ/E,MAAQyG,EAAKrJ,MAAQqG,KAAKsB,QAAQ/E,IAC3DyD,KAAKsB,QAAQ8jB,KACb,GAAMjgB,SAASnF,KAAKsB,QAAQ8jB,MAIpC,IAAI9Q,EAAWtR,EAAKW,QAAQT,EAAKC,GAEjC,GAAImR,EACJ,CAGE,IAFAA,EAAWA,EAASvQ,yBAEI,GAEtB,OAAO,GAAMoB,SAASnF,KAAKsB,QAAQ8jB,MAGrC,GAAI9Q,aAAoB,GACxB,CACE,MAAMC,EAASzZ,MAAMkC,KAAKsX,EAAShT,QAAQkT,UAAUD,UAErD,GAAID,EAAShT,QAAQ3H,iBAAiB,GAEpC,OAAIe,EAASsF,KAAKsB,QAAQ/E,OAASgY,EAAOoR,KAAM7pB,GAAMA,GAAKkE,KAAKsB,QAAQ/E,KAE/DyD,KAAKsB,QAAQ8jB,KAGf,GAAMjgB,SAASnF,KAAKsB,QAAQ8jB,MAGrC,GAAI9Q,EAAShT,QAAQ3H,iBAAiB,IAEd,IAAlB4a,EAAOnY,QAA8B,WAAdmY,EAAO,GAEhC,OAAO,GAAMH,QAMrB,OAAO,KAGF,YAAYlR,GAEjB,MAAM,IAAE3G,EAAG,KAAE6oB,GAASplB,KAAKsB,QACrBskB,EAAclrB,EAAS6B,IAAQA,EAAM,GAAKA,GAAO4oB,GAAmB5oB,EAAM,EAC1EspB,EAAsB,GAE5B,IAAK,IAAIntB,EAAI,EAAGA,EAAIktB,EAAaltB,IAC/BmtB,EAASpnB,KAAK,CAAExE,IAAKvB,EAAGiB,MAAOyrB,IAGjC,MAAO,IACFS,EACH,CAAE5rB,IAAK,SAAUN,MAAO,GAAMya,QAC9B,CAAEna,IAAK,GAAMwa,MAAO9a,MAAO,GAAMwL,SAASigB,KAIvC,aAAazrB,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,MAAM,KAAE8jB,EAAI,IAAE7oB,EAAG,IAAEC,GAAQwD,KAAKsB,QAEhC,IAAKA,EAAQO,SACVP,EAAQG,OACTD,aAAiB,KAChBA,EAAMF,QAAQqkB,KAAKxsB,IAAMisB,EAAKzjB,aAAaxI,EAAGmI,IAE/C,OAAO,EAGT,KAAME,aAAiB,IAErB,OAAO,EAGT,IAAK4jB,EAAKzjB,aAAaH,EAAMF,QAAQ8jB,KAAM9jB,GAEzC,OAAO,EAGT,GAAIA,EAAQ3H,MACZ,CACE,MAAM+a,EAAWlT,EAAMF,QAAQ/E,IAE/B,GAAIA,KAASmY,GAAYA,EAAWnY,GAElC,OAAO,EAGT,MAAMoY,EAAWnT,EAAMF,QAAQ9E,IAE/B,GAAIA,KAASmY,GAAYA,EAAWnY,GAElC,OAAO,EAIX,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAY6D,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BK,EAASG,KAAK,GAASslB,UAAW9lB,KAAKsB,QAAQ8jB,KAAOvkB,GAAgBb,KAAKsB,QAAQ8jB,KAAOvkB,IAIvF,gBAAgBL,GAErB,OAAOA,IAAS,GAASslB,UACrB9lB,KAAKsB,QAAQ8jB,KACb,KAGC,UAAU7jB,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQ8jB,KAAKzY,UAAU3M,MAGvB,8BAEL,MAAM,KAAEolB,GAASplB,KAAKsB,QAEtB8jB,EAAK5N,8BAELxX,KAAKsB,QAAU,CAAE8jB,QAGZ,sBAEL,OAAO,GAAM1f,GAAGmd,GAAQ7oB,OAAQ,IAG3B,wBAEL,OAAO,GAAMqN,IACX,GAAM3B,GAAGmd,GAAQnb,QAAS,CACxB/N,MAAO,GAAMJ,IAAI,WAEnB,GAAMiO,IAAI,GAAM9B,GAAGmd,GAAQQ,SAAU,CACnCjiB,KAAM,GAAM7H,IAAI,SAChB6rB,KAAM,GAAMtX,OACZjG,QAAS,GAAML,IAAIxH,KAAKsB,QAAQ8jB,KAAKxO,0BACpC,CACDjd,MAAO,SACPkK,KAAM,YAKL,uBAEL,OAAO,GAAM6B,GAAGmd,GAAQpb,IAAK,CAC3B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,QAChB+P,QAAStJ,KAAKsB,QAAQ8jB,KAAKvO,yBAIxB,yBAAyB7U,EAAsBhF,EAAqBiF,GAGzE,OAAO,GAAMyD,GAAGmd,GAAQ9lB,IAAK,CAC3BqE,KAAM,GAAM7H,IAAI,SAChBiF,UAAWwD,GACV,CACDojB,KAAM,UAIH,QAAQzrB,GAEb,IAAKmB,MAAMD,QAAQlB,GAEjB,OAAO,EAGT,MAAM,KAAEyrB,EAAI,IAAE7oB,EAAG,IAAEC,GAAQwD,KAAKsB,QAEhC,GAAI5G,EAAS6B,IAAQ5C,EAAMyC,OAASG,EAElC,OAAO,EAGT,GAAI7B,EAAS8B,IAAQ7C,EAAMyC,OAASI,EAElC,OAAO,EAGT,IAAK,MAAMupB,KAAOpsB,EAEhB,IAAKyrB,EAAK1d,QAAQqe,GAEhB,OAAO,EAIX,OAAO,EAGF,UAAUpsB,GAEf,GAAIkB,EAAQlB,GACZ,CACE,MAAMyrB,EAAOplB,KAAKsB,QAAQ8jB,KAE1B,IAAK,IAAI1sB,EAAI,EAAGA,EAAIiB,EAAMyC,OAAQ1D,IAEhCiB,EAAMjB,GAAK0sB,EAAKpO,UAAUrd,EAAMjB,IAIpC,OAAOiB,EAGF,cAEL,MAAM,KAAEyrB,GAASplB,KAAKsB,QAEtB,OAAO,IAAI,GAAS,CAClB8jB,KAAMA,EAAKnO,gBAIR,QAEL,MAAM,KAAEmO,EAAI,IAAE7oB,EAAG,IAAEC,GAAQwD,KAAKsB,QAEhC,OAAO,IAAI,GAAS,CAClB8jB,KAAMA,EAAK3Y,QACXlQ,MACAC,QAIG,SAEL,OAAO,GAASsP,OAAO9L,MAGlB,SAEL,MAAO,GAGF,OAAO+L,GAEZ,MAAM,IAAExP,EAAG,IAAEC,GAAQwD,KAAKsB,QACpB0kB,EAAY/mB,EAAS1C,EAAK,IAC1B0pB,EAAYhnB,EAASzC,EAAK,IAG1BrC,EAAI4R,EAFI/P,KAAKO,IAAIypB,EAAWC,GACtBjqB,KAAKQ,IAAIwpB,EAAWC,GACL,GAAG,GACxB9nB,EAAa,GAEnB,IAAK,IAAIzF,EAAI,EAAGA,EAAIyB,EAAGzB,IAErByF,EAAIM,KAAKuB,KAAKsB,QAAQ8jB,KAAK9K,OAAOvO,IAGpC,OAAO5N,EAGF,SAASyM,GAEd,OAAOA,EAAOA,EAAK7N,IAAKgQ,GAAW/M,KAAKsB,QAAQ8jB,KAAKva,SAASkC,IAAM,KAG/D,OAAOpT,GAEZ,OAAOA,EAAQA,EAAMoD,IAAKgQ,GAAW/M,KAAKsB,QAAQ8jB,KAAKza,OAAOoC,IAAM,MApexD,GAAA+Y,UAAY,OAEZ,GAAA/gB,GAAKe,EAAGO,KAER,GAAAoF,WAAakX,GAEb,GAAA3W,UAAY4W,GAEZ,GAAAtX,SAAW,IAAI,GAAS,CAAE8Z,KAAM,GAAQ9Z,WAqBxC,GAAAW,iBAA2B,EAuB3B,GAAAC,YAAsB,ECnEtC,MAAMga,GAAiB,EAEhB,MAAM,WAAkB,EAWtB,cAAc9a,EAAatG,GAEhC,MAAMqhB,EAAW/a,EAAK8a,IAAgBnpB,IAAK/D,GAAW8L,EAAMnB,QAAQ3K,IAEpE,OAAO,IAAI,GAAUmtB,GAGhB,cAAc7jB,GAEnB,MAAM6jB,EAAW7jB,EAAKhB,QAAQvE,IAAInD,GAAKA,EAAEkS,UAEzC,MAAO,CAAC9L,KAAK+E,GAAIohB,GAKZ,gBAAgB/a,EAAWC,GAEhC,OAAO,KAKF,mBAKA,eAAevG,GAEpB,OAAO,IAAI,GAAUA,EAAM/H,IAAKnD,GAAM,GAAMiV,MAAMjV,KAG7C,QAEL,OAAO,GAAUmL,GAGZ,gBAEL,OAAO,GAAU0G,WAAW1O,IAGvB,MAAMuF,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,GAAI,GAAmBgR,GAAGnR,GAC1B,CACE,GAAmB,WAAfA,EAAKrJ,MAEP,OAAO,GAAMya,OAGf,GAAI1Z,EAASsI,EAAKrJ,OAEhB,OAAOqG,KAAKsB,QAAQ0B,EAAKrJ,OAI7B,IAAI2a,EAAWtR,EAAKW,QAAQT,EAAKC,GAEjC,GAAImR,EACJ,CAGE,IAFAA,EAAWA,EAASvQ,yBAEI,GAEtB,OAAO,GAAM+V,UAAU9Z,KAAKsB,QAAS,GAASgK,UAGhD,GAAIgJ,aAAoB,GACxB,CACE,GAAIA,EAAShT,QAAQ3H,iBAAiB,GACtC,CACE,MACMmL,EADShK,MAAMkC,KAAKsX,EAAShT,QAAQkT,UAAUD,UAChCxX,IAAKrE,GAAcsH,KAAKsB,QAAQ5I,IAAIuI,OAAOrH,KAAOA,GAEvE,OAAO,GAAMkgB,UAAUhV,EAAO,GAASwG,UAGzC,GAAIgJ,EAAShT,QAAQ3H,iBAAiB,GACtC,CACE,MAAM4a,EAASzZ,MAAMkC,KAAKsX,EAAShT,QAAQkT,UAAUD,UAErD,GAAsB,IAAlBA,EAAOnY,QAA8B,WAAdmY,EAAO,GAEhC,OAAO,GAAMH,UAOhB,YAAYlR,GAEjB,MAAO,IACFlD,KAAKsB,QAAQvE,IAAI,CAACpD,EAAOM,KAAQ,CAAGA,MAAKN,WAC5C,CAAEM,IAAK,SAAUN,MAAO,GAAMya,QAC9B,CACEna,IAAK,IAAI,GAAS,CAChBA,IAAK,GAAWqR,SAChB3R,MAAO,GAAW2R,SAClBkJ,UAAW,IAAItZ,IACb8E,KAAKsB,QAAQvE,IAAI,CAAC+B,EAAM7E,IAAQ,CAACA,EAAKA,OAG1CN,MAAO,GAAMmgB,UAAU9Z,KAAKsB,QAAS,GAASgK,WAEhD,CACErR,IAAK,GAAMwa,MACX9a,MAAO,GAAMwL,SACX,GAAM2U,UAAU9Z,KAAKsB,QAAS,GAASgK,aAMxC,aAAa3R,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGF,sBAEL,OAAO,GAAMomB,SACRpmB,KAAKsB,QAAQvE,IAAKnD,GAAMA,EAAE+c,wBAI1B,wBAEL,OAAO,GACJjR,GAAGuZ,GAASvX,QAAS,CACpB/N,MAAO,GAAMJ,IAAI,WAElB8N,IAAIrH,KAAKsB,QAAQvE,IAAI,CAACnD,EAAGlB,IAAM,GAC7BN,OAAO,CAAEuB,MAAO,GAAMJ,IAAI,QAASb,KACnCyhB,IAAIvgB,EAAEgd,2BAKN,uBAEL,OAAO,GAAMtP,GACX,GAAM5B,GAAG2Z,GAAU5X,IAAK,CACtB9N,MAAO,GAAMJ,IAAI,QAAS,UAC1BsK,KAAM,GAAMtK,IAAI,OAAQ,eAEvByG,KAAKsB,QAAQvE,IAAI,CAACnD,EAAGlB,IAAM,GAC3BN,OAAO,CACNuB,MAAO,GAAMJ,IAAI,QAASb,GAC1BmL,KAAM,GAAMtK,IAAI,OAAQb,KAEzByhB,IAAIvgB,EAAEid,0BAKN,yBAAyB7U,EAAsBhF,EAAqBiF,GAGzE,MAAMmY,EAAU1f,EAASsC,GACnBqd,EAAQ3f,EAASuH,GAEvB,OAAKmY,GAAWC,EAEP,GAAMjiB,OAAO,CAAEmJ,OAAQ,GAAMhI,IAAI,UACtC,GAAMmM,GAAGmd,GAAQG,OAAQ,CACvB5hB,KAAM,GAAM7H,IAAI,SAChBsP,MAAO5G,EACPmjB,KAAMpjB,KAIHoY,IAAYC,EAEZ,GAAMjM,KACX,GAAM1I,GAAGmd,GAAQM,SAAU,CACzB/hB,KAAM,GAAM7H,IAAI,SAChBsP,MAAO7L,IAET,GAAMzD,IAAI,UAGLyD,IAASiF,GAAMmY,EAEf,GAAMhM,KACX,GAAM5Q,OAAO,QAASR,GACnBiF,GAAGD,EAAU,SAChB,GAAMzI,IAAI,UAIPyI,EAGC,iBAAiBR,EAAaF,GAEtC,IAAKA,EAAQG,QACVH,EAAQO,QACTL,aAAiB,KAChBxB,KAAKsB,QAAQqkB,KAAKxsB,IAAMA,EAAEwI,aAAaH,EAAMF,QAAQ8jB,KAAM9jB,KAC5D5G,EAAS8G,EAAMF,QAAQ/E,MACvBiF,EAAMF,QAAQ/E,KAAOyD,KAAKsB,QAAQlF,OAElC,OAAO,EAGT,KAAMoF,aAAiB,IAErB,OAAO,EAGT,MAAM9F,EAAIsE,KAAKsB,QACT3F,EAAI6F,EAAMF,QAEhB,GAAI3F,EAAES,OAASV,EAAEU,QAAWkF,EAAQG,OAAS/F,EAAEU,SAAWT,EAAES,OAE1D,OAAO,EAGT,IAAK,IAAI1D,EAAI,EAAGA,EAAIgD,EAAEU,OAAQ1D,IAE5B,IAAKgD,EAAEhD,GAAGiJ,aAAahG,EAAEjD,GAAI4I,GAE3B,OAAO,EAIX,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYjB,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAKsB,QAAQvE,IAAI,CAACuF,EAAMuG,IAAUxI,EAASG,KAAKqI,EAAOvG,EAAOzB,GAAgBb,KAAKsB,QAAQ0L,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKsB,QAAQ0L,OAAOnE,EAAO,MAIxJ,gBAAgBrI,GAErB,OAAOR,KAAKsB,QAAQd,IAAS,KAGxB,UAAUe,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQkD,QAAQ5K,GAAKA,EAAE+S,UAAU3M,OAGjC,8BAELA,KAAKsB,QAAQkD,QAAQ5K,GAAKA,EAAE4d,+BAGvB,QAAQ7d,GAEb,IAAKkB,EAAQlB,GAEX,OAAO,EAGT,MAAMwsB,EAAWnmB,KAAKsB,QAEtB,IAAK,IAAI5I,EAAI,EAAGA,EAAIytB,EAAS/pB,OAAQ1D,IAEnC,IAAKytB,EAASztB,GAAGgP,QAAQ/N,EAAMjB,IAE7B,OAAO,EAIX,OAAO,EAGF,UAAUiB,GAEf,IAAKkB,EAAQlB,GAEX,OAAOA,EAGT,MAAMwsB,EAAWnmB,KAAKsB,QAEtB,IAAK,IAAI5I,EAAI,EAAGA,EAAIytB,EAAS/pB,OAAQ1D,IAEnCiB,EAAMjB,GAAKytB,EAASztB,GAAGse,UAAUrd,EAAMjB,IAGzC,OAAOiB,EAGF,cAEL,OAAO,IAAI,GAAU,IAGhB,QAEL,OAAO,IAAI,GAAUqG,KAAKsB,QAAQvE,IAAIgQ,GAAKA,EAAEN,UAGxC,SAEL,OAAO,GAAUX,OAAO9L,MAGnB,SAEL,OAAOA,KAAKsB,QAAQvE,IAAIgQ,GAAKA,EAAE/S,UAG1B,OAAO+R,GAEZ,OAAO/L,KAAKsB,QAAQvE,IAAIgQ,GAAKA,EAAEuN,OAAOvO,IAGjC,SAASnB,GAEd,OAAO5K,KAAKsB,QAAQvE,IAAI,CAACgQ,EAAGrU,IAAMqU,EAAElC,SAASD,EAAKlS,KAG7C,OAAOiB,GAEZ,OAAOqG,KAAKsB,QAAQvE,IAAI,CAACgQ,EAAGrU,IAAMqU,EAAEpC,OAAOhR,EAAMjB,MAjWrC,GAAAqM,GAAKe,EAAGgB,MAER,GAAA2E,WAAasT,GAEb,GAAA/S,UAAYgT,GAEZ,GAAA1T,SAAW,IAAI,GAAU,IAgBzB,GAAAW,kBAA4B,EAO5B,GAAAC,YAAsB,EC3CtC,MAAM,GAAoB,EAEnB,MAAM,WAAwB,EAqBnC,YAAmBY,GAEjBT,QACArM,KAAK8M,YAAcA,EAnBd,cAAc1B,EAAakB,GAEhC,MAAMQ,EAAc1B,EAAK,IAAmBrO,IAAK/D,GAAWsT,EAAMC,cAAcvT,IAEhF,OAAO,IAAI,GAAgB8T,GAGtB,cAAc9J,GAEnB,MAAM8J,EAAc9J,EAAK8J,YAAY/P,IAAIgQ,GAAKA,EAAEjB,UAEhD,MAAO,CAAC9L,KAAK+E,GAAI+H,GAWZ,QAEL,OAAO,GAAgB/H,GAGlB,cAAc7B,GAEnB,OAAOlD,KAAK8M,YAAYpO,OAAO,CAAClC,EAAKuQ,IAAM/Q,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAO,GAG3E,WAEL,OAAO,KAGF,SAEL,OAAO,GAAgB4I,OAAO9L,MAGzB,QAEL,OAAO,IAAI,GAAgBA,KAAK8M,YAAY/P,IAAKgQ,GAAMA,EAAEN,UAGpD,QAAQvJ,EAAyBC,GAEtC,OAAO,IAAI,GAAUnD,KAAK8M,YAAY/P,IAAKgQ,GAAM,GAAMsZ,SAAStZ,EAAEpJ,QAAQT,EAAKC,MAG1E,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAK8M,YAAYtI,QAAQ,CAACxB,EAAM6F,IAC9BxI,EAASG,KAAKqI,EAAO7F,EAAOnC,GAAgBb,KAAK8M,YAAYE,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAK8M,YAAYE,OAAOnE,EAAO,MAMhI,sBAAsB9F,GAE3B,OAAOrI,EAASqI,EAAM,KAAOA,EAAM,GAAK/C,KAAK8M,YAAY1Q,OACrD,CAAC,EAAG4D,KAAK8M,YAAY/J,EAAM,KAC3B,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdvB,KAAK8M,YAAYtI,QAAQuI,GAAKA,EAAEJ,UAAU3M,OAGrC,SAASkD,EAAyBC,EAAeK,GAEtDxD,KAAK8M,YAAYtI,QAAQjB,IAEvBA,EAAQF,SAASH,EAAKC,EAASK,MAlFrB,GAAAuB,GAAK,QCLrB,MAAM,GAAc,EAEb,MAAM,WAAyB,EAqBpC,YAAmBlG,GAEjBwN,QACArM,KAAKnB,MAAQA,EAnBR,cAAcuM,EAAakB,GAEhC,MAAMzN,EAAQd,EAAUqN,EAAK,IAAc2B,GAAKT,EAAMC,cAAcQ,IAEpE,OAAO,IAAI,GAAiBlO,GAGvB,cAAcmE,GAEnB,MAAMnE,EAAQd,EAAUiF,EAAKnE,MAAOkO,GAAKA,EAAEjB,UAE3C,MAAO,CAAC9L,KAAK+E,GAAIlG,GAWZ,QAEL,OAAO,GAAiBkG,GAGnB,cAAc7B,GAEnB,OAAOhF,EAAa8B,KAAKnB,MAAO,CAACkO,EAAGlQ,EAAGL,IAAQR,KAAKQ,IAAIA,EAAKuQ,EAAEP,cAActJ,IAAO,GAG/E,WAEL,OAAO,KAGF,SAEL,OAAO,GAAiB4I,OAAO9L,MAG1B,QAEL,OAAO,IAAI,GAAiBjC,EAAUiC,KAAKnB,MAAQrE,GAAMA,EAAEiS,UAGtD,QAAQvJ,EAAyBC,GAEtC,OAAO,IAAI,GAAW,CAAEtE,MAAOd,EAAUiC,KAAKnB,MAAOkO,GAAK,GAAMsZ,SAAStZ,EAAEpJ,QAAQT,EAAKC,OAGnF,SAAY9C,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1B5B,EAAW4B,KAAKnB,MAAO,CAACmE,EAAMlE,IAC5BuB,EAASG,KAAK1B,EAAMkE,EAAOnC,GAAgBb,KAAKnB,MAAMC,GAAQ+B,EAAa,WAAab,KAAKnB,MAAMC,MAKlG,sBAAsBiE,GAE3B,OAAOA,EAAM,KAAM/C,KAAKnB,MACpB,CAAC,EAAGmB,KAAKnB,MAAMkE,EAAM,KACrB,KAGC,UAAUxB,EAAqB,MAEpCvB,KAAKuB,OAASA,EAEdnD,EAAW4B,KAAKnB,MAAOkO,GAAKA,EAAEJ,UAAU3M,OAGnC,SAASkD,EAAyBC,EAAeK,GAEtDpF,EAAW4B,KAAKnB,MAAOkO,GAAKA,EAAE1J,SAASH,EAAKC,EAASK,KA/EzC,GAAAuB,GAAK,MCiBd,MAAM,GAKJ,iBAAuC/B,EAASsjB,GAAiB,GAOtE,OALItmB,KAAKumB,eAAiBD,IAExBtjB,EAAK2J,YAGA3J,EAMF,aAAarJ,GAElB,OAAOkB,EAAQlB,GACXA,EAAMoD,IAAKH,GAAMoD,KAAK6O,MAAMjS,IAC5BjD,aAAiB,EACfA,EACA4B,EAAS5B,GACPoE,EAAuCpE,EAAQiD,GAAMoD,KAAK6O,MAAMjS,IAChE,IAAI,GAAmBjD,GAK1B,YAAYikB,EAAiB4I,EAAkBC,GAA2B,GAE/E,MAAMC,KAAU9I,EAAU+I,YAAYH,EAAWG,UAC3CjhB,EAAKkY,EAAUzH,gBAAgBuQ,GAErC,OAAOhhB,EACH1F,KAAK0F,GAAGA,EAAI,CAAE/L,MAAOqG,KAAKzG,IAAI,WAC9BktB,EACEzmB,KAAK2M,UAAU6Z,EAAW7P,uBAC1B,KAGD,cAAcrK,GAEnB,OAAOtM,KAAK2M,UAAU,IAAI,GAAcL,IAGnC,eAAeA,GAEpB,OAAOtM,KAAK2M,UAAU,IAAI,GAAgBL,IAGrC,aAAa3S,GAElB,OAAO,IAAI,GAAmBA,GAGzB,cAAcitB,EAAwC,GAAIxY,EAAmB,GAAaL,UAE/F,OAAO/N,KAAK2M,UAAU,IAAI,GAAiB,GAAIyB,GAAMyY,KAAKD,IAGrD,UAAUxY,EAAkBiB,EAAwB,GAAatB,SAAUuB,EAAwBC,GAExG,OAAOvP,KAAK2M,UAAU,IAAI,GAAa0C,EAAWjB,EAAMkB,EAAeC,IAGlE,WAAWjB,EAAkBhK,EAAyB,IAAI,GAAmB,GAAIsT,EAAuB,IAAI,GAAmB,GAAIxJ,EAAmB,GAAaL,SAAUuB,EAAwBC,GAE1M,OAAOvP,KAAK2M,UAAU,IAAI,GAAc2B,EAAUtO,KAAK6O,MAAMvK,GAAQtE,KAAK6O,MAAM+I,GAAMxJ,EAAMkB,EAAeC,IAGtG,cAAcrP,GAEnB,OAAOF,KAAK2M,UAAU,IAAI,GAAc3M,KAAK6O,MAAM3O,KAG9C,WAAWvG,KAA2BuG,GAE3C,OAAOF,KAAK2M,UAAU,IAAI,GAAc3M,KAAK6O,MAAMlV,GAAQqG,KAAK6O,MAAM3O,KAGjE,gBAAgBjH,EAAcU,GAEnC,OAAOqG,KAAK2M,UAAU,IAAI,GAAmB3M,KAAK6O,MAAMlV,GAAQV,IAG3D,UAAUoW,EAAuBjB,EAAmB,GAAaL,SAAUsN,EAAwB,GAAatN,UAErH,OAAO/N,KAAK2M,UAAU,IAAI,GAAa,CAAC,CAAC0C,EAAWjB,IAAQiN,IAGvD,cAAcpiB,EAAc4iB,EAAwC,IAEzE,OAAO7b,KAAK2M,UAAU,IAAI,GAAiB1T,EAAM+G,KAAK6O,MAAMgN,KAGvD,cAEL,OAAO,GAAa9N,SAGf,WAAW/K,GAEhB,OAAOhD,KAAK2M,UAAU,IAAI,EAAc3J,IAGnC,cAAcnE,GAEnB,OAAOmB,KAAK2M,UAAU,IAAI,GAAiB3M,KAAK6O,MAAMhQ,KAGjD,UACL6G,EACAR,EACAwX,EAAyCtjB,OAAOY,OAAO,OAEvD,OAAOgG,KAAK2M,UAAU,IAAI,GAA6BjH,EAAGX,GAAI/E,KAAK6O,MAAM3J,GAASwX,IAG7E,aAAapQ,GAElB,OAAOtM,KAAK2M,UAAU,IAAI,GAAaL,IAGlC,cAAc3S,EAAyB,GAAaoU,UAEzD,OAAO/N,KAAK2M,UAAU,IAAI,GAAiB3M,KAAK6O,MAAMlV,KAGjD,cAAcuG,GAEnB,OAAOF,KAAK2M,UAAU,IAAI,GAAc3M,KAAK6O,MAAM3O,GAAO,GAAa6N,WAGlE,cAAoEpU,EAAmB+L,GAE5F,OAAO1F,KAAK2M,UAAU,IAAI,GAAiBhT,EAAO+L,EAAGX,GAAI,GAAI,GAAagJ,WAGrE,gBAAgB0Q,EAAkBvZ,EAA0C,IAEjF,OAAOlF,KAAK2M,UAAU,IAAI,GAAmB8R,EAAUze,KAAK6O,MAAM3J,KAG7D,gBAAgBihB,GAErB,OAAOnmB,KAAK2M,UAAU,IAAI,GAAgB3M,KAAK6O,MAAMsX,KAGhD,iBAAiBjmB,GAEtB,OAAOF,KAAK2M,UAAU,IAAI,GAAiB3M,KAAK6O,MAAM3O,GAAO,GAAa6N,WAGrE,aAAasB,EAAuBjB,EAAmB,GAAaL,SAAUuB,EAAwBC,GAE3G,OAAOvP,KAAK2M,UAAU,IAAI,GAAgB0C,EAAWjB,EAAMkB,EAAeC,IAGrE,mBAEL,OAAOvP,KAAK8mB,WAAMxoB,GAGb,cAEL,OAAO0B,KAAK8mB,MAAM,MAGb,cAEL,OAAO9mB,KAAK8mB,OAAM,GAGb,eAEL,OAAO9mB,KAAK8mB,OAAM,GAGb,cAEL,OAAO9mB,KAAK8mB,MAAM,GAGb,aAEL,OAAO9mB,KAAK8mB,MAAM,GAGb,sBAEL,OAAO9mB,KAAK8mB,MAAM,GAGb,qBAEL,OAAO9mB,KAAK8mB,OAAO,GAGd,wBAEL,OAAO9mB,KAAK8mB,MAAM,GAGb,gBAEL,OAAO9mB,KAAK8mB,MAAM,IAGb,eAAe3W,GAEpB,OAAO,IAAI,GAAkBA,GAGxB,cAAclX,GAEnB,OAAO,IAAI,GAAoBA,GAG1B,gBAAgBA,GAErB,OAAO,IAAI,GAAsBA,GAG5B,YAAYA,GAEjB,OAAO,IAAI,GAAkBA,IAjOjB,GAAAstB,eAAyB,ECxBzC,MAAM,GAAgB,EAChB,GAAa,EACb,GAAa,GASZ,MAAM,WAAmB,EAavB,cAAcnb,GAEnB,OAAO,IAAI,GAAWA,EAAK,KAAkB,IAGxC,cAAc9I,GAEnB,OAAOnG,EAAQmG,EAAKhB,SAChBtB,KAAK+E,GACL,CAAC/E,KAAK+E,GAAIzC,EAAKhB,SAKd,gBAAgB8J,EAAWC,GAEhC,OAAK3Q,EAAS0Q,GAKP,IAAI,GAAW,CACpB7O,IAAK6O,EACL5O,IAAK4O,EACL2b,MAAO/qB,KAAKC,IAAID,KAAK6kB,MAAMzV,GAAQA,IAAS,GAAW4b,gBANhD,KAgBJ,kBAKL/b,EAAUM,WAAW,CACnBP,SAJe,EAKf1I,KAJwB,SAKxBgH,QAAS,CAAC5N,EAAGC,IACJD,EAAIC,EACNA,EAAID,EAAKsE,KAAKinB,iBACb,GACC,EACFvrB,EAAIC,EAAKqE,KAAKinB,iBACb,EACA,IAIVhc,EAAUO,UAAU,CAClBR,SAlBe,EAmBf1I,KAlBwB,SAmBxBqH,OAAQ,CAACjO,EAAGC,IACHK,KAAKC,IAAIP,EAAIC,GAAKqE,KAAKknB,iBAIlCjc,EAAUM,WAAW,CACnBP,SA1Be,EA2Bf1I,KAAM,SACNgH,QAAS,CAAC5N,EAAGC,IACJD,EAAIC,IAIfsP,EAAUO,UAAU,CAClBR,SAlCe,EAmCf1I,KAAM,SACNqH,OAAQ,CAACjO,EAAGC,IACHD,IAAMC,IAKZ,QAEL,OAAO,GAAWoJ,GAGb,gBAEL,OAAO,GAAW0G,WAAW1O,IAGxB,MAAMuF,GAEX,MAAM2R,EAAKjU,KAAKsB,QACV4S,EAAK5R,EAAKhB,QAEhB2S,EAAGzX,IAAMR,KAAKQ,IAAIyX,EAAGzX,IAAK0X,EAAG1X,KAC7ByX,EAAG1X,IAAMP,KAAKO,IAAI0X,EAAG1X,IAAK2X,EAAG3X,KAC7B0X,EAAG8S,MAAQ9S,EAAG8S,OAAS7S,EAAG6S,MAGrB,WAAW/jB,EAAkBE,EAAyBC,GAE3D,OAAO,KAGF,YAAYD,GAEjB,MAAO,GAGF,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,KAAME,aAAiB,IAErB,OAAO,EAGT,GAAIF,EAAQ3H,MACZ,CACE,MAAM4C,EAAMyD,KAAKsB,QAAQ/E,IACnBmY,EAAWlT,EAAMF,QAAQ/E,IAE/B,GAAI7B,EAAS6B,MAAU7B,EAASga,IAAaA,EAAWnY,GAEtD,OAAO,EAGT,MAAMC,EAAMwD,KAAKsB,QAAQ9E,IACnBmY,EAAWnT,EAAMF,QAAQ9E,IAE/B,GAAI9B,EAAS8B,MAAU9B,EAASia,IAAaA,EAAWnY,GAEtD,OAAO,EAIX,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAY6D,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAe,MAE9BvB,KAAKuB,OAASA,EAGT,8BAELvB,KAAKsB,QAAU,GAGV,sBAEL,OAAO,GAAMoE,GAAG2Z,GAAUrlB,OAAQ,IAG7B,wBAEL,OAAO,GAAM0L,GAAG2Z,GAAU3X,QAAS,CACjC/N,MAAO,GAAMJ,IAAI,WAId,uBAEL,OAAO,GAAMmM,GAAG2Z,GAAU5X,IAAK,CAC7B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,QAAQI,GAEb,IAAKe,EAASf,GAEZ,OAAO,EAGT,MAAM,IAAE4C,EAAG,IAAEC,EAAG,MAAEuqB,GAAU/mB,KAAKsB,QAEjC,QAAI5G,EAAS6B,IAAQ5C,EAAQ4C,OAKzB7B,EAAS8B,IAAQ7C,EAAQ6C,MAKzBuqB,IAAUlrB,EAAQlC,KAQjB,UAAUA,GAEf,OAAOA,EAGF,cAEL,OAAO,IAAI,GAAW,IAGjB,QAEL,OAAO,IAAI,GAAWsR,EAAUf,KAAKlK,KAAKsB,UAGrC,SAEL,OAAO,GAAWwK,OAAO9L,MAGpB,SAEL,OAAO,EAGF,OAAO+L,GAEZ,MAAM,IAAExP,EAAG,IAAEC,EAAG,MAAEuqB,GAAU/mB,KAAKsB,QAIjC,OAAOyK,EAHW9M,EAAS1C,EAAK,IACd0C,EAASzC,EAAK,IAECuqB,GAG5B,SAASnc,GAEd,OAAOA,EAGF,OAAOjR,GAEZ,OAAOA,GA9QK,GAAAqtB,cAAgB,KAEhB,GAAAjiB,GAAKe,EAAGW,OAER,GAAAgF,WAAa0T,GAEb,GAAAnT,UAAYoT,GAEZ,GAAA9T,SAAW,IAAI,GAAW,IAc1B,GAAAW,iBAA2B,EAgB3B,GAAAC,YAAsB,EAEtB,GAAAgb,eAAiB,KAEjB,GAAAD,iBAAmB,KC/DnC,MAAME,GAAgB,CACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MCDjD,IAAIC,GDMX,CACEC,aAAc,EACdC,sBAAuB,EAEvBC,GAAI,KACJC,GAAI,KAEJC,SAAU,SACVC,UAAW,YACXC,QAAS,UACTC,QAAS,QACTC,SAAU,YACVC,SAAU,WACVC,UAAW,mBACXC,UAAW,kBACXC,WAAY,yBACZC,WAAY,uBAEZC,OAASxuB,IAMP,OAAOA,GAFQA,GAFQ,IAEmBA,GADnB,GAC6C,KAAOwtB,GAAKxtB,EAAQwtB,GAAI/qB,UAK9FgF,KAAOgnB,IAEL,MAAMrE,EAAeqE,EAAMhsB,OAAS,EACpC,IAAI+B,EAAciqB,EAAM,GAExB,IAAK,IAAI1vB,EAAI,EAAGA,EAAIqrB,EAAMrrB,IAExByF,GAAO,KAAOiqB,EAAM1vB,GAOtB,OAJIqrB,EAAO,IACT5lB,GAAO,QAAUiqB,EAAMrE,IAGlB5lB,GAGTkqB,OAAQ,CACN,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC/G,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,MAAO,OACjF,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC9E,CAAC,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,MAGjEC,SAAU,CACR,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACnE,CAAC,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,OAC9C,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC3C,CAAC,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,QE7D/B,MAAMC,GAA2B,IAe3BC,GAAuB,EAKvBC,GAf4B,GAeDF,GAK3BG,GApB4B,GAoBHD,GAKzBE,GApBuB,GAoBCD,GAKxBE,GAAoB,EAKpBC,GAAyB,GAKzBC,GAAkB,EAKlBC,GAAkB,GAKlBC,GAAmB,GAKnBC,GAAqB,GAKrBC,GAAqB,GAKrBC,GAAqB,IAKrBC,GAAsB,ECxDtBC,GACb,CACEC,KAAW3vB,GAAUA,EACrBknB,MAAWlnB,GAAUqC,KAAK6kB,MAAMlnB,GAChCmnB,KAAWnnB,GAAUqC,KAAK8kB,KAAKnnB,GAC/BuC,MAAWvC,GAAUqC,KAAKE,MAAMvC,GAChC4vB,SAAW5vB,GAAUA,EAAQ,EAAIqC,KAAK8kB,KAAKnnB,GAASqC,KAAK6kB,MAAMlnB,GAC/DqnB,KAAWrnB,GAAUA,EAAQ,EAAIqC,KAAK8kB,KAAKnnB,GAASqC,KAAK6kB,MAAMlnB,GAC/DonB,GAAWpnB,GAAUA,EAAQ,EAAIqC,KAAK6kB,MAAMlnB,GAASqC,KAAK8kB,KAAKnnB,IAKpD6vB,GACb,CACEC,UAAsBzwB,GAAKA,EAAE0wB,UAC7BC,iBAAsB3wB,GAAKgD,KAAK6kB,MAAM7nB,EAAE0wB,UAAYnB,IACpDqB,OAAsB5wB,GAAKA,EAAE6wB,kBAC7BC,OAAsB9wB,GAAKA,EAAE+wB,aAC7BC,OAAsBhxB,GAAKA,EAAEixB,aAC7BC,KAAsBlxB,GAAKA,EAAEmxB,WAC7BC,IAAsBpxB,GAAKA,EAAEqxB,SAC7BC,WAAsBtxB,GAAKA,EAAEuxB,UAC7BC,eAAsBC,GACtBC,UAAsBC,GACtBC,UAAsBC,GACtBC,KAAsBC,GACtBC,YAAsBC,GACtBC,gBAAsBC,GACtBC,gBAAsBC,GACtBC,oBAAsBC,GACtBC,oBAAsBC,GACtBC,WAAsBC,GACtBC,eAAsBC,GACtBC,eAAsBC,GACtBC,mBAAsBC,GACtBC,mBAAsBC,GACtBC,MAAsBpzB,GAAKA,EAAEqzB,WAC7BC,QAAsBC,GACtBC,KAAsBxzB,GAAKA,EAAEyzB,cAC7BC,eAAsBC,GACtBC,cAAsBC,GACtBC,eAAsBC,GACtBC,gBAAsBC,GACtBC,kBAAsBC,IAKXC,GACb,CACE3D,UAAsB,CAACzwB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAEwxB,QAAQ1wB,IACzD+sB,iBAAsB,CAAC3wB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAEwxB,QAAY,IAAJ1wB,IACzDgtB,OAAsB,CAAC5wB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAEyxB,gBAAgB3wB,IACjEktB,OAAsB,CAAC9wB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAE0xB,WAAW5wB,IAC5DotB,OAAsB,CAAChxB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAE2xB,WAAW7wB,IAC5DstB,KAAsB,CAAClxB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAE4xB,SAAS9wB,IAC1DwtB,IAAsB,CAACpxB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIsuB,IAAItuB,EAAGc,EAAId,EAAEuuB,WAChEC,WAAsB,CAACtxB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAE6xB,QAAQ/wB,IACzD4tB,eAAsB,CAACxxB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIsuB,IAAItuB,EAAGc,EAAI6tB,GAAkB3uB,KAChF4uB,UAAsB,CAAC1xB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIsuB,IAAItuB,EAAGc,EAAI+tB,GAAa7uB,KAC3E8uB,UAAsB,CAAC5xB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIsuB,IAAItuB,EAAGc,EAAIiuB,GAAa/uB,KAC3EgvB,KAAsB,CAAC9xB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAImuB,GAAcjvB,KAC7EkvB,YAAsB,CAAChyB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAIquB,GAAkBnvB,KACjFovB,gBAAsB,CAAClyB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAIuuB,GAAmBrvB,KAClFsvB,gBAAsB,CAACpyB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAIyuB,GAAmBvvB,KAClFwvB,oBAAsB,CAACtyB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAI2uB,GAAuBzvB,KACtF0vB,oBAAsB,CAACxyB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAI6uB,GAAuB3vB,KACtF4vB,WAAsB,CAAC1yB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAI+uB,GAAiB7vB,KAChF8vB,eAAsB,CAAC5yB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAIivB,GAAkB/vB,KACjFgwB,eAAsB,CAAC9yB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAImvB,GAAkBjwB,KACjFkwB,mBAAsB,CAAChzB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAIqvB,GAAsBnwB,KACrFowB,mBAAsB,CAAClzB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIgvB,KAAKhvB,EAAGc,EAAIuvB,GAAsBrwB,KACrFswB,MAAsB,CAACpzB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAE8xB,SAAShxB,IAC1D0vB,QAAsB,CAACtzB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAK,GAAIwwB,QAAQxwB,EAAGc,EAAI2vB,GAAWzwB,KAC7E0wB,KAAsB,CAACxzB,EAAG4D,IAAMywB,GAAOr0B,EAAG8C,GAAKA,EAAE+xB,YAAYjxB,KAKlDkxB,GACb,CACElE,OAAU9tB,GAAKA,EACfguB,OAAUiE,GACV/D,OAAUgE,GACV9D,KAAU+D,GACV7D,IAAU8D,GACVpD,KAAUqD,GACV/B,MAAUgC,GACV9B,QAAU+B,GACV7B,KAAU8B,IAKCC,GACb,CACE3E,OAAU9tB,GAAKA,EACfguB,OAAU0E,GACVxE,OAAUyE,GACVvE,KAAUwE,GACVtE,IAAUuE,GACV7D,KAAU8D,GACVxC,MAAUyC,GACVvC,QAAUwC,GACVtC,KAAUuC,IAKC,GACb,CACEnF,OAAUoF,GACVlF,OAAUmF,GACVjF,OAAUkF,GACVhF,KAAUiF,GACV/E,IAAUgF,GACVtE,KAAUuE,GACVjD,MAAUkD,GACVhD,QAAUiD,GACV/C,KAAUgD,IAKCC,GACb,CACE7F,OAAU8F,GACV5F,OAAU6F,GACV3F,OAAU4F,GACV1F,KAAU2F,GACVzF,IAAU0F,GACVhF,KAAUiF,GACV3D,MAAU4D,GACV1D,QAAU2D,GACVzD,KAAU0D,IAGL,SAAS7C,GAAO3xB,EAASy0B,EAAqD7uB,GAEnF,MAAM3F,EAAI,IAAIX,KAAKU,EAAE00B,WAIrB,OAFAD,EAAQx0B,EAAG2F,GAEJ3F,EAGF,SAAS00B,GAAa30B,EAASC,EAAS20B,EAAkB,SAAUhvB,EAAyB8lB,IAElG,MAAMmJ,EAAUzC,GAAQwC,GAClBx0B,EAAIuxB,GAAO3xB,EAAG60B,EAASjvB,GACvBpC,EAAImuB,GAAO1xB,EAAG40B,EAASjvB,GAE7B,OAAOxF,EAAEs0B,UAAYlxB,EAAEkxB,UAKlB,MAAMI,GAGR,CACH,CACEC,QAAS,iGACTC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KAE9B,CACED,QAAS,gGACTC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,MAIzB,SAAS7hB,GAAMlV,EAAYg3B,GAAsB,GAEtD,GAAI51B,EAAOpB,GAET,OAAOA,EAGT,GAAIe,EAASf,IAAUA,EAAQ,EAE7B,OAAO,IAAIqB,KAAKrB,GAGlB,GAAIiB,EAASjB,GACb,CACE,IAAK,MAAM+Q,KAAU8lB,GACrB,CACE,MAAM,QAAEC,EAAO,OAAEC,GAAWhmB,EACtBkmB,EAAQH,EAAQI,KAAKl3B,GAE3B,GAAIi3B,EACJ,CACE,MAAME,EAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAElD,IAAK,IAAIp4B,EAAI,EAAGA,EAAIo4B,EAAM10B,OAAQ1D,IAAK,CACrC,MAAMoD,EAAI0T,SAASohB,EAAMF,EAAOh4B,KAC5BiC,SAASmB,KACXg1B,EAAMp4B,GAAW,IAANA,EAAUoD,EAAI,EAAIA,GAIjC,OAAO60B,EACH,IAAI31B,KAAKA,KAAK+1B,OAAOD,IACrB,IAAI91B,QAAQ81B,IAIpB,GAAIH,EACJ,CACE,MAAMK,EAAUr3B,EAAQ,OAClBs3B,EAAYj2B,KAAK6T,MAAMmiB,GAE7B,GAAIr2B,SAASs2B,GAEX,OAAO,IAAIj2B,KAAKi2B,GAIpB,MAAMC,EAASl2B,KAAK6T,MAAMlV,GAE1B,GAAIgB,SAASu2B,GAEX,OAAO,IAAIl2B,KAAKk2B,GAIpB,OAAO,KAGF,SAASvE,GAAkB7wB,GAEhC,OAAyB,IAAlBA,EAAE2wB,cACmB,KAApB3wB,EAAEuwB,WAAa,GACF,IAAdvwB,EAAEyuB,UACa,IAAfzuB,EAAEquB,WACFruB,EAAEmuB,aAGJ,SAAS4C,GAAiB/wB,GAE/B,OAAyB,IAAlBA,EAAE2wB,cACmB,KAApB3wB,EAAEuwB,WAAa,GAChBvwB,EAAEyuB,UAGJ,SAASwC,GAAkBjxB,GAEhC,OAAyB,IAAlBA,EAAE2wB,cACF1B,GAAcjvB,GAGhB,SAASmxB,GAAmBnxB,GAEjC,OAAyB,IAAlBA,EAAE2wB,eACD3wB,EAAEuwB,WAAa,GAGlB,SAASc,GAAqBrxB,GAEnC,OAAyB,GAAlBA,EAAE2wB,cACFF,GAAWzwB,GAGb,SAAS2uB,GAAkB3uB,GAEhC,OAAOq1B,GAAer1B,GAAKA,EAAEyuB,UAAY,EAGpC,SAAS0B,GAAsBnwB,GAEpC,MAAMs1B,EAAUC,GAAcv1B,GAAK6uB,GAAa7uB,GAEhD,OAAOE,KAAK6kB,MAAMuQ,EAAU5I,IAGvB,SAASmD,GAAiB7vB,EAASwF,EAAyB8lB,IAEjE,OAAOkK,GAAWjE,GAAOvxB,EAAGwyB,IAAc3D,GAAa7uB,GAAIwF,GAGtD,SAASypB,GAAcjvB,EAASwF,EAAyB8lB,IAE9D,OAAOmK,GAAQlE,GAAOvxB,EAAGwyB,IAAc3D,GAAa7uB,GAAIwF,GAGnD,SAASuqB,GAAkB/vB,GAEhC,OAAOE,KAAK6kB,OAAO8J,GAAa7uB,GAAK,GAAK0sB,IAGrC,SAASuD,GAAkBjwB,EAASwF,EAAyB8lB,IAElE,OAAOoK,GAAcnE,GAAOvxB,EAAGwyB,IAAc+C,GAAcv1B,GAAIwF,GAG1D,SAASmwB,GAAe31B,EAASwF,EAAyB8lB,IAE/D,OAAOuE,GAAiB0B,GAAOvxB,EAAGizB,IAAYztB,GAAW,EAGpD,SAAS6qB,GAAsBrwB,EAASwF,EAAyB8lB,IAEtE,MAAMsK,EAAarE,GAAOvxB,EAAGizB,IACvBjE,EAAOa,GAAiB7vB,EAAGwF,GAE3BqwB,EADUhG,GAAiB+F,EAAYpwB,GAClBwpB,EAE3B,OAAOD,GAAa6G,EAAYpwB,KAAa8nB,GACzCuI,EAAW,EACXA,EAGC,SAASxG,GAAmBrvB,GAEjC,OAAOE,KAAK6kB,OAAO/kB,EAAEyuB,UAAY,GAAK/B,IAGjC,SAAS+C,GAAuBzvB,GAErC,MAAMs1B,EAAUD,GAAer1B,GAAKA,EAAEyuB,UAEtC,OAAOvuB,KAAK6kB,MAAMuQ,EAAU5I,IAGvB,SAAS6C,GAAmBvvB,EAASwF,EAAyB8lB,IAEnE,OAAOoK,GAAcnE,GAAOvxB,EAAGsyB,IAAetyB,EAAEyuB,UAAWjpB,GAGtD,SAASmqB,GAAuB3vB,EAASwF,EAAyB8lB,IAEvE,MAAMgK,EAAUD,GAAer1B,GAAKA,EAAEyuB,UAChCqH,EAAoBxI,GAAcyB,GAAa/uB,EAAGwF,GAExD,OAAOtF,KAAK6kB,OAAOuQ,EAAUQ,EAAoBpJ,IAAgBA,IAG5D,SAASyC,GAAkBnvB,EAASwF,EAAyB8lB,IAElE,OAAOkK,GAAWjE,GAAOvxB,EAAGsyB,IAAetyB,EAAEyuB,UAAWjpB,GAGnD,SAASuwB,GAAe/1B,EAASwF,EAAyB8lB,IAE/D,OAAOmK,GAAQlE,GAAOvxB,EAAGsyB,IAAetyB,EAAEyuB,UAAWjpB,GAGhD,SAASgwB,GAAWhtB,EAAawtB,EAAoBxwB,EAAyB8lB,IAEnF,MAAM,sBAAEE,GAA0BhmB,EAC5BywB,EAAiBlH,GAAavmB,EAAOhD,GAErC0wB,EADcxJ,GAAeuJ,EAAiBzK,EAEhDyK,EAAiB,EACjBA,EAAiB,EAAIvJ,GAEzB,OAAOxsB,KAAK6kB,OAAOiR,EAAaE,GAAUxJ,IAGrC,SAAS+I,GAAQjtB,EAAawtB,EAAoBxwB,GAEvD,MACM0wB,EADiBnH,GAAavmB,EAAOhD,GACX,EAAIknB,GAEpC,OAAOxsB,KAAK6kB,OAAOiR,EAAaE,GAAUxJ,IAGrC,SAASgJ,GAAcltB,EAAawtB,EAAoBxwB,EAAyB8lB,IAEtF,MAAM2K,EAAiBlH,GAAavmB,EAAOhD,GAErC0wB,EADiC,IAAnBD,EAEhBA,EAAiB,EACjBA,EAAiB,EAAIvJ,GAEzB,OAAOxsB,KAAK6kB,OAAOiR,EAAaE,GAAUxJ,IAGrC,SAASqC,GAAa/uB,EAASwF,EAAyB8lB,IAE7D,MAAM,aAAEC,GAAiB/lB,EACnB8oB,EAAMtuB,EAAEuuB,SAEd,OAAOD,EAAM/C,EACT+C,EAAM/C,EAAemB,GACrB4B,EAAM/C,EAGL,SAASsD,GAAajvB,GAE3B,OAAOM,KAAKE,MAAM4zB,GAASp0B,EAAG2xB,GAAO3xB,EAAG4yB,MAAiB,EAGpD,SAAS2D,GAAcn2B,GAE5B,OAAiD,IAAzCE,KAAKE,MAAMJ,EAAEo2B,oBAAsB,IAGtC,SAASC,GAAqBr2B,GAEnC,MAAMk2B,EAASC,GAAcn2B,GAE7B,OACEk2B,EAASC,GAAc5E,GAAOvxB,EAAG9C,GAAKA,EAAE40B,SAAS,MACjDoE,EAASC,GAAc5E,GAAOvxB,EAAG9C,GAAKA,EAAE40B,SAAS,KAI9C,SAASwE,GAAWt2B,GAEzB,MAAM0wB,EAAO1wB,EAAE2wB,cAEf,OAAOD,EAAO,KAAQ,GAAMA,EAAO,GAAM,GAAKA,EAAO,KAAQ,EAGxD,SAAS6E,GAAcv1B,GAE5B,OAAOs2B,GAAWt2B,GAAK,IAAM,IAGxB,MAAMu2B,GAAc,CACzB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7C,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAGxC,SAASlB,GAAer1B,GAE7B,OAAOu2B,GAAYD,GAAWt2B,GAAK,EAAI,GAAGA,EAAEuwB,YAGvC,SAASiG,GAAqB52B,GAEnC,OAAOA,EAAE00B,UAAYmC,GAAgC72B,GAGhD,SAAS62B,GAAgC72B,GAE9C,MAAMC,EAAI,IAAIX,KAAKU,EAAE00B,WACfoC,EAAgB72B,EAAEu2B,oBAExBv2B,EAAE6xB,WAAW,EAAG,GAEhB,MAAMiF,EAAqB92B,EAAEy0B,UAAY3H,GAEzC,OAAO+J,EAAgB/J,GAAmBgK,EAGrC,SAASlG,GAAWzwB,GAEzB,OAAOE,KAAK6kB,MAAM/kB,EAAEuwB,WAAazD,IAG5B,SAASmF,GAAcjyB,GAE5BA,EAAEyxB,gBAAgB,GAGb,SAASS,GAAclyB,GAE5BA,EAAE0xB,WAAW,EAAG,GAGX,SAASS,GAAYnyB,GAE1BA,EAAE2xB,WAAW,EAAG,EAAG,GAGd,SAASS,GAAWpyB,GAEzBA,EAAE4xB,SAAS,EAAG,EAAG,EAAG,GAGf,SAASS,GAAYryB,EAASwF,EAAyB8lB,IAE5D,MAAMwD,EAAYC,GAAa/uB,EAAGwF,GAElCxF,EAAE6xB,QAAQ7xB,EAAEyuB,UAAYK,GACxB9uB,EAAE4xB,SAAS,EAAG,EAAG,EAAG,GAGf,SAASU,GAAatyB,GAE3BA,EAAE6xB,QAAQ7E,IACVhtB,EAAE4xB,SAAS,EAAG,EAAG,EAAG,GAGf,SAASW,GAAevyB,GAE7B,MAAMswB,EAAQtwB,EAAEuwB,WAEhBvwB,EAAE8xB,SAASxB,EAASA,EAAQxD,GAAoBE,IAChDhtB,EAAE4xB,SAAS,EAAG,EAAG,EAAG,GAGf,SAASY,GAAYxyB,GAE1B,MAAM0wB,EAAO1wB,EAAE2wB,cAEf3wB,EAAEwxB,QAAQ,GACVxxB,EAAE+xB,YAAYrB,EAAM,EAAG,GACvB1wB,EAAE4xB,SAAS,EAAG,EAAG,EAAG,GAGf,SAASc,GAAY1yB,GAE1BA,EAAEyxB,gBAAgBpE,IAGb,SAASsF,GAAY3yB,GAE1BA,EAAE0xB,WAAWtE,GAAYC,IAGpB,SAASuF,GAAU5yB,GAExBA,EAAE2xB,WAAWxE,GAAYC,GAAYC,IAGhC,SAASwF,GAAS7yB,GAEvBA,EAAE4xB,SAAS1E,GAAUC,GAAYC,GAAYC,IAGxC,SAASyF,GAAU9yB,EAASwF,EAAyB8lB,IAE1D,MAAMwD,EAAYC,GAAa/uB,EAAGwF,GAElCxF,EAAE6xB,QAAQ7xB,EAAEyuB,WAAanB,GAAcwB,IACvC+D,GAAS7yB,GAGJ,SAAS+yB,GAAW/yB,GAEzBA,EAAE+xB,YAAY/xB,EAAE2wB,cAAe3wB,EAAEuwB,WAAa,EAAG,GACjDsC,GAAS7yB,GAGJ,SAASgzB,GAAahzB,GAE3B,MAAMswB,EAAQtwB,EAAEuwB,WAEhBvwB,EAAE8xB,SAASxB,EAASA,EAAQxD,GAAqBA,GAAmBE,IACpE6F,GAAS7yB,GAGJ,SAASizB,GAAUjzB,GAExBA,EAAE+xB,YAAY/xB,EAAE2wB,cAAgB,EAAG,EAAG,GACtCkC,GAAS7yB,GAGJ,SAASkzB,GAAgBlzB,EAAS42B,GAEvC52B,EAAEwxB,QAAQxxB,EAAEs0B,UAAYsC,GAGnB,SAASzD,GAAWnzB,EAAS42B,GAElC1D,GAAgBlzB,EAAG42B,EAASnK,IAGvB,SAAS2G,GAAWpzB,EAAS42B,GAElC1D,GAAgBlzB,EAAG42B,EAASjK,IAGvB,SAAS0G,GAASrzB,EAAS42B,GAEhC1D,GAAgBlzB,EAAG42B,EAAShK,IAGvB,SAAS0G,GAAQtzB,EAAS42B,GAE/B52B,EAAE6xB,QAAQ7xB,EAAEyuB,UAAYmI,GAGnB,SAASrD,GAASvzB,EAAS42B,GAEhCtD,GAAQtzB,EAAG42B,EAASlK,IAGf,SAAS8G,GAAUxzB,EAAS42B,GAEjC,MAAMtG,EAAQtwB,EAAEuwB,WAAaqG,EAEvBxzB,EAAI,IAAIlE,KAAK,GACnBkE,EAAE2uB,YAAY3uB,EAAEutB,cAAeL,EAAO,GACtCltB,EAAEwuB,SAAS,EAAG,EAAG,EAAG,GACpB,MAAMiF,EAASxB,GAAejyB,GAE9BpD,EAAE8xB,SAASxB,EAAOpwB,KAAKO,IAAIo2B,EAAQ72B,EAAEyuB,YAGhC,SAASgF,GAAYzzB,EAAS42B,GAEnCpD,GAAUxzB,EAAG42B,EAAS9J,IAGjB,SAAS4G,GAAS1zB,EAAS42B,GAEhCpD,GAAUxzB,EAAG42B,EAAS7J,IAGjB,SAAS6G,GAAiBh0B,EAASC,GAExC,OAAOD,EAAE00B,UAAYz0B,EAAEy0B,UAGlB,SAAST,GAAYj0B,EAASC,GAEnC,OAAO+zB,GAAiBh0B,EAAGC,GAAK4sB,GAG3B,SAASqH,GAAYl0B,EAASC,GAEnC,OAAO+zB,GAAiBh0B,EAAGC,GAAK8sB,GAG3B,SAASoH,GAAUn0B,EAASC,GAEjC,OAAO+zB,GAAiBh0B,EAAGC,GAAK+sB,GAG3B,SAASoH,GAASp0B,EAASC,GAKhC,OAHsB22B,GAAqB52B,GACpB42B,GAAqB32B,IAEFgtB,GAGrC,SAASoH,GAAUr0B,EAASC,GAEjC,OAAOm0B,GAASp0B,EAAGC,GAAK6sB,GAGnB,SAASwH,GAAWt0B,EAASC,GAElC,MAAMi3B,EAAQl3B,EAAE+wB,cAAgB9wB,EAAE8wB,cAC5BpE,EAAS3sB,EAAE2wB,WAAa1wB,EAAE0wB,WAC1BwG,GAAQn3B,EAAE6uB,UAAY5uB,EAAE4uB,WAAaxB,GAE3C,OAAO6J,EAAQ/J,GAAiBR,EAASwK,EAGpC,SAAS5C,GAAav0B,EAASC,GAEpC,OAAOq0B,GAAWt0B,EAAGC,GAAKitB,GAGrB,SAASsH,GAAUx0B,EAASC,GAEjC,OAAOq0B,GAAWt0B,EAAGC,GAAKktB,GC/pBrB,MAAMiK,GAAiB,IAAIluB,EAAWkB,EAAG9K,KAAO8K,EAAGiB,WAE7CgsB,GAAgB,IAAIntB,EAAUE,EAAG9K,KAAO8K,EAAGiB,WAElD,GAAM+rB,GAECE,GACb,CAIEh5B,OAAQ,GAAImN,IAAI,UAEhB8rB,IAAK,GAAI9rB,IAAI,OAEb+rB,MAAO,GAAI/rB,IAAI,SAEfgsB,SAAU,GAAIhsB,IAAI,UAElBisB,UAAW,GAAIjsB,IAAI,UAInBC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7B0H,MAAO,GAAI1H,IAAI,QAAS,GAAI,CAAC,SAAU,CAAC,eAExCksB,SAAU,GAAIlsB,IAAI,OAAQ,GAAI,CAAC,SAAU,CAAC,eAE1CmsB,cAAe,GAAInsB,IAAI,OAAQ,GAAI,CAAC,UAEpCosB,qBAAsB,GAAIpsB,IAAI,QAAS,GAAI,CAAC,UAE5C5K,IAAK,GAAI4K,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC3K,IAAK,GAAI2K,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC5N,IAAK,GAAI4N,IAAI,MAAO,GAAI,CAAC,QAAS,aAElCA,IAAK,GAAIA,IAAI,MAAO,GAAI,CAAC,QAAS,WAAY,QAE9C7J,IAAK,GAAI6J,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,WAE1CmK,IAAK,GAAInK,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,WAE1C2mB,QAAS,GAAI3mB,IAAI,UAAW,GAAI,CAAC,QAAS,SAE1ConB,MAAO,GAAIpnB,IAAI,QAAS,GAAI,CAAC,QAAS,QAAS,CAAC,cAEhDkrB,YAAa,GAAIlrB,IAAI,MAAO,GAAI,CAAC,UAEjCqsB,WAAY,GAAIrsB,IAAI,MAAO,GAAI,CAAC,UAEhCssB,YAAa,GAAItsB,IAAI,MAAO,GAAI,CAAC,UAEjC+C,KAAM,GAAI/C,IAAI,OAAQ,GAAI,CAAC,UAE3BM,IAAK,GAAIN,IAAI,MAAO,GAAI,CAAC,QAAS,QAAS,CAAC,SAE5CsoB,KAAM,GAAItoB,IAAI,OAAQ,GAAI,CAAC,QAAS,QAAS,CAAC,OAAQ,WAAY,WAElEusB,eAAgB,GAAIvsB,IAAI,SAAU,GAAI,CAAC,UAIvC8a,OAAQ,GAAI9a,IAAI,SAAU,GAAI,CAAC,QAAS,WAExCwsB,UAAW,GAAIxsB,IAAI,YAAa,GAAI,CAAC,UAIrCO,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BU,QAAS,GAAIV,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,SAE9CysB,SAAU,GAAIzsB,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,SAE/C0sB,gBAAiB,GAAI1sB,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,SAEvD2sB,QAAS,GAAI3sB,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,SAE9C4sB,eAAgB,GAAI5sB,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,SAEtDkb,UAAW,GAAIlb,IAAI,UAAW,GAAI,CAAC,QAAS,QAAS,OAAQ,CAAC,OAAQ,iBAAkB,iBAExF6sB,UAAW,GAAI7sB,IAAI,WAAY,GAAI,CAAC,QAAS,SAE7C8sB,QAAS,GAAI9sB,IAAI,SAAU,GAAI,CAAC,QAAS,QAAS,CAAC,cAEnD+sB,MAAO,GAAI/sB,IAAI,OAAQ,GAAI,CAAC,UAE5BirB,WAAY,GAAIjrB,IAAI,QAAS,GAAI,CAAC,UAIlCY,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpC23B,GAAc5rB,IAAI,YAAa6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,cACjE04B,GAAc5rB,IAAI,mBAAoB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,qBACxE04B,GAAc5rB,IAAI,SAAU6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,WAC9D04B,GAAc5rB,IAAI,SAAU6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,WAC9D04B,GAAc5rB,IAAI,SAAU6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,WAC9D04B,GAAc5rB,IAAI,OAAQ6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,SAC5D04B,GAAc5rB,IAAI,MAAO6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,QAC3D04B,GAAc5rB,IAAI,aAAc6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,eAClE04B,GAAc5rB,IAAI,iBAAkB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,mBACtE04B,GAAc5rB,IAAI,YAAa6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,cACjE04B,GAAc5rB,IAAI,YAAa6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,cACjE04B,GAAc5rB,IAAI,OAAQ6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,SAC5D04B,GAAc5rB,IAAI,cAAe6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,gBACnE04B,GAAc5rB,IAAI,kBAAmB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,oBACvE04B,GAAc5rB,IAAI,kBAAmB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,oBACvE04B,GAAc5rB,IAAI,sBAAuB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,wBAC3E04B,GAAc5rB,IAAI,sBAAuB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,wBAC3E04B,GAAc5rB,IAAI,aAAc6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,eAClE04B,GAAc5rB,IAAI,iBAAkB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,mBACtE04B,GAAc5rB,IAAI,iBAAkB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,mBACtE04B,GAAc5rB,IAAI,qBAAsB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,uBAC1E04B,GAAc5rB,IAAI,qBAAsB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,uBAC1E04B,GAAc5rB,IAAI,QAAS6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,UAC7D04B,GAAc5rB,IAAI,UAAW6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,YAC/D04B,GAAc5rB,IAAI,OAAQ6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,SAC5D04B,GAAc5rB,IAAI,iBAAkB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,mBACtE04B,GAAc5rB,IAAI,gBAAiB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,kBACrE04B,GAAc5rB,IAAI,iBAAkB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,mBACtE04B,GAAc5rB,IAAI,kBAAmB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,oBACvE04B,GAAc5rB,IAAI,oBAAqB6rB,GAAQz5B,IAAK,QAAS,CAAEc,SAAU,sBAEzE04B,GAAc5rB,IAAI,gBAAiB6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,WACrEpB,GAAc5rB,IAAI,gBAAiB6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,WACrEpB,GAAc5rB,IAAI,cAAe6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,SACnEpB,GAAc5rB,IAAI,aAAc6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,QAClEpB,GAAc5rB,IAAI,cAAe6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,SACnEpB,GAAc5rB,IAAI,eAAgB6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,UACpEpB,GAAc5rB,IAAI,iBAAkB6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,YACtEpB,GAAc5rB,IAAI,cAAe6rB,GAAQlF,QAAS,QAAS,CAAEqG,KAAM,SAEnEpB,GAAc5rB,IAAI,cAAe6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,WACjEpB,GAAc5rB,IAAI,cAAe6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,WACjEpB,GAAc5rB,IAAI,YAAa6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,SAC/DpB,GAAc5rB,IAAI,WAAY6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,QAC9DpB,GAAc5rB,IAAI,YAAa6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,SAC/DpB,GAAc5rB,IAAI,aAAc6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,UAChEpB,GAAc5rB,IAAI,eAAgB6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,YAClEpB,GAAc5rB,IAAI,YAAa6rB,GAAQzE,MAAO,QAAS,CAAE4F,KAAM,SAE/DpB,GAAc5rB,IAAI,cAAe6rB,GAAQX,aACzCU,GAAc5rB,IAAI,aAAc6rB,GAAQQ,YACxCT,GAAc5rB,IAAI,cAAe6rB,GAAQS,aACzCV,GAAc5rB,IAAI,iBAAkB6rB,GAAQU,gBAC5CX,GAAc5rB,IAAI,YAAa6rB,GAAQW,WACvCZ,GAAc5rB,IAAI,QAAS6rB,GAAQkB,OACnCnB,GAAc5rB,IAAI,aAAc6rB,GAAQZ,YCvKxC,MAAM,GAAgB,EAcf,MAAM,WAAiB,EAWrB,cAAchnB,EAAatG,GAEhC,OAAO,IAAI,GAAS9E,KAAKwT,cAAcpI,EAAK,KAAkB,KAGzD,cAAc9I,GAEnB,OAAOnG,EAAQmG,EAAKhB,SAChBtB,KAAK+E,GACL,CAAC/E,KAAK+E,GAAI/E,KAAKyT,cAAcnR,EAAKhB,UAGhC,qBAAqBA,GAO3B,OALIA,EAAQ8yB,cAAa9yB,EAAQ8yB,YAAc,IAAIp5B,KAAKsG,EAAQ8yB,cAC5D9yB,EAAQ+yB,cAAa/yB,EAAQ+yB,YAAc,IAAIr5B,KAAKsG,EAAQ+yB,cAC5D/yB,EAAQgzB,WAAUhzB,EAAQgzB,SAAW,IAAIt5B,KAAKsG,EAAQgzB,WACtDhzB,EAAQizB,WAAUjzB,EAAQizB,SAAW,IAAIv5B,KAAKsG,EAAQizB,WAEnDjzB,EAGD,qBAAqBA,GAE3B,MAAMqS,EAAO,iBAAarS,GAO1B,OALIqS,EAAQygB,cAAazgB,EAAQygB,YAAczgB,EAAQygB,YAAYI,eAC/D7gB,EAAQ0gB,cAAa1gB,EAAQ0gB,YAAc1gB,EAAQ0gB,YAAYG,eAC/D7gB,EAAQ2gB,WAAU3gB,EAAQ2gB,SAAW3gB,EAAQ2gB,SAASE,eACtD7gB,EAAQ4gB,WAAU5gB,EAAQ4gB,SAAW5gB,EAAQ4gB,SAASC,eAEnD7gB,EAKF,gBAAgBvI,EAAWC,GAEhC,OAAKtQ,EAAOqQ,GAKL,IAAI,GAAS,CAClBgpB,YAAa,IAAIp5B,KAAKoQ,EAAKglB,WAC3BiE,YAAa,IAAIr5B,KAAKoQ,EAAKglB,aALpB,KAWJ,kBAKLnlB,EAAUM,WAAW,CACnBP,SAJe,EAKf1I,KAJwB,SAKxBgH,QAAS,CAAC5N,EAAGC,KACX,MAAM0pB,EAAKtqB,EAAOW,GACZ4pB,EAAKvqB,EAAOY,GAElB,OAAI0pB,IAAOC,GAAYD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE3CD,EACK3pB,EAAE00B,UAAYz0B,EAAEy0B,eADzB,KAMJnlB,EAAUO,UAAU,CAClBR,SAnBe,EAoBf1I,KAnBwB,SAoBxBqH,OAAQ,CAACjO,EAAGC,KACV,MAAM0pB,EAAKtqB,EAAOW,GAGlB,OAAI2pB,IAFOtqB,EAAOY,KAId0pB,EACK3pB,EAAE00B,YAAcz0B,EAAEy0B,eAD3B,MAMJnlB,EAAUqO,QAAQ,CAChBtO,SAlCe,EAmCfH,SAAWD,IACT,GAAIrP,EAASqP,IAAShQ,EAASgQ,EAAKoD,OAAuB,SAAdpD,EAAKoD,KAChD,OAAO,IAAIhT,KAAK4P,EAAKjR,QAGzBgR,OAASC,IACP,GAAI7P,EAAO6P,GACT,MAAO,CAAEoD,KAAM,OAAQrU,MAAOiR,EAAK4pB,kBAKzCvpB,EAAUwO,UAAU,CAClBzO,SAhDe,EAiDfd,KAAM,CAACpO,EAAGyG,EAAGyH,KACX,GAAIjP,EAAOe,GAAI,CACb,MAAM24B,EAAU,IAAIz5B,KAAKc,EAAEs0B,WAI3B,OAFApmB,EAAclO,EAAG24B,GAEVA,MAMR,QAEL,OAAO,GAAS1vB,GAGX,gBAEL,OAAO,GAAS0G,WAAW1O,IAGtB,MAAMuF,GAEX,MAAM2R,EAAKjU,KAAKsB,QACV4S,EAAK5R,EAAKhB,QAEhB2S,EAAG0c,WAAa1c,EAAG0c,YAAczc,EAAGyc,WAEhC1c,EAAGmgB,aAAelgB,EAAGkgB,aAEvBngB,EAAGmgB,YAAY9G,QAAQtxB,KAAKO,IAAI0X,EAAGmgB,YAAYhE,UAAWlc,EAAGkgB,YAAYhE,YAGvEnc,EAAGogB,aAAengB,EAAGmgB,aAEvBpgB,EAAGogB,YAAY/G,QAAQtxB,KAAKQ,IAAIyX,EAAGogB,YAAYjE,UAAWlc,EAAGmgB,YAAYjE,YAItE,WAAWptB,EAAkBE,EAAyBC,GAE3D,OAAO,KAGF,YAAYD,GAEjB,MAAO,GAGF,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,EAAiC,IAEvE,KAAME,aAAiB,IAErB,OAAO,EAGT,GAAIF,EAAQ3H,MACZ,CACE,GAAI6H,EAAMF,QAAQozB,WAAa10B,KAAKsB,QAAQozB,SAE1C,OAAO,EAGT,MAAMn4B,EAAMyD,KAAK20B,SACXjgB,EAAWlT,EAAMmzB,SAEvB,GAAIp4B,KAASmY,GAAYA,EAAS0b,UAAY7zB,EAAI6zB,WAEhD,OAAO,EAGT,MAAM5zB,EAAMwD,KAAK40B,SACXjgB,EAAWnT,EAAMozB,SAEvB,GAAIp4B,KAASmY,GAAYA,EAASyb,UAAY5zB,EAAI4zB,WAEhD,OAAO,EAGT,MAAM,aAAEyE,EAAY,WAAEC,GAAe90B,KAAKsB,QAE1C,GAAIuzB,GAAgBA,IAAiBrzB,EAAMF,QAAQuzB,aAEjD,OAAO,EAGT,GAAIC,GAAcA,IAAetzB,EAAMF,QAAQwzB,WAE7C,OAAO,EAIX,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYz0B,GAEjB,OAAOA,EAASqL,MAAM1L,MAGjB,UAAUuB,EAAe,MAE9BvB,KAAKuB,OAASA,EAGT,8BAEL,MAAM,WAAEovB,EAAU,SAAE+D,GAAa10B,KAAKsB,QAEtCtB,KAAKsB,QAAU,CAAEqvB,aAAY+D,YAGxB,sBAEL,OAAO,GAAMhvB,GAAGstB,GAAQh5B,OAAQ,IAG3B,wBAEL,OAAO,GAAM0L,GAAGstB,GAAQtrB,QAAS,CAC/B/N,MAAO,GAAMJ,IAAI,WAId,uBAEL,OAAO,GAAMmM,GAAGstB,GAAQvrB,IAAK,CAC3B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,QAAQI,GAEb,MAAM,WAAEg3B,EAAU,YAAEyD,EAAW,YAAEC,GAAgBr0B,KAAKsB,QAChD4vB,EAASriB,GAAMlV,EAAOg3B,GAE5B,QAAKO,MAKDkD,GAAelD,EAAOd,UAAYgE,EAAYhE,cAK9CiE,GAAenD,EAAOd,UAAYiE,EAAYjE,YAQ7C,UAAUz2B,GAEf,MAAM,WAAEg3B,EAAU,SAAE2D,EAAQ,SAAEC,EAAQ,aAAEM,EAAY,WAAEC,GAAe90B,KAAKsB,QACpE4vB,EAASriB,GAAMlV,EAAOg3B,GAE5B,OAAKO,GAKDoD,GAAYpD,EAAOd,UAAYkE,EAASlE,WAE1Cc,EAAO5D,QAAQgH,EAASlE,WAGtBmE,GAAYrD,EAAOd,UAAYmE,EAASnE,WAE1Cc,EAAO5D,QAAQiH,EAASnE,WAGtByE,GAEF/G,GAAQ+G,GAAc3D,GAGpB4D,GAEFvG,GAAMuG,GAAY5D,GAGbA,GAvBEv3B,EA0BJ,cAEL,OAAO,IAAI,GAAS,IAGf,QAEL,OAAO,IAAI,GAASsR,EAAUf,KAAKlK,KAAKsB,UAGnC,SAEL,OAAO,GAASwK,OAAO9L,MAGlB,SAEL,OAAO,IAAIhF,KAGN,OAAO+Q,GAEZ,MAAMpS,EAAQ,IAAIqB,KAEZuB,EAAMyD,KAAK20B,SACXn4B,EAAMwD,KAAK40B,SAEXtwB,EAAQ/H,EAAMA,EAAI6zB,UAAYz2B,EAAMy2B,UACpCxY,EAAMpb,EAAMA,EAAI4zB,UAAYz2B,EAAMy2B,UAExC,OAAO,IAAIp1B,KAAK+Q,EAAIzH,EAAOsT,GAAK,IAG3B,SAEL,OAAO5X,KAAKsB,QAAQ8yB,aAAep0B,KAAKsB,QAAQgzB,SAG3C,SAEL,OAAOt0B,KAAKsB,QAAQ+yB,aAAer0B,KAAKsB,QAAQizB,SAG3C,SAAS3pB,GAEd,OAAO,IAAI5P,KAAK4P,GAGX,OAAOjR,GAEZ,OAAOA,EAAQA,EAAM66B,cAAgB,MAjXzB,GAAAzvB,GAAKe,EAAG9K,KAER,GAAAyQ,WAAaqnB,GAEb,GAAA9mB,UAAY+mB,GAEZ,GAAAznB,SAAW,IAAI,GAAS,IAoCxB,GAAAW,iBAA2B,EAe3B,GAAAC,YAAsB,ECzEtC,MAAM6oB,GAAa,EAEZ,MAAM,WAAiB,EAWrB,cAAc3pB,EAAatG,GAEhC,MAAMkwB,EAAO5pB,EAAK2pB,IAAYh4B,IAAK/D,GAAW8L,EAAMnB,QAAQ3K,IAE5D,OAAO,IAAI,GAASg8B,GAGf,cAAc1yB,GAEnB,MAAM0yB,EAAO1yB,EAAKhB,QAAQvE,IAAInD,GAAKA,EAAEkS,UAErC,MAAO,CAAC9L,KAAK+E,GAAIiwB,GAKZ,gBAAgB5pB,EAAWC,GAEhC,OAAO,KAKF,mBAOA,gBAiBL,OAfKrL,KAAKyL,aAERzL,KAAKyL,WAAa,GAElBzL,KAAKsB,QAAQkD,QAAQwwB,IAEnB,MAAMC,EAAMD,EAAK7e,gBAEjB,IAAK,MAAMrX,KAAQm2B,EAEjBj1B,KAAKyL,WAAW3M,GAAQm2B,EAAIn2B,MAK3BkB,KAAKyL,WAGN,QAAY4P,EAAc7X,GAEhC,MAAMwxB,EAAOh1B,KAAKsB,QAElB,IAAK,MAAMgB,KAAQ0yB,EACnB,CACE,MAAM50B,EAASoD,EAAQlB,GAEvB,QAAehE,IAAX8B,EAEF,OAAOA,EAIX,OAAOib,EAGF,QAEL,OAAO,GAAStW,GAGX,MAAMzC,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,IAAK,MAAMmO,KAAOtR,KAAKsB,QACvB,CACE,MAAM4zB,EAAU5jB,EAAI7M,WAAWzB,EAAME,EAAKC,GAE1C,GAAI+xB,EAEF,OAAOA,EAIX,OAAO,KAGF,YAAYhyB,GAEjB,MAAMiyB,EAAkB,GAyBxB,OAvBAn1B,KAAKsB,QAAQkD,QAAQlC,IACnBA,EAAKiU,YAAYrT,GAAKsB,QAAQ8M,IACX6jB,EAAKrmB,KAAK1E,GACzBA,EAASnQ,MAAQqX,EAAIrX,KACnBmQ,EAASnQ,eAAe,GACxBqX,EAAIrX,eAAe,GACnBwB,EAAY2O,EAASnQ,IAAKqX,EAAIrX,OAKhCk7B,EAAK12B,KAAK6S,OAKhB6jB,EAAKpqB,KAAK,CAACrP,EAAGC,KAIZ,OAHWD,EAAEzB,eAAe,EAAO,EAAI,IAC5B0B,EAAE1B,eAAe,EAAO,EAAI,KAKlCk7B,EAGF,aAAax7B,GAElB,OAAOqG,KAAKo1B,QAAcp1B,KAAMg1B,GAASA,EAAKttB,QAAQ/N,GAASq7B,OAAO12B,GAGjE,oBAEL,OAA+B,IAAxB0B,KAAKsB,QAAQlF,OAChB4D,KAAKsB,QAAQ,GACbtB,KAGC,cAEL,OAAOA,KAAK8D,aACR,IAAI,GAAS9D,KAAKsB,QAAQvE,IAAK5D,GAAMA,EAAE4K,gBACvC/D,KAGI,iBAAiBwB,EAAaF,GAEtC,OAAOtB,KAAKo1B,SAAQ,EAAOJ,KAAQA,EAAKrzB,aAAaH,EAAOF,SAAkBhD,GAGzE,aAEL,OAAO0B,KAAKo1B,SAAQ,EAAMJ,KAASA,EAAKlxB,mBAAuBxF,GAG1D,WAEL,OAAO0B,KAAKo1B,SAAQ,EAAMJ,KAASA,EAAKxe,iBAAqBlY,GAGrD,oBAER,OAAO,EAGF,SAAY+B,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAKsB,QAAQvE,IAAI,CAACuF,EAAMuG,IAAUxI,EAASG,KAAKqI,EAAOvG,EAAOzB,GAAgBb,KAAKsB,QAAQ0L,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKsB,QAAQ0L,OAAOnE,EAAO,MAIxJ,gBAAgBrI,GAErB,OAAOR,KAAKsB,QAAQd,IAAS,KAGxB,UAAUe,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQkD,QAAQ5K,GAAKA,EAAE+S,UAAU3M,OAGjC,8BAELA,KAAKsB,QAAQkD,QAAQ5K,GAAKA,EAAE4d,+BAGvB,sBAEL,OAAOxX,KAAKsB,QAAQ,GAAGqV,sBAGlB,wBAEL,OAAO,GAAMrP,MACRtH,KAAKsB,QAAQvE,IAAKnD,GAAMA,EAAEgd,0BAI1B,uBAEL,OAAO,GAAMlR,GAAG2H,GAAO5F,IAAK,CAC1B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,yBAAyByI,EAAsBhF,EAAqBiF,GAGzE,MAAMmY,EAAU1f,EAASsC,GACnBqd,EAAQ3f,EAASuH,GAEvB,GAAImY,IAAYC,EAChB,CACE,MAAMmM,EAAsB,IAATxpB,EAAagD,KAAKsB,QAAQ,GAAKtB,KAAKsB,QAAQ,GACzDsc,EAAY5d,KAAKsB,QAAQtE,GACzBq4B,EAAU,GAAMC,KAAK1X,EAAW4I,GAEtC,OAAO,GACJ+O,GAAG/O,EAAW5P,yBACd4e,KAAK,GAAMj8B,IAAI,UACfk8B,KAAKJ,GAGL,OAAKjb,GAAWC,EAEZrY,EAEAC,IAAOjF,GAAQod,EAEf,GACJmb,GAAG,GAAM/tB,IAAIxH,KAAK4W,0BAClB4e,KAAKxzB,GACLyzB,KAAK,GAAMl8B,IAAI,UAIbyI,EAGF,QAAQrI,GAEb,OAAOqG,KAAKo1B,SAAQ,EAAOJ,KAAQA,EAAKttB,QAAQ/N,SAAgB2E,GAG3D,UAAU3E,GAEf,OAAOqG,KAAKo1B,QAAQz7B,EAAOq7B,GAAQA,EAAKttB,QAAQ/N,GAASq7B,EAAKhe,UAAUrd,QAAS2E,GAG5E,cAEL,OAAO,IAAI,GAAS,IAGf,QAEL,OAAO,IAAI,GAAS0B,KAAKsB,QAAQvE,IAAIgQ,GAAKA,EAAEN,UAGvC,SAEL,OAAO,GAASX,OAAO9L,MAGlB,SAEL,OAAOA,KAAKsB,QAAQlF,OAAS,EACzB4D,KAAKsB,QAAQ,GAAGtH,SAChB,KAGC,OAAO+R,GAEZ,MAAMzK,EAAUtB,KAAKsB,QAGrB,OAAOA,EAFQyK,EAAI,EAAGzK,EAAQlF,QAAQ,IAEfke,OAAOvO,GAGzB,SAASnB,GAEd,MAAMtJ,EAAUtB,KAAKsB,QAErB,IAAK,MAAM0zB,KAAQ1zB,EACnB,CACE,MAAM4vB,EAAS8D,EAAKhe,UAAUpM,GAE9B,GAAIsmB,QAEF,OAAOA,EAIX,OAAOtmB,EAGF,OAAOjR,GAEZ,MAAM2H,EAAUtB,KAAKsB,QAErB,IAAK,MAAM0zB,KAAQ1zB,EAEjB,GAAI0zB,EAAKttB,QAAQ/N,GAEf,OAAOq7B,EAAKrqB,OAAOhR,GAIvB,OAAOA,GA5TK,GAAAoL,GAAKe,EAAGQ,KAER,GAAAmF,WAAa,IAAI7G,EAAWkB,EAAGQ,KAAOR,EAAGiB,WAEzC,GAAAiF,UAAY,IAAIpG,EAAUE,EAAGQ,KAAOR,EAAGiB,WAEvC,GAAAuE,SAAW,IAAI,GAAS,CAAC,GAAQA,WAgBjC,GAAAW,kBAA4B,EAO5B,GAAAC,YAAsB,EC/BtC,MAAM,GAAc,EACd,GAAY,EACZ,GAAa,EACb,GAAa,EAQZ,MAAM,WAAgB,EAepB,cAAcd,EAAatG,GAEhC,MAAMnL,EAAQmL,EAAMnB,QAAQyH,EAAK,KAC3BnR,EAAMmR,EAAK,IAAatG,EAAMnB,QAAQyH,EAAK,KAAc,GAASE,SAExE,OAAO,IAAI,GAAQ,CAAErR,MAAKN,UAGrB,cAAc2I,GAEnB,MAAM,IAAErI,EAAG,MAAEN,GAAU2I,EAAKhB,QAE5B,OAAOrH,IAAQ,GAASqR,SACpB,CAACtL,KAAK+E,GAAIpL,EAAMmS,UAChB,CAAC9L,KAAK+E,GAAIpL,EAAMmS,SAAU7R,EAAI6R,UAK7B,gBAAgBV,EAAWC,GAEhC,IAAKpQ,EAAMmQ,GAET,OAAO,KAGT,IAAInR,EAAY,IAAI,GAAQ,IACxBN,EAAc,IAAI,GAAQ,IAE9B,IAAK,MAAO+7B,EAAUC,KAAevqB,EAAKnO,UAExChD,EAAMoR,EAAUiL,MAAMrc,EAAKy7B,GAC3B/7B,EAAQ0R,EAAUiL,MAAM3c,EAAOg8B,GAGjC,OAAO,IAAI,GAAQ,CAAE17B,MAAKN,UAKrB,kBAKLsR,EAAUqO,QAAQ,CAChBtO,SAJe,GAKfH,SAAU,CAACD,EAAM2O,KACf,GAAIhe,EAASqP,IAAShQ,EAASgQ,EAAKoD,OAAuB,QAAdpD,EAAKoD,KAChD,OAAO,IAAI9S,IAAI0P,EAAKjR,MAAMoD,IAAI,EAAE9C,EAAKN,KAAuB,CAAC4f,EAAOtf,GAAMsf,EAAO5f,OAGrFgR,OAAQ,CAACC,EAAM4O,KACb,GAAIve,EAAM2P,GACR,MAAO,CACLoD,KAAM,MACNrU,MAAOmB,MAAMkC,KAAK4N,EAAK3N,WACpBF,IAAI,EAAEF,EAAGD,KAAmB,CAAC4c,EAAO3c,GAAI2c,EAAO5c,SAM1DqO,EAAUwO,UAAU,CAClBzO,SAtBe,GAuBfd,KAAM,CAACpO,EAAGoO,EAAMF,KACd,GAAI/O,EAAMa,GAAI,CACZ,MAAM85B,EAAS,IAAI16B,IAEnB8O,EAAclO,EAAG85B,GAEjB,IAAK,MAAO37B,EAAKN,KAAUmC,EAAEmB,UAC3B24B,EAAOzuB,IAAI+C,EAAKjQ,GAAMiQ,EAAKvQ,IAG7B,OAAOi8B,MAKb3qB,EAAUM,WAAW,CACnBP,SAvCe,GAwCf1I,KAvCwB,SAwCxBgH,QAAS,CAAC5N,EAAGC,EAAG2N,KACd,MAAM+b,EAAKpqB,EAAMS,GACX4pB,EAAKrqB,EAAMU,GAEjB,GAAI0pB,IAAOC,EAAI,OAAQD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE/C,GAAIrqB,EAAMS,IAAMT,EAAMU,GAAI,CACxB,IAAI4N,EAAO,EACPC,EAAO,EAEX,IAAK,MAAMvP,KAAOyB,EAAEga,OACb/Z,EAAE6Z,IAAIvb,IACTsP,IAIJ,IAAK,MAAMtP,KAAO0B,EAAE+Z,OAClB,GAAKha,EAAE8Z,IAAIvb,GAEJ,CACL,MAAMlB,EAAIuQ,EAAQ5N,EAAEnC,IAAIU,GAAM0B,EAAEpC,IAAIU,IAEhClB,EAAI,GAAGwQ,IACPxQ,EAAI,GAAGyQ,SALXA,IASJ,OAAOyB,EAAU0O,WAAWpQ,EAAMC,OAKxCyB,EAAUO,UAAU,CAClBR,SA1Ee,GA2Ef1I,KA1EwB,SA2ExBqH,OAAQ,CAACjO,EAAGC,EAAGgO,KAIb,GAHW1O,EAAMS,KACNT,EAAMU,GAEF,OAAO,EAEtB,GAAIV,EAAMS,IAAMT,EAAMU,GAAI,CACxB,GAAID,EAAEm6B,OAASl6B,EAAEk6B,KACf,OAAO,EAGT,IAAK,MAAO57B,EAAKN,KAAU+B,EAAEuB,UAAW,CACtC,IAAKtB,EAAE6Z,IAAIvb,GACT,OAAO,EACF,IAAK0P,EAAOhQ,EAAOgC,EAAEpC,IAAIU,IAC9B,OAAO,EAIX,OAAO,MAMR,eAAe67B,EAAyBC,EAAwB,IAErE,MAAMp8B,EAAQ,GAAMkV,MAAMinB,GACpB77B,EAAM,GAAM4U,MAAMknB,GAExB,OAAO,IAAI,GAAQ,CAAE97B,MAAKN,UAGrB,QAEL,OAAO,GAAQoL,GAGV,gBAEL,OAAO,GAAQ0G,WAAW1O,IAGrB,MAAMuF,GAEX,MAAM2R,EAAKjU,KAAKsB,QACV4S,EAAK5R,EAAKhB,QAEhB2S,EAAGha,IAAM,GAAMqc,MAAMrC,EAAGha,IAAKia,EAAGja,KAChCga,EAAGta,MAAQ,GAAM2c,MAAMrC,EAAGta,MAAOua,EAAGva,OAG/B,WAAWqJ,EAAkBE,EAAyBC,GAE3D,GAAI,GAAmBgR,GAAGnR,IAEpBhD,KAAKsB,QAAQrH,IAAIyN,QAAQ1E,EAAKrJ,OAEhC,OAAOqG,KAAKsB,QAAQ3H,MAIxB,IAAI2a,EAAWtR,EAAKW,QAAQT,EAAKC,GAEjC,OAAImR,GAIE7Y,EAFJ6Y,EAAWA,EAASvQ,cAEM/D,KAAKsB,QAAQrH,KAE9B+F,KAAKsB,QAAQ3H,MAIjB,KAGF,YAAYuJ,GAEjB,MAAO,CACL,CAAEjJ,IAAK+F,KAAKsB,QAAQrH,IAAKN,MAAOqG,KAAKsB,QAAQ3H,QAI1C,aAAaA,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,OAAOE,aAAiB,IACtBxB,KAAKsB,QAAQrH,IAAI0H,aAAaH,EAAMF,QAAQrH,IAAKqH,IACjDtB,KAAKsB,QAAQ3H,MAAMgI,aAAaH,EAAMF,QAAQ3H,MAAO2H,GAGlD,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYjB,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAQiW,SAAUzW,KAAKsB,QAAQrH,IAAM4G,GAAgBb,KAAKsB,QAAQrH,IAAM4G,GACtFR,EAASG,KAAK,GAAQkW,WAAY1W,KAAKsB,QAAQ3H,MAAQkH,GAAgBb,KAAKsB,QAAQ3H,MAAQkH,KAIzF,gBAAgBL,GAErB,OAAOA,IAAS,GAAQiW,SACpBzW,KAAKsB,QAAQrH,IACbuG,IAAS,GAAQkW,WACf1W,KAAKsB,QAAQ3H,MACb,KAGD,UAAU4H,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQrH,IAAI0S,UAAU3M,MAC3BA,KAAKsB,QAAQ3H,MAAMgT,UAAU3M,MAGxB,8BAELA,KAAKsB,QAAQrH,IAAIud,8BACjBxX,KAAKsB,QAAQ3H,MAAM6d,8BAGd,sBAEL,OAAO,GAAM9R,GAAG2P,GAAOrb,OAAQ,IAG1B,wBAEL,OAAO,GAAMqN,IACX,GAAM3B,GAAG2P,GAAO3N,QAAS,CACvB/N,MAAO,GAAMJ,IAAI,WAEnB,GAAMiO,IAAI,GAAM9B,GAAGmd,GAAQQ,SAAU,CACnCjiB,KAAM,GAAMsE,GAAG2P,GAAOd,OAAQ,CAAExX,IAAK,GAAMxD,IAAI,WAC/C6rB,KAAM,GAAMtX,OACZjG,QAAS,GAAML,IAAIxH,KAAKsB,QAAQ3H,MAAMid,0BACrC,CACDjd,MAAO,SACPkK,KAAM,WAER,GAAM2D,IAAI,GAAM9B,GAAGmd,GAAQQ,SAAU,CACnCjiB,KAAM,GAAMsE,GAAG2P,GAAOK,KAAM,CAAE3Y,IAAK,GAAMxD,IAAI,WAC7C6rB,KAAM,GAAMtX,OACZjG,QAAS,GAAML,IAAIxH,KAAKsB,QAAQrH,IAAI2c,0BACnC,CACDjd,MAAO,SACPkK,KAAM,YAKL,uBAEL,OAAO,GAAM6B,GAAG2P,GAAO5N,IAAK,CAC1B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,QAChB+P,QAAStJ,KAAKsB,QAAQ3H,MAAMid,0BAIzB,yBAAyB5U,EAAsBhF,EAAqBiF,GAGzE,OAAIjF,IAAS,GAAQyZ,SAEZ,GAAM/Q,GAAG2P,GAAOtY,IAAK,CAC1BA,IAAK,GAAMxD,IAAI,SACfud,aAAc9U,GACb,CACD/H,IAAK,QACLN,MAAO,gBAKF,GAAM+L,GAAG2P,GAAOtY,IAAK,CAC1BA,IAAK,GAAMxD,IAAI,SACfiF,UAAWwD,IAKV,QAAQ6B,GAEb,GAAIA,aAAgB3I,KAAOK,EAASsI,GACpC,CACE,MAAM,IAAE5J,EAAG,MAAEN,GAAUqG,KAAKsB,QAE5B,OAAOtB,KAAKg2B,QAAQnyB,GAAM,EAAM,CAAChH,EAAGD,KAClC,IAAK3C,EAAIyN,QAAQ7K,KAAOlD,EAAM+N,QAAQ9K,GACpC,OAAO,IAKb,OAAO,EAGF,UAAUiH,GAEf,MAAM,IAAE5J,EAAG,MAAEN,GAAUqG,KAAKsB,QACtBrE,EAAwB,GAS9B,OAPA+C,KAAKg2B,QAAQnyB,OAAMvF,EAAW,CAACzB,EAAGD,KAChCK,EAAQwB,KAAK,CACXxE,EAAI+c,UAAUna,GACdlD,EAAMqd,UAAUpa,OAIb,IAAI1B,IAAI+B,GAGT,QAAWF,EAAUse,EAAc4a,GAEzC,GAAIl5B,aAAe7B,IAEjB,IAAK,MAAOjB,EAAKN,KAAUoD,EAAIE,UAC/B,CACE,MAAMmD,EAAS61B,EAAOh8B,EAAKN,GAE3B,QAAe2E,IAAX8B,EAEF,OAAOA,OAIR,GAAI7E,EAASwB,GAEhB,IAAK,MAAM+B,KAAQ/B,EACnB,CACE,MAAMqD,EAAS61B,EAAOn3B,EAAM/B,EAAI+B,IAEhC,QAAeR,IAAX8B,EAEF,OAAOA,EAKb,OAAOib,EAGF,cAEL,MAAM,IAAEphB,EAAG,MAAEN,GAAUqG,KAAKsB,QAE5B,OAAO,IAAI,GAAQ,CACjBrH,IAAKA,EAAIgd,cACTtd,MAAOA,EAAMsd,gBAIV,QAEL,MAAM,IAAEhd,EAAG,MAAEN,GAAUqG,KAAKsB,QAE5B,OAAO,IAAI,GAAQ,CACjBrH,IAAKA,EAAIwS,QACT9S,MAAOA,EAAM8S,UAIV,SAEL,OAAO,GAAQX,OAAO9L,MAGjB,SAEL,OAAO,IAAI9E,IAGN,OAAO6Q,GAEZ,MAAM,IAAE9R,EAAG,MAAEN,GAAUqG,KAAKsB,QACtBnH,EAAI4R,EAAI,GAAY,GAAa,GAAG,GACpC5N,EAAM,IAAIjD,IAEhB,IAAK,IAAIxC,EAAI,EAAGA,EAAIyB,EAAGzB,IACvB,CACE,MAAMmE,EAAI5C,EAAIqgB,OAAOvO,GACfnP,EAAIjD,EAAM2gB,OAAOvO,GAEvB5N,EAAIgJ,IAAItK,EAAGD,GAGb,OAAOuB,EAGF,SAASyM,GAEd,MAAM,IAAE3Q,EAAG,MAAEN,GAAUqG,KAAKsB,QAE5B,OAAO,IAAIpG,IAAI0P,EAAK7N,IAAI,EAAEF,EAAGD,KAAO,CAClC3C,EAAI4Q,SAAShO,GACblD,EAAMkR,SAASjO,MAIZ,OAAOG,GAEZ,MAAM,IAAE9C,EAAG,MAAEN,GAAUqG,KAAKsB,QAE5B,OAAOxG,MAAMkC,KAAKD,EAAIE,WAAWF,IAAI,EAAEF,EAAGD,KAAO,CAC/C3C,EAAI0Q,OAAO9N,GACXlD,EAAMgR,OAAO/N,MAzcH,GAAA6Z,SAAW,MAEX,GAAAC,WAAa,QAEb,GAAA3R,GAAKe,EAAG5K,IAER,GAAAuQ,WAAa0J,GAEb,GAAAnJ,UAAYoJ,GAEZ,GAAA9J,SAAW,IAAI,GAAQ,CAAErR,IAAK,GAASqR,SAAU3R,MAAO,GAAQ2R,WAmBhE,GAAAW,iBAA2B,EAqB3B,GAAAC,YAAsB,ECnEtC,MAAMgqB,GAAa,EACbC,GAAgB,GAEf,MAAM,WAAqB,EAazB,cAAc/qB,EAAatG,GAEhC,MAAMxC,EAAOwC,EAAMnB,QAAQyH,EAAK8qB,KAEhC,OAAO,IAAI,GAAc5zB,GAGpB,cAAcA,GAEnB,MAAO,CAACtC,KAAK+E,GAAIzC,EAAKhB,QAAQwK,UAKzB,gBAAgBV,EAAWC,GAEhC,OAAO,KAKF,mBAKA,WAAW/I,GAEhB,OAAO,IAAI,GAAa,GAAMuM,MAAMvM,IAG/B,gBAEL,OAAOtC,KAAKsB,QAAQ6U,gBAGf,QAEL,OAAO,GAAapR,GAGf,MAAMzC,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,OAAOnD,KAAKsB,QAAQmD,WAAWzB,EAAME,EAAKC,GAGrC,YAAYD,GAEjB,OAAOlD,KAAKsB,QAAQiV,YAAYrT,GAG3B,aAAavJ,GAElB,OAAOqG,KAAKsB,QAAQoZ,aAAa/gB,GAG5B,oBAEL,OAAOqG,KAGF,cAEL,OAAOA,KAAKsB,QAGJ,iBAAiBE,EAAaF,GAEtC,OAAOE,aAAiB,GACpBxB,KAAKsB,QAAQK,aAAaH,EAAMF,QAASA,GACzCtB,KAAKsB,QAAQK,aAAaH,EAAOF,GAGhC,aAEL,OAAO,EAGF,WAEL,OAAOtB,KAAKsB,QAAQkV,WAGZ,oBAER,OAAO,EAGF,SAAYnW,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BK,EAASG,KAAK,GAAa41B,cAAep2B,KAAKsB,QAAUT,GAAgBb,KAAKsB,QAAUT,IAIrF,gBAAgBL,GAErB,OAAOA,IAAS,GAAa41B,cACzBp2B,KAAKsB,QACL,KAGC,UAAUC,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQqL,UAAU3M,MAGlB,8BAELA,KAAKsB,QAAQkW,8BAGR,sBAEL,OAAOxX,KAAKsB,QAAQqV,sBAGf,wBAEL,OAAO,GAAMrP,GACX,GAAM5B,GAAG2H,GAAOxF,QAAS,CACvBlO,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMvF,cAEd0B,KAAKsB,QAAQsV,yBAIV,uBAEL,OAAO,GAAMxe,OAAO,CAClBi+B,aAAc,GAAM3wB,GAAG2H,GAAOxF,QAAS,CACrClO,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMvF,cAEdg4B,YAAa,GAAM5wB,GAAG2H,GAAOxF,QAAS,CACpClO,MAAO,GAAMJ,IAAI,QACjBsK,KAAM,GAAMvF,eAEb,GACAi3B,GAAG,GAAMluB,IAAI,GAAM9N,IAAI,gBAAiB,GAAMA,IAAI,iBAClDi8B,KAAK,GAAMe,gBACXhB,GAAG,GAAMh8B,IAAI,iBACbi8B,KAAK,GAAMgB,eACXjB,GAAG,GAAMh8B,IAAI,gBACbi8B,KAAK,GAAMiB,kBACXhB,KAAKz1B,KAAKsB,QAAQuV,yBAIhB,yBAAyB7U,EAAsBhF,EAAqBiF,GAGzE,OAAO,GACJszB,GAAGv1B,KAAKsB,QAAQsV,yBAChB4e,KAAKxzB,GACLyzB,KAAK,GAAMl8B,IAAI,UAIb,QAAQI,GAEb,OAAOA,SAEFqG,KAAKsB,QAAQoG,QAAQ/N,GAGrB,UAAUA,GAEf,OAAOA,QACHA,EACAqG,KAAKsB,QAAQ0V,UAAUrd,GAGtB,cAEL,OAAO,IAAI,GAAaqG,KAAKsB,QAAQ2V,eAGhC,QAEL,OAAO,IAAI,GAAajX,KAAKsB,QAAQmL,SAGhC,SAEL,OAAO,GAAaX,OAAO9L,MAGtB,SAEL,OAAOA,KAAKsB,QAAUtB,KAAKsB,QAAQtH,cAAWsE,EAGzC,OAAOyN,GAEZ,OAAO/L,KAAKsB,SAAWyK,EAAI,EAAG,GAAG,GAASoqB,GACtCn2B,KAAKsB,QAAQgZ,OAAOvO,QACpBzN,EAGC,SAASsM,GAEd,OAAOA,aAAsCtM,EAAY0B,KAAKsB,QAAQuJ,SAASD,GAG1E,OAAOjR,GAEZ,OAAOA,aAAwC2E,EAAY0B,KAAKsB,QAAQqJ,OAAOhR,IAjOnE,GAAAy8B,cAAgB,WAEhB,GAAArxB,GAAKe,EAAGY,SAER,GAAA+E,WAAa,IAAI7G,EAAWkB,EAAGY,SAAWZ,EAAGiB,WAE7C,GAAAiF,UAAY,IAAIpG,EAAUE,EAAGY,SAAWZ,EAAGiB,WAE3C,GAAAuE,SAAW,IAAI,GAAa,GAAQA,UAcpC,GAAAW,kBAA4B,EAO5B,GAAAC,YAAsB,ECrCtC,MAAMwqB,GAAY,EAEX,MAAM,WAAgB,EAWpB,cAActrB,EAAatG,GAEhC,MAAM0C,EAAM4D,EAAKsrB,IAAW35B,IAAK/D,GAAW8L,EAAMnB,QAAQ3K,IAE1D,OAAO,IAAI,GAAQwO,GAGd,cAAclF,GAEnB,MAAMkF,EAAMlF,EAAKhB,QAAQvE,IAAInD,GAAKA,EAAEkS,UAEpC,MAAO,CAAC9L,KAAK+E,GAAIyC,GAKZ,gBAAgB4D,EAAWC,GAEhC,OAAO,KAKF,mBAKA,gBAEL,MAAO,GAGD,OAAWgQ,EAAc7X,GAE/B,MAAMgE,EAAMxH,KAAKsB,QAEjB,IAAK,MAAMgB,KAAQkF,EACnB,CACE,MAAMpH,EAASoD,EAAQlB,GAEvB,QAAehE,IAAX8B,EAEF,OAAOA,EAIX,OAAOib,EAGF,QAEL,OAAO,GAAQtW,GAGV,MAAMzC,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,OAAO,KAGF,YAAYD,GAEjB,MAAO,GAGF,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,OAAOtB,KAAK22B,QAAO,EAAMnvB,IAAOA,EAAI7F,aAAaH,EAAOF,SAAmBhD,GAGnE,oBAER,OAAO,EAGF,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAY+B,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BA,KAAKsB,QAAQvE,IAAI,CAACuF,EAAMuG,IAAUxI,EAASG,KAAKqI,EAAOvG,EAAOzB,GAAgBb,KAAKsB,QAAQ0L,OAAOnE,EAAO,EAAGhI,GAAc,IAAMb,KAAKsB,QAAQ0L,OAAOnE,EAAO,MAIxJ,gBAAgBrI,GAErB,OAAOR,KAAKsB,QAAQd,IAAS,KAGxB,UAAUe,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQkD,QAAQ5K,GAAKA,EAAE+S,UAAU3M,OAGjC,8BAELA,KAAKsB,QAAQkD,QAAQ5K,GAAKA,EAAE4d,+BAGvB,sBAEL,OAAO,GAAazJ,SAGf,wBAEL,OAAO,GAAaA,SAGf,uBAEL,OAAO,GAAaA,SAGf,QAAQpU,GAEb,OAAOqG,KAAK22B,QAAO,EAAM3B,IAAQA,EAAKttB,QAAQ/N,SAAiB2E,GAG1D,UAAU3E,GAEf,OAAOqG,KAAK22B,OAAOh9B,EAAOq7B,GAAQA,EAAKttB,QAAQ/N,GAAS,UAAO2E,GAG1D,cAEL,OAAO,IAAI,GAAQ,IAGd,QAEL,OAAO,IAAI,GAAQ0B,KAAKsB,QAAQvE,IAAIgQ,GAAKA,EAAEN,UAGtC,SAEL,OAAO,GAAQX,OAAO9L,MAGjB,SAEL,OAAO,KAGF,OAAO+L,GAEZ,OAAO,KAGF,SAASnB,GAEd,OAAO,GAAQU,SAAST,SAASD,GAG5B,OAAOjR,GAEZ,OAAO,GAAQ2R,SAASX,OAAOhR,IA7LnB,GAAAoL,GAAKe,EAAGS,IAER,GAAAkF,WAAa,IAAI7G,EAAWkB,EAAGS,IAAMT,EAAGiB,WAExC,GAAAiF,UAAY,IAAIpG,EAAUE,EAAGS,IAAMT,EAAGiB,WAEtC,GAAAuE,SAAW,IAAI,GAAQ,CAAC,GAAQA,WAgBhC,GAAAW,kBAA4B,EAO5B,GAAAC,YAAsB,ECxC/B,MAAM0qB,GAAkB,IAAIhyB,EAAWkB,EAAGI,MAAQJ,EAAGiB,WAE/C8vB,GAAiB,IAAIjxB,EAAUE,EAAGI,MAAQJ,EAAGiB,WAEpD,GAAM6vB,GAGCE,GACb,CAIE98B,OAAQ,GAAImN,IAAI,SAAU,IAI1BC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7BM,IAAK,GAAIN,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC+C,KAAM,GAAI/C,IAAI,OAAQ,GAAI,CAAC,UAE3B+X,MAAO,GAAI/X,IAAI,QAAS,GAAI,CAAC,IAAK,IAAK,KAAM,CAAC,MAE9CpK,IAAK,GAAIoK,IAAI,MAAO,GAAI,CAAC,QAAS,IAAK,IAAK,KAAM,CAAC,KAAM,CAAC,QAAS,aAAc,CAAC,IAAK,IAAK,IAAK,MAEjGzB,GAAI,GAAIyB,IAAI,KAAM,GAAI,CAAC,QAAS,OAAQ,IAAK,IAAK,KAAM,CAAC,KAAM,CAAC,QAAS,OAAQ,aAAc,CAAC,IAAK,IAAK,IAAK,MAE/G7K,MAAO,GAAI6K,IAAI,QAAS,GAAI,CAAC,UAE7B7J,IAAK,GAAI6J,IAAI,IAAK,GAAI,CAAC,QAAS,UAAW,CAAC,UAE5C4vB,KAAM,GAAI5vB,IAAI,KAAM,GAAI,CAAC,QAAS,SAAU,eAAgB,CAAC,UAE7DmK,IAAK,GAAInK,IAAI,IAAK,GAAI,CAAC,QAAS,cAAe,CAAC,UAEhD4Y,IAAK,GAAI5Y,IAAI,IAAK,GAAI,CAAC,QAAS,cAAe,CAAC,UAEhD6Y,IAAK,GAAI7Y,IAAI,IAAK,GAAI,CAAC,QAAS,WAAY,CAAC,UAE7C8Y,IAAK,GAAI9Y,IAAI,IAAK,GAAI,CAAC,QAAS,WAAY,CAAC,UAE7C6vB,OAAQ,GAAI7vB,IAAI,SAAU,GAAI,CAAC,QAAS,WAExC0H,MAAO,GAAI1H,IAAI,QAAS,GAAI,CAAC,UAE7B4a,KAAM,GAAI5a,IAAI,OAAQ,GAAI,CAAC,QAAS,MAAO,UAE3C8vB,QAAS,GAAI9vB,IAAI,UAAW,GAAI,CAAC,QAAS,WAE1C+vB,OAAQ,GAAI/vB,IAAI,SAAU,GAAI,CAAC,QAAS,WAExCgwB,MAAO,GAAIhwB,IAAI,QAAS,GAAI,CAAC,UAE7BiwB,QAAS,GAAIjwB,IAAI,QAAS,GAAI,CAAC,UAE/BkwB,UAAW,GAAIlwB,IAAI,YAAa,GAAI,CAAC,UAErCmwB,SAAU,GAAInwB,IAAI,WAAY,GAAI,CAAC,QAAS,SAE5CowB,OAAQ,GAAIpwB,IAAI,SAAU,GAAI,CAAC,SAAU,CAAC,UAE1CqwB,OAAQ,GAAIrwB,IAAI,SAAU,GAAI,CAAC,UAE/BswB,MAAO,GAAItwB,IAAI,QAAS,GAAI,CAAC,QAAS,UAEtC2K,SAAU,GAAI3K,IAAI,WAAY,GAAI,CAAC,QAAS,SAE5CuwB,MAAO,GAAIvwB,IAAI,QAAS,GAAI,CAAC,SAE7BwwB,QAAS,GAAIxwB,IAAI,UAAW,GAAI,CAAC,UAEjCywB,MAAO,GAAIzwB,IAAI,QAAS,GAAI,CAAC,MAAO,SAAU,SAI9CO,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BU,QAAS,GAAIV,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,YAE9CW,WAAY,GAAIX,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,YAElDuG,OAAQ,GAAIvG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCwG,cAAe,GAAIxG,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CyG,UAAW,GAAIzG,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtC0G,iBAAkB,GAAI1G,IAAI,KAAM,GAAI,CAAC,QAAS,SAI9CY,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpCy7B,GAAe1vB,IAAI,QAAS2vB,GAASK,OACrCN,GAAe1vB,IAAI,YAAa2vB,GAASO,WACzCR,GAAe1vB,IAAI,WAAY2vB,GAASS,QACxCV,GAAe1vB,IAAI,SAAU2vB,GAASU,QACtCX,GAAe1vB,IAAI,OAAQ2vB,GAASa,SC1H7B,MAAME,GAAgB,EAChBC,GAAgB,IAUtB,SAASC,GAAQj8B,GAEtB,OAAOP,EAASO,IAAMpB,EAASoB,EAAEtC,IAAMkB,EAASoB,EAAEk8B,IAAMt9B,EAASoB,EAAEH,GAG9D,SAASs8B,GAAen8B,GAE7B,OAAOQ,EAAMN,KAAKE,MAAMJ,GAAI+7B,GAAeC,ICEtC,MAAMI,GAUX,YAAmBC,EAAcl/B,GAE/B+G,KAAKm4B,KAAOA,EACZn4B,KAAK/G,KAAOA,EACZ+G,KAAKo4B,UAAY,GACjBp4B,KAAKq4B,QAAU,GAGV,QAAQ/1B,GAIb,OAFAtC,KAAKsC,KAAOA,EAELtC,KAGF,WAAWs4B,GAIhB,OAFAt4B,KAAKs4B,QAAUA,EAERt4B,KAGF,aAAau4B,GAIlB,OAFAv4B,KAAKu4B,UAAYA,EAEVv4B,KAGF,UAAUg3B,GAKf,OAHAh3B,KAAKo4B,UAAUpB,EAAOmB,MAAQnB,EAC9Bh3B,KAAKq4B,QAAQ55B,KAAKu4B,GAEXh3B,MC5DJ,MAAMw4B,GAAgB,IAAIN,GAAkB,MAAO,OACvDO,WAAYC,GAAUA,GACtBC,aAAcD,GAAUA,GACxBE,UAAU,CACTT,KAAM,UACNl/B,KAAM,UACNyR,OAASU,GACF2sB,GAAQ3sB,GAINA,EAHE,KAKXytB,UAAYH,GACHA,IAGVE,UAAU,CACTT,KAAM,UACNl/B,KAAM,WACNyR,OAASU,GACA,KAETytB,UAAYH,IACV,GAAIA,EAAMh9B,IAAMo8B,GAAe,CAK7B,MAAO,IAJGgB,GAAUJ,EAAMl/B,GAChBs/B,GAAUJ,EAAMV,GAChBc,GAAUJ,EAAM/8B,GAS1B,MAAO,QALGs8B,GAAeS,EAAMl/B,GAKV,IAJXy+B,GAAeS,EAAMV,GAIA,IAHrBC,GAAeS,EAAM/8B,GAGU,IAF/Bs8B,GAAeS,EAAMh9B,GAAKo8B,GAEe,OAIxDc,UAAU,CACTT,KAAM,WACNl/B,KAAM,aACNyR,OAASU,IACP,IAAKxQ,EAASwQ,GACZ,OAAO,KAGT,MAAM/N,EAAU,qCAAqCwzB,KAAKzlB,GAC1D,IAAK/N,EACH,OAAO,KAGT,MAAO,CAAE7D,EAAGw+B,EAAGr8B,GAAK0B,EAEpB,MAAO,CACL7D,EAAGgW,SAAShW,EAAIA,EAAG,IACnBw+B,EAAGxoB,SAASwoB,EAAIA,EAAG,IACnBr8B,EAAG6T,SAAS7T,EAAIA,EAAG,IACnBD,EAAGo8B,KAGPe,UAAYH,IAKV,MAAO,IAJGI,GAAUJ,EAAMl/B,GAAG8F,UAAU,EAAG,GAChCw5B,GAAUJ,EAAMV,GAAG14B,UAAU,EAAG,GAChCw5B,GAAUJ,EAAM/8B,GAAG2D,UAAU,EAAG,MAK7Cs5B,UAAU,CACTT,KAAM,MACNl/B,KAAM,gBACNyR,OAASU,IACP,IAAKxQ,EAASwQ,GACZ,OAAO,KAGT,MAAM/N,EAAU,8CAA8CwzB,KAAKzlB,GACnE,IAAK/N,EACH,OAAO,KAGT,MAAO,CAAE7D,EAAGw+B,EAAGr8B,GAAK0B,EAEpB,MAAO,CACL7D,EAAGgW,SAAShW,EAAG,IACfw+B,EAAGxoB,SAASwoB,EAAG,IACfr8B,EAAG6T,SAAS7T,EAAG,IACfD,EAAGo8B,KAGPe,UAAYH,IAKV,MAAO,IAJGI,GAAUJ,EAAMl/B,GAChBs/B,GAAUJ,EAAMV,GAChBc,GAAUJ,EAAM/8B,MAK7Bi9B,UAAU,CACTT,KAAM,UACNl/B,KAAM,kBACNyR,OAASU,IACP,IAAKxQ,EAASwQ,GACZ,OAAO,KAGT,MAAM/N,EAAU,2DAA2DwzB,KAAKzlB,GAChF,IAAK/N,EACH,OAAO,KAGT,MAAO,CAAE7D,EAAGw+B,EAAGr8B,EAAGD,GAAK2B,EAEvB,MAAO,CACL7D,EAAGgW,SAAShW,EAAG,IACfw+B,EAAGxoB,SAASwoB,EAAG,IACfr8B,EAAG6T,SAAS7T,EAAG,IACfD,EAAG8T,SAAS9T,EAAG,MAGnBm9B,UAAYH,IAMV,MAAO,IALGI,GAAUJ,EAAMl/B,GAChBs/B,GAAUJ,EAAMV,GAChBc,GAAUJ,EAAM/8B,GAChBm9B,GAAUJ,EAAMh9B,MAK7Bk9B,UAAU,CACTT,KAAM,MACNl/B,KAAM,eACNyR,OAASU,IACP,IAAKxQ,EAASwQ,GACZ,OAAO,KAGT,MAAM/N,EAAU,kEAAkEwzB,KAAKzlB,GACvF,IAAK/N,EACH,OAAO,KAGT,MAAO,CAAE7D,EAAGw+B,EAAGr8B,GAAK0B,EAEpB,MAAO,CACL7D,EAAGu/B,GAAev/B,GAClBw+B,EAAGe,GAAef,GAClBr8B,EAAGo9B,GAAep9B,GAClBD,EAAGo8B,KAGPe,UAAYH,IAKV,MAAO,OAJGT,GAAeS,EAAMl/B,GAIX,IAHVy+B,GAAeS,EAAMV,GAGD,IAFpBC,GAAeS,EAAM/8B,GAES,OAG3Ci9B,UAAU,CACTT,KAAM,OACNl/B,KAAM,mBACNyR,OAASU,IACP,IAAKxQ,EAASwQ,GACZ,OAAO,KAGT,MAAM/N,EAAU,yFAAyFwzB,KAAKzlB,GAC9G,IAAK/N,EACH,OAAO,KAGT,MAAO,CAAE7D,EAAGw+B,EAAGr8B,EAAGD,GAAK2B,EAEvB,MAAO,CACL7D,EAAGu/B,GAAev/B,GAClBw+B,EAAGe,GAAef,GAClBr8B,EAAGo9B,GAAep9B,GAClBD,EAAGu8B,GAAej8B,KAAK6kB,MAAMmY,WAAWt9B,GAAKo8B,OAGjDe,UAAYH,IAMV,MAAO,QALGT,GAAeS,EAAMl/B,GAKV,IAJXy+B,GAAeS,EAAMV,GAIA,IAHrBC,GAAeS,EAAM/8B,GAGU,IAF/Bs8B,GAAeS,EAAMh9B,GAAKo8B,GAEe,OAKzD,SAASiB,GAAej9B,GAEtB,OAA2B,IAApBA,EAAEyV,QAAQ,KACb0mB,GAAezoB,SAAS1T,EAAG,KAC3Bm8B,GAA4D,KAA7CzoB,SAAS1T,EAAEwD,UAAU,EAAGxD,EAAEM,OAAS,GAAI,KAG5D,SAAS08B,GAAUh9B,GAEjB,OAAOuD,EAAI44B,GAAen8B,GAAGm9B,SAAS,IAAK,EAAG,KAAK,GCtM9C,SAASC,GAAWp9B,GAEzB,OAAOP,EAASO,IAAMpB,EAASoB,EAAEq9B,IAAMz+B,EAASoB,EAAErB,IAAMC,EAASoB,EAAEnD,GAI9D,MAAMygC,GAAgB,IAAIlB,GAAqB,MAAO,OAC1DmB,QAAQ,IAAI,GAAW,CAACx6B,MAAO,CAC9Bs6B,EAAG,IAAI,GAAW,CAAE58B,IAAK,EAAGC,IAAK,IAAKuqB,OAAO,IAC7CtsB,EAAG,IAAI,GAAW,CAAE8B,IAAK,EAAGC,IAAK,IAAKuqB,OAAO,IAC7CpuB,EAAG,IAAI,GAAW,CAAE4D,IAAK,EAAGC,IAAK,IAAKuqB,OAAO,IAC7CrrB,EAAG,IAAI,GAAW,CAAEa,IAAK,EAAGC,IAAK,IAAKuqB,OAAO,QAE9C0R,WAAYC,IACX,MAAMY,EAAIC,GAAab,EAAMS,GACvBK,EAAIC,GAAaf,EAAM//B,GAAK,IAC5B+gC,EAAID,GAAaf,EAAMj+B,GAAK,IAC5Bk/B,GAAK,EAAI39B,KAAKC,IAAI,EAAIu9B,EAAI,IAAME,EAChCE,EAAID,GAAK,EAAI39B,KAAKC,IAAMq9B,EAAI,GAAM,EAAK,IACvCxgC,EAAI0gC,EAAIG,EAAI,EAMZE,EAAKP,GAAK,IACZ,EACAA,GAAK,IAAMA,EAAI,IACbK,EACAC,EACAE,EAAKR,GAAK,IACZ,EACAA,GAAK,KAAOA,EAAI,IACdK,EACAC,EAEN,MAAO,CACLpgC,EAAGy+B,KAjBMqB,EAAI,IAAMA,GAAK,IACtBK,EACAL,GAAK,KAAOA,EAAI,IACd,EACAM,GAaoB9gC,GAAKg/B,IAC7BE,EAAGC,IAAgB4B,EAAK/gC,GAAKg/B,IAC7Bn8B,EAAGs8B,IAAgB6B,EAAKhhC,GAAKg/B,IAC7Bp8B,EAAGg9B,EAAMh9B,KAGZi9B,aAAcD,IACb,MAAMqB,EAAI9B,GAAeS,EAAMl/B,GACzBwgC,EAAI/B,GAAeS,EAAMV,GACzBiC,EAAIhC,GAAeS,EAAM/8B,GACzBu+B,EAAKH,EAAIjC,GACT+B,EAAKG,EAAIlC,GACTgC,EAAKG,EAAInC,GACTqC,EAAOn+B,KAAKQ,IAAI09B,EAAIL,EAAIC,GACxBM,EAAOp+B,KAAKO,IAAI29B,EAAIL,EAAIC,GACxBO,EAAQF,EAAOC,EACfZ,GAAKW,EAAOC,GAAQ,EACpBjB,EAAc,IAAVkB,EACN,EACAF,IAASD,GACLL,EAAKC,GAAMO,EAAS,EACtBF,IAASN,GACLC,EAAKI,GAAMG,EAAS,GACpBH,EAAKL,GAAMQ,EAAS,EACxB5/B,EAAc,IAAV4/B,EACN,EACAA,GAAS,EAAIr+B,KAAKC,IAAI,EAAIu9B,EAAI,IAElC,MAAO,CACLL,EAAGI,GAAav9B,KAAKE,MAAU,GAAJi9B,IAC3B1+B,EAAGg/B,GAAaz9B,KAAKE,MAAU,IAAJzB,IAC3B9B,EAAG8gC,GAAaz9B,KAAKE,MAAU,IAAJs9B,IAC3B99B,EAAGg9B,EAAMh9B,KAGZk9B,UAAU,CACTT,KAAM,MACNl/B,KAAM,MACNyR,OAASU,IACP,IAAKxQ,EAASwQ,GACZ,OAAO,KAGT,MAAM/N,EAAU,8DAA8DwzB,KAAKzlB,GACnF,IAAK/N,EACH,OAAO,KAGT,MAAO,CAAE87B,EAAG1+B,EAAG9B,GAAK0E,EAEpB,MAAO,CACL87B,EAAGI,GAAa/pB,SAAS2pB,EAAG,KAC5B1+B,EAAGg/B,GAAajqB,SAAS/U,EAAG,KAC5B9B,EAAG8gC,GAAajqB,SAAS7W,EAAG,KAC5B+C,EAAGo8B,KAGPe,UAAYH,IAKV,MAAO,OAJGa,GAAav9B,KAAKE,MAAMw8B,EAAMS,IAIpB,IAHVM,GAAaz9B,KAAKE,MAAMw8B,EAAMj+B,IAGV,KAFpBg/B,GAAaz9B,KAAKE,MAAMw8B,EAAM//B,IAEC,QAG5CigC,UAAU,CACTT,KAAM,OACNl/B,KAAM,OACNyR,OAASU,IACP,IAAKxQ,EAASwQ,GACZ,OAAO,KAGT,MAAM/N,EAAU,qFAAqFwzB,KAAKzlB,GAC1G,IAAK/N,EACH,OAAO,KAGT,MAAO,CAAE87B,EAAG1+B,EAAG9B,EAAG+C,GAAK2B,EAEvB,MAAO,CACL87B,EAAGI,GAAa/pB,SAAS2pB,EAAG,KAC5B1+B,EAAGg/B,GAAajqB,SAAS/U,EAAG,KAC5B9B,EAAG8gC,GAAajqB,SAAS7W,EAAG,KAC5B+C,EAAGu8B,GAAej8B,KAAK6kB,MAAMmY,WAAWt9B,GAAKo8B,OAGjDe,UAAYH,IAMV,MAAO,QALGa,GAAav9B,KAAKE,MAAMw8B,EAAMS,IAKnB,IAJXM,GAAaz9B,KAAKE,MAAMw8B,EAAMj+B,IAIT,KAHrBg/B,GAAaz9B,KAAKE,MAAMw8B,EAAM//B,IAGE,KAFhCs/B,GAAeS,EAAMh9B,GAAKo8B,GAEiB,OAK3D,SAASyB,GAAaJ,GAEpB,OAAOA,EAAI,EACP,IAAMn9B,KAAKC,IAAIk9B,EAAI,KACnBA,EAAI,IAGV,SAASM,GAAa39B,GAEpB,OAAOQ,EAAMR,EAAG,EAAG,KC/IrB,MAAM,GAAgB,EASf,MAAM,WAAkB,GA0E7B,YAAmBw+B,EAAuC,IAExDjuB,MAAM,OAAD,wBACAiuB,GAAY,CACfz7B,MAAO,GAAU07B,kBAjDd,cAAcnvB,GAEnB,OAAO,IAAI,GAAUA,EAAK,KAAkB,IAGvC,cAAc9I,GAEnB,OAAOA,EAAKhB,QAAQk5B,SAChB,CAACx6B,KAAK+E,GAAI,CAAEy1B,UAAU,IACtBx6B,KAAK+E,GAKJ,gBAAgBqG,GAErB,MAAM8lB,EAAS,GAAU5lB,SAAS0L,UAAU5L,GAE5C,OAAK8lB,EAKE,IAAI,GAAU,CACnBsJ,SAAUtJ,EAAOx1B,IAAMo8B,KAJhB,KAUJ,mBAKA,iBAAiB/yB,GAEtB,MAAO01B,EAASC,GAAY31B,EAAGqM,MAAM,KAC/BupB,EAAQ36B,KAAK46B,OAAO9rB,KAAMrU,GAAMA,EAAE09B,OAASsC,GAEjD,OAAOE,EACHA,EAAMvC,UAAUsC,QAChBp8B,EAWC,QAEL,OAAO,GAAUyG,GAGZ,gBAEL,OAAO,GAAU0G,WAAW1O,IAGvB,MAAMuF,GAEX,MAAM2R,EAAKjU,KAAKsB,QACV4S,EAAK5R,EAAKhB,QAEhB2S,EAAGumB,SAAWvmB,EAAGumB,UAAYtmB,EAAGsmB,SAGxB,iBAAiBh5B,EAAaF,GAEtC,OAAIE,aAAiB,MAKhBF,EAAQO,QACRP,EAAQG,SACTD,aAAiB,MACjBA,EAAMG,aAAa3B,OAQlB,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,8BAELqM,MAAMmL,qCAECxX,KAAKsB,QAAQk5B,SAGf,sBAEL,OAAO,GAAM90B,GAAGoxB,GAAS98B,OAAQ,IAG5B,wBAEL,OAAO,GAAM0L,GAAGoxB,GAASpvB,QAAS,CAChC/N,MAAO,GAAMJ,IAAI,WAId,uBAEL,OAAO,GAAMmM,GAAGoxB,GAASrvB,IAAK,CAC5B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,QAAQI,GAEb,YAAiC2E,IAA1B0B,KAAKgX,UAAUrd,GAGjB,UAAUA,GAEf,IAAK,MAAMghC,KAAS,GAAUC,OAE5B,IAAK,MAAMvC,KAAWsC,EAAMtC,QAC5B,CACE,MAAMnH,EAASmH,EAAQ3tB,OAAO/Q,GAE9B,GAAe,OAAXu3B,EAEF,OAAOyJ,EAAMrC,QAAQpH,IAMtB,cAEL,OAAO,IAAI,GAAU,IAGhB,QAEL,OAAO,IAAI,GAAU,CACnBsJ,SAAUx6B,KAAKsB,QAAQk5B,WAIpB,SAEL,OAAO,GAAU1uB,OAAO9L,MAGnB,SAEL,MAAO,CAAExG,EAAG,EAAGw+B,EAAG,EAAGr8B,EAAG,EAAGD,EAAG,GAGzB,OAAOqQ,GAEZ,MAAO,CACLvS,EAAGuS,EAAI8rB,GAAeC,IAAe,GACrCE,EAAGjsB,EAAI8rB,GAAeC,IAAe,GACrCn8B,EAAGoQ,EAAI8rB,GAAeC,IAAe,GACrCp8B,EAAGo8B,IAIA,SAASltB,GAEd,MAAO,CACLpR,EAAGoR,EAAKpR,EACRw+B,EAAGptB,EAAKotB,EACRr8B,EAAGiP,EAAKjP,EACRD,EAAGkP,EAAKlP,GAIL,OAAO/B,GAEZ,OAAOA,EAAQ,CACbH,EAAGG,EAAMH,EACTw+B,EAAGr+B,EAAMq+B,EACTr8B,EAAGhC,EAAMgC,EACTD,EAAG/B,EAAM+B,GACP,MA9NiB,GAAAm/B,cAAgB,IAAI,GAAW,CACpDt+B,IAAKs7B,GACLr7B,IAAKs7B,GACL/Q,OAAO,IAGc,GAAAwT,eAAiB,CACtC/gC,EAAG,GAAUqhC,cACb7C,EAAG,GAAU6C,cACbl/B,EAAG,GAAUk/B,cACbn/B,EAAG,GAAUm/B,eAGD,GAAAD,OAA4B,CACxCpC,GACAY,IAGY,GAAAr0B,GAAKe,EAAGI,MAER,GAAAuF,WAAamrB,GAEb,GAAA5qB,UAAY6qB,GAEZ,GAAAvrB,SAAW,IAAI,GAAU,CAAEkvB,UAAU,IAcrC,GAAAvuB,iBAA2B,EAgB3B,GAAAC,YAAsB,EAgLtCssB,GAAca,QAAQ,GAAU/tB,UC1PzB,MAAMwvB,GAAgB,IAAIl2B,EAAWkB,EAAG1K,IAAM0K,EAAGiB,WAE3Cg0B,GAAe,IAAIn1B,EAAUE,EAAG1K,IAAM0K,EAAGiB,WAEhD,GAAM+zB,GAECE,GACb,CAIEhhC,OAAQ,GAAImN,IAAI,UAEhBmO,WAAY,GAAInO,IAAI,aAAc,GAAI,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAE5DoO,UAAW,GAAIpO,IAAI,YAAa,GAAI,CAAC,SAAU,GAAI,GAAI,GAAI,CAAC,UAI5DC,MAAO,GAAID,IAAI,QAAS,GAAI,CAAC,UAE7B7J,IAAK,GAAI6J,IAAI,MAAO,CAAE5B,QAAS,CAAC,QAAU,CAAC,MAAO,SAAU,GAAI,GAAI,GAAI,CAAC,QAEzEiQ,IAAK,GAAIrO,IAAI,MAAO,GAAI,CAAC,MAAO,UAEhCsO,OAAQ,GAAItO,IAAI,SAAU,CAAE5B,QAAS,CAAC,QAAU,CAAC,MAAO,UAExDgP,OAAQ,GAAIpN,IAAI,SAAU,CAAE3B,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEnEoQ,MAAO,GAAIzO,IAAI,QAAS,CAAE5B,QAAS,CAAC,QAAU,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEpEsQ,MAAO,GAAI1O,IAAI,QAAS,GAAK,CAAC,QAE9BM,IAAK,GAAIN,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAEjD0E,KAAM,GAAI/C,IAAI,OAAQ,CAAE3B,WAAY,GAAK,CAAC,OAAQ,CAAC,YAAa,CAAC,MAAO,SAAU,CAAC,YAAa,CAAC,QAEjGzI,IAAK,GAAIoK,IAAI,MAAO,CAAE3B,WAAY,GAAK,CAAC,OAAQ,CAAC,aAAc,CAAC,MAAO,SAAU,CAAC,aAAc,CAAC,QAIjGkC,QAAS,GAAIP,IAAI,IAAK,GAAI,CAAC,UAE3BU,QAAS,GAAIV,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAEnDsC,WAAY,GAAIX,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAEvDkI,OAAQ,GAAIvG,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAElDmI,cAAe,GAAIxG,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAE1DoI,UAAW,GAAIzG,IAAI,IAAK,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAErDqI,iBAAkB,GAAI1G,IAAI,KAAM,CAAE3B,WAAY,GAAK,CAAC,QAAS,SAI7DuC,MAAO,GAAIZ,IAAI,IAAMrB,EAAGE,IAAK,GAAI,CAAC,UAElCgC,UAAW,GAAIb,IAAI,IAAMrB,EAAGG,QAAS,GAAI,CAAC,UAE1CgC,QAAS,GAAId,IAAI,IAAMrB,EAAGI,MAAO,GAAI,CAAC,UAEtCgC,OAAQ,GAAIf,IAAI,IAAMrB,EAAG9K,KAAM,GAAI,CAAC,UAEpCmN,OAAQ,GAAIhB,IAAI,IAAMrB,EAAGO,KAAM,GAAI,CAAC,UAEpC+B,MAAO,GAAIjB,IAAI,IAAMrB,EAAG5K,IAAK,GAAI,CAAC,UAElCmN,SAAU,GAAIlB,IAAI,IAAMrB,EAAGW,OAAQ,GAAI,CAAC,UAExC6B,SAAU,GAAInB,IAAI,IAAMrB,EAAG1M,OAAQ,GAAI,CAAC,UAExCmP,OAAQ,GAAIpB,IAAI,IAAMrB,EAAGe,KAAM,GAAI,CAAC,UAEpC2B,QAAS,GAAIrB,IAAI,IAAMrB,EAAGgB,MAAO,GAAI,CAAC,UAEtC2B,MAAO,GAAItB,IAAI,IAAMrB,EAAG1K,IAAK,GAAI,CAAC,WAIpC2/B,GAAa5zB,IAAI,OAAQ6zB,GAAO9wB,MAChC6wB,GAAa5zB,IAAI,SAAU6zB,GAAOzmB,QAClCwmB,GAAa5zB,IAAI,QAAS6zB,GAAOnlB,OC1EjC,MAAM,GAAc,EACd,GAAa,EACb,GAAa,EAOZ,MAAM,WAAgB,EAapB,cAAczK,EAAatG,GAEhC,MAAMnL,EAAQmL,EAAMnB,QAAQyH,EAAK,KAEjC,OAAO,IAAI,GAAQ,CAAEzR,UAGhB,cAAc2I,GAEnB,MAAM,MAAE3I,GAAU2I,EAAKhB,QAEvB,MAAO,CAACtB,KAAK+E,GAAIpL,EAAMmS,UAKlB,gBAAgBV,EAAWC,GAEhC,IAAKlQ,EAAMiQ,GAET,OAAO,KAGT,IAAIzR,EAAc,IAAI,GAAQ,IAE9B,IAAK,MAAOshC,KAAa7vB,EAAKnO,UAE5BtD,EAAQ0R,EAAUiL,MAAM3c,EAAOshC,GAGjC,OAAO,IAAI,GAAQ,CAAEthC,UAKhB,kBAKLsR,EAAUqO,QAAQ,CAChBtO,SAJe,GAKfH,SAAU,CAACD,EAAM2O,KACf,GAAIhe,EAASqP,IAAShQ,EAASgQ,EAAKoD,OAAuB,QAAdpD,EAAKoD,KAChD,OAAO,IAAI5S,IAAIwP,EAAKjR,MAAMoD,IAAIwc,KAGlC5O,OAAQ,CAACC,EAAM4O,KACb,GAAIre,EAAMyP,GACR,MAAO,CACLoD,KAAM,MACNrU,MAAOmB,MAAMkC,KAAK4N,EAAK3N,WAAWF,IAAIyc,OAM9CvO,EAAUwO,UAAU,CAClBzO,SArBe,GAsBfd,KAAM,CAACpO,EAAGoO,EAAMF,KACd,GAAI7O,EAAMW,GAAI,CACZ,MAAMo/B,EAAS,IAAI9/B,IAEnB4O,EAAclO,EAAGo/B,GAEjB,IAAK,MAAOvhC,KAAUmC,EAAEmB,UACtBi+B,EAAO59B,IAAI4M,EAAKvQ,IAGlB,OAAOuhC,MAKbjwB,EAAUM,WAAW,CACnBP,SAtCe,GAuCf1I,KAtCwB,SAuCxBgH,QAAS,CAAC5N,EAAGC,EAAG2N,KACd,MAAM+b,EAAKlqB,EAAMO,GACX4pB,EAAKnqB,EAAMQ,GAEjB,GAAI0pB,IAAOC,EAAI,OAAQD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE/C,GAAInqB,EAAMO,IAAMP,EAAMQ,GAAI,CACxB,IAAI4pB,EAAK7pB,EAAEm6B,KAAOl6B,EAAEk6B,KAEpB,GAAW,IAAPtQ,EAAU,CACZ,IAAIhc,EAAO,EACPC,EAAO,EAEX,MAAM2xB,EAAUrgC,MAAMkC,KAAKtB,GACrB0/B,EAAUtgC,MAAMkC,KAAKrB,GAE3B,IAAK,IAAIjD,EAAI,EAAGA,EAAIyiC,EAAQ/+B,OAAQ1D,IAAK,CACvC,MAAMK,EAAIuQ,EAAQ6xB,EAAQziC,GAAI0iC,EAAQ1iC,IAElCK,EAAI,GAAGwQ,IACPxQ,EAAI,GAAGyQ,IAGb+b,EAAKta,EAAU0O,WAAWpQ,EAAMC,GAGlC,OAAO+b,MAKbta,EAAUO,UAAU,CAClBR,SAxEe,GAyEf1I,KAxEwB,SAyExBqH,OAAQ,CAACjO,EAAGC,EAAGgO,KAIb,GAHWxO,EAAMO,KACNP,EAAMQ,GAEF,OAAO,EAEtB,GAAIR,EAAMO,IAAMP,EAAMQ,GACtB,CACE,GAAID,EAAEm6B,OAASl6B,EAAEk6B,KAEf,OAAO,EAGT,IAAK,MAAMl8B,KAAS+B,EAElB,IAAKC,EAAE6Z,IAAI7b,GAET,OAAO,EAIX,OAAO,MAMR,eAAem8B,GAEpB,MAAMn8B,EAAQ,GAAMkV,MAAMinB,GAE1B,OAAO,IAAI,GAAQ,CAAEn8B,UAGhB,QAEL,OAAO,GAAQoL,GAGV,gBAEL,OAAO,GAAQ0G,WAAW1O,IAGrB,MAAMuF,GAEX,MAAM2R,EAAKjU,KAAKsB,QACV4S,EAAK5R,EAAKhB,QAEhB2S,EAAGta,MAAQ,GAAM2c,MAAMrC,EAAGta,MAAOua,EAAGva,OAG/B,WAAWqJ,EAAkBE,EAAyBC,GAE3D,OAAO,KAGF,YAAYD,GAEjB,MAAO,GAGF,aAAavJ,GAElB,OAAOqG,KAGF,oBAEL,OAAOA,KAGC,iBAAiBwB,EAAaF,GAEtC,OAAOE,aAAiB,IACtBxB,KAAKsB,QAAQ3H,MAAMgI,aAAaH,EAAMF,QAAQ3H,MAAO2H,GAGlD,aAEL,OAAO,EAGF,WAEL,OAAO,EAGF,SAAYjB,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,KAC1BK,EAASG,KAAK,GAAQkW,WAAY1W,KAAKsB,QAAQ3H,MAAQkH,GAAgBb,KAAKsB,QAAQ3H,MAAQkH,KAIzF,gBAAgBL,GAErB,OAAOA,IAAS,GAAQkW,WACpB1W,KAAKsB,QAAQ3H,MACb,KAGC,UAAU4H,EAAe,MAE9BvB,KAAKuB,OAASA,EAEdvB,KAAKsB,QAAQ3H,MAAMgT,UAAU3M,MAGxB,8BAELA,KAAKsB,QAAQ3H,MAAM6d,8BAGd,sBAEL,OAAO,GAAM9R,GAAGs1B,GAAOhhC,OAAQ,IAG1B,wBAEL,OAAO,GAAMqN,IACX,GAAM3B,GAAGs1B,GAAOtzB,QAAS,CACvB/N,MAAO,GAAMJ,IAAI,WAEnB,GAAMiO,IAAI,GAAM9B,GAAGmd,GAAQQ,SAAU,CACnCjiB,KAAM,GAAMsE,GAAGs1B,GAAOzmB,OAAQ,CAAEpN,IAAK,GAAM5N,IAAI,WAC/C6rB,KAAM,GAAMtX,OACZjG,QAAS,GAAML,IAAIxH,KAAKsB,QAAQ3H,MAAMid,0BACrC,CACDjd,MAAO,SACPkK,KAAM,YAKL,uBAEL,OAAO,GAAM6B,GAAGs1B,GAAOvzB,IAAK,CAC1B9N,MAAO,GAAMJ,IAAI,SACjBsK,KAAM,GAAMtK,IAAI,UAIb,yBAAyByI,EAAsBhF,EAAqBiF,GAGzE,OAAO,GAAMyD,GAAGs1B,GAAOj+B,IAAK,CAC1BoK,IAAK,GAAM5N,IAAI,SACfiF,UAAWwD,GACV,CACDrI,MAAO,UAIJ,QAAQkK,GAEb,GAAIA,aAAgBzI,KAAOP,EAAQgJ,GACnC,CACE,MAAM,MAAElK,GAAUqG,KAAKsB,QAEvB,OAAQxG,MAAMkC,KAAK6G,GAAM8hB,KAAM/oB,IAAOjD,EAAM+N,QAAQ9K,IAGtD,OAAO,EAGF,UAAUiH,GAEf,MAAM,MAAElK,GAAUqG,KAAKsB,QAEvB,OAAO,IAAIlG,IAAIN,MAAMkC,KAAK6G,GAAM9G,IAAKH,GAAMjD,EAAMqd,UAAUpa,KAGtD,cAEL,MAAM,MAAEjD,GAAUqG,KAAKsB,QAEvB,OAAO,IAAI,GAAQ,CACjB3H,MAAOA,EAAMsd,gBAIV,QAEL,MAAM,MAAEtd,GAAUqG,KAAKsB,QAEvB,OAAO,IAAI,GAAQ,CACjB3H,MAAOA,EAAM8S,UAIV,SAEL,OAAO,GAAQX,OAAO9L,MAGjB,SAEL,OAAO,IAAI5E,IAGN,OAAO2Q,GAEZ,MAAM,MAAEpS,GAAUqG,KAAKsB,QACjBnH,EAAI4R,EAAI,GAAY,GAAa,GAAG,GACpC5N,EAAM,IAAI/C,IAEhB,IAAK,IAAI1C,EAAI,EAAGA,EAAIyB,EAAGzB,IACvB,CACE,MAAMkE,EAAIjD,EAAM2gB,OAAOvO,GAEvB5N,EAAIb,IAAIV,GAGV,OAAOuB,EAGF,SAASyM,GAEd,MAAM,MAAEjR,GAAUqG,KAAKsB,QAEvB,OAAO,IAAIlG,IAAIwP,EAAK7N,IAAKH,GAAMjD,EAAMkR,SAASjO,KAGzC,OAAOuK,GAEZ,MAAM,MAAExN,GAAUqG,KAAKsB,QAEvB,OAAOxG,MAAMkC,KAAKmK,EAAIlK,WAAWF,IAAKH,GAAMjD,EAAMgR,OAAO/N,KA9V7C,GAAA8Z,WAAa,QAEb,GAAA3R,GAAKe,EAAG1K,IAER,GAAAqQ,WAAaqvB,GAEb,GAAA9uB,UAAY+uB,GAEZ,GAAAzvB,SAAW,IAAI,GAAQ,CAAE3R,MAAO,GAAQ2R,WAgBxC,GAAAW,iBAA2B,EAmB3B,GAAAC,YAAsB,ECjD/B,MAAM,GAWJ,iBAAiC5J,EAASgkB,GAAiB,GAOhE,OALItmB,KAAKumB,eAAiBD,IAExBhkB,EAAKqK,YAGArK,EAGF,aAEL,OAAO,IAAI,GAAQ,IAGd,YAAY+4B,EAA8BC,GAE/C,OAAO,IAAI,EAAY,CAAE1vB,KAAMyvB,EAAOxvB,MAAOyvB,IAGxC,YAAYh6B,EAAuB,IAExC,OAAO,IAAI,GAASA,GAGf,YAAY3H,EAAkBM,EAAiB,GAAUua,EAAsB,IAAItZ,IAAI,KAE5F,OAAO8E,KAAK2M,UAAU,IAAI,GAAS,CACjChT,MAAOqG,KAAK6O,MAAMlV,GAClBM,IAAK+F,KAAK6O,MAAM5U,GAChBua,UAAW/X,EAAM+X,MAId,mBAAmBA,GAExB,OAAOxU,KAAK2M,UAAU,IAAI,GAAS,CACjChT,MAAOqG,KAAKu7B,OACZthC,IAAK+F,KAAKu7B,OACV/mB,UAAWvZ,EAAMuZ,GACbA,EACA3Z,EAAQ2Z,EAAU,IAChB,IAAItZ,IAAIsZ,GACR,IAAItZ,IAAKsZ,EAAuBzX,IAAKhE,GAAM,CAACA,EAAGA,QAIlD,YAAYqsB,EAAiB7oB,EAAcC,GAEhD,OAAOwD,KAAK2M,UAAU,IAAI,GAAS,CACjCyY,KAAMplB,KAAK6O,MAAMuW,GACjB7oB,MACAC,SAMG,eAAesI,GAEpB,OAAO9E,KAAK2M,UAAU,IAAI,GACxB9R,EAAQiK,EAAM,IACVA,EAAM,GAAG/H,IAAKnD,GAAMoG,KAAK6O,MAAMjV,IAC9BkL,EAAsB/H,IAAKnD,GAAMoG,KAAK6O,MAAMjV,MAM9C,cAAckL,GAEnB,OAAO9E,KAAK2M,UAAU,IAAI,GACxB9R,EAAQiK,EAAM,IACVA,EAAM,GAAG/H,IAAKnD,GAAMoG,KAAK6O,MAAMjV,IAC9BkL,EAAsB/H,IAAKnD,GAAMoG,KAAK6O,MAAMjV,MAI9C,WAAWD,EAAkBM,EAAiB,IAEnD,OAAO+F,KAAK2M,UAAU,IAAI,GAAQ,CAChC1S,IAAK+F,KAAK6O,MAAM5U,GAChBN,MAAOqG,KAAK6O,MAAMlV,MAIf,cAEL,OAAO,GAAS2R,SAGX,cAAc/O,EAAcC,EAAcuqB,GAE/C,OAAO,IAAI,GAAW,CAAExqB,MAAKC,MAAKuqB,UAG7B,WAAWxqB,EAAcC,GAE9B,OAAO,IAAI,GAAW,CAAED,MAAKC,MAAKuqB,OAAO,IAGpC,aAAavqB,GAElB,OAAO,IAAI,GAAW,CAAED,IAAK,EAAGC,MAAKuqB,OAAO,IAGvC,cAEL,OAAO,IAAI,GAAS,CAAExqB,IAAK,EAAGC,IAAK,IAG9B,cAAcqC,EAAsB,IAEzC,OAAOmB,KAAK2M,UAAU,IAAI,GAAW,CACnC9N,MAAOmB,KAAKw7B,QAAQ38B,MAIjB,gBAAgByD,GAErB,MAAMm5B,EAAYz7B,KAAK6O,MAAMvM,GAE7B,OAAOtC,KAAK2M,UAAU8uB,EAAU33B,aAAe23B,EAAY,IAAI,GAAaA,IAGvE,aAAan6B,EAAkC,IAEpD,OAAOtB,KAAK2M,UAAU,IAAI,GAAUrL,IAG/B,WAAW3H,GAEhB,OAAOqG,KAAK2M,UAAU,IAAI,GAAQ,CAChChT,MAAOqG,KAAK6O,MAAMlV,MAIf,YAAY2H,EAAuB,IAExC,OAAO,IAAI,GAASA,GAKf,gBAAgBwD,GAErB,OAAO9E,KAAK2M,UAAU,IAAI,GACxB9R,EAAQiK,EAAM,IACVA,EAAM,GAAG/H,IAAKnD,GAAMoG,KAAK6O,MAAMjV,IAC9BkL,EAAsB/H,IAAKnD,GAAMoG,KAAK6O,MAAMjV,MAI9C,aAAa8C,GAElB,OAAOA,aAAiB,EACpBA,EACAA,EAAM4O,SAAS2L,cAKd,gBAAgB3U,GAErB,OAAOA,EAAOA,EAAKV,oBAAsB,KAGpC,eAAkBkD,GAEvB,IAAI1E,EAsBJ,OApBK0E,IAGIA,aAAiB,EAExB1E,EAAS0E,EAEDA,EAAcwG,oBAAoB,EAE1ClL,EAAU0E,EAAcwG,SAAS2L,cAE1Bpc,EAAQiK,GAEf1E,EAAS0E,EAAM/H,IAAInD,GAAKoG,KAAKw7B,QAAQ5hC,IAE9B2B,EAASuJ,KAEhB1E,EAASrC,EAAU+G,EAAclL,GAAKoG,KAAKw7B,QAAQ5hC,MAG9CwG,EAGF,cAAckC,GAEnB,OAAuB,IAAhBA,EAAKlG,OAAekG,EAAK,GAAK,IAAI,GAASA,GAG7C,eAAeo5B,GAEpB,OAAOA,aAAqB,GAAWA,EAAUp6B,QAAU,CAACo6B,GAGvD,aAA6Bp5B,EAAY8E,GAE9C,GAAI9E,aAAgB8E,EAElB,OAAO9E,EAGT,GAAIA,aAAgB,IAAgBA,EAAKhB,mBAAmB8F,EAE1D,OAAO9E,EAGT,GAAIA,aAAgB,GACpB,CACE,MAAMq5B,EAAQr5B,EAAKhB,QAAQwN,KAAMlV,GAAMA,aAAawN,GAEpD,GAAIu0B,EAEF,OAAO37B,KAAKmF,SAASw2B,GAGvB,MAAMC,EAAgBt5B,EAAKhB,QAAQwN,KAAMlV,GAAMA,aAAa,IAAgBA,EAAE0H,mBAAmB8F,GAEjG,GAAIw0B,EAEF,OAAOA,EAIX,OAAO57B,KAAKmF,SAASiC,GAKhB,iBAAiBy0B,EAAuBC,EAAuB,MAEpE,GAA6B,IAAzBD,EAAcz/B,OAEhB,OAAO0/B,EAGT,GAAID,EAAc/sB,KAAKlV,GAAKA,aAAa,IAEvC,OAAO,GAAQ0R,SAKjB,OAFeuwB,EAAc9+B,IAAInD,GAAKA,EAAIA,EAAE6S,QAAU,MAExC/N,OAAO,CAAChD,EAAGC,IAAMD,GAAKC,EAAIqE,KAAKsW,MAAM5a,EAAGC,GAAKD,GAAKC,GAG3D,aAAaD,EAASC,GAE3B,GAAID,aAAa,GAEf,OAAOC,EAGT,MAAMwJ,EACJzJ,aAAa,IACbC,aAAa,GAETogC,EAAKrgC,EAAEqI,cACPi4B,EAAKrgC,EAAEoI,cAEb,GAAItI,EAAYsgC,EAAIC,GAIlB,OAFAD,EAAGzlB,MAAM0lB,GAEF72B,EAAWnF,KAAKmF,SAAS42B,GAAMA,EAGxC,GAAIA,aAAc,IAAYC,aAAc,GAC5C,CACE,MAAMC,EAASj8B,KAAKk8B,QAAQH,GACtBI,EAASn8B,KAAKk8B,QAAQF,GACtBI,EAAKH,EAAO7/B,OAElB,IAAK,MAAMigC,KAASF,EACpB,CACE,IAAIG,GAAU,EACd,MAAMC,EAAYF,aAAiB,GAC7BG,EAAkBD,EAAYF,EAAM/6B,QAAU+6B,EAEpD,IAAK,IAAI3jC,EAAI,EAAGA,EAAI0jC,EAAI1jC,IACxB,CACE,MAAM+jC,EAAQR,EAAOvjC,GACfgkC,EAAYD,aAAiB,GAC7BE,EAAkBD,EAAYD,EAAMn7B,QAAUm7B,EAEhDhhC,EAAYkhC,EAAWH,KAEzBF,GAAU,EACVK,EAAUrmB,MAAMkmB,GAEZD,IAAcG,IAEhBT,EAAOvjC,GAAKsH,KAAKmF,SAASw3B,KAK3BL,GAEHL,EAAOx9B,KAAK49B,GAIhB,OAAOl3B,EACHnF,KAAKmF,SAASnF,KAAKtB,OAAOu9B,IAC1Bj8B,KAAKtB,OAAOu9B,GAGlB,OAAOj8B,KAAKg1B,KAAKt5B,EAAGC,IArUR,GAAA8Y,MAAQ,GAAM5L,QAEd,GAAAuL,OAAS,GAAMvL,QAEf,GAAAwL,KAAO,GAAMnD,OAEb,GAAAqV,eAAyB,EC7BlC,MAAMqW,GAOX,YAAYjjC,GAEVqG,KAAKrG,MAAQA,EACbqG,KAAKmX,KAAOnX,KAAK68B,KAAO78B,KAKnB,UAEL,OAAOA,KAAKmX,OAASnX,KAGhB,QAELA,KAAKmX,KAAOnX,KAAK68B,KAAO78B,KAGnB,QAAQrG,GAEb,MAAMuI,EAAO,IAAI06B,GAAWjjC,GAG5B,OAFAuI,EAAK46B,UAAU98B,KAAK68B,MAEb36B,EAGF,SAASvI,GAEd,MAAMuI,EAAO,IAAI06B,GAAWjjC,GAG5B,OAFAuI,EAAK46B,UAAU98B,MAERkC,EAGF,KAAKrC,GAEV,MAAM2C,EAAOxC,KACb,IAAI+8B,EAAO/8B,KAAKmX,KACZtB,EAAQ,EAEZ,KAAOknB,IAASv6B,GAChB,CACE,MAAM2U,EAAO4lB,EAAK5lB,KAClBtX,EAASk9B,EAAKpjC,MAAOkc,EAAOknB,GAC5BA,EAAO5lB,EACPtB,IAGF,OAAOA,EAKF,YAEL,OAAO7V,KAAKmX,OAASnX,KAGhB,SAEAA,KAAKg9B,cAERh9B,KAAKmX,KAAK0lB,KAAO78B,KAAK68B,KACtB78B,KAAK68B,KAAK1lB,KAAOnX,KAAKmX,KACtBnX,KAAKmX,KAAOnX,KAAK68B,KAAO78B,MAIrB,UAAUkC,GAEflC,KAAKzC,SACLyC,KAAKmX,KAAOjV,EAAKiV,KACjBnX,KAAK68B,KAAO36B,EACZA,EAAKiV,KAAK0lB,KAAO78B,KACjBkC,EAAKiV,KAAOnX,M,OCXJi9B,GAOAC,GC/BAC,GAUAC,G,gPC5BL,MAAM,GAAb,cAGE,YAAkChkC,OAAOY,OAAO,OAEzC,QAA2FqjC,KAAaC,GAE7G,MAAMC,EAAYv9B,KAAKw9B,aAAaH,GAAO,GACrCI,EAAe,GAOrB,OALIF,GAEFA,EAAUrZ,KAAMwZ,GAAaD,EAAQh/B,KAAKi/B,EAASL,KAAUC,KAGxDG,EAGF,aAAgCJ,GAErC,OAAoC,OAA7Br9B,KAAKw9B,aAAaH,GAKpB,aAAgCA,EAAUrjC,GAAkB,GAEjE,IAAIujC,EAAyD,GAAAv9B,KAAA,IAAgBq9B,GAO7E,OALKE,GAAavjC,IAEhBujC,EAAY,GAAAv9B,KAAA,IAAgBq9B,GAAS,IAAIT,GAAgC,SAAMt+B,IAG1Ei/B,GAAa,KAGf,GAAsBF,EAAgB75B,GAE3C,MACMm6B,GADS9iC,EAAQwiC,GAASA,EAAQ,CAACA,IACpBtgC,IAAKgQ,GAAM/M,KAAKw9B,aAAazwB,GAAG,GAAMgW,QAAQvf,IAEnE,MAAO,IAAMm6B,EAAMn5B,QAASrK,GAAMA,EAAEoD,UAG/B,KAAwB8/B,EAAgB75B,GAE7C,MAAMo6B,EAAM59B,KAAK69B,GAAGR,EAAO,CAAC/6B,KAASg7B,KACnCM,IAEOp6B,EAAQlB,KAASg7B,KAG1B,OAAOM,EAGF,IAA6BP,EAAiB75B,GAEnD,GAAI65B,EAEF,GAAIviC,MAAMD,QAAQwiC,GAEhBA,EAAM74B,QAASuI,GAAM/M,KAAK49B,IAAI7wB,EAAGvJ,QAGnC,CACE,MAAM+5B,EAAY,GAAAv9B,KAAA,IAAgBq9B,GAE9BE,IAEE/5B,EAEF+5B,EAAUrZ,KAAK,CAAC1iB,EAAOqH,EAAO3G,KACxBV,IAAUgC,GACZtB,EAAK3E,WAMTggC,EAAU3nB,cAOhB,GAAA5V,KAAI,GAAc5G,OAAOY,OAAO,OAGlC,OAAOgG,M,eC3EJ,MAAM,WAAa,GAwBxB,YAAmBsB,EAAsBw8B,GAEvCzxB,QAEArM,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAK+9B,YAAcz8B,EAAQy8B,YAC3B/9B,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKkF,OAAS44B,EAAKG,YAAY38B,EAAQ4D,OAAQ,GAAY,GAAM9K,UACjE4F,KAAKoM,WAAa0xB,EAAKvxB,cAAcjL,EAAQ8K,YAC7CpM,KAAKk+B,SAAWl+B,KAAKkF,OAAO2F,SAASvJ,EAAQ48B,UAC7Cl+B,KAAKge,MAAQ1c,EAAQ0c,MAAMjhB,IAAKnD,GAAO,OAAD,wBAAMA,GAAC,CAAEiiB,KAAM7b,KAAKkF,OAAO2F,SAASjR,EAAEiiB,SA/BvE,cAAciiB,EAAmBI,EAAiC,IACvE,OAAO,IAAI,GAAK,OAAD,QACbjlC,KAAM,GACN8kC,YAAa,GACbC,KAAM,KACN94B,OAAQ,GAAM9K,SACdgS,WAAY,GAAM8N,OAClBgkB,SAAU,GACVlgB,MAAO,IACJkgB,GACFJ,GAwBE,KAAKx8B,EAAsBw8B,GAE5B99B,KAAKm+B,WAAW78B,KAElBtB,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAK+9B,YAAcz8B,EAAQy8B,YAC3B/9B,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKkF,OAAS5D,aAAmB,GAC7BA,EAAQ4D,OACR44B,EAAKG,YAAY38B,EAAQ4D,OAAQ,GAAY,GAAM9K,UACvD4F,KAAKoM,WAAa9K,aAAmB,GACjCA,EAAQ8K,WACR0xB,EAAKvxB,cAAcjL,EAAQ8K,YAC/BpM,KAAKk+B,SAAW58B,aAAmB,GAC/BA,EAAQ48B,SACRl+B,KAAKkF,OAAO2F,SAASvJ,EAAQ48B,UAEjChhC,EACE8C,KAAKge,MACL1c,aAAmB,GACfA,EAAQ0c,MACR1c,EAAQ0c,MAAMjhB,IAAKnD,GAAO,OAAD,wBAAMA,GAAC,CAAEiiB,KAAM7b,KAAKkF,OAAO2F,SAASjR,EAAEiiB,SACnE,CAACngB,EAAGC,IAAMD,EAAEzC,OAAS0C,EAAE1C,MAAQgS,EAAUtB,OAAOjO,EAAEmgB,KAAMlgB,EAAEkgB,MAC1D,CAAC1e,EAAQxD,IAAUqG,KAAKo+B,QAAQzkC,GAAO,GACvC,CAACwD,EAAQ0L,IAAU7I,KAAKq+B,WAAWx1B,GAAO,GAC1C,CAAC1L,EAAQ0L,EAAOlP,EAAOqI,IAAahC,KAAKs+B,WAAW3kC,EAAOqI,GAAU,IAGvEhC,KAAKu+B,QAAQ,OAAQv+B,KAAMsB,EAASw8B,GACpC99B,KAAKw+B,WAIF,WAAWl9B,GAEhB,OAAQ2J,EAAUtB,OAAOrI,aAAmB,GAAOA,EAAQwK,SAAWxK,EAAStB,KAAK8L,UAG/E,UAEL9L,KAAKu+B,QAAQ,UAAWv+B,MAGnB,SAEL,MAAM,KAAE/G,EAAI,YAAE8kC,EAAW,KAAEC,EAAI,OAAE94B,EAAM,WAAEkH,EAAU,SAAE8xB,EAAQ,MAAElgB,GAAUhe,KAEzE,MAAO,CACL/G,OACA8kC,cACAC,OACA94B,OAAQA,EAAO4G,SACfM,WAAYA,EAAWN,SACvBoyB,SAAUh5B,EAAOyF,OAAOuzB,GACxBlgB,MAAOA,EAAMjhB,IAAKnD,GAAO,OAAD,wBAAMA,GAAC,CAAEiiB,KAAM3W,EAAOyF,OAAO/Q,EAAEiiB,UAIpD,gBAAgB5iB,EAAcwlC,GAEnC,MAAMC,EAAY1+B,KAAKkF,OAAO5D,QAAQzC,MAAM5F,GAiB5C,OAfIylC,IAEF1+B,KAAKkF,OAAO5D,QAAQzC,MAAM4/B,GAAWC,SAC9B1+B,KAAKkF,OAAO5D,QAAQzC,MAAM5F,GAE7BA,KAAQ+G,KAAKk+B,WAEfl+B,KAAKk+B,SAASO,GAAWz+B,KAAKk+B,SAASjlC,UAChC+G,KAAKk+B,SAASjlC,IAGvB+G,KAAKu+B,QAAQ,kBAAmBv+B,KAAMy+B,EAASxlC,GAC/C+G,KAAKw+B,aAGEE,EAGJ,gBAAgBzlC,GAErB,MAAM0lC,EAAS1lC,KAAQ+G,KAAKkF,OAAO5D,QAAQzC,MAAM5F,GAWjD,OATI0lC,WAEK3+B,KAAKkF,OAAO5D,QAAQzC,MAAM5F,UAC1B+G,KAAKk+B,SAASjlC,GAErB+G,KAAKu+B,QAAQ,kBAAmBv+B,KAAM/G,GACtC+G,KAAKw+B,WAGAG,EAGF,QAAQ96B,EAAgB+6B,GAAuB,GAEpD5+B,KAAKge,MAAMvf,KAAKoF,GAEhB7D,KAAKu+B,QAAQ,UAAWv+B,KAAM6D,GAEzB+6B,GAEH5+B,KAAKw+B,UAIF,WAAW36B,EAAyBg7B,EAAmBD,GAAuB,GAEnF,MAAMzhC,EAASzC,EAASmJ,GACpB7D,KAAKge,MAAMna,GACXA,EACE86B,IAAWxhC,EAcjB,OAZIwhC,IAEFvlC,OAAO0lC,OAAO3hC,EAAQ0hC,GAEtB7+B,KAAKu+B,QAAQ,aAAcv+B,KAAM7C,GAE5ByhC,GAEH5+B,KAAKw+B,WAIFG,EAGF,WAAW96B,EAAyB+6B,GAAuB,GAEhE,MAAM/1B,EAAQnO,EAASmJ,GACnBA,EACA7D,KAAKge,MAAMzM,QAAQ1N,GACjB86B,EAAS91B,GAAS,GAAKA,EAAQ7I,KAAKge,MAAM5hB,OAEhD,GAAIuiC,EACJ,CACE,MAAMI,EAAU/+B,KAAKge,MAAMnV,GAE3B7I,KAAKu+B,QAAQ,aAAcv+B,KAAM++B,GAE5BH,GAEH5+B,KAAKw+B,UAIT,OAAOG,EAGF,cAAcb,EAA0BkB,EAAuB,IAEpE,MAAM77B,EAAU,GAAM/I,OAAO,OAAD,wBACvB4F,KAAKkF,OAAO5D,QAAQzC,OACpBmgC,IAGL,OAAOh/B,KAAKoM,WAAWzI,QAAQm6B,EAAM36B,GAGhC,gBAEL,OAAOhH,EAAQ6D,KAAKk+B,UAChBl+B,KAAKkF,OACL,GAAM9K,OAAO2D,EAAUiC,KAAKkF,OAAO5D,QAAQzC,MAAO,CAAC0D,EAAGzD,IAASkB,KAAKi/B,aAAangC,KAGhF,aAAaqd,GAElB,MAAM5B,EAAWva,KAAKkF,OAAO5D,QAAQzC,MAAMsd,GAE3C,OAAO5B,EAASzW,cAAgBqY,KAASnc,KAAKk+B,UAAY3jB,EAAS7S,QAAQ1H,KAAKk+B,SAAS/hB,IACrF5B,EAASxW,cACTwW,EAGC,aAAasB,EAAWqjB,GAAqB,GAElD,MAAM/hC,EAAS+hC,EAAY,OAAD,UAAMrjB,GAASA,EAEzC,IAAK,MAAM/c,KAAQkB,KAAKk+B,SACxB,CACmBl+B,KAAKkF,OAAO5D,QAAQzC,MAAMC,GAE7BiF,cAAc2D,QAAQvK,EAAO2B,MAEzC3B,EAAO2B,GAAQmM,EAAUf,KAAKlK,KAAKk+B,SAASp/B,KAIhD,OAAO3B,EAGF,SAASqB,EAAuB2gC,GAErC,MAAMC,EAAMD,EAAQE,WAAW7gC,GAE/BwB,KAAKge,MAAMxZ,QAASX,IAElBA,EAAKgY,KAAOujB,EAAI,CAAEzlC,MAAOkK,EAAKgY,SAGhC7b,KAAKw+B,YHtNT,SAAYvB,GAEV,yBACA,yBACA,mBAJF,CAAYA,QAAa,KAOzB,SAAYC,GAEV,qBACA,uCACA,mBAJF,CAAYA,QAAiB,KAyBtB,MAAM,WAAe,GA6C1B,YAAmB57B,EAAwBw8B,GAEzCzxB,QAEArM,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAK+9B,YAAcz8B,EAAQy8B,YAC3B/9B,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKsC,KAAOw7B,EAAKG,YAAY38B,EAAQgB,KAAM,GAAY,GAAMlI,UAC7D4F,KAAKs/B,UAAYh+B,EAAQg+B,WAAah+B,EAAQg+B,UAAUljC,OACpDkF,EAAQg+B,UAAUviC,IAAKrE,GAAMsH,KAAKsC,KAAKuI,SAASnS,IAChD,GACJsH,KAAKu/B,QAAUv/B,KAAKw/B,cAAc1B,EAAMx8B,EAAQi+B,SAChDv/B,KAAKy/B,YAAcz/B,KAAK0/B,kBAAkB5B,EAAMx8B,EAAQm+B,aACxDz/B,KAAK2/B,QAAU3/B,KAAK4/B,cAAct+B,EAAQq+B,SAC1C3/B,KAAK6/B,YAAcnlC,EAAS4G,EAAQu+B,aAC9Bv+B,EAAQu+B,YACR3C,GAAkB4C,eACxB9/B,KAAK/F,IAAMqH,EAAQrH,IACf6jC,EAAKvxB,cAAcjL,EAAQrH,KAC3B+F,KAAK+/B,0BACT//B,KAAKggC,QAAUhgC,KAAK/F,IAAI0J,QAAQm6B,EAAM99B,KAAKigC,iBAC3CjgC,KAAKuX,SAAWjW,EAAQiW,SACpBumB,EAAKvxB,cAAcjL,EAAQiW,UAC3B,GAAM2C,OAjEL,cAAc4jB,EAAmBI,EAAmC,IACzE,OAAO,IAAI,GAAO,OAAD,QACfjlC,KAAM,GACN8kC,YAAa,GACbC,KAAM,KACN17B,KAAM,GAAMlI,SACZklC,UAAW,GACXC,QAASnmC,OAAOY,OAAO,OACpBkkC,GACFJ,GAGE,cAEL,MAAO,uCAAuC/9B,QAAQ,QAAUhH,IAC9D,MAAMS,EAAoB,GAAhBwC,KAAKse,SAAgB,EAG/B,OAFgB,MAANvhB,EAAYS,EAAS,EAAJA,EAAU,GAE5By/B,SAAS,MAkDf,KAAK33B,EAAwBw8B,GAE9B99B,KAAKm+B,WAAW78B,KAElBtB,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAK+9B,YAAcz8B,EAAQy8B,YAC3B/9B,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKsC,KAAOw7B,EAAKG,YAAY38B,EAAQgB,KAAM,GAAY,GAAMlI,UAE7D4F,KAAKs/B,UAAYh+B,aAAmB,GAChCA,EAAQg+B,UACRh+B,EAAQg+B,WAAah+B,EAAQg+B,UAAUljC,OACrCkF,EAAQg+B,UAAUviC,IAAKrE,GAAMsH,KAAKsC,KAAKuI,SAASnS,IAChD,GAENoF,EACEkC,KAAKu/B,QACLv/B,KAAKw/B,cAAc1B,EAAMx8B,EAAQi+B,SACjC,CAACpiC,EAAQ2B,EAAMohC,IAAWlgC,KAAKmgC,UAAUD,GAAQ,GACjD,CAAC/iC,EAAQ2B,IAASkB,KAAKogC,aAAathC,GAAM,GAC1C,CAAC3B,EAAQ2B,EAAMsL,EAAUi2B,IAAYj2B,EAASk2B,KAAKD,EAASvC,IAG9DhgC,EACEkC,KAAKy/B,YACLz/B,KAAK0/B,kBAAkB5B,EAAMx8B,EAAQm+B,aACrC,CAACtiC,EAAQ2B,EAAMyhC,IAAevgC,KAAKwgC,cAAc1C,EAAMh/B,EAAMyhC,GAAY,GACzE,CAACpjC,EAAQ2B,IAASkB,KAAKygC,iBAAiB3hC,GAAM,GAC9C,CAAC3B,EAAQ2B,EAAMsL,EAAUi2B,IAAYrgC,KAAKwgC,cAAc1C,EAAMh/B,EAAMuhC,GAAS,IAG/EviC,EACEkC,KAAK2/B,QACL3/B,KAAK4/B,cAAct+B,EAAQq+B,SAC3B,CAACxiC,EAAQlE,EAAM4P,IAAU7I,KAAK0gC,SAASznC,EAAM4P,GAAO,GACpD,CAAC1L,EAAQlE,IAAS+G,KAAK2gC,YAAY1nC,GAAM,GACzC,CAACkE,EAAQlE,EAAMmR,EAAUi2B,IAAYrgC,KAAK0gC,SAASznC,EAAMonC,GAAS,IAGpErgC,KAAK6/B,YAAcnlC,EAAS4G,EAAQu+B,aAC9Bv+B,EAAQu+B,YACR3C,GAAkB4C,eACxB9/B,KAAK/F,IAAMqH,EAAQrH,IACf6jC,EAAKvxB,cAAcjL,EAAQrH,KAC3B+F,KAAK+/B,0BACT//B,KAAKggC,QAAUhgC,KAAK/F,IAAI0J,QAAQm6B,EAAM99B,KAAKigC,iBAC3CjgC,KAAKuX,SAAWjW,EAAQiW,SACpBumB,EAAKvxB,cAAcjL,EAAQiW,UAC3B,GAAM2C,OAEVla,KAAKu+B,QAAQ,OAAQv+B,KAAMsB,EAASw8B,GACpC99B,KAAKu+B,QAAQ,SAAUv+B,OAIpB,WAAWsB,GAEhB,OAAQ2J,EAAUtB,OAAOrI,aAAmB,GAASA,EAAQwK,SAAWxK,EAAStB,KAAK8L,UAGjF,UAEL9L,KAAKu+B,QAAQ,SAAUv+B,MAGjB,cAAc89B,EAAmByB,GAEvC,OAAOA,EACHxhC,EAAUwhC,EAAUW,GAAWlgC,KAAK4gC,aAAa9C,EAAMoC,IACvD,GAGE,aAAapC,EAAmBoC,GAEtC,OAAOA,aAAkB,GACrBA,EACA,GAAKlmC,OAAO8jC,EAAMoC,GAGhB,kBAAkBpC,EAAmB2B,GAE3C,OAAOA,EACH1hC,EAAU0hC,EAAc7lC,GAAMoG,KAAK6gC,iBAAiB/C,EAAMlkC,IAC1D,GAGE,iBAAiBkkC,EAAmBx8B,GAE1C,OAAOA,EAAQwK,kBAAkB,EAC7BxK,EACA,CACEwK,OAAQgyB,EAAKvxB,cAAcjL,EAAQwK,QACnCg1B,OAAQhD,EAAKvxB,cAAcjL,EAAQw/B,QACnCC,YAAajD,EAAKn6B,QAAQrC,EAAQy/B,cAIlC,cAAcpB,GAEpB,OAAOA,EACH5hC,EAAU4hC,EAAS,EAAGjc,SAAQsd,UAASniC,SAAS5F,KAAS,CACvDA,OACA4F,QACA6kB,SACAsd,aAEF,GAGC,SAEL,MAAM,KAAE/nC,EAAI,YAAE8kC,EAAW,KAAEC,EAAI,KAAE17B,EAAI,UAAEg9B,EAAS,QAAEC,EAAO,IAAEtlC,EAAG,SAAEsd,EAAQ,YAAEkoB,EAAW,QAAEE,GAAY3/B,KAEnG,MAAO,CACL/G,OACA8kC,cACAC,OACA17B,KAAMA,EAAKwJ,SACXwzB,UAAWA,EAAUviC,IAAKrE,GAAM4J,EAAKqI,OAAOjS,IAC5C6mC,QAASxhC,EAAUwhC,EAAUzmC,GAAMA,EAAEgT,UACrC7R,IAAKA,EAAI6R,SACTyL,SAAUA,EAASzL,SACnB2zB,YAAa1hC,EAAU0hC,EAAa,EAAG3zB,SAAQg1B,SAAQC,kBAAkB,CACvEj1B,OAAQA,EAAOA,SACfg1B,OAAQA,EAAOh1B,SACfi1B,YAAaA,EAAYj1B,YAE3B6zB,QAAS5hC,EAAU4hC,EAAS,EAAG9gC,QAAO6kB,SAAQsd,cAAc,CAC1DniC,QACA6kB,SACAsd,cAKC,SAASlD,GAEd,KAAI99B,KAAK6/B,cAAgB3C,GAAkB+D,OAEpCjhC,KAAKggC,SAAYlC,EAAKoD,gBAAgBl9B,YAAYhE,KAAKggC,UAE1D,OAAO,EAIX,MAAMmB,EAAenhC,KAAKuX,SAAS5T,QAAQm6B,EAAM99B,KAAKohC,sBAEtD,SAAKD,IAAiBrD,EAAKuD,qBAAqBr9B,YAAYm9B,IAQvD,cAAcrD,GAEnB,MAAMkC,EAAUhgC,KAAK/F,IAAI0J,QAAQm6B,EAAM99B,KAAKigC,iBAExCD,IAEFhgC,KAAKggC,QAAUA,GAIZ,WAAWlhC,EAAcwiC,GAE9B,IAAI9C,GAAU,EACd,MAAM+B,EAAavgC,KAAKy/B,YAAY3gC,GAEhCyhC,WAEKvgC,KAAKy/B,YAAY3gC,GAExBkB,KAAKy/B,YAAY6B,GAAWf,EAE5B/B,GAAU,GAGZpgC,EAAW4B,KAAK2/B,QAAU92B,IAExB,MAAMnQ,EAAImQ,EAAMhK,MAAM0S,QAAQzS,IAEnB,IAAPpG,IAEFmQ,EAAMhK,MAAMnG,GAAK4oC,EAEjBthC,KAAKuhC,YAAY14B,EAAM5P,MAAM,GAC7BulC,GAAU,KAIdx+B,KAAKu+B,QAAQ,aAAcv+B,KAAMshC,EAASxiC,GAEtC0/B,GAEFx+B,KAAKw+B,UAIF,WAAW1/B,GAEhB,IAAI0/B,GAAU,EAEV1/B,KAAQkB,KAAKy/B,cAEfz/B,KAAKygC,iBAAiB3hC,GAAM,GAE5B0/B,GAAU,GAGZpgC,EAAW4B,KAAK2/B,QAAS,CAAC92B,EAAO24B,KAE/B,MAAM9oC,EAAImQ,EAAMhK,MAAM0S,QAAQzS,IAEnB,IAAPpG,IAEFmQ,EAAMhK,MAAMmO,OAAOtU,EAAG,GACtB8lC,GAAU,EAEiB,IAAvB31B,EAAMhK,MAAMzC,OAEd4D,KAAK2gC,YAAYa,GAAW,GAI5BxhC,KAAKuhC,YAAYC,GAAW,MAKlCxhC,KAAKu+B,QAAQ,aAAcv+B,KAAMlB,GAE7B0/B,GAEFx+B,KAAKw+B,UAIF,iBAEL,MAAMwC,EAAUhhC,KAAKyhC,aACf5iC,EAA+BmiC,EAAQniC,MAAM9B,IAAI,CAAC+B,EAAMpG,IAAM,CAClEoG,EACAkiC,EAAQl8B,OAASk8B,EAAQl8B,MAAMpM,GAC3BsoC,EAAQl8B,MAAMpM,GACdsH,KAAKsC,KAAKhB,QAAQzC,MAAMC,KAG9B,MAAO,CACLwD,KAAM26B,GAAcyE,QACpB7iC,SAIG,OAAOsb,EAAcpM,GAE1B,MAAM,KAAEzL,EAAI,IAAErI,GAAQ+F,KAEtB,OAAOma,EAAIA,IAAIlgB,EAAK,CAAE8T,WAAUzL,SAG3B,OAAOyL,GAEZ,GAAI/N,KAAK6/B,cAAgB3C,GAAkB+D,MAEzC,OAGF,MAAMniC,EAAOkB,KAAK2hC,uBAElB,IAAI5zB,EAASjP,GAKb,OAAQkB,KAAK6/B,aAEX,KAAK3C,GAAkB4C,eACrB/xB,EAASjP,GAAQkB,KAAKs/B,UAAU5gC,OAAO,CAAChD,EAAGC,IAAMK,KAAKQ,IAAId,EAAGC,EAAEmD,IAAQ,GAAK,EAC5E,MACF,KAAKo+B,GAAkB0E,KACrB7zB,EAASjP,GAAQ,GAAOgS,QAKvB,YAAYqJ,EAAcpM,GAE/B,MAAM,KAAEzL,EAAI,SAAEiV,GAAavX,KAE3B,OAAOma,EAAIA,IAAI5C,EAAU,CAAExJ,WAAUzL,SAGhC,0BAEL,OAAOtC,KAAKsC,KAAKhB,QAAQzC,MAGpB,mBAAmBgjC,GAExB,OAAOA,EACL,GAAMC,YAAY,CAACD,IACnB7hC,KAAK+hC,kBAGF,0BAEL,OAAOhkC,EAAUiC,KAAKsC,KAAKhB,QAAQzC,MACjC,CAACyD,EAAMxD,IAASA,KAAQkB,KAAKy/B,YACzBz/B,KAAKy/B,YAAY3gC,GAAMiiC,YACvBz+B,GAID,iBAEL,OAAO,GAAMlI,OAAO4F,KAAKgiC,2BAGpB,iBAEL,OAAOhiC,KAAKsC,KAGP,gBAEL,OAAOlJ,OAAOsc,KAAK1V,KAAKiiC,2BAGnB,kBAEL,OAAO,GAAMH,YAAY9hC,KAAKkiC,iBAGzB,mBAEL,OAAOliC,KAAKggC,QAGP,gBAEL,OAAO,GAAM5lC,OAAO,CAClB2T,SAAU/N,KAAKsC,KACfA,KAAM,GAAMi5B,SAIT,qBAEL,OAAO,GAAMnhC,OAAO,CAClB2T,SAAU/N,KAAKsC,KACfA,KAAM,GAAMi5B,SAIT,WAAWphB,EAAcpM,GAE9B,MAAM4F,EAAe,GAErB,IAAK,MAAM7U,KAAQkB,KAAKiiC,0BAEtBtuB,EAAQ7U,GAAQkB,KAAKmiC,gBAAgBhoB,EAAKpM,EAAUjP,GAGtD,OAAO6U,EAGF,gBAAgBwG,EAAcpM,EAAe1T,GAElD,MAAM,KAAEpB,EAAI,YAAEwmC,GAAgBz/B,KACxBoiC,EAAU/nC,KAAYolC,EACxBA,EAAYplC,GAAUyR,OACtB,KACEnS,EAAQoU,EAAS1T,GAEvB,OAAO+nC,EACHjoB,EAAIA,IAAIioB,EAAS,CAAEnpC,OAAM8U,WAAU1T,WAAUV,UAC7CA,EAGC,iBAAiBkoC,GAEtB,MAAM5oC,EAAO,GAAM6oC,YAAY,CAAC9hC,KAAK/G,OAC/B8U,EAAW/N,KAAKqiC,iBAChBhoC,EAAW2F,KAAKsiC,mBAAmBT,GACnCloC,EAAQqG,KAAKuiC,kBAAkBV,GAErC,OAAO,GAAMznC,OAAO,CAAEnB,OAAM8U,WAAU1T,WAAUV,UAG3C,kBAAkBkoC,EAAsBW,EAAoB,GAAMC,OAEvE,OAAOZ,GAAeA,KAAe7hC,KAAKy/B,YACtCz/B,KAAKy/B,YAAYoC,GAAad,YAC9ByB,EAGC,WAAWroB,EAAcxG,GAE9B,MAAM5F,EAAgB,GAEtB,IAAK,MAAMjP,KAAQkB,KAAKiiC,0BAEtBl0B,EAASjP,GAAQkB,KAAK0iC,gBAAgBvoB,EAAKxG,EAAS7U,GAGtD,OAAOiP,EAGF,gBAAgBoM,EAAcpM,EAAe1T,GAElD,MAAM,KAAEpB,EAAI,YAAEwmC,GAAgBz/B,KACxB2iC,EAAUtoC,KAAYolC,EACxBA,EAAYplC,GAAUymC,OACtB,KACEnnC,EAAQoU,EAAS1T,GAEvB,OAAOsoC,EACHxoB,EAAIA,IAAIwoB,EAAS,CAAE1pC,OAAM8U,WAAU1T,WAAUV,UAC7CA,EAGC,iBAAiBkoC,EAAsBe,GAE5C,MAAM3pC,EAAO,GAAM6oC,YAAY,CAAC9hC,KAAK/G,OAC/B8U,EAAW/N,KAAK6iC,iBAChBxoC,EAAW2F,KAAKsiC,mBAAmBT,GACnCloC,EAAQqG,KAAK8iC,kBAAkBjB,EAAae,GAElD,OAAO,GAAMxoC,OAAO,CAAEnB,OAAM8U,WAAU1T,WAAUV,UAG3C,kBAAkBkoC,GAEvB,OAAOA,GACH7hC,KAAKsC,KAAKhB,QAAQzC,MAAMgjC,IACxB,GAAMY,MAGL,uBAEL,OAAO,GAAMt7B,IAAInH,KAAK+hC,mBAGjB,uBAEL,MAAM33B,EAAWpK,KAAKsC,KAAKhB,QAAQzC,MAEnC,MAAS,OAAQuL,EAEX,QAASA,EAET,OADA,MAFF,KAMC,wBAAwB24B,EAAoB,IAAK9pC,EAAe,WAErE,MAAM+nC,EAAUhhC,KAAKyhC,WAAWxoC,GAEhC,OAAO+nC,EAAQniC,MAAMzC,OAAS,EAC1B,GAAMsJ,GAAGmd,GAAQoB,KAAM,CACrB7iB,KAAM4/B,EAAQniC,MAAM9B,IAAK+B,GACvB,GAAMvF,IAAI,WAAYuF,IAExBkkC,UAAW,GAAMlc,MAAMic,GACvB9gB,OAAQ,GAAMvc,GAAG2H,GAAO9E,OAAQ,CAC9B5O,MAAO,GAAMJ,IAAI,YAGrB,GAAMA,IAAI,WAAYynC,EAAQniC,MAAM,IAGnC,WAAW5F,EAAe,UAAWgqC,GAAyB,GAEnE,MAAM50B,EAAUpV,KAAQ+G,KAAK2/B,QACzB3/B,KAAK2/B,QAAQ1mC,GACbiF,EAAa8B,KAAK2/B,QAChB,CAAC92B,EAAO24B,EAAWpiC,IAAUA,IAAgByJ,EAAMm4B,QAAUn4B,EAAQzJ,GACvE,MAEJ,GAAIiP,EAEF,OAAOA,EAGT,GAAI40B,EACJ,CAIE,MAAO,CACLhqC,OACA4F,MAAO,CALEmB,KAAK2hC,wBAMd78B,MAAO,CALI,GAAOo+B,cAAcljC,KAAK6/B,cAMrCnc,QAAQ,EACRsd,SAAS,GAIb,OAAO,KAGF,mBAEL,OAAO9iC,EAAa8B,KAAK2/B,QAAS,CAAC92B,EAAO24B,EAAW9d,KAC/C7a,EAAM6a,QACRA,EAAOjlB,KAAKoK,GAGP6a,GACN,IAGE,WAAW7kB,GAUhB,OARAmB,KAAK0gC,SAAS,UAAW,CACvB7hC,MAAOhE,EAAQgE,GAASA,EAAQ,CAACA,GACjC6kB,QAAQ,EACRsd,SAAS,IAGXhhC,KAAK6/B,YAAc3C,GAAkB+D,MAE9BjhC,KAGF,SAAS/G,EAAcqI,EAA6Bs9B,GAAuB,GAEhF,MAAMuE,EAAWnjC,KAAK2/B,QAAQ1mC,GACxB4P,EAAK,+BAAqBvH,GAAO,CAAErI,SAkBzC,OAhBA+G,KAAK2/B,QAAQ1mC,GAAQ4P,EAEjBs6B,EAEFnjC,KAAKu+B,QAAQ,cAAev+B,KAAM6I,EAAOs6B,GAIzCnjC,KAAKu+B,QAAQ,WAAYv+B,KAAM6I,GAG5B+1B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,YAAY/G,EAAc2lC,GAAuB,GAEtD,MAAM/1B,EAAQ7I,KAAK2/B,QAAQ1mC,GAS3B,OAPA+G,KAAKu+B,QAAQ,cAAev+B,KAAM6I,EAAOA,GAEpC+1B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,YAAY/G,EAAc2lC,GAAuB,GAEtD,MAAM/1B,EAAQ7I,KAAK2/B,QAAQ1mC,GAW3B,cATO+G,KAAK2/B,QAAQ1mC,GAEpB+G,KAAKu+B,QAAQ,cAAev+B,KAAM6I,GAE7B+1B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,YAAY/G,EAAcwlC,GAE/B,MAAM51B,EAAQ7I,KAAK2/B,QAAQ1mC,GAE3B,GAAI4P,GAAS5P,IAASwlC,EACtB,CACE,MAAM0E,EAAW,OAAH,wBAAQt6B,GAAK,CAAEhK,MAAOgK,EAAMhK,MAAMwC,UAEhDwH,EAAM5P,KAAOwlC,SAENz+B,KAAK2/B,QAAQ1mC,GAEpB+G,KAAK2/B,QAAQlB,GAAW51B,EAExB7I,KAAKu+B,QAAQ,cAAev+B,KAAM6I,EAAOs6B,GACzCnjC,KAAKw+B,UAGP,OAAOx+B,KAGF,cAAc89B,EAAmBh/B,EAAcwC,EAAqDs9B,GAAuB,GAEhI,MAAMuE,EAAWnjC,KAAKy/B,YAAY3gC,GAC5ByhC,EAAsCvgC,KAAK6gC,iBAAiB/C,EAAMx8B,GAkBxE,OAhBAtB,KAAKy/B,YAAY3gC,GAAQyhC,EAErB4C,EAEFnjC,KAAKu+B,QAAQ,mBAAoBv+B,KAAM/G,KAAMsnC,EAAY4C,GAIzDnjC,KAAKu+B,QAAQ,gBAAiBv+B,KAAM/G,KAAMsnC,GAGvC3B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,iBAAiB/G,EAAc2lC,GAAuB,GAE3D,MAAM2B,EAAavgC,KAAKy/B,YAAYxmC,GAcpC,OAZIsnC,WAEKvgC,KAAKy/B,YAAYxmC,GAExB+G,KAAKu+B,QAAQ,mBAAoBv+B,KAAM/G,EAAMsnC,GAExC3B,GAEH5+B,KAAKw+B,WAIFx+B,KAGF,iBAAiB/G,EAAc2lC,GAAuB,GAE3D,MAAM2B,EAAavgC,KAAKy/B,YAAYxmC,GAYpC,OAVIsnC,IAEFvgC,KAAKu+B,QAAQ,mBAAoBv+B,KAAM/G,EAAMsnC,EAAYA,GAEpD3B,GAEH5+B,KAAKw+B,WAIFx+B,KAGF,UAAUkgC,EAActB,GAAuB,GAEpD,MAAMx0B,EAAWpK,KAAKu/B,QAAQW,EAAOjnC,MAkBrC,OAhBA+G,KAAKu/B,QAAQW,EAAOjnC,MAAQinC,EAExB91B,EAEFpK,KAAKu+B,QAAQ,eAAgBv+B,KAAMkgC,EAAQ91B,GAI3CpK,KAAKu+B,QAAQ,YAAav+B,KAAMkgC,GAG7BtB,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,aAAa/G,EAAcwlC,EAAiBG,GAAuB,GAExE,MAAMsB,EAASlgC,KAAKu/B,QAAQtmC,GAkB5B,OAhBIinC,GAAUjnC,IAASwlC,IAErByB,EAAOjnC,KAAOwlC,SAEPz+B,KAAKu/B,QAAQtmC,GAEpB+G,KAAKu/B,QAAQd,GAAWyB,EAExBlgC,KAAKu+B,QAAQ,eAAgBv+B,KAAMkgC,EAAQA,GAEtCtB,GAEH5+B,KAAKw+B,WAIFx+B,KAGF,aAAa/G,EAAc2lC,GAAuB,GAEvD,MAAMsB,EAASlgC,KAAKu/B,QAAQtmC,GAc5B,OAZIinC,WAEKlgC,KAAKu/B,QAAQtmC,GAEpB+G,KAAKu+B,QAAQ,eAAgBv+B,KAAMkgC,GAE9BtB,GAEH5+B,KAAKw+B,WAIFx+B,MAjwBK,GAAAkjC,cAAiD,CAC7D,CAAChG,GAAkB+D,OAAQ,KAC3B,CAAC/D,GAAkB4C,gBAAiB,GAAMsD,IAAI,GAC9C,CAAClG,GAAkB0E,MAAO,GAAMrG,KAAK,CAAEh/B,IAAK,GAAIC,IAAK,GAAIoY,YAAY,EAAMvX,QAAS,oECrFxF,SAAY8/B,GAEV,2BACA,+BACA,yBACA,iBACA,iDACA,yCAPF,CAAYA,QAAY,KAUxB,SAAYC,GAEV,mBACA,yBACA,2BACA,2BALF,CAAYA,QAAe,KAepB,MAAM,WAAiB,GAgF5B,YAAmBU,EAAmBx8B,GAEpC+K,QAEArM,KAAK89B,KAAOA,EACZ99B,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAKqjC,KAAO/hC,EAAQ+hC,KACpBrjC,KAAKuD,QAAUjC,EAAQiC,QACvBvD,KAAKsjC,oBAAsBhiC,EAAQgiC,qBAAuBhiC,EAAQiiC,QAAQ,GAAGtqC,KAC7E+G,KAAKwjC,OAASliC,EAAQkiC,OAClBxjC,KAAKyjC,eAAeniC,EAAQkiC,QAC5B,KACJxjC,KAAK0jC,gBAAkBjnC,EAAM6E,EAAQoiC,iBACrC1jC,KAAKujC,QAAUjiC,EAAQiiC,QACvBvjC,KAAK2jC,oBAAsBriC,EAAQqiC,qBAAuBriC,EAAQiC,QAAQtK,KAC1E+G,KAAK4jC,gBAAkB9mC,EAAWkD,KAAK0jC,iBACvC1jC,KAAK6jC,WAAaviC,EAAQuiC,SAC1B7jC,KAAK6lB,WAAavkB,EAAQukB,SAC1B7lB,KAAK8jC,OAASxiC,EAAQwiC,KACtB9jC,KAAK+jC,YAAcziC,EAAQyiC,UAGtB,KAAKziC,EAAqCw8B,GAE3C99B,KAAKm+B,WAAW78B,KAElBtB,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAKqjC,KAAO/hC,EAAQ+hC,KACpBrjC,KAAKuD,QAAUjC,EAAQiC,QACvBvD,KAAKsjC,oBAAsBhiC,EAAQgiC,qBAAuBhiC,EAAQiiC,QAAQ,GAAGtqC,KAC7E+G,KAAKwjC,OAASliC,EAAQkiC,OAClBxjC,KAAKyjC,eAAeniC,EAAQkiC,QAC5B,KACJxjC,KAAK0jC,gBAAkBjnC,EAAM6E,EAAQoiC,iBACrC1jC,KAAKujC,QAAUjiC,EAAQiiC,QACvBvjC,KAAK2jC,oBAAsBriC,EAAQqiC,qBAAuBriC,EAAQiC,QAAQtK,KAC1E+G,KAAK4jC,gBAAkB9mC,EAAWkD,KAAK0jC,iBACvC1jC,KAAK6jC,WAAaviC,EAAQuiC,SAC1B7jC,KAAK6lB,WAAavkB,EAAQukB,SAC1B7lB,KAAK8jC,OAASxiC,EAAQwiC,KACtB9jC,KAAK+jC,YAAcziC,EAAQyiC,UAE3B/jC,KAAKu+B,QAAQ,OAAQv+B,KAAMsB,EAASw8B,GACpC99B,KAAKw+B,WAIF,WAAWl9B,GAEhB,OAAQ2J,EAAUtB,OAAOrI,aAAmB,GAAWA,EAAQwK,SAAWxK,EAAStB,KAAK8L,UAGnF,UAEL9L,KAAKu+B,QAAQ,UAAWv+B,MAGlB,gBAAgBlB,EAAMyb,IAE5B,MAAO,CAACzb,EAAMkB,KAAK89B,KAAKn6B,QAAQ4W,IAG1B,eAAeypB,GAErB,OAAOA,EACH,CAACA,EAAK,GAAIA,EAAK,GAAGl4B,UAClB,KAGC,SAEL,MAAM,KACJ7S,EAAI,KAAEoqC,EAAI,QAAE9/B,EAAO,oBAAE+/B,EAAmB,OACxCE,EAAM,gBAAEE,EAAe,QACvBH,EAAO,oBAAEI,EAAmB,SAC5BE,EAAQ,SAAEhe,EAAQ,KAAEie,EAAI,UAAEC,GACxB/jC,KAEJ,MAAO,CACL/G,OACAoqC,OACA9/B,UACA+/B,sBACAE,OAAQxjC,KAAKikC,eAAeT,GAC5BE,gBAAiB5oC,MAAMkC,KAAK0mC,EAAgBzmC,WAC5CsmC,UACAI,sBACAE,WAAUhe,WAAUie,OAAMC,aAItB,mBAAmB9qC,EAAcsqC,GAEvC,OAAOA,EAAQz0B,KAAMtV,GAAMA,EAAEP,OAASA,GAGjC,OAAOA,EAAcwlC,GAE1Bz+B,KAAKkkC,gBAAgBjrC,EAAMwlC,EAAS,CAACz+B,KAAKuD,UAC1CvD,KAAKkkC,gBAAgBjrC,EAAMwlC,EAASz+B,KAAKujC,SAEzCvjC,KAAKw+B,UAGC,gBAAgBvlC,EAAcwlC,EAAiB8E,GAErD,MAAMY,EAAWnkC,KAAKokC,mBAAmBnrC,EAAMsqC,GAE3CY,IAEFA,EAASlrC,KAAOwlC,GAIb,OAAOxlC,GAEZ+G,KAAKqkC,gBAAgBprC,EAAM,CAAC+G,KAAKuD,UACjCvD,KAAKqkC,gBAAgBprC,EAAM+G,KAAKujC,SAEhCvjC,KAAKw+B,UAGC,gBAAgBvlC,EAAcsqC,GAEpC,MAAM7qC,EAAI6qC,EAAQ3lC,UAAWpE,GAAMA,EAAEP,OAASA,IAEnC,IAAPP,IAEF6qC,EAAQv2B,OAAOtU,EAAG,GAClB6qC,EAAQ7qC,GAAGmG,MAAQ,IAIhB,WAAW5F,EAAc6F,EAAcwiC,GAE5CthC,KAAKskC,oBAAoBrrC,EAAM6F,EAAMwiC,EAAS,CAACthC,KAAKuD,UACpDvD,KAAKskC,oBAAoBrrC,EAAM6F,EAAMwiC,EAASthC,KAAKujC,SAEnDvjC,KAAKw+B,UAGC,oBAAoBvlC,EAAc6F,EAAcwiC,EAAiBiC,GAEvE,MAAMY,EAAWnkC,KAAKokC,mBAAmBnrC,EAAMsqC,GAE/C,GAAIY,EACJ,CACE,MAAMzrC,EAAIyrC,EAAStlC,MAAM0S,QAAQzS,IAEtB,IAAPpG,IAEFyrC,EAAStlC,MAAMnG,GAAK4oC,IAKnB,WAAWroC,EAAc6F,GAE9BkB,KAAKukC,oBAAoBtrC,EAAM6F,EAAM,CAACkB,KAAKuD,UAC3CvD,KAAKukC,oBAAoBtrC,EAAM6F,EAAMkB,KAAKujC,SAE1CvjC,KAAKw+B,UAGC,oBAAoBvlC,EAAc6F,EAAcykC,GAEtD,MAAM7qC,EAAI6qC,EAAQ3lC,UAAWpE,GAAMA,EAAEP,OAASA,GAE9C,IAAW,IAAPP,EACJ,CACE,MAAMyrC,EAAWZ,EAAQ7qC,GACnBmE,EAAIsnC,EAAStlC,MAAM0S,QAAQzS,GAEjC,IAAW,IAAPjC,IAEFsnC,EAAStlC,MAAMmO,OAAOnQ,EAAG,GAEK,IAA1BsnC,EAAStlC,MAAMzC,QAIjB,OAFAmnC,EAAQv2B,OAAOtU,EAAG,IAEX,EAKb,OAAO,EAGF,aAAa6qC,GAElB,MAAMz+B,EAAgB,GAiBtB,OAfAy+B,EAAQ/+B,QAAQ,EAAGvL,OAAM4F,YAEvB,MACMmiC,EADShhC,KAAK89B,KAAKljB,UAAU3hB,GACZurC,iBAEvB3lC,EAAM2F,QAAQ,CAACjC,EAAG7J,KAEhB,MAAM6hB,EAAWymB,EAAQniC,MAAMnG,GAAG,GAElCoM,EAAMpM,GAAKoM,EAAMpM,GACb,GAAM4d,MAAMxR,EAAMpM,GAAI6hB,GACtBA,EAAS9N,YAIV3H,EAGF,UAEL,OAAqC,IAA9B9E,KAAKuD,QAAQ1E,MAAMzC,QACK,IAAxB4D,KAAKujC,QAAQnnC,OAGd,YAAYmnC,GAElB,MAAMkB,EAAgBlB,EAAQxmC,IAAKvD,GAAMwG,KAAK89B,KAAKn6B,QAAQnK,EAAEP,OAK7D,OAJiBwrC,EAAcroC,OAAS,EACpC,GAAM44B,KAAKyP,GACXA,EAAc,GAKb,mBAAmBC,GAExB,GAAI1kC,KAAKuD,QAAQtK,OAASyrC,EAExB,OAAO,KAGT,MAAMzrC,EAAO+G,KAAKsjC,oBACZqB,EAAQ3kC,KAAKuD,QAAQ1E,MACrB0kC,EAAUvjC,KAAKujC,QACfqB,EAAW5kC,KAAK6kC,YAAYtB,GAC5BuB,EAAU9kC,KAAK8jC,MAAQ9jC,KAAK6jC,SAC9BzG,GAAgB2H,QAChB/kC,KAAK6lB,SACHuX,GAAgB4H,SAChB5H,GAAgB6H,SAChBC,EAAellC,KAAK6lB,SACtB+e,EACA,GAAMz/B,SAASy/B,GAKbO,EAA2B,CAC/BA,SAAUnlC,KACV/G,OACAoqC,KAPWrjC,KAAKqjC,OAASlG,GAAaiI,SACpCjI,GAAakI,WACbrlC,KAAKqjC,KAMPsB,QACAG,UACAvB,UACAqB,WACAM,gBASF,OANIllC,KAAKwjC,SACP2B,EAAS3B,OAASxjC,KAAKwjC,OACvB2B,EAASzB,gBAAkB1jC,KAAK0jC,gBAChCyB,EAASvB,gBAAkB5jC,KAAK4jC,iBAG3BuB,EAGF,mBAAmBG,GAExB,MAAMnB,EAAWnkC,KAAKokC,mBAAmBkB,EAAatlC,KAAKujC,SAE3D,IAAKY,EAEH,OAAO,KAGT,MAAMlrC,EAAO+G,KAAK2jC,oBACZgB,EAAQR,EAAStlC,MACjB0kC,EAAU,CAACvjC,KAAKuD,SAChBqhC,EAAW5kC,KAAK6kC,YAAYtB,GAC5BuB,EAAU1H,GAAgBmI,KAC1BL,EAAellC,KAAK6jC,SACtB,GAAMziC,KAAKwjC,GACX5kC,KAAK6lB,SACH+e,EACA,GAAMz/B,SAASy/B,GAOfO,EAA2B,CAC/BA,SAAUnlC,KACV/G,OACAoqC,KATWrjC,KAAKqjC,OAASlG,GAAaiI,SACpCjI,GAAaiI,SACbplC,KAAKwjC,OACHrG,GAAaqI,gBACbrI,GAAasI,IAMjBd,QACAG,UACAvB,UACAqB,WACAM,gBAUF,OAPIllC,KAAKwjC,SACP2B,EAASO,MAAQ,CACf1lC,KAAKwjC,OAAO,GACZxjC,KAAK4jC,gBAAgBrqC,IAAI+rC,KAItBH,EAGF,aAAalsC,GAElB,MAAM0sC,EAA2B,GAEjC,GAAI3lC,KAAKuD,QAAQtK,OAASA,EAC1B,CACE,MAAM2sC,EAAgB5lC,KAAK6lC,aAAa7lC,KAAKujC,SACvC1kC,EAA0BmB,KAAKuD,QAAQ1E,MAAM9B,IAAI,CAAC+B,EAAMpG,IAAM,CAACoG,EAAM8mC,EAAcltC,KAEzFitC,EAAUlnC,KAAK,CACb6D,KAAM26B,GAAc6I,QACpBjnC,QACAsmC,SAAUnlC,OAGRA,KAAKwjC,QAEPmC,EAAUlnC,KAAK,CACb6D,KAAM26B,GAAcsI,KACpB1mC,MAAO,CAACmB,KAAKwjC,QACb2B,SAAUnlC,OAKhB,OAAO2lC,EAIF,eAAe7H,EAAmBx8B,GAUvC,MAAMqiC,EAAsBriC,EAAQykC,iBAAmBzkC,EAAQ0zB,KACzDsO,EAAsBhiC,EAAQ0kC,kBAAoB1kC,EAAQ2kC,IAC1DC,EAAmB5kC,EAAQ4kC,kBAAqB5C,EAAsB,IACtErqC,EAAOqI,EAAQrI,MAASqqC,EAAsB,YAAcK,EAC5DwC,EAAerI,EAAKljB,UAAUtZ,EAAQ2kC,KAAKxE,aAAa5iC,MACxDunC,EAAeD,EAAappC,IAAKvC,GAAM0rC,EAAmB1rC,GAEhE,OAAO,IAAI,GAASsjC,EAAM,CACxB7kC,OACAoqC,KAAMlG,GAAaiI,SACnB7hC,QAAS,CACPtK,KAAMqI,EAAQ0zB,KACdn2B,MAAOunC,GAET9C,sBACAC,QAAS,CAAC,CACRtqC,KAAMqI,EAAQ2kC,IACdpnC,MAAOsnC,IAETxC,sBACAE,UAAU,EACVC,MAAuB,IAAjBxiC,EAAQwiC,KACdje,UAA2B,IAAjBvkB,EAAQwiC,OAKf,iBAAiBhG,EAAmBx8B,GAUzC,OAAOtB,KAAKqmC,QAAQvI,EAAM,CACxB7kC,KAAMqI,EAAQrI,KACdgtC,IAAK3kC,EAAQglC,UACbtR,KAAM1zB,EAAQilC,UACdR,gBAAiBzkC,EAAQklC,sBACzBR,iBAAkB1kC,EAAQmlC,sBAC1BP,iBAAkB5kC,EAAQ4kC,iBAC1BpC,KAAMxiC,EAAQwiC,OAKX,cAAchG,EAAmBx8B,GAWtC,MAAMqiC,EAAsBriC,EAAQykC,iBAAmBzkC,EAAQolC,OACzDpD,EAAsBhiC,EAAQqlC,oBAAsBrlC,EAAQ2kC,IAC5DC,EAAmB5kC,EAAQ4kC,kBAAqB5C,EAAsB,IACtErqC,EAAOqI,EAAQrI,MAASqqC,EAAsB,WAAaK,EAC3DwC,EAAerI,EAAKljB,UAAUtZ,EAAQ2kC,KAAKxE,aAAa5iC,MACxDunC,EAAeD,EAAappC,IAAKvC,GAAM0rC,EAAmB1rC,GAEhE,OAAO,IAAI,GAASsjC,EAAM,CACxB7kC,OACAoqC,KAAMlG,GAAayJ,QACnBrjC,QAAS,CACPtK,KAAMqI,EAAQolC,OACd7nC,MAAOunC,GAET9C,sBACAC,QAAS,CAAC,CACRtqC,KAAMqI,EAAQ2kC,IACdpnC,MAAOsnC,IAETxC,sBACA9d,SAAUvkB,EAAQukB,SAClBie,KAAMxiC,EAAQwiC,OAKX,oBAAoBhG,EAAmBx8B,GAW5C,OAAOtB,KAAK0mC,OAAO5I,EAAM,CACvB7kC,KAAMqI,EAAQrI,KACdytC,OAAQplC,EAAQglC,UAChBL,IAAK3kC,EAAQ2kC,IACbpgB,SAAUvkB,EAAQukB,SAClBie,KAAMxiC,EAAQwiC,KACd6C,mBAAoBrlC,EAAQklC,sBAC5BT,gBAAiBzkC,EAAQykC,gBACzBG,iBAAkB5kC,EAAQ4kC,mBAKvB,yBAAyBpI,EAAmBx8B,GAajD,MAAMgiC,EAAsBhiC,EAAQqlC,mBAC9BhD,EAAsBriC,EAAQulC,kBAAoBvlC,EAAQolC,OAC1DztC,EAAOqI,EAAQrI,MAASqqC,EAAsB,sBAAwBK,EACtEuC,EAAmB5kC,EAAQ4kC,kBAAqB5C,EAAsB,IACtEC,EAAUjiC,EAAQwlC,KAAK/pC,IAAKgqC,IAAa,CAC7C9tC,KAAM8tC,EACNloC,MAAOi/B,EAAKljB,UAAUmsB,GAAUtF,aAAa5iC,SAEzCunC,EAAe7C,EAAQ,GAAG1kC,MAAM9B,IAAKvC,GAAM0rC,EAAmB1rC,GAEpE,OAAO,IAAI,GAASsjC,EAAM,CACxB7kC,OACAoqC,KAAMlG,GAAa6J,oBACnBzjC,QAAS,CACPtK,KAAMqI,EAAQolC,OACd7nC,MAAOunC,GAET9C,sBACAC,UACAI,sBACAH,OAAQliC,EAAQkiC,OAChBE,gBAAiBpiC,EAAQoiC,gBACzB7d,SAAUvkB,EAAQukB,SAClBie,KAAMxiC,EAAQwiC,QGlmBb,MAAM,WAAgB,GAoC3B,YAAmBxiC,EAAyBw8B,GAE1CzxB,QAEArM,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAKinC,OAAS3lC,EAAQ2lC,OACtBjnC,KAAK+9B,YAAcz8B,EAAQy8B,YAC3B/9B,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKknC,QAAU5lC,EAAQ4lC,QACvBlnC,KAAKqgC,QAAU/+B,EAAQ++B,QACvBrgC,KAAKqY,SAAWylB,EAAKn6B,QAAQrC,EAAQ+W,UACrCrY,KAAKoM,WAAa0xB,EAAKvxB,cAAcjL,EAAQ8K,YAC7CpM,KAAKmnC,SAAW7lC,EAAQ6lC,SAASpqC,IAAK/D,GAAO,OAAD,wBAAMA,GAAC,CAAEoS,KAAMpL,KAAKqY,SAASxN,SAAS7R,EAAEoS,SA7C/E,cAAc0yB,EAAmBI,EAAoC,IAC1E,MAAMjL,GAAM,IAAIj4B,MAAOo1B,UAEvB,OAAO,IAAI,GAAQ,OAAD,QAChBn3B,UACAguC,OAAQ,GACRlJ,YAAa,GACbC,KAAM,KACNkJ,QAASjU,EACToN,QAASpN,EACT5a,SAAU,GAAMje,SAChB+sC,SAAU,CAAC,CACTluC,KAAM,cACNmS,KAAMhS,OAAOY,OAAO,MACpBktC,QAASjU,EACToN,QAASpN,EACT+K,KAAM,OAER5xB,WAAY,GAAa2B,UACtBmwB,GACFJ,GA4BE,KAAKx8B,EAAyBw8B,GAE/B99B,KAAKm+B,WAAW78B,KAElBtB,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAKinC,OAAS3lC,EAAQ2lC,OACtBjnC,KAAK+9B,YAAcz8B,EAAQy8B,YAC3B/9B,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKknC,QAAU5lC,EAAQ4lC,QACvBlnC,KAAKqgC,QAAU/+B,EAAQ++B,QACvBrgC,KAAKqY,SAAW/W,aAAmB,GAC/BA,EAAQ+W,SACRylB,EAAKn6B,QAAQrC,EAAQ+W,UACzBrY,KAAKoM,WAAa9K,aAAmB,GACjCA,EAAQ8K,WACR0xB,EAAKvxB,cAAcjL,EAAQ8K,YAE/BlP,EACE8C,KAAKmnC,SACL7lC,aAAmB,GACfA,EAAQ6lC,SACR7lC,EAAQ6lC,SAASpqC,IAAK/D,GAAO,OAAD,wBAAMA,GAAC,CAAEoS,KAAMpL,KAAKqY,SAASxN,SAAS7R,EAAEoS,SACxE,CAAC1P,EAAGC,IAAMD,EAAEzC,OAAS0C,EAAE1C,MAAQyC,EAAEwrC,UAAYvrC,EAAEurC,QAC/C,CAAC/pC,EAAQxD,IAAUqG,KAAKonC,WAAWztC,GAAO,GAC1C,CAACwD,EAAQ0L,EAAOlP,IAAUqG,KAAKqnC,cAAcx+B,GAAO,GACpD,CAAC1L,EAAQ0L,EAAOlP,EAAOqI,IAAahC,KAAKsnC,cAAc3tC,EAAOqI,GAAU,IAG1EhC,KAAKu+B,QAAQ,OAAQv+B,KAAMsB,EAASw8B,GACpC99B,KAAKw+B,WAIF,WAAWl9B,GAEhB,OAAQ2J,EAAUtB,OAAOrI,aAAmB,GAAUA,EAAQwK,SAAWxK,EAAStB,KAAK8L,UAGlF,UAEL9L,KAAKu+B,QAAQ,UAAWv+B,MAGnB,SAEL,MAAM,KAAE/G,EAAI,OAAEguC,EAAM,YAAElJ,EAAW,KAAEC,EAAI,QAAEkJ,EAAO,QAAE7G,EAAO,SAAEhoB,EAAQ,SAAE8uB,EAAQ,WAAE/6B,GAAepM,KAE9F,MAAO,CACL/G,OACAguC,SACAlJ,cACAC,OACAkJ,UACA7G,UACAhoB,SAAUA,EAASvM,SACnBq7B,SAAUA,EAASpqC,IAAK/D,GAAO,OAAD,wBAAMA,GAAC,CAAEoS,KAAMiN,EAAS1N,OAAO3R,EAAEoS,SAC/DgB,WAAYA,EAAWN,UAIpB,WAAWy7B,EAAyB3I,GAAuB,GAEhE5+B,KAAKmnC,SAAS1oC,KAAK8oC,GAEnBvnC,KAAKu+B,QAAQ,aAAcv+B,KAAMunC,GAE5B3I,GAEH5+B,KAAKw+B,UAIF,cAAc+I,EAAkCC,EAA4B5I,GAAuB,GAExG,MAAMzhC,EAASzC,EAAS6sC,GACpBvnC,KAAKmnC,SAASI,GACdA,EACE5I,IAAWxhC,EAcjB,OAZIwhC,IAEFvlC,OAAO0lC,OAAO3hC,EAAQqqC,GAEtBxnC,KAAKu+B,QAAQ,gBAAiBv+B,KAAM7C,GAE/ByhC,GAEH5+B,KAAKw+B,WAIFG,EAGF,cAAc4I,EAAkC3I,GAAuB,GAE5E,MAAM/1B,EAAQnO,EAAS6sC,GACnBA,EACAvnC,KAAKmnC,SAAS51B,QAAQg2B,GACpB5I,EAAS91B,GAAS,GAAKA,EAAQ7I,KAAKmnC,SAAS/qC,OAEnD,GAAIuiC,EACJ,CACE,MAAMI,EAAU/+B,KAAKmnC,SAASt+B,GAE9B7I,KAAKu+B,QAAQ,gBAAiBv+B,KAAM++B,GAE/BH,GAEH5+B,KAAKw+B,UAIT,OAAOG,EAGF,SAASngC,EAAuB2gC,GAErC,MAAMC,EAAMD,EAAQE,WAAW7gC,GAE/BwB,KAAKmnC,SAAS3iC,QAAS+iC,IAErBA,EAAQn8B,KAAOg0B,EAAI,CAAEzlC,MAAO4tC,EAAQn8B,SAGtCpL,KAAKw+B,WCnMF,MAAM,WAAsB,GAkBjC,YAAmBl9B,EAA+Bw8B,GAEhDzxB,QAEArM,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKqY,SAAWylB,EAAKn6B,QAAQrC,EAAQ+W,UACrCrY,KAAKoL,KAAOpL,KAAKqY,SAASxN,SAASvJ,EAAQ8J,MAtBtC,cAAc0yB,EAAmBI,EAA0C,IAChF,OAAO,IAAI,GAAc,OAAD,QACtBjlC,KAAM,GACNof,SAAU,GAAMje,SAChBgR,KAAMhS,OAAOY,OAAO,MACpBgkC,KAAM,MACHE,GACFJ,GAkBE,KAAKx8B,EAA+Bw8B,GAErC99B,KAAKm+B,WAAW78B,KAElBtB,KAAK/G,KAAOqI,EAAQrI,KACpB+G,KAAKg+B,KAAO18B,EAAQ08B,KACpBh+B,KAAKqY,SAAW/W,aAAmB,GAC/BA,EAAQ+W,SACRylB,EAAKn6B,QAAQrC,EAAQ+W,UACzBrY,KAAKoL,KAAO9J,aAAmB,GAC3BA,EAAQ8J,KACRpL,KAAKqY,SAASxN,SAASvJ,EAAQ8J,MAEnCpL,KAAKu+B,QAAQ,OAAQv+B,KAAMsB,EAASw8B,GACpC99B,KAAKw+B,WAIF,WAAWl9B,GAEhB,OAAQ2J,EAAUtB,OAAOrI,aAAmB,GAAgBA,EAAQwK,SAAWxK,EAAStB,KAAK8L,UAGxF,UAEL9L,KAAKu+B,QAAQ,UAAWv+B,MAGnB,SAEL,MAAM,KAAE/G,EAAI,KAAE+kC,EAAI,SAAE3lB,EAAQ,KAAEjN,GAASpL,KAEvC,MAAO,CACL/G,OACA+kC,OACA3lB,SAAUA,EAASvM,SACnBV,KAAMiN,EAAS1N,OAAOS,IAInB,SAAS5M,EAAuB2gC,GAErCn/B,KAAKoL,KAAO+zB,EAAQhlB,IAAI3b,EAAW,CAAE7E,MAAOqG,KAAKoL,OAEjDpL,KAAKw+B,WCrFT,MAAM,GAAa,EAEZ,MAAM,WAAsB,EAyCjC,YAAmBvlC,EAAcwhB,GAE/BpO,MAAMpT,GAEN+G,KAAKya,SAAWA,EAhCX,cAAcrP,EAAatG,GAEhC,MAAMxC,EAAO8I,EAAK,IAElB,OAAO,IAAI,GAAe9I,EAAMwC,GAG3B,cAAcxC,GAEnB,MAAO,CAACtC,KAAK+E,GAAIzC,EAAKhB,SAKjB,gBAAgB8J,EAAWC,GAEhC,OAAO,KAKF,mBAcA,UAEL,IAAKrL,KAAKya,SAER,OAAO,GAASnP,SAGlB,MAAMF,EAAOpL,KAAKya,SAASrC,QAAQpY,KAAKsB,SAExC,OAAO8J,EAAOA,EAAKiN,SAAW,GAAS/M,SAGlC,gBAEL,OAAOtL,KAAK2D,UAAUwS,gBAGjB,QAEL,OAAO,GAAcpR,GAGhB,MAAMzC,IAKN,WAAWU,EAAkBE,EAAyBC,GAE3D,OAAOnD,KAAK2D,UAAUc,WAAWzB,EAAME,EAAKC,GAGvC,YAAYD,GAEjB,OAAOlD,KAAK2D,UAAU4S,YAAYrT,GAG7B,aAAavJ,GAElB,OAAOqG,KAAK2D,UAAU+W,aAAa/gB,GAG9B,oBAEL,OAAOqG,KAAK2D,UAAU/B,oBAGd,iBAAiBJ,EAAaF,GAEtC,OAAOE,aAAiB,GACpBxB,KAAK2D,UAAUhC,aAAaH,EAAMmC,UAAWrC,GAC7CtB,KAAK2D,UAAUhC,aAAaH,EAAOF,GAGlC,aAEL,OAAOtB,KAAK2D,UAAUG,aAGjB,WAEL,OAAO9D,KAAK2D,UAAU6S,WAGd,oBAER,OAAO,EAGF,SAAYnW,GAEjB,OAAOA,EAASqL,MAAM1L,KAAM,IAC1BK,EAASG,KAAK,GAAcinC,gBAAiBznC,KAAK2D,UAAY9C,GAAgBA,aAAuB,GAAgBb,KAAKsB,QAAUT,EAAYS,QAAU,IAIvJ,gBAAgBd,GAErB,OAAOA,IAAS,GAAcinC,gBAC1BznC,KAAK2D,UACL,KAGC,UAAUpC,EAAe,MAE9BvB,KAAKuB,OAASA,EAGT,+BAKA,sBAEL,OAAOvB,KAAK2D,UAAUgT,sBAGjB,wBAEL,OAAO3W,KAAK2D,UAAUiT,wBAGjB,uBAEL,OAAO5W,KAAK2D,UAAUkT,uBAGjB,yBAAyB7U,EAAsBhF,EAAqBiF,GAGzE,OAAOD,EAGF,QAAQrI,GAEb,OAAOqG,KAAK2D,UAAU+D,QAAQ/N,GAGzB,UAAUA,GAEf,OAAOqG,KAAK2D,UAAUqT,UAAUrd,GAG3B,cAEL,OAAO,IAAI,GAAcqG,KAAKsB,QAAStB,KAAKya,UAGvC,QAEL,OAAO,IAAI,GAAcza,KAAKsB,QAAStB,KAAKya,UAGvC,SAEL,OAAO,GAAc3O,OAAO9L,MAGvB,SAEL,OAAOA,KAAK2D,UAAU3J,SAGjB,OAAO+R,GAEZ,OAAO/L,KAAK2D,UAAU2W,OAAOvO,GAGxB,SAASnB,GAEd,OAAO5K,KAAK2D,UAAUkH,SAASD,GAG1B,OAAOjR,GAEZ,OAAOqG,KAAK2D,UAAUgH,OAAOhR,IAzMjB,GAAA8tC,gBAAkB,aAElB,GAAA1iC,GAAKe,EAAGa,UAER,GAAA8E,WAAa,IAAI7G,EAAWkB,EAAGa,UAAYb,EAAGiB,WAE9C,GAAAiF,UAAY,IAAIpG,EAAUE,EAAGa,UAAYb,EAAGiB,WAE5C,GAAAuE,SAAW,IAAI,GAAc,GAAI,MAcjC,GAAAW,kBAA4B,EAO5B,GAAAC,YAAsB,ECvC/B,MAAM,GAOX,YAAmB5K,GAEjBtB,KAAK4V,QAEDtU,GAEFtB,KAAKsW,MAAMhV,GAIR,MAAMA,GAEXtB,KAAK4V,QACL5V,KAAKsW,MAAMhV,GAGN,MAAMA,GAEX,GAAIA,aAAmBpG,IAErB,IAAK,MAAOjB,EAAKN,KAAU2H,EAAQrE,UAEjC+C,KAAKmH,IAAIlN,EAAKN,QAGb,GAAI2H,aAAmB,GAE1B,IAAK,IAAI5I,EAAI,EAAGA,EAAI4I,EAAQlF,SAAU1D,IAEpCsH,KAAKmH,IAAI7F,EAAQomC,MAAMhvC,GAAI4I,EAAQqmC,QAAQjvC,SAG1C,GAAImC,EAAQyG,GAEf,IAAK,MAAOrH,EAAKN,KAAU2H,EAEzBtB,KAAKmH,IAAIlN,EAAKN,QAGb,GAAI4B,EAAS+F,GAEhB,IAAK,MAAMrH,KAAOqH,EAEhBtB,KAAKmH,IAAIlN,EAAKqH,EAAQrH,IAKrB,KAAKqH,EAA4BsmC,GAEtC,MAAMC,EAAM,IAAI,GAAQvmC,GAExBtB,KAAKiB,OAAO,CAACsB,EAAGtI,IAAQ4tC,EAAIryB,IAAIvb,IAEhC4tC,EAAIrjC,QAAQ,CAAC7K,EAAOM,KACd+F,KAAKwV,IAAIvb,IAAQ2tC,EACnBA,EAAQ5nC,KAAKzG,IAAIU,GAAMN,GAEvBqG,KAAKmH,IAAIlN,EAAKN,KAKb,QAELqG,KAAK2/B,QAAUvmC,OAAOY,OAAO,MAC7BgG,KAAK0V,KAAO,GACZ1V,KAAKuU,OAAS,GAGT,SAEL,OAAOvU,KAAK0V,KAAKtZ,OAGZ,QAAQ1D,GAEb,OAAOsH,KAAKuU,OAAO7b,GAGd,MAAMA,GAEX,OAAOsH,KAAK0V,KAAKhd,GAGZ,OAAOA,GAEZ,MAAO,CAACsH,KAAK0V,KAAKhd,GAAIsH,KAAKuU,OAAO7b,IAG7B,IAAIuB,GAET,OAAOW,EAASX,GAAOA,KAAO+F,KAAK2/B,QAAU3/B,KAAKuU,OAAOuzB,SAAS7tC,GAG7D,IAAIA,EAAaN,GAEtB,MAAMjB,EAAIsH,KAAK2/B,QAAQ1lC,GAEnBS,EAAShC,GAEXsH,KAAKuU,OAAOvH,OAAOtU,EAAG,EAAGiB,IAIzBqG,KAAK2/B,QAAQ1lC,GAAO+F,KAAKuU,OAAOnY,OAChC4D,KAAKuU,OAAO9V,KAAK9E,GACjBqG,KAAK0V,KAAKjX,KAAKxE,IAIZ,MAAM8tC,EAAiBC,GAE5B,MAAMtvC,EAAIsH,KAAKuR,QAAQw2B,GACjBpJ,GAAgB,IAAPjmC,EASf,OAPIimC,WAEK3+B,KAAK2/B,QAAQ3/B,KAAK0V,KAAKhd,IAC9BsH,KAAK2/B,QAAQqI,GAAUtvC,EACvBsH,KAAK0V,KAAK1I,OAAOtU,EAAG,EAAGsvC,IAGlBrJ,EAGF,KAAKl3B,GAEVzH,KAAKioC,MAAMjoC,KAAKkoC,UAAUn9B,KAAK,EAAEo9B,EAAIC,IAAMC,EAAIC,KAAQ7gC,EAAI2gC,EAAIE,KAG1D,UAAU7gC,EAAwC,EAAC/L,EAAGC,IAAMD,EAAEsY,cAAcrY,KAEjFqE,KAAKioC,MAAMjoC,KAAKkoC,UAAUn9B,KAAK,EAAEo9B,EAAIC,IAAMC,EAAIC,KAAQ7gC,EAAI0gC,EAAIE,KAG1D,UAEL,MAAM3yB,EAAO1V,KAAK0V,KACZiqB,EAAUvmC,OAAOY,OAAO,MAE9B,IAAK,IAAItB,EAAI,EAAGA,EAAIgd,EAAKtZ,OAAQ1D,IAE/BinC,EAAQjqB,EAAKhd,IAAMA,EAGrBsH,KAAK2/B,QAAUA,EAGV,KAAKjnC,EAAWmE,GAErB,GAAInE,IAAMmE,GAAKnE,EAAI,GAAKmE,EAAI,GAAKnE,GAAKsH,KAAK0V,KAAKtZ,QAAUS,GAAKmD,KAAK0V,KAAKtZ,OAEvE,OAAO,EAGT,MAAMmsC,EAAOvoC,KAAK0V,KAAKhd,GACjB8vC,EAASxoC,KAAKuU,OAAO7b,GACrB+vC,EAAOzoC,KAAK0V,KAAK7Y,GACjB6rC,EAAS1oC,KAAKuU,OAAO1X,GAW3B,OATAmD,KAAK2/B,QAAQ4I,GAAQ1rC,EACrBmD,KAAK2/B,QAAQ8I,GAAQ/vC,EAErBsH,KAAK0V,KAAK1I,OAAOtU,EAAG,EAAG+vC,GACvBzoC,KAAK0V,KAAK1I,OAAOnQ,EAAG,EAAG0rC,GAEvBvoC,KAAKuU,OAAOvH,OAAOtU,EAAG,EAAGgwC,GACzB1oC,KAAKuU,OAAOvH,OAAOnQ,EAAG,EAAG2rC,IAElB,EAGF,IAAmBvuC,EAAiBohB,GAEzC,OAAOzgB,EAASX,GAAO+F,KAAKuU,OAAOvU,KAAK2/B,QAAQ1lC,KAASohB,EAAYphB,EAGhE,OAAOA,EAAiB0uC,GAAwB,GAErD,MAAMjwC,EAAIsH,KAAKuR,QAAQtX,GAEvB,IAAW,IAAPvB,EACJ,CACE,MAAM,KAAEgd,EAAI,OAAEnB,GAAWvU,KACnB4oC,EAAWr0B,EAAO7b,GAExB,GAAIiwC,EAEF3oC,KAAKmjB,SAASzqB,OAGhB,QACSsH,KAAK2/B,QAAQjqB,EAAKhd,IACzB,MAAMmwC,EAAUnzB,EAAKnV,MACfuoC,EAAYv0B,EAAOhU,MAErB7H,IAAMgd,EAAKtZ,SAEbsZ,EAAK1I,OAAOtU,EAAG,EAAGmwC,GAClBt0B,EAAOvH,OAAOtU,EAAG,EAAGowC,GACpB9oC,KAAK2/B,QAAQkJ,GAAWnwC,GAI5B,OAAOkwC,GAIJ,SAASlwC,GAEd,MAAM,KAAEgd,EAAI,OAAEnB,GAAWvU,KAEzB,GAAItH,EAAI,GAAKA,GAAKgd,EAAKtZ,OAErB,OAAO,EAOT,WAJO4D,KAAK2/B,QAAQjqB,EAAKhd,IACzBgd,EAAK1I,OAAOtU,EAAG,GACf6b,EAAOvH,OAAOtU,EAAG,KAERA,EAAIgd,EAAKtZ,QAEhB4D,KAAK2/B,QAAQjqB,EAAKhd,MAGpB,OAAO,EAGF,KAAKsE,EAAciF,GAExB,MAAM,KAAEyT,EAAI,OAAEnB,GAAWvU,KAEzB,GAAIhD,EAAO,GAAKiF,EAAK,GAAKjF,GAAQ0Y,EAAKtZ,QAAU6F,GAAMyT,EAAKtZ,OAE1D,OAAO,EAGT,GAAIY,IAASiF,EACb,CACE,MAAMtI,EAAQ4a,EAAOvX,GACf/C,EAAMyb,EAAK1Y,GAEjBuX,EAAOvH,OAAOhQ,EAAM,GACpB0Y,EAAK1I,OAAOhQ,EAAM,GAElBuX,EAAOvH,OAAO/K,EAAI,EAAGtI,GACrB+b,EAAK1I,OAAO/K,EAAI,EAAGhI,GAEnB+F,KAAK+oC,UAGP,OAAO,EAGF,YAAY9uC,GAEjB,MAAMvB,EAAIsH,KAAKuR,QAAQtX,GAEvB,OAAW,IAAPvB,GAKGsH,KAAKgpC,KAAKtwC,EAAG,GAGf,WAAWuB,GAEhB,MAAMvB,EAAIsH,KAAKuR,QAAQtX,GAEvB,OAAW,IAAPvB,GAKGsH,KAAKgpC,KAAKtwC,EAAGsH,KAAK0V,KAAKtZ,OAAS,GAGlC,QAAQnC,GAEb,OAAOW,EAASX,GACZA,KAAO+F,KAAK2/B,QACV3/B,KAAK2/B,QAAQ1lC,IACZ,EACH+F,KAAKuU,OAAOhD,QAAQtX,GAGnB,MAAMN,GAEX,MAAMjB,EAAIsH,KAAKuU,OAAOhD,QAAQ5X,GAE9B,OAAc,IAAPjB,OAAW4F,EAAY0B,KAAK0V,KAAKhd,GAGnC,UAEL,OAAOsH,KAAKuU,OAAOxX,IAAI,CAACpD,EAAOjB,IAAM,CAACsH,KAAK0V,KAAKhd,GAAIiB,IAG/C,QAEL,OAAO,IAAIuB,IAAI8E,KAAKkoC,WAGf,WAEL,MAAMe,EAAM7vC,OAAOY,OAAO,MAE1B,IAAK,IAAItB,EAAI,EAAGA,EAAIsH,KAAK0V,KAAKtZ,OAAQ1D,IAEpCuwC,EAAIjpC,KAAK0V,KAAKhd,IAAMsH,KAAKuU,OAAO7b,GAGlC,OAAOuwC,EAGF,QAEL,OAAO,IAAI,GAAQjpC,MAGd,QAAQkpC,GAEb,MAAM,KAAExzB,EAAI,OAAEnB,GAAWvU,KACzB,IAAItH,EAAI,EAER,KAAOA,EAAIgd,EAAKtZ,QAChB,CACE,MAAMnC,EAAMyb,EAAKhd,GAGjBwwC,EAFc30B,EAAO7b,GAELuB,GAEZyb,EAAKhd,KAAOuB,GAEdvB,KAKC,OAAOwI,GAEZ,MAAM,OAAEqT,EAAM,KAAEmB,EAAI,QAAEiqB,GAAY3/B,KAClC,IAAImpC,EAAS,EAEb,IAAK,IAAIzwC,EAAI,EAAGA,EAAI6b,EAAOnY,OAAQ1D,IACnC,CACE,MAAMiB,EAAQ4a,EAAO7b,GACfuB,EAAMyb,EAAKhd,GAEbwI,EAAKvH,EAAOM,IAEdsa,EAAO40B,GAAUxvC,EACjB+b,EAAKyzB,GAAUlvC,EACf0lC,EAAQ1lC,GAAOkvC,EACfA,YAIOxJ,EAAQ1lC,GAIfkvC,EAAS50B,EAAOnY,SAElBmY,EAAOvH,OAAOm8B,EAAQ50B,EAAOnY,OAAS+sC,GACtCzzB,EAAK1I,OAAOm8B,EAAQzzB,EAAKtZ,OAAS+sC,KClXjC,MAAM,WAAkC,GAGtC,oBAAqCrtC,GAE1C,OAAOjB,EAAQiB,IAAMA,EAAEM,OAAS,GAAKxB,EAASkB,EAAE,GAAG7C,MAGrD,YAAmBqI,GAEjB+K,QAEI/K,GAEFtB,KAAKsW,MAAMhV,GAIR,MAAMA,GAEXtB,KAAK4V,QACL5V,KAAKsW,MAAMhV,GAGN,MAAMA,GAEX,GAAI,GAAS8nC,aAAa9nC,GAExB,IAAK,MAAMo2B,KAASp2B,EAElBtB,KAAK1C,IAAIo6B,QAKXrrB,MAAMiK,MAAMhV,GAIT,KAAKA,EAA6BsmC,GAEvCv7B,MAAMi0B,KAAK,IAAI,GAASh/B,GAAUsmC,GAG7B,WACLyB,EACA/rC,EACAC,EACAC,EACAH,GAEA,MAAMD,EAAS,IAAI,GAAYisC,GA4B/B,OA1BIhsC,EACFH,EACE8C,KAAKuU,OACLnX,EAAOmX,OACPlX,EACA,CAACF,EAAQxD,IAAU2D,EAAI0C,KAAMrG,EAAOA,EAAMV,MAC1C,CAACkE,EAAQ0L,EAAOlP,IAAU4D,EAAOyC,KAAMrG,EAAOA,EAAMV,MACpD,CAACkE,EAAQ0L,EAAOlP,EAAOqI,IAAaxE,EAAOwC,KAAMrG,EAAOqI,EAAUrI,EAAMV,QAG1E+G,KAAKwE,QAAQ,CAAC9G,EAAa4rC,KACzB,MAAMl/B,EAAWhN,EAAO7D,IAAI+vC,QACXhrC,IAAb8L,EACF7M,EAAOyC,KAAMtC,EAAa4rC,GAE1B9rC,EAAOwC,KAAMtC,EAAa0M,EAAUk/B,KAIxClsC,EAAOoH,QAAQ,CAAC3G,EAAa0rC,KACtBvpC,KAAKwV,IAAI+zB,IACZjsC,EAAI0C,KAAMnC,EAAa0rC,MAKtBvpC,KAGF,OAAOwpC,EAAwB/K,GAEpC,MAAM/G,EAAQ13B,KAAKzG,IAAIiwC,GACjBC,IAAU/R,GAASA,EAAMz+B,OAASwlC,EASxC,OAPIgL,IAEFzpC,KAAK0pC,MAAMhS,EAAO+G,GAElB/G,EAAMz+B,KAAOwlC,GAGRgL,EAGF,IAAI/R,GAET,OAAO13B,KAAK2pC,OAAOjS,KAAU13B,KAAK2/B,QAG7B,IAAIjI,GAET13B,KAAKmH,IAAIuwB,EAAMz+B,KAAMy+B,GAGhB,OAAOA,GAEZ,OAAO98B,EAAS88B,GAASA,EAAQA,EAAMz+B,KAGlC,QAAQy+B,GAEb,OAAO98B,EAAS88B,GAAS13B,KAAKzG,IAAIm+B,GAASA,EAGtC,QAAQA,GAEb,MAAMh/B,EAAIsH,KAAK2/B,QAAQ3/B,KAAK2pC,OAAOjS,IAEnC,OAAOh9B,EAAShC,GAAKA,GAAK,EAGrB,MAAMg/B,GAEX,OAAOA,EAAMz+B,KAGR,QAEL,OAAO,IAAI,GAAS+G,OC8BjB,MAAM,WAAoB,GAoB/B,YAAmBrB,GAEjB0N,QAEArM,KAAK8E,MAAQ1L,OAAOY,OAAO,MAC3BgG,KAAK4pC,SAAW,GAChB5pC,KAAK6pC,WAAa,GAClB7pC,KAAK8M,YAAc1T,OAAOY,OAAO,MACjCgG,KAAKyL,WAAa,IAAI7G,EAAW,IACjC5E,KAAKgM,UAAY,IAAIpG,EAAU,IAC/B5F,KAAKwK,QAAUpR,OAAOY,OAAO,MAE7BgG,KAAK8pC,SAAW,IAAI,GACpB9pC,KAAK+pC,UAAY,IAAI,GACrB/pC,KAAKgqC,UAAY,IAAI,GACrBhqC,KAAKiqC,SAAW,IAAI,GACpBjqC,KAAKoL,KAAO,IAAI,GAEhBpL,KAAKkhC,gBAAkB,GAAMlM,KAAK,GAAMuG,OAAQ,GAAM2O,UACtDlqC,KAAKqhC,qBAAuB,GAAM9F,OAE9B58B,GAEFqB,KAAK1C,IAAIqB,GAOL,UAAwC5B,EAAiB+O,GAAkB,GAEjF,OAAO/N,EAAUhB,EAAIotC,WAAavtC,GAAMkP,EAASlP,EAAEkP,SAAWlP,GAGzD,OAAOwtC,GAAoB,EAAOzrC,GAEvC,MAAMuL,EAAO,IAAI,GAAY,CAC3BpF,MAAOvG,EAAayB,KAAK8E,OACzBgI,YAAavO,EAAayB,KAAK8M,aAC/Bg9B,SAAU9pC,KAAKqqC,UAAUrqC,KAAK8pC,SAAUM,GACxCL,UAAW/pC,KAAKqqC,UAAUrqC,KAAK+pC,UAAWK,GAC1CJ,UAAWhqC,KAAKqqC,UAAUrqC,KAAKgqC,UAAWI,GAC1CH,SAAUjqC,KAAKqqC,UAAUrqC,KAAKiqC,SAAUG,GACxCh/B,KAAMpL,KAAKqqC,UAAUrqC,KAAKoL,KAAMg/B,KAQlC,OALIzrC,GAEFuL,EAAK5M,IAAIqB,GAGJuL,EAGF,UAELlK,KAAKu+B,QAAQ,UAAWv+B,MAGnB,IAAIsB,GAELA,EAAQwD,OAEVxD,EAAQwD,MAAMN,QAAQlC,GAAQtC,KAAKsqC,QAAQhoC,GAAM,IAGnDtC,KAAKuqC,iBAEDjpC,EAAQwL,aAEVxL,EAAQwL,YAAYtI,QAAQxB,GAAQhD,KAAKwqC,cAAcxnC,IAGzDhD,KAAKyqC,OAAOnpC,GAGP,SAAS8J,GAEd,IAAK,MAAMC,KAAarL,KAAK6pC,WAC7B,CACE,MAAMvnC,EAAO+I,EAAUkM,SAASnM,EAAMpL,MAEtC,GAAIsC,EAEF,OAAOA,EAIX,OAAO,GAAQgJ,SAGV,MAAMhJ,EAAY8I,GAEvB,OAAO,GAAMkL,MAAMhU,EAAMtC,KAAKuX,SAASnM,IAGlC,iBAELpL,KAAK6pC,WAAW9+B,KAAK,CAACrP,EAAGC,IAAMA,EAAEsQ,iBAAmBvQ,EAAEuQ,kBAGjD,QAAwB3J,EAAoBooC,GAAqB,GAEtE1qC,KAAK8E,MAAMxC,EAAKyC,IAAMzC,EACtBtC,KAAK4pC,SAASnrC,KAAK6D,GACnBtC,KAAKwK,QAAQlI,EAAKyC,IAAM,CAACqG,EAAMtG,IAAUxC,EAAKw+B,OAAO11B,EAAMtG,GAC3D9E,KAAK6pC,WAAWprC,KAAK6D,GAEhBooC,GAEH1qC,KAAKuqC,iBAGFjoC,EAAK4J,aAER5J,EAAK4J,YAAa,EAClB5J,EAAKqoC,YAIF,WAAWroC,EAAYhB,EAAiC,CAAEO,QAAQ,EAAMlI,OAAO,EAAO8H,OAAO,IAElG,MAAMmpC,EAAQ5qC,KAAK8pC,SAASv1B,OAAOzF,KAAM+7B,GAAWA,EAAOvoC,KAAKX,aAAaW,EAAMhB,IAEnF,QAAOspC,GAAQA,EAAM3xC,KAGhB,QAAQ6xC,EAA4DxK,GAAgB,EAAM1B,GAAuB,GAEtH,MAAMxzB,EAAO0/B,aAAuB,GAChCA,EACA,GAAc9wC,OAAOgG,KAAM8qC,GAEzB1gC,EAAWpK,KAAKoL,KAAK7R,IAAI6R,EAAKnS,MA6BpC,OA3BImR,GAEEk2B,EAEFl2B,EAASk2B,KAAKl1B,EAAMpL,MAIpBA,KAAKoL,KAAK9N,IAAI8N,GAGhBpL,KAAKu+B,QAAQ,aAAcv+B,KAAMoL,KAIjCpL,KAAKoL,KAAK9N,IAAI8N,GAEdpL,KAAKu+B,QAAQ,UAAWv+B,KAAMoL,IAGhCpL,KAAKu+B,QAAQ,cAAev+B,MAEvB4+B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,QAAQ/G,GAEb,OAAO+G,KAAKoL,KAAK7R,IAAIN,EAAM,MAGtB,WAEL,OAAO+G,KAAKoL,KAGP,WAAW2/B,EAAmCC,GAA8B,EAAMrC,GAAwB,EAAO/J,GAAuB,GAE7I,MAAMxzB,EAAOpL,KAAKoL,KAAKse,QAAQqhB,GAE/B,OAAK3/B,KAKD4/B,GAAsBhrC,KAAKirC,kBAAkB7/B,GAAMhP,OAAS,KAKhE4D,KAAKoL,KAAK7N,OAAO6N,EAAMu9B,GAEvB3oC,KAAKu+B,QAAQ,aAAcv+B,KAAMoL,GACjCpL,KAAKu+B,QAAQ,cAAev+B,MAEvB4+B,GAEH5+B,KAAKw+B,WAGA,GAGF,UAAUI,GAAuB,GAEtC,MAAMxzB,EAAOpL,KAAKoL,KAAKmJ,OAAOlT,QAE9BrB,KAAKoL,KAAKwK,QAEV5V,KAAKu+B,QAAQ,YAAav+B,KAAMoL,GAChCpL,KAAKu+B,QAAQ,cAAev+B,MAEvB4+B,GAEH5+B,KAAKw+B,UAIF,WAAWuM,EAAmCtM,EAAiBG,GAAuB,GAE3F,MAAMxzB,EAAOpL,KAAKoL,KAAKse,QAAQqhB,GACzBG,EAAU9/B,EAAKnS,KAErB,IAAK+G,KAAKoL,KAAK+/B,OAAO//B,EAAMqzB,GAE1B,OAAO,EAGT,MAAM2M,EAAOprC,KAAKirC,kBAAkB7/B,GAyBpC,OAvBAggC,EAAK5mC,QAAS6mC,IAERA,EAAI1xC,iBAAiB,GAEvB0xC,EAAI1xC,MAAM2H,QAAUm9B,EAIpB4M,EAAI1xC,MAAMV,KAAOwlC,IAIrBrzB,EAAKmzB,QAAQ,UAAWnzB,EAAM8/B,GAC9B9/B,EAAKozB,UAELx+B,KAAKu+B,QAAQ,aAAcv+B,KAAMoL,EAAM8/B,GACvClrC,KAAKu+B,QAAQ,cAAev+B,MAEvB4+B,GAEH5+B,KAAKw+B,UAGA4M,EAGF,YAAYE,EAA0ChL,GAAgB,EAAM1B,GAAuB,GAExG,MAAM9iB,EAAOwvB,aAAuB,GAChCA,EACA,GAAKtxC,OAAOgG,KAAMsrC,GAEhBlhC,EAAWpK,KAAK+pC,UAAUxwC,IAAIuiB,EAAK7iB,MA6BzC,OA3BImR,GAEEk2B,EAEFl2B,EAASk2B,KAAKxkB,EAAM9b,MAIpBA,KAAK+pC,UAAUzsC,IAAIwe,GAGrB9b,KAAKu+B,QAAQ,iBAAkBv+B,KAAM8b,KAIrC9b,KAAK+pC,UAAUzsC,IAAIwe,GAEnB9b,KAAKu+B,QAAQ,cAAev+B,KAAM8b,IAGpC9b,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,YAAY/G,GAEjB,OAAO+G,KAAK+pC,UAAUxwC,IAAIN,EAAM,MAG3B,eAEL,OAAO+G,KAAK+pC,UAGP,WAAWwB,EAAmDjL,GAAgB,EAAM1B,GAAuB,GAEhH,MAAM4M,EAAUD,aAA0B,GACtCA,EACA,GAAQvxC,OAAOgG,KAAMurC,GAEnBnhC,EAAWpK,KAAKiqC,SAAS1wC,IAAIiyC,EAAQvyC,MA6B3C,OA3BImR,GAEEk2B,EAEFl2B,EAASk2B,KAAKkL,EAASxrC,MAIvBA,KAAKiqC,SAAS3sC,IAAIkuC,GAGpBxrC,KAAKu+B,QAAQ,gBAAiBv+B,KAAMwrC,KAIpCxrC,KAAKiqC,SAAS3sC,IAAIkuC,GAElBxrC,KAAKu+B,QAAQ,aAAcv+B,KAAMwrC,IAGnCxrC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,WAAW/G,GAEhB,OAAO+G,KAAKiqC,SAAS1wC,IAAIN,EAAM,MAG1B,cAEL,OAAO+G,KAAKiqC,SAGP,cAAcwB,EAAgC9C,GAAwB,EAAO/J,GAAuB,GAEzG,MAAM4M,EAAUxrC,KAAKiqC,SAASvgB,QAAQ+hB,GAEtC,OAAKD,IAKLxrC,KAAKiqC,SAAS1sC,OAAOiuC,EAAS7C,GAE9B3oC,KAAKu+B,QAAQ,gBAAiBv+B,KAAMwrC,GACpCxrC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,WAGA,GAGF,cAAcI,GAAuB,GAE1C,MAAMqL,EAAWjqC,KAAKiqC,SAAS11B,OAAOlT,QAEtCrB,KAAKiqC,SAASr0B,QAEd5V,KAAKu+B,QAAQ,gBAAiBv+B,KAAMiqC,GACpCjqC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,UAIF,UAAUkN,EAAgDpL,GAAgB,EAAM1B,GAAuB,GAE5G,MAAMiM,EAASa,aAAyB,GACpCA,EACA,GAAO1xC,OAAOgG,KAAM0rC,GAElBthC,EAAWpK,KAAK8pC,SAASvwC,IAAIsxC,EAAO5xC,MA6B1C,OA3BImR,GAEEk2B,EAEFl2B,EAASk2B,KAAKuK,EAAQ7qC,MAItBA,KAAK8pC,SAASxsC,IAAIutC,GAGpB7qC,KAAKu+B,QAAQ,eAAgBv+B,KAAM6qC,KAInC7qC,KAAK8pC,SAASxsC,IAAIutC,GAElB7qC,KAAKu+B,QAAQ,YAAav+B,KAAM6qC,IAGlC7qC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,UAAU/G,GAEf,OAAO+G,KAAK8pC,SAASvwC,IAAIN,EAAM,MAG1B,cAEL,OAAO+G,KAAK8pC,SAGP,YAAY6B,EAA6CrL,GAAgB,EAAM1B,GAAuB,GAE3G,MAAMuG,EAAWwG,aAA2B,GACxCA,EACA,IAAI,GAAS3rC,KAAM2rC,GAEjBvhC,EAAWpK,KAAKgqC,UAAUzwC,IAAI4rC,EAASlsC,MA6B7C,OA3BImR,GAEEk2B,EAEFl2B,EAASk2B,KAAK6E,EAAUnlC,MAIxBA,KAAKgqC,UAAU1sC,IAAI6nC,GAGrBnlC,KAAKu+B,QAAQ,iBAAkBv+B,KAAMmlC,KAIrCnlC,KAAKgqC,UAAU1sC,IAAI6nC,GAEnBnlC,KAAKu+B,QAAQ,cAAev+B,KAAMmlC,IAGpCnlC,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,UAGAx+B,KAGF,YAAY/G,GAEjB,OAAO+G,KAAKgqC,UAAUzwC,IAAIN,EAAM,MAG3B,aAAa2yC,GAElB,MAAM5B,EAA8B,GAmBpC,OAjBAhqC,KAAKgqC,UAAUxlC,QAAS2gC,IAEtB,MAAM0G,EAAkB1G,EAAS2G,mBAAmBF,GAEhDC,GAEF7B,EAAUvrC,KAAKotC,GAGjB,MAAME,EAAkB5G,EAAS6G,mBAAmBJ,GAEhDG,GAEF/B,EAAUvrC,KAAKstC,KAIZ/B,EAGF,eAAe/wC,GAEpB,MAAMyc,EAAsB,GACtBm1B,EAAS7qC,KAAK8pC,SAASvwC,IAAIN,GAYjC,OAVI4xC,IAEFn1B,EAAKjX,KAAKosC,EAAOrG,kBAEjBxkC,KAAKgqC,UAAUxlC,QAAS2gC,IAEtBzvB,EAAKjX,QAAQ0mC,EAAS8G,aAAahzC,OAIhCyc,EAGF,eAAew2B,EAAkClB,GAA8B,EAAMrC,GAAwB,EAAO/J,GAAuB,GAEhJ,MAAMuG,EAAWnlC,KAAKgqC,UAAUtgB,QAAQwiB,GAExC,OAAK/G,KAKD6F,GAAsBhrC,KAAKmsC,sBAAsBhH,GAAU/oC,OAAS,KAKxE4D,KAAKgqC,UAAUzsC,OAAO4nC,EAAUwD,GAEhC3oC,KAAKu+B,QAAQ,iBAAkBv+B,KAAMmlC,GACrCnlC,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,WAGA,GAGF,eAAeI,GAAuB,GAE3C,MAAMoL,EAAYhqC,KAAKgqC,UAAUz1B,OAAOlT,QAExCrB,KAAKgqC,UAAUp0B,QAEf5V,KAAKu+B,QAAQ,iBAAkBv+B,KAAMgqC,GACrChqC,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,UAIF,cAAciN,EAAgChN,EAAiBG,GAAuB,GAE3F,MAAM4M,EAAUxrC,KAAKiqC,SAASvgB,QAAQ+hB,GAChCP,EAAUM,EAAQvyC,KAExB,QAAK+G,KAAKiqC,SAASkB,OAAOK,EAAS/M,KAKnC+M,EAAQjN,QAAQ,UAAWiN,EAASN,GACpCM,EAAQhN,UAERx+B,KAAKu+B,QAAQ,gBAAiBv+B,KAAMwrC,EAASN,GAC7ClrC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,WAGA,GAGF,aAAa4N,EAA8B3N,EAAiBG,GAAuB,GAExF,MAAMiM,EAAS7qC,KAAK8pC,SAASpgB,QAAQ0iB,GAC/BlB,EAAUL,EAAO5xC,KAEvB,IAAK+G,KAAK8pC,SAASqB,OAAON,EAAQpM,GAEhC,OAAO,EAGTz+B,KAAKgqC,UAAUxlC,QAAS2gC,IAEtBA,EAASgG,OAAOlyC,KAAMwlC,KAGxB,MAAM2M,EAAOprC,KAAKqsC,oBAAoBpzC,MAyBtC,OAvBAmyC,EAAK5mC,QAAS6mC,IAERA,EAAI1xC,iBAAiB,GAEvB0xC,EAAI1xC,MAAM2H,QAAUm9B,EAIpB4M,EAAI1xC,MAAMV,KAAOwlC,IAIrBoM,EAAOtM,QAAQ,UAAWsM,EAAQK,GAClCL,EAAOrM,UAEPx+B,KAAKu+B,QAAQ,eAAgBv+B,KAAM6qC,EAAQK,GAC3ClrC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,UAGA4M,EAGF,iBAAiBnyC,EAAuB6F,EAAcwiC,GAE3D,MAAMuJ,EAAS7qC,KAAK8pC,SAASvwC,IAAIN,GAE7B4xC,IAEFA,EAAOyB,WAAWxtC,EAAMwiC,GAExBthC,KAAKgqC,UAAUxlC,QAAS2gC,IAEtBA,EAASmH,WAAWzB,EAAO5xC,KAAM6F,EAAMwiC,MAKtC,iBAAiBroC,EAAuB6F,GAE7C,MAAM+rC,EAAS7qC,KAAK8pC,SAASvwC,IAAIN,GAE7B4xC,IAEFA,EAAO0B,WAAWztC,GAElBkB,KAAKgqC,UAAUxlC,QAAS2gC,IAEtBA,EAASoH,WAAW1B,EAAO5xC,KAAM6F,GAE7BqmC,EAAShpC,WAEX6D,KAAKgqC,UAAUzsC,OAAO4nC,MAMvB,aAAaiH,EAA8BpB,GAA8B,EAAMrC,GAAwB,EAAO/J,GAAuB,GAE1I,MAAMiM,EAAS7qC,KAAK8pC,SAASpgB,QAAQ0iB,GAErC,OAAKvB,KAKDG,GAAsBhrC,KAAKqsC,oBAAoBxB,GAAQzuC,OAAS,KAKpE4D,KAAK8pC,SAASvsC,OAAOstC,EAAQlC,GAE7B3oC,KAAKgqC,UAAUxlC,QAAS2gC,IAEtBA,EAAS5nC,OAAOtE,MAEZksC,EAAShpC,WAEX6D,KAAKgqC,UAAUzsC,OAAO4nC,EAAUwD,KAIpC3oC,KAAKu+B,QAAQ,eAAgBv+B,KAAM6qC,GACnC7qC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,WAIA,GAGF,cAAcI,GAAuB,GAE1C,MAAMkL,EAAW9pC,KAAK8pC,SAASv1B,OAAOlT,QAEtCrB,KAAK8pC,SAASl0B,QAEd5V,KAAKu+B,QAAQ,gBAAiBv+B,KAAM8pC,GACpC9pC,KAAKu+B,QAAQ,kBAAmBv+B,MAE3B4+B,GAEH5+B,KAAKw+B,UAIF,eAAeqM,EAAyBrsC,EAAuB2gC,GAEpE,MAAMiM,EAAOprC,KAAKwsC,wBAAwB3B,GAW1C,OATAO,EAAK5mC,QAAS6mC,IAEZA,EAAIrzC,KAAK2U,YAET,MAAM8/B,EAAgBpB,EAAI/oC,KAAKoqC,iBAAiBluC,GAEhD6sC,EAAIjgC,KAAO+zB,EAAQhlB,IAAIsyB,EAAe,CAAE9yC,MAAO0xC,EAAIjgC,SAG9CggC,EAGF,eAAec,EAAkCzN,EAAiBG,GAAuB,GAE9F,MAAMuG,EAAWnlC,KAAKgqC,UAAUtgB,QAAQwiB,GAClChB,EAAU/F,EAASlsC,KAEzB,IAAK+G,KAAKgqC,UAAUmB,OAAOhG,EAAU1G,GAEnC,OAAO,EAGT,MAAM2M,EAAOprC,KAAKmsC,sBAAsBhH,GAkBxC,OAhBAiG,EAAK5mC,QAAS6mC,IAEZA,EAAI1xC,MAAMV,KAAOwlC,IAGnB0G,EAAS5G,QAAQ,UAAW4G,EAAU+F,GACtC/F,EAAS3G,UAETx+B,KAAKu+B,QAAQ,iBAAkBv+B,KAAMmlC,EAAU+F,GAC/ClrC,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,UAGA4M,EAGF,eAAeuB,EAA0BlO,EAAiBG,GAAuB,GAEtF,MAAM9iB,EAAO9b,KAAK+pC,UAAUrgB,QAAQijB,GAC9BzB,EAAUpvB,EAAK7iB,KAErB,IAAK+G,KAAK+pC,UAAUoB,OAAOrvB,EAAM2iB,GAE/B,OAAO,EAGT,MAAM2M,EAAOprC,KAAK4sC,sBAAsB9wB,GAkBxC,OAhBAsvB,EAAK5mC,QAAS6mC,IAEZA,EAAI1xC,MAAMV,KAAOwlC,IAGnB3iB,EAAKyiB,QAAQ,UAAWziB,EAAMovB,GAC9BpvB,EAAK0iB,UAELx+B,KAAKu+B,QAAQ,iBAAkBv+B,KAAM8b,EAAMovB,GAC3ClrC,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,UAGA4M,EAGF,wBAAwBuB,EAA0BzB,EAAiBzM,GAExE,MAAM3iB,EAAO9b,KAAK+pC,UAAUxwC,IAAIozC,GAEhC,IAAK7wB,EAEH,OAAO,EAGT,IAAKA,EAAK+wB,gBAAgB3B,EAASzM,GAEjC,OAAO,EAGT,MAAM2M,EAAOprC,KAAK4sC,sBAAsBD,EAAWzB,GAQnD,OANAE,EAAK5mC,QAAS6mC,IAEZA,EAAI1xC,MAAMkiB,KAAK4iB,GAAW4M,EAAI1xC,MAAMkiB,KAAKqvB,UAClCG,EAAI1xC,MAAMkiB,KAAKqvB,KAGjBE,EAGF,wBAAwBuB,EAA0B1zC,GAEvD,MAAM6iB,EAAO9b,KAAK+pC,UAAUxwC,IAAIozC,GAEhC,IAAK7wB,EAEH,OAAO,EAGT,IAAKA,EAAKgxB,gBAAgB7zC,GAExB,OAAO,EAGT,MAAMmyC,EAAOprC,KAAK4sC,sBAAsBD,EAAW1zC,GAOnD,OALAmyC,EAAK5mC,QAAS6mC,WAELA,EAAI1xC,MAAMkiB,KAAK5iB,KAGjBmyC,EAGF,eAAeuB,EAA0B3B,GAA8B,EAAMrC,GAAwB,EAAO/J,GAAuB,GAExI,MAAM9iB,EAAO9b,KAAK+pC,UAAUrgB,QAAQijB,GAEpC,OAAK7wB,KAKDkvB,GAAsBhrC,KAAK4sC,sBAAsB9wB,GAAM1f,OAAS,KAKpE4D,KAAK+pC,UAAUxsC,OAAOue,EAAM6sB,GAE5B3oC,KAAKu+B,QAAQ,iBAAkBv+B,KAAM8b,GACrC9b,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,WAGA,GAGF,eAAeI,GAAuB,GAE3C,MAAMmL,EAAY/pC,KAAK+pC,UAAUx1B,OAAOlT,QAExCrB,KAAK+pC,UAAUn0B,QAEf5V,KAAKu+B,QAAQ,iBAAkBv+B,KAAM+pC,GACrC/pC,KAAKu+B,QAAQ,mBAAoBv+B,MAE5B4+B,GAEH5+B,KAAKw+B,UAIF,YAA4B7kC,EAAY0pC,EAAoBhoB,EAAsB,MAEvF,MAAM6V,EAASlxB,KAAK2D,QAAQhK,GAE5B,OAAOu3B,aAAkBmS,EAAOnS,EAAS7V,EAGpC,QAAQ1hB,EAAY0hB,GAEzB,GAAI1hB,aAAiB,EAEnB,OAAOA,EAGT,MAAMoL,EAAKlK,EAAQlB,GAASA,EAAM,GAAKA,EACjCyR,EAAOvQ,EAAQlB,GAASA,EAAQ,GAChC+Q,EAAS1K,KAAKwK,QAAQzF,GAE5B,IAAK2F,EACL,CACE,GAAI1K,KAAK8pC,SAASt0B,IAAIzQ,GAEpB,OAAO/E,KAAK8pC,SAASvwC,IAAIwL,GAAIzC,KAG/B,GAAI+Y,EAEF,OAAOA,EAGT,MAAM,IAAI0xB,6BAA6BhoC,kBAAmBtF,KAAKC,UAAU0L,MAG3E,OAAOV,EAAOU,EAAMpL,MAGf,eAEL,OAAOA,KAAK4pC,SAAS7sC,IAAKnD,GAAMA,EAAE0R,UAG7B,iBAEL,OAAOtL,KAAKgtC,eAAe/rC,OAAQrH,GAAMA,EAAE4c,YAGtC,kBAEL,OAAOxW,KAAKgtC,eAAe/rC,OAAQrH,IAAOA,EAAE4c,YAGvC,uBAEL,OAAOxW,KAAK4pC,SAAS3oC,OAAQrH,GAAMA,EAAE0R,SAASkL,YAGzC,wBAEL,OAAOxW,KAAK4pC,SAAS3oC,OAAQrH,IAAOA,EAAE0R,SAASkL,YAG1C,YAAYzR,GAEjB,MAAMc,EAAO7F,KAAKgM,UAAUzS,IAAIwL,GAEhC,GAAIc,EAEF,OAAOA,EAGT,MAAOonC,GAAYloC,EAAGqM,MAAMtL,EAAGiB,WACzBzE,EAAOtC,KAAK8E,MAAMmoC,GAExB,OAAO3qC,EAAOA,EAAK0J,UAAUzS,IAAIwL,GAAM,KAGlC,sBAAsBA,EAAY6Y,EAAyB,MAEhE,MAAM/X,EAAO7F,KAAKsQ,YAAYvL,GAE9B,IAAKc,EAEH,OAAO,KAGT,MAAMH,EAAK1F,KAAKuQ,aAAa1K,EAAKH,IAC5BZ,EAAQ9E,KAAK8c,kBAAkBjX,EAAKH,IAE1C,OAAKA,GAAOZ,EAKL9E,KAAKktC,sBAAsBpoC,EAAMa,WAAY,CAAE,CAACE,EAAKlM,OAAQikB,IAH3D,KAMJ,gBAAgBA,GAErB,MAAMuvB,EAAYntC,KAAK8E,MAAM8Y,EAAU+I,SAEvC,OAAOwmB,EAAYA,EAAUnhC,UAAU5K,KAAO,GAGzC,YAAYwc,EAAiB7Y,GAElC,MAAMooC,EAAYntC,KAAK8E,MAAM8Y,EAAU+I,SAEvC,QAAOwmB,KAAcA,EAAUnhC,UAAUzS,IAAIwL,GAGxC,aAAaA,GAElB,MAAMW,EAAK1F,KAAKyL,WAAWlS,IAAIwL,GAE/B,GAAIW,EAEF,OAAOA,EAGT,MAAOunC,GAAYloC,EAAGqM,MAAMtL,EAAGiB,WACzBzE,EAAOtC,KAAK8E,MAAMmoC,GAExB,OAAO3qC,EAAOA,EAAKmJ,WAAWlS,IAAIwL,GAAM,KAGnC,kBAAkBA,GAEvB,MAAMW,EAAK1F,KAAKyL,WAAW2hC,SAASroC,GAEpC,GAAIW,EAEF,OAAOA,EAGT,MAAOunC,GAAYloC,EAAGqM,MAAMtL,EAAGiB,WACzBzE,EAAOtC,KAAK8E,MAAMmoC,GAExB,OAAO3qC,EAAOA,EAAKmJ,WAAW2hC,SAASroC,GAAM,KAGxC,uBAAuBA,EAAYG,EAAuBwX,EAAoCvZ,GAEnG,MAAMuC,EAAK1F,KAAKuQ,aAAaxL,GACvBD,EAAQ9E,KAAK8c,kBAAkB/X,GAErC,IAAKW,IAAOZ,EAEV,OAAO,KAGT,MAAMa,EAAab,EAAMa,WAEzB,GAAIA,aAAsB,EAExB,OAAOA,EAGT,IAAKhB,EAAwBgB,GAE3B,OAAOA,EAAW2F,SAAS2L,cAG7B,MAAMo2B,EAAa3nC,EAAGJ,iBAAiBlJ,OAAS,EAC5C4D,KAAKstC,uBAAuBvoC,EAAIG,EAAQwX,EAAYvZ,EAAS2B,EAAMyoC,UACnE,GAEJ,OAAOvtC,KAAKktC,sBAAsBpoC,EAAMa,WAAY0nC,GAG/C,0BAA0BtoC,EAAYG,EAAuBwX,EAAoCvZ,EAAeoqC,GAAoB,GAEzI,MAAMC,EAAUxtC,KAAK8c,kBAAkB/X,GAEvC,IAAKyoC,EAEH,MAAO,GAGT,MAAMH,EAAartC,KAAKstC,uBAAuBvoC,EAAIG,EAAQwX,EAAYvZ,EAASoqC,GAEhF,OAAOxvC,EAAUsvC,EAAY,CAAC3O,EAAWzlC,IAAS+G,KAAKktC,sBAAsBM,EAAQtoC,OAAOjM,IAASu0C,EAAQroC,SAASlM,IAASylC,EAAW2O,IAGrI,uBAAuBtoC,EAAYG,EAAuBwX,EAAoCvZ,EAAeoqC,GAAoB,GAEtI,MAAMzoC,EAAiB,GACjBY,EAAK1F,KAAKuQ,aAAaxL,GACvByoC,EAAUxtC,KAAK8c,kBAAkB/X,GAEvC,IAAKW,IAAO8nC,EAEV,OAAO1oC,EAGT,IAAK,MAAMqX,KAASjX,EAElB,IAAoC,IAAhCQ,EAAGL,SAASkM,QAAQ4K,GACxB,CACE,MAAMuiB,EAAYx5B,EAAOiX,GAAOxY,QAAQ3D,KAAMmD,GAE1Cu7B,IAEF55B,EAAMqX,GAASoxB,EAAW7O,EAAYA,EAAU98B,qBAKtD,MAAQuB,QAASka,EAAcjY,MAAOqoC,GAAgBztC,KAAKuO,oBAAoBpL,GAE/E,IAAK,MAAMuqC,KAAchoC,EAAGN,MAC5B,CACE,MAAMuoC,EAAY3tC,KAAKktC,sBAAsBM,EAAQpoC,MAAMsoC,GAAa5oC,GAExE,GAAI6oC,EACJ,CAGEF,EAFc/wB,EAAWgxB,IAAeA,GAEnBH,EAAWI,EAAYA,EAAU/rC,qBAI1D,IAAK,MAAMua,KAASjX,EAElB,IAAoC,IAAhCQ,EAAGL,SAASkM,QAAQ4K,GACxB,CACE,MAAMuiB,EAAYx5B,EAAOiX,GAAOxY,QAAQ3D,KAAMqd,GAE1CqhB,IAEF55B,EAAMqX,GAASoxB,EAAW7O,EAAYA,EAAU98B,qBAKtD,IAAK,MAAMua,KAASzW,EAAGR,OAEhBJ,EAAMqX,KAETrX,EAAMqX,GAASnc,KAAKktC,sBAAsBM,EAAQtoC,OAAOiX,GAAQrX,IAIrE,IAAK,MAAMqX,KAASzW,EAAGP,SAEhBL,EAAMqX,KAETrX,EAAMqX,GAASnc,KAAKktC,sBAAsBM,EAAQroC,SAASgX,GAAQrX,IAIvE,OAAOA,EAGF,yBAAyBC,EAAYD,EAAgB4X,EAAoCvZ,GAE9F,MAAMuC,EAAK1F,KAAKuQ,aAAaxL,GACvByoC,EAAUxtC,KAAK8c,kBAAkB/X,IAC/B5B,QAASyqC,EAAexoC,MAAOqoC,GAAgBztC,KAAKuO,oBAAoBpL,GAEhF,IAAK,MAAMuqC,KAAchoC,EAAGN,MAC5B,CACE,MAAMuoC,EAAY3tC,KAAKktC,sBAAsBM,EAAQpoC,MAAMsoC,GAAa5oC,GAExE,GAAI6oC,EACJ,CAGEF,EAFc/wB,EAAWgxB,IAAeA,GAEnBC,EAAU/rC,qBAInC,OAAOgsC,EAGF,oBAAoB3jC,EAAgB7E,EAAiB,IAM1D,MAAO,CAAEjC,QAJO8G,aAAoB,GAChC,IAAI,GAAW,CAAEpL,MAAOuG,EAAQ,OAAH,wBAAQ6E,EAAS3I,QAAQzC,OAAUuG,KAChE,IAAI,GAAS,CAAE,IAAI,GAAW,CAAEvG,MAAOuG,IAAU6E,IAEnC7E,SAGb,WAAW6E,EAAgB7E,GAEhC,OAAOpF,KAAKuO,oBAAoBtE,EAAU7E,GAAOjC,QAG5C,oBAAoB0qC,EAAgBC,EAAyBC,GAIlE,MAAM/wC,EAAOgD,KAAKuQ,aAAas9B,GACzBG,EAAYhuC,KAAK8c,kBAAkBixB,GACnCE,EAAWjxC,EAAKkI,OAAOqW,OAAOve,EAAKmI,UACnClD,EAAKjC,KAAKuQ,aAAaw9B,GACvBG,EAAUluC,KAAK8c,kBAAkBixB,GACjCI,EAAkC/0C,OAAOY,OAAO,MAChDo0C,EAAkBh1C,OAAOY,OAAO,MAGhCqzC,EAAa9uC,EAAauvC,EAFN,CAACn0C,EAAaM,IACtC,CAACA,EAAKN,EAAOs0C,EAAS18B,QAAQtX,KAE7BgH,OAAO,EAAE,CAAC,CAAE4H,KAAWA,GAAS,GAChCkC,KAAK,EAAE,CAAC,CAAErP,IAAK,CAAC,CAAEC,KAAOD,EAAIC,GAE1B0yC,EAAgB,CAAClyB,EAAemyB,KAEpC,GAA0B,IAAtBjB,EAAWjxC,OAEb,OAAO,KAGT,IAAImyC,GAAe,EAEnB,GAAI5pC,EAAwB2pC,IAKL,KAHrBC,EAAclB,EAAWzvC,UAAU,EAAE,CAAE0E,KACrCA,EAAK0B,YAAY,GAAM6K,MAAMy/B,EAAU,OAAD,wBAAMF,GAAM,CAAE,CAACjyB,GAAQ7Z,IAAQtC,YAIrEuuC,EAAclB,EAAWzvC,UAAU,EAAE,CAAE0E,KACrC,GAAMuM,MAAMy/B,EAAU,OAAD,wBAAMF,GAAM,CAAE,CAACjyB,GAAQ7Z,IAAOtC,OAAOgE,YAAY1B,SAI5E,CACE,MAAMo8B,EAAY,GAAM7vB,MAAMy/B,GAE9BC,EAAclB,EAAWzvC,UAAU,EAAE,CAAE0E,KAAUo8B,EAAU16B,YAAY1B,IAGzE,IAAqB,IAAjBisC,EAEF,OAAO,KAGT,MAAMC,EAASnB,EAAWkB,GAC1BlB,EAAWrgC,OAAOuhC,EAAa,GAC/BJ,EAAQK,EAAO,IAAMryB,EACrBiyB,EAAOjyB,GAASqyB,EAAO,IAGzB,IAAK,MAAMryB,KAASla,EAAGiD,OACvB,CAGE,GAAc,OAFAmpC,EAAclyB,EAAO+xB,EAAQhpC,OAAOiX,IAIhD,OAAO,KAIX,IAAK,MAAMhX,KAAYlD,EAAGkD,SAExBkpC,EAAclpC,EAAU+oC,EAAQ/oC,SAASA,IAG3C,MAAMspC,EAAWpB,EAAWtwC,IAAI,EAAE9C,KAASA,GAE3C,MAAO,CAAE+C,OAAMgxC,YAAW/rC,KAAIisC,UAASC,UAASM,YAK3C,sBAAsB/xC,EAAgCwI,GAE3D,OAAOxI,aAAiB,EACpBA,EACA,aAAcA,EACZA,EAAM4O,SAASmB,QACfvH,EACE,GAAM2J,MAAMnS,EAAMwI,EAAQlF,OAC1B,KAGH,2BAA2BgD,EAAkBG,GAElD,MAAMb,EAAOU,EAAKW,QAAQ3D,KAAMmD,GAEhC,OAAOb,EAAOtC,KAAK0uC,qBAAqBpsC,EAAKV,qBAAuB,GAG/D,yBAAyBisC,EAAgBC,GAE9C,OAAO9tC,KAAKmW,gBACTpZ,IAAI,EAAG2I,QAAS1F,KAAK2uC,oBAAoBd,EAAQC,EAAgBpoC,EAAGX,KACpE9D,OAAQktC,KAAcA,GAGpB,qBAAqB7rC,EAAYssC,GAA0B,GAEhE,OAAO5uC,KAAKmW,cAAc,EAAGzQ,KAAIZ,YAE/B,MAAMsX,EAAY1W,EAAGR,OAAO,GACtB2pC,EAAc/pC,EAAMI,OAAOkX,GAEjC,GAAIyyB,EACJ,CACE,MAAMC,EAAS9uC,KAAKktC,sBAAsB2B,EAAa,CAAE,CAACzyB,GAAY9Z,IAEtE,GAAIwsC,EACJ,CACE,GAAIxsC,EAAK0B,YAAY8qC,GAEnB,OAAO,EAGT,GAAIF,GACFlpC,EAAGJ,iBAAiBlJ,OAAS,GAC7BuI,EAAwBG,EAAMa,cAC7BmpC,aAAkB,IAAWA,aAAkB,IAEhD,OAAO,GAKb,OAAO,IAIJ,kCAAkC9rC,EAAkBG,EAAekqC,EAAsB,GAAIuB,GAA0B,GAE5H,MAAMtsC,EAAOU,EAAKW,QAAQ3D,KAAMmD,GAEhC,OAAOb,EAAOtC,KAAK+uC,4BAA4BzsC,EAAKV,oBAAqByrC,EAAYuB,GAAkB,GAGlG,4BAA4BtsC,EAAY+qC,EAAsB,GAAIuB,GAA0B,GAEjG,OAAO5uC,KAAKmW,cAAc,EAAGzQ,KAAIZ,YAE/B,MAAMa,EAAa3F,KAAKktC,sBAAsBpoC,EAAMa,WAAY0nC,GAEhE,GAAI1nC,EACJ,CACE,GAAIrD,EAAK0B,YAAY2B,GAEnB,OAAO,EAGT,GAAIipC,GACFlpC,EAAGJ,iBAAiBlJ,OAAS,GAC7BuI,EAAwBG,EAAMa,cAC7BA,aAAsB,IAAWA,aAAsB,IAExD,OAAO,EAIX,OAAO,IAIJ,iCAAiCT,EAAuB/B,GAE7D,OAAOnD,KAAKgvC,2BAA2BjxC,EAAUmH,EAAQlC,IAEvD,MAAMV,EAAOU,EAAKW,QAAQ3D,KAAMmD,GAEhC,OAAOb,EAAOA,EAAKV,yBAAsBtD,KAItC,2BAA2B+uC,GAEhC,MAAM4B,EAAa71C,OAAOsc,KAAK23B,GAE/B,OAAOrtC,KAAKmW,cAAc,EAAGrR,YAE3B,IAAK,MAAMqX,KAAS8yB,EACpB,CACE,MAAMJ,EAAc/pC,EAAMI,OAAOiX,IAAUrX,EAAMK,SAASgX,GAE1D,IAAK0yB,EAEH,OAAO,EAGT,MAAMC,EAAS9uC,KAAKktC,sBAAsB2B,EAAaxB,GAEvD,IAAKyB,IAAWzB,EAAWlxB,GAAOnY,YAAY8qC,GAE5C,OAAO,EAIX,OAAO,IAIJ,cAAcI,EAA+G,MAAM,IAExI,MAAMja,EAAuB,GAEvBka,EAAqB1jC,IAEzB,MAAM1O,EAAM0O,EAAW1O,IAEvB,IAAK,MAAMgI,KAAMhI,EACjB,CACE,MAEMinC,EAAO,CAAEt+B,GAFJ3I,EAAIgI,GAEID,MADL2G,EAAW3G,MAAMC,IAG3BmqC,EAAYlL,IAEd/O,EAAIx2B,KAAKulC,KASf,OAJAmL,EAAkBnvC,KAAKyL,YAEvBrN,EAAW4B,KAAK8E,MAAOlL,GAAKu1C,EAAkBv1C,EAAE6R,aAEzCwpB,EAGF,YAAY/0B,EAAoBiD,EAAeisC,EAAqBlvC,EAAK9D,QAE9E,IAAI+I,GAAW,EACXjD,EAAOiB,EAEX,IAAK,IAAIzK,EAAI,EAAGA,EAAI02C,EAAY12C,IAChC,CAGE,KAFAwJ,EAAOA,EAAKuC,WAAWvE,EAAKxH,GAAIsH,KAAMmD,IAIpC,OAAO,KAGTgC,EAAWA,GAAYjD,EAAK4B,aAG9B,OAAOqB,IAAajD,EAAK4B,aAAe,GAAMqB,SAASjD,GAAQA,EAG1D,cAAoCc,GAEzChD,KAAK8M,YAAY9J,EAAK+B,IAAM/B,EAGvB,cAAcrJ,GAEnB,GAAIA,aAAiB,EAEnB,OAAOA,EAEJ,GAAIkB,EAAQlB,GACjB,CACE,MAAM01C,EAAYrvC,KAAK8M,YAAYnT,EAAM,IAEzC,IAAK01C,EAEH,MAAM,IAAItC,MAAM,oCAAsCttC,KAAKC,UAAU/F,IAGvE,OAAO01C,EAAUvO,OAAOnnC,EAAOqG,MAGjC,OAAO,IAAI,GAAmBrG,GAGzB,oBAAoBkxC,GAEzB,MAAM5xC,EAAO4xC,EAAS7qC,KAAK8pC,SAASH,OAAOkB,QAAUvsC,EAE/CwG,EAAQ9E,KAAKsvC,uBAAuB,IAAYruC,OAAQ2vB,IACnD33B,GAAQA,IAAS23B,EAAMj3B,MAAM2H,SAGlCgL,EAAQtM,KAAKuvC,6BAA6B,IAAqBtuC,OAAQ2vB,IAClE33B,GAAQA,IAAS23B,EAAMj3B,MAAMV,MAGxC,OAAQ6L,EAAuCyW,OAAOjP,GAGjD,kBAAkBlB,GAEvB,MAAMnS,EAAOmS,EAAOpL,KAAKoL,KAAKu+B,OAAOv+B,QAAQ9M,EAEvCwG,EAAQ9E,KAAKsvC,uBAAuB,IAAeruC,OAAQ2vB,IACtD33B,GAAQA,IAAS23B,EAAMj3B,MAAM2H,SAGlCgL,EAAQtM,KAAKuvC,6BAA6B,IAAmBtuC,OAAQ2vB,IAChE33B,GAAQA,IAAS23B,EAAMj3B,MAAMV,MAGxC,OAAQ6L,EAAqCyW,OAAOjP,GAG/C,wBAAwBu+B,GAE7B,MAAM5xC,EAAO4xC,EAAS7qC,KAAK8pC,SAASH,OAAOkB,QAAUvsC,EAErD,OAAO0B,KAAKwvC,2BAA2B,IAAYvuC,OAAQ2vB,IAChD33B,GAAQA,IAAS23B,EAAMtuB,KAAKhB,SAIlC,sBAAsB6jC,GAE3B,MAAMlsC,EAAOksC,EAAWnlC,KAAKgqC,UAAUL,OAAOxE,QAAY7mC,EAE1D,OAAO0B,KAAKuvC,6BAA6B,IAAuBtuC,OAAQ2vB,IAC7D33B,GAAQA,IAAS23B,EAAMj3B,MAAMV,MAInC,sBAAsB6iB,EAAsBK,GAEjD,MAAMljB,EAAO6iB,EAAO9b,KAAK+pC,UAAUJ,OAAO7tB,QAAQxd,EAElD,OAAO0B,KAAKuvC,6BAA6B,IAAkBtuC,OAAQ2vB,KACxD33B,GAAQA,IAAS23B,EAAMj3B,MAAMV,SAAWkjB,GAASA,KAASyU,EAAMj3B,MAAMkiB,OAI5E,uBAAuCsxB,GAE5C,MAAM/B,EAAsC,GAc5C,OAZAprC,KAAKyvC,mBAAmBjrC,QAASuJ,IAC/BA,EAASzL,KAAKjC,SAAS,IAAI,EAAWgrC,IAChCA,aAAe8B,GACjB/B,EAAK3sC,KAAK,CACR9E,MAAO0xC,EACPrzC,KAAM+V,EAASzL,KACflF,OAAQ2Q,EAAS3Q,cAMlBguC,EAGF,2BAA2C+B,GAEhD,MAAM/B,EAA0C,GAehD,OAbAprC,KAAK0vC,mBAAmBlrC,QAASuJ,IAC/BA,EAASzL,KAAKjC,SAAS,IAAI,EAAWiC,IAChCA,aAAgB6qC,GAClB/B,EAAK3sC,KAAK,CACR6D,OACA8I,KAAM2C,EAAS3C,KACfpT,KAAM+V,EAASzL,KACflF,OAAQ2Q,EAAS3Q,cAMlBguC,EAGF,6BAAmDiE,GAExD,MAAMjE,EAA4C,GAclD,OAZAprC,KAAK2vC,yBAAyBnrC,QAASuJ,IACrCA,EAAS/K,KAAK3C,SAAS,IAAI,EAAWgrC,IAChCA,aAAegE,GACjBjE,EAAK3sC,KAAK,CACR9E,MAAO0xC,EACPrzC,KAAM+V,EAAS/K,KACf5F,OAAQ2Q,EAAS3Q,cAMlBguC,EAGF,mBAEL,MAAM9L,EAAuC,GAmE7C,OAhEAt/B,KAAKiqC,SAASzlC,QAASgnC,IACrBA,EAAQrE,SAAS3iC,QAAS+iC,IACxBjI,EAAU7gC,KAAK,CACb2M,KAAMm8B,EAAQn8B,KACd9I,KAAMkpC,EAAQnzB,SACdjb,OAAQ,CAACouC,EAASjE,SAKxBvnC,KAAK+pC,UAAUvlC,QAASsX,IACtB,MAAMnW,EAAamW,EAAKG,cAAcjc,MAEtC8b,EAAKkC,MAAMxZ,QAASX,IAClBy7B,EAAU7gC,KAAK,CACb2M,KAAMvH,EAAKgY,KACXvZ,KAAMwZ,EAAK5W,OACX9H,OAAQ,CAAC0e,EAAMjY,EAAM,UAGvBy7B,EAAU7gC,KAAK,CACb2M,KAAMvH,EAAKJ,SACXnB,KAAMqD,EACNvI,OAAQ,CAAC0e,EAAMjY,EAAM,kBAK3B7D,KAAKoL,KAAK5G,QAAS4G,IACjBk0B,EAAU7gC,KAAK,CACb2M,KAAMA,EAAKA,KACX9I,KAAM8I,EAAKiN,SACXjb,OAAQgO,MAIZpL,KAAK8pC,SAAStlC,QAASqmC,IACjBA,EAAOvL,WAAauL,EAAOvL,UAAUljC,OAAS,GAChDkjC,EAAU7gC,KAAK,CACb2M,KAAMy/B,EAAOvL,UACbh9B,KAAM,GAAMlB,KAAKypC,EAAOvoC,MACxBlF,OAAQytC,IAIZzsC,EAAWysC,EAAOtL,QAAUW,IAC1B,MAAMv6B,EAAau6B,EAAOjkB,cAAcjc,MAExCkgC,EAAOliB,MAAMxZ,QAASX,IACpBy7B,EAAU7gC,KAAK,CACb2M,KAAMvH,EAAKgY,KACXvZ,KAAM49B,EAAOh7B,OACb9H,OAAQ,CAACytC,EAAQ3K,EAAQr8B,EAAM,UAGjCy7B,EAAU7gC,KAAK,CACb2M,KAAMvH,EAAKJ,SACXnB,KAAMqD,EACNvI,OAAQ,CAACytC,EAAQ3K,EAAQr8B,EAAM,oBAMhCy7B,EAGF,iBAAiBsQ,GAAmB,GAEzC,MAAMtQ,EAAuC,GAqF7C,OAnFAt/B,KAAKiqC,SAASzlC,QAASgnC,IACrBlM,EAAU7gC,KAAK,CACb6D,KAAMkpC,EAAQnzB,SACdjb,OAAQouC,MAIZxrC,KAAK+pC,UAAUvlC,QAASsX,IACtBwjB,EAAU7gC,KAAK,CACb6D,KAAMwZ,EAAK5W,OACX9H,OAAQ,CAAC0e,EAAM,YAGb8zB,GACFtQ,EAAU7gC,KAAK,CACb6D,KAAMwZ,EAAKG,cAAcjc,MACzB5C,OAAQ,CAAC0e,EAAM,kBAKrB9b,KAAKoL,KAAK5G,QAAS4G,IACjBk0B,EAAU7gC,KAAK,CACb6D,KAAM8I,EAAKiN,SACXjb,OAAQgO,MAIZpL,KAAK8pC,SAAStlC,QAASqmC,IACrBvL,EAAU7gC,KAAK,CACb6D,KAAMuoC,EAAOvoC,KACblF,OAAQytC,IAGVzsC,EAAWysC,EAAOtL,QAAUW,IAC1BZ,EAAU7gC,KAAK,CACb6D,KAAM49B,EAAOh7B,OACb9H,OAAQ,CAACytC,EAAQ3K,EAAQ,YAGvB0P,GACFtQ,EAAU7gC,KAAK,CACb6D,KAAM49B,EAAOjkB,cAAcjc,MAC3B5C,OAAQ,CAACytC,EAAQ3K,EAAQ,kBAK3B0P,IACE/E,EAAO5wC,MAAQ,GAAa8T,UAC9BuxB,EAAU7gC,KAAK,CACb6D,KAAMuoC,EAAO5K,gBACb7iC,OAAQ,CAACytC,EAAQ,SAIjBA,EAAOtzB,WAAa,GAAaxJ,UACnCuxB,EAAU7gC,KAAK,CACb6D,KAAMuoC,EAAOzJ,qBACbhkC,OAAQ,CAACytC,EAAQ,eAKvBzsC,EAAWysC,EAAOpL,YAAa,CAACc,EAAYzhC,KAC1CwgC,EAAU7gC,KAAK,CACb6D,KAAMi+B,EAAWQ,YACjB3jC,OAAQ,CAACytC,EAAQ/rC,EAAMyhC,SAKzBqP,GACF5vC,KAAKgqC,UAAUxlC,QAAS2gC,IAClBA,EAAS3B,QACXlE,EAAU7gC,KAAK,CACb6D,KAAM6iC,EAAS3B,OAAO,GACtBpmC,OAAQ+nC,MAMT7F,EAGF,yBAEL,MAAMA,EAA6C,GAwDnD,OAtDAt/B,KAAKiqC,SAASzlC,QAASgnC,IACrBlM,EAAU7gC,KAAK,CACb0E,QAASqoC,EAAQnzB,SACjBrV,KAAMwoC,EAAQp/B,WACdhP,OAAQouC,MAIZxrC,KAAK+pC,UAAUvlC,QAASsX,IACtBwjB,EAAU7gC,KAAK,CACb0E,QAAS2Y,EAAK5W,OACdlC,KAAM8Y,EAAK1P,WACXhP,OAAQ0e,MAIZ9b,KAAK8pC,SAAStlC,QAASqmC,IACrBzsC,EAAWysC,EAAOtL,QAAUW,IAC1BZ,EAAU7gC,KAAK,CACb0E,QAAS+8B,EAAO2P,gBAChB7sC,KAAMk9B,EAAO9zB,WACbhP,OAAQ,CAACytC,EAAQ3K,OAIjB2K,EAAOiF,SAAS9vC,QAClBs/B,EAAU7gC,KAAK,CACb0E,QAAS0nC,EAAO5K,gBAChBj9B,KAAM6nC,EAAO5wC,IACbmD,OAAQ,CAACytC,EAAQ,SAGnBvL,EAAU7gC,KAAK,CACb0E,QAAS0nC,EAAOzJ,qBAChBp+B,KAAM6nC,EAAOtzB,SACbna,OAAQ,CAACytC,EAAQ,cAGnBzsC,EAAWysC,EAAOpL,YAAa,CAACc,EAAYzhC,KAC1CwgC,EAAU7gC,KAAK,CACb0E,QAAS0nC,EAAOkF,iBAAiBjxC,GACjCkE,KAAMu9B,EAAWz0B,OACjB1O,OAAQ,CAACytC,EAAQ/rC,EAAMyhC,EAAY,YAGrCjB,EAAU7gC,KAAK,CACb0E,QAAS0nC,EAAOmF,iBAAiBlxC,GACjCkE,KAAMu9B,EAAWO,OACjB1jC,OAAQ,CAACytC,EAAQ/rC,EAAMyhC,EAAY,iBAMpCjB,EAGF,SAEL,MAAO,CACLwK,SAAU9pC,KAAKqqC,UAAUrqC,KAAK8pC,UAC9BC,UAAW/pC,KAAKqqC,UAAUrqC,KAAK+pC,WAC/BC,UAAWhqC,KAAKqqC,UAAUrqC,KAAKgqC,WAC/BC,SAAUjqC,KAAKqqC,UAAUrqC,KAAKiqC,UAC9B7+B,KAAMpL,KAAKqqC,UAAUrqC,KAAKoL,OAIvB,KAAK6kC,GAENA,EAAS7kC,MAEXpL,KAAKoL,KAAK8kC,WACRD,EAAS7kC,KACT,CAACrO,EAAKpD,IAAUqG,KAAKmwC,QAAQx2C,GAAO,GAAO,GAC3C,CAACoD,EAAKpD,IAAUqG,KAAKowC,WAAWz2C,GAAO,GAAO,GAAM,GACpD,CAACoD,EAAKpD,EAAOqI,IAAahC,KAAKmwC,QAAQnuC,GAAU,GAAM,IAIvDiuC,EAASlG,WAEX/pC,KAAK+pC,UAAUmG,WACbD,EAASlG,UACT,CAAChtC,EAAKpD,IAAUqG,KAAKqwC,YAAY12C,GAAO,GAAO,GAC/C,CAACoD,EAAKpD,IAAUqG,KAAKswC,eAAe32C,GAAO,GAAO,GAAM,GACxD,CAACoD,EAAKpD,EAAOqI,IAAahC,KAAKqwC,YAAYruC,GAAU,GAAM,IAI3DiuC,EAASnG,UAEX9pC,KAAK8pC,SAASoG,WACZD,EAASnG,SACT,CAAC/sC,EAAKpD,IAAUqG,KAAKuwC,UAAU52C,GAAO,GAAO,GAC7C,CAACoD,EAAKpD,IAAUqG,KAAKwwC,aAAa72C,GAAO,GAAO,GAAM,GACtD,CAACoD,EAAKpD,EAAOqI,IAAahC,KAAKuwC,UAAUvuC,GAAU,GAAM,IAIzDiuC,EAASjG,WAEXhqC,KAAKgqC,UAAUkG,WACbD,EAASjG,UACT,CAACjtC,EAAKpD,IAAUqG,KAAKywC,YAAY92C,GAAO,GAAO,GAC/C,CAACoD,EAAKpD,IAAUqG,KAAK0wC,eAAe/2C,GAAO,GAAO,GAAM,GACxD,CAACoD,EAAKpD,EAAOqI,IAAahC,KAAKywC,YAAYzuC,GAAU,GAAM,IAI3DiuC,EAAShG,UAEXjqC,KAAKiqC,SAASiG,WACZD,EAAShG,SACT,CAACltC,EAAKpD,IAAUqG,KAAK2wC,WAAWh3C,GAAO,GAAO,GAC9C,CAACoD,EAAKpD,IAAUqG,KAAK4wC,cAAcj3C,GAAO,GAAM,GAChD,CAACoD,EAAKpD,EAAOqI,IAAahC,KAAK2wC,WAAW3uC,GAAU,GAAM,IAKzD,OAAOiuC,GAERA,EAAS7kC,MAEXhN,EAAW6xC,EAAS7kC,KAAOA,GACzBpL,KAAKmwC,QAAQ/kC,IAIb6kC,EAASlG,WAEX3rC,EAAW6xC,EAASlG,UAAYjuB,GAC9B9b,KAAKqwC,YAAYv0B,IAIjBm0B,EAASnG,UAEX1rC,EAAW6xC,EAASnG,SAAW/7B,GAC7B/N,KAAKuwC,UAAUxiC,IAIfkiC,EAASjG,WAEX5rC,EAAW6xC,EAASjG,UAAY1oC,GAC9BtB,KAAKywC,YAAYnvC,IAIjB2uC,EAAShG,UAEX7rC,EAAW6xC,EAAShG,SAAW3oC,GAC7BtB,KAAK2wC,WAAWrvC,KCthEjB,MAAM,GAUX,YAAoBw8B,GAElB99B,KAAK89B,KAAOA,EACZ99B,KAAKi1B,IAAM77B,OAAOY,OAAO,MACzBgG,KAAKsM,MAAQlT,OAAOY,OAAO,MAC3BgG,KAAK6wC,eAAiB,GAAQC,wBAGzB,OAAOhT,GAEZ,MAAM5zB,EAAO,IAAI,GAAQ4zB,GAAQ99B,KAAK89B,MAMtC,OAJA1kC,OAAO0lC,OAAO50B,EAAK+qB,IAAKj1B,KAAKi1B,KAC7B77B,OAAO0lC,OAAO50B,EAAKoC,MAAOtM,KAAKsM,OAC/BpC,EAAK2mC,eAAiB7wC,KAAK6wC,eAEpB3mC,EAGF,aACL0S,EACAm0B,GAKA,OAFA/wC,KAAKi1B,IAAIrY,EAAU7X,IAAMgsC,EAElB/wC,KAGF,cAAoCsC,EAA0BpJ,GAInE,OAFA8G,KAAKsM,MAAMhK,EAAKyC,IAAM7L,EAEf8G,KAGF,YAAa/G,GAElB,OAAO+G,KAAK89B,KAAK/hB,YAAY9iB,GAGxB,aAAc8L,GAEnB,OAAO/E,KAAKi1B,IAAIlwB,GAGX,YAAaA,GAElB,OAAO/E,KAAK89B,KAAKxtB,YAAYvL,GAGxB,0BAA2BA,GAEhC,MAAMW,EAAK1F,KAAK89B,KAAKvtB,aAAaxL,GAElC,OAAOW,EAAKA,EAAGD,cAAgB,GAG1B,cAAeV,GAEpB,OAAO/E,KAAKsM,MAAMvH,GAGb,WAAW/B,EAAkByX,EAA6Cza,MAE/E,OAAOA,KAAKsM,MAAMtJ,EAAK2jB,SAAS3jB,EAAMyX,GAGjC,IAAIzX,EAAWG,EAAkBsX,EAA6Cza,MAEnF,OAAOA,KAAKgxC,KAAKhuC,EAAMyX,EAAhBza,CAA0BmD,GAG5B,KAAMxJ,EAAY8gB,EAA6Cza,MAEpE,OAAOnF,EAAQlB,GACXqG,KAAKq/B,WAAWr/B,KAAK89B,KAAKvxB,cAAc5S,GAAQ8gB,GAChD,IAAM9gB,GApFE,GAAAm3C,wBAA0B,WCsCnC,MAAM,GAAO,IAAI,GAAY,CAClChsC,MAAO,CACL,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEFgI,YAAa,CACX,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,MCpFE,GAAM,GAAWrB,WAEjBwlC,GAA2C,CAACv4C,EAAGolC,IACnDplC,EAAEO,gBAAgB,GACdP,EAAEO,KACF,GAAWqS,SAEX4lC,GAAsC,CAACx4C,EAAGolC,KAC9C,GAAIplC,EAAEO,gBAAgB,GACpB,OAAOP,EAAEO,KAEX,MAAM6wC,EAAWhM,EAAKqT,cAAc58B,OAAOxX,IAAK8tC,GAAW,IAAI,GAAWA,EAAO5xC,KAAM6kC,IAEvF,OAA2B,IAApBgM,EAAS1tC,OACZ,GAASkP,SACW,IAApBw+B,EAAS1tC,OACP0tC,EAAS,GACT,GAAM9U,KAAK8U,IAGbsH,GAAkB,CAAC14C,EAAmC+hB,KAC1D,KAAM/hB,EAAEO,gBAAgB,IACtB,OAAO,KAGT,MAAM+wC,EAAYvvB,EAAS42B,aAAa34C,EAAEO,KAAKqI,SAE/C,GAAI5I,EAAEysC,oBAAoB,GAAU,CAClC,MAAMmM,EAAe54C,EAAEysC,SAAS7jC,QAAQkT,UAAUjb,IAAI,YAEtD,GAAI+3C,EAAc,CAChB,MAAM1gB,EAAQoZ,EAAUl7B,KAAMtV,GAAMA,EAAEP,OAASq4C,GAE/C,GAAI1gB,EACF,OAAOA,GAKb,OAAOoZ,GAGHuH,GAAuD,CAAC74C,EAAG+hB,KAC/D,MAAM+2B,EAAeJ,GAAgB14C,EAAG+hB,GAExC,OAAqB,OAAjB+2B,EACK,GAASlmC,SACPzQ,EAAQ22C,GACV,GAAMxc,KACXwc,EAAaz0C,IAAKooC,GAAa,GAAMsM,KACnC,GACA,GACA,CAAC,CAAC,WAAYtM,EAASlsC,UAIpBP,EAAEysC,UAIPuM,GAA8E,CAACh5C,EAAGolC,KACtF,MAAM0T,EAAeJ,GAAgB14C,EAAGolC,GAExC,OAAqB,OAAjB0T,GAA0B32C,EAAQ22C,GAQ/B,GAASlmC,SAPV5S,EAAE6qC,SAAWiO,EAAatM,aAAalhC,YAAYtL,EAAE6qC,SAChD7qC,EAAE6qC,QAGJiO,EAAatM,cAMlByM,GAA0E,CAACj5C,EAAG+hB,KAClF,MAAM+2B,EAAeJ,GAAgB14C,EAAG+hB,GAExC,OAAqB,OAAjB+2B,GAA0B32C,EAAQ22C,GAQ/B,GAASlmC,SAPV5S,EAAE6qC,SAAWiO,EAAa5M,SAAS5gC,YAAYtL,EAAE6qC,SAC5C7qC,EAAE6qC,QAGJiO,EAAa5M,UAOXgN,GACb,CAEE36B,YAAa,GAAI46B,SAASn5B,GAAUzB,YAClCg6B,GACA,CAAEh4C,KAAMi4C,KAGV33C,IAAK,GAAIs4C,SAASn5B,GAAUnf,IAC1B,CAACb,EAAG+hB,KACF,KAAM/hB,EAAEO,gBAAgB,IACtB,OAAO,GAET,MAAM4xC,EAASpwB,EAASG,UAAUliB,EAAEO,KAAKqI,SACzC,OAAKupC,EAIE,GAAMzpC,KAAKypC,EAAOvoC,MAHhB,IAKX,CAAErJ,KAAMi4C,IACR,CAAExL,MAAO,GACT,CAAE33B,SAAUkjC,KAGdhzC,OAAQ,GAAI4zC,SAASn5B,GAAUza,OAC7B,CAACvF,EAAG+hB,KACF,KAAM/hB,EAAEO,gBAAgB,IACtB,OAAO,GAET,MAAM4xC,EAASpwB,EAASG,UAAUliB,EAAEO,KAAKqI,SACzC,OAAKupC,GAAWA,EAAO5wC,IAIhB4wC,EAAO7K,QAHL,IAKX,CAAE/mC,KAAMi4C,GAASnjC,SAAUkjC,KAG7Bt4B,KAAM,GAAIk5B,SAASn5B,GAAUC,KAC3B,EACA,CAAE1f,KAAMi4C,GAASnjC,SAAUkjC,KAG7B1zC,OAAQ,GAAIs0C,SAASn5B,GAAUnb,OAC7B,EACA,CAAEtE,KAAMi4C,GAASnjC,SAAUkjC,KAG7Br4B,WAAY,GAAIi5B,SAASn5B,GAAUE,WACjC,GACA,CAAE3f,KAAMi4C,GAASnjC,SAAUkjC,GAAc9L,SAAUoM,GAAahO,QAASmO,KAG3E74B,WAAY,GAAIg5B,SAASn5B,GAAUG,WACjC,GACA,CAAE5f,KAAMi4C,GAASnjC,SAAUkjC,GAAc9L,SAAUoM,GAAahO,QAASoO,KAG3E74B,cAAe,GAAI+4B,SAASn5B,GAAUI,cACpC,GACA,CAAE7f,KAAMi4C,GAASnjC,SAAUkjC,GAAc9L,SAAUoM,GAAahO,QAASoO,KAG3E54B,aAAc,GAAI84B,SAASn5B,GAAUK,aACnC,GACA,CAAE9f,KAAMi4C,GAASnjC,SAAUkjC,GAAc9L,SAAUoM,KAGrDv4B,WAAY,GAAI64B,SAASn5B,GAAUM,WACjC,CAACtgB,EAAGolC,IAAS4T,GAAuBh5C,EAAGolC,GACvC,CAAE7kC,KAAMi4C,GAASnjC,SAAUkjC,GAAc9L,SAAUoM,KAGrDt4B,UAAW,GAAI44B,SAASn5B,GAAUO,UAChC,GACA,CAAEhgB,KAAMi4C,GAASnjC,SAAUkjC,GAAc9L,SAAUoM,GAAahO,QAASoO,MAK7EC,GAAe36B,YAAYs2B,UAAW,EACtCqE,GAAer4C,IAAIg0C,UAAW,EAC9BqE,GAAe3zC,OAAOsvC,UAAW,EACjCqE,GAAej5B,KAAK40B,UAAW,EAC/BqE,GAAer0C,OAAOgwC,UAAW,EACjCqE,GAAeh5B,WAAW20B,UAAW,EACrCqE,GAAe/4B,WAAW00B,UAAW,EACrCqE,GAAe94B,cAAcy0B,UAAW,EACxCqE,GAAe74B,aAAaw0B,UAAW,EACvCqE,GAAe54B,WAAWu0B,UAAW,EACrCqE,GAAe34B,UAAUs0B,UAAW,EChLpC,MAAM,GAAM,GAAQ9hC,WAEPqmC,GACb,CAIErqC,IAAK,GAAIoqC,SAASxkC,GAAO5F,IAAK,GAAY,CAAE9N,MAAO,GAASkK,KAAM,KAElEqG,KAAM,GAAI2nC,SAASxkC,GAAOnD,KAAM,GAAS,CAAEvQ,MAAO,KAElD2T,UAAW,GAAIukC,SAASxkC,GAAOC,UAC7B,EACA,CAAE3T,MAAO,KAGX4T,WAAY,GAAIskC,SAASxkC,GAAOE,WAC9B,EACA,CAAE5T,MAAO,GAAS0U,QAAS,IAC3B,GACA,CAAEA,QAAS3V,GAAKA,EAAEiB,iBAAiB,GAAejB,EAAEiB,MAAM2H,QAAU5I,EAAEiB,QAGxEsF,SAAU,GAAI4yC,SAASxkC,GAAOpO,SAC5BvG,IACE,IAAIyM,GAAW,EACf,MAAML,EAAgB,GAChBitC,EAAaj2C,IACjB,GAAKqJ,GAEDrJ,EAAG,CACL,IAAIk2C,EAAYl2C,aAAa,GAC7B,MAAMm2C,EAASD,EAAYl2C,EAAEwF,QAAkBxF,EAE3Cm2C,aAAkB,IACpBA,EAAO3wC,QAAQkD,QAAStF,IACtB,MAAMgzC,EAAYhzC,aAAa,GACzBizC,EAASD,EAAYhzC,EAAEoC,QAAkBpC,EAE/C8yC,EAAYA,GAAaE,EAEpBptC,EAAM6gB,KAAK/rB,GAAKA,EAAEw4C,UAAUD,KAC/BrtC,EAAMrG,KAAK0zC,KAKjBhtC,EAAWA,GAAY6sC,EAElBltC,EAAM6gB,KAAK/rB,GAAKA,EAAEw4C,UAAUH,KAC/BntC,EAAMrG,KAAKwzC,KAWjB,OANAF,EAAUr5C,EAAEgD,GACZq2C,EAAUr5C,EAAEiD,GACZo2C,EAAUr5C,EAAEK,GACZg5C,EAAUr5C,EAAEM,GACZ+4C,EAAUr5C,EAAEqU,GAELjI,EAAM1I,OAAS,EAClB+I,EACE,GAAMA,SAAS,IAAI,GAASL,IAC5B,IAAI,GAASA,GACE,IAAjBA,EAAM1I,OACJ+I,EACE,GAAMA,SAASL,EAAM,IACrBA,EAAM,GACR,IAER,CAAEpJ,EAAG,GAASC,EAAG,IACjB,CAAE5C,EAAG,GAASC,EAAG,GAAS+T,EAAG,KAG/BS,QAAS,GAAIqkC,SAASxkC,GAAOG,QAC3B9U,GAAKA,EAAEiB,iBAAiB,GACpBjB,EAAEiB,MAAM2H,QACR5I,EAAEiB,OAAS,GACf,CAAEA,MAAOjB,GAAKA,EAAEiB,OAAS,KAG3B8T,QAAS,GAAIokC,SAASxkC,GAAOI,QAC1B/U,GACKA,EAAE25C,QAAU35C,EAAE45C,MACT,GAAMx4B,UAAU,CAACphB,EAAE25C,OAAQ35C,EAAE45C,QAC3B55C,EAAE25C,OACJ35C,EAAE25C,OACA35C,EAAE45C,MACJ55C,EAAE45C,MAEF,GAGX,CAAEjjC,UAAW,EAAagjC,OAAQ35C,GAAKA,EAAE25C,QAAU,GAASC,MAAO55C,GAAKA,EAAE45C,OAAS,KAKrF5qC,QAAS,GAAImqC,SAASxkC,GAAO3F,QAAS,EAAa,CAAE/N,MAAO,KAE5DkO,QAAS,GAAIgqC,SAASxkC,GAAOxF,QAAS,EAAa,CAAElO,MAAO,GAASkK,KAAM,KAE3EiE,WAAY,GAAI+pC,SAASxkC,GAAOvF,WAAY,EAAa,CAAEnO,MAAO,GAASkK,KAAM,KAEjF6J,OAAQ,GAAImkC,SAASxkC,GAAOK,OAAQ,EAAa,CAAE/T,MAAO,GAASkK,KAAM,KAEzE8J,cAAe,GAAIkkC,SAASxkC,GAAOM,cAAe,EAAa,CAAEhU,MAAO,GAASkK,KAAM,KAEvF+J,UAAW,GAAIikC,SAASxkC,GAAOO,UAAW,EAAa,CAAEjU,MAAO,GAASkK,KAAM,KAE/EgK,iBAAkB,GAAIgkC,SAASxkC,GAAOQ,iBAAkB,EAAa,CAAElU,MAAO,GAASkK,KAAM,KAI7FkE,MAAO,GAAI8pC,SAASxkC,GAAOtF,MAAOrP,GAAKA,EAAEiB,OAAS,GAAS,CAAEA,MAAO,KAEpEqO,UAAW,GAAI6pC,SAASxkC,GAAOrF,UAAW,EAAa,CAAErO,MAAO,KAEhEsO,QAAS,GAAI4pC,SAASxkC,GAAOpF,QAAS,GAAW,CAAEtO,MAAO,KAE1DuO,OAAQ,GAAI2pC,SAASxkC,GAAOnF,OAAQ,GAAU,CAAEvO,MAAO,KAEvDwO,OAAQ,GAAI0pC,SAASxkC,GAAOlF,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IAAU,CAAEA,MAAO,KAExFyO,MAAO,GAAIypC,SAASxkC,GAAOjF,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAU,CAAEA,MAAO,KAErF0O,SAAU,GAAIwpC,SAASxkC,GAAOhF,SAAU,GAAY,CAAE1O,MAAO,KAE7D2O,SAAU,GAAIupC,SAASxkC,GAAO/E,SAAU,GAAY,CAAE3O,MAAO,KAE7D4O,OAAQ,GAAIspC,SAASxkC,GAAO9E,OAAQ,GAAU,CAAE5O,MAAO,KAEvD6O,QAAS,GAAIqpC,SAASxkC,GAAO7E,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAW,CAAEA,MAAO,KAE7F8O,MAAO,GAAIopC,SAASxkC,GAAO5E,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAU,CAAEA,MAAO,MC3IjF,GAAM,EAAY8R,WAGX+mC,GACb,CAIEx4C,OAAQ,GAAI63C,SAAS3qC,EAAWlN,OAAQ,GAIxCoN,MAAO,GAAIyqC,SAAS3qC,EAAWE,MAC5B1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,GAC5B,CAAEA,MAAO,KAGX0N,IAAK,GAAIwqC,SAAS3qC,EAAWG,IAAK,EAAa,CAAE3L,EAAG,EAAaC,EAAG,IAEpE2L,GAAI,GAAIuqC,SAAS3qC,EAAWI,GAAI,EAAa,CAAE5L,EAAG,EAAaC,EAAG,IAElE4L,IAAK,GAAIsqC,SAAS3qC,EAAWK,IAAK,EAAa,CAAE7L,EAAG,EAAaC,EAAG,IAEpE6L,IAAK,GAAIqqC,SAAS3qC,EAAWM,IAAK,EAAa,CAAE9L,EAAG,IAEpD+L,IAAK,GAAIoqC,SAAS3qC,EAAWO,IAAK,GAAY,CAAE9N,MAAO,EAAakK,KAAM,IAI1E6D,QAAS,GAAImqC,SAAS3qC,EAAWQ,QAAS,EAAa,CAAE/N,MAAO,KAEhEgO,OAAQ,GAAIkqC,SAAS3qC,EAAWS,OAAQ,EAAa,CAAEhO,MAAO,IAE9DiO,QAAS,GAAIiqC,SAAS3qC,EAAWU,QAAS,EAAa,CAAEjO,MAAO,IAEhEkO,QAAS,GAAIgqC,SAAS3qC,EAAWW,QAAS,EAAa,CAAElO,MAAO,EAAakK,KAAM,IAEnFiE,WAAY,GAAI+pC,SAAS3qC,EAAWY,WAAY,EAAa,CAAEnO,MAAO,EAAakK,KAAM,IAIzFkE,MAAO,GAAI8pC,SAAS3qC,EAAWa,MAAO,GAAS,CAAEpO,MAAO,IAExDqO,UAAW,GAAI6pC,SAAS3qC,EAAWc,UAAWtP,GAAKA,EAAEiB,OAAS,EAAa,CAAEA,MAAO,IAEpFsO,QAAS,GAAI4pC,SAAS3qC,EAAWe,QAAS,GAAW,CAAEtO,MAAO,IAE9DuO,OAAQ,GAAI2pC,SAAS3qC,EAAWgB,OAAQ,GAAU,CAAEvO,MAAO,IAE3DwO,OAAQ,GAAI0pC,SAAS3qC,EAAWiB,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,GAAc,CAAEA,MAAO,IAEhGyO,MAAO,GAAIypC,SAAS3qC,EAAWkB,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,GAAc,CAAEA,MAAO,IAE7F0O,SAAU,GAAIwpC,SAAS3qC,EAAWmB,SAAU,GAAY,CAAE1O,MAAO,IAEjE2O,SAAU,GAAIupC,SAAS3qC,EAAWoB,SAAU,GAAY,CAAE3O,MAAO,IAEjE4O,OAAQ,GAAIspC,SAAS3qC,EAAWqB,OAAQ,GAAU,CAAE5O,MAAO,IAE3D6O,QAAS,GAAIqpC,SAAS3qC,EAAWsB,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,IAAe,CAAEA,MAAO,IAErG8O,MAAO,GAAIopC,SAAS3qC,EAAWuB,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAU,CAAEA,MAAO,KC1DrF,GAAM,GAAU8R,WAETgnC,GAAqB,IAAI,GAAS,CAC7Cx4C,IAAK,GAASqR,SACd3R,MAAO,GAAS2R,SAChBkJ,UAAW,IAAItZ,IAAI,CACjB,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,SAIGw3C,GAAgB,IAAI,GAAS,CACxC,GAAUpnC,SACV,IAAI,GAAW,MAGJqnC,GAAe,IAAI,GAAS,CACvC14C,IAAK,GAASqR,SACd3R,MAAO,GAAS2R,SAChBkJ,UAAW,IAAItZ,IAAI,CACjB,CAAC,6BAA8B,eAC/B,CAAC,OAAQ,gBACT,CAAC,UAAW,WACZ,CAAC,YAAa,eACd,CAAC,eAAgB,WACjB,CAAC,mBAAoB,YACrB,CAAC,eAAgB,WACjB,CAAC,mBAAoB,gBAIZ03C,GAAa,IAAI,GAAS,CACrC34C,IAAK,GAASqR,SACd3R,MAAO,GAAU2R,SACjBkJ,UAAW,IAAItZ,IAAmB,CAChC,CAAC,cAAe,CAAE1B,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,IAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,gBAAiB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC/C,CAAC,OAAQ,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACpC,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACxC,CAAC,QAAS,CAAElC,EAAG,EAAGw+B,EAAG,EAAGr8B,EAAG,EAAGD,EAAG,MACjC,CAAC,kBAAmB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACjD,CAAC,OAAQ,CAAElC,EAAG,EAAGw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MAClC,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MACrC,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MAC1C,CAAC,YAAa,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAC1C,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MACtC,CAAC,kBAAmB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACjD,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,UAAW,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MACvC,CAAC,OAAQ,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACpC,CAAC,YAAa,CAAElC,EAAG,EAAGw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,YAAa,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACzC,CAAC,iBAAkB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAC/C,CAAC,YAAa,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,aAAc,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MACxC,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,mBAAoB,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAChD,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MAC3C,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,EAAGD,EAAG,MACtC,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,iBAAkB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAChD,CAAC,kBAAmB,CAAElC,EAAG,GAAIw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MAC/C,CAAC,kBAAmB,CAAElC,EAAG,GAAIw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MAC9C,CAAC,iBAAkB,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC9C,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,YAAa,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,gBAAiB,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,cAAe,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,YAAa,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MACzC,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC9C,CAAC,eAAgB,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAC5C,CAAC,UAAW,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,YAAa,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,OAAQ,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MACpC,CAAC,YAAa,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAC1C,CAAC,OAAQ,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACtC,CAAC,QAAS,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MACnC,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAC7C,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MAC1C,CAAC,SAAU,CAAElC,EAAG,GAAIw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MACrC,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,iBAAkB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAChD,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MAC1C,CAAC,gBAAiB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC/C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,yBAA0B,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACxD,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC9C,CAAC,kBAAmB,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAChD,CAAC,iBAAkB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAChD,CAAC,mBAAoB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAClD,CAAC,mBAAoB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAClD,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC9C,CAAC,OAAQ,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MAClC,CAAC,YAAa,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MACzC,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,UAAW,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,EAAGD,EAAG,MACpC,CAAC,oBAAqB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACnD,CAAC,cAAe,CAAElC,EAAG,EAAGw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MACzC,CAAC,gBAAiB,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MAC9C,CAAC,gBAAiB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC/C,CAAC,mBAAoB,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACjD,CAAC,oBAAqB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACnD,CAAC,sBAAuB,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACnD,CAAC,mBAAoB,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACjD,CAAC,mBAAoB,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MACjD,CAAC,gBAAiB,CAAElC,EAAG,GAAIw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC9C,CAAC,OAAQ,CAAElC,EAAG,EAAGw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MAClC,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MACrC,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAC3C,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MACtC,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,EAAGD,EAAG,MACzC,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACxC,CAAC,iBAAkB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAChD,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,iBAAkB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAChD,CAAC,kBAAmB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACjD,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,OAAQ,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MACrC,CAAC,OAAQ,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACtC,CAAC,OAAQ,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACtC,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,IAAKD,EAAG,MACtC,CAAC,MAAO,CAAElC,EAAG,IAAKw+B,EAAG,EAAGr8B,EAAG,EAAGD,EAAG,MACjC,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MAC5C,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACxC,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MAC5C,CAAC,YAAa,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,MACzC,CAAC,YAAa,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MACtC,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACxC,CAAC,WAAY,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,aAAc,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,OAAQ,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACtC,CAAC,eAAgB,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC3C,CAAC,MAAO,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACrC,CAAC,OAAQ,CAAElC,EAAG,EAAGw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACpC,CAAC,UAAW,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACzC,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,GAAIr8B,EAAG,GAAID,EAAG,MACtC,CAAC,YAAa,CAAElC,EAAG,GAAIw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC1C,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACxC,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,QAAS,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MACvC,CAAC,cAAe,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,IAAKD,EAAG,MAC7C,CAAC,SAAU,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,EAAGD,EAAG,MACtC,CAAC,eAAgB,CAAElC,EAAG,IAAKw+B,EAAG,IAAKr8B,EAAG,GAAID,EAAG,UAOpCm3C,GAAkB,IAAI,GAAS,CAC1C54C,IAAK,GAASqR,SACd3R,MAAO,GAAS2R,SAChBkJ,UAAW,IAAItZ,IAAI,CACjB,CAAC,WAAY,YACb,CAAC,SAAU,UACX,CAAC,UAAW,WACZ,CAAC,aAAc,QACf,CAAC,aAAc,QACf,CAAC,QAAS,SACV,CAAC,OAAQ,QACT,CAAC,SAAU,UACX,CAAC,WAAY,OACb,CAAC,WAAY,OACb,CAAC,aAAc,QACf,CAAC,cAAe,UAChB,CAAC,eAAgB,eAKR43C,GACb,CAIE94C,OAAQ,GAAI63C,SAAS/a,GAAS98B,OAAQ,IAItCoN,MAAO,GAAIyqC,SAAS/a,GAAS1vB,MAC1B1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGX8N,IAAK,GAAIoqC,SAAS/a,GAASrvB,IACzB,GACA,CAAE9N,MAAO,GAAWkK,KAAM,KAG5BqG,KAAM,GAAI2nC,SAAS/a,GAAS5sB,KAC1B,GACA,CAAEvQ,MAAO,KAGXulB,MAAO,GAAI2yB,SAAS/a,GAAS5X,MAC3B,GACA,CAAE1lB,EAAG,GAAYw+B,EAAG,GAAYr8B,EAAG,IACnC,CAAED,EAAG,KAGPqB,IAAK,GAAI80C,SAAS/a,GAAS/5B,IACzB,GACA,CAAEpD,MAAO,GAAWH,EAAG,GAAYw+B,EAAG,GAAYr8B,EAAG,IACrD,CAAED,EAAG,IACL,CAAE/B,MAAO,GAAYo5C,UAAWN,KAGlC/sC,GAAI,GAAImsC,SAAS/a,GAASpxB,GACxB,GACA,CAAE/L,MAAO,GAAWkK,KAAM,GAAWrK,EAAG,GAAYw+B,EAAG,GAAYr8B,EAAG,IACtE,CAAED,EAAG,IACL,CAAE/B,MAAO,GAAYkK,KAAM,GAAYkvC,UAAWN,KAGpDn2C,MAAO,GAAIu1C,SAAS/a,GAASx6B,MAC3B,GACA,CAAE3C,MAAO,KAGX2D,IAAK,GAAIu0C,SAAS/a,GAASx5B,IACzB,GACA,CAAE3D,MAAO,GAAWq5C,OAAQN,IAC5B,CAAEjb,MAAO,IAGXV,KAAM,GAAI8a,SAAS/a,GAASC,KAC1B,GACA,CAAEp9B,MAAO,GAAWq5C,OAAQN,GAAeO,YAAaP,IACxD,CAAEjb,MAAO,IAGXnmB,IAAK,GAAIugC,SAAS/a,GAASxlB,IACzB,GACA,CAAE3X,MAAO,GAAWu5C,WAAYR,IAChC,CAAEjb,MAAO,IAGX1X,IAAK,GAAI8xB,SAAS/a,GAAS/W,IACzB,GACA,CAAEpmB,MAAO,GAAWw5C,WAAYT,IAChC,CAAEjb,MAAO,IAGXzX,IAAK,GAAI6xB,SAAS/a,GAAS9W,IACzB,GACA,CAAErmB,MAAO,GAAWy5C,QAASV,IAC7B,CAAEjb,MAAO,IAGXxX,IAAK,GAAI4xB,SAAS/a,GAAS7W,IACzB,GACA,CAAEtmB,MAAO,GAAWy5C,QAASV,IAC7B,CAAEjb,MAAO,IAGXT,OAAQ,GAAI6a,SAAS/a,GAASE,OAC5B,GACA,CAAEr9B,MAAO,GAAWq9B,OAAQ2b,KAG9B9jC,MAAO,GAAIgjC,SAAS/a,GAASjoB,MAC3B,GAAM1J,SAAS,IACf,CAAExL,MAAO,KAGXooB,KAAM,GAAI8vB,SAAS/a,GAAS/U,KAC1B,GACA,CAAEzd,MAAO,GAAWsT,IAAK,GAAWyiB,MAAO,KAG7CpD,QAAS,GAAI4a,SAAS/a,GAASG,QAC7B,GACA,CAAEt9B,MAAO,GAAW+4B,OAAQ,KAG9BwE,OAAQ,GAAI2a,SAAS/a,GAASI,OAC5B,GACA,CAAEv9B,MAAO,GAAW+4B,OAAQ,KAG9ByE,MAAO,GAAI0a,SAAS/a,GAASK,MAC3BiC,GAAc92B,KACd,CAAE3I,MAAO,KAGXy9B,QAAS,GAAIya,SAAS/a,GAASM,QAC7B,GACA,CAAEz9B,MAAOy/B,GAAc92B,OAGzB+0B,UAAW,GAAIwa,SAAS/a,GAASO,UAC/B,GACA,CAAE19B,MAAO,KAGX29B,SAAU,GAAIua,SAAS/a,GAASQ,SAC9B,GACA,CAAE39B,MAAO,GAAWkK,KAAM,KAG5B0zB,OAAQ,GAAIsa,SAAS/a,GAASS,OAC5B,GACA,CAAE59B,MAAO,IACT,CAAE89B,MAAO,IAGXD,OAAQ,GAAIqa,SAAS/a,GAASU,OAC5B,GACA,CAAE79B,MAAO,KAGX89B,MAAO,GAAIoa,SAAS/a,GAASW,MAC3B,GACA,CAAE99B,MAAO,GAAW89B,MAAO,KAG7B3lB,SAAU,GAAI+/B,SAAS/a,GAAShlB,SAC9B,GACA,CAAEnY,MAAO,GAAWkK,KAAM,KAG5B6zB,MAAO,GAAIma,SAAS/a,GAASY,MAC3B,GACA,CAAEz+B,KAAM25C,KAGVjb,QAAS,GAAIka,SAAS/a,GAASa,QAC7B,GACA,CAAEh+B,MAAO,KAGXi+B,MAAO,GAAIia,SAAS/a,GAASc,MAC3B,GACA,CAAEyb,IAAK,GAAWC,OAAQ,GAAWz5C,KAAMg5C,KAK7CnrC,QAAS,GAAImqC,SAAS/a,GAASpvB,QAC7B,EACA,CAAE/N,MAAO,KAGXkO,QAAS,GAAIgqC,SAAS/a,GAASjvB,QAC7B,EACA,CAAElO,MAAO,GAAWkK,KAAM,IAC1B,CAAE9H,QAAS,KAGb+L,WAAY,GAAI+pC,SAAS/a,GAAShvB,WAChC,EACA,CAAEnO,MAAO,GAAWkK,KAAM,IAC1B,CAAE9H,QAAS,KAGb2R,OAAQ,GAAImkC,SAAS/a,GAASppB,OAC5B,EACA,CAAE/T,MAAO,GAAWkK,KAAM,KAG5B8J,cAAe,GAAIkkC,SAAS/a,GAASnpB,cACnC,EACA,CAAEhU,MAAO,GAAWkK,KAAM,KAG5B+J,UAAW,GAAIikC,SAAS/a,GAASlpB,UAC/B,EACA,CAAEjU,MAAO,GAAWkK,KAAM,KAG5BgK,iBAAkB,GAAIgkC,SAAS/a,GAASjpB,iBACtC,EACA,CAAElU,MAAO,GAAWkK,KAAM,KAK5BkE,MAAO,GAAI8pC,SAAS/a,GAAS/uB,MAAO,GAAS,CAAEpO,MAAO,KAEtDqO,UAAW,GAAI6pC,SAAS/a,GAAS9uB,UAAW,EAAa,CAAErO,MAAO,KAElEsO,QAAS,GAAI4pC,SAAS/a,GAAS7uB,QAAS,GAAW,CAAEtO,MAAO,KAE5DuO,OAAQ,GAAI2pC,SAAS/a,GAAS5uB,OAAQ,GAAU,CAAEvO,MAAO,KAEzDwO,OAAQ,GAAI0pC,SAAS/a,GAAS3uB,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IAAY,CAAEA,MAAO,KAE5FyO,MAAO,GAAIypC,SAAS/a,GAAS1uB,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAY,CAAEA,MAAO,KAEzF0O,SAAU,GAAIwpC,SAAS/a,GAASzuB,SAAU,GAAY,CAAE1O,MAAO,KAE/D2O,SAAU,GAAIupC,SAAS/a,GAASxuB,SAAU5P,GAAKA,EAAEiB,OAAS,GAAW,CAAEA,MAAO,KAE9E4O,OAAQ,GAAIspC,SAAS/a,GAASvuB,OAAQ,GAAU,CAAE5O,MAAO,KAEzD6O,QAAS,GAAIqpC,SAAS/a,GAAStuB,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAa,CAAEA,MAAO,KAEjG8O,MAAO,GAAIopC,SAAS/a,GAASruB,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAU,CAAEA,MAAO,MClbnF,GAAM,GAAS8R,WAEf8nC,GAAe,IAAI,GAAS,CAChCt5C,IAAK,GAASqR,SAAS2L,cACvBtd,MAAO,GAAS2R,SAAS2L,cACzBzC,UAAW,IAAItZ,IAAI,CACjB,CAAC,YAAa,aACd,CAAC,sBAAuB,oBACxB,CAAC,cAAe,UAChB,CAAC,SAAU,UACX,CAAC,SAAU,UACX,CAAC,OAAQ,QACT,CAAC,MAAO,OACR,CAAC,eAAgB,cACjB,CAAC,oBAAqB,kBACtB,CAAC,cAAe,aAChB,CAAC,cAAe,aAChB,CAAC,OAAQ,QACT,CAAC,gBAAiB,eAClB,CAAC,oBAAqB,mBACtB,CAAC,qBAAsB,mBACvB,CAAC,yBAA0B,uBAC3B,CAAC,0BAA2B,uBAC5B,CAAC,eAAgB,cACjB,CAAC,mBAAoB,kBACrB,CAAC,oBAAqB,kBACtB,CAAC,wBAAyB,sBAC1B,CAAC,yBAA0B,sBAC3B,CAAC,QAAS,SACV,CAAC,UAAW,WACZ,CAAC,OAAQ,QACT,CAAC,kBAAmB,kBACpB,CAAC,iBAAkB,iBACnB,CAAC,kBAAmB,kBACpB,CAAC,mBAAoB,mBACrB,CAAC,qBAAsB,yBAIrBs4C,GAAY,IAAI,GAAS,CAC7Bv5C,IAAK,GAASqR,SAAS2L,cACvBtd,MAAO,GAAS2R,SAAS2L,cACzBzC,UAAW,IAAItZ,IAAI,CACjB,CAAC,cAAe,UAChB,CAAC,SAAU,UACX,CAAC,SAAU,UACX,CAAC,OAAQ,QACT,CAAC,MAAO,OACR,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,UAAW,WACZ,CAAC,OAAQ,YAIPu4C,GAAa,IAAI,GAAS,CAC9Bx5C,IAAK,GAASqR,SAAS2L,cACvBtd,MAAO,GAAS2R,SAAS2L,cACzBzC,UAAW,IAAItZ,IAAI,CACjB,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,WAAY,YACb,CAAC,KAAM,MACP,CAAC,OAAQ,YAKAw4C,GACb,CAIE15C,OAAQ,GAAI63C,SAAS7e,GAAQh5B,OAAQ,IAErCi5B,IAAK,GAAI4e,SAAS7e,GAAQC,IAAK,IAE/BC,MAAO,GAAI2e,SAAS7e,GAAQE,MAAO,IAEnCC,SAAU,GAAI0e,SAAS7e,GAAQG,SAAU,IAEzCC,UAAW,GAAIye,SAAS7e,GAAQI,UAAW,IAI3ChsB,MAAO,GAAIyqC,SAAS7e,GAAQ5rB,MACzB1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,GAC5B,CAAEA,MAAO,KAGXkV,MAAO,GAAIgjC,SAAS7e,GAAQnkB,MAAO,GAAM1J,SAAS,IAAW,CAAExL,MAAO,IAAI,GAAS,CAAC,GAAS2R,SAAU,GAAWA,SAAU,GAASA,YAAc,CAAEqlB,WAAY,IAEjK0C,SAAU,GAAIwe,SAAS7e,GAAQK,SAAU,GAAMluB,SAAS,IAAW,CAAExL,MAAO,IAAY,CAAEg3B,WAAY,IAEtG2C,cAAe,GAAIue,SAAS7e,GAAQM,cAAe,GAAU,CAAE35B,MAAO,KAEtE45B,qBAAsB,GAAIse,SAAS7e,GAAQO,qBAAsB,GAAU,CAAE55B,MAAO,KAEpF4C,IAAK,GAAIs1C,SAAS7e,GAAQz2B,IAAK,GAAU,CAAE5C,MAAO,GAAUkK,KAAM,KAElErH,IAAK,GAAIq1C,SAAS7e,GAAQx2B,IAAK,GAAU,CAAE7C,MAAO,GAAUkK,KAAM,KAElEtK,IAAK,GAAIs4C,SAAS7e,GAAQz5B,IAAK,GAAY,CAAEI,MAAO,GAAUU,SAAUk5C,KAExEpsC,IAAK,GAAI0qC,SAAS7e,GAAQ7rB,IAAK,GAAU,CAAExN,MAAO,GAAUU,SAAUk5C,GAAcpsC,IAAK,KAEzF7J,IAAK,GAAIu0C,SAAS7e,GAAQ11B,IAAK,GAAU,CAAE3D,MAAO,GAAUw6B,KAAMqf,IAAa,CAAE9gB,OAAQ,KAEzFphB,IAAK,GAAIugC,SAAS7e,GAAQ1hB,IAAK,GAAU,CAAE3X,MAAO,GAAUw6B,KAAMqf,IAAa,CAAE9gB,OAAQ,KAEzF5E,QAAS,GAAI+jB,SAAS7e,GAAQlF,QAAS,GAAU,CAAEn0B,MAAO,GAAUw6B,KAAMqf,KAE1EjlB,MAAO,GAAIsjB,SAAS7e,GAAQzE,MAAO,GAAU,CAAE50B,MAAO,GAAUw6B,KAAMqf,IAAa,CAAEG,UAAW,IAEhGthB,YAAa,GAAIwf,SAAS7e,GAAQX,YAAa,GAAY,CAAE14B,MAAO,KAEpE65B,WAAY,GAAIqe,SAAS7e,GAAQQ,WAAY,GAAY,CAAE75B,MAAO,KAElE85B,YAAa,GAAIoe,SAAS7e,GAAQS,YAAa,GAAY,CAAE95B,MAAO,KAEpEuQ,KAAM,GAAI2nC,SAAS7e,GAAQ9oB,KAAM,GAAU,CAAEvQ,MAAO,KAEpD8N,IAAK,GAAIoqC,SAAS7e,GAAQvrB,IAAK,GAAY,CAAE9N,MAAO,GAAUkK,KAAM,IAAY,CAAEswB,KAAMqf,KAExF/jB,KAAM,GAAIoiB,SAAS7e,GAAQvD,KAAM,GAAY,CAAE91B,MAAO,GAAUkK,KAAM,IAAY,CAAEswB,KAAMqf,GAAWI,SAAU,EAAaC,OAAQJ,KAEpI/f,eAAgB,GAAIme,SAAS7e,GAAQU,eAAgB,GAAY,CAAE/5B,MAAO,KAI1EsoB,OAAQ,GAAI4vB,SAAS7e,GAAQ/Q,OAAQ,GAAU,CAAEtoB,MAAO,GAAUq9B,OAAQ,KAE1ErD,UAAW,GAAIke,SAAS7e,GAAQW,UAAW,GAAU,CAAEh6B,MAAO,KAI9D+N,QAAS,GAAImqC,SAAS7e,GAAQtrB,QAAS,EAAa,CAAE/N,MAAO,KAE7DkO,QAAS,GAAIgqC,SAAS7e,GAAQnrB,QAAS,EAAa,CAAElO,MAAO,GAAUkK,KAAM,IAAY,CAAEswB,KAAMqf,KAEjG5f,SAAU,GAAIie,SAAS7e,GAAQY,SAAU,EAAa,CAAEj6B,MAAO,GAAUkK,KAAM,IAAY,CAAEswB,KAAMqf,KAEnG3f,gBAAiB,GAAIge,SAAS7e,GAAQa,gBAAiB,EAAa,CAAEl6B,MAAO,GAAUkK,KAAM,IAAY,CAAEswB,KAAMqf,KAEjH1f,QAAS,GAAI+d,SAAS7e,GAAQc,QAAS,EAAa,CAAEn6B,MAAO,GAAUkK,KAAM,IAAY,CAAEswB,KAAMqf,KAEjGzf,eAAgB,GAAI8d,SAAS7e,GAAQe,eAAgB,EAAa,CAAEp6B,MAAO,GAAUkK,KAAM,IAAY,CAAEswB,KAAMqf,KAE/GnxB,UAAW,GAAIwvB,SAAS7e,GAAQ3Q,UAAW,EAAa,CAAE1oB,MAAO,GAAU2K,MAAO,GAAUsT,IAAK,IAAY,CAAEuc,KAAMqf,GAAWM,eAAgB,EAAaC,aAAc,IAE3K/f,UAAW,GAAI6d,SAAS7e,GAAQgB,UAAW,EAAa,CAAEr6B,MAAO,GAAUw6B,KAAMqf,KAEjFvf,QAAS,GAAI4d,SAAS7e,GAAQiB,QAAS,EAAa,CAAEt6B,MAAO,GAAUw6B,KAAMqf,IAAa,CAAEG,UAAW,IAEvGzf,MAAO,GAAI2d,SAAS7e,GAAQkB,MAAO,EAAa,CAAEv6B,MAAO,KAEzDy4B,WAAY,GAAIyf,SAAS7e,GAAQZ,WAAY,EAAa,CAAEz4B,MAAO,KAInEoO,MAAO,GAAI8pC,SAAS7e,GAAQjrB,MAAO,GAAS,CAAEpO,MAAO,KAErDqO,UAAW,GAAI6pC,SAAS7e,GAAQhrB,UAAW,EAAa,CAAErO,MAAO,KAEjEsO,QAAS,GAAI4pC,SAAS7e,GAAQ/qB,QAAS,GAAW,CAAEtO,MAAO,KAE3DuO,OAAQ,GAAI2pC,SAAS7e,GAAQ9qB,OAAQxP,GAAKA,EAAEiB,OAAS,GAAU,CAAEA,MAAO,KAExEwO,OAAQ,GAAI0pC,SAAS7e,GAAQ7qB,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IAAW,CAAEA,MAAO,KAE1FyO,MAAO,GAAIypC,SAAS7e,GAAQ5qB,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAW,CAAEA,MAAO,KAEvF0O,SAAU,GAAIwpC,SAAS7e,GAAQ3qB,SAAU,GAAY,CAAE1O,MAAO,KAE9D2O,SAAU,GAAIupC,SAAS7e,GAAQ1qB,SAAU,GAAY,CAAE3O,MAAO,KAE9D4O,OAAQ,GAAIspC,SAAS7e,GAAQzqB,OAAQ,GAAU,CAAE5O,MAAO,KAExD6O,QAAS,GAAIqpC,SAAS7e,GAAQxqB,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAY,CAAEA,MAAO,KAE/F8O,MAAO,GAAIopC,SAAS7e,GAAQvqB,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAU,CAAEA,MAAO,MCtLlF,GAAM,GAAS8R,WAEfuoC,GAAc,CAAC5yC,EAAaia,IAA0Bja,aAAgB,GAAWA,EAAOia,EACxF44B,GAAW,CAAC7yC,EAAaia,IAA0Bja,aAAgB,GAAWA,EAAKE,QAAQ8jB,KAAO/J,EAClG64B,GAAax7C,GAAqBs7C,GAAYt7C,EAAE0I,OAAS,GACzD+yC,GAAkBz7C,GAAsBs7C,GAAYt7C,EAAEiB,QAAU,GAChEy6C,GAAiB17C,GAAqBs7C,GAAYt7C,EAAE0I,MAAQ1I,EAAE0I,KAAKE,QAAQ8jB,KAAO,GAClFivB,GAAyB37C,GAAqB,GAAMyM,SAASivC,GAAc17C,IAC3E47C,GAAsB57C,GAAsBs7C,GAAYt7C,EAAEiB,OAASjB,EAAEiB,MAAM2H,QAAQ8jB,KAAO,GAC1FmvB,GAAgB77C,GAAuCA,EAAEgG,QAAUhG,EAAEiG,SAAW,GAChF61C,GAAwB,CAAEpzC,KAAM8yC,GAAWv6C,MAAOy6C,GAAevwC,KAAMuwC,IACvEK,GAA6B,CAAErzC,KAAM+yC,GAAgBx6C,MAAO26C,GAAoBzwC,KAAMywC,IACtFI,GAA0B,CAAEtzC,KAAM8yC,GAAW9uB,KAAMgvB,GAAevrC,MAAO,IAElE8rC,GACb,CAIE36C,OAAQ,GAAI63C,SAAShvB,GAAQ7oB,OAAQ,IAErCsb,WAAY,GAAIu8B,SAAShvB,GAAQvN,WAC/B4+B,GACA,CAAE9yC,KAAM8yC,KAGV3+B,UAAW,GAAIs8B,SAAShvB,GAAQtN,UAC9B7c,GAAK,GAAS65C,QAAQ75C,EAAE0sB,MAAQ,IAChC,CAAEA,KAAM1sB,GAAKA,EAAE0sB,MAAQ,KAKzBhe,MAAO,GAAIyqC,SAAShvB,GAAQzb,MACzB1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGXulB,MAAO,GAAI2yB,SAAShvB,GAAQ3D,MAC1BxmB,GAAK,GAAS65C,QAAQ75C,EAAE0sB,MAAQ,IAChC,CAAEvP,MAAO,GAAYuP,KAAM1sB,GAAKA,EAAE0sB,MAAQ,IAC1C,CAAEwvB,SAAU,GACZ,CAAExzC,KAAM1I,GAAK,GAAS65C,QAAQ75C,EAAE0sB,MAAQ,IAAUvc,MAAO,GAAYkb,KAAMrrB,GAAKA,EAAE0sB,MAAQ,GAASvP,MAAO,KAG5Gtc,IAAK,GAAIs4C,SAAShvB,GAAQtpB,IACxB86C,GACA,CAAEjzC,KAAM8yC,GAAWrrC,MAAO,KAG5B1B,IAAK,GAAI0qC,SAAShvB,GAAQ1b,IACxBktC,GACA,CAAEjzC,KAAM8yC,GAAWrrC,MAAO,GAAYlP,MAAOy6C,KAG/C92C,IAAK,GAAIu0C,SAAShvB,GAAQvlB,IACxB42C,GACA,CAAE9yC,KAAM8yC,GAAW9uB,KAAMgvB,KAG3BtxB,SAAU,GAAI+uB,SAAShvB,GAAQC,SAC7BoxB,GACA,CAAE9yC,KAAM8yC,GAAW9uB,KAAMgvB,KAG3BrxB,QAAS,GAAI8uB,SAAShvB,GAAQE,QAC5BmxB,GACA,CAAE9yC,KAAM8yC,GAAW9uB,KAAMgvB,KAG3BpxB,OAAQ,GAAI6uB,SAAShvB,GAAQG,OAC3BkxB,GACA,CAAE9yC,KAAM8yC,GAAW9uB,KAAMgvB,GAAevrC,MAAO,KAGjDtL,OAAQ,GAAIs0C,SAAShvB,GAAQtlB,OAC3B,GACA,CAAE6D,KAAM8yC,GAAW9uB,KAAMgvB,GAAevsC,QAAS,GACjD,GACA2sC,IAGFvxB,YAAa,GAAI4uB,SAAShvB,GAAQI,YAChCoxB,GACA,CAAEjzC,KAAM8yC,KAGVhxB,WAAY,GAAI2uB,SAAShvB,GAAQK,WAC/BmxB,GACA,CAAEjzC,KAAM8yC,KAGV/wB,SAAU,GAAI0uB,SAAShvB,GAAQM,SAC7BkxB,GACA,CAAEjzC,KAAM8yC,GAAWrrC,MAAO,KAG5Bua,YAAa,GAAIyuB,SAAShvB,GAAQO,YAChC8wB,GACA,CAAE9yC,KAAM8yC,GAAWxO,MAAO,GAC1B,GACAgP,IAGF9+B,MAAO,GAAIi8B,SAAShvB,GAAQjN,MAC1Bs+B,GACA,CAAE9yC,KAAM8yC,KAGV7wB,SAAU,GAAIwuB,SAAShvB,GAAQQ,SAC7B,EACA,CAAEjiB,KAAM8yC,GAAW9uB,KAAMgvB,GAAevsC,QAAS,GACjD,GACA2sC,IAGF1lC,KAAM,GAAI+iC,SAAShvB,GAAQ/T,KACzBulC,GACA,CAAEjzC,KAAM8yC,GAAWxO,MAAO,GAC1B,CAAEpiB,QAAS,EAAahf,MAAO,IAC/BowC,IAGFxqC,KAAM,GAAI2nC,SAAShvB,GAAQ3Y,KACzBgqC,GACA,CAAE9yC,KAAM8yC,IACR,CAAE9J,SAAUgK,IACZ,CAAElqC,KAAMkqC,KAGV9wB,QAAS,GAAIuuB,SAAShvB,GAAQS,QAC5B4wB,GACA,CAAE9yC,KAAM8yC,KAGV3wB,QAAS,GAAIsuB,SAAShvB,GAAQU,QAC5B2wB,GACA,CAAE9yC,KAAM8yC,GAAW3wB,QAAS2wB,GAAWrsC,QAAS,GAChD,GACA2sC,IAGFhxB,QAAS,GAAIquB,SAAShvB,GAAQW,QAC5B0wB,GACA,CAAE9yC,KAAM8yC,GAAW1wB,QAAS0wB,GAAWrsC,QAAS,GAChD,GACA2sC,IAGFzpC,KAAM,GAAI8mC,SAAShvB,GAAQ9X,KACzBmpC,GACA,CAAE9yC,KAAM8yC,GAAW5qC,QAAS,IAC5B,GACAkrC,IAGF/wB,QAAS,GAAIouB,SAAShvB,GAAQY,QAC5BywB,GACA,CAAE9yC,KAAM8yC,IACR,CAAEpjB,MAAO,KAGXpN,OAAQ,GAAImuB,SAAShvB,GAAQa,OAC3BwwB,GACA,CAAE9yC,KAAM8yC,GAAWrsC,QAAS,GAC5B,GACA2sC,IAGF7wB,WAAY,GAAIkuB,SAAShvB,GAAQc,WAC/BuwB,GACA,CAAE9yC,KAAM8yC,GAAWrsC,QAAS,GAC5B,CAAEgtC,KAAM,GACRL,IAGF5wB,KAAM,GAAIiuB,SAAShvB,GAAQe,KACzBswB,GACA,CAAE9yC,KAAM8yC,GAAWr+B,MAAO,KAG5BgO,KAAM,GAAIguB,SAAShvB,GAAQgB,KACzBqwB,GACA,CAAE9yC,KAAM8yC,GAAWr+B,MAAO,KAG5BiO,KAAM,GAAI+tB,SAAShvB,GAAQiB,KACzBowB,GACA,CAAE9yC,KAAM8yC,GAAWr+B,MAAO,KAG5BjH,OAAQ,GAAIijC,SAAShvB,GAAQjU,OAC3BslC,GACA,CAAE9yC,KAAM8yC,GAAWtlC,OAAQslC,KAG7BnjC,QAAS,GAAI8gC,SAAShvB,GAAQ9R,QAC5BmjC,GACA,CAAE9yC,KAAM8yC,GAAWnjC,QAASmjC,KAG9B3iC,QAAS,GAAIsgC,SAAShvB,GAAQtR,QAC5B,GACA,CAAEnQ,KAAM8yC,GAAW9uB,KAAMgvB,GAAevsC,QAAS,GACjD,CAAEvD,MAAO,IACTkwC,IAGFhjC,YAAa,GAAIqgC,SAAShvB,GAAQrR,YAChC,GACA,CAAEpQ,KAAM8yC,GAAW9uB,KAAMgvB,GAAevsC,QAAS,GACjD,CAAEvD,MAAO,IACTkwC,IAGF52C,UAAW,GAAIi0C,SAAShvB,GAAQjlB,UAC9B,GACA,CAAEwD,KAAM8yC,GAAWxO,MAAO,GAC1B,CAAEpiB,QAAS,EAAahf,MAAO,IAC/BowC,IAGF3wB,KAAM,GAAI8tB,SAAShvB,GAAQkB,KACzBswB,GACA,CAAEjzC,KAAM8yC,KAGV90C,MAAO,GAAIyyC,SAAShvB,GAAQzjB,MAC1Bi1C,GACA,CAAEjzC,KAAM8yC,KAGVr+B,MAAO,GAAIg8B,SAAShvB,GAAQhN,MAC1B,GACA,CAAEzU,KAAM8yC,KAGVlwB,WAAY,GAAI6tB,SAAShvB,GAAQmB,WAC/BkwB,GACA,CAAE9yC,KAAM8yC,GAAWr+B,MAAO,KAG5ByE,OAAQ,GAAIu3B,SAAShvB,GAAQvI,OAC3B+5B,GACA,CAAEjzC,KAAM8yC,KAKVjwB,KAAM,GAAI4tB,SAAShvB,GAAQoB,KACzB,GACA,CAAE7iB,KAAM8yC,IACR,CAAElR,UAAW,GAAU/gB,OAAQ,GAAUpd,OAAQ,GAAUsjB,OAAQ,IACnEusB,IAGFxwB,KAAM,GAAI2tB,SAAShvB,GAAQqB,KACzBgwB,GACA,CAAE9yC,KAAM8yC,GAAWhwB,KAAM,IACzB,CAAEZ,QAAS,GACXoxB,IAGFzzC,OAAQ,GAAI4wC,SAAShvB,GAAQ5hB,OAC3BizC,GACA,CAAE9yC,KAAM8yC,GAAWjzC,OAAQ,GAC3B,GACAyzC,IAGFltC,IAAK,GAAIqqC,SAAShvB,GAAQrb,IACxB0sC,GACA,CAAE9yC,KAAM8yC,GAAW1sC,IAAK,GACxB,GACAktC,IAGF33C,IAAK,GAAI80C,SAAShvB,GAAQ9lB,IACxBrE,GAAK,GAAS65C,QAAQ75C,EAAE8F,WAAa,IACrC,CAAE4C,KAAM8yC,GAAW11C,UAAW9F,GAAKA,EAAE8F,WAAa,IAClD,GACAk2C,IAGFtjC,MAAO,GAAIygC,SAAShvB,GAAQzR,MAC1B1Y,GAAK,GAAM0B,OAAO,CAAE8G,KAAMgzC,GAAUx7C,GAAIo8C,KAAMZ,GAAUx7C,KACxD,CAAE0I,KAAM8yC,GAAWhzC,KAAM,GACzB,GACAwzC,IAGFh2C,OAAQ,GAAImzC,SAAShvB,GAAQnkB,OAC3B61C,GACA,CAAEnzC,KAAM8yC,GAAWx1C,OAAQ61C,GAAc51C,QAAS41C,IAClD,GACA,CAAEnzC,KAAM8yC,GAAW9uB,KAAMgvB,GAAeW,QAASR,GAAc1rC,MAAO,KAGxEpB,IAAK,GAAIoqC,SAAShvB,GAAQpb,IACxB,EACA,CAAE9N,MAAOw6C,GAAgBtwC,KAAMswC,GAAgB7qC,QAAS,IACxD,GACAmrC,IAGFtwB,MAAO,GAAI0tB,SAAShvB,GAAQsB,MAC1BzrB,GAAK,GAAS65C,QAAQ,GAAMn4C,OAAO,CACjC46C,GAAIt8C,EAAEs8C,IAAM,GACZ7wB,MAAO,GAASouB,QAAQ75C,EAAEsF,UAAYo2C,GAAc17C,OAEtD,CAAE0I,KAAM8yC,GAAWc,GAAIt8C,GAAKA,EAAEs8C,IAAM,IACpC,CAAEh3C,SAAUtF,GAAKA,EAAEsF,UAAYo2C,GAAc17C,IAC7Cg8C,IAGFtwB,UAAW,GAAIytB,SAAShvB,GAAQuB,UAC9B1rB,GAAK,GAAQ65C,QACX,GAASA,QAAQ75C,EAAEsF,UAAYo2C,GAAc17C,IAC7CA,EAAEuF,QAAU,IAEd,CAAEmD,KAAM8yC,GAAWj2C,OAAQvF,GAAKA,EAAEuF,QAAU,IAC5C,CAAED,SAAUtF,GAAKA,EAAEsF,UAAYo2C,GAAc17C,IAC7Cg8C,IAGFj4C,MAAO,GAAIo1C,SAAShvB,GAAQpmB,MAC1B/D,GAAK,GAAQ65C,QACX75C,EAAEsF,UAAYo2C,GAAc17C,GAC5BA,EAAEuF,QAAU,IAEd,CAAEmD,KAAM8yC,GAAWj2C,OAAQvF,GAAKA,EAAEuF,QAAU,IAC5C,CAAED,SAAUtF,GAAKA,EAAEsF,UAAYo2C,GAAc17C,IAC7Cg8C,IAKFrwB,UAAW,GAAIwtB,SAAShvB,GAAQwB,UAC9B3rB,GAAK,GAAS65C,QAAQ75C,EAAEurB,MAAQ,IAChC,CAAEvoB,EAAGhD,GAAKs7C,GAAYt7C,EAAEgD,EAAG,IAAWC,EAAGjD,GAAKs7C,GAAYt7C,EAAEiD,EAAG,IAAWkiC,GAAI,EAAa5Z,KAAM,IACjG,GACA,CAAEgxB,IAAKv8C,GAAKu7C,GAASv7C,EAAEgD,EAAG,IAAUw5C,IAAKx8C,GAAKu7C,GAASv7C,EAAEiD,EAAG,IAAUw5C,MAAOz8C,GAAKu7C,GAASv7C,EAAEgD,EAAG,IAAU05C,MAAO18C,GAAKu7C,GAASv7C,EAAEiD,EAAG,MAGtI2oB,SAAU,GAAIutB,SAAShvB,GAAQyB,SAC7B5rB,GAAK,GAAS65C,QAAQ75C,EAAEurB,MAAQ,IAChC,CAAEvoB,EAAGhD,GAAKs7C,GAAYt7C,EAAEgD,EAAG,IAAWC,EAAGjD,GAAKs7C,GAAYt7C,EAAEiD,EAAG,IAAWkiC,GAAI,EAAa5Z,KAAM,IACjG,GACA,CAAEgxB,IAAKv8C,GAAKu7C,GAASv7C,EAAEgD,EAAG,IAAUw5C,IAAKx8C,GAAKu7C,GAASv7C,EAAEiD,EAAG,IAAUw5C,MAAOz8C,GAAKu7C,GAASv7C,EAAEgD,EAAG,IAAU05C,MAAO18C,GAAK,GAAMyM,SAAS8uC,GAASv7C,EAAEiD,EAAG,OAGrJ4oB,UAAW,GAAIstB,SAAShvB,GAAQ0B,UAC9B7rB,GAAK,GAAS65C,QAAQ75C,EAAEurB,MAAQ,IAChC,CAAEvoB,EAAGhD,GAAKs7C,GAAYt7C,EAAEgD,EAAG,IAAWC,EAAGjD,GAAKs7C,GAAYt7C,EAAEiD,EAAG,IAAWkiC,GAAI,EAAa5Z,KAAM,IACjG,GACA,CAAEgxB,IAAKv8C,GAAKu7C,GAASv7C,EAAEgD,EAAG,IAAUw5C,IAAKx8C,GAAKu7C,GAASv7C,EAAEiD,EAAG,IAAUw5C,MAAOz8C,GAAK,GAAMyM,SAAS8uC,GAASv7C,EAAEgD,EAAG,KAAW05C,MAAO18C,GAAKu7C,GAASv7C,EAAEiD,EAAG,MAGtJ6oB,SAAU,GAAIqtB,SAAShvB,GAAQ2B,SAC7B9rB,GAAK,GAAS65C,QAAQ75C,EAAEurB,MAAQ,IAChC,CAAEvoB,EAAGhD,GAAKs7C,GAAYt7C,EAAEgD,EAAG,IAAWC,EAAGjD,GAAKs7C,GAAYt7C,EAAEiD,EAAG,IAAWkiC,GAAI,EAAa5Z,KAAM,IACjG,GACA,CAAEgxB,IAAKv8C,GAAKu7C,GAASv7C,EAAEgD,EAAG,IAAUw5C,IAAKx8C,GAAKu7C,GAASv7C,EAAEiD,EAAG,IAAUw5C,MAAOz8C,GAAK,GAAMyM,SAAS8uC,GAASv7C,EAAEgD,EAAG,KAAW05C,MAAO18C,GAAK,GAAMyM,SAAS8uC,GAASv7C,EAAEiD,EAAG,OAGrK8oB,UAAW,GAAIotB,SAAShvB,GAAQ4B,UAC9B/rB,GAAK,GAAS65C,QAAQ75C,EAAEurB,MAAQ,IAChC,CAAEvoB,EAAGhD,GAAKs7C,GAAYt7C,EAAEgD,EAAG,IAAWC,EAAGjD,GAAKs7C,GAAYt7C,EAAEiD,EAAG,IAAWsoB,KAAM,IAChF,GACA,CAAEkxB,MAAOz8C,GAAKu7C,GAASv7C,EAAEgD,EAAG,IAAU05C,MAAO18C,GAAKu7C,GAASv7C,EAAEiD,EAAG,MAKlEY,IAAK,GAAIs1C,SAAShvB,GAAQtmB,IACxB,GAAM4I,SAAS,IACf,CAAE/D,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGFl4C,IAAK,GAAIq1C,SAAShvB,GAAQrmB,IACxB,GAAM2I,SAAS,IACf,CAAE/D,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGFhwB,IAAK,GAAImtB,SAAShvB,GAAQ6B,IACxB,GAAMvf,SAAS,IACf,CAAE/D,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGF/vB,IAAK,GAAIktB,SAAShvB,GAAQ8B,IACxB,GAAMxf,SAAS,IACf,CAAE/D,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGF9vB,IAAK,GAAIitB,SAAShvB,GAAQ+B,IACxB,GAAMzf,SAAS,IACf,CAAE/D,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGF7vB,SAAU,GAAIgtB,SAAShvB,GAAQgC,SAC7B,GAAM1f,SAAS,IACf,CAAE/D,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGF5vB,OAAQ,GAAI+sB,SAAShvB,GAAQiC,OAC3B,GAAM3f,SAAS,IACf,CAAE/D,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGF3vB,OAAQ,GAAI8sB,SAAShvB,GAAQkC,OAC3B,GACA,CAAE3jB,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGF1vB,MAAO,GAAI6sB,SAAShvB,GAAQmC,MAC1B,GACA,CAAE5jB,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAGFzvB,OAAQ,GAAI4sB,SAAShvB,GAAQoC,OAC3B,GACA,CAAE7jB,KAAM8yC,GAAWv6C,MAAO,IAC1B,GACA+6C,IAKFhtC,QAAS,GAAImqC,SAAShvB,GAAQnb,QAC5B,EACA,CAAE/N,MAAO,KAGXwC,QAAS,GAAI01C,SAAShvB,GAAQ1mB,QAC5B,EACA,CAAEiF,KAAM8yC,KAGVjhC,WAAY,GAAI4+B,SAAShvB,GAAQ5P,WAC/B,EACA,CAAE7R,KAAM8yC,KAGVrsC,QAAS,GAAIgqC,SAAShvB,GAAQhb,QAC5B,EACA,CAAEzG,KAAM8yC,GAAWrwC,KAAMqwC,GAAWrsC,QAAS,GAC7C,GACA2sC,IAGF1sC,WAAY,GAAI+pC,SAAShvB,GAAQ/a,WAC/B,EACA,CAAE1G,KAAM8yC,GAAWrwC,KAAMqwC,GAAWrsC,QAAS,GAC7C,GACA2sC,IAGF9mC,OAAQ,GAAImkC,SAAShvB,GAAQnV,OAC3B,EACA,CAAE/T,MAAOw6C,GAAgBtwC,KAAMswC,GAAgB7qC,QAAS,IACxD,GACAmrC,IAGF9mC,cAAe,GAAIkkC,SAAShvB,GAAQlV,cAClC,EACA,CAAEhU,MAAOw6C,GAAgBtwC,KAAMswC,GAAgB7qC,QAAS,IACxD,GACAmrC,IAGF7mC,UAAW,GAAIikC,SAAShvB,GAAQjV,UAC9B,EACA,CAAEjU,MAAOw6C,GAAgBtwC,KAAMswC,GAAgB7qC,QAAS,IACxD,GACAmrC,IAGF5mC,iBAAkB,GAAIgkC,SAAShvB,GAAQhV,iBACrC,EACA,CAAElU,MAAOw6C,GAAgBtwC,KAAMswC,GAAgB7qC,QAAS,IACxD,GACAmrC,IAMF1sC,MAAO,GAAI8pC,SAAShvB,GAAQ9a,MAC1B,GACA,CAAEpO,MAAOw6C,KAGXnsC,UAAW,GAAI6pC,SAAShvB,GAAQ7a,UAC9B,EACA,CAAErO,MAAOw6C,KAGXlsC,QAAS,GAAI4pC,SAAShvB,GAAQ5a,QAC5B,GACA,CAAEtO,MAAOw6C,KAGXjsC,OAAQ,GAAI2pC,SAAShvB,GAAQ3a,OAC3B,GACA,CAAEvO,MAAOw6C,KAGXhsC,OAAQ,GAAI0pC,SAAShvB,GAAQ1a,OAC3BgsC,GACA,CAAEx6C,MAAOw6C,KAGX/rC,MAAO,GAAIypC,SAAShvB,GAAQza,MAC1B1P,GAAK,GAAQ65C,QAAQ+B,GAAmB57C,IACxC,CAAEiB,MAAOw6C,KAGX9rC,SAAU,GAAIwpC,SAAShvB,GAAQxa,SAC7B,GACA,CAAE1O,MAAOw6C,KAGX7rC,SAAU,GAAIupC,SAAShvB,GAAQva,SAC7B,GACA,CAAE3O,MAAOw6C,KAGX5rC,OAAQ,GAAIspC,SAAShvB,GAAQta,OAC3B,GACA,CAAE5O,MAAOw6C,KAGX3rC,QAAS,GAAIqpC,SAAShvB,GAAQra,QAC5B,GACA,CAAE7O,MAAOw6C,KAGX1rC,MAAO,GAAIopC,SAAShvB,GAAQpa,MAC1B/P,GAAK,GAAQ65C,QAAQ+B,GAAmB57C,IACxC,CAAEiB,MAAOw6C,MC7iBP,GAAM,GAAQ1oC,WAEd4pC,GAAct4C,GAAeA,aAAe,GAAUA,OAAMuB,EAC5Dg3C,GAAY58C,GAAoB28C,GAAW38C,EAAEqE,MAAQ,GACrDw4C,GAAiB78C,GAAoB28C,GAAW38C,EAAEqE,KAAOrE,EAAEqE,IAAIuE,QAAQ3H,MAAQ,GAC/E67C,GAAyB98C,GAAoB,GAAMyM,SAASowC,GAAc78C,IAC1E+8C,GAAe/8C,GAAoB28C,GAAW38C,EAAEqE,KAAOrE,EAAEqE,IAAIuE,QAAQrH,IAAM,GAC3Ey7C,GAAyB,CAAE34C,IAAKu4C,GAAUr7C,IAAKw7C,GAAa97C,MAAO47C,IAEnEI,GAAiBj9C,GAAsB28C,GAAW38C,EAAEiB,QAAU,GAC9Di8C,GAAsBl9C,GAAsB28C,GAAW38C,EAAEiB,OAASjB,EAAEiB,MAAM2H,QAAQ3H,MAAQ,GAE1Fk8C,GAAyB,CAAE57C,IADPvB,GAAsB28C,GAAW38C,EAAEiB,OAASjB,EAAEiB,MAAM2H,QAAQrH,IAAM,GACpCN,MAAOi8C,GAAoB/xC,KAAM+xC,IAE5EE,GACb,CAIE97C,OAAQ,GAAI63C,SAASx8B,GAAOrb,OAAQ,IAEpCsb,WAAY,GAAIu8B,SAASx8B,GAAOC,WAC9BggC,GACA,CAAEv4C,IAAKu4C,KAGT//B,UAAW,GAAIs8B,SAASx8B,GAAOE,UAC7B7c,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,GAASjB,EAAEuB,KAAO,IAClD,CAAEN,MAAOjB,GAAKA,EAAEiB,OAAS,IACzB,CAAEM,IAAKvB,GAAKA,EAAEuB,KAAO,KAKvBmN,MAAO,GAAIyqC,SAASx8B,GAAOjO,MACxB1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGXJ,IAAK,GAAIs4C,SAASx8B,GAAO9b,IACvBi8C,GACA,CAAEz4C,IAAKu4C,GAAUr7C,IAAKw7C,KAGxBtuC,IAAK,GAAI0qC,SAASx8B,GAAOlO,IACvBquC,GACA,CAAEz4C,IAAKu4C,GAAUr7C,IAAKw7C,GAAa97C,MAAO47C,IAC1C,GACA,CAAEQ,cAAeR,KAGnB//B,IAAK,GAAIq8B,SAASx8B,GAAOG,IACvB,EACA,CAAEzY,IAAKu4C,GAAUr7C,IAAKw7C,KAGxBhgC,OAAQ,GAAIo8B,SAASx8B,GAAOI,OAC1B,EACA,CAAE1Y,IAAKu4C,GAAUr7C,IAAKw7C,KAGxB//B,KAAM,GAAIm8B,SAASx8B,GAAOK,KACxBhd,GAAK,GAAS65C,QAAQkD,GAAY/8C,IAClC,CAAEqE,IAAKu4C,KAGT/gC,OAAQ,GAAIs9B,SAASx8B,GAAOd,OAC1B7b,GAAK,GAAS65C,QAAQgD,GAAc78C,IACpC,CAAEqE,IAAKu4C,KAGTr4C,QAAS,GAAI40C,SAASx8B,GAAOpY,QAC3BvE,GAAK,GAAM0B,OAAO,CAChBsb,KAAM,GAAS68B,QAAQkD,GAAY/8C,IACnC6b,OAAQ,GAASg+B,QAAQgD,GAAc78C,MAEzC,CAAEqE,IAAKu4C,KAGT3/B,MAAO,GAAIk8B,SAASx8B,GAAOM,MACzBjd,GAAK,GAAS65C,QAAQ,GAAMn4C,OAAO,CACjCH,IAAKw7C,GAAY/8C,GACjBiB,MAAO47C,GAAc78C,MAEvB,CAAEqE,IAAKu4C,KAGT1/B,MAAO,GAAIi8B,SAASx8B,GAAOO,MACzB0/B,GACA,CAAEv4C,IAAKu4C,KAGTz/B,MAAO,GAAIg8B,SAASx8B,GAAOQ,MACzB,GACA,CAAE9Y,IAAKu4C,KAGT7tC,IAAK,GAAIoqC,SAASx8B,GAAO5N,IACvB,GACA,CAAE9N,MAAOg8C,GAAe9xC,KAAM8xC,GAAersC,QAAS,IACtD,GACAusC,IAGF3rC,KAAM,GAAI2nC,SAASx8B,GAAOnL,KACxBorC,GACA,CAAEv4C,IAAKu4C,IACP,CAAElL,SAAUmL,GAAeS,YAAaP,IACxCC,IAGF34C,IAAK,GAAI80C,SAASx8B,GAAOtY,IACvBrE,GAAK,GAAQ65C,QAAQ75C,EAAE8F,WAAa+2C,GAAc78C,GAAIA,EAAEoe,cAAgB2+B,GAAY/8C,IACpF,CAAEqE,IAAKu4C,IACP,CAAE92C,UAAW9F,GAAKA,EAAE8F,WAAa+2C,GAAc78C,GAAIoe,aAAcpe,GAAKA,EAAEoe,cAAgB2+B,GAAY/8C,IACpGg9C,IAGF5/B,cAAe,GAAI+7B,SAASx8B,GAAOS,cACjC,GACA,CAAE/Y,IAAKu4C,KAGTv/B,gBAAiB,GAAI87B,SAASx8B,GAAOU,gBAClCrd,IACC,KAAMA,EAAE0B,kBAAkB,IACxB,OAAO,GAGT,MAAM67C,EAAY13C,EAAc7F,EAAE0B,OAAsBkH,QAAQzC,OAEhE,OAAO,GAAQ0zC,QAAQ,GAAMz4B,UAAUm8B,EAAW,GAAS3qC,YAE7D,CAAElR,OAAQ1B,GAAKA,EAAE0B,QAAU,KAK7BsN,QAAS,GAAImqC,SAASx8B,GAAO3N,QAC3B,EACA,CAAE/N,MAAO,KAGXkO,QAAS,GAAIgqC,SAASx8B,GAAOxN,QAC3B,EACA,CAAElO,MAAOg8C,GAAe9xC,KAAM8xC,GAAe9tC,QAAS,GACtD,GACAguC,IAGF/tC,WAAY,GAAI+pC,SAASx8B,GAAOvN,WAC9B,EACA,CAAEnO,MAAOg8C,GAAe9xC,KAAM8xC,GAAe9tC,QAAS,GACtD,GACAguC,IAGFnoC,OAAQ,GAAImkC,SAASx8B,GAAO3H,OAC1B,EACA,CAAE/T,MAAOg8C,GAAe9xC,KAAM8xC,GAAersC,QAAS,IACtD,GACAusC,IAGFloC,cAAe,GAAIkkC,SAASx8B,GAAO1H,cACjC,EACA,CAAEhU,MAAOg8C,GAAe9xC,KAAM8xC,GAAersC,QAAS,IACtD,GACAusC,IAGFjoC,UAAW,GAAIikC,SAASx8B,GAAOzH,UAC7B,EACA,CAAEjU,MAAOg8C,GAAe9xC,KAAM8xC,GAAersC,QAAS,IACtD,GACAusC,IAGFhoC,iBAAkB,GAAIgkC,SAASx8B,GAAOxH,iBACpC,EACA,CAAElU,MAAOg8C,GAAe9xC,KAAM8xC,GAAersC,QAAS,IACtD,GACAusC,IAKF9tC,MAAO,GAAI8pC,SAASx8B,GAAOtN,MAAO,GAAS,CAAEpO,MAAO,KAEpDqO,UAAW,GAAI6pC,SAASx8B,GAAOrN,UAAW,EAAa,CAAErO,MAAO,KAEhEsO,QAAS,GAAI4pC,SAASx8B,GAAOpN,QAAS,GAAW,CAAEtO,MAAO,KAE1DuO,OAAQ,GAAI2pC,SAASx8B,GAAOnN,OAAQ,GAAU,CAAEvO,MAAO,KAEvDwO,OAAQ,GAAI0pC,SAASx8B,GAAOlN,OAAQzP,GAAK,GAAS65C,QAAQqD,GAAmBl9C,IAAK,CAAEiB,MAAO,KAE3FyO,MAAO,GAAIypC,SAASx8B,GAAOjN,MAAO1P,GAAKA,EAAEiB,OAAS,GAAS,CAAEA,MAAO,KAEpE0O,SAAU,GAAIwpC,SAASx8B,GAAOhN,SAAU3P,GAAK,GAAY,CAAEiB,MAAO,KAElE2O,SAAU,GAAIupC,SAASx8B,GAAO/M,SAAU,GAAY,CAAE3O,MAAO,KAE7D4O,OAAQ,GAAIspC,SAASx8B,GAAO9M,OAAQ,GAAU,CAAE5O,MAAO,KAEvD6O,QAAS,GAAIqpC,SAASx8B,GAAO7M,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAW,CAAEA,MAAO,KAE7F8O,MAAO,GAAIopC,SAASx8B,GAAO5M,MAAO/P,GAAK,GAAQ65C,QAAQqD,GAAmBl9C,IAAK,CAAEiB,MAAO,MChNpF,GAAM,GAAW8R,WAGjByqC,GAAY,IAAI,GAAS,CAC7Bj8C,IAAK,GAASqR,SAAS2L,cACvBtd,MAAO,GAAS2R,SAAS2L,cACzBzC,UAAW,IAAItZ,IAAI,CACjB,CAAC,eAAgB,WACjB,CAAC,yBAA0B,cAC3B,CAAC,uBAAwB,WACzB,CAAC,uBAAwB,QACzB,CAAC,oBAAqB,SACtB,CAAC,8BAA+B,OAChC,CAAC,kBAAmB,cAKXi7C,GACb,CAIEn8C,OAAQ,GAAI63C,SAASxyB,GAAUrlB,OAAQ,IAEvCslB,GAAI,GAAIuyB,SAASxyB,GAAUC,GAAI,IAE/BC,IAAK,GAAIsyB,SAASxyB,GAAUE,IAAK,IAEjCC,OAAQ,GAAIqyB,SAASxyB,GAAUG,OAAQ,IAEvCzS,EAAG,GAAI8kC,SAASxyB,GAAUtS,EAAG,IAE7B0S,MAAO,GAAIoyB,SAASxyB,GAAUI,MAAO,IAErCC,OAAQ,GAAImyB,SAASxyB,GAAUK,OAAQ,IAEvCC,IAAK,GAAIkyB,SAASxyB,GAAUM,IAAK,IAEjCC,KAAM,GAAIiyB,SAASxyB,GAAUO,KAAM,IAEnCC,MAAO,GAAIgyB,SAASxyB,GAAUQ,MAAO,IAErCC,OAAQ,GAAI+xB,SAASxyB,GAAUS,OAAQ,IAIvCxiB,IAAK,GAAIu0C,SAASxyB,GAAU/hB,IAAK,GAAY,CAAE3D,MAAO,GAAYq5C,OAAQ,KAE1E1hC,IAAK,GAAIugC,SAASxyB,GAAU/N,IAAK,GAAY,CAAE3X,MAAO,GAAYu5C,WAAY,KAE9EnzB,IAAK,GAAI8xB,SAASxyB,GAAUU,IAAK,GAAY,CAAEpmB,MAAO,GAAYw5C,WAAY,KAE9EnzB,IAAK,GAAI6xB,SAASxyB,GAAUW,IAAK,GAAY,CAAErmB,MAAO,GAAYy5C,QAAS,KAE3EnzB,IAAK,GAAI4xB,SAASxyB,GAAUY,IAAK,GAAY,CAAEtmB,MAAO,GAAYy5C,QAAS,KAE3E72C,IAAK,GAAIs1C,SAASxyB,GAAU9iB,IAAK,GAAY,CAAEb,EAAG,GAAYC,EAAG,KAEjEa,IAAK,GAAIq1C,SAASxyB,GAAU7iB,IAAK,GAAY,CAAEd,EAAG,GAAYC,EAAG,KAEjEukB,IAAK,GAAI2xB,SAASxyB,GAAUa,IAAK,GAAY,CAAEvmB,MAAO,GAAYy8C,SAAU,KAE5Ej2B,MAAO,GAAI0xB,SAASxyB,GAAUc,MAAO,GAAY,CAAErkB,EAAG,GAAYoD,EAAG,KAErEkhB,MAAO,GAAIyxB,SAASxyB,GAAUe,MAAO,GAAY,CAAE1kB,EAAG,GAAYC,EAAG,KAErE0kB,OAAQ,GAAIwxB,SAASxyB,GAAUgB,OAAQ,GAAY,CAAElmB,EAAG,GAAY0C,EAAG,KAEvEyjB,IAAK,GAAIuxB,SAASxyB,GAAUiB,IAAK,GAAY,CAAE5kB,EAAG,GAAYC,EAAG,KAEjE4kB,OAAQ,GAAIsxB,SAASxyB,GAAUkB,OAAQ,GAAY,CAAE7kB,EAAG,GAAYC,EAAG,KAEvE6kB,MAAO,GAAIqxB,SAASxyB,GAAUmB,MAAO,GAAY,CAAE9kB,EAAG,GAAYC,EAAG,KAErE8kB,OAAQ,GAAIoxB,SAASxyB,GAAUoB,OAAQ,GAAY,CAAE/kB,EAAG,GAAYC,EAAG,KAEvE8L,IAAK,GAAIoqC,SAASxyB,GAAU5X,IAAK,GAAY,CAAE9N,MAAO,GAAYkK,KAAM,KAIxEuD,MAAO,GAAIyqC,SAASxyB,GAAUjY,MAC3B1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGX+mB,KAAM,GAAImxB,SAASxyB,GAAUqB,KAAM,GAAY,CAAE/mB,MAAO,KAExDgnB,GAAI,GAAIkxB,SAASxyB,GAAUsB,GAAI,GAAY,CAAEhnB,MAAO,KAEpDinB,KAAM,GAAIixB,SAASxyB,GAAUuB,KAAM,GAAY,CAAEjnB,MAAO,KAExDknB,MAAO,GAAIgxB,SAASxyB,GAAUwB,MAAO,GAAY,CAAElnB,MAAO,KAE1DmnB,KAAM,GAAI+wB,SAASxyB,GAAUyB,KAAM,GAAY,CAAEnnB,MAAO,KAExDonB,GAAI,GAAI8wB,SAASxyB,GAAU0B,GAAI,GAAY,CAAEpnB,MAAO,KAEpDqnB,KAAM,GAAI6wB,SAASxyB,GAAU2B,KAAM,GAAY,CAAErnB,MAAO,KAExDuC,MAAO,GAAI21C,SAASxyB,GAAUnjB,MAAO,GAAY,CAAEvC,MAAO,KAE1DsC,IAAK,GAAI41C,SAASxyB,GAAUpjB,IAAK,GAAY,CAAEtC,MAAO,KAEtDsnB,IAAK,GAAI4wB,SAASxyB,GAAU4B,IAAK,GAAY,CAAEtnB,MAAO,KAEtDunB,KAAM,GAAI2wB,SAASxyB,GAAU6B,KAAM,GAAY,CAAEvnB,MAAO,KAExDwnB,IAAK,GAAI0wB,SAASxyB,GAAU8B,IAAK,GAAY,CAAExnB,MAAO,KAEtDynB,IAAK,GAAIywB,SAASxyB,GAAU+B,IAAK,GAAY,CAAEznB,MAAO,KAEtD0nB,IAAK,GAAIwwB,SAASxyB,GAAUgC,IAAK,GAAY,CAAE1nB,MAAO,KAEtD2nB,IAAK,GAAIuwB,SAASxyB,GAAUiC,IAAK,GAAY,CAAE3nB,MAAO,KAEtD4nB,KAAM,GAAIswB,SAASxyB,GAAUkC,KAAM,GAAY,CAAE5nB,MAAO,KAExD6nB,KAAM,GAAIqwB,SAASxyB,GAAUmC,KAAM,GAAY,CAAE7nB,MAAO,KAExD8nB,KAAM,GAAIowB,SAASxyB,GAAUoC,KAAM,GAAY,CAAE9nB,MAAO,KAExD+nB,KAAM,GAAImwB,SAASxyB,GAAUqC,KAAM,GAAY,CAAE/nB,MAAO,KAExDgoB,KAAM,GAAIkwB,SAASxyB,GAAUsC,KAAM,GAAY,CAAEhoB,MAAO,KAExDioB,UAAW,GAAIiwB,SAASxyB,GAAUuC,UAAW,GAAY,CAAEjoB,MAAO,KAElEkoB,QAAS,GAAIgwB,SAASxyB,GAAUwC,QAAS,GAAY,CAAEloB,MAAO,KAI9D2C,MAAO,GAAIu1C,SAASxyB,GAAU/iB,MAAO,GAAY,CAAE3C,MAAO,GAAY4C,IAAK,GAAYC,IAAK,KAE5FslB,eAAgB,GAAI+vB,SAASxyB,GAAUyC,eAAgB,GAAY,CAAEu0B,KAAM,GAAYC,MAAO,GAAYC,MAAO,KAEjHx0B,KAAM,GAAI8vB,SAASxyB,GAAU0C,KAAM,GAAY,CAAEsY,MAAO,GAAY/1B,MAAO,GAAYsT,IAAK,KAI5F7L,IAAK,GAAI8lC,SAASxyB,GAAUtT,IAAK,GAAY,GAAI,CAAExP,IAAK,GAAYC,IAAK,GAAYuqB,MAAO,EAAayvB,WAAY,IAIrHx0B,WAAY,GAAI6vB,SAASxyB,GAAU2C,WAAY,GAAU,CAAEroB,MAAO,IAAc,CAAE08C,KAAM,GAAYI,UAAW,KAE/Gx0B,OAAQ,GAAI4vB,SAASxyB,GAAU4C,OAAQ,GAAU,CAAEtoB,MAAO,IAAc,CAAEkL,OAAQ,GAAUsjB,OAAQ,GAAUuuB,UAAW,GAAYC,UAAW,GAAYC,YAAa,EAAaC,kBAAmB,KAEzM30B,UAAW,GAAI2vB,SAASxyB,GAAU6C,UAAW,GAAU,CAAEvoB,MAAO,IAAc,CAAE+8C,UAAW,GAAYC,UAAW,GAAYE,kBAAmB,KAEjJ10B,YAAa,GAAI0vB,SAASxyB,GAAU8C,YAAa,GAAMhd,SAAS,IAAa,CAAExL,MAAO,KAItF+N,QAAS,GAAImqC,SAASxyB,GAAU3X,QAAS,EAAa,CAAE/N,MAAO,KAE/DyoB,OAAQ,GAAIyvB,SAASxyB,GAAU+C,OAAQ,EAAa,CAAEzoB,MAAO,IAAc,CAAEoC,QAAS,KAEtF8L,QAAS,GAAIgqC,SAASxyB,GAAUxX,QAAS,EAAa,CAAElO,MAAO,GAAYkK,KAAM,IAAc,CAAE9H,QAAS,KAE1G+L,WAAY,GAAI+pC,SAASxyB,GAAUvX,WAAY,EAAa,CAAEnO,MAAO,GAAYkK,KAAM,IAAc,CAAE9H,QAAS,KAEhH2R,OAAQ,GAAImkC,SAASxyB,GAAU3R,OAAQ,EAAa,CAAE/T,MAAO,GAAYkK,KAAM,KAE/E8J,cAAe,GAAIkkC,SAASxyB,GAAU1R,cAAe,EAAa,CAAEhU,MAAO,GAAYkK,KAAM,KAE7F+J,UAAW,GAAIikC,SAASxyB,GAAUzR,UAAW,EAAa,CAAEjU,MAAO,GAAYkK,KAAM,KAErFgK,iBAAkB,GAAIgkC,SAASxyB,GAAUxR,iBAAkB,EAAa,CAAElU,MAAO,GAAYkK,KAAM,KAEnGwe,UAAW,GAAIwvB,SAASxyB,GAAUgD,UAAW,EAAa,CAAE1oB,MAAO,GAAY4C,IAAK,GAAYC,IAAK,IAAc,CAAEs6C,aAAc,EAAaC,aAAc,IAE9Jl7C,QAAS,GAAIg2C,SAASxyB,GAAUxjB,QAAS,EAAa,CAAElC,MAAO,IAAc,CAAEoC,QAAS,KAExFumB,UAAW,GAAIuvB,SAASxyB,GAAUiD,UAAW,EAAa,CAAE3oB,MAAO,IAAc,CAAEoC,QAAS,KAE5FwmB,WAAY,GAAIsvB,SAASxyB,GAAUkD,WAAY,EAAa,CAAE5oB,MAAO,KAErE6oB,WAAY,GAAIqvB,SAASxyB,GAAUmD,WAAY,EAAa,CAAE7oB,MAAO,KAErE8oB,YAAa,GAAIovB,SAASxyB,GAAUoD,YAAa,EAAa,CAAE9oB,MAAO,GAAYq7C,GAAI,IAAc,CAAEj5C,QAAS,KAEhH2mB,WAAY,GAAImvB,SAASxyB,GAAUqD,WACjC,EACA,CAAE/oB,MAAO,GAAYumC,OAAQgW,GAAWryC,KAAM,KAKhDkE,MAAO,GAAI8pC,SAASxyB,GAAUtX,MAAO,GAAS,CAAEpO,MAAO,KAEvDqO,UAAW,GAAI6pC,SAASxyB,GAAUrX,UAAW,EAAa,CAAErO,MAAO,KAEnEsO,QAAS,GAAI4pC,SAASxyB,GAAUpX,QAAS,GAAW,CAAEtO,MAAO,KAE7DuO,OAAQ,GAAI2pC,SAASxyB,GAAUnX,OAAQ,GAAU,CAAEvO,MAAO,KAE1DwO,OAAQ,GAAI0pC,SAASxyB,GAAUlX,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IAAa,CAAEA,MAAO,KAE9FyO,MAAO,GAAIypC,SAASxyB,GAAUjX,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAa,CAAEA,MAAO,KAE3F0O,SAAU,GAAIwpC,SAASxyB,GAAUhX,SAAU3P,GAAKA,EAAEiB,OAAS,GAAY,CAAEA,MAAO,KAEhF2O,SAAU,GAAIupC,SAASxyB,GAAU/W,SAAU,GAAY,CAAE3O,MAAO,KAEhE4O,OAAQ,GAAIspC,SAASxyB,GAAU9W,OAAQ,GAAU,CAAE5O,MAAO,KAE1D6O,QAAS,GAAIqpC,SAASxyB,GAAU7W,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAc,CAAEA,MAAO,KAEnG8O,MAAO,GAAIopC,SAASxyB,GAAU5W,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAa,CAAEA,MAAO,MC/MvF,GAAM,GAAW8R,WACjBurC,GAAet+C,GAAuBA,EAAE0B,QAAU,GAE3C68C,GACb,CAIEj9C,OAAQ,GAAI63C,SAASz4B,GAAUpf,OAC7Bg9C,IAKF5vC,MAAO,GAAIyqC,SAASz4B,GAAUhS,MAC3B1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGX6b,IAAK,GAAIq8B,SAASz4B,GAAU5D,IAC1B,EACA,CAAEpb,OAAQ48C,GAAa/8C,IAAK,KAG9BV,IAAK,GAAIs4C,SAASz4B,GAAU7f,IAC1B,GACA,CAAEa,OAAQ48C,GAAa/8C,IAAK,KAG9BkN,IAAK,GAAI0qC,SAASz4B,GAAUjS,IAC1B6vC,GACA,CAAE58C,OAAQ48C,GAAa/8C,IAAK,GAAUN,MAAO,IAC7C,GACA,CAAEo8C,cAAe,KAGnBtgC,OAAQ,GAAIo8B,SAASz4B,GAAU3D,OAC7B,GACA,CAAErb,OAAQ48C,GAAa/8C,IAAK,KAG9BwN,IAAK,GAAIoqC,SAASz4B,GAAU3R,IAC1B,GACA,CAAE9N,MAAO,GAAYkK,KAAM,KAG7BqG,KAAM,GAAI2nC,SAASz4B,GAAUlP,KAC3B8sC,GACA,CAAE58C,OAAQ48C,KAGZ1gC,MAAO,GAAIu7B,SAASz4B,GAAU9C,MAC3B5d,IACC,MAAMmG,EAAiB,GACjBqG,EAAgC,CAAC,IAAK,IAAK,IAAK,IAAK,KAE3D,IAAK,MAAMiX,KAASjX,EACpB,CACE,IAAIw5B,EAAYhmC,EAAEyjB,GAOlB,GALIuiB,aAAqB,KAEvBA,EAAYA,EAAU/6B,WAGpB+6B,aAAqB,GACzB,CACE,MAAMwY,EAAaxY,EAAUp9B,QAAQzC,MAErC,IAAK,MAAMC,KAAQo4C,EACnB,CACE,MAAMC,EAAYD,EAAWp4C,GAI3BD,EAAMC,GAFJA,KAAQD,GAASs4C,aAAqB,GAE1B,GAAMr9B,UAAU,CAACq9B,EAAWt4C,EAAMC,KAIlCq4C,IAMtB,OAAO,IAAI,GAAW,CAAEt4C,WAE1B,CAAEnD,EAAG,GAAYC,EAAG,IACpB,CAAE5C,EAAG,GAAYC,EAAG,GAAY+T,EAAG,KAKrCrF,QAAS,GAAImqC,SAASz4B,GAAU1R,QAC9B,EACA,CAAE/N,MAAO,KAGXkO,QAAS,GAAIgqC,SAASz4B,GAAUvR,QAC9B,EACA,CAAElO,MAAO,GAAYkK,KAAM,KAG7BiE,WAAY,GAAI+pC,SAASz4B,GAAUtR,WACjC,EACA,CAAEnO,MAAO,GAAYkK,KAAM,KAG7B6J,OAAQ,GAAImkC,SAASz4B,GAAU1L,OAC7B,EACA,CAAE/T,MAAO,GAAYkK,KAAM,KAG7B8J,cAAe,GAAIkkC,SAASz4B,GAAUzL,cACpC,EACA,CAAEhU,MAAO,GAAYkK,KAAM,KAG7B+J,UAAW,GAAIikC,SAASz4B,GAAUxL,UAChC,EACA,CAAEjU,MAAO,GAAYkK,KAAM,KAG7BgK,iBAAkB,GAAIgkC,SAASz4B,GAAUvL,iBACvC,EACA,CAAElU,MAAO,GAAYkK,KAAM,KAK7BkE,MAAO,GAAI8pC,SAASz4B,GAAUrR,MAAO,GAAS,CAAEpO,MAAO,KAEvDqO,UAAW,GAAI6pC,SAASz4B,GAAUpR,UAAW,EAAa,CAAErO,MAAO,KAEnEsO,QAAS,GAAI4pC,SAASz4B,GAAUnR,QAAS,GAAW,CAAEtO,MAAO,KAE7DuO,OAAQ,GAAI2pC,SAASz4B,GAAUlR,OAAQ,GAAU,CAAEvO,MAAO,KAE1DwO,OAAQ,GAAI0pC,SAASz4B,GAAUjR,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IAAa,CAAEA,MAAO,KAE9FyO,MAAO,GAAIypC,SAASz4B,GAAUhR,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAa,CAAEA,MAAO,KAE3F0O,SAAU,GAAIwpC,SAASz4B,GAAU/Q,SAAU,GAAY,CAAE1O,MAAO,KAEhE2O,SAAU,GAAIupC,SAASz4B,GAAU9Q,SAAU5P,GAAKA,EAAEiB,OAAS,GAAY,CAAEA,MAAO,KAEhF4O,OAAQ,GAAIspC,SAASz4B,GAAU7Q,OAAQ,GAAU,CAAE5O,MAAO,KAE1D6O,QAAS,GAAIqpC,SAASz4B,GAAU5Q,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAc,CAAEA,MAAO,KAEnG8O,MAAO,GAAIopC,SAASz4B,GAAU3Q,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAa,CAAEA,MAAO,MCxJvF,GAAM,GAAQ8R,WAEd2rC,GAAcjwC,GAAeA,aAAe,GAAUA,OAAM7I,EAC5D+4C,GAAY3+C,GAAoB0+C,GAAW1+C,EAAEyO,MAAQ,GACrDmwC,GAAiB5+C,GAAoB0+C,GAAW1+C,EAAEyO,KAAOzO,EAAEyO,IAAI7F,QAAQ3H,MAAQ,GAC/E49C,GAAyB,CAAEpwC,IAAKkwC,GAAU19C,MAAO29C,IAEjDE,GAAiB9+C,GAAsB0+C,GAAW1+C,EAAEiB,QAAU,GAC9D89C,GAAsB/+C,GAAsB0+C,GAAW1+C,EAAEiB,OAASjB,EAAEiB,MAAM2H,QAAQ3H,MAAQ,GAEnF+9C,GACb,CAIE19C,OAAQ,GAAI63C,SAAS7W,GAAOhhC,OAAQ,IAEpCsb,WAAY,GAAIu8B,SAAS7W,GAAO1lB,WAC9B+hC,GACA,CAAElwC,IAAKkwC,KAGT9hC,UAAW,GAAIs8B,SAAS7W,GAAOzlB,UAC7B7c,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IACjC,CAAEA,MAAOjB,GAAKA,EAAEiB,OAAS,KAK3ByN,MAAO,GAAIyqC,SAAS7W,GAAO5zB,MACxB1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGX2D,IAAK,GAAIu0C,SAAS7W,GAAO19B,IACvB+5C,GACA,CAAElwC,IAAKkwC,GAAU19C,MAAO29C,KAG1B9hC,IAAK,GAAIq8B,SAAS7W,GAAOxlB,IACvB,EACA,CAAErO,IAAKkwC,GAAU19C,MAAO29C,KAG1B7hC,OAAQ,GAAIo8B,SAAS7W,GAAOvlB,OAC1B,EACA,CAAEtO,IAAKkwC,GAAU19C,MAAO29C,KAG1B/iC,OAAQ,GAAIs9B,SAAS7W,GAAOzmB,OAC1B7b,GAAK,GAAS65C,QAAQ+E,GAAc5+C,IACpC,CAAEyO,IAAKkwC,KAGTzhC,MAAO,GAAIi8B,SAAS7W,GAAOplB,MACzByhC,GACA,CAAElwC,IAAKkwC,KAGTxhC,MAAO,GAAIg8B,SAAS7W,GAAOnlB,MACzB,GACA,CAAE1O,IAAKkwC,KAGT5vC,IAAK,GAAIoqC,SAAS7W,GAAOvzB,IACvB,GACA,CAAE9N,MAAO69C,GAAe3zC,KAAM2zC,KAGhCttC,KAAM,GAAI2nC,SAAS7W,GAAO9wB,KACxBmtC,GACA,CAAElwC,IAAKkwC,IACP,CAAEjN,SAAUkN,IACZC,IAGFx6C,IAAK,GAAI80C,SAAS7W,GAAOj+B,IACvBrE,GAAK,GAAQ65C,QAAQ75C,EAAE8F,WAAa84C,GAAc5+C,IAClD,CAAEyO,IAAKkwC,IACP,CAAE74C,UAAW9F,GAAKA,EAAE8F,WAAa84C,GAAc5+C,IAC/C6+C,IAKF7vC,QAAS,GAAImqC,SAAS7W,GAAOtzB,QAC3B,EACA,CAAE/N,MAAO,KAGXkO,QAAS,GAAIgqC,SAAS7W,GAAOnzB,QAC3B,EACA,CAAElO,MAAO69C,GAAe3zC,KAAM2zC,KAGhC1vC,WAAY,GAAI+pC,SAAS7W,GAAOlzB,WAC9B,EACA,CAAEnO,MAAO69C,GAAe3zC,KAAM2zC,KAGhC9pC,OAAQ,GAAImkC,SAAS7W,GAAOttB,OAC1B,EACA,CAAE/T,MAAO69C,GAAe3zC,KAAM2zC,KAGhC7pC,cAAe,GAAIkkC,SAAS7W,GAAOrtB,cACjC,EACA,CAAEhU,MAAO69C,GAAe3zC,KAAM2zC,KAGhC5pC,UAAW,GAAIikC,SAAS7W,GAAOptB,UAC7B,EACA,CAAEjU,MAAO69C,GAAe3zC,KAAM2zC,KAGhC3pC,iBAAkB,GAAIgkC,SAAS7W,GAAOntB,iBACpC,EACA,CAAElU,MAAO69C,GAAe3zC,KAAM2zC,KAKhCzvC,MAAO,GAAI8pC,SAAS7W,GAAOjzB,MAAO,GAAS,CAAEpO,MAAO,KAEpDqO,UAAW,GAAI6pC,SAAS7W,GAAOhzB,UAAW,EAAa,CAAErO,MAAO,KAEhEsO,QAAS,GAAI4pC,SAAS7W,GAAO/yB,QAAS,GAAW,CAAEtO,MAAO,KAE1DuO,OAAQ,GAAI2pC,SAAS7W,GAAO9yB,OAAQ,GAAU,CAAEvO,MAAO,KAEvDwO,OAAQ,GAAI0pC,SAAS7W,GAAO7yB,OAAQzP,GAAK,GAAS65C,QAAQkF,GAAmB/+C,IAAK,CAAEiB,MAAO,KAE3FyO,MAAO,GAAIypC,SAAS7W,GAAO5yB,MAAO1P,GAAK,GAAQ65C,QAAQkF,GAAmB/+C,GAAI++C,GAAmB/+C,IAAK,CAAEiB,MAAO,KAE/G0O,SAAU,GAAIwpC,SAAS7W,GAAO3yB,SAAU3P,GAAK,GAAY,CAAEiB,MAAO,KAElE2O,SAAU,GAAIupC,SAAS7W,GAAO1yB,SAAU,GAAY,CAAE3O,MAAO,KAE7D4O,OAAQ,GAAIspC,SAAS7W,GAAOzyB,OAAQ,GAAU,CAAE5O,MAAO,KAEvD6O,QAAS,GAAIqpC,SAAS7W,GAAOxyB,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAW,CAAEA,MAAO,KAE7F8O,MAAO,GAAIopC,SAAS7W,GAAOvyB,MAAO/P,GAAKA,EAAEiB,OAAS,GAAS,CAAEA,MAAO,MC/IhE,GAAM,GAAS8R,WACfksC,GAAe,GAASpF,QAAQ,IAChCqF,GAAiB,GAAMx9C,OAAO,CAClCyO,MAAO,GACPgvC,UAAW,GACXn7C,MAAO,GACPg0B,OAAQinB,KAIGG,GACb,CAIE99C,OAAQ,GAAI63C,SAAShhC,GAAQ7W,OAAQ,IAErC8W,KAAM,GAAI+gC,SAAShhC,GAAQC,KAAM,IAIjC1J,MAAO,GAAIyqC,SAAShhC,GAAQzJ,MACzB1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGXiV,OAAQ,GAAIijC,SAAShhC,GAAQjC,OAAQ,GAAU,CAAEjV,MAAO,GAAUiV,OAAQ,KAE1EmC,QAAS,GAAI8gC,SAAShhC,GAAQE,QAAS,GAAU,CAAEpX,MAAO,GAAUoX,QAAS,KAE7EC,MAAO,GAAI6gC,SAAShhC,GAAQG,MAAO,GAAU,CAAErX,MAAO,KAEtDsX,MAAO,GAAI4gC,SAAShhC,GAAQI,MAAO,GAAU,CAAEtX,MAAO,KAEtDuX,KAAM,GAAI2gC,SAAShhC,GAAQK,KAAM,GAAU,CAAEvX,MAAO,GAAUkP,MAAO,IAAc,CAAEkvC,QAAS,KAE9Fh4C,QAAS,GAAI8xC,SAAShhC,GAAQ9Q,QAAS,GAAU,CAAEpG,MAAO,GAAUmV,KAAM,GAAU/O,QAAS,KAE7FoR,OAAQ,GAAI0gC,SAAShhC,GAAQM,OAAQ,GAAU,CAAExX,MAAO,GAAUm3B,MAAO,KAEzE1f,MAAO,GAAIygC,SAAShhC,GAAQO,MAAOumC,GAAc,CAAEh+C,MAAO,GAAUq7C,GAAI,IAAY,CAAEgD,MAAO,KAE7F3mC,MAAO,GAAIwgC,SAAShhC,GAAQQ,MAAOsmC,GAAc,CAAEh+C,MAAO,KAE1D2X,IAAK,GAAIugC,SAAShhC,GAAQS,IAAK,GAAU,CAAE3X,MAAO,IAAY,CAAE2K,MAAO,GAAYsT,IAAK,KAExFrG,QAAS,GAAIsgC,SAAShhC,GAAQU,QAAS,GAAY,CAAE5X,MAAO,GAAUs+C,OAAQ,IAAY,CAAE3zC,MAAO,KAEnGkN,YAAa,GAAIqgC,SAAShhC,GAAQW,YAAa,GAAY,CAAE7X,MAAO,GAAUs+C,OAAQ,IAAY,CAAE3zC,MAAO,KAE3GmN,KAAM,GAAIogC,SAAShhC,GAAQY,KAAM,GAAU,CAAE9X,MAAO,IAAY,CAAE2K,MAAO,EAAasT,IAAK,IAE3FlG,WAAY,GAAImgC,SAAShhC,GAAQa,WAAY,EAAa,CAAE/X,MAAO,GAAUkK,KAAM,KAEnF8N,SAAU,GAAIkgC,SAAShhC,GAAQc,SAAU,EAAa,CAAEhY,MAAO,GAAUkK,KAAM,KAE/E+N,QAAS,GAAIigC,SAAShhC,GAAQe,QAAS,GAAU,CAAEjY,MAAO,IAAY,CAAE6C,IAAK,GAAYD,IAAK,KAE9FsV,UAAW,GAAIggC,SAAShhC,GAAQgB,UAAW,GAAU,CAAElY,MAAO,KAE9DmY,SAAU,GAAI+/B,SAAShhC,GAAQiB,SAAU,GAAY,CAAEnY,MAAO,GAAUkK,KAAM,KAE9EzH,OAAQ,GAAIy1C,SAAShhC,GAAQzU,OAAQ,GAAY,CAAEzC,MAAO,KAE1D2P,QAAS,GAAIuoC,SAAShhC,GAAQvH,QAAS,GAAY,CAAE3P,MAAO,GAAUkK,KAAM,IAAY,CAAEoR,WAAY,IAEtGlD,KAAM,GAAI8/B,SAAShhC,GAAQkB,KAAM,EAAa,CAAEpY,MAAO,GAAU82B,QAAS,IAAY,CAAExb,WAAY,IAEpG5V,IAAK,GAAIwyC,SAAShhC,GAAQxR,IAAK,GAAU,CAAE1F,MAAO,GAAU4F,QAAS,GAAUhD,IAAK,IAAc,CAAEC,IAAK,GAAYoS,OAAQ,IAE7HoD,UAAW,GAAI6/B,SAAShhC,GAAQmB,UAAW,EAAa,CAAErY,MAAO,GAAUu+C,MAAO,IAAY,CAAEjjC,WAAY,EAAakjC,UAAW,IAEpIlmC,WAAY,GAAI4/B,SAAShhC,GAAQoB,WAAY0lC,GAAc,CAAEh+C,MAAO,GAAUu+C,MAAO,IAAY,CAAEF,MAAO,GAAY/iC,WAAY,EAAakjC,UAAW,IAE1JjmC,WAAY,GAAI2/B,SAAShhC,GAAQqB,WAAYylC,GAAc,CAAEh+C,MAAO,GAAUu+C,MAAO,IAAY,CAAEjjC,WAAY,EAAakjC,UAAW,IAEvIhmC,cAAe,GAAI0/B,SAAShhC,GAAQsB,cAClC,GAASogC,QAAQqF,IACjB,CAAEj+C,MAAO,GAAUu+C,MAAO,IAC1B,CAAEjjC,WAAY,EAAakjC,UAAW,IAGxC/lC,aAAc,GAAIy/B,SAAShhC,GAAQuB,aACjC,GACA,CAAEzY,MAAO,GAAUu+C,MAAO,GAAUE,YAAa,IACjD,CAAEvQ,IAAK,EAAa5yB,WAAY,EAAakjC,UAAW,IAG1D9lC,oBAAqB,GAAIw/B,SAAShhC,GAAQwB,oBACxC,GACA,CAAE1Y,MAAO,GAAUu+C,MAAO,GAAUn4C,QAAS,IAC7C,CAAE8nC,IAAK,EAAa5yB,WAAY,EAAakjC,UAAW,GACxD,CAAEvnB,MAAOgnB,KAGXtlC,aAAc,GAAIu/B,SAAShhC,GAAQyB,aAAc,GAAY,CAAE3Y,MAAO,GAAUu+C,MAAO,IAAY,CAAEjjC,WAAY,EAAakjC,UAAW,IAQzI5lC,OAAQ,GAAIs/B,SAAShhC,GAAQ0B,OAAQ,GAAU,CAAE5Y,MAAO,KAExD6Y,SAAU,GAAIq/B,SAAShhC,GAAQ2B,SAAU,GAAU,CAAE7Y,MAAO,KAE5D8Y,UAAW,GAAIo/B,SAAShhC,GAAQ4B,UAAW,GAAU,CAAE9Y,MAAO,KAE9D+Y,UAAW,GAAIm/B,SAAShhC,GAAQ6B,UAAW,GAAU,CAAE/Y,MAAO,KAE9DgZ,mBAAoB,GAAIk/B,SAAShhC,GAAQ8B,mBAAoB,GAAU,CAAEhZ,MAAO,KAEhFiZ,mBAAoB,GAAIi/B,SAAShhC,GAAQ+B,mBAAoB,GAAU,CAAEjZ,MAAO,KAEhFkZ,IAAK,GAAIg/B,SAAShhC,GAAQgC,IAAK,GAAU,CAAElZ,MAAO,KAElDmZ,QAAS,GAAI++B,SAAShhC,GAAQiC,QAAS,GAAU,CAAEnZ,MAAO,GAAU0+C,OAAQ,KAE5EtlC,QAAS,GAAI8+B,SAAShhC,GAAQkC,QAAS,GAAU,CAAEpZ,MAAO,GAAU0+C,OAAQ,KAE5ErlC,SAAU,GAAI6+B,SAAShhC,GAAQmC,SAAU,GAAY,CAAErZ,MAAO,IAAY,CAAE2+C,aAAc,KAI1F5wC,QAAS,GAAImqC,SAAShhC,GAAQnJ,QAAS,EAAa,CAAE/N,MAAO,KAE7DwC,QAAS,GAAI01C,SAAShhC,GAAQ1U,QAAS,EAAa,CAAExC,MAAO,KAE7DsZ,WAAY,GAAI4+B,SAAShhC,GAAQoC,WAAY,EAAa,CAAEtZ,MAAO,KAEnEkO,QAAS,GAAIgqC,SAAShhC,GAAQhJ,QAAS,EAAa,CAAEnM,EAAG,GAAUC,EAAG,IAAY,CAAEsZ,WAAY,IAEhGnN,WAAY,GAAI+pC,SAAShhC,GAAQ/I,WAAY,EAAa,CAAEpM,EAAG,GAAUC,EAAG,IAAY,CAAEsZ,WAAY,IAEtGvH,OAAQ,GAAImkC,SAAShhC,GAAQnD,OAAQ,EAAa,CAAE/T,MAAO,GAAUkK,KAAM,IAAY,CAAEoR,WAAY,IAErGtH,cAAe,GAAIkkC,SAAShhC,GAAQlD,cAAe,EAAa,CAAEhU,MAAO,GAAUkK,KAAM,IAAY,CAAEoR,WAAY,IAEnHrH,UAAW,GAAIikC,SAAShhC,GAAQjD,UAAW,EAAa,CAAEjU,MAAO,GAAUkK,KAAM,IAAY,CAAEoR,WAAY,IAE3GpH,iBAAkB,GAAIgkC,SAAShhC,GAAQhD,iBAAkB,EAAa,CAAElU,MAAO,GAAUkK,KAAM,IAAY,CAAEoR,WAAY,IAEzH/B,QAAS,GAAI2+B,SAAShhC,GAAQqC,QAAS,EAAa,CAAEvZ,MAAO,KAE7DwZ,QAAS,GAAI0+B,SAAShhC,GAAQsC,QAAS,EAAa,CAAExZ,MAAO,KAE7DyZ,OAAQ,GAAIy+B,SAAShhC,GAAQuC,OAAQ,EAAa,CAAEzZ,MAAO,KAI3DoO,MAAO,GAAI8pC,SAAShhC,GAAQ9I,MAAO,GAAS,CAAEpO,MAAO,KAErDqO,UAAW,GAAI6pC,SAAShhC,GAAQ7I,UAAW,EAAa,CAAErO,MAAO,KAEjEsO,QAAS,GAAI4pC,SAAShhC,GAAQ5I,QAAS,GAAW,CAAEtO,MAAO,KAE3DuO,OAAQ,GAAI2pC,SAAShhC,GAAQ3I,OAAQ,GAAU,CAAEvO,MAAO,KAExDwO,OAAQ,GAAI0pC,SAAShhC,GAAQ1I,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IAAW,CAAEA,MAAO,KAE1FyO,MAAO,GAAIypC,SAAShhC,GAAQzI,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAW,CAAEA,MAAO,KAEvF0O,SAAU,GAAIwpC,SAAShhC,GAAQxI,SAAU,GAAY,CAAE1O,MAAO,KAE9D2O,SAAU,GAAIupC,SAAShhC,GAAQvI,SAAU,GAAY,CAAE3O,MAAO,KAE9D4O,OAAQ,GAAIspC,SAAShhC,GAAQtI,OAAQ7P,GAAKA,EAAEiB,OAAS,GAAU,CAAEA,MAAO,KAExE6O,QAAS,GAAIqpC,SAAShhC,GAAQrI,QAAS9P,GAAK,GAAU65C,QAAQ,CAAC75C,EAAEiB,OAAS,KAAY,CAAEA,MAAO,KAE/F8O,MAAO,GAAIopC,SAAShhC,GAAQpI,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAW,CAAEA,MAAO,MCzKnF,GAAM,GAAU8R,WAGT8sC,GACb,CAIEv+C,OAAQ,GAAI63C,SAAS5yB,GAASjlB,OAAQ,IAItCoN,MAAO,GAAIyqC,SAAS5yB,GAAS7X,MAC1B1O,GAAM,GAAM0O,MAAM1O,EAAEiB,MAAO,IAC5B,CAAEA,MAAO,KAGX8N,IAAK,GAAIoqC,SAAS5yB,GAASxX,IAAK,GAAY,CAAE9N,MAAO,GAAWkK,KAAM,KAEtEqG,KAAM,GAAI2nC,SAAS5yB,GAAS/U,KAAM,GAAW,CAAEvQ,MAAO,KAEtDulB,MAAO,GAAI2yB,SAAS5yB,GAASC,MAC1BxmB,IACC,MAAMwM,EAAgC,CAAC,IAAK,IAAK,IAAK,IAAK,KAC3D,IAAIihB,EAAmB,GACnB/kB,GAAO,EAEX,IAAK,MAAM+a,KAASjX,EACpB,CACE,MAAMw5B,EAAYhmC,EAAEyjB,GAEhBuiB,IAEEA,aAAqB,GAEvBvY,EAAWA,EAAS5K,OAAOmjB,EAAUp9B,SAE9Bo9B,aAAqB,IAE5Bt9B,GAAO,EACP+kB,EAAS1nB,KAAKigC,EAAUp9B,QAAQ8jB,OAIhCe,EAAS1nB,KAAKigC,IAKpB,OAAOt9B,EACH,GAASmxC,QAAQ,GAAMz4B,UAAUqM,EAAU,GAAS7a,WACpD,IAAI,GAAU6a,IAEpB,CAAEzqB,EAAG,GAASC,EAAG,IACjB,CAAE5C,EAAG,GAASC,EAAG,GAAS+T,EAAG,KAG/BxT,IAAK,GAAIs4C,SAAS5yB,GAAS1lB,IAAK,GAAS,CAAEI,MAAO,GAAWkP,MAAO,KAEpE1B,IAAK,GAAI0qC,SAAS5yB,GAAS9X,IAAK,GAAS,CAAExN,MAAO,GAAWkP,MAAO,GAAY2vC,QAAS,KAIzF9wC,QAAS,GAAImqC,SAAS5yB,GAASvX,QAAS,EAAa,CAAE/N,MAAO,KAE9DkO,QAAS,GAAIgqC,SAAS5yB,GAASpX,QAAS,EAAa,CAAElO,MAAO,GAAWkK,KAAM,KAE/EiE,WAAY,GAAI+pC,SAAS5yB,GAASnX,WAAY,EAAa,CAAEnO,MAAO,GAAWkK,KAAM,KAErF6J,OAAQ,GAAImkC,SAAS5yB,GAASvR,OAAQ,EAAa,CAAE/T,MAAO,GAAWkK,KAAM,KAE7E8J,cAAe,GAAIkkC,SAAS5yB,GAAStR,cAAe,EAAa,CAAEhU,MAAO,GAAWkK,KAAM,KAE3F+J,UAAW,GAAIikC,SAAS5yB,GAASrR,UAAW,EAAa,CAAEjU,MAAO,GAAWkK,KAAM,KAEnFgK,iBAAkB,GAAIgkC,SAAS5yB,GAASpR,iBAAkB,EAAa,CAAElU,MAAO,GAAWkK,KAAM,KAIjGkE,MAAO,GAAI8pC,SAAS5yB,GAASlX,MAAO,GAAS,CAAEpO,MAAO,KAEtDqO,UAAW,GAAI6pC,SAAS5yB,GAASjX,UAAW,EAAa,CAAErO,MAAO,KAElEsO,QAAS,GAAI4pC,SAAS5yB,GAAShX,QAAS,GAAW,CAAEtO,MAAO,KAE5DuO,OAAQ,GAAI2pC,SAAS5yB,GAAS/W,OAAQ,GAAU,CAAEvO,MAAO,KAEzDwO,OAAQ,GAAI0pC,SAAS5yB,GAAS9W,OAAQzP,GAAK,GAAS65C,QAAQ75C,EAAEiB,OAAS,IAAY,CAAEA,MAAO,KAE5FyO,MAAO,GAAIypC,SAAS5yB,GAAS7W,MAAO1P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAY,CAAEA,MAAO,KAEzF0O,SAAU,GAAIwpC,SAAS5yB,GAAS5W,SAAU,GAAY,CAAE1O,MAAO,KAE/D2O,SAAU,GAAIupC,SAAS5yB,GAAS3W,SAAU,GAAY,CAAE3O,MAAO,KAE/D4O,OAAQ,GAAIspC,SAAS5yB,GAAS1W,OAAQ,GAAU,CAAE5O,MAAO,KAEzD6O,QAAS,GAAIqpC,SAAS5yB,GAASzW,QAAS9P,GAAKA,EAAEiB,OAAS,GAAW,CAAEA,MAAO,KAE5E8O,MAAO,GAAIopC,SAAS5yB,GAASxW,MAAO/P,GAAK,GAAQ65C,QAAQ75C,EAAEiB,OAAS,IAAY,CAAEA,MAAO,MC5FpF,MAAM,GASX,YAAmB0+B,EAA0BogB,EAAyB,IAN9D,KAAAC,OAA0B,GAE1B,KAAAC,SAA+B,GAMrC34C,KAAK1C,IAAI+6B,GACTr4B,KAAKy4C,QAAUA,EAKV,IAAIG,EAAoC/f,GAE7C,GAAIj+B,EAASg+C,GAEX54C,KAAK64C,WAAWD,EAASx8C,QAAQi8B,QAAQugB,GAAY/f,OAIrD,IAAK,MAAM5+B,KAAO2+C,EAEhB54C,KAAK64C,WAAW5+C,EAAImC,QAAQi8B,QAAQp+B,GAAO2+C,EAAS3+C,GAIxD,OAAO+F,KAGF,WAAW61B,GAEhB,MAAMijB,EAAQ94C,KAAK24C,SAASv8C,OAASy5B,EAC/BkjB,EAAe/4C,KAAK24C,SAASG,GAEnC,GAAIC,GAAgBA,EAAaljB,OAASA,EAExC,OAAOkjB,EAGT,IAAK,MAAMC,KAAWh5C,KAAK24C,SAEzB,GAAIK,EAAQnjB,OAASA,EAEnB,OAAOmjB,EAIX,MAAMC,EAAa,CAAEpjB,OAAMwC,QAAS,IAKpC,OAHAr4B,KAAK24C,SAASl6C,KAAKw6C,GACnBj5C,KAAKk5C,aAEED,EAGD,aAENj5C,KAAK24C,SAAS5tC,KAAK,CAACrP,EAAGC,IAAMA,EAAEk6B,KAAOn6B,EAAEm6B,MAGlC,WAAY/5B,EAAWpD,GAE7B,MAAMK,EAAI+C,EAAEoZ,OAAOxc,GACbygD,EAAUn5C,KAAKy4C,QAAQ1/C,GAE7B,IAAKogD,EAEH,OAAO,EAGT,MAAM,MAAE70C,EAAK,IAAEsT,EAAG,YAAEwhC,EAAW,UAAEC,GAAcF,EAI/C,GAFsBr9C,EAAEwD,UAAU5G,EAAGA,EAAI4L,EAAMlI,UAEzBkI,EAEpB,OAAO,EAGT,MAAMg1C,EAAsB5gD,EAAI0gD,EAAY7nC,QAAQjN,GAGpD,GAFuBxI,EAAEwD,UAAUg6C,EAAqBA,EAAsBF,EAAYh9C,UAEnEg9C,EAErB,OAAO,EAGT1gD,GAAK4L,EAAMlI,OAEX,MAAMm9C,EAAYF,EAAU9nC,QAAQqG,GACpC,IAAImM,EAAOjoB,EAAEyV,QAAQqG,EAAKlf,GACtB8gD,EAAkB19C,EAAEwD,UAAU5G,EAAGqrB,GAIrC,IAFArrB,EAAIqrB,EAAOw1B,GAEM,IAAVx1B,GAAejoB,EAAEwD,UAAU5G,EAAGA,EAAI2gD,EAAUj9C,UAAYi9C,GAE7DG,EAAUA,EAAQl6C,UAAU,EAAGk6C,EAAQp9C,OAASm9C,GAChDC,GAAW5hC,EACXlf,GAAK2gD,EAAUj9C,OACf2nB,EAAOjoB,EAAEyV,QAAQqG,EAAKlf,GACtB8gD,GAAW19C,EAAEwD,UAAU5G,EAAGqrB,GAC1BrrB,EAAIqrB,EAAOw1B,EAGb,OAAc,IAAVx1B,GAKG,CAACy1B,EAASz1B,EAAOnM,EAAIxb,QAGvB,aAAc46B,EAAgByiB,GAAiB,GAEpD,GAAIziB,KAAUh3B,KAAK04C,OAEjB,OAAO14C,KAAK04C,OAAO1hB,GAGrB,MAAM2hB,EAAW34C,KAAK24C,SAChBtgB,EAA0B,GAChC,IAAIhhB,EAAmB,GAEvB,IAAK,IAAI3e,EAAI,EAAGA,EAAIs+B,EAAO56B,OAAQ1D,IACnC,CACE,MAAMygD,EAAUn5C,KAAK05C,WAAW1iB,EAAQt+B,GAExC,IAAgB,IAAZygD,EACJ,CACE,MAAQK,EAAS5hC,GAAQuhC,EAEzB9hC,GAAYmiC,EACZ9gD,EAAIkf,EAAM,EAEV,SAGF,IAAI+hC,GAAmB,EAEvB,IAAK,IAAI98C,EAAI,EAAGA,EAAI87C,EAASv8C,SAAWu9C,EAAS98C,IACjD,CACE,MAAMm8C,EAAUL,EAAU97C,GACpBmb,EAAegf,EAAO13B,UAAW5G,EAAGA,EAAIsgD,EAAQnjB,MAEtD,GAAI7d,EAAK5b,SAAW48C,EAAQnjB,KAC5B,CACE,MAAMgD,EAAYmgB,EAAQ3gB,QAASrgB,GAE/B6gB,IAEFR,EAAQ55B,KAAKo6B,GACbngC,GAAKsgD,EAAQnjB,KAAO,EACpB8jB,GAAU,IAKhB,GAAIA,GAEF,GAAItiC,EACJ,CACE,MAAMnN,EAAOmN,EAEbghB,EAAQrrB,OAAOqrB,EAAQj8B,OAAS,EAAG,EAAG,IAAM8N,GAC5CmN,EAAW,SAKbA,GAAY2f,EAAO9hB,OAAOxc,GAI1B2e,GAEFghB,EAAQ55B,KAAK,IAAM4Y,GAGrB,MAAMuiC,EAAkBx0B,IAEtB,IAAIy0B,EAAoB,GAExB,IAAK,MAAMhhB,KAAaR,EAEtBwhB,GAAahhB,EAAUzT,GAGzB,OAAOy0B,GAQT,OALIJ,IAEFz5C,KAAK04C,OAAO1hB,GAAU4iB,GAGjBA,EAGF,OAAQ5iB,EAAgB5R,EAASq0B,GAAiB,GAEvD,OAAOz5C,KAAK85C,aAAa9iB,EAAQyiB,EAA1Bz5C,CAAiColB,IC9NrC,MAAM20B,GAAa,IAAI,GAA8B,CAC1DC,EAAY,EAAE5vB,KAAUA,EAAIiC,WAAa,EAAK,GAC9C4tB,GAAY,EAAE7vB,EAAK8vB,KAAYA,EAAO/xB,OAAOiC,EAAIiC,WAAa,GAC9D8tB,GAAY,EAAE/vB,KAASjrB,EAAUirB,EAAIiC,WAAa,EAAG,GACrD+tB,IAAY,EAAEhwB,EAAK8vB,KAAYA,EAAO7xB,OAAO,GAAG+B,EAAIiC,YACpDguB,IAAY,EAAEjwB,EAAK8vB,KAAYA,EAAO7xB,OAAO,GAAG+B,EAAIiC,YACpDiuB,KAAY,EAAElwB,EAAK8vB,KAAYA,EAAO7xB,OAAO,GAAG+B,EAAIiC,YACpDkuB,KAAY,EAAEnwB,EAAK8vB,KAAYA,EAAO7xB,OAAO,GAAG+B,EAAIiC,YACpDmuB,EAAY,EAAEpwB,KAAUmC,GAAWnC,GAAO,EAAK,GAC/CqwB,GAAY,EAAErwB,EAAK8vB,KAAYA,EAAO/xB,OAAOoE,GAAWnC,GAAO,GAC/DswB,EAAY,EAAEtwB,KAASA,EAAIG,UAAY,GACvCowB,GAAY,EAAEvwB,EAAK8vB,KAAYA,EAAO/xB,OAAOiC,EAAIG,WACjDqwB,GAAY,EAAExwB,KAASjrB,EAAUirB,EAAIG,UAAW,GAChDswB,IAAY,EAAEzwB,KAASO,GAAaP,GAAO,GAC3C0wB,KAAY,EAAE1wB,EAAK8vB,KAAYA,EAAO/xB,OAAOwC,GAAaP,IAC1D2wB,KAAY,EAAE3wB,KAASjrB,EAAUwrB,GAAaP,GAAM,GACpDpxB,EAAY,EAAEoxB,KAASA,EAAIC,SAAW,GACtC2wB,GAAY,EAAE5wB,EAAK8vB,KAAYA,EAAO/xB,OAAOiC,EAAIC,UACjD4wB,GAAY,EAAE7wB,EAAK8vB,KAAYA,EAAO5xB,SAAS,GAAG8B,EAAIC,UACtD6wB,IAAY,EAAE9wB,EAAK8vB,KAAYA,EAAO5xB,SAAS,GAAG8B,EAAIC,UACtD8wB,KAAY,EAAE/wB,EAAK8vB,KAAYA,EAAO5xB,SAAS,GAAG8B,EAAIC,UACtDtd,EAAY,EAAEqd,KAASS,GAAaT,GAAO,GAC3CgxB,EAAY,EAAEhxB,KAAUS,GAAaT,GAAO,EAAK,GACjDixB,GAAY,EAAEjxB,EAAK8vB,KAAYA,EAAO/xB,OAAO0C,GAAaT,IAC1DkxB,GAAY,EAAElxB,EAAK8vB,KAAYA,EAAO/xB,OAAO0C,GAAaT,GAAO,GACjEmxB,EAAY,EAAEnxB,KAASW,GAAcX,GAAO,GAC5CoxB,GAAY,EAAEpxB,EAAK8vB,KAAYA,EAAO/xB,OAAO4C,GAAcX,IAC3DqxB,GAAY,EAAErxB,KAASjrB,EAAU4rB,GAAcX,GAAM,GACrDsxB,EAAY,EAAEtxB,KAASuB,GAAiBvB,GAAO,GAC/CuxB,GAAY,EAAEvxB,EAAK8vB,KAAYA,EAAO/xB,OAAOwD,GAAiBvB,IAC9DwxB,GAAY,EAAExxB,KAASjrB,EAAUwsB,GAAiBvB,GAAM,GACxDyxB,EAAY,EAAEzxB,KAASA,EAAIqC,cAAgB,GAC3CqvB,GAAY,EAAE1xB,KAASjrB,EAAUirB,EAAIqC,cAAgB,IAAK,GAC1DsvB,KAAY,EAAE3xB,KAASjrB,EAAUirB,EAAIqC,cAAe,EAAG,IACvDuvB,GAAY,EAAE5xB,KAASjrB,EAAUirB,EAAIqC,cAAgB,IAAK,GAC1DwvB,KAAY,EAAE7xB,KAASjrB,EAAUirB,EAAIqC,cAAe,EAAG,IACvDyvB,GAAY,EAAE9xB,KAASjrB,EAAUirB,EAAIqC,cAAgB,IAAK,GAC1D0vB,KAAY,EAAE/xB,KAASjrB,EAAUirB,EAAIqC,cAAe,EAAG,IACvD/wB,EAAY,EAAE0uB,EAAK8vB,KAAY9vB,EAAID,WAAa,GAAK+vB,EAAO3yB,GAAK2yB,EAAO1yB,GACxE40B,EAAY,EAAEhyB,EAAK8vB,KAAY9vB,EAAID,WAAa,GAAK+vB,EAAO3yB,GAAGxT,cAAgBmmC,EAAO1yB,GAAGzT,cACzFulB,EAAY,EAAElP,KAASA,EAAID,WAAa,GACxCkyB,GAAY,EAAEjyB,KAASjrB,EAAUirB,EAAID,WAAY,GACjDgP,EAAY,EAAE/O,MAAWA,EAAID,WAAa,IAAO,IAAM,GACvDmyB,GAAY,EAAElyB,KAASjrB,EAAWirB,EAAID,WAAa,IAAO,GAAI,GAC9DttB,EAAY,EAAEutB,KAAUA,EAAID,WAAa,EAAK,GAC9CoyB,GAAY,EAAEnyB,KAASjrB,EAAUirB,EAAID,WAAa,EAAG,GACrDrxB,EAAY,EAAEsxB,KAASA,EAAIH,aAAe,GAC1CuyB,GAAY,EAAEpyB,KAASjrB,EAAUirB,EAAIH,aAAc,GACnDxvB,EAAY,EAAE2vB,KAASA,EAAIL,aAAe,GAC1C0yB,GAAY,EAAEryB,KAASjrB,EAAUirB,EAAIL,aAAc,GACnD2P,EAAY,EAAEtP,KAASjrB,EAAUirB,EAAIP,kBAAmB,EAAG,GAC3D6yB,GAAY,EAAEtyB,KAASjrB,EAAUirB,EAAIP,kBAAmB,EAAG,GAC3D8yB,IAAY,EAAEvyB,KAASjrB,EAAUirB,EAAIP,kBAAmB,GACxD+yB,KAAY,EAAExyB,KAASjrB,EAAUirB,EAAIP,kBAAmB,GAAK,IAC7DgzB,MAAY,EAAEzyB,KAASjrB,EAAUirB,EAAIP,kBAAmB,GAAK,KAC7DizB,OAAY,EAAE1yB,KAASjrB,EAAUirB,EAAIP,kBAAmB,GAAK,MAC7DkzB,QAAY,EAAE3yB,KAASjrB,EAAUirB,EAAIP,kBAAmB,GAAK,OAC7DmzB,SAAY,EAAE5yB,KAASjrB,EAAUirB,EAAIP,kBAAmB,GAAK,QAC7DozB,UAAY,EAAE7yB,KAASjrB,EAAUirB,EAAIP,kBAAmB,GAAK,SAC7DqzB,EAAY,EAAE9yB,KAASA,EAAI+yB,mBAAmB,QAAS,CAACC,aAAa,UAAUhsC,MAAM,KAAK,GAC1FisC,GAAY,EAAEjzB,KAASA,EAAI+yB,mBAAmB,QAAS,CAACC,aAAa,SAAShsC,MAAM,KAAK,GACzFksC,EAAY,EAAElzB,KAASmzB,GAAanzB,EAAK,KACzCozB,GAAY,EAAEpzB,KAASmzB,GAAanzB,EAAK,IACzCwP,EAAY,EAAExP,KAASpuB,KAAK6kB,MAAMuJ,EAAIV,UAAY,KAAQ,GAC1D5tB,EAAY,EAAEsuB,KAASA,EAAIV,UAAY,GACvC+zB,GAAY,EAAErzB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOzyB,SAAU,CAAC2C,EAAK8vB,IAC3EyD,IAAY,EAAEvzB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOxyB,UAAW,CAAC0C,EAAK8vB,IAC5E1gB,EAAY,EAAEpP,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOvyB,QAAS,CAACyC,EAAK8vB,IAC1EvhD,EAAY,EAAEyxB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOtyB,QAAS,CAACwC,EAAK8vB,IAC1E0D,GAAY,EAAExzB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOryB,SAAU,CAACuC,EAAK8vB,IAC3E2D,GAAY,EAAEzzB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOpyB,SAAU,CAACsC,EAAK8vB,IAC3E4D,IAAY,EAAE1zB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOnyB,UAAW,CAACqC,EAAK8vB,IAC5E6D,IAAY,EAAE3zB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOlyB,UAAW,CAACoC,EAAK8vB,IAC5E8D,KAAY,EAAE5zB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOjyB,WAAY,CAACmC,EAAK8vB,IAC7E+D,KAAY,EAAE7zB,EAAK8vB,KAAYwD,GAAc1mB,OAAOkjB,EAAOhyB,WAAY,CAACkC,EAAK8vB,KAC5E,CACD,IAAK,CACH51C,MAAO,IACP80C,YAAa,MACbxhC,IAAK,IACLyhC,UAAW,OAEb,IAAK,CACH/0C,MAAO,IACP80C,YAAa,KACbxhC,IAAK,IACLyhC,UAAW,QAITqE,GAA+C3D,GAErD,SAASwD,GAAanzB,EAAW8zB,GAE/B,MAAMtgB,EAAM3L,GAAc7H,GACpB+zB,EAAKniD,KAAK6kB,MAAM7kB,KAAKC,IAAI2hC,GAAO,KAChCwgB,EAAKpiD,KAAKC,IAAI2hC,GAAO,IAE3B,OAAQA,EAAM,EAAI,IAAM,KAAOz+B,EAAUg/C,EAAI,GAAKD,EAAW/+C,EAAUi/C,EAAI,GC3G7E,uiO5CSyC,K4CTzC,uC5CcoC,K4CdpC","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is any \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): boolean \n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\n  map: Record<K, V>, \n  getValue: (value: V, key: K) => R, \n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey(key, value)] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<V, M = V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n}","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeMap = Record<string, Type>;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  getData(name: string): ReferenceData | null;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<O> = any, O = any> \n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider): Type | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public abstract getExactType(value: any): Type<O>;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): boolean;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<O>;\n\n  public abstract clone(): Type<O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): any;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\n\n  public abstract fromJson(json: any): any;\n\n  public abstract toJson(value: any): any;\n  \n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): T;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void;\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n  protected validatePath(def: DefinitionProvider, context: Type, start: Type, subjects: Expression[], handler: ValidationHandler, parent: Expression = this): void\n  {\n    let node = start;\n\n    subjects.forEach(subject => \n    {\n      if (node)\n      {\n        node = node.getSubType(subject, def, context);\n      }\n\n      if (!node)\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          subject,\n          context,\n          parent,\n        });\n      }\n\n      subject.validate(def, context, handler);\n    });\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = []\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed {\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport class DataTypeRegistry\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expression.getComplexity(def);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public define: [string, Expression][];\n  public body: Expression;\n\n  public constructor(define: [string, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def)), this.body.getComplexity(def));\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\n\n    return this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public with(name: string, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\n  {\n    const append = isString(nameOrDefines)\n      ? { [nameOrDefines]: value }\n      : nameOrDefines;\n\n    for (const name in append)\n    {\n      const expr = Exprs.parse(append[name]);\n      const existing = this.define.find(([varName]) => varName === name);\n\n      if (existing) {\n        existing[1] = expr;\n      } else {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return Math.max(this.condition.getComplexity(def), this.body.getComplexity(def)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n  \n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ComputedExpression \n  {\n    const name = data[INDEX_NAME];\n    const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n    \n    return new ComputedExpression(expression, name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name, expr.expression.encode()];\n  }\n\n  public expression: Expression;\n  public name: string;\n\n  public constructor(expression: Expression, name: string) \n  {\n    super();\n    this.expression = expression;\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return Math.max(op ? op.complexity : 0, this.expression.getComplexity(def));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.expression.encode(), this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getComputedReturnType(this.name, this.expression.getType(def, context));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(ComputedExpression.STEP_EXPRESSION, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ComputedExpression.STEP_EXPRESSION\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const baseType = this.expression.getType(def, context);\n\n    if (!baseType || !def.hasComputed(baseType, this.name))\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.expression,\n        parent: this,\n      })\n    }\n\n    this.expression.validate(def, context, handler);\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions \n{\n  key: Type;\n  value: Type;\n  constants: Map<any, any>;\n}\n\nexport class EnumType extends Type<EnumOptions> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next();\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BREAK = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, breakVariable, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return Math.max(this.start.getComplexity(def), this.end.getComplexity(def), this.body.getComplexity(def)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (breakVariable)\n    {\n      this.breakVariable = breakVariable;\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    return new GetExpression(path);\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    const path = expr.path.map(e => e.encode());\n\n    return [this.id, path];\n  }\n\n  public static create(path: ExpressionValue[])\n  {\n    return new GetExpression(Exprs.parse(path));\n  }\n\n  public path: Expression[];\n\n  public constructor(path: Expression[]) \n  {\n    super();\n    this.path = path;\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression(this.path.map((p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.path, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.path.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.path.length\n      ? [1, this.path[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validatePath(def, context, context, this.path, handler);\n  }\n\n  public add(expr: ExpressionValue | ExpressionValue[]): GetExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], [], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport interface ObjectOptions \n{\n  props: TypeMap;\n}\n\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    return new ObjectType({\n      props: objectMap(data, d => describer.describe(d))\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<O>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        p1[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\n      {\n        key: new EnumType({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map(\n            objectValues(this.options.props, (prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => delete this.options.props[prop])\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        return false;\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<O>\n  {\n    return new ObjectType<O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    return Object.create(null);\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): any\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: any): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def),\n        result.getComplexity(def)\n      ), \n      this.otherwise.getComplexity(def)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return 0;\n    }\n\n    return func.expression.getComplexity(def);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const func = def.getFunction(this.name);\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    return func\n      ? func.getReturnType(def, argTypes)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const func = def.getFunction(this.name);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const params: TypeMap = {};\n\n      objectEach(func.params.options.props, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n\n        if (arg)\n        {\n          params[paramName] = arg.getType(def, context);\n        }\n      });\n\n      // func.options.expression.validate(def, Types.object(params), handler);\n    }\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_VALUE = 1;\n\nexport class ReturnExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'return';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new ReturnExpression(value);\n  }\n\n  public static encode(expr: ReturnExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, returnValue]\n      : [this.id];\n  }\n\n  public value: Expression;\n\n  public constructor(value: Expression) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ReturnExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.value.getComplexity(def);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ReturnExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ReturnExpression(this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ReturnExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n\n    return new SetExpression(path, value);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    const path = expr.path.map(e => e.encode());\n\n    return [this.id, path, expr.value.encode()];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue)\n  {\n    return new SetExpression(Exprs.parse(path), Exprs.parse(value));\n  }\n\n  public path: Expression[];\n  public value: Expression;\n\n  public constructor(path: Expression[], value: Expression) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), this.value.getComplexity(def));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.map((p) => p.clone()), this.value.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, () => \n        this.path.forEach((expr, index) => \n          traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n        )\n      );\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? isNumber(steps[1]) && steps[1] < this.path.length\n        ? [2, this.path[steps[1]]]\n        : null\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.forEach(e => e.setParent(this));\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validatePath(def, context, context, this.path, handler);\n\n    const expectedType = def.getPathType(this.path, context);\n\n    if (expectedType)\n    {\n      this.validateType(def, context, expectedType, this.value, handler);\n    }\n  }\n\n  public add(expr: ExpressionValue | ExpressionValue[]): SetExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n    return this;\n  }\n\n  public to(value: ExpressionValue): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_PATH = 2;\n\nexport class SubExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'sub';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \n  {\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    return new SubExpression(value, path);\n  }\n\n  public static encode(expr: SubExpression): any \n  {\n    const value = expr.value.encode();\n    const path = expr.path.map(e => e.encode());\n\n    return [this.id, value, path];\n  }\n\n  public static create(value: ExpressionValue, path: ExpressionValue[])\n  {\n    return new SubExpression(Exprs.parse(value), Exprs.parse(path));\n  }\n\n  public value: Expression;\n  public path: Expression[];\n\n  public constructor(value: Expression, path: Expression[]) \n  {\n    super();\n    this.value = value;\n    this.path = path;\n  }\n\n  public getId(): string\n  {\n    return SubExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), this.value.getComplexity(def));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SubExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SubExpression(this.value.clone(), this.path.map((p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const valueType = this.value.getType(def, context);\n\n    return valueType\n      ? def.getPathType(this.path, valueType)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SubExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SubExpression.STEP_PATH, () => {\n        this.path.forEach((expr, index) => \n          traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n        )\n      });\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SubExpression.STEP_PATH\n      ? isNumber(steps[1]) && steps[1] < this.path.length\n        ? [2, this.path[steps[1]]]\n        : null\n      : steps[0] === SubExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.path.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const type = this.value.getType(def, context);\n\n    this.validatePath(def, context, type, this.path, handler);\n\n    this.value.validate(def, context, handler);\n  }\n\n  public with(expr: ExpressionValue): SubExpression\n  {\n    this.value = Exprs.parse(expr);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n  public sub(expr: ExpressionValue | ExpressionValue[]): SubExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def), \n        this.defaultCase.getComplexity(def)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst DEFAULT_CURRENT = 'current';\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\n\nexport class UpdateExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'up';\n\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \n  {\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT;\n\n    return new UpdateExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: UpdateExpression): any \n  {\n    const path = expr.path.map(e => e.encode());\n    const value = expr.value.encode();\n\n    return expr.currentVariable === DEFAULT_CURRENT\n      ? [this.id, path, value]\n      : [this.id, path, value, expr.currentVariable]\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\n  {\n    return new UpdateExpression(Exprs.parse(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: Expression[];\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: Expression[], value: Expression, currentVariable: string = DEFAULT_CURRENT) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return UpdateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), this.value.getComplexity(def));\n  }\n\n  public getScope()\n  {\n    return {\n      [this.currentVariable]: AnyType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return UpdateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new UpdateExpression(this.path.map((p) => p.clone()), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(UpdateExpression.STEP_PATH, () => \n        this.path.forEach((expr, index) => \n          traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n        )\n      );\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === UpdateExpression.STEP_PATH\n      ? isNumber(steps[1]) && steps[1] < this.path.length\n        ? [2, this.path[steps[1]]]\n        : null\n      : steps[0] === UpdateExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.forEach(e => e.setParent(this));\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validatePath(def, context, context, this.path, handler);\n\n    const expectedType = def.getPathType(this.path, context);\n\n    if (expectedType)\n    {\n      const valueContext = def.getContext(context, {\n        [this.currentVariable]: expectedType,\n      });\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n  }\n\n  public add(expr: ExpressionValue | ExpressionValue[]): UpdateExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n\n    return this;\n  }\n\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable || this.currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): UpdateExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n    \n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return Math.max(this.condition.getComplexity(def), this.body.getComplexity(def)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions \n{\n  item: Type;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType extends Type<ListOptions> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    return new ListType({ \n      item,\n      min: data.length,\n      max: data.length\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport class TupleType extends Type<Type[]>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: TupleType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType\n  {\n    return new TupleType([]);\n  }\n\n  public clone(): TupleType\n  {\n    return new TupleType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return this.options.map(e => e.create());\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return this.options.map((e, i) => e.fromJson(json[i]));\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => delete this.props[prop])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { ReturnExpression } from './exprs/Return';\nimport { SetExpression } from './exprs/Set';\nimport { SubExpression } from './exprs/Sub';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { UpdateExpression } from './exprs/Update';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type } from './Type';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\n  }\n\n  public static get(...path: ExpressionValue[]): GetExpression\n  {\n    return this.setParent(new GetExpression(this.parse(path)));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): SubExpression\n  {\n    return this.setParent(new SubExpression(this.parse(value), this.parse(path)));\n  }\n\n  public static computed(name: string, value: ExpressionValue): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(this.parse(value), name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\n  {\n    return this.setParent(new ReturnExpression(this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.parse(path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static update(...path: ExpressionValue[]): UpdateExpression\n  {\n    return this.setParent(new UpdateExpression(this.parse(path), NoExpression.instance));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0)\n  y.setFullYear(y.getFullYear(), month, 1)\n  y.setHours(0, 0, 0, 0)\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): any\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions \n{\n  key: Type;\n  value: Type;\n}\n\nexport class MapType extends Type<MapOptions> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    return new MapType({ key, value });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop of map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport class OptionalType extends Type<Type>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): any\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions\n{\n  hasAlpha?: boolean;\n}\n\n\nexport class ColorType extends ObjectType<ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any): Type | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions \n{\n  value: Type;\n}\n\nexport class SetType extends Type<SetOptions> \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    return new SetType({ value });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<any>): Set<any>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<any>): Array<any>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.entries()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\n  {\n    return this.setParent(new EnumType({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list(item: TypeInput, min?: number, max?: number)\n  {\n    return this.setParent(new ListType({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map(value: TypeInput, key: TypeInput = TextType)\n  {\n    return this.setParent(new MapType({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object(props: TypeInputMap = {})\n  {\n    return this.setParent(new ObjectType({ \n      props: this.resolve(props),\n    }));\n  }\n\n  public static optional(type: TypeInput): Type\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set(value: TypeInput)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple(types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\n  {\n    return this.setParent(new TupleType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static parse(input: TypeInput): Type\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      delete this.transcoders[prop];\n\n      this.transcoders[newProp] = transcoder;\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        instance[prop] = this.instances.reduce((a, b) => Math.max(a, b[prop]), 0) + 1;\n        break;\n      case EntityPrimaryType.UUID:\n        instance[prop] = Entity.uuid();\n        break;\n    }\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    this.indexes[name] = index;\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    delete this.indexes[name];\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      delete this.indexes[name];\n\n      this.indexes[newName] = index;\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    this.transcoders[prop] = transcoder;\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      delete this.transcoders[name];\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    this.methods[method.name] = method;\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      delete this.methods[name];\n\n      this.methods[newName] = method;\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      delete this.methods[name];\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  #listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.#listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.#listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.#listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.#listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { ObjectType, ObjectOptions } from './types/Object';\nimport { TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { isEmpty, objectMap, arraySync, isNumber } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  description: string;\n  meta: any;\n  params: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      description: '',\n      meta: null,\n      params: Types.object(),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public description: string;\n  public meta: any;\n  public params: ObjectType<ObjectOptions>;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\n    this.expression = defs.getExpression(options.expression);\n    this.defaults = this.params.fromJson(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.params = options instanceof Func\n        ? options.params\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\n      this.expression = options instanceof Func\n        ? options.expression\n        : defs.getExpression(options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.params.fromJson(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, description, meta, params, expression, defaults, tests } = this;\n\n    return {\n      name,\n      description, \n      meta,\n      params: params.encode(),\n      expression: expression.encode(),\n      defaults: params.toJson(defaults),\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const paramType = this.params.options.props[name];\n\n    if (paramType)\n    {\n      this.params.options.props[newName] = paramType;\n      delete this.params.options.props[name];\n\n      if (name in this.defaults)\n      {\n        this.defaults[newName] = this.defaults[name];\n        delete this.defaults[name];\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const exists = name in this.params.options.props[name];\n\n    if (exists)\n    {\n      delete this.params.options.props[name];\n      delete this.defaults[name];\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \n  {\n    const context = Types.object({\n      ...this.params.options.props,\n      ...paramsTypes,\n    });\n\n    return this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): ObjectType\n  {\n    return isEmpty(this.defaults)\n      ? this.params\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\n  }\n\n  public getParamType(param: string)\n  {\n    const propType = this.params.options.props[param];\n\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\n      ? propType.getRequired()\n      : propType;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.params.options.props[prop];\n\n      if (!propType.getRequired().isValid(target[prop]))\n      {\n        target[prop] = DataTypes.copy(this.defaults[prop]);\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    const now = new Date().getTime();\n\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now,\n      updated: now,\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now,\n        updated: now,\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: ProgramDataSet, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, meta, dataType, data } = this;\n\n    return {\n      name,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func, 'params' | 'returnType'] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func, 'params' | 'returnType'] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(data: any): Type\n  {\n    for (const describer of this.describers)\n    {\n      const type = describer.describe(data, this);\n\n      if (type)\n      {\n        return type;\n      }\n    }\n\n    return AnyType.baseType;\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.args[newName] = ref.value.args[oldName];\n      delete ref.value.args[oldName];\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      delete ref.value.args[name];\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    let optional = false;\n    let node = context;\n\n    for (let i = 0; i < stopBefore; i++)\n    {\n      node = node.getSubType(path[i], this, context);\n\n      if (!node)\n      {\n        return null;\n      }\n\n      optional = optional || node.isOptional();\n    }\n\n    return optional && !node.isOptional() ? Types.optional(node) : node;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const exprClass = this.expressions[value[0]];\n\n      if (!exprClass)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return exprClass.decode(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.getReturnType(this);\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.params,\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.getReturnType(this);\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.params,\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.params,\n        source: [func, 'params'],\n      });\n\n      if (dynamic) {\n        instances.push({\n          type: func.getReturnType(this),\n          source: [func, 'returnType'],\n        });\n      }\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.params,\n          source: [entity, method, 'params'],\n        });\n\n        if (dynamic) {\n          instances.push({\n            type: method.getReturnType(this),\n            source: [entity, method, 'returnType'],\n          });\n        }\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        context: func.params,\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.getParamTypes(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public returnProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.returnProperty = this.returnProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : () => value;\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { ReturnExpression } from '../exprs/Return';\nimport { SetExpression } from '../exprs/Set';\nimport { SubExpression } from '../exprs/Sub';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { UpdateExpression } from '../exprs/Update';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    ReturnExpression,\n    SetExpression,\n    SubExpression,    \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    UpdateExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName }\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ManyType } from '../../types/Many';\nimport { NullType } from '../../types/Null';\nimport { Type } from '../../Type';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => {\n      let optional = true;\n      const types: Type[] = [];\n      const checkType = (x?: Type) => {\n        if (!optional) return;\n        \n        if (x) {\n          let xoptional = x instanceof OptionalType;\n          const xinner = xoptional ? x.options as Type : x;\n\n          if (xinner instanceof ManyType) {\n            xinner.options.forEach((y) => {\n              const yoptional = y instanceof OptionalType;\n              const yinner = yoptional ? y.options as Type : y;\n\n              xoptional = xoptional || yoptional;\n\n              if (!types.some(t => t.exactType(yinner))) {\n                types.push(yinner);\n              }\n            });\n          }\n\n          optional = optional && xoptional;\n\n          if (!types.some(t => t.exactType(xinner))) {\n            types.push(xinner);\n          }\n        }\n      };\n\n      checkType(i.a);\n      checkType(i.b);\n      checkType(i.c);\n      checkType(i.d);\n      checkType(i.e);\n\n      return types.length > 1\n        ? optional\n          ? Types.optional(new ManyType(types))\n          : new ManyType(types)\n        : types.length === 1\n          ? optional\n            ? Types.optional(types[0])\n            : types[0]\n          : NullType;\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    AnyType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type, TypeMap } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { OptionalType } from '../../types/Optional';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EntityType } from '../../types/Entity';\nimport { Types } from '../../Types';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => {\n      const props: TypeMap = {};\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n\n      for (const param of params) \n      {\n        let paramType = i[param];\n\n        if (paramType instanceof EntityType)\n        {\n          paramType = paramType.getType();\n        }\n\n        if (paramType instanceof ObjectType) \n        {\n          const paramProps = paramType.options.props;\n\n          for (const prop in paramProps) \n          {\n            const paramProp = paramProps[prop];\n\n            if (prop in props && paramProp instanceof OptionalType) \n            {\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\n            } \n            else \n            {\n              props[prop] = paramProp;\n            }\n          }\n        }\n      }\n\n      return new ObjectType({ props });\n    },\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number,\n  formats: FormatterMap<T>\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  }\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this\n  public add(key: string, formatter: Formatter<T>): this\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n}","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}","\nexport * from './fns';\n\nexport * from './Command';\nexport * from './DefinitionProvider';\nexport * from './Definitions';\nexport * from './DataTypes';\nexport * from './Entity';\nexport * from './EventBase';\nexport * from './Expression';\nexport * from './Exprs';\nexport * from './Func';\nexport * from './LinkedNode';\nexport * from './Locale';\nexport * from './Operation';\nexport * from './Computed';\nexport * from './Program';\nexport * from './ReferenceData';\nexport * from './Relation';\nexport * from './Runtime';\nexport * from './Type';\nexport * from './Types';\nexport * from './Traverser';\nexport * from './Validate';\n\nexport * from './maps/FastMap';\nexport * from './maps/NamedMap';\n\nexport * from './types/ID';\nexport * from './types/Entity';\nexport * from './types/Any';\nexport * from './types/Boolean';\nexport * from './types/Color';\nexport * from './types/Date';\nexport * from './types/Enum';\nexport * from './types/List';\nexport * from './types/Many';\nexport * from './types/Map';\nexport * from './types/Not';\nexport * from './types/Null';\nexport * from './types/Number';\nexport * from './types/Object';\nexport * from './types/Optional';\nexport * from './types/Set';\nexport * from './types/Text';\nexport * from './types/Tuple';\n\nexport * from './exprs/And';\nexport * from './exprs/Chain';\nexport * from './exprs/Comment';\nexport * from './exprs/Computed';\nexport * from './exprs/Constant';\nexport * from './exprs/Define';\nexport * from './exprs/Do';\nexport * from './exprs/For';\nexport * from './exprs/Get';\nexport * from './exprs/GetData';\nexport * from './exprs/GetEntity';\nexport * from './exprs/GetRelation';\nexport * from './exprs/If';\nexport * from './exprs/Invoke';\nexport * from './exprs/No';\nexport * from './exprs/Not';\nexport * from './exprs/Object';\nexport * from './exprs/Operation';\nexport * from './exprs/Or';\nexport * from './exprs/Return';\nexport * from './exprs/Set';\nexport * from './exprs/Sub';\nexport * from './exprs/Switch';\nexport * from './exprs/Template';\nexport * from './exprs/Tuple';\nexport * from './exprs/Update';\nexport * from './exprs/While';\n\nexport * from './def';\n\nexport * from './ops/EntityOps';\nexport * from './ops/AnyOps';\nexport * from './ops/BooleanOps';\nexport * from './ops/ColorOps';\nexport * from './ops/DateOps';\nexport * from './ops/ListOps';\nexport * from './ops/MapOps';\nexport * from './ops/NumberOps';\nexport * from './ops/ObjectOps';\nexport * from './ops/SetOps';\nexport * from './ops/TextOps';\nexport * from './ops/TupleOps';\n\nexport * from './ops/types/EntityOpsTypes';\nexport * from './ops/types/AnyOpsTypes';\nexport * from './ops/types/BooleanOpsTypes';\nexport * from './ops/types/ColorOpsTypes';\nexport * from './ops/types/DateOpsTypes';\nexport * from './ops/types/ListOpsTypes';\nexport * from './ops/types/MapOpsTypes';\nexport * from './ops/types/NumberOpsTypes';\nexport * from './ops/types/ObjectOpsTypes';\nexport * from './ops/types/SetOpsTypes';\nexport * from './ops/types/TextOpsTypes';\nexport * from './ops/types/TupleOpsTypes';\n\nexport * from './locales';\n\nexport * from './util/color/Color';\nexport * from './util/color/ColorSpace';\nexport * from './util/color/ColorSpaceHSL';\nexport * from './util/color/ColorSpaceRGB';\nexport * from './util/date/DateConstants';\nexport * from './util/date/DateFormat';\nexport * from './util/date/DateFunctions';\nexport * from './util/Format';"],"sourceRoot":""}