{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/helpers.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","getWrappedType","isCompatible","other","exact","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","isDynamic","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","getSimplifiedType","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","has","defaultResult","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","cache","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","arg","expressions","AndExpression","e","some","expectedType","directly","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","SetExpression","fromPartial","STEP_PATH","isWritable","READONLY","INVALID_EXPRESSION","isMutating","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","withVariable","PathExpression","pathData","isPath","getPathType","thisType","EMPTY_PATH","e0","e1","e2","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","param","paramName","MISSING_FUNCTION","argName","argType","named","nameOrArgs","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","paramType","alias","scoped","ReturnExpression","returnValue","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","flatten","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","propExpr","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","takeKey","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","moveDataset","inside","movable","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","isExpression","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","objectType","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","MergedObjectType","GivenObjectType","paramProps","paramProp","merger","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getFormatter","escaped","getEscaped","content","handled","finalFormatter","formatted","startEscape","endEscape","possibleEscapeIndex","endOffset","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is Record<string, any> \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): value is ([] | {} | null | undefined)\n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function now(): number\n{\n  return new Date().getTime();\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\n  map: Record<K, V>, \n  getValue: (value: V, key: K) => R, \n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey(key, value)] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<V, M = V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n  OUTSIDE_PATH = 14,          // HIGH\n  READONLY = 15,              // HIGH\n  EMPTY_PATH = 16,            // HIGH\n  INVALID_THIS = 17,          // HIGH\n  MISSING_METHOD = 18,        // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;\n","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeMap = Record<string, Type>;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  getData(name: string): ReferenceData | null;\n  setLegacy(): void;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<O> = any, O = any> \n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public abstract getExactType(value: any): Type<O>;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getWrappedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): boolean;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<O>;\n\n  public abstract clone(): Type<O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): any;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\n\n  public abstract fromJson(json: any): any;\n\n  public abstract toJson(value: any): any;\n  \n}","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n  setLegacy(): void;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public static INSTANCE = 'instance';\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\n  \n  public abstract mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;\n\n  public isDynamic(): boolean\n  {\n    return true;\n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return false;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return true;\n  }\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = []\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed \n{\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n  writeable?: {\n    op: string;\n    value: string;\n    newValue: string;\n    params: Record<string, any>;\n  };\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp = this.map[id];\n\n    comp.writeable = { \n      op: op.id,\n      value,\n      newValue,\n      params: params || {},\n    };\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport interface DataTypeAccessor<T = any>\n{\n  priority: number;\n  isValid(value: any, step: any): boolean;\n  set(value: T, step: any, stepValue: any): void;\n  get(value: T, step: any): any;\n  remove(value: T, step: any): any;\n  has(value: T, step: any): any;\n}\n\nexport interface DataTypeRegistryOperations\n{\n  objectSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): void;\n  objectRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;\n  arrayAdd<T>(arr: T[], item: T): void;\n  arrayRemove<T>(arr: T[], index: number): T;\n  arraySet<T>(arr: T[], index: number, item: T): T;\n}\n\nexport class DataTypeRegistry implements DataTypeRegistryOperations\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n  private accessorList: DataTypeAccessor[];\n\n  public objectSet: DataTypeRegistryOperations['objectSet']\n    = (obj, prop, value) => obj[prop] = value;\n  public objectRemove: DataTypeRegistryOperations['objectRemove']\n    = (obj, prop) => delete obj[prop];\n  public arrayAdd: DataTypeRegistryOperations['arrayAdd']\n    = (arr, item) => arr.push(item);\n  public arrayRemove: DataTypeRegistryOperations['arrayRemove']\n    = (arr, index) => arr.splice(index, 1)[0];\n  public arraySet: DataTypeRegistryOperations['arraySet']\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n    this.accessorList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  public get(value: any, step: any): any\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.get(value, step);\n      }\n    }\n  }\n\n  public set(value: any, step: any, stepValue: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.set(value, step, stepValue);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public remove(value: any, step: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.remove(value, step);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public has<O = false>(value: any, step: any, defaultResult: O = false as unknown as O): boolean | O\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.has(value, step);\n      }\n    }\n\n    return defaultResult;\n  }\n\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\n  {\n    return this.addToPriorityList(this.accessorList, accessor);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expression.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expression.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return this.expression.mutates(def, arg);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)    \n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public define: [string, Expression][];\n  public body: Expression;\n\n  public constructor(define: [string, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\n\n    return this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [, defined] of this.define)    \n    {\n      if (defined.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.body.mutates(def, arg, directly);\n  }\n\n  public with(name: string, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\n  {\n    const append = isString(nameOrDefines)\n      ? { [nameOrDefines]: value }\n      : nameOrDefines;\n\n    for (const name in append)\n    {\n      const expr = Exprs.parse(append[name]);\n      const existing = this.define.find(([varName]) => varName === name);\n\n      if (existing) {\n        existing[1] = expr;\n      } else {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.chain.length\n      ? this.chain[this.chain.length - 1].isDynamic()\n      : false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const link of this.chain)\n    {\n      if (link.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    if (data[INDEX_PATH])\n    {\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\n    }\n    \n    return new GetExpression();\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression();\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n\n    DataTypes.addAccessor<string>({\n      priority,\n      isValid: isString,\n      get: (x, step) => x[step],\n      set: (x, step, value) => {},\n      remove: (x, step) => x.substring(0, step) + x.substring(step + 1),\n      has: (x, step) => x[step] !== undefined,\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions \n{\n  key: Type;\n  value: Type;\n  constants: Map<any, any>;\n}\n\nexport class EnumType extends Type<EnumOptions> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this.options.value;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next();\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n\n    return new SetExpression(path, value);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    return [this.id, expr.path.encode(), expr.value.encode()];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue)\n  {\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n\n  public constructor(path: PathExpression, value: Expression) \n  {\n    super();\n\n    this.path = path;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.clone(), this.value.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      this.validateType(def, context, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public to(value: ExpressionValue): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || \n      this.value.mutates(def, arg, directly) || \n      this.path.mutates(def, arg, directly);\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst DEFAULT_CURRENT = 'current';\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\n\nexport class UpdateExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'up';\n\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \n\n    return new UpdateExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: UpdateExpression): any \n  {\n    const path = expr.path.encode();\n    const value = expr.value.encode();\n\n    return expr.currentVariable === DEFAULT_CURRENT\n      ? [this.id, path, value]\n      : [this.id, path, value, expr.currentVariable]\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\n  {\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return UpdateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    return {\n      [this.currentVariable]: AnyType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return UpdateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === UpdateExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === UpdateExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      const valueContext = def.getContext(context, {\n        [this.currentVariable]: expectedType,\n      });\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || this.value.mutates(def, arg, directly) || this.path.mutates(def, arg, directly);\n  }\n\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable || this.currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): UpdateExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { isNumber } from '../fns';\nimport { GetExpression } from './Get';\nimport { ConstantExpression } from './Constant';\nimport { SetExpression } from './Set';\nimport { UpdateExpression } from './Update';\n\n\nconst INDEX_PATH = 1;\n\nexport class PathExpression extends Expression \n{\n\n  public static id = 'path';\n\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \n  {\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\n    \n    return new PathExpression(expressions);\n  }\n\n  public static encode(expr: PathExpression): any \n  {\n    return [this.id, expr.expressions.map((e) => e.encode())];\n  }\n\n  public static createForLegacy(path: Expression[])\n  {\n    for (let i = path.length - 1; i >= 0; i--)\n    {\n      const node = path[i];\n\n      if (node instanceof PathExpression)\n      {\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\n        {\n          path.splice(i, 1, ...node.expressions);\n        }\n      }\n    }\n\n    return new PathExpression(path);\n  }\n\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\n  {\n    const isPath = pathData[0] === PathExpression.id;\n    const path = isPath\n      ? PathExpression.decode(pathData, exprs)\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\n\n    if (isPath) {\n      exprs.setLegacy();\n    }\n\n    return path;\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return PathExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return PathExpression.encode(this);\n  }\n\n  public clone(): PathExpression\n  {\n    return new PathExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.expressions, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    \n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const path = this.expressions;\n\n    if (path.length === 0)\n    {\n      handler({\n        type: ValidationType.EMPTY_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    let thisType = path[0].getType(def, context);\n\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: path[0],\n        parent: this,\n      });\n    }\n    else\n    {\n      path[0].validate(def, context, handler);\n\n      for (let i = 1; i < path.length; i++)\n      {\n        const node = path[i];\n\n        node.validate(def, context, handler, thisType);\n\n        thisType = node.isPathNode()\n          ? node.getType(def, context, thisType)\n          : thisType.getSubType(node, def, context);\n\n        if (!thisType)\n        {\n          handler({\n            type: ValidationType.INVALID_EXPRESSION,\n            severity: ValidationSeverity.HIGH,\n            context,\n            subject: node,\n            parent: this,\n          });\n          \n          break;\n        }\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public isWritable(defs: DefinitionProvider)\n  {\n    return this.expressions.length > 0\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\n      : false;\n  }\n\n  public isMutating(arg: string, directly: boolean = false): boolean\n  {\n    const e0 = this.expressions[0];\n    const e1 = this.expressions[1];\n    const e2 = this.expressions[2]; // tslint:disable-line: no-magic-numbers\n\n    if (!(e0 instanceof GetExpression && e1 instanceof ConstantExpression && e1.value === arg))\n    {\n      return false;\n    }\n\n    return directly ? true : !!e2;\n  }\n\n  public set(value: Expression): SetExpression\n  {\n    return new SetExpression(this.clone(), value);\n  }\n\n  public update(value: Expression, currentVariable?: string): UpdateExpression\n  {\n    return new UpdateExpression(this.clone(), value, currentVariable);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n\n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider) \n  {\n    const name = data[INDEX_NAME];\n\n    if (data[INDEX_EXPRESSION]) \n    {\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\n    }\n    \n    return new ComputedExpression(name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string) \n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return op ? op.complexity : 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.OUTSIDE_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      if (!def.hasComputed(thisType, this.name))\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject: this,\n        });\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    const comp = defs.getComputed(this.name);\n\n    return !comp || !!comp.writeable;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BREAK = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, breakVariable, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.start.mutates(def, arg, directly) || \n      this.end.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (breakVariable)\n    {\n      this.breakVariable = breakVariable;\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }  \n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], ['initial'], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport interface ObjectOptions \n{\n  props: TypeMap;\n}\n\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    const type = new ObjectType({ props: {} });\n\n    cache.set(data, type);\n\n    type.options.props = objectMap(data, d => describer.describe(d));\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n\n    DataTypes.addAccessor<Record<string, any>>({\n      priority,\n      isValid: (value) => isObject(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue),\n      remove: (value, step) => DataTypes.objectRemove(value, step),\n      has: (value, step) => step in value,\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<O>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        p1[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\n      {\n        key: new EnumType({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map(\n            objectValues(this.options.props, (prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => DataTypes.objectRemove(this.options.props, prop))\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        if (props[prop].isOptional())\n        {\n          continue;\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<O>\n  {\n    return new ObjectType<O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n    \n    for (const prop in props)\n    {\n      const propType = props[prop];\n\n      if (propType && !propType.isOptional())\n      {\n        out[prop] = propType.create();\n      }\n    }\n\n    return out;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): any\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: any): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n    // return this.getType().getSimplifiedType();\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this.getType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def, context),\n        result.getComplexity(def, context)\n      ), \n      this.otherwise.getComplexity(def, context)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [condition, result] of this.cases)\n    {\n      if (condition.mutates(def, arg, directly) || result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.otherwise.mutates(def, arg, directly);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return 0;\n    }\n\n    return func.expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const func = def.getFunction(this.name);\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    return func\n      ? func.getReturnType(def, argTypes)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args ,arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const func = def.getFunction(this.name);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const params: TypeMap = {};\n\n      objectEach(func.params.options.props, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n\n        if (arg)\n        {\n          params[paramName] = arg.getType(def, context);\n        }\n      });\n\n      // func.options.expression.validate(def, Types.object(params), handler);\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && func.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false; \n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return `Function \"${this.name}\" does not exist`;\n    }\n\n    return func.expression;\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { EntityType } from '../types/Entity';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_ENTITY = 1;\nconst INDEX_NAME = 2;\nconst INDEX_ARGS = 3;\n\nexport class MethodExpression extends Expression \n{\n\n  public static id = 'method';\n\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \n  {\n    const entity = data[INDEX_ENTITY];\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new MethodExpression(entity, name, args);\n  }\n\n  public static encode(expr: MethodExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.entity, expr.name, args];\n  }\n\n  public entity: string;\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(entity: string, name: string, args: ExpressionMap) \n  {\n    super();\n    this.entity = entity;\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return MethodExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity || !entity.methods[this.name])\n    {\n      return 0;\n    }\n\n    return entity.methods[this.name].expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return MethodExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      return null;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return null;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return null;\n    }\n    \n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    argTypes[Expression.INSTANCE] = entity.type;\n    \n    return method.getReturnType(def, argTypes);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args, arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      handler({\n        type: ValidationType.INVALID_THIS,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      handler({\n        type: ValidationType.MISSING_METHOD,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const params: TypeMap = {};\n\n    params[Expression.INSTANCE] = entity.type;\n\n    objectEach(method.params.options.props, (param, paramName) =>\n    {\n      const arg = this.args[paramName];\n\n      this.validateType(def, context, param, arg, handler);\n\n      if (arg)\n      {\n        params[paramName] = arg.getType(def, context);\n      }\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return false;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && method.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return `Entity \"${this.entity}\" does not exist`;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\n    }\n\n    return method.expression;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public named(name: string): MethodExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): MethodExpression\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const { name, params } = this;\n    const operation = def.getOperation(name);\n\n    if (!operation)\n    {\n      return false;\n    }\n\n    for (const paramName in params)\n    {\n      const paramType = params[paramName];\n\n      if (paramType.mutates(def, arg, directly) || (paramType instanceof PathExpression && paramType.isMutating(arg, true) && operation.mutates.indexOf(paramName) !== -1))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_VALUE = 1;\n\nexport class ReturnExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'return';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new ReturnExpression(value);\n  }\n\n  public static encode(expr: ReturnExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, returnValue]\n      : [this.id];\n  }\n\n  public value: Expression;\n\n  public constructor(value: Expression) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ReturnExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.value.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.value.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ReturnExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ReturnExpression(this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ReturnExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.value.mutates(def, arg, directly);\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def, context), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def, context)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def, context), \n        this.defaultCase.getComplexity(def, context)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    if (this.value.mutates(def, arg, directly))\n    {\n      return true;\n    }\n\n    for (const [tests, result] of this.cases)\n    {\n      if (result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n\n      for (const test of tests)\n      {\n        if (test.mutates(def, arg, directly))\n        {\n          return true;\n        }\n      }\n    }\n\n    return this.defaultCase.mutates(def, arg, directly);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const param in this.params)\n    {\n      if (this.params[param].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n    \n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  flatten: ops.set('flatten', {}, ['list'], [], [], [], ['list']),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions \n{\n  item: Type;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType extends Type<ListOptions> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    const type = new ListType({\n      item: AnyType.baseType,\n      min: data.length,\n      max: data.length\n    });\n\n    cache.set(data, type);\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    type.options.item = item;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<any[]>({\n      priority,\n      isValid: (value) => isArray(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\n      remove: (value, step) => DataTypes.arrayRemove(value, step),\n      has: (value, step) => value[step] !== undefined,\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport class TupleType extends Type<Type[]>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: TupleType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType\n  {\n    return new TupleType([]);\n  }\n\n  public clone(): TupleType\n  {\n    return new TupleType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return this.options.map(e => e.create());\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return this.options.map((e, i) => e.fromJson(json[i]));\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    for (const prop in this.props)\n    {\n      const propExpr = this.props[prop];\n\n      if (propExpr && propExpr.isDynamic())\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => DataTypes.objectRemove(this.props, prop))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const prop in this.props)\n    {\n      if (this.props[prop].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { PathExpression } from './exprs/Path';\nimport { ReturnExpression } from './exprs/Return';\nimport { SetExpression } from './exprs/Set';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { UpdateExpression } from './exprs/Update';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type } from './Type';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\n  }\n\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\n  {\n    return path.length === 0\n      ? new GetExpression()\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\n  }\n\n  public static computed(name: string): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static path(...exprs: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\n      ? exprs[0]\n      : new PathExpression(this.parse(exprs)));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\n  {\n    return this.setParent(new ReturnExpression(this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static update(...path: ExpressionValue[]): UpdateExpression\n  {\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0);\n  y.setFullYear(y.getFullYear(), month, 1);\n  y.setHours(0, 0, 0, 0);\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\n\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\n\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\n\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\n\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\n\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\n\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\n\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\n\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\n\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\n\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\n\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\n\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\n\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\n\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\n\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\n\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\n\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\n\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\n\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\n\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\n\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\n\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\n\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\n\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\n\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\n\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\n\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\n\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\n\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\n\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): any\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions \n{\n  key: Type;\n  value: Type;\n}\n\nexport class MapType extends Type<MapOptions> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    const type = new MapType({ key, value });\n\n    cache.set(data, type);\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    type.options.key = key;\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<Map<any, any>>({\n      priority,\n      isValid: (value) => isMap(value),\n      get: (value, step) => value.get(step),\n      set: (value, step, stepValue) => value.set(step, stepValue),\n      remove: (value, step) => value.delete(step),\n      has: (value, step) => value.has(step),\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop in map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport class OptionalType extends Type<Type>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): any\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions\n{\n  hasAlpha?: boolean;\n}\n\n\nexport class ColorType extends ObjectType<ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      created, \n      updated,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, prop);\n      DataTypes.objectSet(this.transcoders, newProp, transcoder);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        DataTypes.objectSet(instance, prop, this.instances.reduce((a, b) => isNumber(b[prop]) ? Math.max(a, b[prop]) : a, 0) + 1);\n        break;\n      case EntityPrimaryType.UUID:\n        DataTypes.objectSet(instance, prop, Entity.uuid());\n        break;\n    }\n  }\n\n  public takeKey(run: Runtime, instance: any): any\n  {\n    this.setKey(instance);\n\n    return this.getKey(run, instance);\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    DataTypes.objectSet(this.indexes, name, index);\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    DataTypes.objectRemove(this.indexes, name);\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      DataTypes.objectRemove(this.indexes, name);\n      DataTypes.objectSet(this.indexes, newName, index);\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    DataTypes.objectSet(this.transcoders, prop, transcoder);\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, name);\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    DataTypes.objectSet(this.methods, method.name, method);\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      DataTypes.objectRemove(this.methods, name);\n      DataTypes.objectSet(this.methods, newName, method);\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      DataTypes.objectRemove(this.methods, name);\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions \n{\n  value: Type;\n}\n\nexport class SetType extends Type<SetOptions> \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    const type = new SetType({ value });\n\n    cache.set(data, type);\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<any>): Set<any>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<any>): Array<any>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.entries()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved, TypeProvider } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\nimport { EntityType } from './types/Entity';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static entity(name: string, types: TypeProvider)\n  {\n    return new EntityType(name, types);\n  }\n\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\n  {\n    return this.setParent(new EnumType({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list(item: TypeInput, min?: number, max?: number)\n  {\n    return this.setParent(new ListType({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map(value: TypeInput, key: TypeInput = TextType)\n  {\n    return this.setParent(new MapType({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object(props: TypeInputMap = {})\n  {\n    return this.setParent(new ObjectType({ \n      props: this.resolve(props),\n    }));\n  }\n\n  public static optional(type: TypeInput): Type\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set(value: TypeInput)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple(types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\n  {\n    return this.setParent(new TupleType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static parse(input: TypeInput): Type\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  private listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { ObjectType, ObjectOptions } from './types/Object';\nimport { TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  params: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      params: Types.object(),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public params: ObjectType<ObjectOptions>;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\n    this.expression = defs.getExpression(options.expression);\n    this.defaults = this.params.fromJson(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.params = options instanceof Func\n        ? options.params\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\n      this.expression = options instanceof Func\n        ? options.expression\n        : defs.getExpression(options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.params.fromJson(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      description, \n      meta,\n      params: params.encode(),\n      expression: expression.encode(),\n      defaults: params.toJson(defaults),\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const paramType = this.params.options.props[name];\n\n    if (paramType)\n    {\n      DataTypes.objectSet(this.params.options.props, newName, paramType);\n      DataTypes.objectRemove(this.params.options.props, name);\n\n      if (name in this.defaults)\n      {\n        DataTypes.objectSet(this.defaults, newName, this.defaults[name]);\n        DataTypes.objectRemove(this.defaults, name);\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const exists = name in this.params.options.props;\n\n    if (exists)\n    {\n      DataTypes.objectRemove(this.params.options.props, name);\n      DataTypes.objectRemove(this.defaults, name);\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \n  {\n    const context = Types.object({\n      ...this.params.options.props,\n      ...paramsTypes,\n    });\n\n    return this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): ObjectType\n  {\n    return isEmpty(this.defaults)\n      ? this.params\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\n  }\n\n  public getParamType(param: string)\n  {\n    const propType = this.params.options.props[param];\n\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\n      ? propType.getRequired()\n      : propType;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.params.options.props[prop];\n\n      if (!propType.getRequired().isValid(target[prop]))\n      {\n        DataTypes.objectSet(target, prop, DataTypes.copy(this.defaults[prop]));\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    if (!(arg in this.params.options.props))\n    {\n      return false;\n    }\n\n    return this.expression.mutates(def, arg, false);\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap, now } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n\n  /**\n   * When the relation was created.\n   */\n  public created: number;\n\n  /**\n   * When the relation was last updated.\n   */\n  public updated: number;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.updated = options.updated || now();\n    this.created = options.created || now();\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.updated = options.updated || now();\n      this.created = options.created || now();\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, created, updated,\n      kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      updated,\n      created,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber, now } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n  moveDataset(program: Program, dataset: ProgramDataSet, from: number, to: number): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now(),\n        updated: now(),\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public moveDataset(dataset: ProgramDataSet | number, to: number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n    const inside = to >= 0 && to < this.datasets.length;\n    const movable = exists && inside;\n\n    if (movable)\n    {\n      const data = this.datasets[index];\n\n      this.datasets.splice(index, 1);\n      this.datasets.splice(to, 0, data);\n\n      this.trigger('moveDataset', this, data, index, to);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return movable;\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: Partial<ProgramDataSet>, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n\n      DataTypes.arrayRemove(this.datasets, index);\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { now } from './fns';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, created, updated, meta, dataType, data } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, isString, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func, 'params' | 'returnType'] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func, 'params' | 'returnType'] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\n  changedMethods(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  private legacy: boolean = false;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  public isLegacy(): boolean\n  {\n    return this.legacy;\n  }\n\n  public setLegacy(): void\n  {\n    this.legacy = true;\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(completeData: any): Type\n  {\n    const described: Map<any, any> = new Map();\n\n    const provider: TypeDescribeProvider = \n    {\n      describe: (data) => \n      {\n        let describedType = described.get(data);\n\n        if (describedType !== undefined) \n        {\n          return describedType;\n        }\n\n        for (const describer of this.describers)\n        {\n          describedType = describer.describe(data, provider, described);\n    \n          if (describedType)\n          {\n            return describedType;\n          }\n        }\n\n        return AnyType.baseType;\n      },\n      merge: (type, data) => \n      {\n        return this.merge(type, data);\n      },\n    };\n\n    return provider.describe(completeData);\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    const methods = this.getMethodReferences(name);\n\n    methods.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = methodOptions instanceof Func \n      ? methodOptions \n      : Func.create(this, methodOptions);\n\n    const existing = entity.methods[method.name];\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(method, this);\n      }\n      else\n      {\n        entity.addMethod(method);\n      }\n      \n      this.trigger('updateMethod', this, method, entity);\n    }\n    else\n    {\n      entity.addMethod(method);\n\n      this.trigger('addMethod', this, method, entity);\n    }\n\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    const oldName = method.name;\n\n    entity.renameMethod(oldName, newName);\n\n    const refs = this.getMethodReferences(entity, method);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    method.trigger('renamed', method, oldName);\n    method.changed();\n\n    this.trigger('renameMethod', this, method, entity, oldName);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\n    {\n      return false;\n    }\n\n    entity.removeMethod(method.name);\n\n\n    this.trigger('removeMethod', this, method, entity);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n\n  \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    if (path.length === 0)\n    {\n      return null;\n    }\n\n    let thisType = path[0].getType(this, context);\n\n    if (!thisType)\n    {\n      return null;\n    }\n\n    let optional = thisType.isOptional();\n\n    for (let i = 1; i < stopBefore; i++)\n    {\n      const node = path[i];\n\n      thisType = node.isPathNode()\n        ? node.getType(this, context, thisType)\n        : thisType.getSubType(node, this, context);\n\n      if (!thisType)\n      {\n        return null;\n      }\n\n      optional = optional || thisType.isOptional();\n    }\n\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const exprClass = this.expressions[value[0]];\n\n      if (!exprClass)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return exprClass.decode(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public isExpression(value: any): value is (Expression | [string, ...any[]])\n  {\n    return value instanceof Expression || (isArray(value) && isString(value[0]) && value[0] in this.expressions);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\n    const methodName = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.getReturnType(this);\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.params,\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.getReturnType(this);\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.params,\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.params,\n        source: [func, 'params'],\n      });\n\n      if (dynamic) {\n        instances.push({\n          type: func.getReturnType(this),\n          source: [func, 'returnType'],\n        });\n      }\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.params,\n          source: [entity, method, 'params'],\n        });\n\n        if (dynamic) {\n          instances.push({\n            type: method.getReturnType(this),\n            source: [entity, method, 'returnType'],\n          });\n        }\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        context: func.params,\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.getParamTypes(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public returnProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.returnProperty = this.returnProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : value instanceof Expression\n        ? this.getCommand(value, provider)\n        : () => value;\n  }\n\n}","import { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_PATH = 2;\n\nexport class SubExpression extends Expression \n{\n\n  public static id = 'sub';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \n  {\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    exprs.setLegacy();\n\n    return PathExpression.createForLegacy([value, ...path]);\n  }\n\n  public static encode(expr: SubExpression): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getId(): string\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getScope(): null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public encode(): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public clone(): Expression\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { MethodExpression } from '../exprs/Method';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { PathExpression } from '../exprs/Path';\nimport { ReturnExpression } from '../exprs/Return';\nimport { SetExpression } from '../exprs/Set';\nimport { SubExpression } from '../exprs/Sub';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { UpdateExpression } from '../exprs/Update';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    MethodExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    PathExpression,\n    ReturnExpression,\n    SetExpression,\n    SubExpression,    \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    UpdateExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray, objectMap } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType, ObjectOptions } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName },\n    { initial: (i, provider) => {\n      if (i.name instanceof EntityType) {\n        const type = i.name.getType();\n        if (type instanceof ObjectType) {\n          const objectType = type as ObjectType<ObjectOptions>;\n          \n          return Types.object(objectMap(objectType.options.props, (value) => Types.optional(value.clone())));\n        }\n      }\n      return ObjectType.baseType;\n    }}\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ManyType } from '../../types/Many';\nimport { NullType } from '../../types/Null';\nimport { Type } from '../../Type';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => {\n      let optional = true;\n      const types: Type[] = [];\n      const checkType = (x?: Type) => {\n        if (!optional) return;\n        \n        if (x) {\n          let xoptional = x instanceof OptionalType;\n          const xinner = xoptional ? x.options as Type : x;\n\n          if (xinner instanceof ManyType) {\n            xinner.options.forEach((y) => {\n              const yoptional = y instanceof OptionalType;\n              const yinner = yoptional ? y.options as Type : y;\n\n              xoptional = xoptional || yoptional;\n\n              if (!types.some(t => t.exactType(yinner))) {\n                types.push(yinner);\n              }\n            });\n          }\n\n          optional = optional && xoptional;\n\n          if (!types.some(t => t.exactType(xinner))) {\n            types.push(xinner);\n          }\n        }\n      };\n\n      checkType(i.a);\n      checkType(i.b);\n      checkType(i.c);\n      checkType(i.d);\n      checkType(i.e);\n\n      return types.length > 1\n        ? optional\n          ? Types.optional(new ManyType(types))\n          : new ManyType(types)\n        : types.length === 1\n          ? optional\n            ? Types.optional(types[0])\n            : types[0]\n          : NullType;\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","import { Type, TypeInput, TypeMap } from \"../../Type\";\nimport { ObjectType } from \"../../types/Object\";\nimport { EntityType } from \"../../types/Entity\";\nimport { EnumType } from \"../../types/Enum\";\nimport { ManyType } from \"../../types/Many\";\nimport { Types } from \"../../Types\";\nimport { OptionalType } from \"../../types/Optional\";\n\n\n\nexport function MergedObjectType(types: Type[]): ObjectType\n{\n    const props: TypeMap = {};\n\n    for (const type of types) \n    {\n        const objectType = GivenObjectType(type, undefined, MergedObjectType);\n        \n        if (objectType instanceof ObjectType) \n        {\n            const paramProps = objectType.options.props;\n\n            for (const prop in paramProps) \n            {\n                const paramProp = paramProps[prop];\n\n                if (prop in props && paramProp instanceof OptionalType) \n                {\n                    props[prop] = Types.mergeMany([paramProp, props[prop]]);\n                } \n                else \n                {\n                    props[prop] = paramProp;\n                }\n            }\n        }\n    }\n\n    return new ObjectType({ props });\n}\n\nexport function GivenObjectType(type?: Type, otherwise?: TypeInput, merger?: (multiple: Type[]) => Type): TypeInput\n{\n    return type instanceof ObjectType \n        ? type \n        : type instanceof EntityType \n            ? type.getType()\n            : type instanceof EnumType\n                ? GivenObjectType(type.options.value, otherwise)\n                : type instanceof ManyType && type.options.some((e) => GivenObjectType(e)) && merger\n                    ? merger(type.options.filter((e) => GivenObjectType(e)))\n                    : type instanceof OptionalType\n                        ? GivenObjectType(type.options, otherwise)\n                        : otherwise;\n}\n  ","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { GivenObjectType, MergedObjectType } from './helpers';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list, ListType);\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value, ListType);\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  flatten: ops.setTypes(ListOps.flatten,\n    (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n      ? GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n      : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\n        ? MergedObjectType(i.list.options.filter((e) => GivenObjectType(e, undefined, MergedObjectType)))\n        : ObjectType,\n    { list: (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n        ? i.list\n        : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\n          ? i.list\n          : ListType\n    }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    ObjectType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { MergedObjectType } from './helpers';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => MergedObjectType(['a', 'b', 'c', 'd', 'e'].map(k => i[k])),\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number;\n  formats: FormatterMap<T>;\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  };\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this;\n  public add(key: string, formatter: Formatter<T>): this;\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      if (formatter)\n      {\n        this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n      }\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter;\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n}\n","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}","\nexport * from './fns';\n\nexport * from './Command';\nexport * from './DefinitionProvider';\nexport * from './Definitions';\nexport * from './DataTypes';\nexport * from './Entity';\nexport * from './EventBase';\nexport * from './Expression';\nexport * from './Exprs';\nexport * from './Func';\nexport * from './LinkedNode';\nexport * from './Locale';\nexport * from './Operation';\nexport * from './Computed';\nexport * from './Program';\nexport * from './ReferenceData';\nexport * from './Relation';\nexport * from './Runtime';\nexport * from './Type';\nexport * from './Types';\nexport * from './Traverser';\nexport * from './Validate';\n\nexport * from './maps/FastMap';\nexport * from './maps/NamedMap';\n\nexport * from './types/ID';\nexport * from './types/Entity';\nexport * from './types/Any';\nexport * from './types/Boolean';\nexport * from './types/Color';\nexport * from './types/Date';\nexport * from './types/Enum';\nexport * from './types/List';\nexport * from './types/Many';\nexport * from './types/Map';\nexport * from './types/Not';\nexport * from './types/Null';\nexport * from './types/Number';\nexport * from './types/Object';\nexport * from './types/Optional';\nexport * from './types/Set';\nexport * from './types/Text';\nexport * from './types/Tuple';\n\nexport * from './exprs/And';\nexport * from './exprs/Chain';\nexport * from './exprs/Comment';\nexport * from './exprs/Computed';\nexport * from './exprs/Constant';\nexport * from './exprs/Define';\nexport * from './exprs/Do';\nexport * from './exprs/For';\nexport * from './exprs/Get';\nexport * from './exprs/GetData';\nexport * from './exprs/GetEntity';\nexport * from './exprs/GetRelation';\nexport * from './exprs/If';\nexport * from './exprs/Invoke';\nexport * from './exprs/Method';\nexport * from './exprs/No';\nexport * from './exprs/Not';\nexport * from './exprs/Object';\nexport * from './exprs/Operation';\nexport * from './exprs/Or';\nexport * from './exprs/Path';\nexport * from './exprs/Return';\nexport * from './exprs/Set';\nexport * from './exprs/Sub';\nexport * from './exprs/Switch';\nexport * from './exprs/Template';\nexport * from './exprs/Tuple';\nexport * from './exprs/Update';\nexport * from './exprs/While';\n\nexport * from './def';\n\nexport * from './ops/EntityOps';\nexport * from './ops/AnyOps';\nexport * from './ops/BooleanOps';\nexport * from './ops/ColorOps';\nexport * from './ops/DateOps';\nexport * from './ops/ListOps';\nexport * from './ops/MapOps';\nexport * from './ops/NumberOps';\nexport * from './ops/ObjectOps';\nexport * from './ops/SetOps';\nexport * from './ops/TextOps';\nexport * from './ops/TupleOps';\n\nexport * from './ops/types/EntityOpsTypes';\nexport * from './ops/types/AnyOpsTypes';\nexport * from './ops/types/BooleanOpsTypes';\nexport * from './ops/types/ColorOpsTypes';\nexport * from './ops/types/DateOpsTypes';\nexport * from './ops/types/ListOpsTypes';\nexport * from './ops/types/MapOpsTypes';\nexport * from './ops/types/NumberOpsTypes';\nexport * from './ops/types/ObjectOpsTypes';\nexport * from './ops/types/SetOpsTypes';\nexport * from './ops/types/TextOpsTypes';\nexport * from './ops/types/TupleOpsTypes';\n\nexport * from './locales';\n\nexport * from './util/color/Color';\nexport * from './util/color/ColorSpace';\nexport * from './util/color/ColorSpaceHSL';\nexport * from './util/color/ColorSpaceRGB';\nexport * from './util/date/DateConstants';\nexport * from './util/date/DateFormat';\nexport * from './util/date/DateFunctions';\nexport * from './util/Format';"],"sourceRoot":""}