{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","isCompatible","other","exact","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","has","defaultResult","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","cache","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","arg","expressions","AndExpression","e","expectedType","directly","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","PathExpression","fromPartial","pathData","isPath","getPathType","thisType","INVALID_EXPRESSION","EMPTY_PATH","isWritable","isMutating","e0","e1","e2","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","param","paramName","MISSING_FUNCTION","argName","argType","named","nameOrArgs","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","paramType","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","READONLY","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","some","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","takeKey","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","moveDataset","inside","movable","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","objectType","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getFormatter","escaped","getEscaped","content","handled","finalFormatter","formatted","startEscape","endEscape","possibleEscapeIndex","endOffset","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is Record<string, any> \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): value is ([] | {} | null | undefined)\n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function now(): number\n{\n  return new Date().getTime();\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\n  map: Record<K, V>, \n  getValue: (value: V, key: K) => R, \n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey(key, value)] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<V, M = V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n  OUTSIDE_PATH = 14,          // HIGH\n  READONLY = 15,              // HIGH\n  EMPTY_PATH = 16,            // HIGH\n  INVALID_THIS = 17,          // HIGH\n  MISSING_METHOD = 18,        // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;\n","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeMap = Record<string, Type>;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  getData(name: string): ReferenceData | null;\n  setLegacy(): void;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<O> = any, O = any> \n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public abstract getExactType(value: any): Type<O>;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): boolean;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<O>;\n\n  public abstract clone(): Type<O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): any;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\n\n  public abstract fromJson(json: any): any;\n\n  public abstract toJson(value: any): any;\n  \n}","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n  setLegacy(): void;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public static INSTANCE = 'instance';\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\n  \n  public abstract mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return false;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return true;\n  }\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = []\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed \n{\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n  writeable?: {\n    op: string;\n    value: string;\n    newValue: string;\n    params: Record<string, any>;\n  };\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp = this.map[id];\n\n    comp.writeable = { \n      op: op.id,\n      value,\n      newValue,\n      params: params || {},\n    };\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport interface DataTypeAccessor<T = any>\n{\n  priority: number;\n  isValid(value: any, step: any): boolean;\n  set(value: T, step: any, stepValue: any): void;\n  get(value: T, step: any): any;\n  remove(value: T, step: any): any;\n  has(value: T, step: any): any;\n}\n\nexport interface DataTypeRegistryOperations\n{\n  objectSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): void;\n  objectRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;\n  arrayAdd<T>(arr: T[], item: T): void;\n  arrayRemove<T>(arr: T[], index: number): T;\n  arraySet<T>(arr: T[], index: number, item: T): T;\n}\n\nexport class DataTypeRegistry implements DataTypeRegistryOperations\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n  private accessorList: DataTypeAccessor[];\n\n  public objectSet: DataTypeRegistryOperations['objectSet']\n    = (obj, prop, value) => obj[prop] = value;\n  public objectRemove: DataTypeRegistryOperations['objectRemove']\n    = (obj, prop) => delete obj[prop];\n  public arrayAdd: DataTypeRegistryOperations['arrayAdd']\n    = (arr, item) => arr.push(item);\n  public arrayRemove: DataTypeRegistryOperations['arrayRemove']\n    = (arr, index) => arr.splice(index, 1)[0];\n  public arraySet: DataTypeRegistryOperations['arraySet']\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n    this.accessorList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  public get(value: any, step: any): any\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.get(value, step);\n      }\n    }\n  }\n\n  public set(value: any, step: any, stepValue: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.set(value, step, stepValue);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public remove(value: any, step: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.remove(value, step);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public has<O = false>(value: any, step: any, defaultResult: O = false as unknown as O): boolean | O\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.has(value, step);\n      }\n    }\n\n    return defaultResult;\n  }\n\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\n  {\n    return this.addToPriorityList(this.accessorList, accessor);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return this.expression.mutates(def, arg);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)    \n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public define: [string, Expression][];\n  public body: Expression;\n\n  public constructor(define: [string, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\n\n    return this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [, defined] of this.define)    \n    {\n      if (defined.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.body.mutates(def, arg, directly);\n  }\n\n  public with(name: string, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\n  {\n    const append = isString(nameOrDefines)\n      ? { [nameOrDefines]: value }\n      : nameOrDefines;\n\n    for (const name in append)\n    {\n      const expr = Exprs.parse(append[name]);\n      const existing = this.define.find(([varName]) => varName === name);\n\n      if (existing) {\n        existing[1] = expr;\n      } else {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const link of this.chain)\n    {\n      if (link.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    if (data[INDEX_PATH])\n    {\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\n    }\n    \n    return new GetExpression();\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression();\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n\n    DataTypes.addAccessor<string>({\n      priority,\n      isValid: isString,\n      get: (x, step) => x[step],\n      set: (x, step, value) => {},\n      remove: (x, step) => x.substring(0, step) + x.substring(step + 1),\n      has: (x, step) => x[step] !== undefined,\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions \n{\n  key: Type;\n  value: Type;\n  constants: Map<any, any>;\n}\n\nexport class EnumType extends Type<EnumOptions> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next();\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { isNumber } from '../fns';\nimport { GetExpression } from './Get';\nimport { ConstantExpression } from './Constant';\n\n\nconst INDEX_PATH = 1;\n\nexport class PathExpression extends Expression \n{\n\n  public static id = 'path';\n\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \n  {\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\n    \n    return new PathExpression(expressions);\n  }\n\n  public static encode(expr: PathExpression): any \n  {\n    return [this.id, expr.expressions.map((e) => e.encode())];\n  }\n\n  public static createForLegacy(path: Expression[])\n  {\n    for (let i = path.length - 1; i >= 0; i--)\n    {\n      const node = path[i];\n\n      if (node instanceof PathExpression)\n      {\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\n        {\n          path.splice(i, 1, ...node.expressions);\n        }\n      }\n    }\n\n    return new PathExpression(path);\n  }\n\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\n  {\n    const isPath = pathData[0] === PathExpression.id;\n    const path = isPath\n      ? PathExpression.decode(pathData, exprs)\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\n\n    if (isPath) {\n      exprs.setLegacy();\n    }\n\n    return path;\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return PathExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return PathExpression.encode(this);\n  }\n\n  public clone(): PathExpression\n  {\n    return new PathExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.expressions, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    \n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const path = this.expressions;\n\n    if (path.length === 0)\n    {\n      handler({\n        type: ValidationType.EMPTY_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    let thisType = path[0].getType(def, context);\n\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: path[0],\n        parent: this,\n      });\n    }\n    else\n    {\n      path[0].validate(def, context, handler);\n\n      for (let i = 1; i < path.length; i++)\n      {\n        const node = path[i];\n\n        node.validate(def, context, handler, thisType);\n\n        thisType = node.isPathNode()\n          ? node.getType(def, context, thisType)\n          : thisType.getSubType(node, def, context);\n\n        if (!thisType)\n        {\n          handler({\n            type: ValidationType.INVALID_EXPRESSION,\n            severity: ValidationSeverity.HIGH,\n            context,\n            subject: node,\n            parent: this,\n          });\n          \n          break;\n        }\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public isWritable(defs: DefinitionProvider)\n  {\n    return this.expressions.length > 0\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\n      : false;\n  }\n\n  public isMutating(arg: string, directly: boolean = false): boolean\n  {\n    const e0 = this.expressions[0];\n    const e1 = this.expressions[1];\n    const e2 = this.expressions[2]; // tslint:disable-line: no-magic-numbers\n\n    if (!(e0 instanceof GetExpression && e1 instanceof ConstantExpression && e1.value === arg))\n    {\n      return false;\n    }\n\n    return directly ? true : !!e2;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n\n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider) \n  {\n    const name = data[INDEX_NAME];\n\n    if (data[INDEX_EXPRESSION]) \n    {\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\n    }\n    \n    return new ComputedExpression(name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string) \n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return op ? op.complexity : 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.OUTSIDE_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      if (!def.hasComputed(thisType, this.name))\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject: this,\n        });\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    const comp = defs.getComputed(this.name);\n\n    return !comp || !!comp.writeable;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BREAK = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, breakVariable, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.start.mutates(def, arg, directly) || \n      this.end.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (breakVariable)\n    {\n      this.breakVariable = breakVariable;\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }  \n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], ['initial'], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport interface ObjectOptions \n{\n  props: TypeMap;\n}\n\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    const type = new ObjectType({ props: {} });\n\n    cache.set(data, type);\n\n    type.options.props = objectMap(data, d => describer.describe(d));\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n\n    DataTypes.addAccessor<Record<string, any>>({\n      priority,\n      isValid: (value) => isObject(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue),\n      remove: (value, step) => DataTypes.objectRemove(value, step),\n      has: (value, step) => step in value,\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<O>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        p1[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\n      {\n        key: new EnumType({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map(\n            objectValues(this.options.props, (prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => DataTypes.objectRemove(this.options.props, prop))\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        if (props[prop].isOptional())\n        {\n          continue;\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<O>\n  {\n    return new ObjectType<O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n    \n    for (const prop in props)\n    {\n      const propType = props[prop];\n\n      if (propType && !propType.isOptional())\n      {\n        out[prop] = propType.create();\n      }\n    }\n\n    return out;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): any\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: any): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n    // return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def, context),\n        result.getComplexity(def, context)\n      ), \n      this.otherwise.getComplexity(def, context)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [condition, result] of this.cases)\n    {\n      if (condition.mutates(def, arg, directly) || result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.otherwise.mutates(def, arg, directly);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return 0;\n    }\n\n    return func.expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const func = def.getFunction(this.name);\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    return func\n      ? func.getReturnType(def, argTypes)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args ,arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const func = def.getFunction(this.name);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const params: TypeMap = {};\n\n      objectEach(func.params.options.props, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n\n        if (arg)\n        {\n          params[paramName] = arg.getType(def, context);\n        }\n      });\n\n      // func.options.expression.validate(def, Types.object(params), handler);\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && func.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false; \n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return `Function \"${this.name}\" does not exist`;\n    }\n\n    return func.expression;\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { EntityType } from '../types/Entity';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_ENTITY = 1;\nconst INDEX_NAME = 2;\nconst INDEX_ARGS = 3;\n\nexport class MethodExpression extends Expression \n{\n\n  public static id = 'method';\n\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \n  {\n    const entity = data[INDEX_ENTITY];\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new MethodExpression(entity, name, args);\n  }\n\n  public static encode(expr: MethodExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.entity, expr.name, args];\n  }\n\n  public entity: string;\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(entity: string, name: string, args: ExpressionMap) \n  {\n    super();\n    this.entity = entity;\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return MethodExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity || !entity.methods[this.name])\n    {\n      return 0;\n    }\n\n    return entity.methods[this.name].expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return MethodExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      return null;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return null;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return null;\n    }\n    \n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    argTypes[Expression.INSTANCE] = entity.type;\n    \n    return method.getReturnType(def, argTypes);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args, arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      handler({\n        type: ValidationType.INVALID_THIS,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      handler({\n        type: ValidationType.MISSING_METHOD,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const params: TypeMap = {};\n\n    params[Expression.INSTANCE] = entity.type;\n\n    objectEach(method.params.options.props, (param, paramName) =>\n    {\n      const arg = this.args[paramName];\n\n      this.validateType(def, context, param, arg, handler);\n\n      if (arg)\n      {\n        params[paramName] = arg.getType(def, context);\n      }\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return false;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && method.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return `Entity \"${this.entity}\" does not exist`;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\n    }\n\n    return method.expression;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public named(name: string): MethodExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): MethodExpression\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const { name, params } = this;\n    const operation = def.getOperation(name);\n\n    if (!operation)\n    {\n      return false;\n    }\n\n    for (const paramName in params)\n    {\n      const paramType = params[paramName];\n\n      if (paramType.mutates(def, arg, directly) || (paramType instanceof PathExpression && paramType.isMutating(arg, true) && operation.mutates.indexOf(paramName) !== -1))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_VALUE = 1;\n\nexport class ReturnExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'return';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new ReturnExpression(value);\n  }\n\n  public static encode(expr: ReturnExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, returnValue]\n      : [this.id];\n  }\n\n  public value: Expression;\n\n  public constructor(value: Expression) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ReturnExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.value.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ReturnExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ReturnExpression(this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ReturnExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.value.mutates(def, arg, directly);\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n\n    return new SetExpression(path, value);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    return [this.id, expr.path.encode(), expr.value.encode()];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue)\n  {\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n\n  public constructor(path: PathExpression, value: Expression) \n  {\n    super();\n\n    this.path = path;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.clone(), this.value.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      this.validateType(def, context, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public to(value: ExpressionValue): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || \n      this.value.mutates(def, arg, directly) || \n      this.path.mutates(def, arg, directly);\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def, context), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def, context)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def, context), \n        this.defaultCase.getComplexity(def, context)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    if (this.value.mutates(def, arg, directly))\n    {\n      return true;\n    }\n\n    for (const [tests, result] of this.cases)\n    {\n      if (result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n\n      for (const test of tests)\n      {\n        if (test.mutates(def, arg, directly))\n        {\n          return true;\n        }\n      }\n    }\n\n    return this.defaultCase.mutates(def, arg, directly);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const param in this.params)\n    {\n      if (this.params[param].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst DEFAULT_CURRENT = 'current';\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\n\nexport class UpdateExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'up';\n\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \n\n    return new UpdateExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: UpdateExpression): any \n  {\n    const path = expr.path.encode();\n    const value = expr.value.encode();\n\n    return expr.currentVariable === DEFAULT_CURRENT\n      ? [this.id, path, value]\n      : [this.id, path, value, expr.currentVariable]\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\n  {\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return UpdateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    return {\n      [this.currentVariable]: AnyType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return UpdateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === UpdateExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === UpdateExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      const valueContext = def.getContext(context, {\n        [this.currentVariable]: expectedType,\n      });\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || this.value.mutates(def, arg, directly) || this.path.mutates(def, arg, directly);\n  }\n\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable || this.currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): UpdateExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n    \n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions \n{\n  item: Type;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType extends Type<ListOptions> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    const type = new ListType({\n      item: AnyType.baseType,\n      min: data.length,\n      max: data.length\n    });\n\n    cache.set(data, type);\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    type.options.item = item;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<any[]>({\n      priority,\n      isValid: (value) => isArray(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\n      remove: (value, step) => DataTypes.arrayRemove(value, step),\n      has: (value, step) => value[step] !== undefined,\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport class TupleType extends Type<Type[]>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: TupleType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType\n  {\n    return new TupleType([]);\n  }\n\n  public clone(): TupleType\n  {\n    return new TupleType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return this.options.map(e => e.create());\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return this.options.map((e, i) => e.fromJson(json[i]));\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => DataTypes.objectRemove(this.props, prop))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const prop in this.props)\n    {\n      if (this.props[prop].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { PathExpression } from './exprs/Path';\nimport { ReturnExpression } from './exprs/Return';\nimport { SetExpression } from './exprs/Set';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { UpdateExpression } from './exprs/Update';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type } from './Type';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\n  }\n\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\n  {\n    return path.length === 0\n      ? new GetExpression()\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\n  }\n\n  public static computed(name: string): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static path(...exprs: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\n      ? exprs[0]\n      : new PathExpression(this.parse(exprs)));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\n  {\n    return this.setParent(new ReturnExpression(this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static update(...path: ExpressionValue[]): UpdateExpression\n  {\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0);\n  y.setFullYear(y.getFullYear(), month, 1);\n  y.setHours(0, 0, 0, 0);\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\n\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\n\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\n\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\n\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\n\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\n\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\n\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\n\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\n\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\n\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\n\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\n\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\n\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\n\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\n\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\n\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\n\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\n\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\n\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\n\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\n\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\n\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\n\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\n\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\n\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\n\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\n\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\n\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\n\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\n\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): any\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions \n{\n  key: Type;\n  value: Type;\n}\n\nexport class MapType extends Type<MapOptions> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    const type = new MapType({ key, value });\n\n    cache.set(data, type);\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    type.options.key = key;\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<Map<any, any>>({\n      priority,\n      isValid: (value) => isMap(value),\n      get: (value, step) => value.get(step),\n      set: (value, step, stepValue) => value.set(step, stepValue),\n      remove: (value, step) => value.delete(step),\n      has: (value, step) => value.has(step),\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop in map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport class OptionalType extends Type<Type>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): any\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions\n{\n  hasAlpha?: boolean;\n}\n\n\nexport class ColorType extends ObjectType<ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      created, \n      updated,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, prop);\n      DataTypes.objectSet(this.transcoders, newProp, transcoder);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        DataTypes.objectSet(instance, prop, this.instances.reduce((a, b) => isNumber(b[prop]) ? Math.max(a, b[prop]) : a, 0) + 1);\n        break;\n      case EntityPrimaryType.UUID:\n        DataTypes.objectSet(instance, prop, Entity.uuid());\n        break;\n    }\n  }\n\n  public takeKey(run: Runtime, instance: any): any\n  {\n    this.setKey(instance);\n\n    return this.getKey(run, instance);\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    DataTypes.objectSet(this.indexes, name, index);\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    DataTypes.objectRemove(this.indexes, name);\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      DataTypes.objectRemove(this.indexes, name);\n      DataTypes.objectSet(this.indexes, newName, index);\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    DataTypes.objectSet(this.transcoders, prop, transcoder);\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, name);\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    DataTypes.objectSet(this.methods, method.name, method);\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      DataTypes.objectRemove(this.methods, name);\n      DataTypes.objectSet(this.methods, newName, method);\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      DataTypes.objectRemove(this.methods, name);\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions \n{\n  value: Type;\n}\n\nexport class SetType extends Type<SetOptions> \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    const type = new SetType({ value });\n\n    cache.set(data, type);\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<any>): Set<any>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<any>): Array<any>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.entries()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved, TypeProvider } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\nimport { EntityType } from './types/Entity';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static entity(name: string, types: TypeProvider)\n  {\n    return new EntityType(name, types);\n  }\n\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\n  {\n    return this.setParent(new EnumType({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list(item: TypeInput, min?: number, max?: number)\n  {\n    return this.setParent(new ListType({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map(value: TypeInput, key: TypeInput = TextType)\n  {\n    return this.setParent(new MapType({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object(props: TypeInputMap = {})\n  {\n    return this.setParent(new ObjectType({ \n      props: this.resolve(props),\n    }));\n  }\n\n  public static optional(type: TypeInput): Type\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set(value: TypeInput)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple(types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\n  {\n    return this.setParent(new TupleType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static parse(input: TypeInput): Type\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  private listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { ObjectType, ObjectOptions } from './types/Object';\nimport { TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  params: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      params: Types.object(),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public params: ObjectType<ObjectOptions>;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\n    this.expression = defs.getExpression(options.expression);\n    this.defaults = this.params.fromJson(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.params = options instanceof Func\n        ? options.params\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\n      this.expression = options instanceof Func\n        ? options.expression\n        : defs.getExpression(options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.params.fromJson(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      description, \n      meta,\n      params: params.encode(),\n      expression: expression.encode(),\n      defaults: params.toJson(defaults),\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const paramType = this.params.options.props[name];\n\n    if (paramType)\n    {\n      DataTypes.objectSet(this.params.options.props, newName, paramType);\n      DataTypes.objectRemove(this.params.options.props, name);\n\n      if (name in this.defaults)\n      {\n        DataTypes.objectSet(this.defaults, newName, this.defaults[name]);\n        DataTypes.objectRemove(this.defaults, name);\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const exists = name in this.params.options.props;\n\n    if (exists)\n    {\n      DataTypes.objectRemove(this.params.options.props, name);\n      DataTypes.objectRemove(this.defaults, name);\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \n  {\n    const context = Types.object({\n      ...this.params.options.props,\n      ...paramsTypes,\n    });\n\n    return this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): ObjectType\n  {\n    return isEmpty(this.defaults)\n      ? this.params\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\n  }\n\n  public getParamType(param: string)\n  {\n    const propType = this.params.options.props[param];\n\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\n      ? propType.getRequired()\n      : propType;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.params.options.props[prop];\n\n      if (!propType.getRequired().isValid(target[prop]))\n      {\n        DataTypes.objectSet(target, prop, DataTypes.copy(this.defaults[prop]));\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    if (!(arg in this.params.options.props))\n    {\n      return false;\n    }\n\n    return this.expression.mutates(def, arg, false);\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap, now } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n\n  /**\n   * When the relation was created.\n   */\n  public created: number;\n\n  /**\n   * When the relation was last updated.\n   */\n  public updated: number;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.updated = options.updated || now();\n    this.created = options.created || now();\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.updated = options.updated || now();\n      this.created = options.created || now();\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, created, updated,\n      kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      updated,\n      created,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber, now } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n  moveDataset(program: Program, dataset: ProgramDataSet, from: number, to: number): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now(),\n        updated: now(),\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public moveDataset(dataset: ProgramDataSet | number, to: number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n    const inside = to >= 0 && to < this.datasets.length;\n    const movable = exists && inside;\n\n    if (movable)\n    {\n      const data = this.datasets[index];\n\n      this.datasets.splice(index, 1);\n      this.datasets.splice(to, 0, data);\n\n      this.trigger('moveDataset', this, data, index, to);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return movable;\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: Partial<ProgramDataSet>, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n\n      DataTypes.arrayRemove(this.datasets, index);\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { now } from './fns';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, created, updated, meta, dataType, data } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func, 'params' | 'returnType'] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func, 'params' | 'returnType'] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\n  changedMethods(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  private legacy: boolean = false;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  public isLegacy(): boolean\n  {\n    return this.legacy;\n  }\n\n  public setLegacy(): void\n  {\n    this.legacy = true;\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(completeData: any): Type\n  {\n    const described: Map<any, any> = new Map();\n\n    const provider: TypeDescribeProvider = \n    {\n      describe: (data) => \n      {\n        let describedType = described.get(data);\n\n        if (describedType !== undefined) \n        {\n          return describedType;\n        }\n\n        for (const describer of this.describers)\n        {\n          describedType = describer.describe(data, provider, described);\n    \n          if (describedType)\n          {\n            return describedType;\n          }\n        }\n\n        return AnyType.baseType;\n      },\n      merge: (type, data) => \n      {\n        return this.merge(type, data);\n      },\n    };\n\n    return provider.describe(completeData);\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    const methods = this.getMethodReferences(name);\n\n    methods.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = methodOptions instanceof Func \n      ? methodOptions \n      : Func.create(this, methodOptions);\n\n    const existing = entity.methods[method.name];\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(method, this);\n      }\n      else\n      {\n        entity.addMethod(method);\n      }\n      \n      this.trigger('updateMethod', this, method, entity);\n    }\n    else\n    {\n      entity.addMethod(method);\n\n      this.trigger('addMethod', this, method, entity);\n    }\n\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    const oldName = method.name;\n\n    entity.renameMethod(oldName, newName);\n\n    const refs = this.getMethodReferences(entity, method);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    method.trigger('renamed', method, oldName);\n    method.changed();\n\n    this.trigger('renameMethod', this, method, entity, oldName);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\n    {\n      return false;\n    }\n\n    entity.removeMethod(method.name);\n\n\n    this.trigger('removeMethod', this, method, entity);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n\n  \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    if (path.length === 0)\n    {\n      return null;\n    }\n\n    let thisType = path[0].getType(this, context);\n\n    if (!thisType)\n    {\n      return null;\n    }\n\n    let optional = thisType.isOptional();\n\n    for (let i = 1; i < stopBefore; i++)\n    {\n      const node = path[i];\n\n      thisType = node.isPathNode()\n        ? node.getType(this, context, thisType)\n        : thisType.getSubType(node, this, context);\n\n      if (!thisType)\n      {\n        return null;\n      }\n\n      optional = optional || thisType.isOptional();\n    }\n\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const exprClass = this.expressions[value[0]];\n\n      if (!exprClass)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return exprClass.decode(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\n    const methodName = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.getReturnType(this);\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.params,\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.getReturnType(this);\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.params,\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.params,\n        source: [func, 'params'],\n      });\n\n      if (dynamic) {\n        instances.push({\n          type: func.getReturnType(this),\n          source: [func, 'returnType'],\n        });\n      }\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.params,\n          source: [entity, method, 'params'],\n        });\n\n        if (dynamic) {\n          instances.push({\n            type: method.getReturnType(this),\n            source: [entity, method, 'returnType'],\n          });\n        }\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        context: func.params,\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.getParamTypes(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public returnProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.returnProperty = this.returnProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : value instanceof Expression\n        ? this.getCommand(value, provider)\n        : () => value;\n  }\n\n}","import { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_PATH = 2;\n\nexport class SubExpression extends Expression \n{\n\n  public static id = 'sub';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \n  {\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    exprs.setLegacy();\n\n    return PathExpression.createForLegacy([value, ...path]);\n  }\n\n  public static encode(expr: SubExpression): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getId(): string\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getScope(): null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public encode(): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public clone(): Expression\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { MethodExpression } from '../exprs/Method';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { PathExpression } from '../exprs/Path';\nimport { ReturnExpression } from '../exprs/Return';\nimport { SetExpression } from '../exprs/Set';\nimport { SubExpression } from '../exprs/Sub';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { UpdateExpression } from '../exprs/Update';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    MethodExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    PathExpression,\n    ReturnExpression,\n    SetExpression,\n    SubExpression,    \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    UpdateExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray, objectMap } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType, ObjectOptions } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName },\n    { initial: (i, provider) => {\n      if (i.name instanceof EntityType) {\n        const type = i.name.getType();\n        if (type instanceof ObjectType) {\n          const objectType = type as ObjectType<ObjectOptions>;\n          \n          return Types.object(objectMap(objectType.options.props, (value) => Types.optional(value.clone())));\n        }\n      }\n      return ObjectType.baseType;\n    }}\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ManyType } from '../../types/Many';\nimport { NullType } from '../../types/Null';\nimport { Type } from '../../Type';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => {\n      let optional = true;\n      const types: Type[] = [];\n      const checkType = (x?: Type) => {\n        if (!optional) return;\n        \n        if (x) {\n          let xoptional = x instanceof OptionalType;\n          const xinner = xoptional ? x.options as Type : x;\n\n          if (xinner instanceof ManyType) {\n            xinner.options.forEach((y) => {\n              const yoptional = y instanceof OptionalType;\n              const yinner = yoptional ? y.options as Type : y;\n\n              xoptional = xoptional || yoptional;\n\n              if (!types.some(t => t.exactType(yinner))) {\n                types.push(yinner);\n              }\n            });\n          }\n\n          optional = optional && xoptional;\n\n          if (!types.some(t => t.exactType(xinner))) {\n            types.push(xinner);\n          }\n        }\n      };\n\n      checkType(i.a);\n      checkType(i.b);\n      checkType(i.c);\n      checkType(i.d);\n      checkType(i.e);\n\n      return types.length > 1\n        ? optional\n          ? Types.optional(new ManyType(types))\n          : new ManyType(types)\n        : types.length === 1\n          ? optional\n            ? Types.optional(types[0])\n            : types[0]\n          : NullType;\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    AnyType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type, TypeMap } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { OptionalType } from '../../types/Optional';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EntityType } from '../../types/Entity';\nimport { Types } from '../../Types';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => {\n      const props: TypeMap = {};\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n\n      for (const param of params) \n      {\n        let paramType = i[param];\n\n        if (paramType instanceof EntityType)\n        {\n          paramType = paramType.getType();\n        }\n\n        if (paramType instanceof ObjectType) \n        {\n          const paramProps = paramType.options.props;\n\n          for (const prop in paramProps) \n          {\n            const paramProp = paramProps[prop];\n\n            if (prop in props && paramProp instanceof OptionalType) \n            {\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\n            } \n            else \n            {\n              props[prop] = paramProp;\n            }\n          }\n        }\n      }\n\n      return new ObjectType({ props });\n    },\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number;\n  formats: FormatterMap<T>;\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  };\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this;\n  public add(key: string, formatter: Formatter<T>): this;\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter;\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n}\n","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}","\nexport * from './fns';\n\nexport * from './Command';\nexport * from './DefinitionProvider';\nexport * from './Definitions';\nexport * from './DataTypes';\nexport * from './Entity';\nexport * from './EventBase';\nexport * from './Expression';\nexport * from './Exprs';\nexport * from './Func';\nexport * from './LinkedNode';\nexport * from './Locale';\nexport * from './Operation';\nexport * from './Computed';\nexport * from './Program';\nexport * from './ReferenceData';\nexport * from './Relation';\nexport * from './Runtime';\nexport * from './Type';\nexport * from './Types';\nexport * from './Traverser';\nexport * from './Validate';\n\nexport * from './maps/FastMap';\nexport * from './maps/NamedMap';\n\nexport * from './types/ID';\nexport * from './types/Entity';\nexport * from './types/Any';\nexport * from './types/Boolean';\nexport * from './types/Color';\nexport * from './types/Date';\nexport * from './types/Enum';\nexport * from './types/List';\nexport * from './types/Many';\nexport * from './types/Map';\nexport * from './types/Not';\nexport * from './types/Null';\nexport * from './types/Number';\nexport * from './types/Object';\nexport * from './types/Optional';\nexport * from './types/Set';\nexport * from './types/Text';\nexport * from './types/Tuple';\n\nexport * from './exprs/And';\nexport * from './exprs/Chain';\nexport * from './exprs/Comment';\nexport * from './exprs/Computed';\nexport * from './exprs/Constant';\nexport * from './exprs/Define';\nexport * from './exprs/Do';\nexport * from './exprs/For';\nexport * from './exprs/Get';\nexport * from './exprs/GetData';\nexport * from './exprs/GetEntity';\nexport * from './exprs/GetRelation';\nexport * from './exprs/If';\nexport * from './exprs/Invoke';\nexport * from './exprs/Method';\nexport * from './exprs/No';\nexport * from './exprs/Not';\nexport * from './exprs/Object';\nexport * from './exprs/Operation';\nexport * from './exprs/Or';\nexport * from './exprs/Path';\nexport * from './exprs/Return';\nexport * from './exprs/Set';\nexport * from './exprs/Sub';\nexport * from './exprs/Switch';\nexport * from './exprs/Template';\nexport * from './exprs/Tuple';\nexport * from './exprs/Update';\nexport * from './exprs/While';\n\nexport * from './def';\n\nexport * from './ops/EntityOps';\nexport * from './ops/AnyOps';\nexport * from './ops/BooleanOps';\nexport * from './ops/ColorOps';\nexport * from './ops/DateOps';\nexport * from './ops/ListOps';\nexport * from './ops/MapOps';\nexport * from './ops/NumberOps';\nexport * from './ops/ObjectOps';\nexport * from './ops/SetOps';\nexport * from './ops/TextOps';\nexport * from './ops/TupleOps';\n\nexport * from './ops/types/EntityOpsTypes';\nexport * from './ops/types/AnyOpsTypes';\nexport * from './ops/types/BooleanOpsTypes';\nexport * from './ops/types/ColorOpsTypes';\nexport * from './ops/types/DateOpsTypes';\nexport * from './ops/types/ListOpsTypes';\nexport * from './ops/types/MapOpsTypes';\nexport * from './ops/types/NumberOpsTypes';\nexport * from './ops/types/ObjectOpsTypes';\nexport * from './ops/types/SetOpsTypes';\nexport * from './ops/types/TextOpsTypes';\nexport * from './ops/types/TupleOpsTypes';\n\nexport * from './locales';\n\nexport * from './util/color/Color';\nexport * from './util/color/ColorSpace';\nexport * from './util/color/ColorSpaceHSL';\nexport * from './util/color/ColorSpaceRGB';\nexport * from './util/date/DateConstants';\nexport * from './util/date/DateFormat';\nexport * from './util/date/DateFunctions';\nexport * from './util/Format';"],"sourceRoot":""}