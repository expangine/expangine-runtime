{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","isCompatible","other","exact","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","THIS","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","cache","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","expressions","AndExpression","e","expectedType","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","PathExpression","fromPartial","pathData","isPath","getPathType","thisType","INVALID_EXPRESSION","EMPTY_PATH","isWritable","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","has","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","arg","param","paramName","MISSING_FUNCTION","named","nameOrArgs","argName","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","READONLY","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","some","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","paramType","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getEscaped","escaped","startEscape","endEscape","possibleEscapeIndex","endOffset","content","getFormatter","handled","finalFormatter","formatted","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\nexport type RecordKey = string | number | symbol;\r\n\r\nexport type MapInput<K = any, V = any> = \r\n  Map<K, V> | \r\n  Array<[K, V]> | \r\n  (K extends string | number | symbol ? Record<K, V> : never);\r\n\r\nexport function isNumber(value: any): value is number \r\n{\r\n  return typeof value === 'number' && isFinite(value);\r\n}\r\n\r\nexport function isString(value: any): value is string \r\n{\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function isArray<T = any>(value: any): value is T[] \r\n{\r\n  return Array.isArray(value);\r\n}\r\n\r\nexport function isDate(value: any): value is Date\r\n{\r\n  return value instanceof Date;\r\n}\r\n\r\nexport function isMap<K, V>(value: any): value is Map<K, V>\r\n{\r\n  return value instanceof Map;\r\n}\r\n\r\nexport function isSet<V>(value: any): value is Set<V>\r\n{\r\n  return value instanceof Set;\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean \r\n{\r\n  return typeof value === 'boolean';\r\n}\r\n\r\nexport function isFunction(value: any): value is ((...args: any[]) => any) \r\n{\r\n  return typeof value === 'function';\r\n}\r\n\r\nexport function isObject(value: any): value is any \r\n{\r\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\r\n}\r\n\r\nexport function isUndefined(value: any): value is undefined \r\n{\r\n  return typeof value === 'undefined';\r\n}\r\n\r\nexport function isSameClass(a: any, b: any): boolean\r\n{\r\n  return a.constructor === b.constructor;\r\n}\r\n\r\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\r\n{\r\n  return Math.abs(x - Math.round(x)) <= epsilon;\r\n}\r\n\r\nexport function isEmpty(value: any): boolean \r\n{\r\n  if (isArray(value)) \r\n  {\r\n    return value.length === 0;\r\n  }\r\n  else if (isObject(value)) \r\n  {\r\n    for (const _prop in value) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return value === null || value === undefined;\r\n}\r\n\r\nexport function now(): number\r\n{\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function clamp(x: number, min: number, max: number): number\r\n{\r\n  return x < min ? min : x > max ? max : x;\r\n}\r\n\r\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\r\n{\r\n  if (isArray(input))\r\n  {\r\n    return new Map(input);\r\n  }\r\n  else if (isMap(input))\r\n  {\r\n    return input;\r\n  }\r\n  else if (isObject(input))\r\n  {\r\n    return new Map(objectToArray(input, (v, k) => [k, v]));\r\n  }\r\n  \r\n  return new Map();\r\n}\r\n\r\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\r\n{\r\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\r\n}\r\n\r\nexport function arraySync<V, W = V>(\r\n  target: V[],\r\n  source: W[],\r\n  matches: (target: V, source: W) => boolean,\r\n  add: (target: V[], value: W) => void,\r\n  remove: (target: V[], index: number, value: V) => void,\r\n  update: (target: V[], index: number, value: V, newValue: W) => void,\r\n): V[]\r\n{\r\n  const taken = source.map(() => false);\r\n\r\n  for (let i = target.length - 1; i >= 0; i--)\r\n  {\r\n    const targetValue = target[i];\r\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\r\n\r\n    if (matchIndex !== -1)\r\n    {\r\n      update(target, i, targetValue, source[matchIndex]);\r\n\r\n      taken[matchIndex] = true;\r\n    }\r\n    else\r\n    {\r\n      remove(target, i, targetValue);\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < source.length; i++)\r\n  {\r\n    if (!taken[i])\r\n    {\r\n      add(target, source[i]);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectSync<V, K extends RecordKey = string>(\r\n  target: Record<K, V>,\r\n  source: Record<K, V>,\r\n  add: (target: Record<K, V>, key: K, value: V) => void,\r\n  remove: (target: Record<K, V>, key: K, value: V) => void,\r\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\r\n): Record<K, V> \r\n{\r\n for (const key in target)\r\n {\r\n   if (!(key in source))\r\n   {\r\n     remove(target, key, target[key]);\r\n   }\r\n }\r\n\r\n for (const key in source)\r\n {\r\n   if (key in target)\r\n   {\r\n     update(target, key, target[key], source[key]);\r\n   }\r\n   else\r\n   {\r\n     add(target, key, source[key]);\r\n   }\r\n }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\r\n  map: Record<K, V>, \r\n  getValue: (value: V, key: K) => R, \r\n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out[getKey(key, value)] = getValue(value, key), out)\r\n  , Object.create(null));\r\n}\r\n\r\nexport function objectEach<V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\r\n{\r\n  return objectReduce(map, (value, key) => \r\n    onEach(value, key, map)\r\n  , undefined);\r\n}\r\n\r\nexport function objectValues<V, M = V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out.push(transform(value, key)), out)\r\n  , []);\r\n}\r\n\r\nexport function objectReduce<R, V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  reduce: (value: V, key: K, reduced: R) => R, \r\n  initial: R): R\r\n{\r\n  for (const key in map)\r\n  {\r\n    initial = reduce(map[key], key, initial);\r\n  }\r\n\r\n  return initial;\r\n}\r\n\r\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\r\n{\r\n  const out = Object.create(null) as Record<P, V>;\r\n\r\n  for (let i = 0; i < props.length; i++)\r\n  {\r\n    const prop = props[i];\r\n\r\n    out[prop] = getValue(prop, i);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\r\n{\r\n  const arr: T[] = [];\r\n\r\n  for (const key in map)\r\n  {\r\n    arr.push(getItem(map[key], key));\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\n\r\nexport function coalesce<T>(x?: T, y?: T): T\r\n{\r\n  return x === undefined ? y : x;\r\n}\r\n\r\nexport function padNumber(x: number, length: number, first: number = length)\r\n{\r\n  return pad(x + '', length, '0', true).substring( 0, first );\r\n}\r\n\r\nexport function pad(x: string, length: number, padding: string, before: boolean): string\r\n{\r\n  while (x.length < length)\r\n  {\r\n    before ? x = padding + x : x = x + padding;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\nexport function toString(x: any)\r\n{\r\n  return isArray(x) || isObject(x)\r\n    ? JSON.stringify(x)\r\n    : x + '';\r\n}","import { isFunction } from './fns';\r\n\r\n\r\nexport type TraverseStep = string | number;\r\n\r\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\r\n\r\nexport type TraverseRemove = () => void;\r\n\r\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\r\n\r\nexport type TraverseReplace<T> = (replaceWith: T) => void;\r\n\r\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\r\n\r\nexport interface Traversable<T>\r\n{\r\n  traverse<R>(traverse: Traverser<T, R>): R;\r\n}\r\n\r\nexport interface TraverseResult<T>\r\n{\r\n  value: T;\r\n  stack: T[];\r\n  path: TraverseStep[];\r\n}\r\n\r\nexport class Traverser<T, R = any>\r\n{\r\n\r\n  public static isTraversable<T>(x: any): x is Traversable<T>\r\n  {\r\n    return x && isFunction(x.traverse);\r\n  }\r\n\r\n  public callback: TraverseCallback<T, R>;\r\n  public stack: T[];\r\n  public path: TraverseStep[];\r\n  public result: R;\r\n  public stopped: boolean;\r\n  public remove: TraverseRemove = TraverseRemoveNoop;\r\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\r\n\r\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\r\n  {\r\n    this.callback = callback;\r\n    this.stack = [];\r\n    this.path = [];\r\n    this.stopped = false;\r\n    this.result = initialResult;\r\n  }\r\n\r\n  public enter(value: T, getInner?: () => any): R\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this.result;\r\n    }\r\n    \r\n    this.callback(value, this.stack, this.path, this);\r\n\r\n    this.remove = TraverseRemoveNoop;\r\n    this.replace = TraverseReplaceNoop;\r\n\r\n    if (getInner && !this.stopped)\r\n    {\r\n      this.stack.push(value);\r\n\r\n      getInner();\r\n\r\n      this.stack.pop();\r\n    }\r\n\r\n    return this.result;\r\n  }\r\n\r\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this;\r\n    }\r\n\r\n    this.path.push(step);\r\n\r\n    this.remove = remove;\r\n    this.replace = replace;\r\n\r\n    if (Traverser.isTraversable<T>(getStep))\r\n    {\r\n      getStep.traverse(this);\r\n    }\r\n    else\r\n    {\r\n      getStep();\r\n    }\r\n\r\n    this.path.pop();\r\n\r\n    return this;\r\n  }\r\n\r\n  public modify(getResult: (result: R) => R | undefined): this\r\n  {\r\n    const newResult = getResult(this.result);\r\n\r\n    if (newResult !== undefined)\r\n    {\r\n      this.result = newResult;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public stop(result?: R): this\r\n  {\r\n    this.result = result;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getResult(): R\r\n  {\r\n    return this.result;\r\n  }\r\n\r\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\r\n  {\r\n    const remove = this.canRemove();\r\n    const replace = this.canReplace();\r\n\r\n    if (!remove && !replace) {\r\n      return false;\r\n    }\r\n\r\n    remove\r\n      ? this.remove()\r\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\r\n\r\n    return true;\r\n  }\r\n\r\n  public canRemove(): boolean\r\n  {\r\n    return this.remove !== TraverseRemoveNoop;\r\n  }\r\n\r\n  public canReplace(): boolean\r\n  {\r\n    return this.replace !== TraverseReplaceNoop;\r\n  }\r\n\r\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\r\n  {\r\n    return this.filter((value: T) => value.constructor === construct, initialResult);\r\n  }\r\n\r\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\r\n  {\r\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\r\n      if (pass(value, stack, path)) {\r\n        this.callback(value, stack, path, traverser);\r\n      }\r\n    };\r\n\r\n    return new Traverser<T, R>(callback, initialResult);\r\n  }\r\n\r\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\r\n  {\r\n    const list: TraverseResult<T>[] = [];\r\n\r\n    return new Traverser((value, stack, path) => {\r\n      list.push({\r\n        value,\r\n        stack: stack.slice(),\r\n        path: path.slice(),\r\n      });\r\n    }, list);\r\n  }\r\n\r\n  public static count<T>(): Traverser<T, number>\r\n  {\r\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\r\n  }\r\n\r\n}","import { Expression } from './Expression';\r\nimport { Type } from './Type';\r\n\r\n\r\n\r\nexport enum ValidationSeverity \r\n{\r\n  LOW = 1,\r\n  MEDIUM = 2,\r\n  HIGH = 3,\r\n}\r\n\r\nexport enum ValidationType \r\n{\r\n  UNSAFE_OPERATION = 1,       // LOW\r\n  POSSIBLY_NULL = 2,          // MEDIUM\r\n  INCOMPATIBLE_TYPES = 3,     // HIGH\r\n  INVALID_EXPRESSION = 4,     // HIGH\r\n  MISSING_FUNCTION = 5,       // HiGH\r\n  MISSING_EXPRESSION = 6,     // HiGH\r\n  MISSING_OPERATION = 7,      // HiGH\r\n  MISSING_TYPE_NAME = 8,      // HIGH\r\n  MISSING_TYPE = 9,           // HIGH\r\n  MISSING_RELATION_NAME = 10, // HIGH\r\n  MISSING_RELATION = 11,      // HIGH\r\n  MISSING_DATA_NAME = 12,     // HIGH\r\n  MISSING_DATA = 13,          // HIGH\r\n  OUTSIDE_PATH = 14,          // HIGH\r\n  READONLY = 15,              // HIGH\r\n  EMPTY_PATH = 16,            // HIGH\r\n  INVALID_THIS = 17,          // HIGH\r\n  MISSING_METHOD = 18,        // HIGH\r\n}\r\n\r\nexport interface Validation \r\n{\r\n  type: ValidationType;\r\n  severity: ValidationSeverity;\r\n  context: Type;\r\n  subject?: Expression;\r\n  parent?: Expression;\r\n  expected?: Type;\r\n  actual?: Type;\r\n}\r\n\r\nexport type ValidationHandler = (validation: Validation) => void;","\r\nimport { isSameClass } from './fns';\r\nimport { Operations, OperationGeneric } from './Operation';\r\nimport { Expression } from './Expression';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\r\nimport { Computeds } from './Computed';\r\nimport { ReferenceData } from './ReferenceData';\r\n\r\n\r\n\r\nexport type TypeInput = TypeClass | Type;\r\n\r\nexport type TypeInputMap = Record<string, TypeInput>;\r\n\r\nexport type TypeMap = Record<string, Type>;\r\n\r\nexport interface TypeSub \r\n{ \r\n  key: string | number | Type;\r\n  value: Type;\r\n}\r\n\r\nexport type TypeResolved<T> = T extends (null | undefined)\r\n  ? undefined\r\n  : T extends TypeInput\r\n    ? Type\r\n    : T extends TypeInput[]\r\n      ? Type[]\r\n      : T extends TypeInputMap\r\n        ? Record<keyof T, Type>\r\n        : {\r\n          [K in keyof T]: TypeResolved<T[K]>\r\n        };\r\n\r\nexport interface TypeProvider \r\n{\r\n  getType(data: any, otherwise?: Type): Type;\r\n  getExpression(data: any): Expression;\r\n  getData(name: string): ReferenceData | null;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface TypeDescribeProvider\r\n{\r\n  describe(data: any): Type;\r\n  merge(type: Type, data: any): Type;\r\n}\r\n\r\nexport interface TypeCompatibleOptions\r\n{\r\n  strict?: boolean;\r\n  value?: boolean;\r\n  exact?: boolean;\r\n}\r\n\r\nexport interface TypeParser \r\n{\r\n  (data: any, types: TypeProvider): Type;\r\n}\r\n\r\nexport interface TypeClass<T extends Type<O> = any, O = any> \r\n{\r\n  id: string;\r\n  operations: Operations;\r\n  computeds: Computeds;\r\n  baseType: T;\r\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\r\n  encode(this: TypeClass<T>, type: T): any;\r\n  describePriority: number;\r\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null;\r\n  register(this: TypeClass<T>): void;\r\n  registered: boolean;\r\n  new(options: O, ...args: any[]): T;\r\n}\r\n\r\nexport abstract class Type<O = any> implements Traversable<Type>\r\n{\r\n\r\n  public options: O;\r\n  public parent: Type = null;\r\n\r\n  public constructor(options: O) \r\n  {\r\n    this.options = options;\r\n  }\r\n\r\n  public abstract getOperations(): Record<string, OperationGeneric>;\r\n\r\n  public abstract getId(): string;\r\n\r\n  public abstract merge(type: Type<O>): void;\r\n\r\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\r\n\r\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\r\n\r\n  public abstract getExactType(value: any): Type<O>;\r\n\r\n  public abstract getSimplifiedType(): Type;\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\r\n\r\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\r\n  {\r\n    if (other === this)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.isDeepCompatible(other, options);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public acceptsType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true });\r\n  }\r\n\r\n  public acceptsData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true, value: true });\r\n  }\r\n\r\n  public exactType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true });\r\n  }\r\n\r\n  public exactData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\r\n  }\r\n\r\n  public abstract isOptional(): boolean;\r\n\r\n  public abstract isSimple(): boolean;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\r\n\r\n  public abstract setParent(parent?: Type): void;\r\n\r\n  public abstract removeDescribedRestrictions(): void;\r\n\r\n  public abstract getCreateExpression(): Expression;\r\n\r\n  public abstract getValidateExpression(): Expression;\r\n\r\n  public abstract getCompareExpression(): Expression;\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    return newValue;\r\n  }\r\n\r\n  public getValueChangeAt(newValue: Expression): Expression\r\n  {\r\n    let node: Type = this.parent;\r\n    const path = this.getPath();\r\n\r\n    while(node)\r\n    {\r\n      const step = path.pop();\r\n\r\n      newValue = node.getValueChangeExpression(newValue, step, step);\r\n      node = node.parent;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getTypeFromPath(path: TraverseStep[]): Type | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const type = this.getTypeFromStep(path[0]);\r\n\r\n    if (!type)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return type.getTypeFromPath(path.slice(1));\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootType(): Type\r\n  {\r\n    let node: Type = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public abstract isValid(value: any): boolean;\r\n\r\n  public abstract normalize(value: any): any;\r\n\r\n  public abstract newInstance(): Type<O>;\r\n\r\n  public abstract clone(): Type<O>;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract create(): any;\r\n\r\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\r\n\r\n  public abstract fromJson(json: any): any;\r\n\r\n  public abstract toJson(value: any): any;\r\n  \r\n}","import { Type, TypeMap } from './Type';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\r\n\r\n\r\nexport interface ExpressionProvider \r\n{ \r\n  getExpression(value: any): Expression;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface ExpressionClass<T extends Expression = any> \r\n{\r\n  id: string;\r\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\r\n  encode(this: ExpressionClass<T>, expr: T): any;\r\n  new(...args: any[]): T;\r\n}\r\n\r\nexport type ExpressionValue = any | Expression;\r\n\r\nexport type ExpressionMap = Record<string, Expression>;\r\n\r\nexport abstract class Expression implements Traversable<Expression>\r\n{\r\n\r\n  public static THIS = 'this';\r\n\r\n  public static INSTANCE = 'instance';\r\n\r\n  public parent: Expression = null;\r\n  \r\n  public abstract getId(): string;\r\n\r\n  public abstract getScope(): TypeMap | null;\r\n\r\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract clone(): Expression;\r\n\r\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\r\n\r\n  public abstract setParent(parent?: Expression): void;\r\n\r\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\r\n  \r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const step = this.getExpressionFromStep(path);\r\n\r\n    if (!step || !step[1])\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const [steps, expr] = step;\r\n\r\n    return expr.getExpressionFromPath(path.slice(steps));\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootExpression(): Expression\r\n  {\r\n    let node: Expression = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public validations(def: DefinitionProvider, context: Type): Validation[]\r\n  {\r\n    const validations: Validation[] = [];\r\n\r\n    this.validate(def, context, x => validations.push(x));\r\n\r\n    return validations;\r\n  }\r\n\r\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\r\n  {\r\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\r\n    const actualComplete = subject ? subject.getType(def, context) : null;\r\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\r\n    let test = actual;\r\n\r\n    if (!actual)\r\n    {\r\n      if (expected && !expected.isOptional())\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n        });\r\n      }\r\n    }\r\n    else\r\n    {\r\n      if (actual.isOptional() && !expected.isOptional())\r\n      {\r\n        test = test.getRequired();\r\n      }\r\n\r\n      if (!expected.acceptsType(test))\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: expected.isCompatible(actual)\r\n            ? ValidationSeverity.MEDIUM\r\n            : ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n      else if (test !== actual)\r\n      {\r\n        handler({\r\n          type: ValidationType.POSSIBLY_NULL,\r\n          severity: ValidationSeverity.MEDIUM,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (subject)\r\n    {\r\n      subject.validate(def, context, handler);\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeProvider } from './Type';\r\nimport { isFunction } from './fns';\r\nimport { Entity } from './Entity';\r\nimport { Relation, EntityRelation } from './Relation';\r\nimport { NamedMap } from './maps/NamedMap';\r\n\r\n\r\nexport interface OperationFlags\r\n{\r\n  complexity: number;\r\n  mutates: string[];\r\n}\r\n\r\nexport interface Operation<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never,\r\n  H extends (P | O) = never,\r\n  R extends (P | O) = never\r\n> extends OperationFlags {\r\n  id: string;\r\n  params: P[];\r\n  optional: O[];\r\n  scope: S[];\r\n  scopeDefaults: Record<S, string>;\r\n  hasScope: H[];\r\n  resultDependency: R[];\r\n}\r\n\r\nexport type OperationResolved<\r\n  P extends string, \r\n  O extends string, \r\n  S extends string, \r\n  H extends (P | O), \r\n  R extends (P | O)\r\n> = Operation<\r\n  string extends P ? never : P, \r\n  string extends O ? never : O, \r\n  string extends S ? never : S, \r\n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \r\n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\r\n>;\r\n\r\nexport interface OperationTypeProvider extends TypeProvider\r\n{\r\n  getEntity(name: string): Entity | null;\r\n  getEntities(): NamedMap<Entity>;\r\n  getRelation(name: string): Relation | null;\r\n  getRelations(entityName: string): EntityRelation[];\r\n}\r\n\r\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\r\n\r\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\r\n\r\nexport interface OperationTypes<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never\r\n> {\r\n  returnType: OperationTypeInput<P | O>,\r\n  params: Record<P, OperationTypeInput<P | O>>;\r\n  optional: Record<O, OperationTypeInput<P | O>>;\r\n  scope: Record<S, OperationTypeInput<P | O>>;\r\n  rawTypes?: boolean;\r\n}\r\n\r\nexport type OperationGeneric = Operation<any, any, any, any, any>;\r\n\r\nexport interface OperationPair<\r\n  P extends string = any, \r\n  O extends string = any,\r\n  S extends string = any\r\n> {\r\n  op: Operation<P, O, S, any, any>;\r\n  types: OperationTypes<P, O, S>;\r\n}\r\n\r\nexport interface OperationMapping\r\n{\r\n  from: Operation<any, any, any, any, any>;\r\n  fromTypes: OperationTypes<any, any, any>;\r\n  to: Operation<any, any, any, any, any>;\r\n  toTypes: OperationTypes<any, any, any>;\r\n  mapping: Record<string, string>;\r\n  unmapped: string[];\r\n}\r\n\r\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\r\n{\r\n  return !('baseType' in x) && isFunction(x);\r\n}\r\n\r\nexport class Operations\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, OperationGeneric>;\r\n  public types: Record<string, OperationTypes<any, any, any>>;\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.types = Object.create(null);\r\n  }\r\n\r\n  public get (id: string): OperationGeneric\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n  public getTypes (id: string): OperationTypes<any, any, any>\r\n  {\r\n    return this.types[id] || this.types[this.prefix + id];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\r\n    localId: string, \r\n    flags: Partial<OperationFlags> = {},\r\n    params: P[] = [], \r\n    optional: O[] = [], \r\n    scope: S[] = [],\r\n    hasScope: H[] = [],\r\n    resultDependency: R[] = []\r\n  ) : OperationResolved<P, O, S, H, R> \r\n  {\r\n    const id = this.prefix + localId;\r\n    const mutates = flags.mutates || [];\r\n    const complexity = flags.complexity || 0;\r\n    const scopeDefaults: Record<S, string> = Object.create(null);\r\n    scope.forEach((s) => scopeDefaults[s] = s);\r\n\r\n    const op = { \r\n      id, \r\n      mutates, \r\n      complexity, \r\n      params,\r\n      optional,\r\n      scope,\r\n      scopeDefaults,\r\n      hasScope,\r\n      resultDependency\r\n    };\r\n    \r\n    this.map[id] = op;\r\n\r\n    return op as unknown as OperationResolved<P, O, S, H, R>;\r\n  }\r\n\r\n  public setTypes(\r\n    op: Operation<never, never, never, never, never>,\r\n    returnType: OperationTypeInput<never>\r\n  ) : OperationTypes<never, never, never>\r\n  public setTypes<P extends string>(\r\n    op: Operation<P, never, never, any, any>,\r\n    returnType: OperationTypeInput<P>,\r\n    params: Record<P, OperationTypeInput<P>>\r\n  ) : OperationTypes<P, never, never>\r\n  public setTypes<P extends string, O extends string>(\r\n    op: Operation<P, O, never, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, never>\r\n  public setTypes<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>,\r\n    scope: Record<S, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, S>\r\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\r\n    op: Operation<P, O, S, any, any>, \r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\r\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\r\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\r\n  ): OperationTypes<P, O, S> {\r\n\r\n    const types = { returnType, params, optional, scope };\r\n\r\n    this.types[op.id] = types;\r\n\r\n    return types;\r\n  }\r\n\r\n}","\r\nimport { Operation } from './Operation';\r\n\r\n\r\n\r\nexport interface Computed \r\n{\r\n  id: string;\r\n  op: string;\r\n  value: string;\r\n  params: Record<string, any>;\r\n  writeable?: {\r\n    op: string;\r\n    value: string;\r\n    newValue: string;\r\n    params: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport class Computeds\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, Computed>;\r\n  public list: Computed[];\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.list = [];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp: Computed = {\r\n      id,\r\n      op: op.id,\r\n      value: value || op.params[0],\r\n      params: params || {},\r\n    };\r\n\r\n    this.map[id] = comp;\r\n    this.list.push(comp);\r\n\r\n    return comp;\r\n  }\r\n\r\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp = this.map[id];\r\n\r\n    comp.writeable = { \r\n      op: op.id,\r\n      value,\r\n      newValue,\r\n      params: params || {},\r\n    };\r\n\r\n    return comp;\r\n  }\r\n\r\n  public get (id: string): Computed\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n}","\r\nexport const ID = {\r\n  Entity: '@',\r\n  Any: 'any',\r\n  Boolean: 'bool',\r\n  Color: 'color',\r\n  Date: 'date',\r\n  Enum: 'enum',\r\n  Function: 'func',\r\n  List: 'list',\r\n  Many: 'many',\r\n  Not: 'not',\r\n  Map: 'map',\r\n  Null: 'null',\r\n  Number: 'num',\r\n  Object: 'obj',\r\n  Optional: '?',\r\n  Reference: 'ref',\r\n  Relation: 'rel',\r\n  Set: 'set',\r\n  Text: 'text',\r\n  Tuple: 'tuple',\r\n  Delimiter: ':',\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\r\n\r\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\r\n\r\nconst ops = BooleanOperations;\r\n\r\nexport const BooleanOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  and: ops.set('&', {}, ['a', 'b']),\r\n\r\n  or: ops.set('|', {}, ['a', 'b']),\r\n\r\n  xor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  not: ops.set('!', {}, ['a']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isTrue: ops.set('t?', {}, ['value']),\r\n\r\n  isFalse: ops.set('f?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\n\r\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\r\n\r\nexport interface DataTypeComparator\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\r\n}\r\n\r\nexport interface DataTypeEquality\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\r\n}\r\n\r\nexport interface DataTypeCopier\r\n{\r\n  priority: number;\r\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\r\n}\r\n\r\nexport interface DataTypeJson<T = any>\r\n{\r\n  priority: number;\r\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\r\n  fromJson(json: any, fromJson: (json: any) => any): T;\r\n}\r\n\r\nexport interface DataTypeAccessor<T = any>\r\n{\r\n  priority: number;\r\n  isValid(value: any, step: any): boolean;\r\n  set(value: T, step: any, stepValue: any): void;\r\n  get(value: T, step: any): any;\r\n}\r\n\r\nexport class DataTypeRegistry\r\n{\r\n\r\n  public static TYPES: DataTypeRaw[] = [\r\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\r\n  ];\r\n\r\n  private compareTypes: Record<DataTypeRaw, number>;\r\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\r\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\r\n  private copyList: DataTypeCopier[];\r\n  private jsonList: DataTypeJson[];\r\n  private accessorList: DataTypeAccessor[];\r\n\r\n  public objectSet: <O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]) => void \r\n    = (obj, prop, value) => obj[prop] = value;\r\n  public objectRemove: <O extends object, K extends keyof O>(obj: O, prop: K) => void\r\n    = (obj, prop) => delete obj[prop];\r\n  public arrayAdd: <T>(arr: T[], item: T) => void\r\n    = (arr, item) => arr.push(item);\r\n  public arrayRemove: <T>(arr: T[], index: number) => T\r\n    = (arr, index) => arr.splice(index, 1)[0];\r\n  public arraySet: <T>(arr: T[], index: number, item: T) => T\r\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\r\n\r\n  public constructor()\r\n  {\r\n    this.compareTypes = this.createTypeMap((_, index) => index);\r\n    this.compareMap = this.createTypeMap(() => []);\r\n    this.equalsMap = this.createTypeMap(() => []);\r\n    this.copyList = [];\r\n    this.jsonList = [];\r\n    this.accessorList = [];\r\n  }\r\n\r\n  public compare(a: any, b: any): number\r\n  {\r\n    const comparator = (x: any, y: any): number =>\r\n    {\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\r\n      }\r\n\r\n      const compares = this.compareMap[xtype];\r\n\r\n      for (const compare of compares)\r\n      {\r\n        const result = compare.compare(x, y, comparator);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return x === y ? 0 : x < y ? -1 : 1;\r\n    };\r\n\r\n    return comparator(a, b);\r\n  }\r\n\r\n  public getCompare(less: number, more: number): number\r\n  {\r\n    return less === 0 && more === 0\r\n      ? 0\r\n      : less < more ? 1 : -1;\r\n  }\r\n\r\n  public addCompare(compare: DataTypeComparator): this\r\n  {\r\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\r\n  }\r\n\r\n  public equals(a: any, b: any): boolean\r\n  {\r\n    const equalitor = (x: any, y: any): boolean =>\r\n    {\r\n      if (x === y)\r\n      {\r\n        return true;\r\n      }\r\n\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const equals = this.equalsMap[xtype];\r\n\r\n      for (const equality of equals)\r\n      {\r\n        const result = equality.equals(x, y, equalitor);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    return equalitor(a, b);\r\n  }\r\n\r\n  public addEquals(equals: DataTypeEquality): this\r\n  {\r\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\r\n  }\r\n\r\n  public copy<T>(x: T, containsCycles: boolean = false): T\r\n  {\r\n    if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof x === 'object')\r\n    {\r\n      const copiers = this.copyList;\r\n\r\n      if (containsCycles)\r\n      {\r\n        const copied = new Map();\r\n  \r\n        const setObjectCopy = (original: any, copy: any) => \r\n        {\r\n          copied.set(original, copy);\r\n        };\r\n  \r\n        const copyObject = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            const existing = copied.get(a);\r\n  \r\n            if (existing !== undefined)\r\n            {\r\n              return existing;\r\n            }\r\n  \r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyObject(x);\r\n      }\r\n      else\r\n      {\r\n        const setObjectCopy = (original: any, copy: any) => {};\r\n\r\n        const copyValue = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyValue(x);\r\n      }\r\n\r\n      \r\n    }\r\n  \r\n    return x;\r\n  }\r\n\r\n  public addCopier(copier: DataTypeCopier): this\r\n  {\r\n    return this.addToPriorityList(this.copyList, copier);\r\n  }\r\n\r\n  public toJson<T>(value: T): any\r\n  {\r\n    if (!value) return value; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof value === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: T): any =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.toJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n\r\n        return x;\r\n      };\r\n      \r\n      return jsonObject(value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public fromJson<T>(json: any): T\r\n  {\r\n    if (!json) return json; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof json === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: any): T =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.fromJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n        \r\n        return x;\r\n      };\r\n\r\n      return jsonObject(json);\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public addJson<T>(json: DataTypeJson<T>): this\r\n  {\r\n    return this.addToPriorityList(this.jsonList, json);\r\n  }\r\n\r\n  public get(value: any, step: any): any\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        return access.get(value, step);\r\n      }\r\n    }\r\n  }\r\n\r\n  public set(value: any, step: any, stepValue: any): boolean\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        access.set(value, step, stepValue);\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\r\n  {\r\n    return this.addToPriorityList(this.accessorList, accessor);\r\n  }\r\n\r\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\r\n  {\r\n    const map: Record<DataTypeRaw, V> = Object.create(null);\r\n    \r\n    DataTypeRegistry.TYPES.forEach((type, index) => \r\n    {\r\n      map[type] = create(type, index);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\r\n  {\r\n    list.push(value);\r\n    list.sort((a, b) => b.priority - a.priority);\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport const DataTypes = new DataTypeRegistry();","\r\nimport { isBoolean, isEmpty } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_TRUE_PROBABILITY = 0.5;\r\n\r\nexport interface BooleanOptions \r\n{\r\n  true?: Record<string, true>;\r\n  false?: Record<string, true>;\r\n}\r\n\r\nexport class BooleanType extends Type<BooleanOptions> \r\n{\r\n\r\n  public static id = ID.Boolean;\r\n\r\n  public static operations = BooleanOperations;\r\n\r\n  public static computeds = BooleanComputeds;\r\n\r\n  public static baseType = new BooleanType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): BooleanType \r\n  {\r\n    return new BooleanType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: BooleanType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return isBoolean(data) ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'boolean';\r\n\r\n    DataTypes.addCompare({\r\n      priority, \r\n      type,\r\n      compare: (a, b) => {\r\n        return (a ? 1 : 0) - (b ? 1 : 0);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => a === b,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return BooleanType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return BooleanType.operations.map;\r\n  }\r\n\r\n  public merge(type: BooleanType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (options.exact || options.strict)\r\n    {\r\n      return other instanceof BooleanType;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (isBoolean(value))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    const asKey = value + '';\r\n\r\n    if (this.options.true && this.options.true[asKey])\r\n    {\r\n      return true;\r\n    }\r\n    \r\n    if (this.options.false && this.options.false[asKey])\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isBoolean(value))\r\n    {\r\n      const asKey = value + '';\r\n\r\n      if (this.options.true && this.options.true[asKey])\r\n      {\r\n        return true;\r\n      }\r\n      \r\n      if (this.options.false && this.options.false[asKey])\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): BooleanType\r\n  {\r\n    return new BooleanType({});\r\n  }\r\n\r\n  public clone(): BooleanType\r\n  {\r\n    return new BooleanType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return BooleanType.encode(this);\r\n  }\r\n\r\n  public create(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\r\n  }\r\n\r\n  public fromJson(json: boolean): boolean\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: boolean): boolean\r\n  {\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPR = 1;\r\n\r\nexport class NotExpression extends Expression \r\n{\r\n\r\n  public static STEP_NOT = 'not';\r\n\r\n  public static id = 'not';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \r\n  {\r\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\r\n    \r\n    return new NotExpression(expression);\r\n  }\r\n\r\n  public static encode(expr: NotExpression): any \r\n  {\r\n    const expression = expr.expression.encode();\r\n\r\n    return [this.id, expression];\r\n  }\r\n\r\n  public expression: Expression;\r\n\r\n  public constructor(expression: Expression) \r\n  {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new NotExpression(this.expression.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === NotExpression.STEP_NOT\r\n      ? [1, this.expression]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expression.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class AndExpression extends Expression \r\n{\r\n\r\n  public static id = 'and';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new AndExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: AndExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AndExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AndExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new AndExpression(this.expressions.map(e => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n}","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\r\n\r\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\r\n\r\nconst ops = AnyOperations;\r\nconst ANY_COMPLEXITY = {\r\n  complexity: 2\r\n};\r\n\r\nexport const AnyOps = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\r\n\r\n  isDefined: ops.set('isDefined', {}, ['value']),\r\n\r\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\r\n\r\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\r\n\r\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport class NullType extends Type<null> \r\n{\r\n\r\n  public static id = ID.Null;\r\n\r\n  public static operations = new Operations(ID.Null + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\r\n\r\n  public static baseType = new NullType(null);\r\n\r\n  public static decode(data: any[]): NullType \r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public static encode(type: NullType): any \r\n  {\r\n    return this.id;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return data === null ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NullType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NullType.operations.map;\r\n  }\r\n\r\n  public merge(type: NullType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof NullType;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.null();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.isEqual, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.null(),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null || value === undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public clone(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NullType.encode(this);\r\n  }\r\n\r\n  public create(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public toJson(value: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nexport class NoExpression extends Expression \r\n{\r\n\r\n  public static id = 'noop';\r\n\r\n  public static readonly instance = new NoExpression();\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \r\n  {\r\n    return this.instance\r\n  }\r\n\r\n  public static encode(expr: NoExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isObject, isString } from '../fns';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nexport class AnyType extends Type \r\n{\r\n\r\n  public static id = ID.Any;\r\n\r\n  public static operations = AnyOperations;\r\n\r\n  public static computeds = AnyComputeds;\r\n\r\n  public static baseType = new AnyType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): AnyType \r\n  {\r\n    return this.baseType;\r\n  }\r\n\r\n  public static encode(type: AnyType): any \r\n  {\r\n    return this.id\r\n  }\r\n\r\n  public static describePriority: number = 8;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (isObject(data) && isString(data.$any))\r\n    {\r\n      return new AnyType({});\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AnyType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return AnyType.operations.map;\r\n  }\r\n\r\n  public merge(type: AnyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isCompatible(other: Type): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.string();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.true();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public clone(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AnyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return DataTypes.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return DataTypes.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { isString } from '../fns';\r\nimport { AnyType } from '../types/Any';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_DEFINE = 1;\r\nconst INDEX_BODY = 2;\r\n\r\nexport class DefineExpression extends Expression \r\n{\r\n\r\n  public static STEP_DEFINE = 'define';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static id = 'def';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \r\n  {\r\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    \r\n    return new DefineExpression(define, body);\r\n  }\r\n\r\n  public static encode(expr: DefineExpression): any \r\n  {\r\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\r\n\r\n    return [this.id, define, expr.body.encode()];\r\n  }\r\n\r\n  public define: [string, Expression][];\r\n  public body: Expression;\r\n\r\n  public constructor(define: [string, Expression][], body: Expression) \r\n  {\r\n    super();\r\n    this.define = define;\r\n    this.body = body;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DefineExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    const scope = {};\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\r\n\r\n    return scope;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DefineExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { scope, context } = def.getContextWithScope(original);\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\r\n\r\n    return this.body.getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\r\n        this.define.forEach(([name, defined], index) => \r\n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\r\n        )\r\n      );\r\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DefineExpression.STEP_BODY\r\n      ? [1, this.body]\r\n      : steps[0] === DefineExpression.STEP_DEFINE\r\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.define.forEach(([name, defined]) => defined.setParent(this));\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const defineContext = def.getContextWithScope(context);\r\n\r\n    this.define.forEach(([name, defined]) => \r\n    {\r\n      defined.validate(def, defineContext.context, handler);\r\n\r\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\r\n    });\r\n    \r\n    this.body.validate(def, defineContext.context, handler);\r\n  }\r\n\r\n  public with(name: string, value: ExpressionValue): DefineExpression\r\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\r\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\r\n  {\r\n    const append = isString(nameOrDefines)\r\n      ? { [nameOrDefines]: value }\r\n      : nameOrDefines;\r\n\r\n    for (const name in append)\r\n    {\r\n      const expr = Exprs.parse(append[name]);\r\n      const existing = this.define.find(([varName]) => varName === name);\r\n\r\n      if (existing) {\r\n        existing[1] = expr;\r\n      } else {\r\n        this.define.push([name, expr]);\r\n      }\r\n\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): DefineExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class DoExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'do';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new DoExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: DoExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DoExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === DoExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public do(body: Expression, condition?: Expression): DoExpression\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    if (condition)\r\n    {\r\n      this.condition = condition;\r\n      this.condition.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public while(condition: Expression): DoExpression\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_CHAIN = 1;\r\n\r\nexport class ChainExpression extends Expression \r\n{\r\n\r\n  public static id = 'chain';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \r\n  {\r\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\r\n\r\n    return new ChainExpression(chain);\r\n  }\r\n\r\n  public static encode(expr: ChainExpression): any \r\n  {\r\n    const chain = expr.chain.map(e => e.encode());\r\n\r\n    return [this.id, chain];\r\n  }\r\n\r\n  public chain: Expression[];\r\n\r\n  public constructor(chain: Expression[]) \r\n  {\r\n    super();\r\n    this.chain = chain;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ChainExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ChainExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ChainExpression(this.chain.map(c => c.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.chain[this.chain.length - 1].getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.chain.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.chain.length\r\n      ? [1, this.chain[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.chain.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.chain.forEach(subject => \r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n  public add(exprs: Expression | Expression[]): ChainExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    for (const expr of append)\r\n    {\r\n      this.chain.push(expr);\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_COMMENT = 1;\r\n\r\nexport class CommentExpression extends Expression \r\n{\r\n\r\n  public static id = 'comment';\r\n\r\n  public static readonly instance = new CommentExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \r\n  {\r\n    const comment = data[INDEX_COMMENT];\r\n\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static encode(expr: CommentExpression): any \r\n  {\r\n    return [this.id, expr.comment];\r\n  }\r\n\r\n  public comment: string;\r\n\r\n  public constructor(comment: string)\r\n  {\r\n    super();\r\n    this.comment = comment;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return CommentExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return CommentExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new CommentExpression(this.comment);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class GetExpression extends Expression \r\n{\r\n\r\n  public static id = 'get';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \r\n  {\r\n    if (data[INDEX_PATH])\r\n    {\r\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\r\n    }\r\n    \r\n    return new GetExpression();\r\n  }\r\n\r\n  public static encode(expr: GetExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetExpression();\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return context;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { GetExpression } from './Get';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class PathExpression extends Expression \r\n{\r\n\r\n  public static id = 'path';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \r\n  {\r\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\r\n    \r\n    return new PathExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: PathExpression): any \r\n  {\r\n    return [this.id, expr.expressions.map((e) => e.encode())];\r\n  }\r\n\r\n  public static createForLegacy(path: Expression[])\r\n  {\r\n    for (let i = path.length - 1; i >= 0; i--)\r\n    {\r\n      const node = path[i];\r\n\r\n      if (node instanceof PathExpression)\r\n      {\r\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\r\n        {\r\n          path.splice(i, 1, ...node.expressions);\r\n        }\r\n      }\r\n    }\r\n\r\n    return new PathExpression(path);\r\n  }\r\n\r\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\r\n  {\r\n    const isPath = pathData[0] === PathExpression.id;\r\n    const path = isPath\r\n      ? PathExpression.decode(pathData, exprs)\r\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\r\n\r\n    if (isPath) {\r\n      exprs.setLegacy();\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return PathExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return PathExpression.encode(this);\r\n  }\r\n\r\n  public clone(): PathExpression\r\n  {\r\n    return new PathExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getPathType(this.expressions, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n    \r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const path = this.expressions;\r\n\r\n    if (path.length === 0)\r\n    {\r\n      handler({\r\n        type: ValidationType.EMPTY_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    let thisType = path[0].getType(def, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: path[0],\r\n        parent: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      path[0].validate(def, context, handler);\r\n\r\n      for (let i = 1; i < path.length; i++)\r\n      {\r\n        const node = path[i];\r\n\r\n        node.validate(def, context, handler, thisType);\r\n\r\n        thisType = node.isPathNode()\r\n          ? node.getType(def, context, thisType)\r\n          : thisType.getSubType(node, def, context);\r\n\r\n        if (!thisType)\r\n        {\r\n          handler({\r\n            type: ValidationType.INVALID_EXPRESSION,\r\n            severity: ValidationSeverity.HIGH,\r\n            context,\r\n            subject: node,\r\n            parent: this,\r\n          });\r\n          \r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isWritable(defs: DefinitionProvider)\r\n  {\r\n    return this.expressions.length > 0\r\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\r\n      : false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_EXPRESSION = 2;\r\n\r\nexport class ComputedExpression extends Expression \r\n{\r\n\r\n  public static STEP_EXPRESSION = 'expression';\r\n\r\n  public static id = 'comp';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider) \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    if (data[INDEX_EXPRESSION]) \r\n    {\r\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\r\n    }\r\n    \r\n    return new ComputedExpression(name);\r\n  }\r\n\r\n  public static encode(expr: ComputedExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string) \r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ComputedExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const comp = def.getComputed(this.name);\r\n\r\n    if (!comp)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    const op = def.getOperation(comp.op);    \r\n    \r\n    return op ? op.complexity : 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ComputedExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ComputedExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.OUTSIDE_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      if (!def.hasComputed(thisType, this.name))\r\n      {\r\n        handler({\r\n          type: ValidationType.INVALID_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject: this,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    const comp = defs.getComputed(this.name);\r\n\r\n    return !comp || !!comp.writeable;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\r\n\r\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\r\n\r\nconst ops = TextOperations;\r\n\r\nexport const TextOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  uuid: ops.set('uuid'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  append: ops.set('+', {}, ['value', 'append']),\r\n\r\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\r\n\r\n  lower: ops.set('lo', {}, ['value']),\r\n\r\n  upper: ops.set('up', {}, ['value']),\r\n\r\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\r\n\r\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\r\n\r\n  repeat: ops.set('repeat', {}, ['value', 'times']),\r\n\r\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\r\n\r\n  chars: ops.set('chars', {}, ['value']),\r\n\r\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\r\n\r\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\r\n\r\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\r\n\r\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\r\n\r\n  startsWith: ops.set('starts', {}, ['value', 'test']),\r\n\r\n  endsWith: ops.set('ends', {}, ['value', 'test']),\r\n\r\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\r\n\r\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\r\n\r\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\r\n\r\n  length: ops.set('len', {}, ['value']),\r\n\r\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\r\n\r\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\r\n\r\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\r\n\r\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\r\n\r\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\r\n\r\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.set('base64', {}, ['value']),\r\n\r\n  unbase64: ops.set('unbase64', {}, ['value']),\r\n\r\n  encodeURI: ops.set('encodeURI', {}, ['value']),\r\n\r\n  decodeURI: ops.set('decodeURI', {}, ['value']),\r\n\r\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\r\n\r\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\r\n\r\n  md5: ops.set('md5', {}, ['value']),\r\n\r\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\r\n\r\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\r\n\r\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['value']),\r\n\r\n  isNotEmpty: ops.set('n?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLower: ops.set('lo?', {}, ['value']),\r\n\r\n  isUpper: ops.set('up?', {}, ['value']),\r\n\r\n  isUuid: ops.set('uuid?', {}, ['value']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTextComputeds.set('toUpper', TextOps.upper);\r\nTextComputeds.set('toLower', TextOps.lower);\r\nTextComputeds.set('chars', TextOps.chars);\r\nTextComputeds.set('trim', TextOps.trim);\r\nTextComputeds.set('soundex', TextOps.soundex);\r\nTextComputeds.set('metaphone', TextOps.metaphone);\r\nTextComputeds.set('base64', TextOps.base64);\r\nTextComputeds.set('unbase64', TextOps.unbase64);\r\nTextComputeds.set('encodeURI', TextOps.encodeURI);\r\nTextComputeds.set('decodeURI', TextOps.decodeURI);\r\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\r\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\r\nTextComputeds.set('md5', TextOps.md5);\r\nTextComputeds.set('toNumber', TextOps.toNumber);\r\nTextComputeds.set('isEmpty', TextOps.isEmpty);\r\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\r\nTextComputeds.set('isLower', TextOps.isLower);\r\nTextComputeds.set('isUpper', TextOps.isUpper);","\r\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\r\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from './Enum';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 1;\r\nconst RANDOM_MAX = 16;\r\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\r\n\r\nexport interface TextOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  requireUpper?: boolean;\r\n  requireLower?: boolean;\r\n  forceUpper?: boolean;\r\n  forceLower?: boolean;\r\n  matches?: RegExp;\r\n}\r\n\r\nexport class TextType extends Type<TextOptions> \r\n{\r\n\r\n  public static id = ID.Text;\r\n\r\n  public static operations = TextOperations;\r\n\r\n  public static computeds = TextComputeds;\r\n  \r\n  public static baseType = new TextType({});\r\n\r\n  public static decode(data: any[]): TextType \r\n  {\r\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: TextType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): TextOptions\r\n  {\r\n    const matches = options.matches;\r\n\r\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: TextOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n    const matches = encoded.matches;\r\n\r\n    if (matches) encoded.matches = [matches.source, matches.flags];\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 3;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isString(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new TextType({\r\n      min: data.length,\r\n      max: data.length,\r\n      requireLower: data.toLowerCase() === data,\r\n      requireUpper: data.toUpperCase() === data\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 4;\r\n    const type: DataTypeRaw = 'string';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a.localeCompare(b);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor({\r\n      priority,\r\n      isValid: isString,\r\n      get: (x, step) => x[step],\r\n      set: (x, step, value) => x[step] = value,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TextType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TextType.operations.map;\r\n  }\r\n\r\n  public merge(type: TextType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.requireLower = o1.requireLower && o2.requireLower;\r\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          return Types.CHAR;\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof TextType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax > max))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const lower = this.options.forceLower || this.options.requireUpper;\r\n      const otherLower = other.options.forceLower || other.options.requireLower;\r\n\r\n      if (lower && !otherLower)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const upper = this.options.forceUpper || this.options.requireUpper;\r\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\r\n\r\n      if (upper && !otherUpper)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const matches = this.options.matches;\r\n      const otherMatches = other.options.matches;\r\n\r\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.compare, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      ignoreCase: Exprs.true(),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isString(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (matches && matches instanceof RegExp && !matches.test(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isString(value))\r\n    {\r\n      if (this.options.forceLower)\r\n      {\r\n        value = value.toLowerCase();\r\n      }\r\n\r\n      if (this.options.forceUpper)\r\n      {\r\n        value = value.toUpperCase();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TextType\r\n  {\r\n    return new TextType({});\r\n  }\r\n\r\n  public clone(): TextType\r\n  {\r\n    return new TextType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TextType.encode(this);\r\n  }\r\n\r\n  public create(): string\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\r\n    const lower = requireLower || forceLower;\r\n    const upper = requireUpper || forceUpper;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const n = rnd(chosenMin, chosenMax + 1, true);\r\n    let out = '';\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\r\n    }\r\n\r\n    if (lower) out = out.toLowerCase();\r\n    if (upper) out = out.toUpperCase();\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: string): string\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: string): string\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\r\n\r\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\r\n\r\nconst ops = MapOperations;\r\n\r\nexport const MapOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\r\n\r\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\r\n\r\n  has: ops.set('has', {}, ['map', 'key']),\r\n\r\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\r\n\r\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\r\n\r\n  count: ops.set('count', { }, ['map']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\r\n\r\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\r\n\r\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nMapComputeds.set('copy', MapOps.copy);\r\nMapComputeds.set('keys', MapOps.keys);\r\nMapComputeds.set('values', MapOps.values);\r\nMapComputeds.set('entries', MapOps.entries);\r\nMapComputeds.set('pairs', MapOps.pairs);\r\nMapComputeds.set('count', MapOps.count);","\r\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { TextType } from './Text';\r\nimport { Expression } from '../Expression';\r\nimport { Exprs } from '../Exprs';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { MapOps } from '../ops/MapOps';\r\nimport { Types } from '../Types';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_KEY = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CONSTANTS = 3;\r\n\r\nexport interface EnumOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n  constants: Map<any, any>;\r\n}\r\n\r\nexport class EnumType extends Type<EnumOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n  \r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Enum;\r\n\r\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\r\n  \r\n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\r\n\r\n  public static decode(data: any[], types: TypeProvider): EnumType \r\n  {\r\n    const key = types.getType(data[INDEX_KEY]);\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n\r\n    return new EnumType({ key, value, constants });\r\n  }\r\n\r\n  public static encode(type: EnumType): any \r\n  {\r\n    const { key, value, constants } = type.options;\r\n\r\n    return [\r\n      this.id,\r\n      key.encode(),\r\n      value.encode(),\r\n      Array.from(constants.entries()).map(([k, v]) => [\r\n        key.toJson(k),\r\n        value.toJson(v)\r\n      ])\r\n    ];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EnumType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.value.getOperations();\r\n  }\r\n\r\n  public merge(type: EnumType): void\r\n  {\r\n    const c1 = this.options.constants;\r\n    const c2 = type.options.constants;\r\n\r\n    this.options.key = Types.merge(this.options.key, type.options.key);\r\n    this.options.value = Types.merge(this.options.value, type.options.value);\r\n\r\n    for (const [key, value] of c2.entries())\r\n    {\r\n      c1.set(key, value);\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.value.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.value.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.value;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof EnumType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { key, value } = this.options;\r\n\r\n    if (options.exact)\r\n    {\r\n      if (!key.isCompatible(other.options.key, options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value.isCompatible(other.options.value);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.options.value.isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.value.isSimple();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EnumType.STEP_KEY\r\n      ? this.options.key\r\n      : step === EnumType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.value.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.options.value.getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.options.value.getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === EnumType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    const { constants, value } = this.options;\r\n\r\n    if (!value.isValid(test))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const constantValue of constants.values())\r\n    {\r\n      if (DataTypes.compare(constantValue, test) === 0)\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.options.value.normalize(value);\r\n  }\r\n\r\n  public newInstance(): EnumType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n      constants: new Map(),\r\n    });\r\n  }\r\n\r\n  public clone(): EnumType\r\n  {\r\n    const { key, value, constants } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n      constants: new Map(constants.entries()),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EnumType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    const { value, constants } = this.options;\r\n    const firstKey = constants.keys().next();\r\n\r\n    return firstKey ? constants.get(firstKey) : value.create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const values = Array.from(this.options.constants.values());\r\n\r\n    return values[rnd(0, values.length, true)];\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.options.value.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.options.value.toJson(value);\r\n  }\r\n\r\n}","\r\nimport { isArray, isString, isNumber } from '../fns';\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { Type } from '../Type';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\nimport { NumberType } from '../types/Number';\r\nimport { Traverser } from '../Traverser';\r\nimport { AnyType } from '../types/Any';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_CONSTANT = 1;\r\n\r\nexport class ConstantExpression extends Expression \r\n{\r\n\r\n  public static has(e: Expression, constant: any): boolean\r\n  {\r\n    return e instanceof ConstantExpression && e.value === constant;\r\n  }\r\n\r\n  public static is(e: Expression): e is ConstantExpression\r\n  {\r\n    return e instanceof ConstantExpression;\r\n  }\r\n\r\n  public static id = 'constant';\r\n\r\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \r\n  {\r\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ConstantExpression): any \r\n  {\r\n    const value = AnyType.baseType.toJson(expr.value);\r\n\r\n    return isArray(value)\r\n      ? [this.id, value]\r\n      : value;\r\n  }\r\n\r\n  public value: any;\r\n\r\n  public constructor(value: any) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ConstantExpression.id;\r\n  }\r\n\r\n  public getComplexity(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ConstantExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ConstantExpression(DataTypes.copy(this.value));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const value = this.value;\r\n\r\n    if (isString(value)) \r\n    {\r\n      return new EnumType({\r\n        key: TextType.baseType.newInstance(),\r\n        value: TextType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    if (isNumber(value)) \r\n    {\r\n      return new EnumType({\r\n        key: NumberType.baseType.newInstance(),\r\n        value: NumberType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    const described = def.describe(this.value);\r\n\r\n    if (described)\r\n    {\r\n      described.removeDescribedRestrictions();\r\n    }\r\n\r\n    return described;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { NumberType } from '../types/Number';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { isNumber } from '../fns';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_VARIABLE = 1;\r\nconst INDEX_START = 2;\r\nconst INDEX_END = 3;\r\nconst INDEX_BODY = 4;\r\nconst INDEX_BREAK = 5;\r\nconst INDEX_MAX = 6;\r\n\r\nexport class ForExpression extends Expression \r\n{\r\n\r\n  public static STEP_START = 'start';\r\n\r\n  public static STEP_END = 'end';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'for';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \r\n  {\r\n    const variable = data[INDEX_VARIABLE];\r\n    const start = exprs.getExpression(data[INDEX_START]);\r\n    const end = exprs.getExpression(data[INDEX_END]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new ForExpression(variable, start, end, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: ForExpression): any \r\n  {\r\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public variable: string;\r\n  public start: Expression;\r\n  public end: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.variable = variable;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ForExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.variable]: NumberType.baseType.newInstance(),\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ForExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\r\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\r\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ForExpression.STEP_START\r\n      ? [1, this.start]\r\n      : steps[0] === ForExpression.STEP_END\r\n        ? [1, this.end]\r\n        : steps[0] === ForExpression.STEP_BODY\r\n          ? [1, this.body]\r\n          : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.start.setParent(this);\r\n    this.end.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\r\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    this.variable = variable;\r\n\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      this.body = body;\r\n      this.body.setParent(this);\r\n    }\r\n\r\n    if (breakVariable)\r\n    {\r\n      this.breakVariable = breakVariable;\r\n    }\r\n\r\n    if (isNumber(maxIterations))\r\n    {\r\n      this.maxIterations = maxIterations;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public startAt(start: ExpressionValue): ForExpression\r\n  {\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public endAt(end: ExpressionValue): ForExpression\r\n  {\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): ForExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string)\r\n  {\r\n    this.variable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetDataExpression extends Expression \r\n{\r\n\r\n  public static id = 'data';\r\n\r\n  public static readonly instance = new GetDataExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetDataExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetDataExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetDataExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetDataExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const data = def.getData(this.name);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getData(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }  \r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\r\n\r\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\r\n\r\nconst ops = EntityOperations;\r\n\r\nexport const EntityOps = \r\n{\r\n\r\n  newInstance: ops.set('newInstance', {}, ['name'], [], [], [], ['name']),\r\n\r\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\r\n\r\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\r\n\r\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\r\n\r\nconst ops = ObjectOperations;\r\n\r\nexport const ObjectOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  has: ops.set('has', {}, ['object', 'key']),\r\n\r\n  get: ops.set('get', {}, ['object', 'key']),\r\n\r\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\r\n\r\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\r\n\r\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nObjectComputeds.set('copy', ObjectOps.copy);","\r\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport interface ObjectOptions \r\n{\r\n  props: TypeMap;\r\n}\r\n\r\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \r\n{\r\n\r\n  public static wilcardProperty = '*';\r\n\r\n  public static id = ID.Object;\r\n\r\n  public static operations = ObjectOperations;\r\n\r\n  public static computeds = ObjectComputeds;\r\n\r\n  public static baseType = new ObjectType({ props: {} });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ObjectType \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\r\n    \r\n    return new ObjectType({ props });\r\n  }\r\n\r\n  public static encode(type: ObjectType): any \r\n  {\r\n    const props = objectMap(type.options.props, p => p.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public static describePriority: number = 5;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isObject(data) || data === null)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const type = new ObjectType({ props: {} });\r\n\r\n    cache.set(data, type);\r\n\r\n    type.options.props = objectMap(data, d => describer.describe(d));\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 7;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, reader);\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, writer);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isObject(x)) {\r\n          const newObject: any = {};\r\n\r\n          setObjectCopy(x, newObject);\r\n  \r\n          for (const prop in x) {\r\n            newObject[copy(prop)] = copy(x[prop]);\r\n          }\r\n  \r\n          return newObject;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        if (a === null) return 1;\r\n        if (b === null) return -1;\r\n\r\n        let less = 0;\r\n        let more = 0;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            less++;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            more++;\r\n          }\r\n        }\r\n\r\n        for (const prop in a) {\r\n          if (prop in b)\r\n          {\r\n            const c = compare(a[prop], b[prop]);\r\n\r\n            if (c < 0) less++;\r\n            if (c > 0) more++;\r\n          }\r\n        }\r\n\r\n        return DataTypes.getCompare(less, more);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        if ((a === null) !== (b === null)) return false;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            return false;\r\n          } else if (!equals(a[prop], b[prop])) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<object>({\r\n      priority,\r\n      isValid: (value) => isObject(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue as never),\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ObjectType.operations.map;\r\n  }\r\n\r\n  public merge(type: Type<O>): void\r\n  {\r\n    const p1 = this.options.props;\r\n    const p2 = type.options.props;\r\n\r\n    for (const prop in p1)\r\n    {\r\n      if (prop in p2 && p2[prop])\r\n      {\r\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\r\n      }\r\n      else if (p1[prop])\r\n      {\r\n        p1[prop] = Types.optional(p1[prop]);\r\n      }\r\n    }\r\n\r\n    for (const prop in p2)\r\n    {\r\n      if (!(prop in p1) && p2[prop])\r\n      {\r\n        p1[prop] = Types.optional(p2[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (isString(expr.value))\r\n      {\r\n        return this.options.props[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof TextType)\r\n      {\r\n        const types = objectValues(this.options.props);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n    }\r\n\r\n    return this.getWildcardType();\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const props = objectValues(this.options.props);\r\n\r\n    return [\r\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\r\n      {\r\n        key: new EnumType({\r\n          key: TextType.baseType,\r\n          value: TextType.baseType,\r\n          constants: new Map(\r\n            objectValues(this.options.props, (prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(props, NullType.baseType),\r\n      },\r\n      { \r\n        key: TextType.baseType, \r\n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\r\n      }\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.options.props, \r\n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => delete this.options.props[prop])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options.props[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof ObjectType)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!other.options.props[prop]) \r\n      {\r\n        return false;\r\n      }\r\n\r\n      if (!props[prop].isCompatible(other.options.props[prop], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (options.exact)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop])\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    else if (wildcard)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.object(\r\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ObjectOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop) \r\n        }).run(\r\n          t ? t.getValidateExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop),\r\n          test: Exprs.get('test', prop) \r\n        }).run(\r\n          t ? t.getCompareExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = property\r\n    const hasFrom = from !== null && from !== undefined;\r\n    const hasTo = to !== null && to !== undefined;\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from !== to) // rename\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: Exprs.get('value', from),\r\n        }),\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isObject(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop].isValid(value[prop])) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (wildcard)\r\n    {\r\n      for (const prop in value)\r\n      {\r\n        if (!props[prop] && !wildcard.isValid(value[prop]))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ObjectType<O>\r\n  {\r\n    return new ObjectType({ props: {} } as O);\r\n  }\r\n\r\n  public clone(): ObjectType<O>\r\n  {\r\n    return new ObjectType<O>({\r\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\r\n    } as O);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return Object.create(null);\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { props } = this.options;\r\n    const out: any = Object.create(null);\r\n\r\n    for (const prop in props)\r\n    {\r\n      if (props[prop])\r\n      {\r\n        out[prop] = props[prop].random(rnd);\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return objectMap(json, (value, key) => {\r\n      const propType = this.options.props[key];\r\n\r\n      return propType ? propType.fromJson(value) : value;\r\n    });\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return objectMap(value, (subvalue, key) => {\r\n      const propType = this.options.props[key];\r\n      \r\n      return propType ? propType.toJson(subvalue) : subvalue;\r\n    });\r\n  }\r\n\r\n  public getWildcardType(): Type | null\r\n  {\r\n    return this.options.props[ObjectType.wilcardProperty] || null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { ObjectType } from './Object';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class EntityType extends Type<string>\r\n{\r\n\r\n  public static STEP_ENTITY = 'entity';\r\n\r\n  public static id = ID.Entity;\r\n\r\n  public static operations = EntityOperations;\r\n\r\n  public static computeds = EntityComputeds;\r\n\r\n  public static baseType = new EntityType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): EntityType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new EntityType( type, types );\r\n  }\r\n\r\n  public static encode(type: EntityType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(name: string, provider: TypeProvider): EntityType\r\n  {\r\n    return new EntityType(name, provider);\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    return this.provider\r\n      ? this.provider.getType(this.options, NullType.baseType)\r\n      : ObjectType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EntityType.id;\r\n  }\r\n\r\n  public merge(type: EntityType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n    // return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof EntityType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EntityType.STEP_ENTITY\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === aliased\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EntityType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EntityType } from '../types/Entity';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetEntityExpression extends Expression \r\n{\r\n\r\n  public static id = 'entity';\r\n\r\n  public static readonly instance = new GetEntityExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetEntityExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetEntityExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetEntityExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetEntityExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EntityType(this.name, def);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getEntity(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetRelationExpression extends Expression \r\n{\r\n\r\n  public static id = 'relation';\r\n\r\n  public static readonly instance = new GetRelationExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetRelationExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetRelationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetRelationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetRelationExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EnumType({\r\n      key: TextType.baseType,\r\n      value: TextType.baseType,\r\n      constants: new Map([\r\n        ['relation', this.name],\r\n      ])\r\n    });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getRelation(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { NoExpression } from './No';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_CASES = 1;\r\nconst INDEX_OTHERWISE = 2;\r\n\r\nexport class IfExpression extends Expression \r\n{\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_IF = 'if';\r\n\r\n  public static STEP_THEN = 'then';\r\n\r\n  public static STEP_ELSE = 'else';\r\n\r\n  public static id = 'if';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \r\n  {\r\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\r\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\r\n\r\n    return new IfExpression(cases, otherwise);\r\n  }\r\n\r\n  public static encode(expr: IfExpression): any \r\n  {\r\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.otherwise, undefined)\r\n      ? [this.id, cases]\r\n      : [this.id, cases, expr.otherwise.encode()];\r\n  }\r\n\r\n  public cases: [Expression, Expression][];\r\n  public otherwise: Expression;\r\n\r\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \r\n  {\r\n    super();\r\n    this.cases = cases;\r\n    this.otherwise = otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return IfExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [test, result]) => Math.max(\r\n        max, \r\n        test.getComplexity(def, context),\r\n        result.getComplexity(def, context)\r\n      ), \r\n      this.otherwise.getComplexity(def, context)\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return IfExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([test, value]) => value)\r\n      .concat(this.otherwise)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(IfExpression.STEP_CASES, () => \r\n        this.cases.forEach(([condition, result], index) => \r\n          traverse.step(index, () => {\r\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\r\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\r\n          })\r\n        )\r\n      );\r\n      if (this.otherwise !== NoExpression.instance) {\r\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\r\n      }\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === IfExpression.STEP_CASES\r\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n        ? steps[2] === IfExpression.STEP_IF\r\n          ? [3, this.cases[steps[1]][0]]\r\n          : steps[2] === IfExpression.STEP_THEN\r\n            ? [3, this.cases[steps[1]][1]]\r\n            : null\r\n        : null\r\n      : steps[0] === IfExpression.STEP_ELSE\r\n        ? [1, this.otherwise]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.cases.forEach(([condition, result]) => {\r\n      condition.setParent(this);\r\n      result.setParent(this);\r\n    });\r\n\r\n    this.otherwise.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.cases.forEach(([condition, result]) => \r\n    {\r\n      this.validateType(def, context, expectedType, condition, handler);\r\n      \r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.otherwise.validate(def, context, handler);\r\n  }\r\n\r\n  public if(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(body: Expression)\r\n  {\r\n    this.cases[this.cases.length - 1][1] = body;\r\n\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public elseif(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public else(body: Expression)\r\n  {\r\n    this.otherwise = body;\r\n    this.otherwise.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_ARGS = 2;\r\n\r\nexport class InvokeExpression extends Expression \r\n{\r\n\r\n  public static id = 'invoke';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new InvokeExpression(name, args);\r\n  }\r\n\r\n  public static encode(expr: InvokeExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.name, args];\r\n  }\r\n\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return InvokeExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return func.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return InvokeExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    return func\r\n      ? func.getReturnType(def, argTypes)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    \r\n    if (!func) \r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_FUNCTION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      const params: TypeMap = {};\r\n\r\n      objectEach(func.params.options.props, (param, paramName) =>\r\n      {\r\n        const arg = this.args[paramName];\r\n\r\n        this.validateType(def, context, param, arg, handler);\r\n\r\n        if (arg)\r\n        {\r\n          params[paramName] = arg.getType(def, context);\r\n        }\r\n      });\r\n\r\n      // func.options.expression.validate(def, Types.object(params), handler);\r\n    }\r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return `Function \"${this.name}\" does not exist`;\r\n    }\r\n\r\n    return func.expression;\r\n  }\r\n\r\n  public named(name: string): InvokeExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): InvokeExpression\r\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { EntityType } from '../types/Entity';\r\n\r\n\r\nconst INDEX_ENTITY = 1;\r\nconst INDEX_NAME = 2;\r\nconst INDEX_ARGS = 3;\r\n\r\nexport class MethodExpression extends Expression \r\n{\r\n\r\n  public static id = 'method';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \r\n  {\r\n    const entity = data[INDEX_ENTITY];\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new MethodExpression(entity, name, args);\r\n  }\r\n\r\n  public static encode(expr: MethodExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.entity, expr.name, args];\r\n  }\r\n\r\n  public entity: string;\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(entity: string, name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.entity = entity;\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MethodExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity || !entity.methods[this.name])\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return entity.methods[this.name].expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MethodExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return null;\r\n    }\r\n    \r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    argTypes[Expression.INSTANCE] = entity.type;\r\n    \r\n    return method.getReturnType(def, argTypes);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_THIS,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_METHOD,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const params: TypeMap = {};\r\n\r\n    params[Expression.INSTANCE] = entity.type;\r\n\r\n    objectEach(method.params.options.props, (param, paramName) =>\r\n    {\r\n      const arg = this.args[paramName];\r\n\r\n      this.validateType(def, context, param, arg, handler);\r\n\r\n      if (arg)\r\n      {\r\n        params[paramName] = arg.getType(def, context);\r\n      }\r\n    });\r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return `Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    return method.expression;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public named(name: string): MethodExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): MethodExpression\r\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class OrExpression extends Expression \r\n{\r\n\r\n  public static id = 'or';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new OrExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: OrExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OrExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OrExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OrExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types: Type[] = this.expressions\r\n      .map(e => e.getType(def, context))\r\n      .concat(BooleanType.baseType)\r\n      .filter(t => !!t)\r\n    ;\r\n    \r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n}","\r\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Operation } from '../Operation';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { AndExpression } from './And';\r\nimport { OrExpression } from './Or';\r\nimport { NotExpression } from './Not';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_PARAMS = 2;\r\nconst INDEX_SCOPE = 3;\r\n\r\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \r\n{\r\n\r\n  public static id = 'op';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\r\n    \r\n    return new OperationExpression(name, params, scopeAlias);\r\n  }\r\n\r\n  public static encode(expr: OperationExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return isEmpty(expr.scopeAlias)\r\n      ? [this.id, expr.name, params]\r\n      : [this.id, expr.name, params, expr.scopeAlias]\r\n  }\r\n\r\n  public static create<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\r\n  }\r\n\r\n  public name: string;\r\n  public params: ExpressionMap;\r\n  public scopeAlias: Record<string, string>;\r\n\r\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.params = params;\r\n    this.scopeAlias = scopeAlias;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OperationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const op = def.getOperation(this.name);\r\n    let complexity = op ? op.complexity : 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OperationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const { name, params, scopeAlias } = this;\r\n    const operation = def.getOperation(name);\r\n    const operationTypes = def.getOperationTypes(name);\r\n\r\n    if (!operation)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_OPERATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\r\n    const scopeContext = operation.hasScope.length > 0\r\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\r\n      : context;\r\n\r\n    for (const paramName in expectedTypes)\r\n    {\r\n      const optional = operation.optional.indexOf(paramName) !== -1;\r\n      const expectedRequired = expectedTypes[paramName];\r\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\r\n      const subject = params[paramName];\r\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n      const paramContext = hasScope ? scopeContext : context;\r\n      \r\n      this.validateType(def, paramContext, expected, subject, handler);\r\n    }\r\n\r\n    for (const paramName in params)\r\n    {\r\n      const subject = params[paramName];\r\n      const operationType = operationTypes.params[paramName];\r\n\r\n      if (!(paramName in expectedTypes) && operationType)\r\n      {\r\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n        const paramContext = hasScope ? scopeContext : context;\r\n\r\n        handler({\r\n          type: ValidationType.MISSING_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context: paramContext,\r\n          subject,\r\n          parent: this,\r\n        });\r\n\r\n        params[paramName].validate(def, paramContext, handler);\r\n      }\r\n    }\r\n  }\r\n\r\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\r\n  {\r\n    const param = Exprs.parse(value);\r\n\r\n    this.params[name] = param;\r\n    param.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\r\n  {\r\n    this.scopeAlias[scoped] = alias;\r\n\r\n    return this;\r\n  }\r\n\r\n  public and(exprs: Expression | Expression[]): AndExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new AndExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public or(exprs: Expression | Expression[]): OrExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new OrExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public not(): NotExpression\r\n  {\r\n    return new NotExpression(this);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\n\r\nexport class ReturnExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'return';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    \r\n    return new ReturnExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ReturnExpression): any \r\n  {\r\n    const returnValue = expr.value.encode();\r\n\r\n    return returnValue !== undefined\r\n      ? [this.id, returnValue]\r\n      : [this.id];\r\n  }\r\n\r\n  public value: Expression;\r\n\r\n  public constructor(value: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReturnExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.value.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReturnExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ReturnExpression(this.value.encode());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.value \r\n      ? this.value.getType(def, context)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ReturnExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\n\r\nexport class SetExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'set';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n\r\n    return new SetExpression(path, value);\r\n  }\r\n\r\n  public static encode(expr: SetExpression): any \r\n  {\r\n    return [this.id, expr.path.encode(), expr.value.encode()];\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue)\r\n  {\r\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n\r\n  public constructor(path: PathExpression, value: Expression) \r\n  {\r\n    super();\r\n\r\n    this.path = path;\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SetExpression(this.path.clone(), this.value.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\r\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SetExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === SetExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      this.validateType(def, context, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public to(value: ExpressionValue): SetExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { Operation } from '../Operation';\r\nimport { NoExpression } from './No';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_OP = 2;\r\nconst INDEX_CASES = 3;\r\nconst INDEX_DEFAULT_CASE = 4;\r\n\r\nexport class SwitchExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_CASE = 'case';\r\n\r\n  public static STEP_RESULT = 'result';\r\n\r\n  public static STEP_DEFAULT = 'default';\r\n\r\n  public static id = 'switch';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const op = data[INDEX_OP];\r\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\r\n      tests.map((t: any) => exprs.getExpression(t)), \r\n      exprs.getExpression(result)\r\n    ]);\r\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\r\n\r\n    return new SwitchExpression(value, op, cases, defaultCase);\r\n  }\r\n\r\n  public static encode(expr: SwitchExpression): any \r\n  {\r\n    const value = expr.value.encode();\r\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.defaultCase, undefined)\r\n      ? [this.id, value, expr.op, cases]\r\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\r\n  }\r\n\r\n  public value: Expression;\r\n  public op: string;\r\n  public cases: [Expression[], Expression][];\r\n  public defaultCase: Expression;\r\n\r\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n    this.op = op;\r\n    this.cases = cases;\r\n    this.defaultCase = defaultCase;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SwitchExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [tests, result]) => Math.max(\r\n        max, \r\n        result.getComplexity(def, context), \r\n        tests.reduce((tmax, t) => Math.max(\r\n          tmax, \r\n          t.getComplexity(def, context)\r\n        ), 0)\r\n      ), \r\n      Math.max(\r\n        this.value.getComplexity(def, context), \r\n        this.defaultCase.getComplexity(def, context)\r\n      )\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SwitchExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([tests, value]) => value)\r\n      .concat(this.defaultCase)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n      traverse.step(SwitchExpression.STEP_CASES, () => \r\n        this.cases.forEach(([tests, result], caseIndex) =>\r\n          traverse.step(caseIndex, () => {\r\n            traverse.step(SwitchExpression.STEP_CASE, () => \r\n              tests.forEach((test, index) => \r\n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\r\n              )\r\n            );\r\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\r\n          })  \r\n        )\r\n      );\r\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SwitchExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : steps[0] === SwitchExpression.STEP_CASES\r\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n          ? steps[2] === SwitchExpression.STEP_CASE\r\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\r\n              ? [4, this.cases[steps[1]][0][steps[3]]]\r\n              : null\r\n            : steps[2] === SwitchExpression.STEP_RESULT\r\n              ? [3, this.cases[steps[1]][1]]\r\n              : null\r\n            : null\r\n        : steps[0] === SwitchExpression.STEP_DEFAULT\r\n          ? [1, this.defaultCase]\r\n          : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n    this.cases.forEach(([tests, result]) => {\r\n      tests.forEach(e => e.setParent(this));\r\n      result.setParent(this);\r\n    });\r\n    this.defaultCase.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n\r\n    this.cases.forEach(([tests, result]) => \r\n    {\r\n      tests.forEach(e => e.validate(def, context, handler));\r\n\r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.defaultCase.validate(def, context, handler);\r\n  }\r\n\r\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.op = op ? op.id : this.op;\r\n\r\n    return this;\r\n  }\r\n\r\n  public case(testValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const n = this.cases.length - 1;\r\n    const test = Exprs.parse(testValue);\r\n\r\n    test.setParent(this);\r\n\r\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\r\n    {\r\n      this.cases[n][0].push(test);\r\n    }\r\n    else\r\n    {\r\n      this.cases.push([[test], NoExpression.instance]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(bodyValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const body = Exprs.parse(bodyValue);\r\n\r\n    this.cases[this.cases.length - 1][1] = body;\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public default(body: ExpressionValue)\r\n  {\r\n    this.defaultCase = Exprs.parse(body);\r\n    this.defaultCase.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { TextType } from '../types/Text';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_TEMPLATE = 1;\r\nconst INDEX_PARAMS = 2;\r\n\r\nexport class TemplateExpression extends Expression \r\n{\r\n\r\n  public static id = 'tmpl';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \r\n  {\r\n    const template = data[INDEX_TEMPLATE];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    \r\n    return new TemplateExpression(template, params);\r\n  }\r\n\r\n  public static encode(expr: TemplateExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return [this.id, expr.template, params];\r\n  }\r\n\r\n  public template: string;\r\n  public params: ExpressionMap;\r\n\r\n  public constructor(template: string, params: ExpressionMap) \r\n  {\r\n    super();\r\n    this.template = template;\r\n    this.params = params;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TemplateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    let complexity = 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TemplateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return TextType.baseType.newInstance();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.params, subject =>\r\n    {\r\n      this.validateType(def, context, TextType.baseType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public param(name: string, value: ExpressionValue): TemplateExpression\r\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\r\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\r\n  {\r\n    const append = isString(nameOrParams)\r\n      ? { [nameOrParams]: value }\r\n      : nameOrParams;\r\n\r\n    for (const paramName in append)\r\n    {\r\n      const param = Exprs.parse(append[paramName]);\r\n      this.params[paramName] = param;\r\n      param.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyType } from '../types/Any';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst DEFAULT_CURRENT = 'current';\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CURRENT = 3;\r\n\r\nexport class UpdateExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'up';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \r\n\r\n    return new UpdateExpression(path, value, currentVariable);\r\n  }\r\n\r\n  public static encode(expr: UpdateExpression): any \r\n  {\r\n    const path = expr.path.encode();\r\n    const value = expr.value.encode();\r\n\r\n    return expr.currentVariable === DEFAULT_CURRENT\r\n      ? [this.id, path, value]\r\n      : [this.id, path, value, expr.currentVariable]\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\r\n  {\r\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n  public currentVariable: string;\r\n\r\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \r\n  {\r\n    super();\r\n    this.path = path;\r\n    this.value = value;\r\n    this.currentVariable = currentVariable;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return UpdateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.currentVariable]: AnyType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return UpdateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\r\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === UpdateExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === UpdateExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      const valueContext = def.getContext(context, {\r\n        [this.currentVariable]: expectedType,\r\n      });\r\n\r\n      this.validateType(def, valueContext, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.currentVariable = currentVariable || this.currentVariable;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string): UpdateExpression\r\n  {\r\n    this.currentVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class WhileExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'while';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new WhileExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: WhileExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n    \r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return WhileExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return WhileExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === WhileExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === WhileExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public while(condition: Expression)\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public do(body: Expression)\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\r\n\r\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\r\n\r\nconst ops = TupleOperations;\r\n\r\nexport const TupleOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  get: ops.set('get', {}, ['value', 'index']),\r\n\r\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\r\n\r\n  // Comparisons\r\n  \r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTupleComputeds.set('copy', TupleOps.copy);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\r\n\r\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\r\n\r\nconst ops = NumberOperations;\r\n\r\nexport const NumberOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  pi: ops.set('pi'),\r\n\r\n  pi2: ops.set('2pi'),\r\n\r\n  piHalf: ops.set('hpi'),\r\n\r\n  e: ops.set('e'),\r\n\r\n  sqrt2: ops.set('sqrt2'),\r\n\r\n  sqrt12: ops.set('sqrt1/2'),\r\n\r\n  ln2: ops.set('ln2'),\r\n\r\n  ln10: ops.set('ln10'),\r\n\r\n  log2e: ops.set('log2e'),\r\n\r\n  log10e: ops.set('log10e'),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.set('+', {}, ['value', 'addend']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor']),\r\n\r\n  min: ops.set('min', {}, ['a', 'b']),\r\n\r\n  max: ops.set('max', {}, ['a', 'b']),\r\n  \r\n  pow: ops.set('^^', {}, ['value', 'exponent']),\r\n  \r\n  atan2: ops.set('atan2', {}, ['x', 'y']),\r\n  \r\n  hypot: ops.set('hyp', {}, ['a', 'b']),\r\n  \r\n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\r\n  \r\n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\r\n\r\n  bitAnd: ops.set('&', {}, ['a', 'b']),\r\n\r\n  bitOr: ops.set('|', {}, ['a', 'b']),\r\n\r\n  bitXor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  sqrt: ops.set('sqrt', {}, ['value']),\r\n\r\n  sq: ops.set('^2', {}, ['value']),\r\n  \r\n  cbrt: ops.set('cbrt', {}, ['value']),\r\n  \r\n  floor: ops.set('floor', {}, ['value']),\r\n  \r\n  ceil: ops.set('ceil', {}, ['value']),\r\n  \r\n  up: ops.set('up', {}, ['value']),\r\n  \r\n  down: ops.set('down', {}, ['value']),\r\n  \r\n  round: ops.set('round', {}, ['value']),\r\n  \r\n  abs: ops.set('abs', {}, ['value']),\r\n  \r\n  neg: ops.set('neg', {}, ['value']),\r\n  \r\n  sign: ops.set('sign', {}, ['value']),\r\n  \r\n  log: ops.set('log', {}, ['value']),\r\n  \r\n  sin: ops.set('sin', {}, ['value']),\r\n  \r\n  cos: ops.set('cos', {}, ['value']),\r\n  \r\n  tan: ops.set('tan', {}, ['value']),\r\n  \r\n  sinh: ops.set('sinh', {}, ['value']),\r\n  \r\n  cosh: ops.set('cosh', {}, ['value']),\r\n\r\n  asin: ops.set('asin', {}, ['value']),\r\n  \r\n  acos: ops.set('acos', {}, ['value']),\r\n  \r\n  atan: ops.set('atan', {}, ['value']),\r\n  \r\n  factorial: ops.set('!', {}, ['value']),\r\n\r\n  bitFlip: ops.set('~', {}, ['value']),\r\n\r\n  // Other\r\n\r\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\r\n\r\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\r\n\r\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\r\n\r\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\r\n\r\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\r\n\r\n  fromPercent: ops.set('fromPercent', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\r\n\r\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\r\n\r\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\r\n\r\n  isPositive: ops.set('+?', {}, ['value']),\r\n\r\n  isNegative: ops.set('-?', {}, ['value']),\r\n\r\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\r\n\r\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nNumberComputeds.set('floor', NumberOps.floor);\r\nNumberComputeds.set('ceil', NumberOps.ceil);\r\nNumberComputeds.set('up', NumberOps.up);\r\nNumberComputeds.set('down', NumberOps.down);\r\nNumberComputeds.set('round', NumberOps.round);\r\nNumberComputeds.set('abs', NumberOps.abs);\r\nNumberComputeds.set('negate', NumberOps.neg);\r\nNumberComputeds.set('sign', NumberOps.sign);\r\nNumberComputeds.set('isZero', NumberOps.isZero);\r\nNumberComputeds.set('isWhole', NumberOps.isWhole);\r\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\r\nNumberComputeds.set('isPositive', NumberOps.isPositive);\r\nNumberComputeds.set('isNegative', NumberOps.isNegative);\r\nNumberComputeds.set('toText', NumberOps.toText);","\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\nimport { ID } from '../types/ID';\r\n\r\n\r\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\r\n\r\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\r\n\r\nconst ops = ListOperations;\r\n\r\nexport const ListOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\r\n\r\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\r\n\r\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\r\n\r\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\r\n\r\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\r\n\r\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\r\n\r\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\r\n\r\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\r\n\r\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\r\n\r\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\r\n\r\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\r\n\r\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\r\n\r\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\r\n\r\n  count: ops.set('count', {}, ['list']),\r\n\r\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\r\n\r\n  // Iteration\r\n\r\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\r\n\r\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\r\n\r\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\r\n\r\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\r\n\r\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\r\n\r\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\r\n\r\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\r\n\r\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['list']),\r\n\r\n  isNotEmpty: ops.set('!0', {}, ['list']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n  \r\n};\r\n\r\nListComputeds.set('copy', ListOps.copy);\r\nListComputeds.set('reversed', ListOps.reverse);\r\nListComputeds.set('shuffled', ListOps.shuffle);\r\nListComputeds.set('first', ListOps.first);\r\nListComputeds.set('last', ListOps.last);\r\nListComputeds.set('random', ListOps.random);\r\nListComputeds.set('isEmpty', ListOps.isEmpty);\r\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\r\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { NumberType } from './Number';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from './Tuple';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_ITEM = 1;\r\nconst INDEX_OPTIONS = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\nconst REQUIRED_SUB_MIN = 10;\r\n\r\nexport interface ListOptions \r\n{\r\n  item: Type;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport class ListType extends Type<ListOptions> \r\n{\r\n\r\n  public static STEP_ITEM = 'item';\r\n\r\n  public static id = ID.List;\r\n\r\n  public static operations = ListOperations;\r\n\r\n  public static computeds = ListComputeds;\r\n\r\n  public static baseType = new ListType({ item: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ListType \r\n  {\r\n    const item = types.getType(data[INDEX_ITEM]);\r\n    const options = data[INDEX_OPTIONS] || {};\r\n\r\n    return new ListType({ item, ...options });\r\n  }\r\n\r\n  public static encode(type: ListType): any \r\n  {\r\n    const options: any = { ...type.options };\r\n    const item = options.item;\r\n    delete options.item;\r\n\r\n    return isEmpty(options)\r\n      ? [this.id, item.encode()]\r\n      : [this.id, item.encode(), options];\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isArray(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const type = new ListType({\r\n      item: AnyType.baseType,\r\n      min: data.length,\r\n      max: data.length\r\n    });\r\n\r\n    cache.set(data, type);\r\n\r\n    let item = describer.describe(data[0]);\r\n\r\n    for (let i = 1; i < data.length; i++)\r\n    {\r\n      item = describer.merge(item, data[i]);\r\n    }\r\n\r\n    type.options.item = item;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 8;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      toJson: (json, writer) => {\r\n        if (isArray(json)) {\r\n          return json.map(writer);\r\n        }\r\n      },\r\n      fromJson: (json, reader) => {\r\n        if (isArray(json)) {\r\n          return json.map(reader);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isArray(a);\r\n        const bt = isArray(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (at) {\r\n          let dl = a.length - b.length;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            for (let i = 0; i < a.length; i++) {\r\n              const c = compare(a[i], b[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isArray(a);\r\n        const bl = isArray(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (al)\r\n        {\r\n          if (a.length !== b.length)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (let i = 0; i < a.length; i++)\r\n          {\r\n            if (!equals(a[i], b[i]))\r\n            {\r\n              return false\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isArray(x)) {\r\n          const newArray: any[] = [];\r\n\r\n          setObjectCopy(x, newArray);\r\n\r\n          for (const item of x) {\r\n            newArray.push(copy(item));\r\n          }\r\n\r\n          return newArray;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<any[]>({\r\n      priority,\r\n      isValid: (value) => isArray(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\r\n    });\r\n  }\r\n\r\n  public static forItem(itemOrClass: TypeInput)\r\n  {\r\n    const item = Types.parse(itemOrClass);\r\n    \r\n    return new ListType({ item });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ListType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ListType.operations.map;\r\n  }\r\n\r\n  public merge(type: ListType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.item = Types.merge(o1.item, o2.item);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.max = Math.max(o1.max, o2.max);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return isNumber(this.options.min) && expr.value < this.options.min\r\n          ? this.options.item\r\n          : Types.optional(this.options.item);\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.optional(this.options.item);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\r\n          {\r\n            return this.options.item;\r\n          }\r\n\r\n          return Types.optional(this.options.item);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const { min, item } = this.options;\r\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\r\n    const required: TypeSub[] = [];\r\n\r\n    for (let i = 0; i < requiredMin; i++) {\r\n      required.push({ key: i, value: item });\r\n    }\r\n\r\n    return [\r\n      ...required,\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(item) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    if (!options.strict &&\r\n      !options.exact &&\r\n      other instanceof TupleType &&\r\n      !other.options.some(o => !item.isCompatible(o, options)))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof ListType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!item.isCompatible(other.options.item, options))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ListType.STEP_ITEM \r\n      ? this.options.item \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.item.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { item } = this.options;\r\n\r\n    item.removeDescribedRestrictions();\r\n\r\n    this.options = { item };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ListOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.get('value'),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.item.getCompareExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = item\r\n    return Exprs.op(ListOps.map, {\r\n      list: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      item: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!Array.isArray(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { item, min, max } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const val of value)\r\n    {\r\n      if (!item.isValid(val)) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isArray(value))\r\n    {\r\n      const item = this.options.item; \r\n\r\n      for (let i = 0; i < value.length; i++)\r\n      {\r\n        value[i] = item.normalize(value[i]);\r\n      }\r\n    }\r\n    \r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ListType\r\n  {\r\n    const { item } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): ListType\r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.clone(),\r\n      min,\r\n      max,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ListType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const start = Math.min(chosenMin, chosenMax);\r\n    const end = Math.max(chosenMin, chosenMax);\r\n    const n = rnd(start, end + 1, true);\r\n    const out: any[] = [];\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out.push(this.options.item.random(rnd));\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\r\nimport { NumberOps } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ListType } from './List';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\n\r\n\r\nconst INDEX_ELEMENTS = 1;\r\n\r\nexport class TupleType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Tuple;\r\n\r\n  public static operations = TupleOperations;\r\n\r\n  public static computeds = TupleComputeds;\r\n\r\n  public static baseType = new TupleType([]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): TupleType \r\n  {\r\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\r\n\r\n    return new TupleType(elements);\r\n  }\r\n\r\n  public static encode(type: TupleType): any \r\n  {\r\n    const elements = type.options.map(t => t.encode());\r\n\r\n    return [this.id, elements];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static forItem(types: TypeInput[])\r\n  {\r\n    return new TupleType(types.map((t) => Types.parse(t)));\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TupleType.operations.map;\r\n  }\r\n\r\n  public merge(type: TupleType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return this.options[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.mergeMany(this.options, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\r\n          \r\n          return Types.mergeMany(types, NullType.baseType);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      ...this.options.map((value, key) => ({ key, value })),\r\n      { key: 'length', value: Types.LENGTH },\r\n      {\r\n        key: new EnumType({\r\n          key: NumberType.baseType,\r\n          value: NumberType.baseType,\r\n          constants: new Map(\r\n            this.options.map((prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(this.options, NullType.baseType),\r\n      },\r\n      { \r\n        key: Types.INDEX, \r\n        value: Types.optional(\r\n          Types.mergeMany(this.options, NullType.baseType)\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.tuple(\r\n      ...this.options.map((t) => t.getCreateExpression())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs\r\n      .op(TupleOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      })\r\n      .and(this.options.map((t, i) => Exprs\r\n        .define({ value: Exprs.get('value', i) })\r\n        .run(t.getValidateExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(NumberOps.cmp, {\r\n        value: Exprs.get('value', 'length'),\r\n        test: Exprs.get('test', 'length'),\r\n      }),\r\n      ...this.options.map((t, i) => Exprs\r\n        .define({\r\n          value: Exprs.get('value', i),\r\n          test: Exprs.get('test', i),\r\n        })\r\n        .run(t.getCompareExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = element index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ListOps.insert, {\r\n          list: Exprs.get('value'),\r\n          index: to,\r\n          item: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ListOps.removeAt, {\r\n          list: Exprs.get('value'),\r\n          index: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!options.exact && \r\n      !options.strict && \r\n      other instanceof ListType && \r\n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\r\n      isNumber(other.options.min) &&\r\n      other.options.min >= this.options.length)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof TupleType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const a = this.options;\r\n    const b = other.options;\r\n\r\n    if (b.length < a.length || (options.exact && a.length !== b.length))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; i++)\r\n    {\r\n      if (!a[i].isCompatible(b[i], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      if (!elements[i].isValid(value[i]))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      value[i] = elements[i].normalize(value[i]);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TupleType\r\n  {\r\n    return new TupleType([]);\r\n  }\r\n\r\n  public clone(): TupleType\r\n  {\r\n    return new TupleType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return this.options.map(e => e.create());\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options.map(e => e.random(rnd));\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.fromJson(json[i]));\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.toJson(value[i]));\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from '../types/Tuple';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class TupleExpression extends Expression \r\n{\r\n\r\n  public static id = 'tuple';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new TupleExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: TupleExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.expressions.forEach(subject =>\r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n}","\r\nimport { objectMap, objectReduce, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ObjectType } from '../types/Object';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport class ObjectExpression extends Expression \r\n{\r\n\r\n  public static id = 'obj';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\r\n    \r\n    return new ObjectExpression(props);\r\n  }\r\n\r\n  public static encode(expr: ObjectExpression): any \r\n  {\r\n    const props = objectMap(expr.props, e => e.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public props: ExpressionMap;\r\n\r\n  public constructor(props: ExpressionMap) \r\n  {\r\n    super();\r\n    this.props = props;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.props, (expr, prop) =>\r\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => delete this.props[prop])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.props\r\n      ? [1, this.props[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.props, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.props, e => e.validate(def, context, handler));\r\n  }\r\n\r\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\r\nimport { NotExpression } from './exprs/Not';\r\nimport { AndExpression } from './exprs/And';\r\nimport { NoExpression } from './exprs/No';\r\nimport { DefineExpression } from './exprs/Define';\r\nimport { DoExpression } from './exprs/Do';\r\nimport { ChainExpression } from './exprs/Chain';\r\nimport { CommentExpression } from './exprs/Comment';\r\nimport { ComputedExpression } from './exprs/Computed';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { ForExpression } from './exprs/For';\r\nimport { GetExpression } from './exprs/Get';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { IfExpression } from './exprs/If';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { OperationExpression } from './exprs/Operation';\r\nimport { Operation } from './Operation';\r\nimport { OrExpression } from './exprs/Or';\r\nimport { PathExpression } from './exprs/Path';\r\nimport { ReturnExpression } from './exprs/Return';\r\nimport { SetExpression } from './exprs/Set';\r\nimport { SwitchExpression } from './exprs/Switch';\r\nimport { TemplateExpression } from './exprs/Template';\r\nimport { UpdateExpression } from './exprs/Update';\r\nimport { WhileExpression } from './exprs/While';\r\nimport { TupleExpression } from './exprs/Tuple';\r\nimport { ObjectExpression } from './exprs/Object';\r\nimport { isArray, isObject, objectMap } from './fns';\r\nimport { Type } from './Type';\r\n\r\n\r\nexport class Exprs\r\n{\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      expr.setParent();\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  public static parse(values: ExpressionValue[]): Expression[]\r\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\r\n  public static parse(value: ExpressionValue): Expression\r\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\r\n  {\r\n    return isArray(value)\r\n      ? value.map((v) => this.parse(v))\r\n      : value instanceof Expression \r\n        ? value\r\n        : isObject(value)\r\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\r\n          : new ConstantExpression(value);\r\n  }\r\n\r\n  public static cast(valueType: Type, targetType: Type): Expression;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\r\n  {\r\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\r\n    const op = valueType.getOperations()[opId];\r\n\r\n    return op\r\n      ? this.op(op, { value: this.get('value') })\r\n      : createOnMissing\r\n        ? this.setParent(targetType.getCreateExpression())\r\n        : null as unknown as Expression;\r\n  }\r\n\r\n  public static and(...exprs: Expression[]): AndExpression\r\n  {\r\n    return this.setParent(new AndExpression(exprs));\r\n  }\r\n\r\n  public static body(...exprs: Expression[]): ChainExpression\r\n  {\r\n    return this.setParent(new ChainExpression(exprs));\r\n  }\r\n\r\n  public static const(value: any): ConstantExpression\r\n  {\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\r\n  {\r\n    return this.setParent(new DefineExpression([], body).with(vars));\r\n  }\r\n\r\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\r\n  {\r\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\r\n  {\r\n    return path.length === 0\r\n      ? new GetExpression()\r\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\r\n  }\r\n\r\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\r\n  }\r\n\r\n  public static computed(name: string): ComputedExpression\r\n  {\r\n    return this.setParent(new ComputedExpression(name));\r\n  }\r\n\r\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\r\n  {\r\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\r\n  }\r\n\r\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\r\n  }\r\n\r\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\r\n  }\r\n\r\n  public static noop(): NoExpression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public static not(expr: Expression): NotExpression\r\n  {\r\n    return this.setParent(new NotExpression(expr));\r\n  }\r\n\r\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\r\n  {\r\n    return this.setParent(new ObjectExpression(this.parse(props)));\r\n  }\r\n\r\n  public static op<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\r\n  }\r\n\r\n  public static or(...exprs: Expression[]): OrExpression\r\n  {\r\n    return this.setParent(new OrExpression(exprs));\r\n  }\r\n\r\n  public static path(...exprs: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\r\n      ? exprs[0]\r\n      : new PathExpression(this.parse(exprs)));\r\n  }\r\n\r\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\r\n  {\r\n    return this.setParent(new ReturnExpression(this.parse(value)));\r\n  }\r\n\r\n  public static set(...path: ExpressionValue[]): SetExpression\r\n  {\r\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\r\n  {\r\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\r\n  }\r\n\r\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\r\n  {\r\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\r\n  }\r\n\r\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\r\n  {\r\n    return this.setParent(new TupleExpression(this.parse(elements)));\r\n  }\r\n\r\n  public static update(...path: ExpressionValue[]): UpdateExpression\r\n  {\r\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\r\n  {\r\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static undefined()\r\n  {\r\n    return this.const(undefined);\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return this.const(null);\r\n  }\r\n\r\n  public static true()\r\n  {\r\n    return this.const(true);\r\n  }\r\n\r\n  public static false()\r\n  {\r\n    return this.const(false);\r\n  }\r\n\r\n  public static zero()\r\n  {\r\n    return this.const(0);\r\n  }\r\n\r\n  public static one()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareEqual()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareLess()\r\n  {\r\n    return this.const(-1);\r\n  }\r\n\r\n  public static compareGreater()\r\n  {\r\n    return this.const(+1);\r\n  }\r\n\r\n  public static string()\r\n  {\r\n    return this.const('');\r\n  }\r\n\r\n  public static comment(comment: string)\r\n  {\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static entity(name: string)\r\n  {\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static relation(name: string)\r\n  {\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static data(name: string)\r\n  {\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n}","\r\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\r\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 0;\r\nconst RANDOM_MAX = 10;\r\n\r\nexport interface NumberOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  whole?: boolean;\r\n}\r\n\r\nexport class NumberType extends Type<NumberOptions> \r\n{\r\n\r\n  public static WHOLE_EPSILON = 0.000001;\r\n\r\n  public static id = ID.Number;\r\n\r\n  public static operations = NumberOperations;\r\n\r\n  public static computeds = NumberComputeds;\r\n\r\n  public static baseType = new NumberType({});\r\n\r\n  public static decode(data: any[]): NumberType \r\n  {\r\n    return new NumberType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: NumberType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isNumber(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new NumberType({\r\n      min: data,\r\n      max: data,\r\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static EQUALS_EPSILON = 0.000001;\r\n\r\n  public static COMPARES_EPSILON = 0.000001;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'number';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a < b\r\n          ? (b - a) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : -1\r\n          : (a - b) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : 1;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type: 'bigint',\r\n      compare: (a, b) => {\r\n        return a - b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type: 'bigint',\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NumberType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NumberType.operations.map;\r\n  }\r\n\r\n  public merge(type: NumberType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.whole = o1.whole && o2.whole;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof NumberType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isNumber(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, whole } = this.options;\r\n\r\n    if (isNumber(min) && value < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (whole && !isWhole(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NumberType\r\n  {\r\n    return new NumberType({});\r\n  }\r\n\r\n  public clone(): NumberType\r\n  {\r\n    return new NumberType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NumberType.encode(this);\r\n  }\r\n\r\n  public create(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, whole } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n\r\n    return rnd(chosenMin, chosenMax, whole);\r\n  }\r\n\r\n  public fromJson(json: number): number\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: number): number\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\n\r\nconst MAP: string[] = [\r\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\r\n];\r\n\r\n\r\nexport const en: LocaleOptions = \r\n{\r\n  weekStartsOn: 0,\r\n  firstWeekContainsDate: 4,\r\n\r\n  am: 'am',\r\n  pm: 'pm',\r\n\r\n  formatLT: 'h:mm A',\r\n  formatLTS: 'h:mm:ss A',\r\n  formatL: 'MM/DD/Y',\r\n  formatl: 'M/D/Y',\r\n  formatLL: 'MMMM D, Y',\r\n  formatll: 'MMM D, Y',\r\n  formatLLL: 'MMMM D, Y h:mm A',\r\n  formatlll: 'MMM D, Y h:mm A',\r\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\r\n  formatllll: 'ddd, MMM D, Y h:mm A',\r\n\r\n  suffix: (value: number) => \r\n  {\r\n    const TH_SPECIAL_MIN = 11;\r\n    const TH_SPECIAL_MAX = 13;\r\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\r\n\r\n    return value + suffix;\r\n  },\r\n\r\n  list: (items) => \r\n  {\r\n    const last: number = items.length - 1;\r\n    let out: string = items[0];\r\n\r\n    for (let i = 1; i < last; i++) \r\n    {\r\n      out += ', ' + items[i];\r\n    }\r\n\r\n    if (last > 0) {\r\n      out += ' and ' + items[last];\r\n    }\r\n\r\n    return out;\r\n  },\r\n\r\n  months: [\r\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\r\n  ],\r\n\r\n  weekdays: [\r\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\r\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\r\n  ],\r\n\r\n};\r\n","\r\nimport { en } from './en';\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\nexport let currentLocale: LocaleOptions = en;","\r\n\r\n/**\r\n * The number of milliseconds in a second.\r\n */\r\nexport const MILLIS_IN_SECOND: number = 1000;\r\n\r\n/**\r\n * The number of seconds in a minute.\r\n */\r\nexport const SECONDS_IN_MINUTE: number = 60;\r\n\r\n/**\r\n * The number of hours in a day (not including DST days).\r\n */\r\nexport const HOURS_IN_DAY: number = 24;\r\n\r\n/**\r\n * The number of days in a week.\r\n */\r\nexport const DAYS_IN_WEEK: number = 7;\r\n\r\n/**\r\n * The number of milliseconds in a minute.\r\n */\r\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in an hour.\r\n */\r\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in a day (not including DST days).\r\n */\r\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\r\n\r\n/**\r\n * The number of months in a quarter.\r\n */\r\nexport const MONTHS_IN_QUARTER = 3;\r\n\r\n/**\r\n * The number of months in a year.\r\n */\r\nexport const MONTHS_IN_YEAR: number = 12;\r\n\r\n/**\r\n * The first day of a month.\r\n */\r\nexport const DAY_MIN: number = 1;\r\n\r\n/**\r\n * The last day of the longest month.\r\n */\r\nexport const DAY_MAX: number = 31;\r\n\r\n/**\r\n * The last hour of the day.\r\n */\r\nexport const HOUR_MAX: number = 23;\r\n\r\n/**\r\n * The last minute of the hour.\r\n */\r\nexport const MINUTE_MAX: number = 59;\r\n\r\n/**\r\n * The last second of the minute.\r\n */\r\nexport const SECOND_MAX: number = 59;\r\n\r\n/**\r\n * The last millisecond of the second.\r\n */\r\nexport const MILLIS_MAX: number = 999;\r\n\r\n/**\r\n * The last day of the week.\r\n */\r\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\r\nimport { currentLocale } from '../../locales';\r\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\r\nimport { isDate, isNumber, isString } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport type Unit = \r\n  'millis' | \r\n  'second' | \r\n  'minute' | \r\n  'hour' | \r\n  'day' | \r\n  'week' | \r\n  'month' |\r\n  'quarter' |\r\n  'year';\r\n\r\nexport type UnitRecord<T> = Record<Unit, T>;\r\n\r\nexport type Adjuster = (value: number) => number;\r\n\r\nexport const adjusters: Record<string, Adjuster> = \r\n{\r\n  none:     (value) => value,\r\n  floor:    (value) => Math.floor(value),\r\n  ceil:     (value) => Math.ceil(value),\r\n  round:    (value) => Math.round(value),\r\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\r\n};\r\n\r\nexport type Getter = (x: Date) => number;\r\n\r\nexport const getters: Record<string, Getter> = \r\n{\r\n  timestamp:            d => d.valueOf(),\r\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\r\n  millis:               d => d.getMilliseconds(),\r\n  second:               d => d.getSeconds(),\r\n  minute:               d => d.getMinutes(),\r\n  hour:                 d => d.getHours(),\r\n  day:                  d => d.getDay(),\r\n  dayOfMonth:           d => d.getDate(),\r\n  lastDayOfMonth:       getLastDayOfMonth,\r\n  dayOfYear:            getDayOfYear,\r\n  dayOfWeek:            getDayOfWeek,\r\n  week:                 getWeekOfYear,\r\n  weekOfMonth:          getWeekOfMonthISO,\r\n  weekspanOfMonth:      getWeekspanOfMonth,\r\n  fullWeekOfMonth:      getFullWeekOfMonth,\r\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\r\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\r\n  weekOfYear:           getWeekOfYearISO,\r\n  weekspanOfYear:       getWeekspanOfYear,\r\n  fullWeekOfYear:       getFullWeekOfYear,\r\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\r\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\r\n  month:                d => d.getMonth(),\r\n  quarter:              getQuarter,\r\n  year:                 d => d.getFullYear(),\r\n  timeIdentifier:       getTimeIdentifier,\r\n  dayIdentifier:        getDayIdentifier,\r\n  weekIdentifier:       getWeekIdentifier,\r\n  monthIdentifier:      getMonthIdentifier,\r\n  quarterIdentifier:    getQuarterIdentifier,\r\n};\r\n\r\nexport type Setter = (x: Date, value: number) => void;\r\n\r\nexport const setters: Record<string, Setter> = \r\n{\r\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\r\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\r\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\r\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\r\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\r\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\r\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\r\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\r\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\r\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\r\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\r\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\r\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\r\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\r\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\r\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\r\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\r\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\r\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\r\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\r\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\r\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\r\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\r\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\r\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\r\n};\r\n\r\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const startOf: UnitRecord<Starter> = \r\n{\r\n  millis:   x => x,\r\n  second:   startOfSecond,\r\n  minute:   startOfMinute,\r\n  hour:     startOfHour,\r\n  day:      startOfDay,\r\n  week:     startOfWeek,\r\n  month:    startOfMonth,\r\n  quarter:  startOfQuarter,\r\n  year:     startOfYear,\r\n};\r\n\r\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const endOf: UnitRecord<Ender> = \r\n{\r\n  millis:   x => x,\r\n  second:   endOfSecond,\r\n  minute:   endOfMinute,\r\n  hour:     endOfHour,\r\n  day:      endOfDay,\r\n  week:     endOfWeek,\r\n  month:    endOfMonth,\r\n  quarter:  endOfQuarter,\r\n  year:     endOfYear,\r\n};\r\n\r\nexport type Adder = (x: Date, amount: number) => void;\r\n\r\nexport const add: UnitRecord<Adder> = \r\n{\r\n  millis:   addMilliseconds,\r\n  second:   addSeconds,\r\n  minute:   addMinutes,\r\n  hour:     addHours,\r\n  day:      addDays,\r\n  week:     addWeeks,\r\n  month:    addMonths,\r\n  quarter:  addQuarters,\r\n  year:     addYears,\r\n};\r\n\r\nexport type Differ = (a: Date, b: Date) => number;\r\n\r\nexport const diff: UnitRecord<Differ> = \r\n{\r\n  millis:   diffMilliseconds,\r\n  second:   diffSeconds,\r\n  minute:   diffMinutes,\r\n  hour:     diffHours,\r\n  day:      diffDays,\r\n  week:     diffWeeks,\r\n  month:    diffMonths,\r\n  quarter:  diffQuarters,\r\n  year:     diffYears,\r\n};\r\n\r\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\r\n{\r\n  const b = new Date(a.getTime());\r\n\r\n  mutator(b, options);\r\n\r\n  return b;\r\n}\r\n\r\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\r\n{\r\n  const starter = startOf[precision];\r\n  const x = mutate(a, starter, options);\r\n  const y = mutate(b, starter, options);\r\n\r\n  return x.getTime() - y.getTime();\r\n}\r\n\r\nexport type DateParserGroup = [number, number, number, number, number, number, number];\r\n\r\nexport const DateParsers: Array<{\r\n  pattern: RegExp;\r\n  groups: DateParserGroup;\r\n}> = [\r\n  { \r\n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [1, 2, 3, 5, 8, 10, 12 ],\r\n  },\r\n  { \r\n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [3, 1, 2, 5, 8, 10, 12 ],\r\n  }\r\n];\r\n\r\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\r\n{\r\n  if (isDate(value))\r\n  {\r\n    return value;\r\n  }\r\n\r\n  if (isNumber(value) && value > 0)\r\n  {\r\n    return new Date(value);\r\n  }\r\n\r\n  if (isString(value))\r\n  {\r\n    for (const parser of DateParsers)\r\n    {\r\n      const { pattern, groups } = parser;\r\n      const match = pattern.exec(value);\r\n\r\n      if (match) \r\n      {\r\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\r\n\r\n        for (let i = 0; i < times.length; i++) {\r\n          const x = parseInt(match[groups[i]]);\r\n          if (isFinite(x)) {\r\n            times[i] = i === 1 ? x - 1 : x;\r\n          }\r\n        }\r\n\r\n        return parseAsUTC\r\n          ? new Date(Date.UTC(...times))\r\n          : new Date(...times);\r\n      }\r\n    }\r\n\r\n    if (parseAsUTC)\r\n    {\r\n      const withUTC = value + ' UTC';\r\n      const parsedUTC = Date.parse(withUTC);\r\n\r\n      if (isFinite(parsedUTC))\r\n      {\r\n        return new Date(parsedUTC);\r\n      }\r\n    }\r\n\r\n    const parsed = Date.parse(value);\r\n\r\n    if (isFinite(parsed))\r\n    {\r\n      return new Date(parsed);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getTimeIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100000000\r\n       + (x.getMonth() + 1) * 1000000\r\n       + x.getDate() * 10000\r\n       + x.getHours() * 100\r\n       + x.getMinutes();\r\n}\r\n\r\nexport function getDayIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10000\r\n       + (x.getMonth() + 1) * 100\r\n       + x.getDate();\r\n}\r\n\r\nexport function getWeekIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 1000\r\n       + getWeekOfYear(x);\r\n}\r\n\r\nexport function getMonthIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100\r\n       + (x.getMonth() + 1);\r\n}\r\n\r\nexport function getQuarterIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10\r\n       + getQuarter(x);\r\n}\r\n\r\nexport function getLastDayOfMonth(x: Date): number\r\n{\r\n  return getDaysInMonth(x) - x.getDate() + 1;\r\n}\r\n\r\nexport function getLastWeekspanOfYear(x: Date): number\r\n{\r\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekspanOfYear(x: Date): number\r\n{\r\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\r\n}\r\n\r\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\r\n}\r\n\r\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const lastOfYear = mutate(x, endOfYear);\r\n  const week = getWeekOfYearISO(x, options);\r\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\r\n  const lastWeek = weekMax - week;\r\n\r\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \r\n    ? lastWeek + 1\r\n    : lastWeek;\r\n}\r\n\r\nexport function getWeekspanOfMonth(x: Date): number\r\n{\r\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getLastWeekspanOfMonth(x: Date): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\r\n  \r\n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { firstWeekContainsDate } = options;\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { weekStartsOn } = options;\r\n  const day = x.getDay();\r\n\r\n  return day < weekStartsOn \r\n    ? day - weekStartsOn + DAYS_IN_WEEK\r\n    : day - weekStartsOn;\r\n}\r\n\r\nexport function getDayOfYear(a: Date): number\r\n{\r\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\r\n}\r\n\r\nexport function getDateOffset(x: Date): number\r\n{\r\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\r\n}\r\n\r\nexport function isDaylightSavingTime(x: Date): boolean\r\n{\r\n  const offset = getDateOffset(x);\r\n\r\n  return (\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\r\n  );\r\n}\r\n\r\nexport function isLeapYear(x: Date): boolean\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\n\r\nexport function getDaysInYear(x: Date): number\r\n{\r\n  return isLeapYear(x) ? 366 : 365;\r\n}\r\n\r\nexport const daysInMonth = [\r\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\r\n];\r\n\r\nexport function getDaysInMonth(x: Date): number\r\n{\r\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\r\n}\r\n\r\nexport function getAbsoluteTimestamp(a: Date): number\r\n{\r\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\r\n}\r\n\r\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\r\n{\r\n  const b = new Date(a.getTime());\r\n  const offsetMinutes = b.getTimezoneOffset();\r\n\r\n  b.setSeconds(0, 0);\r\n\r\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\r\n\r\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\r\n}\r\n\r\nexport function getQuarter(x: Date): number\r\n{\r\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function startOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(0);\r\n}\r\n\r\nexport function startOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(0, 0);\r\n}\r\n\r\nexport function startOfHour(x: Date): void\r\n{\r\n  x.setMinutes(0, 0, 0);\r\n}\r\n\r\nexport function startOfDay(x: Date): void\r\n{\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() - dayOfWeek);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfMonth(x: Date): void\r\n{\r\n  x.setDate(DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfYear(x: Date): void\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  x.setTime(0);\r\n  x.setFullYear(year, 0, 1);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function endOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(MILLIS_MAX);\r\n}\r\n\r\nexport function endOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfHour(x: Date): void\r\n{\r\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfDay(x: Date): void\r\n{\r\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfMonth(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfYear(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function addMilliseconds(x: Date, amount: number): void\r\n{\r\n  x.setTime(x.getTime() + amount);\r\n}\r\n\r\nexport function addSeconds(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\r\n}\r\n\r\nexport function addMinutes(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\r\n}\r\n\r\nexport function addHours(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\r\n}\r\n\r\nexport function addDays(x: Date, amount: number): void\r\n{\r\n  x.setDate(x.getDate() + amount);\r\n}\r\n\r\nexport function addWeeks(x: Date, amount: number): void\r\n{\r\n  addDays(x, amount * DAYS_IN_WEEK);\r\n}\r\n\r\nexport function addMonths(x: Date, amount: number): void\r\n{\r\n  const month = x.getMonth() + amount;\r\n\r\n  const y = new Date(0)\r\n  y.setFullYear(y.getFullYear(), month, 1)\r\n  y.setHours(0, 0, 0, 0)\r\n  const dayMax = getDaysInMonth(y);\r\n\r\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\r\n}\r\n\r\nexport function addQuarters(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function addYears(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_YEAR);\r\n}\r\n\r\nexport function diffMilliseconds(a: Date, b: Date): number\r\n{\r\n  return a.getTime() - b.getTime();\r\n}\r\n\r\nexport function diffSeconds(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\r\n}\r\n\r\nexport function diffMinutes(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\r\n}\r\n\r\nexport function diffHours(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\r\n}\r\n\r\nexport function diffDays(a: Date, b: Date): number \r\n{\r\n  const leftTimestamp = getAbsoluteTimestamp(a);\r\n  const rightTimestamp = getAbsoluteTimestamp(b);\r\n\r\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\r\n}\r\n\r\nexport function diffWeeks(a: Date, b: Date): number\r\n{\r\n  return diffDays(a, b) / DAYS_IN_WEEK;\r\n}\r\n\r\nexport function diffMonths(a: Date, b: Date): number\r\n{\r\n  const years = a.getFullYear() - b.getFullYear();\r\n  const months = a.getMonth() - b.getMonth();\r\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\r\n\r\n  return years * MONTHS_IN_YEAR + months + date;\r\n}\r\n\r\nexport function diffQuarters(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\r\n}\r\n\r\nexport function diffYears(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\r\n}\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\r\n\r\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\r\n\r\nconst ops = DateOperations;\r\n\r\nexport const DateOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  now: ops.set('now'),\r\n\r\n  today: ops.set('today'),\r\n\r\n  tomorrow: ops.set('today+'),\r\n\r\n  yesterday: ops.set('today-'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromTimestamp: ops.set('>tms', {}, ['value']),\r\n\r\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\r\n\r\n  min: ops.set('min', {}, ['value', 'test']),\r\n\r\n  max: ops.set('max', {}, ['value', 'test']),\r\n\r\n  get: ops.set('get', {}, ['value', 'property']),\r\n\r\n  set: ops.set('set', {}, ['value', 'property', 'set']),\r\n\r\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\r\n\r\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\r\n\r\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  daysInMonth: ops.set('dim', {}, ['value']),\r\n\r\n  daysInYear: ops.set('diy', {}, ['value']),\r\n\r\n  weeksInYear: ops.set('wiy', {}, ['value']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\r\n\r\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\r\n\r\n  timezoneOffset: ops.set('offset', {}, ['value']),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.set('toText', {}, ['value', 'format']),\r\n\r\n  toISOText: ops.set('toISOText', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n \r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\r\n\r\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\r\n\r\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  isDST: ops.set('dst?', {}, ['value']),\r\n\r\n  isLeapYear: ops.set('leap?', {}, ['value']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\r\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\r\n\r\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\r\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\r\n\r\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\r\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\r\n\r\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\r\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\r\n\r\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\r\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\r\n\r\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\r\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\r\n\r\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\r\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\r\n\r\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\r\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\r\n\r\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\r\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\r\n\r\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\r\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\r\n\r\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\r\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\r\n\r\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\r\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\r\n\r\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\r\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\r\n\r\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\r\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\r\n\r\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\r\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\r\n\r\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\r\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\r\n\r\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\r\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\r\n\r\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\r\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\r\n\r\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\r\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\r\n\r\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\r\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\r\n\r\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\r\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\r\n\r\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\r\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\r\n\r\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\r\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\r\n\r\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\r\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\r\n\r\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\r\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\r\n\r\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\r\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\r\n\r\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\r\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\r\n\r\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\r\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\r\n\r\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\r\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\r\n\r\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\r\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\r\n\r\n\r\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\r\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\r\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\r\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\r\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\r\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\r\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\r\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\r\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\r\nDateComputeds.set('daysInYear', DateOps.daysInYear);\r\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\r\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\r\nDateComputeds.set('toISOText', DateOps.toISOText);\r\nDateComputeds.set('isDST', DateOps.isDST);\r\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\r\n","\r\nimport { isDate, isEmpty, isObject, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\r\nimport { Expression } from '../Expression';\r\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\nexport interface DateOptions \r\n{\r\n  parseAsUTC?: boolean;\r\n  validateMin?: Date;\r\n  validateMax?: Date;\r\n  forceMin?: Date;\r\n  forceMax?: Date;\r\n  forceStartOf?: Unit;\r\n  forceEndOf?: Unit;\r\n  withTime?: boolean;\r\n}\r\n\r\nexport class DateType extends Type<DateOptions> \r\n{\r\n\r\n  public static id = ID.Date;\r\n\r\n  public static operations = DateOperations;\r\n\r\n  public static computeds = DateComputeds;\r\n\r\n  public static baseType = new DateType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): DateType \r\n  {\r\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: DateType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): DateOptions\r\n  {\r\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\r\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\r\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\r\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: DateOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n\r\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\r\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\r\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\r\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isDate(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new DateType({\r\n      validateMin: new Date(data.getTime()),\r\n      validateMax: new Date(data.getTime())\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 9;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n\r\n        if (at) {\r\n          return a.getTime() - b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return false;\r\n\r\n        if (at) {\r\n          return a.getTime() === b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\r\n          return new Date(json.value);\r\n        }\r\n      },\r\n      toJson: (json: Date) => {\r\n        if (isDate(json)) {\r\n          return { $any: 'date', value: json.toISOString() };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, _, setObjectCopy) => {\r\n        if (isDate(x)) {\r\n          const newDate = new Date(x.getTime());\r\n\r\n          setObjectCopy(x, newDate);\r\n  \r\n          return newDate;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DateType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return DateType.operations.map;\r\n  }\r\n\r\n  public merge(type: DateType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\r\n    \r\n    if (o1.validateMin && o2.validateMin)\r\n    {\r\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\r\n    }\r\n\r\n    if (o1.validateMax && o2.validateMax)\r\n    {\r\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof DateType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      if (other.options.withTime && !this.options.withTime)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const min = this.getMin();\r\n      const otherMin = other.getMin();\r\n\r\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.getMax();\r\n      const otherMax = other.getMax();\r\n\r\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const { forceStartOf, forceEndOf } = this.options;\r\n\r\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { parseAsUTC, withTime } = this.options;\r\n\r\n    this.options = { parseAsUTC, withTime };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    const { parseAsUTC, validateMin, validateMax } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMin && parsed.getTime() < validateMin.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMax && parsed.getTime() > validateMax.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    if (forceMin && parsed.getTime() < forceMin.getTime())\r\n    {\r\n      parsed.setTime(forceMin.getTime());\r\n    }\r\n    \r\n    if (forceMax && parsed.getTime() > forceMax.getTime())\r\n    {\r\n      parsed.setTime(forceMax.getTime());\r\n    }\r\n\r\n    if (forceStartOf)\r\n    {\r\n      startOf[forceStartOf](parsed);\r\n    }\r\n\r\n    if (forceEndOf)\r\n    {\r\n      endOf[forceEndOf](parsed);\r\n    }\r\n\r\n    return parsed;\r\n  }\r\n\r\n  public newInstance(): DateType\r\n  {\r\n    return new DateType({});\r\n  }\r\n\r\n  public clone(): DateType\r\n  {\r\n    return new DateType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DateType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return new Date();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const value = new Date();\r\n\r\n    const min = this.getMin();\r\n    const max = this.getMax();\r\n\r\n    const start = min ? min.getTime() : value.getTime();\r\n    const end = max ? max.getTime() : value.getTime();\r\n\r\n    return new Date(rnd(start, end, true));\r\n  }\r\n\r\n  public getMin(): Date | undefined\r\n  {\r\n    return this.options.validateMin || this.options.forceMin;\r\n  }\r\n\r\n  public getMax(): Date | undefined\r\n  {\r\n    return this.options.validateMax || this.options.forceMax;\r\n  }\r\n\r\n  public fromJson(json: string): Date\r\n  {\r\n    return new Date(json);\r\n  }\r\n\r\n  public toJson(value: Date): string\r\n  {\r\n    return value ? value.toISOString() : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations, OperationGeneric } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { isSameClass, isNumber } from '../fns';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_MANY = 1;\r\n\r\nexport class ManyType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Many;\r\n\r\n  public static operations = new Operations(ID.Many + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\r\n\r\n  public static baseType = new ManyType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ManyType \r\n  {\r\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\r\n\r\n    return new ManyType(many);\r\n  }\r\n\r\n  public static encode(type: ManyType): any \r\n  {\r\n    const many = type.options.map(t => t.encode());\r\n\r\n    return [this.id, many];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public operations?: Record<string, OperationGeneric>;\r\n\r\n  public getOperations()\r\n  {\r\n    if (!this.operations)\r\n    {\r\n      this.operations = {};\r\n\r\n      this.options.forEach(many => \r\n      {\r\n        const ops = many.getOperations();\r\n        \r\n        for (const prop in ops) \r\n        {\r\n          this.operations[prop] = ops[prop];\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.operations;\r\n  }\r\n\r\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const many = this.options;\r\n\r\n    for (const type of many)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ManyType.id;\r\n  }\r\n\r\n  public merge(type: ManyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    for (const sub of this.options)\r\n    {\r\n      const subType = sub.getSubType(expr, def, context);\r\n\r\n      if (subType)\r\n      {\r\n        return subType;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const subs: TypeSub[] = [];\r\n\r\n    this.options.forEach(type => {\r\n      type.getSubTypes(def).forEach(sub => {\r\n        const matching = subs.find(existing => \r\n          existing.key === sub.key || (\r\n            existing.key instanceof Type && \r\n            sub.key instanceof Type && \r\n            isSameClass(existing.key, sub.key)\r\n          )\r\n        );\r\n\r\n        if (!matching) {\r\n          subs.push(sub);\r\n        }\r\n      });\r\n    });\r\n\r\n    subs.sort((a, b) => {\r\n      const ad = a.key instanceof Type ? 1 : 0;\r\n      const bd = b.key instanceof Type ? 1 : 0;\r\n\r\n      return ad - bd;\r\n    });\r\n\r\n    return subs;\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.length === 1\r\n      ? this.options[0]\r\n      : this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.isOptional()\r\n      ? new ManyType(this.options.map((o) => o.getRequired()))\r\n      : this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options[0].getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...this.options.map((t) => t.getValidateExpression())\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'), \r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = sub type index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (hasFrom && !hasTo) // removed\r\n    {\r\n      const targetType = from === 0 ? this.options[1] : this.options[0];\r\n      const valueType = this.options[from];\r\n      const casting = Exprs.cast(valueType, targetType);\r\n\r\n      return Exprs\r\n        .if(targetType.getValidateExpression())\r\n        .than(Exprs.get('value'))\r\n        .else(casting)\r\n      ;\r\n    }\r\n    else if (!hasFrom && hasTo) // added\r\n    {\r\n      return newValue;\r\n    }\r\n    else if (to === from && hasFrom) // change\r\n    {\r\n      return Exprs\r\n        .if(Exprs.not(this.getValidateExpression()))\r\n        .than(newValue)\r\n        .else(Exprs.get('value'))\r\n      ;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\r\n  }\r\n\r\n  public newInstance(): ManyType\r\n  {\r\n    return new ManyType([]);\r\n  }\r\n\r\n  public clone(): ManyType\r\n  {\r\n    return new ManyType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ManyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options.length > 0\r\n      ? this.options[0].create()\r\n      : null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const options = this.options;\r\n    const chosen = rnd(0, options.length, true);\r\n\r\n    return options[chosen].random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      const parsed = many.normalize(json);\r\n\r\n      if (parsed !== null && parsed !== undefined)\r\n      {\r\n        return parsed;\r\n      }\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      if (many.isValid(value))\r\n      {\r\n        return many.toJson(value);\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { isObject, isMap, isSameClass, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { TextType } from './Text';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_KEY = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface MapOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n}\r\n\r\nexport class MapType extends Type<MapOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Map;\r\n\r\n  public static operations = MapOperations;\r\n\r\n  public static computeds = MapComputeds;\r\n\r\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): MapType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\r\n\r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public static encode(type: MapType): any \r\n  {\r\n    const { key, value } = type.options;\r\n\r\n    return key !== TextType.baseType\r\n      ? [this.id, value.encode()]\r\n      : [this.id, value.encode(), key.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isMap(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let key: Type = new AnyType({});\r\n    let value: Type = new AnyType({});\r\n\r\n    const type = new MapType({ key, value });\r\n\r\n    cache.set(data, type);\r\n\r\n    for (const [entryKey, entryValue] of data.entries())\r\n    {\r\n      key = describer.merge(key, entryKey);\r\n      value = describer.merge(value, entryValue);\r\n    }\r\n\r\n    type.options.key = key;\r\n    type.options.value = value;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 10;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\r\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isMap(json)) {\r\n          return {\r\n            $any: 'map',\r\n            value: Array.from(json.entries())\r\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isMap(x)) {\r\n          const newMap = new Map();\r\n\r\n          setObjectCopy(x, newMap);\r\n  \r\n          for (const [key, value] of x.entries()) {\r\n            newMap.set(copy(key), copy(value));\r\n          }\r\n  \r\n          return newMap;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          let less = 0;\r\n          let more = 0;\r\n\r\n          for (const key of a.keys()) {\r\n            if (!b.has(key)) {\r\n              less++;\r\n            }\r\n          }\r\n\r\n          for (const key of b.keys()) {\r\n            if (!a.has(key)) {\r\n              more++;\r\n            } else {\r\n              const c = compare(a.get(key), b.get(key));\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n          }\r\n\r\n          return DataTypes.getCompare(less, more);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return false;\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          if (a.size !== b.size) {\r\n            return false;\r\n          }\r\n\r\n          for (const [key, value] of a.entries()) {\r\n            if (!b.has(key)) {\r\n              return false;\r\n            } else if (!equals(value, b.get(key))) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<Map<any, any>>({\r\n      priority,\r\n      isValid: (value) => isMap(value),\r\n      get: (value, step) => value.get(step),\r\n      set: (value, step, stepValue) => value.set(step, stepValue),\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    const key = Types.parse(keyOrClass);\r\n    \r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MapType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return MapType.operations.map;\r\n  }\r\n\r\n  public merge(type: MapType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.key = Types.merge(o1.key, o2.key);\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (this.options.key.isValid(expr.value))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (isSameClass(exprType, this.options.key))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: this.options.key, value: this.options.value },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof MapType && \r\n      this.options.key.isCompatible(other.options.key, options) && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === MapType.STEP_KEY\r\n      ? this.options.key\r\n      : step === MapType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.key.removeDescribedRestrictions();\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(MapOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.value.getValidateExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === MapType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Map || isObject(test))\r\n    {\r\n      const { key, value } = this.options;\r\n\r\n      return this.iterate(test, true, (k, v) => {\r\n        if (!key.isValid(k) || !value.isValid(v)) {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const entries: [any, any][] = [];\r\n\r\n    this.iterate(test, undefined, (k, v) => {\r\n      entries.push([\r\n        key.normalize(k),\r\n        value.normalize(v)\r\n      ]);\r\n    });\r\n\r\n    return new Map(entries);\r\n  }\r\n\r\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\r\n  {\r\n    if (map instanceof Map)\r\n    {\r\n      for (const [key, value] of map.entries())\r\n      {\r\n        const result = onItem(key, value);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    else if (isObject(map))\r\n    {\r\n      for (const prop of map)\r\n      {\r\n        const result = onItem(prop, map[prop]);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return otherwise;\r\n  }\r\n\r\n  public newInstance(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MapType.encode(this);\r\n  }\r\n\r\n  public create(): Map<any, any>\r\n  {\r\n    return new Map();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Map<any, any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const k = key.random(rnd);\r\n      const v = value.random(rnd);\r\n\r\n      out.set(k, v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<[any, any]>): Map<any, any>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new Map(json.map(([k, v]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n  }\r\n\r\n  public toJson(map: Map<any, any>): Array<[any, any]>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return Array.from(map.entries()).map(([k, v]) => [\r\n      key.toJson(k),\r\n      value.toJson(v)\r\n    ]);\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { Types } from '../Types';\r\nimport { AnyType } from './Any';\r\n\r\n\r\nconst INDEX_TYPE = 1;\r\nconst RANDOM_CHANCE = 0.3;\r\n\r\nexport class OptionalType extends Type<Type>\r\n{\r\n\r\n  public static STEP_OPTIONAL = 'optional';\r\n\r\n  public static id = ID.Optional;\r\n\r\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\r\n\r\n  public static baseType = new OptionalType(AnyType.baseType);\r\n\r\n  public static decode(data: any[], types: TypeProvider): OptionalType \r\n  {\r\n    const type = types.getType(data[INDEX_TYPE]);\r\n\r\n    return new OptionalType( type );\r\n  }\r\n\r\n  public static encode(type: OptionalType): any \r\n  {\r\n    return [this.id, type.options.encode()];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(type: TypeInput): OptionalType\r\n  {\r\n    return new OptionalType(Types.parse(type));\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OptionalType.id;\r\n  }\r\n\r\n  public merge(type: OptionalType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.options.getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.options;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof OptionalType\r\n      ? this.options.isCompatible(other.options, options)\r\n      : this.options.isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === OptionalType.STEP_OPTIONAL\r\n      ? this.options\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'),\r\n        test: Exprs.undefined(),\r\n      }),\r\n      this.options.getValidateExpression(),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.define({\r\n      valueMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n      testMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('test'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n    }, Exprs\r\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\r\n      .than(Exprs.compareEqual())\r\n      .if(Exprs.get('valueMissing'))\r\n      .than(Exprs.compareLess())\r\n      .if(Exprs.get('testMissing'))\r\n      .than(Exprs.compareGreater())\r\n      .else(this.options.getCompareExpression()),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = optional\r\n    return Exprs\r\n      .if(this.options.getValidateExpression())\r\n      .than(newValue)\r\n      .else(Exprs.get('value'))\r\n    ;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null \r\n      || value === undefined\r\n      || this.options.isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value === null || value === undefined\r\n      ? value\r\n      : this.options.normalize(value);\r\n  }\r\n\r\n  public newInstance(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.newInstance());\r\n  }\r\n\r\n  public clone(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.clone());\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OptionalType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options ? this.options.create() : undefined;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\r\n      ? this.options.random(rnd)\r\n      : undefined;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NOT = 1;\r\n\r\nexport class NotType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Not;\r\n\r\n  public static operations = new Operations(ID.Not + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\r\n\r\n  public static baseType = new NotType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): NotType \r\n  {\r\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\r\n\r\n    return new NotType(not);\r\n  }\r\n\r\n  public static encode(type: NotType): any \r\n  {\r\n    const not = type.options.map(t => t.encode());\r\n\r\n    return [this.id, not];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getOperations()\r\n  { \r\n    return {};\r\n  }\r\n\r\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const not = this.options;\r\n\r\n    for (const type of not)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotType.id;\r\n  }\r\n\r\n  public merge(type: NotType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\r\n  }\r\n\r\n  public newInstance(): NotType\r\n  {\r\n    return new NotType([]);\r\n  }\r\n\r\n  public clone(): NotType\r\n  {\r\n    return new NotType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return AnyType.baseType.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return AnyType.baseType.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\r\n\r\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\r\n\r\nconst ops = ColorOperations;\r\n\r\n\r\nexport const ColorOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create', {}),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\r\n\r\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  clamp: ops.set('clamp', {}, ['value']),\r\n\r\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\r\n\r\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  format: ops.set('format', {}, ['value', 'format']),\r\n\r\n  parse: ops.set('parse', {}, ['value']),\r\n\r\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\r\n\r\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\r\n\r\n  darken: ops.set('darken', {}, ['value', 'amount']),\r\n\r\n  toHSL: ops.set('->hsl', {}, ['value']),\r\n\r\n  fromHSL: ops.set('<-hsl', {}, ['value']),\r\n\r\n  luminance: ops.set('luminance', {}, ['value']),\r\n\r\n  contrast: ops.set('contrast', {}, ['value', 'test']),\r\n\r\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\r\n\r\n  opaque: ops.set('opaque', {}, ['value']),\r\n\r\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\r\n\r\n  distance: ops.set('distance', {}, ['value', 'test']),\r\n\r\n  named: ops.set('named', {}, ['name']),\r\n\r\n  getName: ops.set('getName', {}, ['value']),\r\n\r\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nColorComputeds.set('toHSL', ColorOps.toHSL);\r\nColorComputeds.set('luminance', ColorOps.luminance);\r\nColorComputeds.set('inverted', ColorOps.invert);\r\nColorComputeds.set('opaque', ColorOps.opaque);\r\nColorComputeds.set('name', ColorOps.getName);","\r\nimport { isObject, isNumber, clamp } from '../../fns';\r\n\r\n\r\nexport const COMPONENT_MIN = 0;\r\nexport const COMPONENT_MAX = 255;\r\n\r\nexport interface Color\r\n{\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n}\r\n\r\nexport function isColor(x: any): x is Color\r\n{\r\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\r\n}\r\n\r\nexport function clampComponent(x: number): number\r\n{\r\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\r\n}","\r\nimport { Color } from './Color';\r\nimport { Type } from '../../Type';\r\n\r\n\r\n\r\nexport type ColorSpaceToColor<T> = (color: T) => Color;\r\n\r\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\r\n\r\nexport type ColorFormatParser<T> = (value: any) => T | null;\r\n\r\nexport type ColorFormatFormatter<T> = (color: T) => any;\r\n\r\n\r\nexport interface ColorFormat<T>\r\n{\r\n  code: string;\r\n  name: string;\r\n  parser: ColorFormatParser<T>;\r\n  formatter: ColorFormatFormatter<T>;\r\n}\r\n\r\n\r\nexport class ColorSpace<T>\r\n{\r\n  public code: string;\r\n  public name: string;\r\n  public type: Type;\r\n  public toColor: ColorSpaceToColor<T>;\r\n  public fromColor: ColorSpaceFromColor<T>;\r\n  public formatMap: Record<string, ColorFormat<T>>;\r\n  public formats: ColorFormat<T>[];\r\n\r\n  public constructor(code: string, name: string)\r\n  {\r\n    this.code = code;\r\n    this.name = name;\r\n    this.formatMap = {};\r\n    this.formats = [];\r\n  }\r\n\r\n  public setType(type: Type): this\r\n  {\r\n    this.type = type;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setToColor(toColor: ColorSpaceToColor<T>): this\r\n  {\r\n    this.toColor = toColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\r\n  {\r\n    this.fromColor = fromColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addFormat(format: ColorFormat<T>): this\r\n  {\r\n    this.formatMap[format.code] = format;\r\n    this.formats.push(format);\r\n\r\n    return this;\r\n  }\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\r\nimport { isString, pad } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\r\n  .setToColor((color) => color)\r\n  .setFromColor((color) => color)\r\n  .addFormat({\r\n    code: 'default',\r\n    name: 'Default',\r\n    parser: (data) => {\r\n      if (!isColor(data)) {\r\n        return null;\r\n      }\r\n\r\n      return data;\r\n    },\r\n    formatter: (color) => {\r\n      return color;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'bestfit',\r\n    name: 'Best Fit',\r\n    parser: (data) => {\r\n      return null;\r\n    },\r\n    formatter: (color) => {\r\n      if (color.a === COMPONENT_MAX) {\r\n        const r = formatHex(color.r);\r\n        const g = formatHex(color.g);\r\n        const b = formatHex(color.b);\r\n\r\n        return '#' + r + g + b;\r\n      } else {\r\n        const r = clampComponent(color.r);\r\n        const g = clampComponent(color.g);\r\n        const b = clampComponent(color.b);\r\n        const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n      }\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexShort',\r\n    name: 'Hex (#rgb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r + r, 16),\r\n        g: parseInt(g + g, 16),\r\n        b: parseInt(b + b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r).substring(0, 1);\r\n      const g = formatHex(color.g).substring(0, 1);\r\n      const b = formatHex(color.b).substring(0, 1);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hex',\r\n    name: 'Hex (#rrggbb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexLong',\r\n    name: 'Hex (#rrggbbaa)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: parseInt(a, 16),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n      const a = formatHex(color.a);\r\n\r\n      return '#' + r + g + b + a;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgb',\r\n    name: 'rgb(r, g, b)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n\r\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgba',\r\n    name: 'rgba(r, g, b, a)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction parseComponent(x: string): number\r\n{\r\n  return x.indexOf('%') === -1\r\n    ? clampComponent(parseInt(x, 10))\r\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\r\n}\r\n\r\nfunction formatHex(x: number)\r\n{\r\n  return pad(clampComponent(x).toString(16), 2, '0', true);\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { COMPONENT_MAX, clampComponent } from './Color';\r\nimport { isString, clamp, isObject, isNumber } from '../../fns';\r\nimport { NumberType } from '../../types/Number';\r\nimport { ObjectType } from '../../types/Object';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\r\n\r\n\r\nexport function isColorHSL(x: any): x is ColorHSL\r\n{\r\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\r\n}\r\n\r\n\r\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\r\n  .setType(new ObjectType({props: {\r\n    h: new NumberType({ min: 0, max: 360, whole: true }),\r\n    s: new NumberType({ min: 0, max: 100, whole: true }),\r\n    l: new NumberType({ min: 0, max: 100, whole: true }),\r\n    a: new NumberType({ min: 0, max: 255, whole: true }),\r\n  }}))\r\n  .setToColor((color) => {\r\n    const H = normalizeHue(color.h);\r\n    const L = clampPercent(color.l) / 100;\r\n    const S = clampPercent(color.s) / 100;\r\n    const C = (1 - Math.abs(2 * L - 1)) * S;\r\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\r\n    const m = L - C / 2;\r\n    const r1 = H < 60 || H >= 300\r\n      ? C\r\n      : H >= 120 && H < 240\r\n        ? 0\r\n        : X;\r\n    const g1 = H >= 240\r\n      ? 0\r\n      : H >= 60 && H < 180\r\n        ? C\r\n        : X;\r\n    const b1 = H <= 120\r\n      ? 0\r\n      : H >= 180 && H < 300\r\n        ? C\r\n        : X;\r\n\r\n    return {\r\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\r\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\r\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\r\n      a: color.a\r\n    };\r\n  })\r\n  .setFromColor((color) => {\r\n    const R = clampComponent(color.r);\r\n    const G = clampComponent(color.g);\r\n    const B = clampComponent(color.b);\r\n    const r1 = R / COMPONENT_MAX;\r\n    const g1 = G / COMPONENT_MAX;\r\n    const b1 = B / COMPONENT_MAX;\r\n    const Cmax = Math.max(r1, g1, b1);\r\n    const Cmin = Math.min(r1, g1, b1);\r\n    const delta = Cmax - Cmin;\r\n    const L = (Cmax + Cmin) / 2;\r\n    const h = delta === 0\r\n      ? 0\r\n      : Cmax === r1\r\n        ? ((g1 - b1) / delta) % 6\r\n        : Cmax === g1\r\n          ? ((b1 - r1) / delta) + 2\r\n          : ((r1 - g1) / delta) + 4;\r\n    const s = delta === 0\r\n      ? 0\r\n      : delta / (1 - Math.abs(2 * L - 1));\r\n\r\n    return {\r\n      h: normalizeHue(Math.round(h * 60)),\r\n      s: clampPercent(Math.round(s * 100)),\r\n      l: clampPercent(Math.round(L * 100)),\r\n      a: color.a,\r\n    };\r\n  })\r\n  .addFormat({\r\n    code: 'hsl',\r\n    name: 'HSL',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n\r\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hsla',\r\n    name: 'HSLA',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l, a] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction normalizeHue(h: number): number\r\n{\r\n  return h < 0 \r\n    ? 360 - Math.abs(h % 360)\r\n    : h % 360;\r\n}\r\n\r\nfunction clampPercent(x: number)\r\n{\r\n  return clamp(x, 0, 100);\r\n}","\r\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\r\nimport { ID } from './ID';\r\nimport { NumberType } from './Number';\r\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\r\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\r\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\r\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\r\nimport { ObjectType, ObjectOptions } from './Object';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\n\r\nexport interface ColorOptions extends ObjectOptions\r\n{\r\n  hasAlpha?: boolean;\r\n}\r\n\r\n\r\nexport class ColorType extends ObjectType<ColorOptions>\r\n{\r\n\r\n  public static readonly componentType = new NumberType({ \r\n    min: COMPONENT_MIN, \r\n    max: COMPONENT_MAX, \r\n    whole: true \r\n  });\r\n\r\n  public static readonly componentProps = {\r\n    r: ColorType.componentType,\r\n    g: ColorType.componentType,\r\n    b: ColorType.componentType,\r\n    a: ColorType.componentType,\r\n  };\r\n\r\n  public static spaces: ColorSpace<any>[] = [\r\n    ColorSpaceRGB,\r\n    ColorSpaceHSL,\r\n  ];\r\n\r\n  public static id = ID.Color;\r\n\r\n  public static operations = ColorOperations;\r\n\r\n  public static computeds = ColorComputeds;\r\n\r\n  public static baseType = new ColorType({ hasAlpha: true });\r\n\r\n  public static decode(data: any[]): ColorType \r\n  {\r\n    return new ColorType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: ColorType): any \r\n  {\r\n    return type.options.hasAlpha\r\n      ? [this.id, { hasAlpha: true }]\r\n      : this.id;\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    const parsed = ColorType.baseType.normalize(data);\r\n\r\n    if (!parsed)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new ColorType({\r\n      hasAlpha: parsed.a !== COMPONENT_MAX,\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static getFormat(id: string): ColorFormat<any> | undefined\r\n  {\r\n    const [spaceId, formatId] = id.split(':');\r\n    const space = this.spaces.find((s) => s.code === spaceId);\r\n\r\n    return space\r\n      ? space.formatMap[formatId]\r\n      : undefined;\r\n  }\r\n\r\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\r\n  {\r\n    super({\r\n      ...colorOptions,\r\n      props: ColorType.componentProps,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ColorType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ColorType.operations.map;\r\n  }\r\n\r\n  public merge(type: ColorType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (other instanceof ColorType)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.strict && \r\n        !options.exact &&\r\n        other instanceof ObjectType &&\r\n        other.isCompatible(this)) \r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    super.removeDescribedRestrictions();\r\n\r\n    delete this.options.hasAlpha;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.normalize(value) !== undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    for (const space of ColorType.spaces)\r\n    {\r\n      for (const formats of space.formats)\r\n      {\r\n        const parsed = formats.parser(value);\r\n\r\n        if (parsed !== null)\r\n        {\r\n          return space.toColor(parsed);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public newInstance(): ColorType\r\n  {\r\n    return new ColorType({});\r\n  }\r\n\r\n  public clone(): ColorType\r\n  {\r\n    return new ColorType({\r\n      hasAlpha: this.options.hasAlpha,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ColorType.encode(this);\r\n  }\r\n\r\n  public create(): Color\r\n  {\r\n    return { r: 0, g: 0, b: 0, a: 0 };\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\r\n  {\r\n    return {\r\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      a: COMPONENT_MAX,\r\n    };\r\n  }\r\n\r\n  public fromJson(json: Color): Color\r\n  {\r\n    return {\r\n      r: json.r,\r\n      g: json.g,\r\n      b: json.b,\r\n      a: json.a,\r\n    };\r\n  }\r\n\r\n  public toJson(value: Color): Color\r\n  {\r\n    return value ? {\r\n      r: value.r,\r\n      g: value.g,\r\n      b: value.b,\r\n      a: value.a,\r\n    } : null;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Set RGB color space type.\r\n */\r\nColorSpaceRGB.setType(ColorType.baseType);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\r\n\r\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\r\n\r\nconst ops = SetOperations;\r\n\r\nexport const SetOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\r\n\r\n  has: ops.set('has', {}, ['set', 'value']),\r\n\r\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\r\n\r\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\r\n\r\n  count: ops.set('count', { }, ['set']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nSetComputeds.set('copy', SetOps.copy);\r\nSetComputeds.set('values', SetOps.values);\r\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { FuncOptions, Func } from './Func';\r\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\r\nimport { Type, TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Exprs } from './Exprs';\r\nimport { Runtime } from './Runtime';\r\nimport { EnumType } from './types/Enum';\r\nimport { Relation } from './Relation';\r\nimport { ListOps } from './ops/ListOps';\r\nimport { AnyOps } from './ops/AnyOps';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface EntityOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  type: any;\r\n  instances: any[];\r\n  primaryType?: EntityPrimaryType,\r\n  key?: any;\r\n  describe?: any;\r\n  transcoders?: Record<string, EntityTranscoderOptions>;\r\n  indexes?: Record<string, EntityIndexOptions>;\r\n  methods?: Record<string, Func | FuncOptions>;\r\n}\r\n\r\nexport interface EntityIndex\r\n{\r\n  name: string;\r\n  props: string[];\r\n  types?: Type[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityIndexOptions\r\n{\r\n  props: string[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityTranscoder\r\n{\r\n  encode: Expression;\r\n  decode: Expression;\r\n  encodedType: Type;\r\n}\r\n\r\nexport interface EntityTranscoderOptions\r\n{\r\n  encode: any;\r\n  decode: any;\r\n  encodedType: any;\r\n}\r\n\r\nexport type EntityPropPair = [string, Type];\r\n\r\nexport interface EntityProps\r\n{\r\n  type: EntityKeyType;\r\n  props: EntityPropPair[];\r\n  relation?: Relation;\r\n}\r\n\r\nexport enum EntityKeyType\r\n{\r\n  PRIMARY,\r\n  FOREIGN,\r\n  NONE\r\n}\r\n\r\nexport enum EntityPrimaryType\r\n{\r\n  GIVEN,\r\n  AUTO_INCREMENT,\r\n  UUID\r\n}\r\n\r\nexport interface EntityEvents\r\n{\r\n  change(entity: Entity): void;\r\n  renamed(entity: Entity, oldName: string): void;\r\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\r\n  removeProp(entity: Entity, prop: string): void;\r\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \r\n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\r\n  addIndex(entity: Entity, index: EntityIndex): void;\r\n  removeIndex(entity: Entity, index: EntityIndex): void;\r\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\r\n  addMethod(entity: Entity, method: Func): void;\r\n  removeMethod(entity: Entity, method: Func): void;\r\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\r\n}\r\n\r\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\r\n    return new Entity({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      type: Types.object(),\r\n      instances: [],\r\n      methods: Object.create(null),\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public static uuid(): string {\r\n    // tslint:disable: no-magic-numbers no-bitwise\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n      const r = Math.random() * 16 | 0\r\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n\r\n      return v.toString(16);\r\n    });\r\n    // tslint:enable: no-magic-numbers no-bitwise\r\n  }\r\n\r\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\r\n    [EntityPrimaryType.GIVEN]: null,\r\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\r\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\r\n  };\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public type: ObjectType;\r\n  public instances: any[];\r\n  public methods: Record<string, Func>;\r\n  public key: Expression;\r\n  public keyType: Type;\r\n  public describe: Expression;\r\n  public transcoders: Record<string, EntityTranscoder>;\r\n  public indexes: Record<string, EntityIndex>;\r\n  public primaryType: EntityPrimaryType;\r\n\r\n  public constructor(options: EntityOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n    this.instances = options.instances && options.instances.length\r\n      ? options.instances.map((i) => this.type.fromJson(i))\r\n      : [];\r\n    this.methods = this.decodeMethods(defs, options.methods);\r\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\r\n    this.indexes = this.decodeIndexes(options.indexes);\r\n    this.primaryType = isNumber(options.primaryType)\r\n        ? options.primaryType\r\n        : EntityPrimaryType.AUTO_INCREMENT;\r\n    this.key = options.key \r\n      ? defs.getExpression(options.key)\r\n      : this.getPrimaryKeyExpression();\r\n    this.keyType = this.key.getType(defs, this.getKeyContext());\r\n    this.describe = options.describe\r\n      ? defs.getExpression(options.describe)\r\n      : Exprs.noop();\r\n  }\r\n\r\n  public sync(options: EntityOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n\r\n      this.instances = options instanceof Entity\r\n        ? options.instances\r\n        : options.instances && options.instances.length\r\n          ? options.instances.map((i) => this.type.fromJson(i))\r\n          : [];\r\n\r\n      objectSync(\r\n        this.methods, \r\n        this.decodeMethods(defs, options.methods),\r\n        (target, prop, method) => this.addMethod(method, true),\r\n        (target, prop) => this.removeMethod(prop, true),\r\n        (target, prop, existing, updated) => existing.sync(updated, defs),\r\n      ),\r\n      \r\n      objectSync(\r\n        this.transcoders,\r\n        this.decodeTranscoders(defs, options.transcoders),\r\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\r\n        (target, prop) => this.removeTranscoder(prop, true),\r\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\r\n      );\r\n\r\n      objectSync(\r\n        this.indexes,\r\n        this.decodeIndexes(options.indexes),\r\n        (target, name, index) => this.addIndex(name, index, true),\r\n        (target, name) => this.removeIndex(name, true),\r\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\r\n      );\r\n\r\n      this.primaryType = isNumber(options.primaryType)\r\n          ? options.primaryType\r\n          : EntityPrimaryType.AUTO_INCREMENT;\r\n      this.key = options.key \r\n        ? defs.getExpression(options.key)\r\n        : this.getPrimaryKeyExpression();\r\n      this.keyType = this.key.getType(defs, this.getKeyContext());\r\n      this.describe = options.describe\r\n        ? defs.getExpression(options.describe)\r\n        : Exprs.noop();\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.trigger('change', this);\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: EntityOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('change', this);\r\n  }\r\n\r\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\r\n  {\r\n    return methods\r\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\r\n      : {};\r\n  }\r\n\r\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\r\n  {\r\n    return method instanceof Func\r\n      ? method\r\n      : Func.create(defs, method);\r\n  }\r\n\r\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\r\n  {\r\n    return transcoders\r\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\r\n      : {};\r\n  }\r\n\r\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\r\n  {\r\n    return options.encode instanceof Expression\r\n      ? options\r\n      : {\r\n          encode: defs.getExpression(options.encode),\r\n          decode: defs.getExpression(options.decode),\r\n          encodedType: defs.getType(options.encodedType),\r\n        };\r\n  }\r\n\r\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\r\n  {\r\n    return indexes\r\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\r\n          name,\r\n          props,\r\n          unique,\r\n          primary,\r\n        }))\r\n      : {};\r\n  }\r\n\r\n  public encode(): EntityOptions \r\n  {\r\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\r\n\r\n    return {\r\n      name,\r\n      created, \r\n      updated,\r\n      description,\r\n      meta,\r\n      type: type.encode(),\r\n      instances: instances.map((i) => type.toJson(i)),\r\n      methods: objectMap(methods, (m) => m.encode()),\r\n      key: key.encode(),\r\n      describe: describe.encode(),\r\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\r\n        encode: encode.encode(),\r\n        decode: decode.encode(),\r\n        encodedType: encodedType.encode(),\r\n      })),\r\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\r\n        props,\r\n        unique,\r\n        primary,\r\n      })),\r\n    };\r\n  }\r\n\r\n  public canStore(defs: Definitions): boolean\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\r\n\r\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public updateKeyType(defs: Definitions)\r\n  {\r\n    const keyType = this.key.getType(defs, this.getKeyContext());\r\n\r\n    if (keyType)\r\n    {\r\n      this.keyType = keyType;\r\n    }\r\n  }\r\n\r\n  public renameProp(prop: string, newProp: string)\r\n  {\r\n    let changed = false;\r\n    const transcoder = this.transcoders[prop];\r\n\r\n    if (transcoder)\r\n    {\r\n      delete this.transcoders[prop];\r\n\r\n      this.transcoders[newProp] = transcoder;\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props[i] = newProp;\r\n\r\n        this.updateIndex(index.name, true);\r\n        changed = true;\r\n      }\r\n    });\r\n\r\n    this.trigger('renameProp', this, newProp, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public removeProp(prop: string)\r\n  {\r\n    let changed = false;\r\n\r\n    if (prop in this.transcoders)\r\n    {\r\n      this.removeTranscoder(prop, true);\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index, indexName) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props.splice(i, 1);\r\n        changed = true;\r\n\r\n        if (index.props.length === 0)\r\n        {\r\n          this.removeIndex(indexName, true);\r\n        }\r\n        else\r\n        {\r\n          this.updateIndex(indexName, true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.trigger('removeProp', this, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public getEntityProps(): EntityProps\r\n  {\r\n    const primary = this.getPrimary();\r\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\r\n      prop,\r\n      primary.types && primary.types[i]\r\n        ? primary.types[i]\r\n        : this.type.options.props[prop]\r\n    ]);\r\n\r\n    return {\r\n      type: EntityKeyType.PRIMARY,\r\n      props,\r\n    };\r\n  }\r\n\r\n  public getKey(run: Runtime, instance: any): any\r\n  {\r\n    const { type, key } = this;\r\n\r\n    return run.run(key, { instance, type });\r\n  }\r\n\r\n  public setKey(instance: any)\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const prop = this.getDynamicPrimaryKey();\r\n\r\n    if (instance[prop])\r\n    {\r\n      return;\r\n    }\r\n\r\n    switch (this.primaryType)\r\n    {\r\n      case EntityPrimaryType.AUTO_INCREMENT:\r\n        instance[prop] = this.instances.reduce((a, b) => Math.max(a, b[prop]), 0) + 1;\r\n        break;\r\n      case EntityPrimaryType.UUID:\r\n        instance[prop] = Entity.uuid();\r\n        break;\r\n    }\r\n  }\r\n\r\n  public getDescribe(run: Runtime, instance: any): any\r\n  {\r\n    const { type, describe } = this;\r\n\r\n    return run.run(describe, { instance, type });\r\n  }\r\n\r\n  public getDecodedPropertyTypes(): TypeMap\r\n  {\r\n    return this.type.options.props;\r\n  }\r\n\r\n  public getPropertyTypeFor(forProperty?: string)\r\n  {\r\n    return forProperty\r\n    ? Types.enumForText([forProperty])\r\n    : this.getPropertyType(); \r\n  }\r\n\r\n  public getEncodedPropertyTypes(): TypeMap\r\n  {\r\n    return objectMap(this.type.options.props, \r\n      (type, prop) => prop in this.transcoders\r\n        ? this.transcoders[prop].encodedType\r\n        : type\r\n    );\r\n  }\r\n\r\n  public getEncodedType(): ObjectType\r\n  {\r\n    return Types.object(this.getEncodedPropertyTypes());\r\n  }\r\n\r\n  public getDecodedType(): ObjectType\r\n  {\r\n    return this.type;\r\n  }\r\n\r\n  public getProperties(): string[]\r\n  {\r\n    return Object.keys(this.getDecodedPropertyTypes());\r\n  }\r\n\r\n  public getPropertyType(): EnumType\r\n  {\r\n    return Types.enumForText(this.getProperties());\r\n  }\r\n\r\n  public getKeyReturnType()\r\n  {\r\n    return this.keyType;\r\n  }\r\n\r\n  public getKeyContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getDescribeContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getEncoded(run: Runtime, instance: any): any\r\n  {\r\n    const encoded: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\r\n    }\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const encoder = property in transcoders\r\n      ? transcoders[property].encode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return encoder\r\n      ? run.run(encoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getEncodeContext(forProperty?: string): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getDecodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getDecodeExpected(forProperty);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\r\n  {\r\n    return forProperty && forProperty in this.transcoders\r\n      ? this.transcoders[forProperty].encodedType\r\n      : defaultType;\r\n  }\r\n\r\n  public getDecoded(run: Runtime, encoded: any): any\r\n  {\r\n    const instance: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\r\n    }\r\n\r\n    return instance;\r\n  }\r\n\r\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const decoder = property in transcoders\r\n      ? transcoders[property].decode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return decoder\r\n      ? run.run(decoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getEncodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getDecodeExpected(forProperty?: string)\r\n  {\r\n    return forProperty\r\n      ? this.type.options.props[forProperty] || Types.any()\r\n      : Types.any();\r\n  }\r\n\r\n  public getIndexExpectedType()\r\n  {\r\n    return Types.set(this.getPropertyType());\r\n  }\r\n\r\n  public getDynamicPrimaryKey(): string\r\n  {\r\n    const existing = this.type.options.props;\r\n\r\n    return !('id' in existing)\r\n      ? 'id'\r\n      : !('_id' in existing)\r\n        ? '_id'\r\n        : '__id';\r\n  }\r\n\r\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\r\n  {\r\n    const primary = this.getPrimary(name);\r\n\r\n    return primary.props.length > 1\r\n      ? Exprs.op(ListOps.join, {\r\n          list: primary.props.map((prop) => \r\n            Exprs.get('instance', prop)\r\n          ),\r\n          delimiter: Exprs.const(separator),\r\n          toText: Exprs.op(AnyOps.asText, {\r\n            value: Exprs.get('item'),\r\n          }),\r\n        })\r\n      : Exprs.get('instance', primary.props[0]);\r\n  }\r\n\r\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\r\n  {\r\n    const defined = name in this.indexes\r\n      ? this.indexes[name]\r\n      : objectReduce(this.indexes, \r\n          (index, indexName, first) => first ? first : index.primary ? index : first, \r\n        null);\r\n\r\n    if (defined)\r\n    {\r\n      return defined;\r\n    }\r\n\r\n    if (returnDynamic)\r\n    {\r\n      const id = this.getDynamicPrimaryKey();\r\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\r\n\r\n      return {\r\n        name,\r\n        props: [id],\r\n        types: [type],\r\n        unique: true,\r\n        primary: true,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getUniqueIndexes(): EntityIndex[]\r\n  {\r\n    return objectReduce(this.indexes, (index, indexName, unique) => {\r\n      if (index.unique) {\r\n        unique.push(index);\r\n      }\r\n\r\n      return unique;\r\n    }, []);\r\n  }\r\n\r\n  public addPrimary(props: string | string[]): this\r\n  {\r\n    this.addIndex('primary', {\r\n      props: isArray(props) ? props : [props], \r\n      unique: true, \r\n      primary: true\r\n    });\r\n\r\n    this.primaryType = EntityPrimaryType.GIVEN;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.indexes[name];\r\n    const index: EntityIndex = { ...options, name };\r\n\r\n    this.indexes[name] = index;\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateIndex', this, index, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addIndex', this, index);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    this.trigger('updateIndex', this, index, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    delete this.indexes[name];\r\n\r\n    this.trigger('removeIndex', this, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameIndex(name: string, newName: string): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    if (index && name !== newName)\r\n    {\r\n      const previous = { ...index, props: index.props.slice() };\r\n\r\n      index.name = newName;\r\n\r\n      delete this.indexes[name];\r\n\r\n      this.indexes[newName] = index;\r\n\r\n      this.trigger('updateIndex', this, index, previous);\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.transcoders[prop];\r\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\r\n\r\n    this.transcoders[prop] = transcoder;\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addTranscoder', this, name, transcoder);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      delete this.transcoders[name];\r\n\r\n      this.trigger('removeTranscoder', this, name, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addMethod(method: Func, delayChange: boolean = false): this\r\n  {\r\n    const existing = this.methods[method.name];\r\n\r\n    this.methods[method.name] = method;\r\n\r\n    if (existing)\r\n    {\r\n      this.trigger('updateMethod', this, method, existing);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addMethod', this, method);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method && name !== newName)\r\n    {\r\n      method.name = newName;\r\n\r\n      delete this.methods[name];\r\n\r\n      this.methods[newName] = method;\r\n\r\n      this.trigger('updateMethod', this, method, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeMethod(name: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method)\r\n    {\r\n      delete this.methods[name];\r\n\r\n      this.trigger('removeMethod', this, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { isObject, isArray, isSet, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface SetOptions \r\n{\r\n  value: Type;\r\n}\r\n\r\nexport class SetType extends Type<SetOptions> \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Set;\r\n\r\n  public static operations = SetOperations;\r\n\r\n  public static computeds = SetComputeds;\r\n\r\n  public static baseType = new SetType({ value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): SetType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public static encode(type: SetType): any \r\n  {\r\n    const { value } = type.options;\r\n\r\n    return [this.id, value.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isSet(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let value: Type = new AnyType({});\r\n\r\n    const type = new SetType({ value });\r\n\r\n    cache.set(data, type);\r\n\r\n    for (const [setValue] of data.entries())\r\n    {\r\n      value = describer.merge(value, setValue);\r\n    }\r\n\r\n    type.options.value = value;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 11;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\r\n          return new Set(json.value.map(reader));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isSet(json)) {\r\n          return {\r\n            $any: 'set',\r\n            value: Array.from(json.entries()).map(writer),\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isSet(x)) {\r\n          const newSet = new Set();\r\n\r\n          setObjectCopy(x, newSet);\r\n  \r\n          for (const [value] of x.entries()) {\r\n            newSet.add(copy(value));\r\n          }\r\n  \r\n          return newSet;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isSet(a);\r\n        const bt = isSet(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isSet(a) && isSet(b)) {\r\n          let dl = a.size - b.size;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            const avalues = Array.from(a);\r\n            const bvalues = Array.from(b);\r\n\r\n            for (let i = 0; i < avalues.length; i++) {\r\n              const c = compare(avalues[i], bvalues[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isSet(a);\r\n        const bl = isSet(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (isSet(a) && isSet(b))\r\n        {\r\n          if (a.size !== b.size)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (const value of a)\r\n          {\r\n            if (!b.has(value))\r\n            {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return SetType.operations.map;\r\n  }\r\n\r\n  public merge(type: SetType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof SetType && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === SetType.STEP_VALUE \r\n      ? this.options.value\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(SetOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = value\r\n    return Exprs.op(SetOps.map, {\r\n      set: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      value: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Set || isArray(test))\r\n    {\r\n      const { value } = this.options;\r\n\r\n      return !Array.from(test).some((v) => !value.isValid(v));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { value } = this.options;\r\n    \r\n    return new Set(Array.from(test).map((v) => value.normalize(v)));\r\n  }\r\n\r\n  public newInstance(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetType.encode(this);\r\n  }\r\n\r\n  public create(): Set<any>\r\n  {\r\n    return new Set();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Set<any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const v = value.random(rnd);\r\n\r\n      out.add(v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<any>): Set<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new Set(json.map((v) => value.fromJson(v)));\r\n  }\r\n\r\n  public toJson(set: Set<any>): Array<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return Array.from(set.entries()).map((v) => value.toJson(v));\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved } from './Type';\r\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\r\nimport { NumberType } from './types/Number'\r\nimport { AnyType } from './types/Any';\r\nimport { BooleanType } from './types/Boolean';\r\nimport { DateOptions, DateType } from './types/Date';\r\nimport { TextType, TextOptions } from './types/Text';\r\nimport { EnumType } from './types/Enum';\r\nimport { ObjectType } from './types/Object';\r\nimport { ListType } from './types/List';\r\nimport { ManyType } from './types/Many';\r\nimport { MapType } from './types/Map';\r\nimport { NullType } from './types/Null';\r\nimport { OptionalType } from './types/Optional';\r\nimport { TupleType } from './types/Tuple';\r\nimport { NotType } from './types/Not';\r\nimport { ColorType } from './types/Color';\r\nimport { SetType } from './types/Set';\r\n\r\n\r\nexport class Types\r\n{\r\n\r\n  public static INDEX = Types.index();\r\n\r\n  public static LENGTH = Types.index();\r\n\r\n  public static CHAR = Types.char();\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      type.setParent();\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  public static any()\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\r\n  {\r\n    return new BooleanType({ true: trues, false: falses });\r\n  }\r\n\r\n  public static date(options: DateOptions = {})\r\n  {\r\n    return new DateType(options);\r\n  }\r\n\r\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.parse(value),\r\n      key: this.parse(key),\r\n      constants: toMap(constants),\r\n    }));\r\n  }\r\n\r\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.text(),\r\n      key: this.text(),\r\n      constants: isMap(constants)\r\n        ? constants\r\n        : isArray(constants[0])\r\n          ? new Map(constants as Array<[string, string]>)\r\n          : new Map((constants as string[]).map((c) => [c, c]))\r\n    }));\r\n  }\r\n\r\n  public static list(item: TypeInput, min?: number, max?: number)\r\n  {\r\n    return this.setParent(new ListType({\r\n      item: this.parse(item),\r\n      min, \r\n      max,\r\n    }));\r\n  }\r\n\r\n  public static many(types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\r\n  {\r\n    return this.setParent(new ManyType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static not(types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\r\n  {\r\n    return this.setParent(new NotType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static map(value: TypeInput, key: TypeInput = TextType)\r\n  {\r\n    return this.setParent(new MapType({ \r\n      key: this.parse(key),\r\n      value: this.parse(value)\r\n    }));\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return NullType.baseType\r\n  }\r\n\r\n  public static number(min?: number, max?: number, whole?: boolean)\r\n  {\r\n    return new NumberType({ min, max, whole });\r\n  }\r\n\r\n  public static int(min?: number, max?: number)\r\n  {\r\n    return new NumberType({ min, max, whole: true });\r\n  }\r\n\r\n  public static index(max?: number)\r\n  {\r\n    return new NumberType({ min: 0, max, whole: true });\r\n  }\r\n\r\n  public static char()\r\n  {\r\n    return new TextType({ min: 1, max: 1 });\r\n  }\r\n\r\n  public static object(props: TypeInputMap = {})\r\n  {\r\n    return this.setParent(new ObjectType({ \r\n      props: this.resolve(props),\r\n    }));\r\n  }\r\n\r\n  public static optional(type: TypeInput): Type\r\n  {\r\n    const innerType = this.parse(type);\r\n\r\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\r\n  }\r\n\r\n  public static color(options: { hasAlpha?: boolean } = {})\r\n  {\r\n    return this.setParent(new ColorType(options));\r\n  }\r\n\r\n  public static set(value: TypeInput)\r\n  {\r\n    return this.setParent(new SetType({\r\n      value: this.parse(value),\r\n    }));\r\n  }\r\n\r\n  public static text(options: TextOptions = {})\r\n  {\r\n    return new TextType(options);\r\n  }\r\n\r\n  public static tuple(types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\r\n  {\r\n    return this.setParent(new TupleType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static parse(input: TypeInput): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : input.baseType.newInstance();\r\n  }\r\n\r\n  public static simplify(type: Type): Type;\r\n  public static simplify(type: Type | null): Type | null;\r\n  public static simplify(type: Type | null): Type | null\r\n  {\r\n    return type ? type.getSimplifiedType() : null;\r\n  }\r\n\r\n  public static resolve<T>(types: T): TypeResolved<T>\r\n  {\r\n    let result: any;\r\n\r\n    if (!types)\r\n    {\r\n    }\r\n    else if (types instanceof Type)\r\n    {\r\n      result = types;\r\n    }\r\n    else if ((types as any).baseType instanceof Type)\r\n    {\r\n      result = (types as any).baseType.newInstance();\r\n    }\r\n    else if (isArray(types))\r\n    {\r\n      result = types.map(t => this.resolve(t));\r\n    }\r\n    else if (isObject(types))\r\n    {\r\n      result = objectMap(types as any, t => this.resolve(t));\r\n    }\r\n\r\n    return result as unknown as TypeResolved<T>;\r\n  }\r\n\r\n  public static reduce(type: Type[]): Type\r\n  {\r\n    return type.length === 1 ? type[0] : new ManyType(type);\r\n  }\r\n\r\n  public static explode(outerType: Type): Type[]\r\n  {\r\n    return outerType instanceof ManyType ? outerType.options : [outerType];\r\n  }\r\n\r\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\r\n  {\r\n    if (type instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof OptionalType && type.options instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof ManyType) \r\n    {\r\n      const oneOf = type.options.find((t) => t instanceof maybe);\r\n\r\n      if (oneOf) \r\n      {\r\n        return this.optional(oneOf);\r\n      }\r\n\r\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\r\n\r\n      if (oneOfOptional) \r\n      {\r\n        return oneOfOptional;\r\n      }\r\n    }\r\n\r\n    return this.optional(maybe);\r\n  }\r\n\r\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\r\n  {\r\n    if (readonlyTypes.length === 0)\r\n    {\r\n      return noTypes;\r\n    }\r\n\r\n    if (readonlyTypes.find(t => t instanceof AnyType))\r\n    {\r\n      return AnyType.baseType;\r\n    }\r\n\r\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\r\n\r\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\r\n  }\r\n\r\n  public static merge(a: Type, b: Type): Type\r\n  {\r\n    if (a instanceof AnyType)\r\n    {\r\n      return b;\r\n    }\r\n\r\n    const optional = \r\n      a instanceof OptionalType ||\r\n      b instanceof OptionalType;\r\n\r\n    const ar = a.getRequired();\r\n    const br = b.getRequired();\r\n\r\n    if (isSameClass(ar, br))\r\n    {\r\n      ar.merge(br);\r\n\r\n      return optional ? this.optional(ar) : ar;\r\n    }\r\n\r\n    if (ar instanceof ManyType || br instanceof ManyType)\r\n    {\r\n      const atypes = this.explode(ar);\r\n      const btypes = this.explode(br);\r\n      const an = atypes.length;\r\n\r\n      for (const ktype of btypes)\r\n      {\r\n        let matched = false;\r\n        const koptional = ktype instanceof OptionalType;\r\n        const krequired: Type = koptional ? ktype.options : ktype;\r\n\r\n        for (let i = 0; i < an; i++)\r\n        {\r\n          const itype = atypes[i];\r\n          const ioptional = itype instanceof OptionalType;\r\n          const irequired: Type = ioptional ? itype.options : itype;\r\n\r\n          if (isSameClass(irequired, krequired))\r\n          {\r\n            matched = true;\r\n            irequired.merge(krequired);\r\n\r\n            if (koptional && !ioptional) \r\n            {\r\n              atypes[i] = this.optional(irequired);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!matched)\r\n        {\r\n          atypes.push(ktype);\r\n        }\r\n      }\r\n\r\n      return optional\r\n        ? this.optional(this.reduce(atypes))\r\n        : this.reduce(atypes);\r\n    }\r\n\r\n    return this.many(a, b);\r\n  }\r\n\r\n}","\r\nexport class LinkedNode<T> \r\n{\r\n\r\n  public value: T;\r\n  public next: LinkedNode<T>;\r\n  public prev: LinkedNode<T>;\r\n\r\n  constructor(value: T) \r\n  {\r\n    this.value = value;\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  // List Operations\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public clear() \r\n  {\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  public addLast(value: T): LinkedNode<T> \r\n  {\r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this.prev);\r\n    \r\n    return node;\r\n  }\r\n\r\n  public addFirst(value: T): LinkedNode<T> \r\n  { \r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this);\r\n\r\n    return node;\r\n  }\r\n\r\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \r\n  {\r\n    const stop = this;\r\n    let curr = this.next;\r\n    let count = 0;\r\n\r\n    while (curr !== stop) \r\n    {\r\n      const next = curr.next;\r\n      callback(curr.value, count, curr);\r\n      curr = next;\r\n      count++;\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  // Item Operations\r\n\r\n  public isRemoved()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public remove() \r\n  {\r\n    if (!this.isRemoved()) \r\n    {\r\n      this.next.prev = this.prev;\r\n      this.prev.next = this.next;\r\n      this.next = this.prev = this;\r\n    }\r\n  }\r\n\r\n  public linkAfter(node: LinkedNode<T>) \r\n  {\r\n    this.remove();\r\n    this.next = node.next;\r\n    this.prev = node;\r\n    node.next.prev = this;\r\n    node.next = this;\r\n  }\r\n\r\n}\r\n","import { isArray } from './fns';\r\nimport { LinkedNode } from './LinkedNode';\r\n\r\n\r\n\r\nexport type EventCallback<\r\n  E, \r\n  K extends keyof E = any, \r\n  A extends any[] = EventTypeArgs<E, K>,\r\n  R = EventTypeResult<E, K>  \r\n> = (type: K, ...payload: A) => R;\r\n\r\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\r\n\r\nexport type EventCallbackMap<E> = \r\n{\r\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\r\n};\r\n\r\nexport type EventTypeResult<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<any, infer R>\r\n    ? R\r\n    : never;\r\n\r\nexport type EventTypeArgs<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<infer A, any>\r\n    ? A\r\n    : never;\r\n\r\nexport class EventBase<E> \r\n{\r\n\r\n  private listeners: EventCallbackMap<E> = Object.create(null);\r\n\r\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \r\n  {\r\n    const listeners = this.getListeners(event, false);\r\n    const results: R[] = [];\r\n\r\n    if (listeners) \r\n    { \r\n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  public hasListeners<K extends keyof E>(event: K): boolean\r\n  {\r\n    return this.getListeners(event) !== null;\r\n  }\r\n\r\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\r\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\r\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \r\n  {\r\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\r\n\r\n    if (!listeners && create) \r\n    {\r\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\r\n    }\r\n\r\n    return listeners || null;\r\n  }\r\n\r\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const events = isArray(event) ? event : [event];\r\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\r\n    \r\n    return () => nodes.forEach((n) => n.remove());\r\n  }\r\n\r\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const off = this.on(event, (type, ...payload) => {\r\n      off();\r\n      \r\n      return handler(type, ...payload);\r\n    });\r\n\r\n    return off;\r\n  }\r\n\r\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \r\n  {\r\n    if (event) \r\n    {\r\n      if (Array.isArray(event)) \r\n      {\r\n        event.forEach((e) => this.off(e, handler));\r\n      } \r\n      else \r\n      {\r\n        const listeners = this.listeners[event];\r\n\r\n        if (listeners) \r\n        {\r\n          if (handler) \r\n          {\r\n            listeners.each((other, index, node) => {\r\n              if (other === handler) {\r\n                node.remove();\r\n              }\r\n            });\r\n          }\r\n          else \r\n          {\r\n            listeners.clear();\r\n          }\r\n        }\r\n      }\r\n    } \r\n    else \r\n    {\r\n      this.listeners = Object.create(null);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n","import { ObjectType, ObjectOptions } from './types/Object';\r\nimport { TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Exprs } from './Exprs';\r\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { DataTypes } from './DataTypes';\r\nimport { EventBase } from './EventBase';\r\n\r\n\r\nexport interface FuncOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  params: any;\r\n  expression: any;\r\n  defaults: any;\r\n  tests: FuncTest[];\r\n}\r\n\r\nexport interface FuncTest\r\n{\r\n  name: string;\r\n  description: string;\r\n  args: any;\r\n  expected: any;\r\n}\r\n\r\nexport interface FuncEvents\r\n{\r\n  changed(func: Func): void;\r\n  renamed(func: Func, oldName: string): void;\r\n  renameParameter(func: Func, param: string, oldParam: string): void;\r\n  removeParameter(func: Func, param: string): void;\r\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\r\n  addTest(func: Func, test: FuncTest): void;\r\n  removeTest(func: Func, test: FuncTest): void;\r\n  updateTest(func: Func, test: FuncTest): void;\r\n}\r\n\r\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\r\n    return new Func({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      params: Types.object(),\r\n      expression: Exprs.noop(),\r\n      defaults: {},\r\n      tests: [],\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public params: ObjectType<ObjectOptions>;\r\n  public expression: Expression;\r\n  public defaults: any;\r\n  public tests: FuncTest[];\r\n\r\n  public constructor(options: FuncOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.defaults = this.params.fromJson(options.defaults);\r\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\r\n  }\r\n\r\n  public sync(options: FuncOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.params = options instanceof Func\r\n        ? options.params\r\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\r\n      this.expression = options instanceof Func\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n      this.defaults = options instanceof Func\r\n        ? options.defaults\r\n        : this.params.fromJson(options.defaults);\r\n\r\n      arraySync(\r\n        this.tests, \r\n        options instanceof Func\r\n          ? options.tests\r\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\r\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \r\n        (target, value) => this.addTest(value, true),\r\n        (target, index) => this.removeTest(index, true),\r\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: FuncOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): FuncOptions \r\n  {\r\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      description, \r\n      meta,\r\n      params: params.encode(),\r\n      expression: expression.encode(),\r\n      defaults: params.toJson(defaults),\r\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\r\n    };\r\n  }\r\n\r\n  public renameParameter(name: string, newName: string): boolean\r\n  {\r\n    const paramType = this.params.options.props[name];\r\n\r\n    if (paramType)\r\n    {\r\n      this.params.options.props[newName] = paramType;\r\n      delete this.params.options.props[name];\r\n\r\n      if (name in this.defaults)\r\n      {\r\n        this.defaults[newName] = this.defaults[name];\r\n        delete this.defaults[name];\r\n      }\r\n\r\n      this.trigger('renameParameter', this, newName, name);\r\n      this.changed();\r\n    }\r\n\r\n    return !!paramType;\r\n  }\r\n\r\n  public removeParameter(name: string): boolean\r\n  {\r\n    const exists = name in this.params.options.props[name];\r\n\r\n    if (exists)\r\n    {\r\n      delete this.params.options.props[name];\r\n      delete this.defaults[name];\r\n\r\n      this.trigger('removeParameter', this, name);\r\n      this.changed();\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public addTest(test: FuncTest, delayChange: boolean = false)\r\n  {\r\n    this.tests.push(test);\r\n\r\n    this.trigger('addTest', this, test);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(test)\r\n      ? this.tests[test]\r\n      : test;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newTest);\r\n\r\n      this.trigger('updateTest', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(test)\r\n      ? test\r\n      : this.tests.indexOf(test);\r\n    const exists = index >= 0 && index < this.tests.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.tests[index];\r\n      \r\n      this.trigger('removeTest', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \r\n  {\r\n    const context = Types.object({\r\n      ...this.params.options.props,\r\n      ...paramsTypes,\r\n    });\r\n\r\n    return this.expression.getType(defs, context);\r\n  }\r\n\r\n  public getParamTypes(): ObjectType\r\n  {\r\n    return isEmpty(this.defaults)\r\n      ? this.params\r\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\r\n  }\r\n\r\n  public getParamType(param: string)\r\n  {\r\n    const propType = this.params.options.props[param];\r\n\r\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\r\n      ? propType.getRequired()\r\n      : propType;\r\n  }\r\n\r\n  public getArguments(args: any, returnNew: boolean = true)\r\n  {\r\n    const target = returnNew ? { ...args } : args;\r\n\r\n    for (const prop in this.defaults)\r\n    {\r\n      const propType = this.params.options.props[prop];\r\n\r\n      if (!propType.getRequired().isValid(target[prop]))\r\n      {\r\n        target[prop] = DataTypes.copy(this.defaults[prop]);\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.tests.forEach((test) =>\r\n    {\r\n      test.args = cmd({ value: test.args });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { MapInput, toMap, reverseMap, now } from './fns';\r\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface RelationTypeKey\r\n{\r\n  name: string;\r\n  props: string[];\r\n}\r\n\r\nexport interface RelationOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  kind: RelationKind;\r\n  subject: RelationTypeKey;\r\n  subjectRelationName?: string;\r\n  morphs?: [string, any];\r\n  morphsToRelated?: MapInput<any, string>;\r\n  related: RelationTypeKey[];\r\n  relatedRelationName?: string;\r\n  multiple?: boolean;\r\n  required?: boolean;\r\n  owns?: boolean;\r\n  extension?: boolean;\r\n}\r\n\r\nexport interface EntityRelation\r\n{\r\n  relation: Relation;\r\n  name: string;\r\n  kind: RelationKind;\r\n  related: RelationTypeKey[];\r\n  morphs?: EntityPropPair;\r\n  morphsToRelated?: Map<any, string>;\r\n  relatedToMorphs?: Map<string, any>;\r\n  where?: [string, any];\r\n  itemType: Type;\r\n  relationType: Type;\r\n  cascade: RelationCascade;\r\n  local: string[];\r\n}\r\n\r\nexport enum RelationKind\r\n{\r\n  HAS_MANY,\r\n  BELONGS_TO,\r\n  HAS_ONE,\r\n  ONE,\r\n  HAS_ONE_POLYMORPHIC,\r\n  ONE_POLYMORPHIC,\r\n}\r\n\r\nexport enum RelationCascade\r\n{\r\n  NONE,\r\n  CASCADE,\r\n  SET_NULL,\r\n  RESTRICT\r\n}\r\n\r\nexport interface RelationEvents\r\n{\r\n  changed(relation: Relation): void;\r\n  renamed(relation: Relation, oldName: string): void;\r\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\r\n}\r\n\r\nexport class Relation extends EventBase<RelationEvents>\r\n{\r\n\r\n  /**\r\n   * A unique name for the relationship between the subject type and related types.\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * When the relation was created.\r\n   */\r\n  public created: number;\r\n\r\n  /**\r\n   * When the relation was last updated.\r\n   */\r\n  public updated: number;\r\n  \r\n  /**\r\n   * A name-props pair for the type that has the foreign key. The name is the\r\n   * aliased type name and the props are the properties on it that reference\r\n   * the related type or types.\r\n   */\r\n  public subject: RelationTypeKey; \r\n  \r\n  /**\r\n   * The name the subject uses to refer to the related types.\r\n   */\r\n  public subjectRelationName: string;\r\n\r\n  /**\r\n   * A name-type pair for a property that exists on the subject type that is \r\n   * used to determine which related type.\r\n   */\r\n  public morphs: EntityPropPair | null;\r\n\r\n  /**\r\n   * A map of values from the morphs property to the related type names.\r\n   */\r\n  public morphsToRelated: Map<any, string>;\r\n\r\n  /**\r\n   * The list of name-prop pairs that the subject type can be related to based\r\n   * on the morph \r\n   */\r\n  public related: RelationTypeKey[];\r\n  \r\n  /**\r\n   * The name the related types use to refer to the subject.\r\n   */\r\n  public relatedRelationName: string;\r\n\r\n  /**\r\n   * A map from related type names to the morph value.\r\n   */\r\n  public relatedToMorphs: Map<string, any>;\r\n\r\n  /**\r\n   * The kind of relation created.\r\n   */\r\n  public kind: RelationKind;\r\n\r\n  /**\r\n   * List or single related instance?\r\n   */\r\n  public multiple: boolean;\r\n\r\n  /**\r\n   * Remove subject if related is removed\r\n   */\r\n  public required: boolean;\r\n\r\n  /**\r\n   * When related is being removed, stop it. I own it. But when subject is\r\n   * removed then remove the related.\r\n   */\r\n  public owns: boolean;\r\n\r\n  /**\r\n   * Related types extend the subject, the subject has a morph value to know\r\n   * which type it is.\r\n   */\r\n  public extension: boolean;\r\n\r\n  /**\r\n   * Needed for retrieving aliased types and their current properties.\r\n   */\r\n  protected defs: Definitions;\r\n\r\n  \r\n  public constructor(defs: Definitions, options: RelationOptions)\r\n  {\r\n    super();\r\n\r\n    this.defs = defs;\r\n    this.name = options.name;\r\n    this.updated = options.updated || now();\r\n    this.created = options.created || now();\r\n    this.kind = options.kind;\r\n    this.subject = options.subject;\r\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n    this.morphs = options.morphs\r\n      ? this.decodeTypePair(options.morphs)\r\n      : null;\r\n    this.morphsToRelated = toMap(options.morphsToRelated);\r\n    this.related = options.related;\r\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n    this.multiple = !!options.multiple;\r\n    this.required = !!options.required;\r\n    this.owns = !!options.owns;\r\n    this.extension = !!options.extension;\r\n  }\r\n\r\n  public sync(options: RelationOptions | Relation, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.updated = options.updated || now();\r\n      this.created = options.created || now();\r\n      this.kind = options.kind;\r\n      this.subject = options.subject;\r\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n      this.morphs = options.morphs\r\n        ? this.decodeTypePair(options.morphs)\r\n        : null;\r\n      this.morphsToRelated = toMap(options.morphsToRelated);\r\n      this.related = options.related;\r\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n      this.multiple = !!options.multiple;\r\n      this.required = !!options.required;\r\n      this.owns = !!options.owns;\r\n      this.extension = !!options.extension;\r\n      \r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: RelationOptions | Relation): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\r\n  {\r\n    return [prop, this.defs.getType(propType)];\r\n  }\r\n\r\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\r\n  {\r\n    return pair\r\n      ? [pair[0], pair[1].encode()]\r\n      : null;\r\n  }\r\n\r\n  public encode(): RelationOptions\r\n  {\r\n    const { \r\n      name, created, updated,\r\n      kind, subject, subjectRelationName, \r\n      morphs, morphsToRelated, \r\n      related, relatedRelationName, \r\n      multiple, required, owns, extension \r\n    } = this;\r\n\r\n    return {\r\n      name,\r\n      updated,\r\n      created,\r\n      kind,\r\n      subject,\r\n      subjectRelationName,\r\n      morphs: this.encodeTypePair(morphs),\r\n      morphsToRelated: Array.from(morphsToRelated.entries()),\r\n      related,\r\n      relatedRelationName,\r\n      multiple, required, owns, extension,\r\n    };\r\n  }\r\n\r\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\r\n  {\r\n    return related.find((r) => r.name === name);\r\n  }\r\n\r\n  public rename(name: string, newName: string)\r\n  {\r\n    this.renameReference(name, newName, [this.subject]);\r\n    this.renameReference(name, newName, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      withName.name = newName;\r\n    }\r\n  }\r\n\r\n  public remove(name: string)\r\n  {\r\n    this.removeReference(name, [this.subject]);\r\n    this.removeReference(name, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removeReference(name: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      related.splice(i, 1);\r\n      related[i].props = [];\r\n    }\r\n  }\r\n\r\n  public renameProp(name: string, prop: string, newProp: string)\r\n  {\r\n    this.renamePropReference(name, prop, newProp, [this.subject]);\r\n    this.renamePropReference(name, prop, newProp, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      const i = withName.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        withName.props[i] = newProp;\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeProp(name: string, prop: string)\r\n  {\r\n    this.removePropReference(name, prop, [this.subject]);\r\n    this.removePropReference(name, prop, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const withName = related[i];\r\n      const k = withName.props.indexOf(prop);\r\n\r\n      if (k !== -1)\r\n      {\r\n        withName.props.splice(k, 1);\r\n\r\n        if (withName.props.length === 0)\r\n        {\r\n          related.splice(i, 1);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getPropTypes(related: RelationTypeKey[]): Type[]\r\n  {\r\n    const types: Type[] = [];\r\n\r\n    related.forEach(({ name, props }) => \r\n    {\r\n      const entity = this.defs.getEntity(name);\r\n      const primary = entity.getEntityProps();\r\n\r\n      props.forEach((_, i) =>\r\n      {\r\n        const propType = primary.props[i][1];\r\n\r\n        types[i] = types[i]\r\n          ? Types.merge(types[i], propType)\r\n          : propType.clone();\r\n      });\r\n    });\r\n\r\n    return types;\r\n  }\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.subject.props.length === 0\r\n        || this.related.length === 0;\r\n  }\r\n\r\n  private getItemType(related: RelationTypeKey[]): Type\r\n  {\r\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\r\n    const itemType = typesResolved.length > 1\r\n      ? Types.many(typesResolved)\r\n      : typesResolved[0];\r\n\r\n    return itemType;\r\n  }\r\n\r\n  public getSubjectRelation(subjectName: string): EntityRelation | null\r\n  {\r\n    if (this.subject.name !== subjectName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.subjectRelationName;\r\n    const local = this.subject.props;\r\n    const related = this.related;\r\n    const itemType = this.getItemType(related);\r\n    const cascade = this.owns && this.multiple\r\n      ? RelationCascade.CASCADE\r\n      : this.required\r\n        ? RelationCascade.RESTRICT\r\n        : RelationCascade.SET_NULL;\r\n    const relationType = this.required\r\n      ? itemType\r\n      : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.BELONGS_TO\r\n      : this.kind; \r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.morphs = this.morphs;\r\n      relation.morphsToRelated = this.morphsToRelated;\r\n      relation.relatedToMorphs = this.relatedToMorphs;\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getRelatedRelation(relatedName: string): EntityRelation | null\r\n  {\r\n    const withName = this.getRelatedWithName(relatedName, this.related);\r\n\r\n    if (!withName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.relatedRelationName;\r\n    const local = withName.props;\r\n    const related = [this.subject];\r\n    const itemType = this.getItemType(related);\r\n    const cascade = RelationCascade.NONE;\r\n    const relationType = this.multiple\r\n      ? Types.list(itemType)\r\n      : this.required\r\n        ? itemType\r\n        : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.HAS_MANY\r\n      : this.morphs\r\n        ? RelationKind.ONE_POLYMORPHIC\r\n        : RelationKind.ONE;\r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.where = [\r\n        this.morphs[0],\r\n        this.relatedToMorphs.get(relatedName)\r\n      ];\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getTypeProps(name: string): EntityProps[]\r\n  {\r\n    const typeProps: EntityProps[] = [];\r\n\r\n    if (this.subject.name === name)\r\n    {\r\n      const propTypesList = this.getPropTypes(this.related);\r\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\r\n\r\n      typeProps.push({\r\n        type: EntityKeyType.FOREIGN,\r\n        props,\r\n        relation: this,\r\n      });\r\n\r\n      if (this.morphs)\r\n      {\r\n        typeProps.push({\r\n          type: EntityKeyType.NONE,\r\n          props: [this.morphs],\r\n          relation: this,\r\n        });\r\n      }\r\n    }\r\n\r\n    return typeProps;\r\n  }\r\n\r\n  // one{id} has many many{one_id}\r\n  public static hasMany(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string, \r\n    many: string, \r\n    oneRelationName?: string, \r\n    manyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.many;\r\n    const subjectRelationName = options.manyRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_MANY,\r\n      subject: { \r\n        name: options.many,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps\r\n      }],\r\n      relatedRelationName,\r\n      multiple: true,\r\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n    });\r\n  }\r\n\r\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\r\n  public static belongsTo(defs: Definitions, options: {\r\n    name?: string,\r\n    oneOfMany: string,\r\n    belongsTo: string, \r\n    oneOfManyRelationName?: string,\r\n    belongsToRelationName?: string, \r\n    foreignKeyPrefix?: string, \r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation \r\n  {\r\n    return this.hasMany(defs, {\r\n      name: options.name,\r\n      one: options.belongsTo,\r\n      many: options.oneOfMany,\r\n      oneRelationName: options.belongsToRelationName,\r\n      manyRelationName: options.oneOfManyRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // hasOne{one_id} has one one{id}\r\n  public static hasOne(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    one: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName?: string,\r\n    oneRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.hasOne;\r\n    const subjectRelationName = options.hasOneRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps,\r\n      }],\r\n      relatedRelationName,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // one{id} belongs to belongsTo{one_id}\r\n  public static belongsToOne(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string,\r\n    belongsTo: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    oneRelationName?: string,\r\n    belongsToRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    return this.hasOne(defs, {\r\n      name: options.name,\r\n      hasOne: options.belongsTo,\r\n      one: options.one,\r\n      required: options.required,\r\n      owns: options.owns,\r\n      hasOneRelationName: options.belongsToRelationName,\r\n      oneRelationName: options.oneRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n    })\r\n  }\r\n\r\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\r\n  public static hasOnePolymorphic(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    morphs: [string, any],\r\n    morphsToRelated: MapInput<any, string>,\r\n    poly: string[],\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName: string,\r\n    polyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const subjectRelationName = options.hasOneRelationName;\r\n    const relatedRelationName = options.polyRelationName || options.hasOne;\r\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const related = options.poly.map((polyName) => ({\r\n      name: polyName, \r\n      props: defs.getEntity(polyName).getPrimary().props\r\n    }));\r\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related,\r\n      relatedRelationName,\r\n      morphs: options.morphs,\r\n      morphsToRelated: options.morphsToRelated,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { NoExpression } from './exprs/No';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { arraySync, isNumber, now } from './fns';\r\n\r\n\r\nexport interface ProgramOptions\r\n{\r\n  name: string;\r\n  author: string;\r\n  description: string;\r\n  meta: any;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  datasets: ProgramDataSet[];\r\n  expression: any;\r\n}\r\n\r\nexport interface ProgramDataSet\r\n{\r\n  name: string;\r\n  data: any;\r\n  created: number;\r\n  updated: number;\r\n  meta: any;\r\n}\r\n\r\nexport interface ProgramEvents\r\n{\r\n  changed(program: Program): void;\r\n  renamed(program: Program, oldName: string): void;\r\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\r\n  addDataset(program: Program, dataset: ProgramDataSet): void;\r\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\r\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\r\n}\r\n\r\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\r\n    return new Program({\r\n      name,\r\n      author: '',\r\n      description: '',\r\n      meta: null,\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      datasets: [{\r\n        name: 'Data Set #1',\r\n        data: Object.create(null),\r\n        created: now(),\r\n        updated: now(),\r\n        meta: null,\r\n      }],\r\n      expression: NoExpression.instance,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public author: string;\r\n  public description: string;\r\n  public meta: any;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public datasets: ProgramDataSet[];\r\n  public expression: Expression;\r\n\r\n  public constructor(options: ProgramOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.author = options.author;\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.created = options.created;\r\n    this.updated = options.updated;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\r\n  }\r\n\r\n  public sync(options: ProgramOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.author = options.author;\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.created = options.created;\r\n      this.updated = options.updated;\r\n      this.dataType = options instanceof Program\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.expression = options instanceof Program\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n\r\n      arraySync(\r\n        this.datasets, \r\n        options instanceof Program\r\n          ? options.datasets\r\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\r\n        (a, b) => a.name === b.name || a.created === b.created,\r\n        (target, value) => this.addDataset(value, true),\r\n        (target, index, value) => this.removeDataset(index, true),\r\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ProgramOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ProgramOptions \r\n  {\r\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\r\n\r\n    return {\r\n      name,\r\n      author,\r\n      description,\r\n      meta,\r\n      created,\r\n      updated,\r\n      dataType: dataType.encode(),\r\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\r\n      expression: expression.encode(),\r\n    };\r\n  }\r\n\r\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\r\n  {\r\n    this.datasets.push(dataset);\r\n\r\n    this.trigger('addDataset', this, dataset);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: ProgramDataSet, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(dataset)\r\n      ? this.datasets[dataset]\r\n      : dataset;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newDataset);\r\n\r\n      this.trigger('updateDataset', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(dataset)\r\n      ? dataset\r\n      : this.datasets.indexOf(dataset);\r\n    const exists = index >= 0 && index < this.datasets.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.datasets[index];\r\n      \r\n      this.trigger('removeDataset', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.datasets.forEach((dataset) => \r\n    {\r\n      dataset.data = cmd({ value: dataset.data });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n  \r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Expression } from './Expression';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { now } from './fns';\r\n\r\n\r\nexport interface ReferenceDataOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  data: any;\r\n  meta: any;\r\n}\r\n\r\nexport interface ReferenceDataEvents\r\n{\r\n  changed(data: ReferenceData): void;\r\n  renamed(data: ReferenceData, oldName: string): void;\r\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\r\n}\r\n\r\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\r\n    return new ReferenceData({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      data: Object.create(null),\r\n      meta: null,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public data: any;\r\n  public meta: any;\r\n\r\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.meta = options.meta;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.data = this.dataType.fromJson(options.data);\r\n  }\r\n\r\n  public sync(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.meta = options.meta;\r\n      this.dataType = options instanceof ReferenceData\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.data = options instanceof ReferenceData\r\n        ? options.data\r\n        : this.dataType.fromJson(options.data);\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ReferenceDataOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ReferenceDataOptions\r\n  {\r\n    const { name, created, updated, meta, dataType, data } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      meta,\r\n      dataType: dataType.encode(),\r\n      data: dataType.toJson(data),\r\n    };\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    this.data = runtime.run(transform, { value: this.data });\r\n\r\n    this.changed();\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class ReferenceType extends Type<string>\r\n{\r\n\r\n  public static STEP_REFERENCED = 'referenced';\r\n\r\n  public static id = ID.Reference;\r\n\r\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\r\n\r\n  public static baseType = new ReferenceType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ReferenceType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new ReferenceType( type, types );\r\n  }\r\n\r\n  public static encode(type: ReferenceType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    if (!this.provider)\r\n    {\r\n      return NullType.baseType;\r\n    }\r\n\r\n    const data = this.provider.getData(this.options);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReferenceType.id;\r\n  }\r\n\r\n  public merge(type: ReferenceType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof ReferenceType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ReferenceType.STEP_REFERENCED\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === referenced\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReferenceType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, isObject } from '../fns';\r\n\r\n\r\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\r\n\r\n\r\nexport class FastMap<T>\r\n{\r\n\r\n  public indexes: Record<string, number>;\r\n  public keys: string[];\r\n  public values: T[];\r\n\r\n  public constructor(options?: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: FastMapOptions<T>)\r\n  {\r\n    if (options instanceof Map)\r\n    {\r\n      for (const [key, value] of options.entries())\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (options instanceof FastMap)\r\n    {\r\n      for (let i = 0; i < options.length(); i++)\r\n      {\r\n        this.set(options.keyAt(i), options.valueAt(i));\r\n      }\r\n    }\r\n    else if (isArray(options))\r\n    {\r\n      for (const [key, value] of options)\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (isObject(options))\r\n    {\r\n      for (const key in options)\r\n      {\r\n        this.set(key, options[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\r\n  {\r\n    const all = new FastMap(options);\r\n\r\n    this.filter((_, key) => all.has(key));\r\n    \r\n    all.forEach((value, key) => {\r\n      if (this.has(key) && combine) {\r\n        combine(this.get(key), value);\r\n      } else {\r\n        this.set(key, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  public clear()\r\n  {\r\n    this.indexes = Object.create(null);\r\n    this.keys = [];\r\n    this.values = [];\r\n  }\r\n\r\n  public length(): number\r\n  {\r\n    return this.keys.length;\r\n  }\r\n\r\n  public valueAt(i: number): T | undefined\r\n  {\r\n    return this.values[i];\r\n  }\r\n\r\n  public keyAt(i: number): string | undefined\r\n  {\r\n    return this.keys[i];\r\n  }\r\n\r\n  public pairAt(i: number): [string, T] | [undefined, undefined]\r\n  {\r\n    return [this.keys[i], this.values[i]];\r\n  }\r\n\r\n  public has(key: string | T): boolean\r\n  { \r\n    return isString(key) ? key in this.indexes : this.values.includes(key);\r\n  }\r\n\r\n  public set(key: string, value: T)\r\n  {\r\n    const i = this.indexes[key];\r\n\r\n    if (isNumber(i)) \r\n    {\r\n      this.values.splice(i, 1, value);\r\n    } \r\n    else \r\n    {\r\n      this.indexes[key] = this.values.length;\r\n      this.values.push(value);\r\n      this.keys.push(key);\r\n    }\r\n  }\r\n\r\n  public rekey(old: string | T, newKey: string): boolean\r\n  {\r\n    const i = this.indexOf(old);\r\n    const exists = i !== -1;\r\n\r\n    if (exists)\r\n    {\r\n      delete this.indexes[this.keys[i]];\r\n      this.indexes[newKey] = i;\r\n      this.keys.splice(i, 1, newKey);\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public sort(cmp: (a: T, b: T) => number)\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\r\n  }\r\n\r\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\r\n  }\r\n\r\n  public reindex(): void\r\n  {\r\n    const keys = this.keys;\r\n    const indexes = Object.create(null);\r\n\r\n    for (let i = 0; i < keys.length; i++)\r\n    {\r\n      indexes[keys[i]] = i;\r\n    }\r\n\r\n    this.indexes = indexes;\r\n  }\r\n\r\n  public swap(i: number, k: number): boolean\r\n  {\r\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const ikey = this.keys[i];\r\n    const ivalue = this.values[i];\r\n    const kkey = this.keys[k];\r\n    const kvalue = this.values[k];\r\n\r\n    this.indexes[ikey] = k;\r\n    this.indexes[kkey] = i;\r\n\r\n    this.keys.splice(i, 1, kkey);\r\n    this.keys.splice(k, 1, ikey);\r\n\r\n    this.values.splice(i, 1, kvalue);\r\n    this.values.splice(k, 1, ivalue);\r\n\r\n    return true;\r\n  }\r\n\r\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\r\n  {\r\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\r\n  }\r\n\r\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const { keys, values } = this;\r\n      const removing = values[i];\r\n\r\n      if (respectOrder)\r\n      {\r\n        this.removeAt(i);\r\n      }\r\n      else\r\n      {\r\n        delete this.indexes[keys[i]];\r\n        const lastKey = keys.pop();\r\n        const lastValue = values.pop();\r\n\r\n        if (i !== keys.length)\r\n        {\r\n          keys.splice(i, 1, lastKey);\r\n          values.splice(i, 1, lastValue);\r\n          this.indexes[lastKey] = i;\r\n        }\r\n      }\r\n\r\n      return removing;\r\n    }\r\n  }\r\n\r\n  public removeAt(i: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (i < 0 || i >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    delete this.indexes[keys[i]];\r\n    keys.splice(i, 1);\r\n    values.splice(i, 1);\r\n\r\n    while (++i < keys.length)\r\n    {\r\n      this.indexes[keys[i]]--;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public move(from: number, to: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (from !== to)\r\n    {\r\n      const value = values[from];\r\n      const key = keys[from];\r\n\r\n      values.splice(from, 1);\r\n      keys.splice(from, 1);\r\n\r\n      values.splice(to, 0, value);\r\n      keys.splice(to, 0, key);\r\n      \r\n      this.reindex();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public moveToFront(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, 0);\r\n  }\r\n\r\n  public moveToBack(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, this.keys.length - 1);\r\n  }\r\n\r\n  public indexOf(key: string | T): number\r\n  {\r\n    return isString(key) \r\n      ? key in this.indexes\r\n        ? this.indexes[key]\r\n        : -1\r\n      : this.values.indexOf(key);\r\n  }\r\n\r\n  public keyOf(value: T): string | undefined\r\n  {\r\n    const i = this.values.indexOf(value);\r\n\r\n    return i === -1 ? undefined : this.keys[i];\r\n  }\r\n\r\n  public toPairs(): Array<[string, T]>\r\n  {\r\n    return this.values.map((value, i) => [this.keys[i], value]);\r\n  }\r\n\r\n  public toMap(): Map<string, T>\r\n  {\r\n    return new Map(this.toPairs());\r\n  }\r\n\r\n  public toObject(): Record<string, T>\r\n  {\r\n    const obj = Object.create(null);\r\n\r\n    for (let i = 0; i < this.keys.length; i++)\r\n    {\r\n      obj[this.keys[i]] = this.values[i];\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  public clone(): FastMap<T>\r\n  {\r\n    return new FastMap(this);\r\n  }\r\n\r\n  public forEach(iterator: (value: T, key: string) => void)\r\n  {\r\n    const { keys, values } = this;\r\n    let i = 0;\r\n\r\n    while (i < keys.length)\r\n    {\r\n      const key = keys[i];\r\n      const value = values[i];\r\n\r\n      iterator(value, key);\r\n\r\n      if (keys[i] === key)\r\n      {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  public filter(pass: (value: T, key: string) => boolean)\r\n  {\r\n    const { values, keys, indexes } = this;\r\n    let passed = 0; \r\n    \r\n    for (let i = 0; i < values.length; i++) \r\n    {\r\n      const value = values[i];\r\n      const key = keys[i];\r\n\r\n      if (pass(value, key))\r\n      {\r\n        values[passed] = value;\r\n        keys[passed] = key;\r\n        indexes[key] = passed;\r\n        passed++;\r\n      }\r\n      else\r\n      {\r\n        delete indexes[key];\r\n      }\r\n    }\r\n\r\n    if (passed < values.length)\r\n    {\r\n      values.splice(passed, values.length - passed);\r\n      keys.splice(passed, keys.length - passed);\r\n    }\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\r\nimport { FastMap, FastMapOptions } from './FastMap';\r\n\r\n\r\nexport interface Named\r\n{\r\n  name: string;\r\n}\r\n\r\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\r\n\r\nexport class NamedMap<N extends Named> extends FastMap<N>\r\n{\r\n\r\n  public static isNamedArray<N extends Named>(x: any): x is N[]\r\n  {\r\n    return isArray(x) && x.length > 0 && isString(x[0].name);\r\n  }\r\n\r\n  public constructor(options?: NamedMapOptions<N>)\r\n  {\r\n    super();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: NamedMapOptions<N>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: NamedMapOptions<N>)\r\n  {\r\n    if (NamedMap.isNamedArray(options))\r\n    {\r\n      for (const named of options)\r\n      {\r\n        this.add(named);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      super.merge(options);\r\n    }\r\n  }\r\n\r\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\r\n  {\r\n    super.sync(new NamedMap(options), combine);\r\n  }\r\n\r\n  public syncManual<O extends Named = N>(\r\n    sourceOptions: NamedMapOptions<O>,\r\n    add: (target: this, value: O, key: string) => void,\r\n    remove: (target: this, value: N, key: string) => void,\r\n    update: (target: this, value: N, newValue: O, key: string) => void,\r\n    matches?: (a: N, b: O) => boolean,\r\n  ): this {\r\n    const source = new NamedMap<O>(sourceOptions);\r\n\r\n    if (matches) {\r\n      arraySync(\r\n        this.values, \r\n        source.values, \r\n        matches, \r\n        (target, value) => add(this, value, value.name), \r\n        (target, index, value) => remove(this, value, value.name),\r\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\r\n      );\r\n    } else {\r\n      this.forEach((targetValue, targetKey) => {\r\n        const existing = source.get(targetKey);\r\n        if (existing === undefined) {\r\n          remove(this, targetValue, targetKey);\r\n        } else {\r\n          update(this, targetValue, existing, targetKey);\r\n        }\r\n      });\r\n\r\n      source.forEach((sourceValue, sourceKey) => {\r\n        if (!this.has(sourceKey)) {\r\n          add(this, sourceValue, sourceKey);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public rename(namedInput: string | N, newName: string): boolean\r\n  {\r\n    const named = this.get(namedInput);\r\n    const valid = !!named && named.name !== newName;\r\n    \r\n    if (valid)\r\n    {\r\n      this.rekey(named, newName);\r\n      \r\n      named.name = newName;\r\n    }\r\n\r\n    return valid;\r\n  }\r\n\r\n  public has(named: string | N): boolean\r\n  {\r\n    return this.nameOf(named) in this.indexes;\r\n  }\r\n\r\n  public add(named: N)\r\n  {\r\n    this.set(named.name, named);\r\n  }\r\n\r\n  public nameOf(named: string | N): string\r\n  {\r\n    return isString(named) ? named : named.name;\r\n  }\r\n\r\n  public valueOf(named: string | N): N\r\n  {\r\n    return isString(named) ? this.get(named) : named;\r\n  }\r\n\r\n  public indexOf(named: string | N): number\r\n  {\r\n    const i = this.indexes[this.nameOf(named)];\r\n\r\n    return isNumber(i) ? i : -1;\r\n  }\r\n\r\n  public keyOf(named: N): string | undefined\r\n  {\r\n    return named.name;\r\n  }\r\n\r\n  public clone(): NamedMap<N>\r\n  {\r\n    return new NamedMap(this);\r\n  }\r\n\r\n}","\r\nimport { isArray, objectMap, objectValues, objectEach } from './fns';\r\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\r\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\r\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\r\nimport { Computeds, Computed } from './Computed';\r\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\r\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\r\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\r\nimport { Func, FuncOptions, FuncTest } from './Func';\r\nimport { Types } from './Types';\r\nimport { Traverser } from './Traverser';\r\nimport { ID } from './types/ID';\r\nimport { EntityType } from './types/Entity';\r\nimport { AnyType } from './types/Any';\r\nimport { ManyType } from './types/Many';\r\nimport { ObjectType } from './types/Object';\r\nimport { NullType } from './types/Null';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { NoExpression } from './exprs/No';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { ReferenceType } from './types/Reference';\r\nimport { NamedMap } from './maps/NamedMap';\r\nimport { FastMap } from './maps/FastMap';\r\nimport { EventBase } from './EventBase';\r\n\r\n\r\n\r\nexport interface DefinitionsImportOptions\r\n{\r\n  entities?: Record<string, Entity | EntityOptions>;\r\n  functions?: Record<string, Func | FuncOptions>;\r\n  relations?: Record<string, RelationOptions>;\r\n  programs?: Record<string, Program | ProgramOptions>;\r\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\r\n}\r\n\r\nexport interface DefinitionsOptions extends DefinitionsImportOptions\r\n{\r\n  types?: TypeClass[];\r\n  expressions?: ExpressionClass[];\r\n}\r\n\r\nexport type DefinitionsReferenceSource = \r\n  Program | \r\n  [Program, ProgramDataSet] |\r\n  Entity | \r\n  [Entity, 'key' | 'describe'] |\r\n  [Entity, string, EntityTranscoder] |\r\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\r\n  [Entity, Func] |\r\n  [Entity, Func, 'params' | 'returnType'] |\r\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\r\n  Func | \r\n  [Func, 'params' | 'returnType'] |\r\n  [Func, FuncTest, 'args' | 'expected'] |\r\n  Relation |\r\n  ReferenceData;\r\n\r\nexport type DefinitionsEntityReference = (\r\n  { value: EntityType, root: Type } |\r\n  { value: GetEntityExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport type DefinitionsDataReference = (\r\n  { value: ReferenceType, root: Type } |\r\n  { value: GetDataExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport interface DefinitionsRelationReference\r\n{\r\n  value: GetRelationExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsFunctionReference\r\n{\r\n  value: InvokeExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionReference<E extends Expression>\r\n{\r\n  value: E;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeReference<T extends Type>\r\n{\r\n  value: T;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataTypeReference<T extends Type>\r\n{\r\n  type: T;\r\n  data: any;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataInstance\r\n{\r\n  data: any;\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeInstance\r\n{\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionInstance\r\n{\r\n  expr: Expression;\r\n  context: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsEvents\r\n{\r\n  changed(defs: Definitions): void;\r\n  sync(defs: Definitions, options: DefinitionsOptions): void;\r\n\r\n  addRelation(defs: Definitions, relation: Relation): void;\r\n  removeRelation(defs: Definitions, relation: Relation): void;\r\n  updateRelation(defs: Definitions, relation: Relation): void;\r\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\r\n  clearRelations(defs: Definitions, relations: Relation[]): void;\r\n  changedRelations(defs: Definitions): void;\r\n  \r\n  addProgram(defs: Definitions, program: Program): void;\r\n  removeProgram(defs: Definitions, program: Program): void;\r\n  updateProgram(defs: Definitions, program: Program): void;\r\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\r\n  clearPrograms(defs: Definitions, programs: Program[]): void;\r\n  changedPrograms(defs: Definitions): void;\r\n  \r\n  addEntity(defs: Definitions, entity: Entity): void;\r\n  removeEntity(defs: Definitions, entity: Entity): void;\r\n  updateEntity(defs: Definitions, entity: Entity): void;\r\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\r\n  clearEntities(defs: Definitions, entities: Entity[]): void;\r\n  changedEntities(defs: Definitions): void;\r\n  \r\n  addFunction(defs: Definitions, func: Func): void;\r\n  removeFunction(defs: Definitions, func: Func): void;\r\n  updateFunction(defs: Definitions, func: Func): void;\r\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\r\n  clearFunctions(defs: Definitions, functions: Func[]): void;\r\n  changedFunctions(defs: Definitions): void;\r\n\r\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\r\n  changedMethods(defs: Definitions): void;\r\n  \r\n  addData(defs: Definitions, data: ReferenceData): void;\r\n  removeData(defs: Definitions, data: ReferenceData): void;\r\n  updateData(defs: Definitions, data: ReferenceData): void;\r\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\r\n  clearData(defs: Definitions, data: ReferenceData[]): void;\r\n  changedData(defs: Definitions): void;\r\n}\r\n\r\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\r\n{\r\n\r\n  public types: Record<string, TypeClass>;\r\n  public typeList: TypeClass[];\r\n  public describers: TypeClass[];\r\n  public parsers: Record<string, TypeParser>;\r\n  public expressions: Record<string, ExpressionClass>;\r\n  public operations: Operations;\r\n  public computeds: Computeds;\r\n\r\n  public relations: NamedMap<Relation>;\r\n  public programs: NamedMap<Program>;\r\n  public entities: NamedMap<Entity>;\r\n  public functions: NamedMap<Func>;\r\n  public data: NamedMap<ReferenceData>;\r\n\r\n  public keyExpectedType: Type;\r\n  public describeExpectedType: Type;\r\n\r\n  private legacy: boolean = false;\r\n\r\n  public constructor(initial?: DefinitionsOptions)\r\n  { \r\n    super();\r\n\r\n    this.types = Object.create(null);\r\n    this.typeList = [];\r\n    this.describers = [];\r\n    this.expressions = Object.create(null);\r\n    this.operations = new Operations('');\r\n    this.computeds = new Computeds('');\r\n    this.parsers = Object.create(null);\r\n\r\n    this.entities = new NamedMap();\r\n    this.functions = new NamedMap();\r\n    this.relations = new NamedMap();\r\n    this.programs = new NamedMap();\r\n    this.data = new NamedMap();\r\n\r\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\r\n    this.describeExpectedType = Types.text();\r\n\r\n    if (initial) \r\n    {\r\n      this.add(initial);\r\n    }\r\n  }\r\n\r\n  public isLegacy(): boolean\r\n  {\r\n    return this.legacy;\r\n  }\r\n\r\n  public setLegacy(): void\r\n  {\r\n    this.legacy = true;\r\n  }\r\n\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\r\n  {\r\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\r\n  }\r\n\r\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\r\n  { \r\n    const copy = new Definitions({\r\n      types: objectValues(this.types),\r\n      expressions: objectValues(this.expressions),\r\n      entities: this.encodeMap(this.entities, deepCopy),\r\n      functions: this.encodeMap(this.functions, deepCopy),\r\n      relations: this.encodeMap(this.relations, deepCopy),\r\n      programs: this.encodeMap(this.programs, deepCopy),\r\n      data: this.encodeMap(this.data, deepCopy),\r\n    });\r\n\r\n    if (initial)\r\n    {\r\n      copy.add(initial);\r\n    }\r\n\r\n    return copy;\r\n  }\r\n  \r\n  public changed()\r\n  {\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public add(options: DefinitionsOptions)\r\n  {\r\n    if (options.types) \r\n    {\r\n      options.types.forEach(type => this.addType(type, true));\r\n    }\r\n\r\n    this.sortDescribers();\r\n\r\n    if (options.expressions) \r\n    {\r\n      options.expressions.forEach(expr => this.addExpression(expr));\r\n    }\r\n\r\n    this.import(options);\r\n  }\r\n\r\n  public describe(completeData: any): Type\r\n  {\r\n    const described: Map<any, any> = new Map();\r\n\r\n    const provider: TypeDescribeProvider = \r\n    {\r\n      describe: (data) => \r\n      {\r\n        let describedType = described.get(data);\r\n\r\n        if (describedType !== undefined) \r\n        {\r\n          return describedType;\r\n        }\r\n\r\n        for (const describer of this.describers)\r\n        {\r\n          describedType = describer.describe(data, provider, described);\r\n    \r\n          if (describedType)\r\n          {\r\n            return describedType;\r\n          }\r\n        }\r\n\r\n        return AnyType.baseType;\r\n      },\r\n      merge: (type, data) => \r\n      {\r\n        return this.merge(type, data);\r\n      },\r\n    };\r\n\r\n    return provider.describe(completeData);\r\n  }\r\n\r\n  public merge(type: Type, data: any): Type\r\n  {\r\n    return Types.merge(type, this.describe(data));\r\n  }\r\n  \r\n  public sortDescribers()\r\n  {\r\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\r\n  }\r\n\r\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \r\n  {\r\n    this.types[type.id] = type;\r\n    this.typeList.push(type);\r\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\r\n    this.describers.push(type);\r\n\r\n    if (!delaySort)\r\n    {\r\n      this.sortDescribers();\r\n    }\r\n\r\n    if (!type.registered)\r\n    {\r\n      type.registered = true;\r\n      type.register();\r\n    }\r\n  }\r\n\r\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\r\n  {\r\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\r\n\r\n    return found ? found.name : false;\r\n  }\r\n\r\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const data = dataOptions instanceof ReferenceData \r\n      ? dataOptions \r\n      : ReferenceData.create(this, dataOptions);\r\n\r\n    const existing = this.data.get(data.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(data, this);\r\n      }\r\n      else\r\n      {\r\n        this.data.add(data);\r\n      }\r\n      \r\n      this.trigger('updateData', this, data);\r\n    }\r\n    else\r\n    {\r\n      this.data.add(data);\r\n\r\n      this.trigger('addData', this, data);\r\n    }\r\n\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getData(name: string): ReferenceData | null\r\n  {\r\n    return this.data.get(name, null);\r\n  }\r\n\r\n  public getDatas(): NamedMap<ReferenceData>\r\n  {\r\n    return this.data;\r\n  }\r\n\r\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n\r\n    if (!data)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.data.remove(data, respectOrder);\r\n\r\n    this.trigger('removeData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearData(delayChange: boolean = false)\r\n  {\r\n    const data = this.data.values.slice();\r\n\r\n    this.data.clear();\r\n\r\n    this.trigger('clearData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n    const oldName = data.name;\r\n    \r\n    if (!this.data.rename(data, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getDataReferences(data);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof ReferenceType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    data.trigger('renamed', data, oldName);\r\n    data.changed();\r\n\r\n    this.trigger('renameData', this, data, oldName);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const func = funcOptions instanceof Func \r\n      ? funcOptions \r\n      : Func.create(this, funcOptions);\r\n\r\n    const existing = this.functions.get(func.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(func, this);\r\n      }\r\n      else\r\n      {\r\n        this.functions.add(func);\r\n      }\r\n      \r\n      this.trigger('updateFunction', this, func);\r\n    }\r\n    else\r\n    {\r\n      this.functions.add(func);\r\n\r\n      this.trigger('addFunction', this, func);\r\n    }\r\n\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction(name: string): Func | null\r\n  {\r\n    return this.functions.get(name, null);\r\n  }  \r\n\r\n  public getFunctions(): NamedMap<Func>\r\n  {\r\n    return this.functions;\r\n  }\r\n\r\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const program = programOptions instanceof Program \r\n      ? programOptions \r\n      : Program.create(this, programOptions);\r\n\r\n    const existing = this.programs.get(program.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(program, this);\r\n      }\r\n      else\r\n      {\r\n        this.programs.add(program);\r\n      }\r\n      \r\n      this.trigger('updateProgram', this, program);\r\n    }\r\n    else\r\n    {\r\n      this.programs.add(program);\r\n\r\n      this.trigger('addProgram', this, program);\r\n    }\r\n\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getProgram(name: string): Program | null\r\n  {\r\n    return this.programs.get(name, null);\r\n  }\r\n\r\n  public getPrograms(): NamedMap<Program>\r\n  {\r\n    return this.programs;\r\n  }\r\n\r\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n\r\n    if (!program)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    this.programs.remove(program, respectOrder);\r\n\r\n    this.trigger('removeProgram', this, program);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearPrograms(delayChange: boolean = false)\r\n  {\r\n    const programs = this.programs.values.slice();\r\n\r\n    this.programs.clear();\r\n\r\n    this.trigger('clearPrograms', this, programs);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n  \r\n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const entity = entityOptions instanceof Entity\r\n      ? entityOptions\r\n      : Entity.create(this, entityOptions);\r\n\r\n    const existing = this.entities.get(entity.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(entity, this);\r\n      }\r\n      else\r\n      {\r\n        this.entities.add(entity);\r\n      }\r\n      \r\n      this.trigger('updateEntity', this, entity);\r\n    }\r\n    else\r\n    {\r\n      this.entities.add(entity);\r\n\r\n      this.trigger('addEntity', this, entity);\r\n    }\r\n\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getEntity(name: string): Entity | null\r\n  {\r\n    return this.entities.get(name, null);\r\n  }\r\n\r\n  public getEntities(): NamedMap<Entity>\r\n  {\r\n    return this.entities;\r\n  }\r\n\r\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const relation = relationOptions instanceof Relation \r\n      ? relationOptions \r\n      : new Relation(this, relationOptions);\r\n\r\n    const existing = this.relations.get(relation.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(relation, this);\r\n      }\r\n      else\r\n      {\r\n        this.relations.add(relation);\r\n      }\r\n      \r\n      this.trigger('updateRelation', this, relation);\r\n    }\r\n    else\r\n    {\r\n      this.relations.add(relation);\r\n\r\n      this.trigger('addRelation', this, relation);\r\n    }\r\n\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getRelation(name: string): Relation | null\r\n  {\r\n    return this.relations.get(name, null);\r\n  }\r\n\r\n  public getRelations(entityName: string): EntityRelation[]\r\n  {\r\n    const relations: EntityRelation[] = [];\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      const subjectRelation = relation.getSubjectRelation(entityName);\r\n\r\n      if (subjectRelation)\r\n      {\r\n        relations.push(subjectRelation);\r\n      }\r\n\r\n      const relatedRelation = relation.getRelatedRelation(entityName);\r\n\r\n      if (relatedRelation)\r\n      {\r\n        relations.push(relatedRelation);\r\n      }\r\n    });\r\n\r\n    return relations;\r\n  }\r\n\r\n  public getEntityProps(name: string): EntityProps[]\r\n  {\r\n    const keys: EntityProps[] = [];\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      keys.push(entity.getEntityProps());\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        keys.push(...relation.getTypeProps(name));\r\n      });\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n\r\n    if (!relation)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.remove(relation, respectOrder);\r\n\r\n    this.trigger('removeRelation', this, relation);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearRelations(delayChange: boolean = false)\r\n  {\r\n    const relations = this.relations.values.slice();\r\n\r\n    this.relations.clear();\r\n\r\n    this.trigger('clearRelations', this, relations);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n    const oldName = program.name;\r\n\r\n    if (!this.programs.rename(program, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    program.trigger('renamed', program, oldName);\r\n    program.changed();\r\n\r\n    this.trigger('renameProgram', this, program, oldName);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n    const oldName = entity.name;\r\n\r\n    if (!this.entities.rename(entity, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.forEach((relation) => \r\n    {\r\n      relation.rename(name, newName);\r\n    });\r\n\r\n    const refs = this.getEntityReferences(name);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof EntityType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    const methods = this.getMethodReferences(name);\r\n\r\n    methods.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    entity.trigger('renamed', entity, oldName);\r\n    entity.changed();\r\n\r\n    this.trigger('renameEntity', this, entity, oldName);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.renameProp(prop, newProp);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.renameProp(entity.name, prop, newProp);\r\n      });\r\n    }\r\n  }\r\n\r\n  public removeEntityProp(name: string | Entity, prop: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.removeProp(prop);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.removeProp(entity.name, prop);\r\n\r\n        if (relation.isEmpty())\r\n        {\r\n          this.relations.remove(relation);\r\n        }\r\n      });\r\n    } \r\n  }\r\n\r\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.entities.remove(entity, respectOrder);\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      relation.remove(name);\r\n\r\n      if (relation.isEmpty())\r\n      {\r\n        this.relations.remove(relation, respectOrder);\r\n      }\r\n    });\r\n\r\n    this.trigger('removeEntity', this, entity);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearEntities(delayChange: boolean = false)\r\n  {\r\n    const entities = this.entities.values.slice();\r\n\r\n    this.entities.clear();\r\n\r\n    this.trigger('clearEntities', this, entities);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const refs = this.getEntityDataReferences(entity);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.root.setParent();\r\n\r\n      const dataTransform = ref.type.getValueChangeAt(transform);\r\n\r\n      ref.data = runtime.run(dataTransform, { value: ref.data });\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n    const oldName = relation.name;\r\n\r\n    if (!this.relations.rename(relation, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getRelationReferences(relation);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    relation.trigger('renamed', relation, oldName);\r\n    relation.changed();\r\n\r\n    this.trigger('renameRelation', this, relation, oldName);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n    const oldName = func.name;\r\n\r\n    if (!this.functions.rename(func, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(func);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    func.trigger('renamed', func, oldName);\r\n    func.changed();\r\n\r\n    this.trigger('renameFunction', this, func, oldName);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.args[newName] = ref.value.args[oldName];\r\n      delete ref.value.args[oldName];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      delete ref.value.args[name];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.functions.remove(func, respectOrder);\r\n\r\n    this.trigger('removeFunction', this, func);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearFunctions(delayChange: boolean = false)\r\n  {\r\n    const functions = this.functions.values.slice();\r\n    \r\n    this.functions.clear();\r\n\r\n    this.trigger('clearFunctions', this, functions);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = methodOptions instanceof Func \r\n      ? methodOptions \r\n      : Func.create(this, methodOptions);\r\n\r\n    const existing = entity.methods[method.name];\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(method, this);\r\n      }\r\n      else\r\n      {\r\n        entity.addMethod(method);\r\n      }\r\n      \r\n      this.trigger('updateMethod', this, method, entity);\r\n    }\r\n    else\r\n    {\r\n      entity.addMethod(method);\r\n\r\n      this.trigger('addMethod', this, method, entity);\r\n    }\r\n\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const oldName = method.name;\r\n\r\n    entity.renameMethod(oldName, newName);\r\n\r\n    const refs = this.getMethodReferences(entity, method);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    method.trigger('renamed', method, oldName);\r\n    method.changed();\r\n\r\n    this.trigger('renameMethod', this, method, entity, oldName);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.args[newName] = ref.value.args[oldName];\r\n      delete ref.value.args[oldName];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      delete ref.value.args[name];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    entity.removeMethod(method.name);\r\n\r\n\r\n    this.trigger('removeMethod', this, method, entity);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  \r\n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \r\n  {\r\n    const parsed = this.getType(value);\r\n\r\n    return parsed instanceof kind ? parsed : otherwise;\r\n  }\r\n\r\n  public getType(value: any, otherwise?: Type): Type \r\n  {\r\n    if (value instanceof Type)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const id = isArray(value) ? value[0] : value;\r\n    const data = isArray(value) ? value : [];\r\n    const parser = this.parsers[id];\r\n\r\n    if (!parser)\r\n    {\r\n      if (this.entities.has(id))\r\n      {\r\n        return this.entities.get(id).type;\r\n      }\r\n\r\n      if (otherwise)\r\n      {\r\n        return otherwise;\r\n      }\r\n      \r\n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\r\n    }\r\n    \r\n    return parser(data, this);\r\n  }\r\n\r\n  public getBaseTypes(): Type[]\r\n  {\r\n    return this.typeList.map((t) => t.baseType);\r\n  }\r\n\r\n  public getSimpleTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => t.isSimple());\r\n  }\r\n\r\n  public getComplexTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => !t.isSimple());\r\n  }\r\n\r\n  public getSimpleTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => t.baseType.isSimple());\r\n  }\r\n\r\n  public getComplexTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => !t.baseType.isSimple());\r\n  }\r\n\r\n  public getComputed(id: string): Computed | null\r\n  {\r\n    const comp = this.computeds.get(id);\r\n\r\n    if (comp)\r\n    {\r\n      return comp;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.computeds.get(id) : null;\r\n  }\r\n\r\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\r\n  {\r\n    const comp = this.getComputed(id);\r\n\r\n    if (!comp)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const op = this.getOperation(comp.op);\r\n    const types = this.getOperationTypes(comp.op);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\r\n  }\r\n\r\n  public getComputedsFor(valueType: Type): Computed[]\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? typeClass.computeds.list : [];\r\n  }\r\n\r\n  public hasComputed(valueType: Type, id: string): boolean\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? !!typeClass.computeds.get(id) : false;\r\n  }\r\n\r\n  public getOperation(id: string): OperationGeneric | null\r\n  {\r\n    const op = this.operations.get(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.get(id) : null;\r\n  }\r\n\r\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\r\n  {\r\n    const op = this.operations.getTypes(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.getTypes(id) : null;\r\n  }\r\n\r\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\r\n  {\r\n    const op = this.getOperation(id);\r\n    const types = this.getOperationTypes(id);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const returnType = types.returnType;\r\n\r\n    if (returnType instanceof Type)\r\n    {\r\n      return returnType;\r\n    }\r\n\r\n    if (!isOperationTypeFunction(returnType))\r\n    {\r\n      return returnType.baseType.newInstance();\r\n    }\r\n\r\n    const paramTypes = op.resultDependency.length > 0\r\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\r\n      : {};\r\n\r\n    return this.getOperationInputType(types.returnType, paramTypes);\r\n  }\r\n\r\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!opTypes)\r\n    {\r\n      return {};\r\n    }\r\n\r\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\r\n\r\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\r\n  }\r\n\r\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const types: TypeMap = {};\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!op || !opTypes)\r\n    {\r\n      return types;\r\n    }\r\n    \r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) === -1)\r\n      {\r\n        const paramType = params[param].getType(this, context);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) !== -1)\r\n      {\r\n        const paramType = params[param].getType(this, paramContext);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const param of op.params)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\r\n      }\r\n    }\r\n\r\n    for (const param of op.optional)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\r\n      }\r\n    }\r\n\r\n    return types;\r\n  }\r\n\r\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\r\n  {\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    return scopedContext;\r\n  }\r\n\r\n  public getContextWithScope(original: Type, scope: TypeMap = {})\r\n  {\r\n    const context = original instanceof ObjectType\r\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\r\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\r\n\r\n    return { context, scope };\r\n  }\r\n\r\n  public getContext(original: Type, scope: TypeMap): Type\r\n  {\r\n    return this.getContextWithScope(original, scope).context;\r\n  }\r\n\r\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\r\n  {\r\n    type ParamTuple = [string, Type, number];\r\n\r\n    const from = this.getOperation(fromId);\r\n    const fromTypes = this.getOperationTypes(toId);\r\n    const fromVars = from.params.concat(from.optional);\r\n    const to = this.getOperation(toId);\r\n    const toTypes = this.getOperationTypes(toId);\r\n    const mapping: Record<string, string> = Object.create(null);\r\n    const mapped: TypeMap = Object.create(null);\r\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \r\n      [key, value, fromVars.indexOf(key)];\r\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\r\n      .filter(([,, index]) => index >= 0)\r\n      .sort(([,, a], [,, b]) => a - b);\r\n\r\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \r\n    {\r\n      if (paramTypes.length === 0)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      let chosenIndex = -1;\r\n\r\n      if (isOperationTypeFunction(typeInput))\r\n      {\r\n        chosenIndex = paramTypes.findIndex(([, type]) => \r\n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\r\n        \r\n        if (chosenIndex === -1)\r\n        {\r\n          chosenIndex = paramTypes.findIndex(([, type]) =>\r\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\r\n        }\r\n      }\r\n      else\r\n      {\r\n        const paramType = Types.parse(typeInput);\r\n\r\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\r\n      }\r\n\r\n      if (chosenIndex === -1)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      const chosen = paramTypes[chosenIndex];\r\n      paramTypes.splice(chosenIndex, 1);\r\n      mapping[chosen[0]] = param;\r\n      mapped[param] = chosen[1];\r\n    };\r\n    \r\n    for (const param of to.params)\r\n    {\r\n      const tuple = getParamTuple(param, toTypes.params[param]);\r\n\r\n      if (tuple === null)\r\n      {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    for (const optional of to.optional)\r\n    {\r\n      getParamTuple(optional, toTypes.optional[optional]);\r\n    }\r\n\r\n    const unmapped = paramTypes.map(([key]) => key);\r\n    \r\n    return { from, fromTypes, to, toTypes, mapping, unmapped };\r\n  }\r\n\r\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\r\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\r\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : 'baseType' in input\r\n        ? input.baseType.clone()\r\n        : params\r\n          ? Types.parse(input(params, this))\r\n          : null;\r\n  }\r\n\r\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\r\n  }\r\n\r\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\r\n  {\r\n    return this.getOperations()\r\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\r\n      .filter((mapping) => !!mapping);\r\n  }\r\n\r\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) => \r\n    {\r\n      const paramName = op.params[0];\r\n      const opTypeInput = types.params[paramName];\r\n\r\n      if (opTypeInput) \r\n      {\r\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\r\n\r\n        if (opType)\r\n        {\r\n          if (type.acceptsType(opType))\r\n          {\r\n            return true;\r\n          }\r\n\r\n          if (acceptsDynamic && \r\n            op.resultDependency.length > 0 && \r\n            isOperationTypeFunction(types.returnType) && \r\n            (opType instanceof AnyType || opType instanceof NullType))\r\n          {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\r\n  }\r\n\r\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) =>\r\n    {\r\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\r\n\r\n      if (returnType)\r\n      {\r\n        if (type.acceptsType(returnType))\r\n        {\r\n          return true;\r\n        }\r\n\r\n        if (acceptsDynamic && \r\n          op.resultDependency.length > 0 && \r\n          isOperationTypeFunction(types.returnType) && \r\n          (returnType instanceof AnyType || returnType instanceof NullType))\r\n        {\r\n          return true;\r\n        }\r\n      }      \r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\r\n  {\r\n    return this.getOperationsForParamTypes(objectMap(params, expr => \r\n    {\r\n      const type = expr.getType(this, context);\r\n\r\n      return type ? type.getSimplifiedType() : undefined;\r\n    }));\r\n  }\r\n\r\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\r\n  {\r\n    const paramNames = Object.keys(paramTypes);\r\n\r\n    return this.getOperations(({ types }) => \r\n    {\r\n      for (const param of paramNames)\r\n      {\r\n        const opTypeInput = types.params[param] || types.optional[param];\r\n\r\n        if (!opTypeInput)\r\n        {\r\n          return false;\r\n        }\r\n\r\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\r\n\r\n        if (!opType || !paramTypes[param].acceptsType(opType))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\r\n  {\r\n    const ops: OperationPair[] = [];\r\n\r\n    const iterateOperations = (operations: Operations) => \r\n    {\r\n      const map = operations.map;\r\n\r\n      for (const id in map)\r\n      {\r\n        const op = map[id];\r\n        const types = operations.types[id];\r\n        const pair = { op, types };\r\n\r\n        if (onOperation(pair))\r\n        {\r\n          ops.push(pair);\r\n        }\r\n      }\r\n    };\r\n\r\n    iterateOperations(this.operations);\r\n\r\n    objectEach(this.types, t => iterateOperations(t.operations));\r\n\r\n    return ops;\r\n  }\r\n\r\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\r\n  {\r\n    let thisType = path[0].getType(this, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let optional = thisType.isOptional();\r\n\r\n    for (let i = 1; i < stopBefore; i++)\r\n    {\r\n      const node = path[i];\r\n\r\n      thisType = node.isPathNode()\r\n        ? node.getType(this, context, thisType)\r\n        : thisType.getSubType(node, this, context);\r\n\r\n      if (!thisType)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      optional = optional || thisType.isOptional();\r\n    }\r\n\r\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\r\n  }\r\n\r\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \r\n  {\r\n    this.expressions[expr.id] = expr;\r\n  }\r\n\r\n  public getExpression(value: any): Expression \r\n  {\r\n    if (value instanceof Expression)\r\n    {\r\n      return value;\r\n    }\r\n    else if (isArray(value))\r\n    {\r\n      const exprClass = this.expressions[value[0]];\r\n\r\n      if (!exprClass)\r\n      {\r\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\r\n      }\r\n\r\n      return exprClass.decode(value, this);\r\n    }\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\r\n  { \r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsEntityReference[]).concat(exprs);\r\n  }\r\n\r\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\r\n  {\r\n    const name = data ? this.data.nameOf(data) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsDataReference[]).concat(exprs);\r\n  }\r\n\r\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.type.options);\r\n    });\r\n  }\r\n\r\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\r\n  {\r\n    const name = relation ? this.relations.nameOf(relation) : undefined;\r\n\r\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n  }\r\n\r\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const name = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\r\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\r\n    const methodName = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\r\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsTypeReference<T>[] = [];\r\n\r\n    this.getTypeInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((ref) => {\r\n        if (ref instanceof typeClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsDataTypeReference<T>[] = [];\r\n\r\n    this.getDataInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((type) => {\r\n        if (type instanceof typeClass) {\r\n          refs.push({\r\n            type, \r\n            data: instance.data,\r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\r\n  {\r\n    const refs: DefinitionsExpressionReference<E>[] = [];\r\n\r\n    this.getExpressionInstances().forEach((instance) => {\r\n      instance.expr.traverse(new Traverser((ref) => {\r\n        if (ref instanceof exprClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.expr,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataInstances(): DefinitionsDataInstance[]\r\n  {\r\n    const instances: DefinitionsDataInstance[] = [];\r\n\r\n\r\n    this.programs.forEach((program) => {\r\n      program.datasets.forEach((dataset) => {\r\n        instances.push({\r\n          data: dataset.data,\r\n          type: program.dataType,\r\n          source: [program, dataset],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      const returnType = func.getReturnType(this);\r\n\r\n      func.tests.forEach((test) => {\r\n        instances.push({\r\n          data: test.args,\r\n          type: func.params,\r\n          source: [func, test, 'args'],\r\n        });\r\n\r\n        instances.push({\r\n          data: test.expected,\r\n          type: returnType,\r\n          source: [func, test, 'expected'],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        data: data.data,\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      if (entity.instances && entity.instances.length > 0) {\r\n        instances.push({\r\n          data: entity.instances,\r\n          type: Types.list(entity.type),\r\n          source: entity,\r\n        });\r\n      }\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        const returnType = method.getReturnType(this);\r\n\r\n        method.tests.forEach((test) => {\r\n          instances.push({\r\n            data: test.args,\r\n            type: method.params,\r\n            source: [entity, method, test, 'args'],\r\n          });\r\n\r\n          instances.push({\r\n            data: test.expected,\r\n            type: returnType,\r\n            source: [entity, method, test, 'expected'],\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\r\n  {\r\n    const instances: DefinitionsTypeInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        type: program.dataType,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        type: func.params,\r\n        source: [func, 'params'],\r\n      });\r\n\r\n      if (dynamic) {\r\n        instances.push({\r\n          type: func.getReturnType(this),\r\n          source: [func, 'returnType'],\r\n        });\r\n      }\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      instances.push({\r\n        type: entity.type,\r\n        source: entity,\r\n      });\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          type: method.params,\r\n          source: [entity, method, 'params'],\r\n        });\r\n\r\n        if (dynamic) {\r\n          instances.push({\r\n            type: method.getReturnType(this),\r\n            source: [entity, method, 'returnType'],\r\n          });\r\n        }\r\n      });\r\n\r\n      if (dynamic) {\r\n        if (entity.key !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getKeyContext(),\r\n            source: [entity, 'key'],\r\n          });\r\n        }\r\n        \r\n        if (entity.describe !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getDescribeContext(),\r\n            source: [entity, 'describe'],\r\n          });\r\n        }\r\n      }\r\n\r\n      objectEach(entity.transcoders, (transcoder, prop) => {\r\n        instances.push({\r\n          type: transcoder.encodedType,\r\n          source: [entity, prop, transcoder],\r\n        });\r\n      });\r\n    });\r\n\r\n    if (dynamic) {\r\n      this.relations.forEach((relation) => {\r\n        if (relation.morphs) {\r\n          instances.push({\r\n            type: relation.morphs[1],\r\n            source: relation,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\r\n  {\r\n    const instances: DefinitionsExpressionInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        context: program.dataType,\r\n        expr: program.expression,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        context: func.params,\r\n        expr: func.expression,\r\n        source: func,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          context: method.getParamTypes(),\r\n          expr: method.expression,\r\n          source: [entity, method],\r\n        });\r\n      });\r\n\r\n      if (entity.canStore(this)) {\r\n        instances.push({\r\n          context: entity.getKeyContext(),\r\n          expr: entity.key,\r\n          source: [entity, 'key'],\r\n        });\r\n\r\n        instances.push({\r\n          context: entity.getDescribeContext(),\r\n          expr: entity.describe,\r\n          source: [entity, 'describe'],\r\n        });\r\n\r\n        objectEach(entity.transcoders, (transcoder, prop) => {\r\n          instances.push({\r\n            context: entity.getEncodeContext(prop),\r\n            expr: transcoder.encode,\r\n            source: [entity, prop, transcoder, 'encode'],\r\n          });\r\n\r\n          instances.push({\r\n            context: entity.getDecodeContext(prop),\r\n            expr: transcoder.decode,\r\n            source: [entity, prop, transcoder, 'decode'],\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public export(): DefinitionsImportOptions\r\n  {\r\n    return {\r\n      entities: this.encodeMap(this.entities),\r\n      functions: this.encodeMap(this.functions),\r\n      relations: this.encodeMap(this.relations),\r\n      programs: this.encodeMap(this.programs),\r\n      data: this.encodeMap(this.data),\r\n    };\r\n  }\r\n\r\n  public sync(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      this.data.syncManual(\r\n        exported.data,\r\n        (map, value) => this.addData(value, false, true),\r\n        (map, value) => this.removeData(value, false, true, true),\r\n        (map, value, newValue) => this.addData(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      this.functions.syncManual(\r\n        exported.functions,\r\n        (map, value) => this.addFunction(value, false, true),\r\n        (map, value) => this.removeFunction(value, false, true, true),\r\n        (map, value, newValue) => this.addFunction(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.entities)\r\n    {\r\n      this.entities.syncManual(\r\n        exported.entities,\r\n        (map, value) => this.addEntity(value, false, true),\r\n        (map, value) => this.removeEntity(value, false, true, true),\r\n        (map, value, newValue) => this.addEntity(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      this.relations.syncManual(\r\n        exported.relations,\r\n        (map, value) => this.addRelation(value, false, true),\r\n        (map, value) => this.removeRelation(value, false, true, true),\r\n        (map, value, newValue) => this.addRelation(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      this.programs.syncManual(\r\n        exported.programs,\r\n        (map, value) => this.addProgram(value, false, true),\r\n        (map, value) => this.removeProgram(value, true, true),\r\n        (map, value, newValue) => this.addProgram(newValue, true, true),\r\n      );\r\n    }\r\n  }\r\n\r\n  public import(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      objectEach(exported.data, (data) => \r\n        this.addData(data)\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      objectEach(exported.functions, (func) => \r\n        this.addFunction(func)\r\n      );\r\n    }\r\n\r\n    if (exported.entities) \r\n    {\r\n      objectEach(exported.entities, (instance) => \r\n        this.addEntity(instance)\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      objectEach(exported.relations, (options) => \r\n        this.addRelation(options)\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      objectEach(exported.programs, (options) => \r\n        this.addProgram(options)\r\n      );\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\r\nimport { Definitions } from './Definitions';\r\nimport { Expression, ExpressionClass } from './Expression';\r\nimport { isArray } from './fns';\r\nimport { Operation } from './Operation';\r\nimport { Computed } from './Computed';\r\nimport { Func } from './Func';\r\n\r\n\r\n\r\nexport class Runtime<Context = any, Result = any>\r\n{\r\n\r\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\r\n\r\n  public defs: Definitions;\r\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\r\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\r\n  public returnProperty: string;\r\n\r\n  public constructor (defs: Definitions) \r\n  {\r\n    this.defs = defs;\r\n    this.ops = Object.create(null);\r\n    this.exprs = Object.create(null);\r\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\r\n  }\r\n\r\n  public extend(defs?: Definitions): Runtime<Context, Result>\r\n  {\r\n    const copy = new Runtime(defs || this.defs);\r\n\r\n    Object.assign(copy.ops, this.ops);\r\n    Object.assign(copy.exprs, this.exprs);\r\n    copy.returnProperty = this.returnProperty;\r\n\r\n    return copy;\r\n  }\r\n\r\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\r\n    operation: Operation<P, O, S, any, any>, \r\n    impl: OperationToCommand<Context, Result, P, O, S>\r\n  ): this \r\n  {\r\n    this.ops[operation.id] = impl;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\r\n  {\r\n    this.exprs[type.id] = getter;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction (name: string): Func\r\n  {\r\n    return this.defs.getFunction(name);\r\n  }\r\n\r\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \r\n  {\r\n    return this.ops[id];\r\n  }\r\n\r\n  public getComputed (id: string): Computed | null \r\n  {\r\n    return this.defs.getComputed(id);\r\n  }\r\n  \r\n  public getOperationScopeDefaults (id: string): Record<string, string>\r\n  {\r\n    const op = this.defs.getOperation(id);\r\n\r\n    return op ? op.scopeDefaults : {};\r\n  }\r\n\r\n  public getExpression (id: string): CommandBuilder<Context, Result>\r\n  {\r\n    return this.exprs[id];\r\n  }\r\n\r\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\r\n  {\r\n    return this.exprs[expr.getId()](expr, provider);\r\n  }\r\n\r\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\r\n  {\r\n    return this.eval(expr, provider)(context);\r\n  }\r\n\r\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \r\n  {\r\n    return isArray(value)\r\n      ? this.getCommand(this.defs.getExpression(value), provider)\r\n      : () => value;\r\n  }\r\n\r\n}","import { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_PATH = 2;\r\n\r\nexport class SubExpression extends Expression \r\n{\r\n\r\n  public static id = 'sub';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \r\n  {\r\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\r\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n    exprs.setLegacy();\r\n\r\n    return PathExpression.createForLegacy([value, ...path]);\r\n  }\r\n\r\n  public static encode(expr: SubExpression): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n}","\r\nimport { Definitions } from '../Definitions';\r\n\r\nimport { EntityType } from '../types/Entity';\r\nimport { AnyType } from '../types/Any';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { ColorType } from '../types/Color';\r\nimport { DateType } from '../types/Date';\r\nimport { EnumType } from '../types/Enum';\r\nimport { ListType } from '../types/List';\r\nimport { ManyType } from '../types/Many';\r\nimport { MapType } from '../types/Map';\r\nimport { NotType } from '../types/Not';\r\nimport { NullType } from '../types/Null';\r\nimport { NumberType } from '../types/Number';\r\nimport { ObjectType } from '../types/Object';\r\nimport { OptionalType } from '../types/Optional';\r\nimport { ReferenceType } from '../types/Reference';\r\nimport { SetType } from '../types/Set';\r\nimport { TextType } from '../types/Text';\r\nimport { TupleType } from '../types/Tuple';\r\n\r\nimport { AndExpression } from '../exprs/And';\r\nimport { ChainExpression } from '../exprs/Chain';\r\nimport { CommentExpression } from '../exprs/Comment';\r\nimport { ComputedExpression } from '../exprs/Computed';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { DefineExpression } from '../exprs/Define';\r\nimport { DoExpression } from '../exprs/Do';\r\nimport { ForExpression } from '../exprs/For';\r\nimport { GetExpression } from '../exprs/Get';\r\nimport { GetDataExpression } from '../exprs/GetData';\r\nimport { GetEntityExpression } from '../exprs/GetEntity';\r\nimport { GetRelationExpression } from '../exprs/GetRelation';\r\nimport { IfExpression } from '../exprs/If';\r\nimport { InvokeExpression } from '../exprs/Invoke';\r\nimport { MethodExpression } from '../exprs/Method';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { NotExpression } from '../exprs/Not';\r\nimport { ObjectExpression } from '../exprs/Object';\r\nimport { OperationExpression } from '../exprs/Operation';\r\nimport { OrExpression } from '../exprs/Or';\r\nimport { PathExpression } from '../exprs/Path';\r\nimport { ReturnExpression } from '../exprs/Return';\r\nimport { SetExpression } from '../exprs/Set';\r\nimport { SubExpression } from '../exprs/Sub';\r\nimport { SwitchExpression } from '../exprs/Switch';\r\nimport { TemplateExpression } from '../exprs/Template';\r\nimport { TupleExpression } from '../exprs/Tuple';\r\nimport { UpdateExpression } from '../exprs/Update';\r\nimport { WhileExpression } from '../exprs/While';\r\n\r\n\r\n\r\nexport const defs = new Definitions({\r\n  types: [\r\n    EntityType,\r\n    AnyType,\r\n    BooleanType, \r\n    ColorType,\r\n    DateType,\r\n    EnumType,\r\n    ListType, \r\n    ManyType,\r\n    MapType,\r\n    NotType,\r\n    NullType,\r\n    NumberType, \r\n    ObjectType, \r\n    OptionalType,\r\n    ReferenceType,\r\n    SetType,\r\n    TextType,\r\n    TupleType,\r\n  ],\r\n  expressions: [\r\n    AndExpression,\r\n    ChainExpression,\r\n    CommentExpression,\r\n    ComputedExpression,\r\n    ConstantExpression,\r\n    DefineExpression,\r\n    DoExpression,\r\n    ForExpression,\r\n    GetExpression,\r\n    GetDataExpression,\r\n    GetEntityExpression,\r\n    GetRelationExpression,\r\n    IfExpression,\r\n    InvokeExpression,\r\n    MethodExpression,\r\n    NoExpression,\r\n    NotExpression,\r\n    ObjectExpression,\r\n    OperationExpression,\r\n    OrExpression,\r\n    PathExpression,\r\n    ReturnExpression,\r\n    SetExpression,\r\n    SubExpression,    \r\n    SwitchExpression,\r\n    TemplateExpression,\r\n    TupleExpression,\r\n    UpdateExpression,\r\n    WhileExpression,\r\n  ]\r\n});","\r\nimport { EntityType } from '../../types/Entity';\r\nimport { EntityOps } from '../EntityOps';\r\nimport { Types } from '../../Types';\r\nimport { isArray } from '../../fns';\r\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { NullType } from '../../types/Null';\r\nimport { TextType } from '../../types/Text';\r\nimport { Type } from '../../Type';\r\nimport { EntityRelation } from '../../Relation';\r\n\r\nconst ops = EntityType.operations;\r\n\r\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \r\n  i.name instanceof EntityType\r\n    ? i.name\r\n    : ObjectType.baseType;\r\n\r\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\r\n  if (i.name instanceof EntityType) {\r\n    return i.name;\r\n  }\r\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\r\n  \r\n  return entities.length === 0\r\n    ? NullType.baseType\r\n    : entities.length === 1\r\n      ? entities[0]\r\n      : Types.many(entities);\r\n};\r\n\r\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\r\n  if (!(i.name instanceof EntityType)) {\r\n    return null;\r\n  }\r\n\r\n  const relations = provider.getRelations(i.name.options);\r\n\r\n  if (i.relation instanceof EnumType) {\r\n    const relationName = i.relation.options.constants.get('relation');\r\n\r\n    if (relationName) {\r\n      const match = relations.find((r) => r.name === relationName);\r\n\r\n      if (match) {\r\n        return match;\r\n      }\r\n    }\r\n  }\r\n\r\n  return relations;\r\n};\r\n\r\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation === null) {\r\n    return NullType.baseType;\r\n  } else if (isArray(typeRelation)) {\r\n    return Types.many(\r\n      typeRelation.map((relation) => Types.enum(\r\n        TextType,\r\n        TextType,\r\n        [['relation', relation.name]],\r\n      ))\r\n    );\r\n  } else {\r\n    return i.relation;\r\n  }\r\n};\r\n\r\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\r\n  const typeRelation = GetTypeRelation(i, defs);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.relationType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.itemType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\n\r\nexport const EntityOpsTypes = \r\n{\r\n\r\n  newInstance: ops.setTypes(EntityOps.newInstance, \r\n    GetNamedType,\r\n    { name: GetName }\r\n  ),\r\n\r\n  get: ops.setTypes(EntityOps.get, \r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity) {\r\n        return AnyType;\r\n      }\r\n\r\n      return Types.list(entity.type);\r\n    },\r\n    { name: GetName },\r\n    { where: BooleanType },\r\n    { instance: GetNamedType },\r\n  ),\r\n\r\n  getKey: ops.setTypes(EntityOps.getKey,\r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity || !entity.key) {\r\n        return AnyType;\r\n      }\r\n\r\n      return entity.keyType;\r\n    },\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  save: ops.setTypes(EntityOps.save, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  remove: ops.setTypes(EntityOps.remove, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  setRelated: ops.setTypes(EntityOps.setRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\r\n  ),\r\n\r\n  addRelated: ops.setTypes(EntityOps.addRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \r\n  ),\r\n\r\n  getRelated: ops.setTypes(EntityOps.getRelated,\r\n    (i, defs) => GetRelatedRelationType(i, defs),\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\r\n  ),\r\n\r\n  isRelated: ops.setTypes(EntityOps.isRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n};\r\n\r\nEntityOpsTypes.newInstance.rawTypes = true;\r\nEntityOpsTypes.get.rawTypes = true;\r\nEntityOpsTypes.getKey.rawTypes = true;\r\nEntityOpsTypes.save.rawTypes = true;\r\nEntityOpsTypes.remove.rawTypes = true;\r\nEntityOpsTypes.setRelated.rawTypes = true;\r\nEntityOpsTypes.addRelated.rawTypes = true;\r\nEntityOpsTypes.removeRelated.rawTypes = true;\r\nEntityOpsTypes.clearRelated.rawTypes = true;\r\nEntityOpsTypes.getRelated.rawTypes = true;\r\nEntityOpsTypes.isRelated.rawTypes = true;\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { AnyOps } from '../AnyOps';\r\nimport { OptionalType } from '../../types/Optional';\r\nimport { ManyType } from '../../types/Many';\r\nimport { NullType } from '../../types/Null';\r\nimport { Type } from '../../Type';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = AnyType.operations;\r\n\r\nexport const AnyOpsTypes = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\r\n\r\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\r\n\r\n  isDefined: ops.setTypes(AnyOps.isDefined, \r\n    BooleanType,\r\n    { value: AnyType }\r\n  ),\r\n\r\n  getDefined: ops.setTypes(AnyOps.getDefined, \r\n    BooleanType,\r\n    { value: AnyType, defined: AnyType },\r\n    {},\r\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\r\n  ),\r\n\r\n  coalesce: ops.setTypes(AnyOps.coalesce, \r\n    i => {\r\n      let optional = true;\r\n      const types: Type[] = [];\r\n      const checkType = (x?: Type) => {\r\n        if (!optional) return;\r\n        \r\n        if (x) {\r\n          let xoptional = x instanceof OptionalType;\r\n          const xinner = xoptional ? x.options as Type : x;\r\n\r\n          if (xinner instanceof ManyType) {\r\n            xinner.options.forEach((y) => {\r\n              const yoptional = y instanceof OptionalType;\r\n              const yinner = yoptional ? y.options as Type : y;\r\n\r\n              xoptional = xoptional || yoptional;\r\n\r\n              if (!types.some(t => t.exactType(yinner))) {\r\n                types.push(yinner);\r\n              }\r\n            });\r\n          }\r\n\r\n          optional = optional && xoptional;\r\n\r\n          if (!types.some(t => t.exactType(xinner))) {\r\n            types.push(xinner);\r\n          }\r\n        }\r\n      };\r\n\r\n      checkType(i.a);\r\n      checkType(i.b);\r\n      checkType(i.c);\r\n      checkType(i.d);\r\n      checkType(i.e);\r\n\r\n      return types.length > 1\r\n        ? optional\r\n          ? Types.optional(new ManyType(types))\r\n          : new ManyType(types)\r\n        : types.length === 1\r\n          ? optional\r\n            ? Types.optional(types[0])\r\n            : types[0]\r\n          : NullType;\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  require: ops.setTypes(AnyOps.require, \r\n    i => i.value instanceof OptionalType\r\n      ? i.value.options\r\n      : i.value || AnyType,\r\n    { value: i => i.value || AnyType },\r\n  ),\r\n\r\n  ternary: ops.setTypes(AnyOps.ternary, \r\n    (i) => {\r\n      if (i.truthy && i.falsy) {\r\n        return Types.mergeMany([i.truthy, i.falsy]);\r\n      } else if (i.truthy) {\r\n        return i.truthy;\r\n      } else if (i.falsy) {\r\n        return i.falsy;\r\n      } else {\r\n        return AnyType;\r\n      }\r\n    },\r\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\r\n\r\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\r\n\r\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\r\n\r\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\r\n\r\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\r\n\r\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\r\n\r\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\r\n\r\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\r\n\r\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n};\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { BooleanOps } from '../BooleanOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = BooleanType.operations;\r\n\r\n\r\nexport const BooleanOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(BooleanOps.create, BooleanType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(BooleanOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\r\n\r\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\r\n\r\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\r\n\r\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\r\n\r\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\r\n\r\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\r\n\r\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\r\n\r\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\r\n\r\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\r\n\r\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\r\n\r\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\r\n\r\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\r\n\r\n};","\r\nimport { ColorType } from '../../types/Color';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ColorOps } from '../ColorOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\r\nimport { Color } from '../../util/color/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ColorType.operations;\r\n\r\nexport const ColorComponentEnum = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['r', 'r'],\r\n    ['g', 'g'],\r\n    ['b', 'b'],\r\n    ['a', 'a'],\r\n  ]),\r\n});\r\n\r\nexport const ColorOrNumber = new ManyType([\r\n  ColorType.baseType,\r\n  new NumberType({ }),\r\n]);\r\n\r\nexport const ColorFormats = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\r\n    ['#rgb', 'rgb:hexShort'],\r\n    ['#rrggbb', 'rgb:hex'],\r\n    ['#rrggbbaa', 'rgb:hexLong'],\r\n    ['rgb(r, g, b)', 'rgb:rgb'],\r\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\r\n    ['hsl(h, s, l)', 'hsl:hsl'],\r\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\r\n  ]),\r\n});\r\n\r\nexport const ColorNames = new EnumType({\r\n  key: TextType.baseType,\r\n  value: ColorType.baseType,\r\n  constants: new Map<string, Color>([\r\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\r\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\r\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\r\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\r\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\r\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\r\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\r\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\r\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\r\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\r\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\r\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\r\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\r\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\r\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\r\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\r\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\r\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\r\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\r\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\r\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\r\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\r\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\r\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\r\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\r\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\r\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\r\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\r\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\r\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\r\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\r\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\r\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\r\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\r\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\r\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\r\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\r\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\r\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\r\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\r\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\r\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\r\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\r\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\r\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\r\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\r\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\r\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\r\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\r\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\r\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\r\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\r\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\r\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\r\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\r\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\r\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\r\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\r\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\r\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\r\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\r\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\r\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\r\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\r\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\r\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\r\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\r\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\r\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\r\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\r\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\r\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\r\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\r\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\r\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\r\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\r\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\r\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\r\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\r\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\r\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\r\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\r\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\r\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\r\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\r\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\r\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\r\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\r\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\r\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\r\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\r\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\r\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\r\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\r\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\r\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\r\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\r\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\r\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\r\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\r\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\r\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\r\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\r\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\r\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\r\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\r\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\r\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\r\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\r\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\r\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\r\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\r\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\r\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\r\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\r\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\r\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\r\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\r\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\r\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\r\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\r\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\r\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\r\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\r\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\r\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\r\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\r\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\r\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\r\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\r\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\r\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\r\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\r\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\r\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\r\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\r\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\r\n  ]),\r\n});\r\n\r\n// a = bottom layer (0 -> 1)\r\n// b = top layer (0 -> 1)\r\n\r\nexport const ColorBlendModes = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Multiply', 'multiply'],         // a * b\r\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\r\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\r\n    ['Dodge', 'dodge'],               // a / (1 - b)\r\n    ['Burn', 'burn'],                 // (1 - b) / a\r\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\r\n    ['Addition', 'add'],              // a + b\r\n    ['Subtract', 'sub'],              // a - b\r\n    ['Difference', 'diff'],           // b - a\r\n    ['Darken Only', 'darken'],        // min(a, b)\r\n    ['Lighten Only', 'lighten'],      // max(a, b)\r\n  ]),\r\n});\r\n\r\n\r\nexport const ColorOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ColorOps.create, ColorType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ColorOps.maybe, \r\n    (i) => Types.maybe(i.value, ColorType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(ColorOps.cmp, \r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ColorOps.copy, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  build: ops.setTypes(ColorOps.build, \r\n    ColorType,\r\n    { r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType }\r\n  ),\r\n\r\n  map: ops.setTypes(ColorOps.map, \r\n    ColorType,\r\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  op: ops.setTypes(ColorOps.op, \r\n    ColorType,\r\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  clamp: ops.setTypes(ColorOps.clamp, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  add: ops.setTypes(ColorOps.add, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  adds: ops.setTypes(ColorOps.adds, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  sub: ops.setTypes(ColorOps.sub, \r\n    ColorType,\r\n    { value: ColorType, subtrahend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mul: ops.setTypes(ColorOps.mul, \r\n    ColorType,\r\n    { value: ColorType, multiplier: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  div: ops.setTypes(ColorOps.div, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mod: ops.setTypes(ColorOps.mod, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  format: ops.setTypes(ColorOps.format, \r\n    TextType,\r\n    { value: ColorType, format: ColorFormats }\r\n  ),\r\n\r\n  parse: ops.setTypes(ColorOps.parse, \r\n    Types.optional(ColorType),\r\n    { value: AnyType }\r\n  ),\r\n\r\n  lerp: ops.setTypes(ColorOps.lerp,\r\n    ColorType,\r\n    { start: ColorType, end: ColorType, delta: NumberType }\r\n  ),\r\n\r\n  lighten: ops.setTypes(ColorOps.lighten,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  darken: ops.setTypes(ColorOps.darken,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  toHSL: ops.setTypes(ColorOps.toHSL,\r\n    ColorSpaceHSL.type,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\r\n    ColorType,\r\n    { value: ColorSpaceHSL.type }\r\n  ),\r\n\r\n  luminance: ops.setTypes(ColorOps.luminance,\r\n    NumberType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  contrast: ops.setTypes(ColorOps.contrast,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  invert: ops.setTypes(ColorOps.invert,\r\n    ColorType,\r\n    { value: ColorType },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  opaque: ops.setTypes(ColorOps.opaque,\r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  alpha: ops.setTypes(ColorOps.alpha,\r\n    ColorType,\r\n    { value: ColorType, alpha: NumberType }\r\n  ),\r\n\r\n  distance: ops.setTypes(ColorOps.distance,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  named: ops.setTypes(ColorOps.named,\r\n    ColorType,\r\n    { name: ColorNames }\r\n  ),\r\n\r\n  getName: ops.setTypes(ColorOps.getName,\r\n    TextType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  blend: ops.setTypes(ColorOps.blend, \r\n    ColorType,\r\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ColorOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ColorOps.isEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ColorOps.isLess, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ColorOps.isGreater, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\r\n\r\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\r\n\r\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\r\n\r\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\r\n\r\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\r\n\r\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\r\n\r\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\r\n\r\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\r\n\r\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\r\n\r\n};\r\n","import { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\n\r\nimport { DateOps } from '../DateOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = DateType.operations;\r\n\r\nconst DateProperty = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Timestamp', 'timestamp'],\r\n    ['Timestamp (seconds)', 'timestampSeconds'],\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Day of Month', 'dayOfMonth'],\r\n    ['Last Day of Month', 'lastDayOfMonth'],\r\n    ['Day of Year', 'dayOfYear'],\r\n    ['Day of Week', 'dayOfWeek'],\r\n    ['Week', 'week'],\r\n    ['Week of Month', 'weekOfMonth'],\r\n    ['Weekspan of Month', 'weekspanOfMonth'],\r\n    ['Full Week of Month', 'fullWeekOfMonth'],\r\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\r\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\r\n    ['Week of Year', 'weekOfYear'],\r\n    ['Weekspan of Year', 'weekspanOfYear'],\r\n    ['Full Week of Year', 'fullWeekOfYear'],\r\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\r\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year'],\r\n    ['Time Identifier', 'timeIdentifier'],\r\n    ['Day Identifier', 'dayIdentifier'],\r\n    ['Week Identifier', 'weekIdentifier'],\r\n    ['Month Identifier', 'monthIdentifier'],\r\n    ['Quarter Identifier', 'quarterIdentifier']\r\n  ])\r\n});\r\n\r\nconst DateUnits = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Week', 'week'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year']\r\n  ])\r\n});\r\n\r\nconst DateAdjust = new EnumType({\r\n  key: TextType.baseType.newInstance(),\r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['None', 'none'],\r\n    ['Floor', 'floor'],\r\n    ['Ceil', 'ceil'],\r\n    ['Round', 'round'],\r\n    ['Truncate', 'truncate'],\r\n    ['Up', 'up'],\r\n    ['Down', 'down']\r\n  ])\r\n})\r\n\r\n\r\nexport const DateOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(DateOps.create, DateType),\r\n\r\n  now: ops.setTypes(DateOps.now, DateType),\r\n\r\n  today: ops.setTypes(DateOps.today, DateType),\r\n\r\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\r\n\r\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(DateOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\r\n\r\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\r\n\r\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\r\n\r\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\r\n\r\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\r\n\r\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\r\n\r\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\r\n\r\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\r\n\r\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\r\n\r\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\r\n\r\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\r\n\r\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\r\n\r\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\r\n\r\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\r\n\r\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\r\n\r\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\r\n \r\n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\r\n\r\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\r\n\r\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\r\n\r\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\r\n\r\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\r\n\r\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\r\n\r\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\r\n\r\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\r\n\r\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\r\n\r\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\r\n\r\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\r\n\r\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\r\n\r\n};","\r\nimport { Type, TypeInput } from '../../Type';\r\nimport { ListType } from '../../types/List';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\nimport { MapType } from '../../types/Map';\r\nimport { DateType } from '../../types/Date';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { ListOps } from '../ListOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ListType.operations;\r\n\r\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\r\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\r\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\r\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\r\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\r\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\r\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\r\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\r\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\r\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\r\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\r\n\r\nexport const ListOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ListOps.create, ListType),\r\n\r\n  createLike: ops.setTypes(ListOps.createLike, \r\n    GivenList,\r\n    { list: GivenList },\r\n  ),\r\n\r\n  createFor: ops.setTypes(ListOps.createFor, \r\n    i => ListType.forItem(i.item || AnyType),\r\n    { item: i => i.item || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ListOps.maybe, \r\n    (i) => Types.maybe(i.value, ListType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  build: ops.setTypes(ListOps.build, \r\n    i => ListType.forItem(i.item || AnyType), \r\n    { count: NumberType, item: i => i.item || AnyType },\r\n    { sameItem: BooleanType },\r\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\r\n  ),\r\n\r\n  get: ops.setTypes(ListOps.get, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  set: ops.setTypes(ListOps.set, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType, value: GivenListItem }\r\n  ),\r\n\r\n  add: ops.setTypes(ListOps.add, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addFirst: ops.setTypes(ListOps.addFirst, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addLast: ops.setTypes(ListOps.addLast, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  insert: ops.setTypes(ListOps.insert, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem, index: NumberType }\r\n  ),\r\n\r\n  remove: ops.setTypes(ListOps.remove,  \r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  removeFirst: ops.setTypes(ListOps.removeFirst,\r\n    GivenListItemOptional, \r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeLast: ops.setTypes(ListOps.removeLast,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeAt: ops.setTypes(ListOps.removeAt,  \r\n    GivenListItemOptional,\r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \r\n    GivenList,\r\n    { list: GivenList, where: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  clear: ops.setTypes(ListOps.clear, \r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  contains: ops.setTypes(ListOps.contains,\r\n    BooleanType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  find: ops.setTypes(ListOps.find,\r\n    GivenListItemOptional,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  copy: ops.setTypes(ListOps.copy,\r\n    GivenList,\r\n    { list: GivenList },\r\n    { deepCopy: GivenListItem },\r\n    { copy: GivenListItem }\r\n  ),\r\n\r\n  reverse: ops.setTypes(ListOps.reverse,\r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  exclude: ops.setTypes(ListOps.exclude,  \r\n    GivenList,\r\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  overlap: ops.setTypes(ListOps.overlap,  \r\n    GivenList,\r\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  sort: ops.setTypes(ListOps.sort,   \r\n    GivenList,\r\n    { list: GivenList, compare: NumberType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  shuffle: ops.setTypes(ListOps.shuffle, \r\n    GivenList,\r\n    { list: GivenList },\r\n    { times: NumberType }\r\n  ),\r\n\r\n  unique: ops.setTypes(ListOps.unique,   \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  duplicates: ops.setTypes(ListOps.duplicates,  \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    { once: BooleanType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  take: ops.setTypes(ListOps.take,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  skip: ops.setTypes(ListOps.skip,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  drop: ops.setTypes(ListOps.drop,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  append: ops.setTypes(ListOps.append,\r\n    GivenList,\r\n    { list: GivenList, append: GivenList }\r\n  ),\r\n\r\n  prepend: ops.setTypes(ListOps.prepend,\r\n    GivenList,\r\n    { list: GivenList, prepend: GivenList }\r\n  ),\r\n\r\n  indexOf: ops.setTypes(ListOps.indexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  findIndex: ops.setTypes(ListOps.findIndex,\r\n    NumberType,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  last: ops.setTypes(ListOps.last,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  first: ops.setTypes(ListOps.first,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  count: ops.setTypes(ListOps.count,\r\n    NumberType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  randomList: ops.setTypes(ListOps.randomList,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  random: ops.setTypes(ListOps.random,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  // Iteration\r\n\r\n  join: ops.setTypes(ListOps.join,\r\n    TextType,\r\n    { list: GivenList },\r\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  each: ops.setTypes(ListOps.each,\r\n    GivenList,\r\n    { list: GivenList, each: AnyType },\r\n    { reverse: BooleanType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  filter: ops.setTypes(ListOps.filter,\r\n    GivenList,\r\n    { list: GivenList, filter: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  not: ops.setTypes(ListOps.not,\r\n    GivenList,\r\n    { list: GivenList, not: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(ListOps.map,\r\n    i => ListType.forItem(i.transform || AnyType),\r\n    { list: GivenList, transform: i => i.transform || AnyType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  split: ops.setTypes(ListOps.split,\r\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\r\n    { list: GivenList, pass: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  reduce: ops.setTypes(ListOps.reduce,\r\n    GivenReducer,\r\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\r\n    {},\r\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ListOps.cmp,\r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  group: ops.setTypes(ListOps.group, \r\n    i => ListType.forItem(Types.object({\r\n      by: i.by || AnyType,\r\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\r\n    })),\r\n    { list: GivenList, by: i => i.by || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toListMap: ops.setTypes(ListOps.toListMap, \r\n    i => MapType.forItem(\r\n      ListType.forItem(i.getValue || GivenListItem(i)), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toMap: ops.setTypes(ListOps.toMap,\r\n    i => MapType.forItem(\r\n      i.getValue || GivenListItem(i), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.setTypes(ListOps.joinInner, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinLeft: ops.setTypes(ListOps.joinLeft, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinRight: ops.setTypes(ListOps.joinRight, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinFull: ops.setTypes(ListOps.joinFull, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinCross: ops.setTypes(ListOps.joinCross, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\r\n    { },\r\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.setTypes(ListOps.min,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  max: ops.setTypes(ListOps.max,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  sum: ops.setTypes(ListOps.sum,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  avg: ops.setTypes(ListOps.avg,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  std: ops.setTypes(ListOps.std,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  variance: ops.setTypes(ListOps.variance,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  median: ops.setTypes(ListOps.median,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitand: ops.setTypes(ListOps.bitand,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitor: ops.setTypes(ListOps.bitor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitxor: ops.setTypes(ListOps.bitxor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ListOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEmpty: ops.setTypes(ListOps.isEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ListOps.isEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(ListOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ListOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  // Casts\r\n  \r\n\r\n  asAny: ops.setTypes(ListOps.asAny, \r\n    AnyType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asBoolean: ops.setTypes(ListOps.asBoolean, \r\n    BooleanType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asColor: ops.setTypes(ListOps.asColor, \r\n    ColorType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asDate: ops.setTypes(ListOps.asDate, \r\n    DateType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asList: ops.setTypes(ListOps.asList, \r\n    GivenValueList,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asMap: ops.setTypes(ListOps.asMap,\r\n    i => MapType.forItem(GivenValueListItem(i)),\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asNumber: ops.setTypes(ListOps.asNumber, \r\n    NumberType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asObject: ops.setTypes(ListOps.asObject,\r\n    ObjectType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asText: ops.setTypes(ListOps.asText, \r\n    TextType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asTuple: ops.setTypes(ListOps.asTuple, \r\n    TupleType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asSet: ops.setTypes(ListOps.asSet, \r\n    i => SetType.forItem(GivenValueListItem(i)), \r\n    { value: GivenValueList }\r\n  ),\r\n  \r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { MapType } from '../../types/Map';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { MapOps } from '../MapOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { objectValues } from '../../fns';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = MapType.operations;\r\n\r\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\r\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\r\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\r\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\r\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\r\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\r\n\r\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\r\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\r\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\r\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\r\n\r\nexport const MapOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(MapOps.create, MapType),\r\n\r\n  createLike: ops.setTypes(MapOps.createLike, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n  ),\r\n\r\n  createFor: ops.setTypes(MapOps.createFor, \r\n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\r\n    { value: i => i.value || AnyType },\r\n    { key: i => i.key || TextType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(MapOps.maybe, \r\n    (i) => Types.maybe(i.value, MapType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  get: ops.setTypes(MapOps.get, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  set: ops.setTypes(MapOps.set, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\r\n    {},\r\n    { existingValue: GivenMapValue }\r\n  ),\r\n\r\n  has: ops.setTypes(MapOps.has, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  delete: ops.setTypes(MapOps.delete, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  keys: ops.setTypes(MapOps.keys, \r\n    i => ListType.forItem(GivenMapKey(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  values: ops.setTypes(MapOps.values, \r\n    i => ListType.forItem(GivenMapValue(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  entries: ops.setTypes(MapOps.entries, \r\n    i => Types.object({\r\n      keys: ListType.forItem(GivenMapKey(i)),\r\n      values: ListType.forItem(GivenMapValue(i)),\r\n    }),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  pairs: ops.setTypes(MapOps.pairs, \r\n    i => ListType.forItem(Types.object({\r\n      key: GivenMapKey(i),\r\n      value: GivenMapValue(i)\r\n    })),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  clear: ops.setTypes(MapOps.clear, \r\n    GivenMap,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  count: ops.setTypes(MapOps.count, \r\n    NumberType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  cmp: ops.setTypes(MapOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  copy: ops.setTypes(MapOps.copy, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(MapOps.map, \r\n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\r\n    { map: GivenMap },\r\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\r\n    AnyType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \r\n    (i) => {\r\n      if (!(i.object instanceof ObjectType)) {\r\n        return MapType;\r\n      }\r\n\r\n      const propTypes = objectValues((i.object as ObjectType).options.props);\r\n      \r\n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\r\n    },\r\n    { object: i => i.object || ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(MapOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(MapOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(MapOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(MapOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\r\n\r\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\r\n\r\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\r\n\r\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\r\n\r\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\r\n\r\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\r\n\r\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\r\n\r\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\r\n\r\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\r\n\r\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { DateType } from '../../types/Date';\r\n\r\nimport { NumberOps } from '../NumberOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = NumberType.operations;\r\n\r\n\r\nconst BitMethod = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['has the bits', 'contain'],              // value & test === test\r\n    ['does not have the bits', 'notcontain'], // value & test !== test\r\n    ['has some of the bits', 'overlap'],      // value & test !== 0\r\n    ['has none of the bits', 'none'],         // value & test === 0\r\n    ['has the same bits', 'equal'],           // value === test\r\n    ['does not have the same bits', 'not'],   // value !== test\r\n    ['has all bits in', 'subset'],            // test & value === value\r\n  ])\r\n});\r\n\r\n\r\nexport const NumberOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(NumberOps.create, NumberType ),\r\n\r\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\r\n\r\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\r\n\r\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\r\n\r\n  e: ops.setTypes(NumberOps.e, NumberType ),\r\n\r\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\r\n\r\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\r\n\r\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\r\n\r\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\r\n\r\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\r\n\r\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\r\n\r\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\r\n\r\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\r\n\r\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\r\n  \r\n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\r\n  \r\n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\r\n  \r\n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.setTypes(NumberOps.maybe, \r\n    (i) => Types.maybe(i.value, NumberType),\r\n    { value: AnyType } \r\n  ),\r\n  \r\n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\r\n\r\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\r\n  \r\n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\r\n  \r\n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\r\n  \r\n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\r\n  \r\n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\r\n  \r\n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\r\n  \r\n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\r\n  \r\n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\r\n  \r\n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\r\n  \r\n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\r\n  \r\n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\r\n  \r\n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\r\n  \r\n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\r\n  \r\n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\r\n  \r\n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\r\n  \r\n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\r\n\r\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\r\n  \r\n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\r\n  \r\n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\r\n  \r\n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\r\n\r\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\r\n\r\n  // Other\r\n\r\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\r\n\r\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\r\n\r\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\r\n\r\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\r\n\r\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\r\n\r\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\r\n\r\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\r\n\r\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\r\n\r\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\r\n\r\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \r\n    BooleanType,\r\n    { value: NumberType, method: BitMethod, test: NumberType },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\r\n\r\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\r\n\r\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\r\n\r\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\r\n\r\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\r\n\r\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\r\n\r\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\r\n\r\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\r\n\r\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n};\r\n","\r\nimport { Type, TypeMap } from '../../Type';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ObjectOps } from '../ObjectOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { OptionalType } from '../../types/Optional';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { EntityType } from '../../types/Entity';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ObjectType.operations;\r\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\r\n\r\nexport const ObjectOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ObjectOps.create, \r\n    GivenObject\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ObjectOps.maybe, \r\n    (i) => Types.maybe(i.value, ObjectType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  has: ops.setTypes(ObjectOps.has, \r\n    BooleanType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  get: ops.setTypes(ObjectOps.get, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  set: ops.setTypes(ObjectOps.set, \r\n    GivenObject,\r\n    { object: GivenObject, key: TextType, value: AnyType },\r\n    {},\r\n    { existingValue: AnyType }\r\n  ),\r\n\r\n  delete: ops.setTypes(ObjectOps.delete, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ObjectOps.cmp, \r\n    NumberType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ObjectOps.copy, \r\n    GivenObject,\r\n    { object: GivenObject }\r\n  ),\r\n\r\n  merge: ops.setTypes(ObjectOps.merge, \r\n    (i) => {\r\n      const props: TypeMap = {};\r\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\r\n\r\n      for (const param of params) \r\n      {\r\n        let paramType = i[param];\r\n\r\n        if (paramType instanceof EntityType)\r\n        {\r\n          paramType = paramType.getType();\r\n        }\r\n\r\n        if (paramType instanceof ObjectType) \r\n        {\r\n          const paramProps = paramType.options.props;\r\n\r\n          for (const prop in paramProps) \r\n          {\r\n            const paramProp = paramProps[prop];\r\n\r\n            if (prop in props && paramProp instanceof OptionalType) \r\n            {\r\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\r\n            } \r\n            else \r\n            {\r\n              props[prop] = paramProp;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return new ObjectType({ props });\r\n    },\r\n    { a: ObjectType, b: ObjectType },\r\n    { c: ObjectType, d: ObjectType, e: ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ObjectOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ObjectOps.isEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ObjectOps.isLess, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ObjectOps.isGreater, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\r\n\r\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\r\n\r\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\r\n\r\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\r\n\r\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\r\n\r\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\r\n\r\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\r\n\r\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\r\n\r\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { SetOps } from '../SetOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { MapType } from '../../types/Map';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = SetType.operations;\r\n\r\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\r\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\r\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\r\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\r\n\r\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\r\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\r\n\r\nexport const SetOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(SetOps.create, SetType),\r\n\r\n  createLike: ops.setTypes(SetOps.createLike, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n  ),\r\n\r\n  createFor: ops.setTypes(SetOps.createFor, \r\n    i => ListType.forItem(i.value || AnyType),\r\n    { value: i => i.value || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(SetOps.maybe, \r\n    (i) => Types.maybe(i.value, SetType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  add: ops.setTypes(SetOps.add, \r\n    GivenSet,\r\n    { set: GivenSet, value: GivenSetValue },\r\n  ),\r\n\r\n  has: ops.setTypes(SetOps.has, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  delete: ops.setTypes(SetOps.delete, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  values: ops.setTypes(SetOps.values, \r\n    i => ListType.forItem(GivenSetValue(i)),\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  clear: ops.setTypes(SetOps.clear, \r\n    GivenSet,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  count: ops.setTypes(SetOps.count, \r\n    NumberType,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  cmp: ops.setTypes(SetOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  copy: ops.setTypes(SetOps.copy, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n    { deepCopy: GivenSetValue },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(SetOps.map, \r\n    i => SetType.forItem(i.transform || GivenSetValue(i)),\r\n    { set: GivenSet },\r\n    { transform: i => i.transform || GivenSetValue(i) },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(SetOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(SetOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isLess: ops.setTypes(SetOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreater: ops.setTypes(SetOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\r\n\r\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\r\n\r\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\r\n\r\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\r\n\r\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\r\n\r\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\r\n\r\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\r\n\r\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\r\n\r\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { ListType } from '../../types/List';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { TextOps } from '../TextOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = TextType.operations;\r\nconst TextListType = ListType.forItem(TextType);\r\nconst RegexMatchType = Types.object({\r\n  index: NumberType,\r\n  lastIndex: NumberType,\r\n  input: TextType,\r\n  groups: TextListType,\r\n});\r\n\r\n\r\nexport const TextOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TextOps.create, TextType),\r\n\r\n  uuid: ops.setTypes(TextOps.uuid, TextType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TextOps.maybe, \r\n    (i) => Types.maybe(i.value, TextType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\r\n\r\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\r\n\r\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\r\n\r\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\r\n\r\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\r\n\r\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\r\n\r\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\r\n\r\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\r\n\r\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\r\n\r\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\r\n\r\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\r\n\r\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\r\n\r\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\r\n\r\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\r\n\r\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\r\n\r\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\r\n\r\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \r\n    ListType.forItem(RegexMatchType), \r\n    { value: TextType, regex: TextType }, \r\n    { ignoreCase: BooleanType, multiline: BooleanType }\r\n  ),\r\n\r\n  regexReplace: ops.setTypes(TextOps.regexReplace, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replacement: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n  ),\r\n\r\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replace: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n    { match: RegexMatchType }\r\n  ),\r\n\r\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\r\n\r\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\r\n\r\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\r\n\r\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\r\n\r\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\r\n\r\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\r\n\r\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\r\n\r\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\r\n\r\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\r\n\r\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\r\n\r\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\r\n\r\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\r\n\r\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\r\n\r\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\r\n\r\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\r\n\r\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\r\n\r\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\r\n\r\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\r\n\r\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\r\n\r\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n};\r\n","\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { TupleOps } from '../TupleOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\nimport { NullType } from '../../types/Null';\r\n\r\n\r\nconst ops = TupleType.operations;\r\n\r\n\r\nexport const TupleOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TupleOps.create, TupleType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TupleOps.maybe, \r\n    (i) => Types.maybe(i.value, TupleType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\r\n\r\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\r\n\r\n  build: ops.setTypes(TupleOps.build, \r\n    (i) => {\r\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\r\n      let elements: Type[] = [];\r\n      let list = false;\r\n      \r\n      for (const param of params) \r\n      {\r\n        const paramType = i[param];\r\n\r\n        if (paramType) \r\n        {\r\n          if (paramType instanceof TupleType) \r\n          {\r\n            elements = elements.concat(paramType.options);\r\n          }\r\n          else if (paramType instanceof ListType)\r\n          {\r\n            list = true;\r\n            elements.push(paramType.options.item);\r\n          }\r\n          else \r\n          {\r\n            elements.push(paramType);\r\n          }\r\n        }\r\n      }\r\n\r\n      return list\r\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\r\n        : new TupleType(elements);\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\r\n\r\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\r\n\r\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\r\n\r\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\r\n\r\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\r\n\r\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\r\n\r\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\r\n\r\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\r\n\r\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\r\n\r\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n};\r\n","import { isString } from '../fns';\r\n\r\n\r\nexport type Formatter<T> = (item: T) => string;\r\n\r\nexport interface FormatterMap<T> \r\n{\r\n  [key: string]: Formatter<T>;\r\n}\r\n\r\nexport interface FormatSection<T>\r\n{\r\n  size: number,\r\n  formats: FormatterMap<T>\r\n}\r\n\r\nexport interface FormatEscapes\r\n{\r\n  [first: string]: {\r\n    start: string;\r\n    startEscape: string;\r\n    end: string;\r\n    endEscape: string;\r\n  }\r\n}\r\n\r\nexport class Format<T>\r\n{\r\n\r\n  private cached: FormatterMap<T> = {};\r\n\r\n  private sections: FormatSection<T>[] = [];\r\n\r\n  private escapes: FormatEscapes;\r\n\r\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\r\n  {\r\n    this.add(formats);\r\n    this.escapes = escapes;\r\n  }\r\n\r\n  public add(map: FormatterMap<T>): this\r\n  public add(key: string, formatter: Formatter<T>): this\r\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\r\n  {\r\n    if (isString(keyOrMap))\r\n    {\r\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\r\n    }\r\n    else\r\n    {\r\n      for (const key in keyOrMap)\r\n      {\r\n        this.getSection(key.length).formats[key] = keyOrMap[key];\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getSection(size: number): FormatSection<T>\r\n  {\r\n    const guess = this.sections.length - size;\r\n    const guessSection = this.sections[guess];\r\n\r\n    if (guessSection && guessSection.size === size)\r\n    {\r\n      return guessSection;\r\n    }\r\n\r\n    for (const section of this.sections)\r\n    {\r\n      if (section.size === size)\r\n      {\r\n        return section;\r\n      }\r\n    }\r\n\r\n    const newSection = { size, formats: {} };\r\n\r\n    this.sections.push(newSection);\r\n    this.sortBySize();\r\n\r\n    return newSection;\r\n  }\r\n\r\n  private sortBySize()\r\n  {\r\n    this.sections.sort((a, b) => b.size - a.size);\r\n  }\r\n\r\n  private getEscaped (x: string, i: number): false | [string, number]\r\n  {\r\n    const c = x.charAt(i);\r\n    const escaped = this.escapes[c];\r\n\r\n    if (!escaped)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { start, end, startEscape, endEscape } = escaped;\r\n\r\n    const possibleStart = x.substring(i, i + start.length);\r\n\r\n    if (possibleStart !== start)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\r\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\r\n\r\n    if (possibleEscape === startEscape)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    i += start.length;\r\n\r\n    const endOffset = endEscape.indexOf(end);\r\n    let last = x.indexOf(end, i);\r\n    let content: string = x.substring(i, last);\r\n\r\n    i = last - endOffset;\r\n\r\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\r\n    {\r\n      content = content.substring(0, content.length - endOffset);\r\n      content += end;\r\n      i += endEscape.length;\r\n      last = x.indexOf(end, i);\r\n      content += x.substring(i, last);\r\n      i = last - endOffset;\r\n    }\r\n\r\n    if (last === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return [content, last + end.length];\r\n  }\r\n\r\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\r\n  {\r\n    if (format in this.cached)\r\n    {\r\n      return this.cached[format];\r\n    }\r\n\r\n    const sections = this.sections;\r\n    const formats: Formatter<T>[] = [];\r\n    let constant: string = '';\r\n\r\n    for (let i = 0; i < format.length; i++)\r\n    {\r\n      const escaped = this.getEscaped(format, i);\r\n\r\n      if (escaped !== false)\r\n      {\r\n        const [ content, end ] = escaped;\r\n\r\n        constant += content;\r\n        i = end - 1;\r\n\r\n        continue;\r\n      }\r\n\r\n      let handled: boolean = false;\r\n\r\n      for (let k = 0; k < sections.length && !handled; k++)\r\n      {\r\n        const section = sections[ k ];\r\n        const part: string = format.substring( i, i + section.size );\r\n\r\n        if (part.length === section.size)\r\n        {\r\n          const formatter = section.formats[ part ];\r\n\r\n          if (formatter)\r\n          {\r\n            formats.push(formatter);\r\n            i += section.size - 1;\r\n            handled = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (handled)\r\n      {\r\n        if (constant)\r\n        {\r\n          const copy = constant;\r\n\r\n          formats.splice(formats.length - 1, 0, () => copy);\r\n          constant = '';\r\n        }\r\n      }\r\n      else\r\n      {\r\n        constant += format.charAt(i);\r\n      }\r\n    }\r\n\r\n    if (constant)\r\n    {\r\n      formats.push(() => constant);\r\n    }\r\n\r\n    const finalFormatter = (item: T) => \r\n    {\r\n      let formatted: string = '';\r\n\r\n      for (const formatter of formats)\r\n      {\r\n        formatted += formatter(item);\r\n      }\r\n\r\n      return formatted;\r\n    };\r\n\r\n    if (cache)\r\n    {\r\n      this.cached[format] = finalFormatter\r\n    }\r\n\r\n    return finalFormatter;\r\n  }\r\n\r\n  public format (format: string, item: T, cache: boolean = false): string\r\n  {\r\n    return this.getFormatter(format, cache)(item);\r\n  }\r\n\r\n}","\r\nimport { Format } from '../Format';\r\nimport { LocaleOptions } from '../../Locale';\r\nimport { padNumber } from '../../fns';\r\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\r\n  M:          ([day]) => (day.getMonth() + 1) + '',\r\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\r\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\r\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\r\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\r\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\r\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\r\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\r\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\r\n  D:          ([day]) => day.getDate() + '',\r\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\r\n  DD:         ([day]) => padNumber(day.getDate(), 2),\r\n  DDD:        ([day]) => getDayOfYear(day) + '',\r\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\r\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\r\n  d:          ([day]) => day.getDay() + '',\r\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\r\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\r\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\r\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\r\n  e:          ([day]) => getDayOfWeek(day) + '',\r\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\r\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\r\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\r\n  w:          ([day]) => getWeekOfYear(day) + '',\r\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\r\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\r\n  W:          ([day]) => getWeekOfYearISO(day) + '',\r\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\r\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\r\n  Y:          ([day]) => day.getFullYear() + '',\r\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\r\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\r\n  H:          ([day]) => day.getHours() + '',\r\n  HH:         ([day]) => padNumber(day.getHours(), 2),\r\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\r\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\r\n  k:          ([day]) => (day.getHours() + 1) + '',\r\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\r\n  m:          ([day]) => day.getMinutes() + '',\r\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\r\n  s:          ([day]) => day.getSeconds() + '',\r\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\r\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\r\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\r\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\r\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\r\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\r\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\r\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\r\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\r\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\r\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\r\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\r\n  Z:          ([day]) => formatOffset(day, ':'),\r\n  ZZ:         ([day]) => formatOffset(day, ''),\r\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\r\n  x:          ([day]) => day.valueOf() + '',\r\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\r\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\r\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\r\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\r\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\r\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\r\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\r\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\r\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\r\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\r\n}, {\r\n  '[': {\r\n    start: '[',\r\n    startEscape: '\\\\[',\r\n    end: ']',\r\n    endEscape: '\\\\]'\r\n  },\r\n  \"'\": {\r\n    start: \"'\",\r\n    startEscape: \"''\",\r\n    end: \"'\",\r\n    endEscape: \"''\"\r\n  }\r\n});\r\n\r\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\r\n\r\nfunction formatOffset(day: Date, splitter: string): string\r\n{\r\n  const off = getDateOffset(day);\r\n  const hr = Math.floor(Math.abs(off) / 100);\r\n  const mn = Math.abs(off) % 100;\r\n\r\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\r\n}","\r\nexport * from './fns';\r\n\r\nexport * from './Command';\r\nexport * from './DefinitionProvider';\r\nexport * from './Definitions';\r\nexport * from './DataTypes';\r\nexport * from './Entity';\r\nexport * from './EventBase';\r\nexport * from './Expression';\r\nexport * from './Exprs';\r\nexport * from './Func';\r\nexport * from './LinkedNode';\r\nexport * from './Locale';\r\nexport * from './Operation';\r\nexport * from './Computed';\r\nexport * from './Program';\r\nexport * from './ReferenceData';\r\nexport * from './Relation';\r\nexport * from './Runtime';\r\nexport * from './Type';\r\nexport * from './Types';\r\nexport * from './Traverser';\r\nexport * from './Validate';\r\n\r\nexport * from './maps/FastMap';\r\nexport * from './maps/NamedMap';\r\n\r\nexport * from './types/ID';\r\nexport * from './types/Entity';\r\nexport * from './types/Any';\r\nexport * from './types/Boolean';\r\nexport * from './types/Color';\r\nexport * from './types/Date';\r\nexport * from './types/Enum';\r\nexport * from './types/List';\r\nexport * from './types/Many';\r\nexport * from './types/Map';\r\nexport * from './types/Not';\r\nexport * from './types/Null';\r\nexport * from './types/Number';\r\nexport * from './types/Object';\r\nexport * from './types/Optional';\r\nexport * from './types/Set';\r\nexport * from './types/Text';\r\nexport * from './types/Tuple';\r\n\r\nexport * from './exprs/And';\r\nexport * from './exprs/Chain';\r\nexport * from './exprs/Comment';\r\nexport * from './exprs/Computed';\r\nexport * from './exprs/Constant';\r\nexport * from './exprs/Define';\r\nexport * from './exprs/Do';\r\nexport * from './exprs/For';\r\nexport * from './exprs/Get';\r\nexport * from './exprs/GetData';\r\nexport * from './exprs/GetEntity';\r\nexport * from './exprs/GetRelation';\r\nexport * from './exprs/If';\r\nexport * from './exprs/Invoke';\r\nexport * from './exprs/Method';\r\nexport * from './exprs/No';\r\nexport * from './exprs/Not';\r\nexport * from './exprs/Object';\r\nexport * from './exprs/Operation';\r\nexport * from './exprs/Or';\r\nexport * from './exprs/Path';\r\nexport * from './exprs/Return';\r\nexport * from './exprs/Set';\r\nexport * from './exprs/Sub';\r\nexport * from './exprs/Switch';\r\nexport * from './exprs/Template';\r\nexport * from './exprs/Tuple';\r\nexport * from './exprs/Update';\r\nexport * from './exprs/While';\r\n\r\nexport * from './def';\r\n\r\nexport * from './ops/EntityOps';\r\nexport * from './ops/AnyOps';\r\nexport * from './ops/BooleanOps';\r\nexport * from './ops/ColorOps';\r\nexport * from './ops/DateOps';\r\nexport * from './ops/ListOps';\r\nexport * from './ops/MapOps';\r\nexport * from './ops/NumberOps';\r\nexport * from './ops/ObjectOps';\r\nexport * from './ops/SetOps';\r\nexport * from './ops/TextOps';\r\nexport * from './ops/TupleOps';\r\n\r\nexport * from './ops/types/EntityOpsTypes';\r\nexport * from './ops/types/AnyOpsTypes';\r\nexport * from './ops/types/BooleanOpsTypes';\r\nexport * from './ops/types/ColorOpsTypes';\r\nexport * from './ops/types/DateOpsTypes';\r\nexport * from './ops/types/ListOpsTypes';\r\nexport * from './ops/types/MapOpsTypes';\r\nexport * from './ops/types/NumberOpsTypes';\r\nexport * from './ops/types/ObjectOpsTypes';\r\nexport * from './ops/types/SetOpsTypes';\r\nexport * from './ops/types/TextOpsTypes';\r\nexport * from './ops/types/TupleOpsTypes';\r\n\r\nexport * from './locales';\r\n\r\nexport * from './util/color/Color';\r\nexport * from './util/color/ColorSpace';\r\nexport * from './util/color/ColorSpaceHSL';\r\nexport * from './util/color/ColorSpaceRGB';\r\nexport * from './util/date/DateConstants';\r\nexport * from './util/date/DateFormat';\r\nexport * from './util/date/DateFunctions';\r\nexport * from './util/Format';"],"sourceRoot":""}