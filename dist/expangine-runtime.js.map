{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","isCompatible","other","exact","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","isDynamic","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","has","defaultResult","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","cache","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","arg","expressions","AndExpression","e","some","expectedType","directly","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","PathExpression","fromPartial","pathData","isPath","getPathType","thisType","INVALID_EXPRESSION","EMPTY_PATH","isWritable","isMutating","e0","e1","e2","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","param","paramName","MISSING_FUNCTION","argName","argType","named","nameOrArgs","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","paramType","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","READONLY","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","propExpr","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","takeKey","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","moveDataset","inside","movable","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","isExpression","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","objectType","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getFormatter","escaped","getEscaped","content","handled","finalFormatter","formatted","startEscape","endEscape","possibleEscapeIndex","endOffset","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is Record<string, any> \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): value is ([] | {} | null | undefined)\n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function now(): number\n{\n  return new Date().getTime();\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\n  map: Record<K, V>, \n  getValue: (value: V, key: K) => R, \n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey(key, value)] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<V, M = V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n  OUTSIDE_PATH = 14,          // HIGH\n  READONLY = 15,              // HIGH\n  EMPTY_PATH = 16,            // HIGH\n  INVALID_THIS = 17,          // HIGH\n  MISSING_METHOD = 18,        // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;\n","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeMap = Record<string, Type>;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  getData(name: string): ReferenceData | null;\n  setLegacy(): void;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<O> = any, O = any> \n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public abstract getExactType(value: any): Type<O>;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): boolean;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<O>;\n\n  public abstract clone(): Type<O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): any;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\n\n  public abstract fromJson(json: any): any;\n\n  public abstract toJson(value: any): any;\n  \n}","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n  setLegacy(): void;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public static INSTANCE = 'instance';\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\n  \n  public abstract mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;\n\n  public isDynamic(): boolean\n  {\n    return true;\n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return false;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return true;\n  }\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = []\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed \n{\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n  writeable?: {\n    op: string;\n    value: string;\n    newValue: string;\n    params: Record<string, any>;\n  };\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp = this.map[id];\n\n    comp.writeable = { \n      op: op.id,\n      value,\n      newValue,\n      params: params || {},\n    };\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport interface DataTypeAccessor<T = any>\n{\n  priority: number;\n  isValid(value: any, step: any): boolean;\n  set(value: T, step: any, stepValue: any): void;\n  get(value: T, step: any): any;\n  remove(value: T, step: any): any;\n  has(value: T, step: any): any;\n}\n\nexport interface DataTypeRegistryOperations\n{\n  objectSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): void;\n  objectRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;\n  arrayAdd<T>(arr: T[], item: T): void;\n  arrayRemove<T>(arr: T[], index: number): T;\n  arraySet<T>(arr: T[], index: number, item: T): T;\n}\n\nexport class DataTypeRegistry implements DataTypeRegistryOperations\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n  private accessorList: DataTypeAccessor[];\n\n  public objectSet: DataTypeRegistryOperations['objectSet']\n    = (obj, prop, value) => obj[prop] = value;\n  public objectRemove: DataTypeRegistryOperations['objectRemove']\n    = (obj, prop) => delete obj[prop];\n  public arrayAdd: DataTypeRegistryOperations['arrayAdd']\n    = (arr, item) => arr.push(item);\n  public arrayRemove: DataTypeRegistryOperations['arrayRemove']\n    = (arr, index) => arr.splice(index, 1)[0];\n  public arraySet: DataTypeRegistryOperations['arraySet']\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n    this.accessorList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  public get(value: any, step: any): any\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.get(value, step);\n      }\n    }\n  }\n\n  public set(value: any, step: any, stepValue: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.set(value, step, stepValue);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public remove(value: any, step: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.remove(value, step);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public has<O = false>(value: any, step: any, defaultResult: O = false as unknown as O): boolean | O\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.has(value, step);\n      }\n    }\n\n    return defaultResult;\n  }\n\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\n  {\n    return this.addToPriorityList(this.accessorList, accessor);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expression.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expression.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return this.expression.mutates(def, arg);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)    \n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public define: [string, Expression][];\n  public body: Expression;\n\n  public constructor(define: [string, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\n\n    return this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [, defined] of this.define)    \n    {\n      if (defined.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.body.mutates(def, arg, directly);\n  }\n\n  public with(name: string, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\n  {\n    const append = isString(nameOrDefines)\n      ? { [nameOrDefines]: value }\n      : nameOrDefines;\n\n    for (const name in append)\n    {\n      const expr = Exprs.parse(append[name]);\n      const existing = this.define.find(([varName]) => varName === name);\n\n      if (existing) {\n        existing[1] = expr;\n      } else {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.chain.length\n      ? this.chain[this.chain.length - 1].isDynamic()\n      : false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const link of this.chain)\n    {\n      if (link.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    if (data[INDEX_PATH])\n    {\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\n    }\n    \n    return new GetExpression();\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression();\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n\n    DataTypes.addAccessor<string>({\n      priority,\n      isValid: isString,\n      get: (x, step) => x[step],\n      set: (x, step, value) => {},\n      remove: (x, step) => x.substring(0, step) + x.substring(step + 1),\n      has: (x, step) => x[step] !== undefined,\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions \n{\n  key: Type;\n  value: Type;\n  constants: Map<any, any>;\n}\n\nexport class EnumType extends Type<EnumOptions> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next();\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { isNumber } from '../fns';\nimport { GetExpression } from './Get';\nimport { ConstantExpression } from './Constant';\n\n\nconst INDEX_PATH = 1;\n\nexport class PathExpression extends Expression \n{\n\n  public static id = 'path';\n\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \n  {\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\n    \n    return new PathExpression(expressions);\n  }\n\n  public static encode(expr: PathExpression): any \n  {\n    return [this.id, expr.expressions.map((e) => e.encode())];\n  }\n\n  public static createForLegacy(path: Expression[])\n  {\n    for (let i = path.length - 1; i >= 0; i--)\n    {\n      const node = path[i];\n\n      if (node instanceof PathExpression)\n      {\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\n        {\n          path.splice(i, 1, ...node.expressions);\n        }\n      }\n    }\n\n    return new PathExpression(path);\n  }\n\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\n  {\n    const isPath = pathData[0] === PathExpression.id;\n    const path = isPath\n      ? PathExpression.decode(pathData, exprs)\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\n\n    if (isPath) {\n      exprs.setLegacy();\n    }\n\n    return path;\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return PathExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return PathExpression.encode(this);\n  }\n\n  public clone(): PathExpression\n  {\n    return new PathExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.expressions, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    \n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const path = this.expressions;\n\n    if (path.length === 0)\n    {\n      handler({\n        type: ValidationType.EMPTY_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    let thisType = path[0].getType(def, context);\n\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: path[0],\n        parent: this,\n      });\n    }\n    else\n    {\n      path[0].validate(def, context, handler);\n\n      for (let i = 1; i < path.length; i++)\n      {\n        const node = path[i];\n\n        node.validate(def, context, handler, thisType);\n\n        thisType = node.isPathNode()\n          ? node.getType(def, context, thisType)\n          : thisType.getSubType(node, def, context);\n\n        if (!thisType)\n        {\n          handler({\n            type: ValidationType.INVALID_EXPRESSION,\n            severity: ValidationSeverity.HIGH,\n            context,\n            subject: node,\n            parent: this,\n          });\n          \n          break;\n        }\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public isWritable(defs: DefinitionProvider)\n  {\n    return this.expressions.length > 0\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\n      : false;\n  }\n\n  public isMutating(arg: string, directly: boolean = false): boolean\n  {\n    const e0 = this.expressions[0];\n    const e1 = this.expressions[1];\n    const e2 = this.expressions[2]; // tslint:disable-line: no-magic-numbers\n\n    if (!(e0 instanceof GetExpression && e1 instanceof ConstantExpression && e1.value === arg))\n    {\n      return false;\n    }\n\n    return directly ? true : !!e2;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n\n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider) \n  {\n    const name = data[INDEX_NAME];\n\n    if (data[INDEX_EXPRESSION]) \n    {\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\n    }\n    \n    return new ComputedExpression(name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string) \n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return op ? op.complexity : 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.OUTSIDE_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      if (!def.hasComputed(thisType, this.name))\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject: this,\n        });\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    const comp = defs.getComputed(this.name);\n\n    return !comp || !!comp.writeable;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BREAK = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, breakVariable, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.start.mutates(def, arg, directly) || \n      this.end.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (breakVariable)\n    {\n      this.breakVariable = breakVariable;\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }  \n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], ['initial'], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport interface ObjectOptions \n{\n  props: TypeMap;\n}\n\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    const type = new ObjectType({ props: {} });\n\n    cache.set(data, type);\n\n    type.options.props = objectMap(data, d => describer.describe(d));\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n\n    DataTypes.addAccessor<Record<string, any>>({\n      priority,\n      isValid: (value) => isObject(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue),\n      remove: (value, step) => DataTypes.objectRemove(value, step),\n      has: (value, step) => step in value,\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<O>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        p1[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\n      {\n        key: new EnumType({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map(\n            objectValues(this.options.props, (prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => DataTypes.objectRemove(this.options.props, prop))\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        if (props[prop].isOptional())\n        {\n          continue;\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<O>\n  {\n    return new ObjectType<O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n    \n    for (const prop in props)\n    {\n      const propType = props[prop];\n\n      if (propType && !propType.isOptional())\n      {\n        out[prop] = propType.create();\n      }\n    }\n\n    return out;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): any\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: any): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n    // return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def, context),\n        result.getComplexity(def, context)\n      ), \n      this.otherwise.getComplexity(def, context)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [condition, result] of this.cases)\n    {\n      if (condition.mutates(def, arg, directly) || result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.otherwise.mutates(def, arg, directly);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return 0;\n    }\n\n    return func.expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const func = def.getFunction(this.name);\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    return func\n      ? func.getReturnType(def, argTypes)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args ,arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const func = def.getFunction(this.name);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const params: TypeMap = {};\n\n      objectEach(func.params.options.props, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n\n        if (arg)\n        {\n          params[paramName] = arg.getType(def, context);\n        }\n      });\n\n      // func.options.expression.validate(def, Types.object(params), handler);\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && func.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false; \n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return `Function \"${this.name}\" does not exist`;\n    }\n\n    return func.expression;\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { EntityType } from '../types/Entity';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_ENTITY = 1;\nconst INDEX_NAME = 2;\nconst INDEX_ARGS = 3;\n\nexport class MethodExpression extends Expression \n{\n\n  public static id = 'method';\n\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \n  {\n    const entity = data[INDEX_ENTITY];\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new MethodExpression(entity, name, args);\n  }\n\n  public static encode(expr: MethodExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.entity, expr.name, args];\n  }\n\n  public entity: string;\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(entity: string, name: string, args: ExpressionMap) \n  {\n    super();\n    this.entity = entity;\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return MethodExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity || !entity.methods[this.name])\n    {\n      return 0;\n    }\n\n    return entity.methods[this.name].expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return MethodExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      return null;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return null;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return null;\n    }\n    \n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    argTypes[Expression.INSTANCE] = entity.type;\n    \n    return method.getReturnType(def, argTypes);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args, arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      handler({\n        type: ValidationType.INVALID_THIS,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      handler({\n        type: ValidationType.MISSING_METHOD,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const params: TypeMap = {};\n\n    params[Expression.INSTANCE] = entity.type;\n\n    objectEach(method.params.options.props, (param, paramName) =>\n    {\n      const arg = this.args[paramName];\n\n      this.validateType(def, context, param, arg, handler);\n\n      if (arg)\n      {\n        params[paramName] = arg.getType(def, context);\n      }\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return false;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && method.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return `Entity \"${this.entity}\" does not exist`;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\n    }\n\n    return method.expression;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public named(name: string): MethodExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): MethodExpression\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const { name, params } = this;\n    const operation = def.getOperation(name);\n\n    if (!operation)\n    {\n      return false;\n    }\n\n    for (const paramName in params)\n    {\n      const paramType = params[paramName];\n\n      if (paramType.mutates(def, arg, directly) || (paramType instanceof PathExpression && paramType.isMutating(arg, true) && operation.mutates.indexOf(paramName) !== -1))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_VALUE = 1;\n\nexport class ReturnExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'return';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new ReturnExpression(value);\n  }\n\n  public static encode(expr: ReturnExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, returnValue]\n      : [this.id];\n  }\n\n  public value: Expression;\n\n  public constructor(value: Expression) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ReturnExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.value.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.value.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ReturnExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ReturnExpression(this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ReturnExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.value.mutates(def, arg, directly);\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n\n    return new SetExpression(path, value);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    return [this.id, expr.path.encode(), expr.value.encode()];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue)\n  {\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n\n  public constructor(path: PathExpression, value: Expression) \n  {\n    super();\n\n    this.path = path;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.clone(), this.value.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      this.validateType(def, context, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public to(value: ExpressionValue): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || \n      this.value.mutates(def, arg, directly) || \n      this.path.mutates(def, arg, directly);\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def, context), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def, context)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def, context), \n        this.defaultCase.getComplexity(def, context)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    if (this.value.mutates(def, arg, directly))\n    {\n      return true;\n    }\n\n    for (const [tests, result] of this.cases)\n    {\n      if (result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n\n      for (const test of tests)\n      {\n        if (test.mutates(def, arg, directly))\n        {\n          return true;\n        }\n      }\n    }\n\n    return this.defaultCase.mutates(def, arg, directly);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const param in this.params)\n    {\n      if (this.params[param].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst DEFAULT_CURRENT = 'current';\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\n\nexport class UpdateExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'up';\n\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \n\n    return new UpdateExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: UpdateExpression): any \n  {\n    const path = expr.path.encode();\n    const value = expr.value.encode();\n\n    return expr.currentVariable === DEFAULT_CURRENT\n      ? [this.id, path, value]\n      : [this.id, path, value, expr.currentVariable]\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\n  {\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return UpdateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    return {\n      [this.currentVariable]: AnyType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return UpdateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === UpdateExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === UpdateExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      const valueContext = def.getContext(context, {\n        [this.currentVariable]: expectedType,\n      });\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || this.value.mutates(def, arg, directly) || this.path.mutates(def, arg, directly);\n  }\n\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable || this.currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): UpdateExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n    \n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions \n{\n  item: Type;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType extends Type<ListOptions> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    const type = new ListType({\n      item: AnyType.baseType,\n      min: data.length,\n      max: data.length\n    });\n\n    cache.set(data, type);\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    type.options.item = item;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<any[]>({\n      priority,\n      isValid: (value) => isArray(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\n      remove: (value, step) => DataTypes.arrayRemove(value, step),\n      has: (value, step) => value[step] !== undefined,\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport class TupleType extends Type<Type[]>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: TupleType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType\n  {\n    return new TupleType([]);\n  }\n\n  public clone(): TupleType\n  {\n    return new TupleType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return this.options.map(e => e.create());\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return this.options.map((e, i) => e.fromJson(json[i]));\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    for (const prop in this.props)\n    {\n      const propExpr = this.props[prop];\n\n      if (propExpr && propExpr.isDynamic())\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => DataTypes.objectRemove(this.props, prop))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const prop in this.props)\n    {\n      if (this.props[prop].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { PathExpression } from './exprs/Path';\nimport { ReturnExpression } from './exprs/Return';\nimport { SetExpression } from './exprs/Set';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { UpdateExpression } from './exprs/Update';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type } from './Type';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\n  }\n\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\n  {\n    return path.length === 0\n      ? new GetExpression()\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\n  }\n\n  public static computed(name: string): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static path(...exprs: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\n      ? exprs[0]\n      : new PathExpression(this.parse(exprs)));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\n  {\n    return this.setParent(new ReturnExpression(this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static update(...path: ExpressionValue[]): UpdateExpression\n  {\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0);\n  y.setFullYear(y.getFullYear(), month, 1);\n  y.setHours(0, 0, 0, 0);\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\n\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\n\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\n\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\n\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\n\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\n\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\n\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\n\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\n\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\n\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\n\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\n\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\n\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\n\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\n\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\n\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\n\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\n\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\n\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\n\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\n\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\n\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\n\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\n\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\n\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\n\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\n\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\n\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\n\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\n\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): any\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions \n{\n  key: Type;\n  value: Type;\n}\n\nexport class MapType extends Type<MapOptions> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    const type = new MapType({ key, value });\n\n    cache.set(data, type);\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    type.options.key = key;\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<Map<any, any>>({\n      priority,\n      isValid: (value) => isMap(value),\n      get: (value, step) => value.get(step),\n      set: (value, step, stepValue) => value.set(step, stepValue),\n      remove: (value, step) => value.delete(step),\n      has: (value, step) => value.has(step),\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop in map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport class OptionalType extends Type<Type>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): any\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions\n{\n  hasAlpha?: boolean;\n}\n\n\nexport class ColorType extends ObjectType<ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      created, \n      updated,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, prop);\n      DataTypes.objectSet(this.transcoders, newProp, transcoder);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        DataTypes.objectSet(instance, prop, this.instances.reduce((a, b) => isNumber(b[prop]) ? Math.max(a, b[prop]) : a, 0) + 1);\n        break;\n      case EntityPrimaryType.UUID:\n        DataTypes.objectSet(instance, prop, Entity.uuid());\n        break;\n    }\n  }\n\n  public takeKey(run: Runtime, instance: any): any\n  {\n    this.setKey(instance);\n\n    return this.getKey(run, instance);\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    DataTypes.objectSet(this.indexes, name, index);\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    DataTypes.objectRemove(this.indexes, name);\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      DataTypes.objectRemove(this.indexes, name);\n      DataTypes.objectSet(this.indexes, newName, index);\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    DataTypes.objectSet(this.transcoders, prop, transcoder);\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, name);\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    DataTypes.objectSet(this.methods, method.name, method);\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      DataTypes.objectRemove(this.methods, name);\n      DataTypes.objectSet(this.methods, newName, method);\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      DataTypes.objectRemove(this.methods, name);\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions \n{\n  value: Type;\n}\n\nexport class SetType extends Type<SetOptions> \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    const type = new SetType({ value });\n\n    cache.set(data, type);\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<any>): Set<any>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<any>): Array<any>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.entries()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved, TypeProvider } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\nimport { EntityType } from './types/Entity';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static entity(name: string, types: TypeProvider)\n  {\n    return new EntityType(name, types);\n  }\n\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\n  {\n    return this.setParent(new EnumType({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list(item: TypeInput, min?: number, max?: number)\n  {\n    return this.setParent(new ListType({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map(value: TypeInput, key: TypeInput = TextType)\n  {\n    return this.setParent(new MapType({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object(props: TypeInputMap = {})\n  {\n    return this.setParent(new ObjectType({ \n      props: this.resolve(props),\n    }));\n  }\n\n  public static optional(type: TypeInput): Type\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set(value: TypeInput)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple(types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\n  {\n    return this.setParent(new TupleType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static parse(input: TypeInput): Type\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  private listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { ObjectType, ObjectOptions } from './types/Object';\nimport { TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  params: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      params: Types.object(),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public params: ObjectType<ObjectOptions>;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\n    this.expression = defs.getExpression(options.expression);\n    this.defaults = this.params.fromJson(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.params = options instanceof Func\n        ? options.params\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\n      this.expression = options instanceof Func\n        ? options.expression\n        : defs.getExpression(options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.params.fromJson(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      description, \n      meta,\n      params: params.encode(),\n      expression: expression.encode(),\n      defaults: params.toJson(defaults),\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const paramType = this.params.options.props[name];\n\n    if (paramType)\n    {\n      DataTypes.objectSet(this.params.options.props, newName, paramType);\n      DataTypes.objectRemove(this.params.options.props, name);\n\n      if (name in this.defaults)\n      {\n        DataTypes.objectSet(this.defaults, newName, this.defaults[name]);\n        DataTypes.objectRemove(this.defaults, name);\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const exists = name in this.params.options.props;\n\n    if (exists)\n    {\n      DataTypes.objectRemove(this.params.options.props, name);\n      DataTypes.objectRemove(this.defaults, name);\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \n  {\n    const context = Types.object({\n      ...this.params.options.props,\n      ...paramsTypes,\n    });\n\n    return this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): ObjectType\n  {\n    return isEmpty(this.defaults)\n      ? this.params\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\n  }\n\n  public getParamType(param: string)\n  {\n    const propType = this.params.options.props[param];\n\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\n      ? propType.getRequired()\n      : propType;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.params.options.props[prop];\n\n      if (!propType.getRequired().isValid(target[prop]))\n      {\n        DataTypes.objectSet(target, prop, DataTypes.copy(this.defaults[prop]));\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    if (!(arg in this.params.options.props))\n    {\n      return false;\n    }\n\n    return this.expression.mutates(def, arg, false);\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap, now } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n\n  /**\n   * When the relation was created.\n   */\n  public created: number;\n\n  /**\n   * When the relation was last updated.\n   */\n  public updated: number;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.updated = options.updated || now();\n    this.created = options.created || now();\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.updated = options.updated || now();\n      this.created = options.created || now();\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, created, updated,\n      kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      updated,\n      created,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber, now } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n  moveDataset(program: Program, dataset: ProgramDataSet, from: number, to: number): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now(),\n        updated: now(),\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public moveDataset(dataset: ProgramDataSet | number, to: number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n    const inside = to >= 0 && to < this.datasets.length;\n    const movable = exists && inside;\n\n    if (movable)\n    {\n      const data = this.datasets[index];\n\n      this.datasets.splice(index, 1);\n      this.datasets.splice(to, 0, data);\n\n      this.trigger('moveDataset', this, data, index, to);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return movable;\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: Partial<ProgramDataSet>, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n\n      DataTypes.arrayRemove(this.datasets, index);\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { now } from './fns';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, created, updated, meta, dataType, data } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, isString, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func, 'params' | 'returnType'] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func, 'params' | 'returnType'] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\n  changedMethods(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  private legacy: boolean = false;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  public isLegacy(): boolean\n  {\n    return this.legacy;\n  }\n\n  public setLegacy(): void\n  {\n    this.legacy = true;\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(completeData: any): Type\n  {\n    const described: Map<any, any> = new Map();\n\n    const provider: TypeDescribeProvider = \n    {\n      describe: (data) => \n      {\n        let describedType = described.get(data);\n\n        if (describedType !== undefined) \n        {\n          return describedType;\n        }\n\n        for (const describer of this.describers)\n        {\n          describedType = describer.describe(data, provider, described);\n    \n          if (describedType)\n          {\n            return describedType;\n          }\n        }\n\n        return AnyType.baseType;\n      },\n      merge: (type, data) => \n      {\n        return this.merge(type, data);\n      },\n    };\n\n    return provider.describe(completeData);\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    const methods = this.getMethodReferences(name);\n\n    methods.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = methodOptions instanceof Func \n      ? methodOptions \n      : Func.create(this, methodOptions);\n\n    const existing = entity.methods[method.name];\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(method, this);\n      }\n      else\n      {\n        entity.addMethod(method);\n      }\n      \n      this.trigger('updateMethod', this, method, entity);\n    }\n    else\n    {\n      entity.addMethod(method);\n\n      this.trigger('addMethod', this, method, entity);\n    }\n\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    const oldName = method.name;\n\n    entity.renameMethod(oldName, newName);\n\n    const refs = this.getMethodReferences(entity, method);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    method.trigger('renamed', method, oldName);\n    method.changed();\n\n    this.trigger('renameMethod', this, method, entity, oldName);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\n    {\n      return false;\n    }\n\n    entity.removeMethod(method.name);\n\n\n    this.trigger('removeMethod', this, method, entity);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n\n  \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    if (path.length === 0)\n    {\n      return null;\n    }\n\n    let thisType = path[0].getType(this, context);\n\n    if (!thisType)\n    {\n      return null;\n    }\n\n    let optional = thisType.isOptional();\n\n    for (let i = 1; i < stopBefore; i++)\n    {\n      const node = path[i];\n\n      thisType = node.isPathNode()\n        ? node.getType(this, context, thisType)\n        : thisType.getSubType(node, this, context);\n\n      if (!thisType)\n      {\n        return null;\n      }\n\n      optional = optional || thisType.isOptional();\n    }\n\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const exprClass = this.expressions[value[0]];\n\n      if (!exprClass)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return exprClass.decode(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public isExpression(value: any): value is (Expression | [string, ...any[]])\n  {\n    return value instanceof Expression || (isArray(value) && isString(value[0]) && value[0] in this.expressions);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\n    const methodName = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.getReturnType(this);\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.params,\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.getReturnType(this);\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.params,\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.params,\n        source: [func, 'params'],\n      });\n\n      if (dynamic) {\n        instances.push({\n          type: func.getReturnType(this),\n          source: [func, 'returnType'],\n        });\n      }\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.params,\n          source: [entity, method, 'params'],\n        });\n\n        if (dynamic) {\n          instances.push({\n            type: method.getReturnType(this),\n            source: [entity, method, 'returnType'],\n          });\n        }\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        context: func.params,\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.getParamTypes(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public returnProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.returnProperty = this.returnProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : value instanceof Expression\n        ? this.getCommand(value, provider)\n        : () => value;\n  }\n\n}","import { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_PATH = 2;\n\nexport class SubExpression extends Expression \n{\n\n  public static id = 'sub';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \n  {\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    exprs.setLegacy();\n\n    return PathExpression.createForLegacy([value, ...path]);\n  }\n\n  public static encode(expr: SubExpression): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getId(): string\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getScope(): null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public encode(): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public clone(): Expression\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { MethodExpression } from '../exprs/Method';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { PathExpression } from '../exprs/Path';\nimport { ReturnExpression } from '../exprs/Return';\nimport { SetExpression } from '../exprs/Set';\nimport { SubExpression } from '../exprs/Sub';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { UpdateExpression } from '../exprs/Update';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    MethodExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    PathExpression,\n    ReturnExpression,\n    SetExpression,\n    SubExpression,    \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    UpdateExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray, objectMap } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType, ObjectOptions } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName },\n    { initial: (i, provider) => {\n      if (i.name instanceof EntityType) {\n        const type = i.name.getType();\n        if (type instanceof ObjectType) {\n          const objectType = type as ObjectType<ObjectOptions>;\n          \n          return Types.object(objectMap(objectType.options.props, (value) => Types.optional(value.clone())));\n        }\n      }\n      return ObjectType.baseType;\n    }}\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ManyType } from '../../types/Many';\nimport { NullType } from '../../types/Null';\nimport { Type } from '../../Type';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => {\n      let optional = true;\n      const types: Type[] = [];\n      const checkType = (x?: Type) => {\n        if (!optional) return;\n        \n        if (x) {\n          let xoptional = x instanceof OptionalType;\n          const xinner = xoptional ? x.options as Type : x;\n\n          if (xinner instanceof ManyType) {\n            xinner.options.forEach((y) => {\n              const yoptional = y instanceof OptionalType;\n              const yinner = yoptional ? y.options as Type : y;\n\n              xoptional = xoptional || yoptional;\n\n              if (!types.some(t => t.exactType(yinner))) {\n                types.push(yinner);\n              }\n            });\n          }\n\n          optional = optional && xoptional;\n\n          if (!types.some(t => t.exactType(xinner))) {\n            types.push(xinner);\n          }\n        }\n      };\n\n      checkType(i.a);\n      checkType(i.b);\n      checkType(i.c);\n      checkType(i.d);\n      checkType(i.e);\n\n      return types.length > 1\n        ? optional\n          ? Types.optional(new ManyType(types))\n          : new ManyType(types)\n        : types.length === 1\n          ? optional\n            ? Types.optional(types[0])\n            : types[0]\n          : NullType;\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    AnyType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type, TypeMap } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { OptionalType } from '../../types/Optional';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EntityType } from '../../types/Entity';\nimport { Types } from '../../Types';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => {\n      const props: TypeMap = {};\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n\n      for (const param of params) \n      {\n        let paramType = i[param];\n\n        if (paramType instanceof EntityType)\n        {\n          paramType = paramType.getType();\n        }\n\n        if (paramType instanceof ObjectType) \n        {\n          const paramProps = paramType.options.props;\n\n          for (const prop in paramProps) \n          {\n            const paramProp = paramProps[prop];\n\n            if (prop in props && paramProp instanceof OptionalType) \n            {\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\n            } \n            else \n            {\n              props[prop] = paramProp;\n            }\n          }\n        }\n      }\n\n      return new ObjectType({ props });\n    },\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number;\n  formats: FormatterMap<T>;\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  };\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this;\n  public add(key: string, formatter: Formatter<T>): this;\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter;\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n}\n","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}","\nexport * from './fns';\n\nexport * from './Command';\nexport * from './DefinitionProvider';\nexport * from './Definitions';\nexport * from './DataTypes';\nexport * from './Entity';\nexport * from './EventBase';\nexport * from './Expression';\nexport * from './Exprs';\nexport * from './Func';\nexport * from './LinkedNode';\nexport * from './Locale';\nexport * from './Operation';\nexport * from './Computed';\nexport * from './Program';\nexport * from './ReferenceData';\nexport * from './Relation';\nexport * from './Runtime';\nexport * from './Type';\nexport * from './Types';\nexport * from './Traverser';\nexport * from './Validate';\n\nexport * from './maps/FastMap';\nexport * from './maps/NamedMap';\n\nexport * from './types/ID';\nexport * from './types/Entity';\nexport * from './types/Any';\nexport * from './types/Boolean';\nexport * from './types/Color';\nexport * from './types/Date';\nexport * from './types/Enum';\nexport * from './types/List';\nexport * from './types/Many';\nexport * from './types/Map';\nexport * from './types/Not';\nexport * from './types/Null';\nexport * from './types/Number';\nexport * from './types/Object';\nexport * from './types/Optional';\nexport * from './types/Set';\nexport * from './types/Text';\nexport * from './types/Tuple';\n\nexport * from './exprs/And';\nexport * from './exprs/Chain';\nexport * from './exprs/Comment';\nexport * from './exprs/Computed';\nexport * from './exprs/Constant';\nexport * from './exprs/Define';\nexport * from './exprs/Do';\nexport * from './exprs/For';\nexport * from './exprs/Get';\nexport * from './exprs/GetData';\nexport * from './exprs/GetEntity';\nexport * from './exprs/GetRelation';\nexport * from './exprs/If';\nexport * from './exprs/Invoke';\nexport * from './exprs/Method';\nexport * from './exprs/No';\nexport * from './exprs/Not';\nexport * from './exprs/Object';\nexport * from './exprs/Operation';\nexport * from './exprs/Or';\nexport * from './exprs/Path';\nexport * from './exprs/Return';\nexport * from './exprs/Set';\nexport * from './exprs/Sub';\nexport * from './exprs/Switch';\nexport * from './exprs/Template';\nexport * from './exprs/Tuple';\nexport * from './exprs/Update';\nexport * from './exprs/While';\n\nexport * from './def';\n\nexport * from './ops/EntityOps';\nexport * from './ops/AnyOps';\nexport * from './ops/BooleanOps';\nexport * from './ops/ColorOps';\nexport * from './ops/DateOps';\nexport * from './ops/ListOps';\nexport * from './ops/MapOps';\nexport * from './ops/NumberOps';\nexport * from './ops/ObjectOps';\nexport * from './ops/SetOps';\nexport * from './ops/TextOps';\nexport * from './ops/TupleOps';\n\nexport * from './ops/types/EntityOpsTypes';\nexport * from './ops/types/AnyOpsTypes';\nexport * from './ops/types/BooleanOpsTypes';\nexport * from './ops/types/ColorOpsTypes';\nexport * from './ops/types/DateOpsTypes';\nexport * from './ops/types/ListOpsTypes';\nexport * from './ops/types/MapOpsTypes';\nexport * from './ops/types/NumberOpsTypes';\nexport * from './ops/types/ObjectOpsTypes';\nexport * from './ops/types/SetOpsTypes';\nexport * from './ops/types/TextOpsTypes';\nexport * from './ops/types/TupleOpsTypes';\n\nexport * from './locales';\n\nexport * from './util/color/Color';\nexport * from './util/color/ColorSpace';\nexport * from './util/color/ColorSpaceHSL';\nexport * from './util/color/ColorSpaceRGB';\nexport * from './util/date/DateConstants';\nexport * from './util/date/DateFormat';\nexport * from './util/date/DateFunctions';\nexport * from './util/Format';"],"sourceRoot":""}