{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","isCompatible","other","exact","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","def","context","validate","validateType","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","THIS","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","expressions","AndExpression","e","expectedType","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","PathExpression","createForLegacy","getPathType","thisType","INVALID_EXPRESSION","EMPTY_PATH","isWritable","setLegacy","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","has","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","part","GetExpression","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","arg","param","paramName","MISSING_FUNCTION","named","nameOrArgs","argName","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","READONLY","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","some","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","paramType","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getEscaped","escaped","startEscape","endEscape","possibleEscapeIndex","endOffset","content","getFormatter","cache","handled","finalFormatter","formatted","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is any \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): boolean \n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function now(): number\n{\n  return new Date().getTime();\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\n  map: Record<K, V>, \n  getValue: (value: V, key: K) => R, \n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey(key, value)] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<V, M = V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n  OUTSIDE_PATH = 14,          // HIGH\n  READONLY = 15,              // HIGH\n  EMPTY_PATH = 16,            // HIGH\n  INVALID_THIS = 17,          // HIGH\n  MISSING_METHOD = 18,        // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeMap = Record<string, Type>;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  getData(name: string): ReferenceData | null;\n  setLegacy(): void;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<O> = any, O = any> \n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider): Type | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public abstract getExactType(value: any): Type<O>;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): boolean;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<O>;\n\n  public abstract clone(): Type<O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): any;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\n\n  public abstract fromJson(json: any): any;\n\n  public abstract toJson(value: any): any;\n  \n}","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n  setLegacy(): void;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public static THIS = 'this';\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\n  \n  public isPathStart(): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return false;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return true;\n  }\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = []\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed \n{\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n  writeable?: {\n    op: string;\n    value: string;\n    newValue: string;\n    params: Record<string, any>;\n  };\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp = this.map[id];\n\n    comp.writeable = { \n      op: op.id,\n      value,\n      newValue,\n      params: params || {},\n    };\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport interface DataTypeAccessor<T = any>\n{\n  priority: number;\n  isValid(value: any, step: any): boolean;\n  set(value: T, step: any, stepValue: any): void;\n  get(value: T, step: any): any;\n}\n\nexport class DataTypeRegistry\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n  private accessorList: DataTypeAccessor[];\n\n  public objectSet: <O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]) => void \n    = (obj, prop, value) => obj[prop] = value;\n  public objectRemove: <O extends object, K extends keyof O>(obj: O, prop: K) => void\n    = (obj, prop) => delete obj[prop];\n  public arrayAdd: <T>(arr: T[], item: T) => void\n    = (arr, item) => arr.push(item);\n  public arrayRemove: <T>(arr: T[], index: number) => T\n    = (arr, index) => arr.splice(index, 1)[0];\n  public arraySet: <T>(arr: T[], index: number, item: T) => T\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n    this.accessorList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  public get(value: any, step: any): any\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.get(value, step);\n      }\n    }\n  }\n\n  public set(value: any, step: any, stepValue: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.set(value, step, stepValue);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\n  {\n    return this.addToPriorityList(this.accessorList, accessor);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public define: [string, Expression][];\n  public body: Expression;\n\n  public constructor(define: [string, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\n\n    return this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public with(name: string, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\n  {\n    const append = isString(nameOrDefines)\n      ? { [nameOrDefines]: value }\n      : nameOrDefines;\n\n    for (const name in append)\n    {\n      const expr = Exprs.parse(append[name]);\n      const existing = this.define.find(([varName]) => varName === name);\n\n      if (existing) {\n        existing[1] = expr;\n      } else {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { isNumber } from '../fns';\n\n\nconst INDEX_PATH = 1;\n\nexport class PathExpression extends Expression \n{\n\n  public static id = 'path';\n\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \n  {\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\n    \n    return new PathExpression(expressions);\n  }\n\n  public static encode(expr: PathExpression): any \n  {\n    return [this.id, expr.expressions.map((e) => e.encode())];\n  }\n\n  public static createForLegacy(path: Expression[])\n  {\n    for (let i = path.length - 1; i >= 0; i--)\n    {\n      const node = path[i];\n\n      if (node instanceof PathExpression)\n      {\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\n        {\n          path.splice(i, 1, ...node.expressions);\n        }\n      }\n    }\n\n    return new PathExpression(path);\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return PathExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return PathExpression.encode(this);\n  }\n\n  public clone(): PathExpression\n  {\n    return new PathExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.expressions, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    \n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const path = this.expressions;\n\n    if (path.length === 0)\n    {\n      handler({\n        type: ValidationType.EMPTY_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    let thisType = path[0].getType(def, context);\n\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: path[0],\n        parent: this,\n      });\n    }\n    else\n    {\n      path[0].validate(def, context, handler);\n\n      for (let i = 1; i < path.length; i++)\n      {\n        const node = path[i];\n\n        node.validate(def, context, handler, thisType);\n\n        thisType = node.isPathNode()\n          ? node.getType(def, context, thisType)\n          : thisType.getSubType(node, def, context);\n\n        if (!thisType)\n        {\n          handler({\n            type: ValidationType.INVALID_EXPRESSION,\n            severity: ValidationSeverity.HIGH,\n            context,\n            subject: node,\n            parent: this,\n          });\n          \n          break;\n        }\n      }\n    }\n  }\n\n  public isWritable(defs: DefinitionProvider)\n  {\n    return this.expressions.length > 0\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\n      : false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n\n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider) \n  {\n    const name = data[INDEX_NAME];\n\n    if (data[INDEX_EXPRESSION]) \n    {\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\n    }\n    \n    return new ComputedExpression(name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string) \n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return op ? op.complexity : 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.OUTSIDE_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      if (!def.hasComputed(thisType, this.name))\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject: this,\n        });\n      }\n    }\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    const comp = defs.getComputed(this.name);\n\n    return !comp || !!comp.writeable;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions \n{\n  key: Type;\n  value: Type;\n  constants: Map<any, any>;\n}\n\nexport class EnumType extends Type<EnumOptions> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next();\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BREAK = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, breakVariable, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (breakVariable)\n    {\n      this.breakVariable = breakVariable;\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    if (data[INDEX_PATH])\n    {\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\n    }\n    \n    return new GetExpression();\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    return this.id;\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression();\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }  \n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], [], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport interface ObjectOptions \n{\n  props: TypeMap;\n}\n\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    return new ObjectType({\n      props: objectMap(data, d => describer.describe(d))\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n\n    DataTypes.addAccessor<object>({\n      priority,\n      isValid: (value) => isObject(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue as never),\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<O>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        p1[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\n      {\n        key: new EnumType({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map(\n            objectValues(this.options.props, (prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => delete this.options.props[prop])\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        return false;\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<O>\n  {\n    return new ObjectType<O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    return Object.create(null);\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): any\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: any): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def, context),\n        result.getComplexity(def, context)\n      ), \n      this.otherwise.getComplexity(def, context)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return 0;\n    }\n\n    return func.expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const func = def.getFunction(this.name);\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    return func\n      ? func.getReturnType(def, argTypes)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const func = def.getFunction(this.name);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const params: TypeMap = {};\n\n      objectEach(func.params.options.props, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n\n        if (arg)\n        {\n          params[paramName] = arg.getType(def, context);\n        }\n      });\n\n      // func.options.expression.validate(def, Types.object(params), handler);\n    }\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_ENTITY = 1;\nconst INDEX_NAME = 2;\nconst INDEX_ARGS = 3;\n\nexport class MethodExpression extends Expression \n{\n\n  public static id = 'method';\n\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \n  {\n    const entity = data[INDEX_ENTITY];\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new MethodExpression(entity, name, args);\n  }\n\n  public static encode(expr: MethodExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.entity, expr.name, args];\n  }\n\n  public entity: string;\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(entity: string, name: string, args: ExpressionMap) \n  {\n    super();\n    this.entity = entity;\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return MethodExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity || !entity.methods[this.name])\n    {\n      return 0;\n    }\n\n    return entity.methods[this.name].expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return MethodExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      return null;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return null;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return null;\n    }\n    \n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    argTypes[Expression.THIS] = entity.type;\n    \n    return method.getReturnType(def, argTypes);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      handler({\n        type: ValidationType.INVALID_THIS,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      handler({\n        type: ValidationType.MISSING_METHOD,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const params: TypeMap = {};\n\n    params[Expression.THIS] = entity.type;\n\n    objectEach(method.params.options.props, (param, paramName) =>\n    {\n      const arg = this.args[paramName];\n\n      this.validateType(def, context, param, arg, handler);\n\n      if (arg)\n      {\n        params[paramName] = arg.getType(def, context);\n      }\n    });\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public named(name: string): MethodExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): MethodExpression\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_VALUE = 1;\n\nexport class ReturnExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'return';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new ReturnExpression(value);\n  }\n\n  public static encode(expr: ReturnExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, returnValue]\n      : [this.id];\n  }\n\n  public value: Expression;\n\n  public constructor(value: Expression) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ReturnExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.value.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ReturnExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ReturnExpression(this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ReturnExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path = PathExpression.decode(['path', data[INDEX_PATH]], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n\n    return new SetExpression(path, value);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    return [this.id, expr.path.encode(), expr.value.encode()];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue)\n  {\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n\n  public constructor(path: PathExpression, value: Expression) \n  {\n    super();\n\n    this.path = path;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.clone(), this.value.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      this.validateType(def, context, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public to(value: ExpressionValue): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def, context), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def, context)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def, context), \n        this.defaultCase.getComplexity(def, context)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst DEFAULT_CURRENT = 'current';\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\n\nexport class UpdateExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'up';\n\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \n  {\n    const path = PathExpression.decode(['path', data[INDEX_PATH]], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT;\n\n    return new UpdateExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: UpdateExpression): any \n  {\n    const path = expr.path.encode();\n    const value = expr.value.encode();\n\n    return expr.currentVariable === DEFAULT_CURRENT\n      ? [this.id, path, value]\n      : [this.id, path, value, expr.currentVariable]\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\n  {\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return UpdateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    return {\n      [this.currentVariable]: AnyType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return UpdateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === UpdateExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === UpdateExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      const valueContext = def.getContext(context, {\n        [this.currentVariable]: expectedType,\n      });\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable || this.currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): UpdateExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n    \n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions \n{\n  item: Type;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType extends Type<ListOptions> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    return new ListType({ \n      item,\n      min: data.length,\n      max: data.length\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<any[]>({\n      priority,\n      isValid: (value) => isArray(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport class TupleType extends Type<Type[]>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: TupleType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType\n  {\n    return new TupleType([]);\n  }\n\n  public clone(): TupleType\n  {\n    return new TupleType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return this.options.map(e => e.create());\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return this.options.map((e, i) => e.fromJson(json[i]));\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => delete this.props[prop])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { PathExpression } from './exprs/Path';\nimport { ReturnExpression } from './exprs/Return';\nimport { SetExpression } from './exprs/Set';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { UpdateExpression } from './exprs/Update';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type } from './Type';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\n  }\n\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\n  {\n    return path.length === 0\n      ? new GetExpression()\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\n  }\n\n  public static computed(name: string): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static path(...exprs: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\n      ? exprs[0]\n      : new PathExpression(this.parse(exprs)));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\n  {\n    return this.setParent(new ReturnExpression(this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static update(...path: ExpressionValue[]): UpdateExpression\n  {\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0)\n  y.setFullYear(y.getFullYear(), month, 1)\n  y.setHours(0, 0, 0, 0)\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\n\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\n\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\n\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\n\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\n\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\n\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\n\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\n\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\n\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\n\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\n\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\n\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\n\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\n\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\n\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\n\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\n\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\n\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\n\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\n\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\n\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\n\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\n\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\n\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\n\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\n\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\n\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\n\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\n\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\n\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): any\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions \n{\n  key: Type;\n  value: Type;\n}\n\nexport class MapType extends Type<MapOptions> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    return new MapType({ key, value });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<Map<any, any>>({\n      priority,\n      isValid: (value) => isMap(value),\n      get: (value, step) => value.get(step),\n      set: (value, step, stepValue) => value.set(step, stepValue),\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop of map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport class OptionalType extends Type<Type>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): any\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions\n{\n  hasAlpha?: boolean;\n}\n\n\nexport class ColorType extends ObjectType<ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any): Type | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      created, \n      updated,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      delete this.transcoders[prop];\n\n      this.transcoders[newProp] = transcoder;\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        instance[prop] = this.instances.reduce((a, b) => Math.max(a, b[prop]), 0) + 1;\n        break;\n      case EntityPrimaryType.UUID:\n        instance[prop] = Entity.uuid();\n        break;\n    }\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    this.indexes[name] = index;\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    delete this.indexes[name];\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      delete this.indexes[name];\n\n      this.indexes[newName] = index;\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    this.transcoders[prop] = transcoder;\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      delete this.transcoders[name];\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    this.methods[method.name] = method;\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      delete this.methods[name];\n\n      this.methods[newName] = method;\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      delete this.methods[name];\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions \n{\n  value: Type;\n}\n\nexport class SetType extends Type<SetOptions> \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    return new SetType({ value });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<any>): Set<any>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<any>): Array<any>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.entries()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\n  {\n    return this.setParent(new EnumType({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list(item: TypeInput, min?: number, max?: number)\n  {\n    return this.setParent(new ListType({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map(value: TypeInput, key: TypeInput = TextType)\n  {\n    return this.setParent(new MapType({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object(props: TypeInputMap = {})\n  {\n    return this.setParent(new ObjectType({ \n      props: this.resolve(props),\n    }));\n  }\n\n  public static optional(type: TypeInput): Type\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set(value: TypeInput)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple(types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\n  {\n    return this.setParent(new TupleType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static parse(input: TypeInput): Type\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  private listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { ObjectType, ObjectOptions } from './types/Object';\nimport { TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  params: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      params: Types.object(),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public params: ObjectType<ObjectOptions>;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\n    this.expression = defs.getExpression(options.expression);\n    this.defaults = this.params.fromJson(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.params = options instanceof Func\n        ? options.params\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\n      this.expression = options instanceof Func\n        ? options.expression\n        : defs.getExpression(options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.params.fromJson(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      description, \n      meta,\n      params: params.encode(),\n      expression: expression.encode(),\n      defaults: params.toJson(defaults),\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const paramType = this.params.options.props[name];\n\n    if (paramType)\n    {\n      this.params.options.props[newName] = paramType;\n      delete this.params.options.props[name];\n\n      if (name in this.defaults)\n      {\n        this.defaults[newName] = this.defaults[name];\n        delete this.defaults[name];\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const exists = name in this.params.options.props[name];\n\n    if (exists)\n    {\n      delete this.params.options.props[name];\n      delete this.defaults[name];\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \n  {\n    const context = Types.object({\n      ...this.params.options.props,\n      ...paramsTypes,\n    });\n\n    return this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): ObjectType\n  {\n    return isEmpty(this.defaults)\n      ? this.params\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\n  }\n\n  public getParamType(param: string)\n  {\n    const propType = this.params.options.props[param];\n\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\n      ? propType.getRequired()\n      : propType;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.params.options.props[prop];\n\n      if (!propType.getRequired().isValid(target[prop]))\n      {\n        target[prop] = DataTypes.copy(this.defaults[prop]);\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap, now } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n\n  /**\n   * When the relation was created.\n   */\n  public created: number;\n\n  /**\n   * When the relation was last updated.\n   */\n  public updated: number;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.updated = options.updated || now();\n    this.created = options.created || now();\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.updated = options.updated || now();\n      this.created = options.created || now();\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, created, updated,\n      kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      updated,\n      created,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber, now } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now(),\n        updated: now(),\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: ProgramDataSet, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { now } from './fns';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, created, updated, meta, dataType, data } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func, 'params' | 'returnType'] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func, 'params' | 'returnType'] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  private legacy: boolean = false;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  public isLegacy(): boolean\n  {\n    return this.legacy;\n  }\n\n  public setLegacy(): void\n  {\n    this.legacy = true;\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(data: any): Type\n  {\n    for (const describer of this.describers)\n    {\n      const type = describer.describe(data, this);\n\n      if (type)\n      {\n        return type;\n      }\n    }\n\n    return AnyType.baseType;\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.args[newName] = ref.value.args[oldName];\n      delete ref.value.args[oldName];\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      delete ref.value.args[name];\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    let thisType = path[0].getType(this, context);\n\n    if (!thisType)\n    {\n      return null;\n    }\n\n    let optional = thisType.isOptional();\n\n    for (let i = 1; i < stopBefore; i++)\n    {\n      const node = path[i];\n\n      thisType = node.isPathNode()\n        ? node.getType(this, context, thisType)\n        : thisType.getSubType(node, this, context);\n\n      if (!thisType)\n      {\n        return null;\n      }\n\n      optional = optional || thisType.isOptional();\n    }\n\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const exprClass = this.expressions[value[0]];\n\n      if (!exprClass)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return exprClass.decode(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.getReturnType(this);\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.params,\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.getReturnType(this);\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.params,\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.params,\n        source: [func, 'params'],\n      });\n\n      if (dynamic) {\n        instances.push({\n          type: func.getReturnType(this),\n          source: [func, 'returnType'],\n        });\n      }\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.params,\n          source: [entity, method, 'params'],\n        });\n\n        if (dynamic) {\n          instances.push({\n            type: method.getReturnType(this),\n            source: [entity, method, 'returnType'],\n          });\n        }\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        context: func.params,\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.getParamTypes(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public returnProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.returnProperty = this.returnProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : () => value;\n  }\n\n}","import { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_PATH = 2;\n\nexport class SubExpression extends Expression \n{\n\n  public static id = 'sub';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \n  {\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    exprs.setLegacy();\n\n    return PathExpression.createForLegacy([value, ...path]);\n  }\n\n  public static encode(expr: SubExpression): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getId(): string\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getScope(): null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public encode(): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public clone(): Expression\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { MethodExpression } from '../exprs/Method';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { PathExpression } from '../exprs/Path';\nimport { ReturnExpression } from '../exprs/Return';\nimport { SetExpression } from '../exprs/Set';\nimport { SubExpression } from '../exprs/Sub';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { UpdateExpression } from '../exprs/Update';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    MethodExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    PathExpression,\n    ReturnExpression,\n    SetExpression,\n    SubExpression,    \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    UpdateExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName }\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ManyType } from '../../types/Many';\nimport { NullType } from '../../types/Null';\nimport { Type } from '../../Type';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => {\n      let optional = true;\n      const types: Type[] = [];\n      const checkType = (x?: Type) => {\n        if (!optional) return;\n        \n        if (x) {\n          let xoptional = x instanceof OptionalType;\n          const xinner = xoptional ? x.options as Type : x;\n\n          if (xinner instanceof ManyType) {\n            xinner.options.forEach((y) => {\n              const yoptional = y instanceof OptionalType;\n              const yinner = yoptional ? y.options as Type : y;\n\n              xoptional = xoptional || yoptional;\n\n              if (!types.some(t => t.exactType(yinner))) {\n                types.push(yinner);\n              }\n            });\n          }\n\n          optional = optional && xoptional;\n\n          if (!types.some(t => t.exactType(xinner))) {\n            types.push(xinner);\n          }\n        }\n      };\n\n      checkType(i.a);\n      checkType(i.b);\n      checkType(i.c);\n      checkType(i.d);\n      checkType(i.e);\n\n      return types.length > 1\n        ? optional\n          ? Types.optional(new ManyType(types))\n          : new ManyType(types)\n        : types.length === 1\n          ? optional\n            ? Types.optional(types[0])\n            : types[0]\n          : NullType;\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    AnyType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type, TypeMap } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { OptionalType } from '../../types/Optional';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EntityType } from '../../types/Entity';\nimport { Types } from '../../Types';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => {\n      const props: TypeMap = {};\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n\n      for (const param of params) \n      {\n        let paramType = i[param];\n\n        if (paramType instanceof EntityType)\n        {\n          paramType = paramType.getType();\n        }\n\n        if (paramType instanceof ObjectType) \n        {\n          const paramProps = paramType.options.props;\n\n          for (const prop in paramProps) \n          {\n            const paramProp = paramProps[prop];\n\n            if (prop in props && paramProp instanceof OptionalType) \n            {\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\n            } \n            else \n            {\n              props[prop] = paramProp;\n            }\n          }\n        }\n      }\n\n      return new ObjectType({ props });\n    },\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number,\n  formats: FormatterMap<T>\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  }\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this\n  public add(key: string, formatter: Formatter<T>): this\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n}","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}","\nexport * from './fns';\n\nexport * from './Command';\nexport * from './DefinitionProvider';\nexport * from './Definitions';\nexport * from './DataTypes';\nexport * from './Entity';\nexport * from './EventBase';\nexport * from './Expression';\nexport * from './Exprs';\nexport * from './Func';\nexport * from './LinkedNode';\nexport * from './Locale';\nexport * from './Operation';\nexport * from './Computed';\nexport * from './Program';\nexport * from './ReferenceData';\nexport * from './Relation';\nexport * from './Runtime';\nexport * from './Type';\nexport * from './Types';\nexport * from './Traverser';\nexport * from './Validate';\n\nexport * from './maps/FastMap';\nexport * from './maps/NamedMap';\n\nexport * from './types/ID';\nexport * from './types/Entity';\nexport * from './types/Any';\nexport * from './types/Boolean';\nexport * from './types/Color';\nexport * from './types/Date';\nexport * from './types/Enum';\nexport * from './types/List';\nexport * from './types/Many';\nexport * from './types/Map';\nexport * from './types/Not';\nexport * from './types/Null';\nexport * from './types/Number';\nexport * from './types/Object';\nexport * from './types/Optional';\nexport * from './types/Set';\nexport * from './types/Text';\nexport * from './types/Tuple';\n\nexport * from './exprs/And';\nexport * from './exprs/Chain';\nexport * from './exprs/Comment';\nexport * from './exprs/Computed';\nexport * from './exprs/Constant';\nexport * from './exprs/Define';\nexport * from './exprs/Do';\nexport * from './exprs/For';\nexport * from './exprs/Get';\nexport * from './exprs/GetData';\nexport * from './exprs/GetEntity';\nexport * from './exprs/GetRelation';\nexport * from './exprs/If';\nexport * from './exprs/Invoke';\nexport * from './exprs/Method';\nexport * from './exprs/No';\nexport * from './exprs/Not';\nexport * from './exprs/Object';\nexport * from './exprs/Operation';\nexport * from './exprs/Or';\nexport * from './exprs/Path';\nexport * from './exprs/Return';\nexport * from './exprs/Set';\nexport * from './exprs/Sub';\nexport * from './exprs/Switch';\nexport * from './exprs/Template';\nexport * from './exprs/Tuple';\nexport * from './exprs/Update';\nexport * from './exprs/While';\n\nexport * from './def';\n\nexport * from './ops/EntityOps';\nexport * from './ops/AnyOps';\nexport * from './ops/BooleanOps';\nexport * from './ops/ColorOps';\nexport * from './ops/DateOps';\nexport * from './ops/ListOps';\nexport * from './ops/MapOps';\nexport * from './ops/NumberOps';\nexport * from './ops/ObjectOps';\nexport * from './ops/SetOps';\nexport * from './ops/TextOps';\nexport * from './ops/TupleOps';\n\nexport * from './ops/types/EntityOpsTypes';\nexport * from './ops/types/AnyOpsTypes';\nexport * from './ops/types/BooleanOpsTypes';\nexport * from './ops/types/ColorOpsTypes';\nexport * from './ops/types/DateOpsTypes';\nexport * from './ops/types/ListOpsTypes';\nexport * from './ops/types/MapOpsTypes';\nexport * from './ops/types/NumberOpsTypes';\nexport * from './ops/types/ObjectOpsTypes';\nexport * from './ops/types/SetOpsTypes';\nexport * from './ops/types/TextOpsTypes';\nexport * from './ops/types/TupleOpsTypes';\n\nexport * from './locales';\n\nexport * from './util/color/Color';\nexport * from './util/color/ColorSpace';\nexport * from './util/color/ColorSpaceHSL';\nexport * from './util/color/ColorSpaceRGB';\nexport * from './util/date/DateConstants';\nexport * from './util/date/DateFormat';\nexport * from './util/date/DateFunctions';\nexport * from './util/Format';"],"sourceRoot":""}