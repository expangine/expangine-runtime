{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","isCompatible","other","exact","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","cache","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","arg","expressions","AndExpression","e","expectedType","directly","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","has","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","PathExpression","fromPartial","pathData","isPath","getPathType","thisType","INVALID_EXPRESSION","EMPTY_PATH","isWritable","isMutating","e0","e1","e2","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","param","paramName","MISSING_FUNCTION","argName","argType","named","nameOrArgs","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","paramType","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","READONLY","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","some","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","takeKey","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","moveDataset","inside","movable","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","objectType","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getFormatter","escaped","getEscaped","content","handled","finalFormatter","formatted","startEscape","endEscape","possibleEscapeIndex","endOffset","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\nexport type RecordKey = string | number | symbol;\r\n\r\nexport type MapInput<K = any, V = any> = \r\n  Map<K, V> | \r\n  Array<[K, V]> | \r\n  (K extends string | number | symbol ? Record<K, V> : never);\r\n\r\nexport function isNumber(value: any): value is number \r\n{\r\n  return typeof value === 'number' && isFinite(value);\r\n}\r\n\r\nexport function isString(value: any): value is string \r\n{\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function isArray<T = any>(value: any): value is T[] \r\n{\r\n  return Array.isArray(value);\r\n}\r\n\r\nexport function isDate(value: any): value is Date\r\n{\r\n  return value instanceof Date;\r\n}\r\n\r\nexport function isMap<K, V>(value: any): value is Map<K, V>\r\n{\r\n  return value instanceof Map;\r\n}\r\n\r\nexport function isSet<V>(value: any): value is Set<V>\r\n{\r\n  return value instanceof Set;\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean \r\n{\r\n  return typeof value === 'boolean';\r\n}\r\n\r\nexport function isFunction(value: any): value is ((...args: any[]) => any) \r\n{\r\n  return typeof value === 'function';\r\n}\r\n\r\nexport function isObject(value: any): value is any \r\n{\r\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\r\n}\r\n\r\nexport function isUndefined(value: any): value is undefined \r\n{\r\n  return typeof value === 'undefined';\r\n}\r\n\r\nexport function isSameClass(a: any, b: any): boolean\r\n{\r\n  return a.constructor === b.constructor;\r\n}\r\n\r\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\r\n{\r\n  return Math.abs(x - Math.round(x)) <= epsilon;\r\n}\r\n\r\nexport function isEmpty(value: any): boolean \r\n{\r\n  if (isArray(value)) \r\n  {\r\n    return value.length === 0;\r\n  }\r\n  else if (isObject(value)) \r\n  {\r\n    for (const _prop in value) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return value === null || value === undefined;\r\n}\r\n\r\nexport function now(): number\r\n{\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function clamp(x: number, min: number, max: number): number\r\n{\r\n  return x < min ? min : x > max ? max : x;\r\n}\r\n\r\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\r\n{\r\n  if (isArray(input))\r\n  {\r\n    return new Map(input);\r\n  }\r\n  else if (isMap(input))\r\n  {\r\n    return input;\r\n  }\r\n  else if (isObject(input))\r\n  {\r\n    return new Map(objectToArray(input, (v, k) => [k, v]));\r\n  }\r\n  \r\n  return new Map();\r\n}\r\n\r\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\r\n{\r\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\r\n}\r\n\r\nexport function arraySync<V, W = V>(\r\n  target: V[],\r\n  source: W[],\r\n  matches: (target: V, source: W) => boolean,\r\n  add: (target: V[], value: W) => void,\r\n  remove: (target: V[], index: number, value: V) => void,\r\n  update: (target: V[], index: number, value: V, newValue: W) => void,\r\n): V[]\r\n{\r\n  const taken = source.map(() => false);\r\n\r\n  for (let i = target.length - 1; i >= 0; i--)\r\n  {\r\n    const targetValue = target[i];\r\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\r\n\r\n    if (matchIndex !== -1)\r\n    {\r\n      update(target, i, targetValue, source[matchIndex]);\r\n\r\n      taken[matchIndex] = true;\r\n    }\r\n    else\r\n    {\r\n      remove(target, i, targetValue);\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < source.length; i++)\r\n  {\r\n    if (!taken[i])\r\n    {\r\n      add(target, source[i]);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectSync<V, K extends RecordKey = string>(\r\n  target: Record<K, V>,\r\n  source: Record<K, V>,\r\n  add: (target: Record<K, V>, key: K, value: V) => void,\r\n  remove: (target: Record<K, V>, key: K, value: V) => void,\r\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\r\n): Record<K, V> \r\n{\r\n for (const key in target)\r\n {\r\n   if (!(key in source))\r\n   {\r\n     remove(target, key, target[key]);\r\n   }\r\n }\r\n\r\n for (const key in source)\r\n {\r\n   if (key in target)\r\n   {\r\n     update(target, key, target[key], source[key]);\r\n   }\r\n   else\r\n   {\r\n     add(target, key, source[key]);\r\n   }\r\n }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\r\n  map: Record<K, V>, \r\n  getValue: (value: V, key: K) => R, \r\n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out[getKey(key, value)] = getValue(value, key), out)\r\n  , Object.create(null));\r\n}\r\n\r\nexport function objectEach<V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\r\n{\r\n  return objectReduce(map, (value, key) => \r\n    onEach(value, key, map)\r\n  , undefined);\r\n}\r\n\r\nexport function objectValues<V, M = V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out.push(transform(value, key)), out)\r\n  , []);\r\n}\r\n\r\nexport function objectReduce<R, V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  reduce: (value: V, key: K, reduced: R) => R, \r\n  initial: R): R\r\n{\r\n  for (const key in map)\r\n  {\r\n    initial = reduce(map[key], key, initial);\r\n  }\r\n\r\n  return initial;\r\n}\r\n\r\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\r\n{\r\n  const out = Object.create(null) as Record<P, V>;\r\n\r\n  for (let i = 0; i < props.length; i++)\r\n  {\r\n    const prop = props[i];\r\n\r\n    out[prop] = getValue(prop, i);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\r\n{\r\n  const arr: T[] = [];\r\n\r\n  for (const key in map)\r\n  {\r\n    arr.push(getItem(map[key], key));\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\n\r\nexport function coalesce<T>(x?: T, y?: T): T\r\n{\r\n  return x === undefined ? y : x;\r\n}\r\n\r\nexport function padNumber(x: number, length: number, first: number = length)\r\n{\r\n  return pad(x + '', length, '0', true).substring( 0, first );\r\n}\r\n\r\nexport function pad(x: string, length: number, padding: string, before: boolean): string\r\n{\r\n  while (x.length < length)\r\n  {\r\n    before ? x = padding + x : x = x + padding;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\nexport function toString(x: any)\r\n{\r\n  return isArray(x) || isObject(x)\r\n    ? JSON.stringify(x)\r\n    : x + '';\r\n}","import { isFunction } from './fns';\r\n\r\n\r\nexport type TraverseStep = string | number;\r\n\r\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\r\n\r\nexport type TraverseRemove = () => void;\r\n\r\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\r\n\r\nexport type TraverseReplace<T> = (replaceWith: T) => void;\r\n\r\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\r\n\r\nexport interface Traversable<T>\r\n{\r\n  traverse<R>(traverse: Traverser<T, R>): R;\r\n}\r\n\r\nexport interface TraverseResult<T>\r\n{\r\n  value: T;\r\n  stack: T[];\r\n  path: TraverseStep[];\r\n}\r\n\r\nexport class Traverser<T, R = any>\r\n{\r\n\r\n  public static isTraversable<T>(x: any): x is Traversable<T>\r\n  {\r\n    return x && isFunction(x.traverse);\r\n  }\r\n\r\n  public callback: TraverseCallback<T, R>;\r\n  public stack: T[];\r\n  public path: TraverseStep[];\r\n  public result: R;\r\n  public stopped: boolean;\r\n  public remove: TraverseRemove = TraverseRemoveNoop;\r\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\r\n\r\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\r\n  {\r\n    this.callback = callback;\r\n    this.stack = [];\r\n    this.path = [];\r\n    this.stopped = false;\r\n    this.result = initialResult;\r\n  }\r\n\r\n  public enter(value: T, getInner?: () => any): R\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this.result;\r\n    }\r\n    \r\n    this.callback(value, this.stack, this.path, this);\r\n\r\n    this.remove = TraverseRemoveNoop;\r\n    this.replace = TraverseReplaceNoop;\r\n\r\n    if (getInner && !this.stopped)\r\n    {\r\n      this.stack.push(value);\r\n\r\n      getInner();\r\n\r\n      this.stack.pop();\r\n    }\r\n\r\n    return this.result;\r\n  }\r\n\r\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this;\r\n    }\r\n\r\n    this.path.push(step);\r\n\r\n    this.remove = remove;\r\n    this.replace = replace;\r\n\r\n    if (Traverser.isTraversable<T>(getStep))\r\n    {\r\n      getStep.traverse(this);\r\n    }\r\n    else\r\n    {\r\n      getStep();\r\n    }\r\n\r\n    this.path.pop();\r\n\r\n    return this;\r\n  }\r\n\r\n  public modify(getResult: (result: R) => R | undefined): this\r\n  {\r\n    const newResult = getResult(this.result);\r\n\r\n    if (newResult !== undefined)\r\n    {\r\n      this.result = newResult;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public stop(result?: R): this\r\n  {\r\n    this.result = result;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getResult(): R\r\n  {\r\n    return this.result;\r\n  }\r\n\r\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\r\n  {\r\n    const remove = this.canRemove();\r\n    const replace = this.canReplace();\r\n\r\n    if (!remove && !replace) {\r\n      return false;\r\n    }\r\n\r\n    remove\r\n      ? this.remove()\r\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\r\n\r\n    return true;\r\n  }\r\n\r\n  public canRemove(): boolean\r\n  {\r\n    return this.remove !== TraverseRemoveNoop;\r\n  }\r\n\r\n  public canReplace(): boolean\r\n  {\r\n    return this.replace !== TraverseReplaceNoop;\r\n  }\r\n\r\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\r\n  {\r\n    return this.filter((value: T) => value.constructor === construct, initialResult);\r\n  }\r\n\r\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\r\n  {\r\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\r\n      if (pass(value, stack, path)) {\r\n        this.callback(value, stack, path, traverser);\r\n      }\r\n    };\r\n\r\n    return new Traverser<T, R>(callback, initialResult);\r\n  }\r\n\r\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\r\n  {\r\n    const list: TraverseResult<T>[] = [];\r\n\r\n    return new Traverser((value, stack, path) => {\r\n      list.push({\r\n        value,\r\n        stack: stack.slice(),\r\n        path: path.slice(),\r\n      });\r\n    }, list);\r\n  }\r\n\r\n  public static count<T>(): Traverser<T, number>\r\n  {\r\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\r\n  }\r\n\r\n}","import { Expression } from './Expression';\r\nimport { Type } from './Type';\r\n\r\n\r\n\r\nexport enum ValidationSeverity \r\n{\r\n  LOW = 1,\r\n  MEDIUM = 2,\r\n  HIGH = 3,\r\n}\r\n\r\nexport enum ValidationType \r\n{\r\n  UNSAFE_OPERATION = 1,       // LOW\r\n  POSSIBLY_NULL = 2,          // MEDIUM\r\n  INCOMPATIBLE_TYPES = 3,     // HIGH\r\n  INVALID_EXPRESSION = 4,     // HIGH\r\n  MISSING_FUNCTION = 5,       // HiGH\r\n  MISSING_EXPRESSION = 6,     // HiGH\r\n  MISSING_OPERATION = 7,      // HiGH\r\n  MISSING_TYPE_NAME = 8,      // HIGH\r\n  MISSING_TYPE = 9,           // HIGH\r\n  MISSING_RELATION_NAME = 10, // HIGH\r\n  MISSING_RELATION = 11,      // HIGH\r\n  MISSING_DATA_NAME = 12,     // HIGH\r\n  MISSING_DATA = 13,          // HIGH\r\n  OUTSIDE_PATH = 14,          // HIGH\r\n  READONLY = 15,              // HIGH\r\n  EMPTY_PATH = 16,            // HIGH\r\n  INVALID_THIS = 17,          // HIGH\r\n  MISSING_METHOD = 18,        // HIGH\r\n}\r\n\r\nexport interface Validation \r\n{\r\n  type: ValidationType;\r\n  severity: ValidationSeverity;\r\n  context: Type;\r\n  subject?: Expression;\r\n  parent?: Expression;\r\n  expected?: Type;\r\n  actual?: Type;\r\n}\r\n\r\nexport type ValidationHandler = (validation: Validation) => void;\r\n","\r\nimport { isSameClass } from './fns';\r\nimport { Operations, OperationGeneric } from './Operation';\r\nimport { Expression } from './Expression';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\r\nimport { Computeds } from './Computed';\r\nimport { ReferenceData } from './ReferenceData';\r\n\r\n\r\n\r\nexport type TypeInput = TypeClass | Type;\r\n\r\nexport type TypeInputMap = Record<string, TypeInput>;\r\n\r\nexport type TypeMap = Record<string, Type>;\r\n\r\nexport interface TypeSub \r\n{ \r\n  key: string | number | Type;\r\n  value: Type;\r\n}\r\n\r\nexport type TypeResolved<T> = T extends (null | undefined)\r\n  ? undefined\r\n  : T extends TypeInput\r\n    ? Type\r\n    : T extends TypeInput[]\r\n      ? Type[]\r\n      : T extends TypeInputMap\r\n        ? Record<keyof T, Type>\r\n        : {\r\n          [K in keyof T]: TypeResolved<T[K]>\r\n        };\r\n\r\nexport interface TypeProvider \r\n{\r\n  getType(data: any, otherwise?: Type): Type;\r\n  getExpression(data: any): Expression;\r\n  getData(name: string): ReferenceData | null;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface TypeDescribeProvider\r\n{\r\n  describe(data: any): Type;\r\n  merge(type: Type, data: any): Type;\r\n}\r\n\r\nexport interface TypeCompatibleOptions\r\n{\r\n  strict?: boolean;\r\n  value?: boolean;\r\n  exact?: boolean;\r\n}\r\n\r\nexport interface TypeParser \r\n{\r\n  (data: any, types: TypeProvider): Type;\r\n}\r\n\r\nexport interface TypeClass<T extends Type<O> = any, O = any> \r\n{\r\n  id: string;\r\n  operations: Operations;\r\n  computeds: Computeds;\r\n  baseType: T;\r\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\r\n  encode(this: TypeClass<T>, type: T): any;\r\n  describePriority: number;\r\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null;\r\n  register(this: TypeClass<T>): void;\r\n  registered: boolean;\r\n  new(options: O, ...args: any[]): T;\r\n}\r\n\r\nexport abstract class Type<O = any> implements Traversable<Type>\r\n{\r\n\r\n  public options: O;\r\n  public parent: Type = null;\r\n\r\n  public constructor(options: O) \r\n  {\r\n    this.options = options;\r\n  }\r\n\r\n  public abstract getOperations(): Record<string, OperationGeneric>;\r\n\r\n  public abstract getId(): string;\r\n\r\n  public abstract merge(type: Type<O>): void;\r\n\r\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\r\n\r\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\r\n\r\n  public abstract getExactType(value: any): Type<O>;\r\n\r\n  public abstract getSimplifiedType(): Type;\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\r\n\r\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\r\n  {\r\n    if (other === this)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.isDeepCompatible(other, options);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public acceptsType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true });\r\n  }\r\n\r\n  public acceptsData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true, value: true });\r\n  }\r\n\r\n  public exactType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true });\r\n  }\r\n\r\n  public exactData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\r\n  }\r\n\r\n  public abstract isOptional(): boolean;\r\n\r\n  public abstract isSimple(): boolean;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\r\n\r\n  public abstract setParent(parent?: Type): void;\r\n\r\n  public abstract removeDescribedRestrictions(): void;\r\n\r\n  public abstract getCreateExpression(): Expression;\r\n\r\n  public abstract getValidateExpression(): Expression;\r\n\r\n  public abstract getCompareExpression(): Expression;\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    return newValue;\r\n  }\r\n\r\n  public getValueChangeAt(newValue: Expression): Expression\r\n  {\r\n    let node: Type = this.parent;\r\n    const path = this.getPath();\r\n\r\n    while(node)\r\n    {\r\n      const step = path.pop();\r\n\r\n      newValue = node.getValueChangeExpression(newValue, step, step);\r\n      node = node.parent;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getTypeFromPath(path: TraverseStep[]): Type | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const type = this.getTypeFromStep(path[0]);\r\n\r\n    if (!type)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return type.getTypeFromPath(path.slice(1));\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootType(): Type\r\n  {\r\n    let node: Type = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public abstract isValid(value: any): boolean;\r\n\r\n  public abstract normalize(value: any): any;\r\n\r\n  public abstract newInstance(): Type<O>;\r\n\r\n  public abstract clone(): Type<O>;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract create(): any;\r\n\r\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\r\n\r\n  public abstract fromJson(json: any): any;\r\n\r\n  public abstract toJson(value: any): any;\r\n  \r\n}","import { Type, TypeMap } from './Type';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\r\n\r\n\r\nexport interface ExpressionProvider \r\n{ \r\n  getExpression(value: any): Expression;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface ExpressionClass<T extends Expression = any> \r\n{\r\n  id: string;\r\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\r\n  encode(this: ExpressionClass<T>, expr: T): any;\r\n  new(...args: any[]): T;\r\n}\r\n\r\nexport type ExpressionValue = any | Expression;\r\n\r\nexport type ExpressionMap = Record<string, Expression>;\r\n\r\nexport abstract class Expression implements Traversable<Expression>\r\n{\r\n\r\n  public static INSTANCE = 'instance';\r\n\r\n  public parent: Expression = null;\r\n  \r\n  public abstract getId(): string;\r\n\r\n  public abstract getScope(): TypeMap | null;\r\n\r\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract clone(): Expression;\r\n\r\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\r\n\r\n  public abstract setParent(parent?: Expression): void;\r\n\r\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\r\n  \r\n  public abstract mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const step = this.getExpressionFromStep(path);\r\n\r\n    if (!step || !step[1])\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const [steps, expr] = step;\r\n\r\n    return expr.getExpressionFromPath(path.slice(steps));\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootExpression(): Expression\r\n  {\r\n    let node: Expression = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public validations(def: DefinitionProvider, context: Type): Validation[]\r\n  {\r\n    const validations: Validation[] = [];\r\n\r\n    this.validate(def, context, x => validations.push(x));\r\n\r\n    return validations;\r\n  }\r\n\r\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\r\n  {\r\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\r\n    const actualComplete = subject ? subject.getType(def, context) : null;\r\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\r\n    let test = actual;\r\n\r\n    if (!actual)\r\n    {\r\n      if (expected && !expected.isOptional())\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n        });\r\n      }\r\n    }\r\n    else\r\n    {\r\n      if (actual.isOptional() && !expected.isOptional())\r\n      {\r\n        test = test.getRequired();\r\n      }\r\n\r\n      if (!expected.acceptsType(test))\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: expected.isCompatible(actual)\r\n            ? ValidationSeverity.MEDIUM\r\n            : ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n      else if (test !== actual)\r\n      {\r\n        handler({\r\n          type: ValidationType.POSSIBLY_NULL,\r\n          severity: ValidationSeverity.MEDIUM,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (subject)\r\n    {\r\n      subject.validate(def, context, handler);\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeProvider } from './Type';\r\nimport { isFunction } from './fns';\r\nimport { Entity } from './Entity';\r\nimport { Relation, EntityRelation } from './Relation';\r\nimport { NamedMap } from './maps/NamedMap';\r\n\r\n\r\nexport interface OperationFlags\r\n{\r\n  complexity: number;\r\n  mutates: string[];\r\n}\r\n\r\nexport interface Operation<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never,\r\n  H extends (P | O) = never,\r\n  R extends (P | O) = never\r\n> extends OperationFlags {\r\n  id: string;\r\n  params: P[];\r\n  optional: O[];\r\n  scope: S[];\r\n  scopeDefaults: Record<S, string>;\r\n  hasScope: H[];\r\n  resultDependency: R[];\r\n}\r\n\r\nexport type OperationResolved<\r\n  P extends string, \r\n  O extends string, \r\n  S extends string, \r\n  H extends (P | O), \r\n  R extends (P | O)\r\n> = Operation<\r\n  string extends P ? never : P, \r\n  string extends O ? never : O, \r\n  string extends S ? never : S, \r\n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \r\n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\r\n>;\r\n\r\nexport interface OperationTypeProvider extends TypeProvider\r\n{\r\n  getEntity(name: string): Entity | null;\r\n  getEntities(): NamedMap<Entity>;\r\n  getRelation(name: string): Relation | null;\r\n  getRelations(entityName: string): EntityRelation[];\r\n}\r\n\r\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\r\n\r\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\r\n\r\nexport interface OperationTypes<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never\r\n> {\r\n  returnType: OperationTypeInput<P | O>,\r\n  params: Record<P, OperationTypeInput<P | O>>;\r\n  optional: Record<O, OperationTypeInput<P | O>>;\r\n  scope: Record<S, OperationTypeInput<P | O>>;\r\n  rawTypes?: boolean;\r\n}\r\n\r\nexport type OperationGeneric = Operation<any, any, any, any, any>;\r\n\r\nexport interface OperationPair<\r\n  P extends string = any, \r\n  O extends string = any,\r\n  S extends string = any\r\n> {\r\n  op: Operation<P, O, S, any, any>;\r\n  types: OperationTypes<P, O, S>;\r\n}\r\n\r\nexport interface OperationMapping\r\n{\r\n  from: Operation<any, any, any, any, any>;\r\n  fromTypes: OperationTypes<any, any, any>;\r\n  to: Operation<any, any, any, any, any>;\r\n  toTypes: OperationTypes<any, any, any>;\r\n  mapping: Record<string, string>;\r\n  unmapped: string[];\r\n}\r\n\r\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\r\n{\r\n  return !('baseType' in x) && isFunction(x);\r\n}\r\n\r\nexport class Operations\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, OperationGeneric>;\r\n  public types: Record<string, OperationTypes<any, any, any>>;\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.types = Object.create(null);\r\n  }\r\n\r\n  public get (id: string): OperationGeneric\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n  public getTypes (id: string): OperationTypes<any, any, any>\r\n  {\r\n    return this.types[id] || this.types[this.prefix + id];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\r\n    localId: string, \r\n    flags: Partial<OperationFlags> = {},\r\n    params: P[] = [], \r\n    optional: O[] = [], \r\n    scope: S[] = [],\r\n    hasScope: H[] = [],\r\n    resultDependency: R[] = []\r\n  ) : OperationResolved<P, O, S, H, R> \r\n  {\r\n    const id = this.prefix + localId;\r\n    const mutates = flags.mutates || [];\r\n    const complexity = flags.complexity || 0;\r\n    const scopeDefaults: Record<S, string> = Object.create(null);\r\n    scope.forEach((s) => scopeDefaults[s] = s);\r\n\r\n    const op = { \r\n      id, \r\n      mutates, \r\n      complexity, \r\n      params,\r\n      optional,\r\n      scope,\r\n      scopeDefaults,\r\n      hasScope,\r\n      resultDependency\r\n    };\r\n    \r\n    this.map[id] = op;\r\n\r\n    return op as unknown as OperationResolved<P, O, S, H, R>;\r\n  }\r\n\r\n  public setTypes(\r\n    op: Operation<never, never, never, never, never>,\r\n    returnType: OperationTypeInput<never>\r\n  ) : OperationTypes<never, never, never>\r\n  public setTypes<P extends string>(\r\n    op: Operation<P, never, never, any, any>,\r\n    returnType: OperationTypeInput<P>,\r\n    params: Record<P, OperationTypeInput<P>>\r\n  ) : OperationTypes<P, never, never>\r\n  public setTypes<P extends string, O extends string>(\r\n    op: Operation<P, O, never, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, never>\r\n  public setTypes<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>,\r\n    scope: Record<S, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, S>\r\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\r\n    op: Operation<P, O, S, any, any>, \r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\r\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\r\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\r\n  ): OperationTypes<P, O, S> {\r\n\r\n    const types = { returnType, params, optional, scope };\r\n\r\n    this.types[op.id] = types;\r\n\r\n    return types;\r\n  }\r\n\r\n}","\r\nimport { Operation } from './Operation';\r\n\r\n\r\n\r\nexport interface Computed \r\n{\r\n  id: string;\r\n  op: string;\r\n  value: string;\r\n  params: Record<string, any>;\r\n  writeable?: {\r\n    op: string;\r\n    value: string;\r\n    newValue: string;\r\n    params: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport class Computeds\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, Computed>;\r\n  public list: Computed[];\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.list = [];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp: Computed = {\r\n      id,\r\n      op: op.id,\r\n      value: value || op.params[0],\r\n      params: params || {},\r\n    };\r\n\r\n    this.map[id] = comp;\r\n    this.list.push(comp);\r\n\r\n    return comp;\r\n  }\r\n\r\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp = this.map[id];\r\n\r\n    comp.writeable = { \r\n      op: op.id,\r\n      value,\r\n      newValue,\r\n      params: params || {},\r\n    };\r\n\r\n    return comp;\r\n  }\r\n\r\n  public get (id: string): Computed\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n}","\r\nexport const ID = {\r\n  Entity: '@',\r\n  Any: 'any',\r\n  Boolean: 'bool',\r\n  Color: 'color',\r\n  Date: 'date',\r\n  Enum: 'enum',\r\n  Function: 'func',\r\n  List: 'list',\r\n  Many: 'many',\r\n  Not: 'not',\r\n  Map: 'map',\r\n  Null: 'null',\r\n  Number: 'num',\r\n  Object: 'obj',\r\n  Optional: '?',\r\n  Reference: 'ref',\r\n  Relation: 'rel',\r\n  Set: 'set',\r\n  Text: 'text',\r\n  Tuple: 'tuple',\r\n  Delimiter: ':',\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\r\n\r\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\r\n\r\nconst ops = BooleanOperations;\r\n\r\nexport const BooleanOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  and: ops.set('&', {}, ['a', 'b']),\r\n\r\n  or: ops.set('|', {}, ['a', 'b']),\r\n\r\n  xor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  not: ops.set('!', {}, ['a']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isTrue: ops.set('t?', {}, ['value']),\r\n\r\n  isFalse: ops.set('f?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\n\r\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\r\n\r\nexport interface DataTypeComparator\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\r\n}\r\n\r\nexport interface DataTypeEquality\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\r\n}\r\n\r\nexport interface DataTypeCopier\r\n{\r\n  priority: number;\r\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\r\n}\r\n\r\nexport interface DataTypeJson<T = any>\r\n{\r\n  priority: number;\r\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\r\n  fromJson(json: any, fromJson: (json: any) => any): T;\r\n}\r\n\r\nexport interface DataTypeAccessor<T = any>\r\n{\r\n  priority: number;\r\n  isValid(value: any, step: any): boolean;\r\n  set(value: T, step: any, stepValue: any): void;\r\n  get(value: T, step: any): any;\r\n}\r\n\r\nexport class DataTypeRegistry\r\n{\r\n\r\n  public static TYPES: DataTypeRaw[] = [\r\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\r\n  ];\r\n\r\n  private compareTypes: Record<DataTypeRaw, number>;\r\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\r\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\r\n  private copyList: DataTypeCopier[];\r\n  private jsonList: DataTypeJson[];\r\n  private accessorList: DataTypeAccessor[];\r\n\r\n  public objectSet: <O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]) => void \r\n    = (obj, prop, value) => obj[prop] = value;\r\n  public objectRemove: <O extends object, K extends keyof O>(obj: O, prop: K) => void\r\n    = (obj, prop) => delete obj[prop];\r\n  public arrayAdd: <T>(arr: T[], item: T) => void\r\n    = (arr, item) => arr.push(item);\r\n  public arrayRemove: <T>(arr: T[], index: number) => T\r\n    = (arr, index) => arr.splice(index, 1)[0];\r\n  public arraySet: <T>(arr: T[], index: number, item: T) => T\r\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\r\n\r\n  public constructor()\r\n  {\r\n    this.compareTypes = this.createTypeMap((_, index) => index);\r\n    this.compareMap = this.createTypeMap(() => []);\r\n    this.equalsMap = this.createTypeMap(() => []);\r\n    this.copyList = [];\r\n    this.jsonList = [];\r\n    this.accessorList = [];\r\n  }\r\n\r\n  public compare(a: any, b: any): number\r\n  {\r\n    const comparator = (x: any, y: any): number =>\r\n    {\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\r\n      }\r\n\r\n      const compares = this.compareMap[xtype];\r\n\r\n      for (const compare of compares)\r\n      {\r\n        const result = compare.compare(x, y, comparator);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return x === y ? 0 : x < y ? -1 : 1;\r\n    };\r\n\r\n    return comparator(a, b);\r\n  }\r\n\r\n  public getCompare(less: number, more: number): number\r\n  {\r\n    return less === 0 && more === 0\r\n      ? 0\r\n      : less < more ? 1 : -1;\r\n  }\r\n\r\n  public addCompare(compare: DataTypeComparator): this\r\n  {\r\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\r\n  }\r\n\r\n  public equals(a: any, b: any): boolean\r\n  {\r\n    const equalitor = (x: any, y: any): boolean =>\r\n    {\r\n      if (x === y)\r\n      {\r\n        return true;\r\n      }\r\n\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const equals = this.equalsMap[xtype];\r\n\r\n      for (const equality of equals)\r\n      {\r\n        const result = equality.equals(x, y, equalitor);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    return equalitor(a, b);\r\n  }\r\n\r\n  public addEquals(equals: DataTypeEquality): this\r\n  {\r\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\r\n  }\r\n\r\n  public copy<T>(x: T, containsCycles: boolean = false): T\r\n  {\r\n    if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof x === 'object')\r\n    {\r\n      const copiers = this.copyList;\r\n\r\n      if (containsCycles)\r\n      {\r\n        const copied = new Map();\r\n  \r\n        const setObjectCopy = (original: any, copy: any) => \r\n        {\r\n          copied.set(original, copy);\r\n        };\r\n  \r\n        const copyObject = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            const existing = copied.get(a);\r\n  \r\n            if (existing !== undefined)\r\n            {\r\n              return existing;\r\n            }\r\n  \r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyObject(x);\r\n      }\r\n      else\r\n      {\r\n        const setObjectCopy = (original: any, copy: any) => {};\r\n\r\n        const copyValue = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyValue(x);\r\n      }\r\n\r\n      \r\n    }\r\n  \r\n    return x;\r\n  }\r\n\r\n  public addCopier(copier: DataTypeCopier): this\r\n  {\r\n    return this.addToPriorityList(this.copyList, copier);\r\n  }\r\n\r\n  public toJson<T>(value: T): any\r\n  {\r\n    if (!value) return value; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof value === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: T): any =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.toJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n\r\n        return x;\r\n      };\r\n      \r\n      return jsonObject(value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public fromJson<T>(json: any): T\r\n  {\r\n    if (!json) return json; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof json === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: any): T =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.fromJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n        \r\n        return x;\r\n      };\r\n\r\n      return jsonObject(json);\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public addJson<T>(json: DataTypeJson<T>): this\r\n  {\r\n    return this.addToPriorityList(this.jsonList, json);\r\n  }\r\n\r\n  public get(value: any, step: any): any\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        return access.get(value, step);\r\n      }\r\n    }\r\n  }\r\n\r\n  public set(value: any, step: any, stepValue: any): boolean\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        access.set(value, step, stepValue);\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\r\n  {\r\n    return this.addToPriorityList(this.accessorList, accessor);\r\n  }\r\n\r\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\r\n  {\r\n    const map: Record<DataTypeRaw, V> = Object.create(null);\r\n    \r\n    DataTypeRegistry.TYPES.forEach((type, index) => \r\n    {\r\n      map[type] = create(type, index);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\r\n  {\r\n    list.push(value);\r\n    list.sort((a, b) => b.priority - a.priority);\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport const DataTypes = new DataTypeRegistry();","\r\nimport { isBoolean, isEmpty } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_TRUE_PROBABILITY = 0.5;\r\n\r\nexport interface BooleanOptions \r\n{\r\n  true?: Record<string, true>;\r\n  false?: Record<string, true>;\r\n}\r\n\r\nexport class BooleanType extends Type<BooleanOptions> \r\n{\r\n\r\n  public static id = ID.Boolean;\r\n\r\n  public static operations = BooleanOperations;\r\n\r\n  public static computeds = BooleanComputeds;\r\n\r\n  public static baseType = new BooleanType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): BooleanType \r\n  {\r\n    return new BooleanType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: BooleanType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return isBoolean(data) ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'boolean';\r\n\r\n    DataTypes.addCompare({\r\n      priority, \r\n      type,\r\n      compare: (a, b) => {\r\n        return (a ? 1 : 0) - (b ? 1 : 0);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => a === b,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return BooleanType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return BooleanType.operations.map;\r\n  }\r\n\r\n  public merge(type: BooleanType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (options.exact || options.strict)\r\n    {\r\n      return other instanceof BooleanType;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (isBoolean(value))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    const asKey = value + '';\r\n\r\n    if (this.options.true && this.options.true[asKey])\r\n    {\r\n      return true;\r\n    }\r\n    \r\n    if (this.options.false && this.options.false[asKey])\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isBoolean(value))\r\n    {\r\n      const asKey = value + '';\r\n\r\n      if (this.options.true && this.options.true[asKey])\r\n      {\r\n        return true;\r\n      }\r\n      \r\n      if (this.options.false && this.options.false[asKey])\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): BooleanType\r\n  {\r\n    return new BooleanType({});\r\n  }\r\n\r\n  public clone(): BooleanType\r\n  {\r\n    return new BooleanType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return BooleanType.encode(this);\r\n  }\r\n\r\n  public create(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\r\n  }\r\n\r\n  public fromJson(json: boolean): boolean\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: boolean): boolean\r\n  {\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPR = 1;\r\n\r\nexport class NotExpression extends Expression \r\n{\r\n\r\n  public static STEP_NOT = 'not';\r\n\r\n  public static id = 'not';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \r\n  {\r\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\r\n    \r\n    return new NotExpression(expression);\r\n  }\r\n\r\n  public static encode(expr: NotExpression): any \r\n  {\r\n    const expression = expr.expression.encode();\r\n\r\n    return [this.id, expression];\r\n  }\r\n\r\n  public expression: Expression;\r\n\r\n  public constructor(expression: Expression) \r\n  {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new NotExpression(this.expression.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === NotExpression.STEP_NOT\r\n      ? [1, this.expression]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expression.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return this.expression.mutates(def, arg);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class AndExpression extends Expression \r\n{\r\n\r\n  public static id = 'and';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new AndExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: AndExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AndExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AndExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new AndExpression(this.expressions.map(e => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)    \r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\r\n\r\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\r\n\r\nconst ops = AnyOperations;\r\nconst ANY_COMPLEXITY = {\r\n  complexity: 2\r\n};\r\n\r\nexport const AnyOps = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\r\n\r\n  isDefined: ops.set('isDefined', {}, ['value']),\r\n\r\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\r\n\r\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\r\n\r\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport class NullType extends Type<null> \r\n{\r\n\r\n  public static id = ID.Null;\r\n\r\n  public static operations = new Operations(ID.Null + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\r\n\r\n  public static baseType = new NullType(null);\r\n\r\n  public static decode(data: any[]): NullType \r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public static encode(type: NullType): any \r\n  {\r\n    return this.id;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return data === null ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NullType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NullType.operations.map;\r\n  }\r\n\r\n  public merge(type: NullType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof NullType;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.null();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.isEqual, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.null(),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null || value === undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public clone(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NullType.encode(this);\r\n  }\r\n\r\n  public create(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public toJson(value: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nexport class NoExpression extends Expression \r\n{\r\n\r\n  public static id = 'noop';\r\n\r\n  public static readonly instance = new NoExpression();\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \r\n  {\r\n    return this.instance\r\n  }\r\n\r\n  public static encode(expr: NoExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isObject, isString } from '../fns';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nexport class AnyType extends Type \r\n{\r\n\r\n  public static id = ID.Any;\r\n\r\n  public static operations = AnyOperations;\r\n\r\n  public static computeds = AnyComputeds;\r\n\r\n  public static baseType = new AnyType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): AnyType \r\n  {\r\n    return this.baseType;\r\n  }\r\n\r\n  public static encode(type: AnyType): any \r\n  {\r\n    return this.id\r\n  }\r\n\r\n  public static describePriority: number = 8;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (isObject(data) && isString(data.$any))\r\n    {\r\n      return new AnyType({});\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AnyType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return AnyType.operations.map;\r\n  }\r\n\r\n  public merge(type: AnyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isCompatible(other: Type): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.string();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.true();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public clone(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AnyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return DataTypes.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return DataTypes.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { isString } from '../fns';\r\nimport { AnyType } from '../types/Any';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_DEFINE = 1;\r\nconst INDEX_BODY = 2;\r\n\r\nexport class DefineExpression extends Expression \r\n{\r\n\r\n  public static STEP_DEFINE = 'define';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static id = 'def';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \r\n  {\r\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    \r\n    return new DefineExpression(define, body);\r\n  }\r\n\r\n  public static encode(expr: DefineExpression): any \r\n  {\r\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\r\n\r\n    return [this.id, define, expr.body.encode()];\r\n  }\r\n\r\n  public define: [string, Expression][];\r\n  public body: Expression;\r\n\r\n  public constructor(define: [string, Expression][], body: Expression) \r\n  {\r\n    super();\r\n    this.define = define;\r\n    this.body = body;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DefineExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    const scope = {};\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\r\n\r\n    return scope;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DefineExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { scope, context } = def.getContextWithScope(original);\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\r\n\r\n    return this.body.getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\r\n        this.define.forEach(([name, defined], index) => \r\n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\r\n        )\r\n      );\r\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DefineExpression.STEP_BODY\r\n      ? [1, this.body]\r\n      : steps[0] === DefineExpression.STEP_DEFINE\r\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.define.forEach(([name, defined]) => defined.setParent(this));\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const defineContext = def.getContextWithScope(context);\r\n\r\n    this.define.forEach(([name, defined]) => \r\n    {\r\n      defined.validate(def, defineContext.context, handler);\r\n\r\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\r\n    });\r\n    \r\n    this.body.validate(def, defineContext.context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const [, defined] of this.define)    \r\n    {\r\n      if (defined.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public with(name: string, value: ExpressionValue): DefineExpression\r\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\r\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\r\n  {\r\n    const append = isString(nameOrDefines)\r\n      ? { [nameOrDefines]: value }\r\n      : nameOrDefines;\r\n\r\n    for (const name in append)\r\n    {\r\n      const expr = Exprs.parse(append[name]);\r\n      const existing = this.define.find(([varName]) => varName === name);\r\n\r\n      if (existing) {\r\n        existing[1] = expr;\r\n      } else {\r\n        this.define.push([name, expr]);\r\n      }\r\n\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): DefineExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class DoExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'do';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new DoExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: DoExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DoExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === DoExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.condition.mutates(def, arg, directly) || \r\n      this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public do(body: Expression, condition?: Expression): DoExpression\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    if (condition)\r\n    {\r\n      this.condition = condition;\r\n      this.condition.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public while(condition: Expression): DoExpression\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_CHAIN = 1;\r\n\r\nexport class ChainExpression extends Expression \r\n{\r\n\r\n  public static id = 'chain';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \r\n  {\r\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\r\n\r\n    return new ChainExpression(chain);\r\n  }\r\n\r\n  public static encode(expr: ChainExpression): any \r\n  {\r\n    const chain = expr.chain.map(e => e.encode());\r\n\r\n    return [this.id, chain];\r\n  }\r\n\r\n  public chain: Expression[];\r\n\r\n  public constructor(chain: Expression[]) \r\n  {\r\n    super();\r\n    this.chain = chain;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ChainExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ChainExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ChainExpression(this.chain.map(c => c.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.chain[this.chain.length - 1].getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.chain.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.chain.length\r\n      ? [1, this.chain[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.chain.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.chain.forEach(subject => \r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const link of this.chain)\r\n    {\r\n      if (link.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public add(exprs: Expression | Expression[]): ChainExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    for (const expr of append)\r\n    {\r\n      this.chain.push(expr);\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_COMMENT = 1;\r\n\r\nexport class CommentExpression extends Expression \r\n{\r\n\r\n  public static id = 'comment';\r\n\r\n  public static readonly instance = new CommentExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \r\n  {\r\n    const comment = data[INDEX_COMMENT];\r\n\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static encode(expr: CommentExpression): any \r\n  {\r\n    return [this.id, expr.comment];\r\n  }\r\n\r\n  public comment: string;\r\n\r\n  public constructor(comment: string)\r\n  {\r\n    super();\r\n    this.comment = comment;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return CommentExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return CommentExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new CommentExpression(this.comment);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class GetExpression extends Expression \r\n{\r\n\r\n  public static id = 'get';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \r\n  {\r\n    if (data[INDEX_PATH])\r\n    {\r\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\r\n    }\r\n    \r\n    return new GetExpression();\r\n  }\r\n\r\n  public static encode(expr: GetExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetExpression();\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return context;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\r\n\r\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\r\n\r\nconst ops = TextOperations;\r\n\r\nexport const TextOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  uuid: ops.set('uuid'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  append: ops.set('+', {}, ['value', 'append']),\r\n\r\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\r\n\r\n  lower: ops.set('lo', {}, ['value']),\r\n\r\n  upper: ops.set('up', {}, ['value']),\r\n\r\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\r\n\r\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\r\n\r\n  repeat: ops.set('repeat', {}, ['value', 'times']),\r\n\r\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\r\n\r\n  chars: ops.set('chars', {}, ['value']),\r\n\r\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\r\n\r\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\r\n\r\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\r\n\r\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\r\n\r\n  startsWith: ops.set('starts', {}, ['value', 'test']),\r\n\r\n  endsWith: ops.set('ends', {}, ['value', 'test']),\r\n\r\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\r\n\r\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\r\n\r\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\r\n\r\n  length: ops.set('len', {}, ['value']),\r\n\r\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\r\n\r\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\r\n\r\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\r\n\r\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\r\n\r\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\r\n\r\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.set('base64', {}, ['value']),\r\n\r\n  unbase64: ops.set('unbase64', {}, ['value']),\r\n\r\n  encodeURI: ops.set('encodeURI', {}, ['value']),\r\n\r\n  decodeURI: ops.set('decodeURI', {}, ['value']),\r\n\r\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\r\n\r\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\r\n\r\n  md5: ops.set('md5', {}, ['value']),\r\n\r\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\r\n\r\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\r\n\r\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['value']),\r\n\r\n  isNotEmpty: ops.set('n?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLower: ops.set('lo?', {}, ['value']),\r\n\r\n  isUpper: ops.set('up?', {}, ['value']),\r\n\r\n  isUuid: ops.set('uuid?', {}, ['value']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTextComputeds.set('toUpper', TextOps.upper);\r\nTextComputeds.set('toLower', TextOps.lower);\r\nTextComputeds.set('chars', TextOps.chars);\r\nTextComputeds.set('trim', TextOps.trim);\r\nTextComputeds.set('soundex', TextOps.soundex);\r\nTextComputeds.set('metaphone', TextOps.metaphone);\r\nTextComputeds.set('base64', TextOps.base64);\r\nTextComputeds.set('unbase64', TextOps.unbase64);\r\nTextComputeds.set('encodeURI', TextOps.encodeURI);\r\nTextComputeds.set('decodeURI', TextOps.decodeURI);\r\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\r\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\r\nTextComputeds.set('md5', TextOps.md5);\r\nTextComputeds.set('toNumber', TextOps.toNumber);\r\nTextComputeds.set('isEmpty', TextOps.isEmpty);\r\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\r\nTextComputeds.set('isLower', TextOps.isLower);\r\nTextComputeds.set('isUpper', TextOps.isUpper);","\r\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\r\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from './Enum';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 1;\r\nconst RANDOM_MAX = 16;\r\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\r\n\r\nexport interface TextOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  requireUpper?: boolean;\r\n  requireLower?: boolean;\r\n  forceUpper?: boolean;\r\n  forceLower?: boolean;\r\n  matches?: RegExp;\r\n}\r\n\r\nexport class TextType extends Type<TextOptions> \r\n{\r\n\r\n  public static id = ID.Text;\r\n\r\n  public static operations = TextOperations;\r\n\r\n  public static computeds = TextComputeds;\r\n  \r\n  public static baseType = new TextType({});\r\n\r\n  public static decode(data: any[]): TextType \r\n  {\r\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: TextType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): TextOptions\r\n  {\r\n    const matches = options.matches;\r\n\r\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: TextOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n    const matches = encoded.matches;\r\n\r\n    if (matches) encoded.matches = [matches.source, matches.flags];\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 3;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isString(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new TextType({\r\n      min: data.length,\r\n      max: data.length,\r\n      requireLower: data.toLowerCase() === data,\r\n      requireUpper: data.toUpperCase() === data\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 4;\r\n    const type: DataTypeRaw = 'string';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a.localeCompare(b);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor({\r\n      priority,\r\n      isValid: isString,\r\n      get: (x, step) => x[step],\r\n      set: (x, step, value) => x[step] = value,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TextType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TextType.operations.map;\r\n  }\r\n\r\n  public merge(type: TextType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.requireLower = o1.requireLower && o2.requireLower;\r\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          return Types.CHAR;\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof TextType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax > max))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const lower = this.options.forceLower || this.options.requireUpper;\r\n      const otherLower = other.options.forceLower || other.options.requireLower;\r\n\r\n      if (lower && !otherLower)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const upper = this.options.forceUpper || this.options.requireUpper;\r\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\r\n\r\n      if (upper && !otherUpper)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const matches = this.options.matches;\r\n      const otherMatches = other.options.matches;\r\n\r\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.compare, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      ignoreCase: Exprs.true(),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isString(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (matches && matches instanceof RegExp && !matches.test(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isString(value))\r\n    {\r\n      if (this.options.forceLower)\r\n      {\r\n        value = value.toLowerCase();\r\n      }\r\n\r\n      if (this.options.forceUpper)\r\n      {\r\n        value = value.toUpperCase();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TextType\r\n  {\r\n    return new TextType({});\r\n  }\r\n\r\n  public clone(): TextType\r\n  {\r\n    return new TextType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TextType.encode(this);\r\n  }\r\n\r\n  public create(): string\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\r\n    const lower = requireLower || forceLower;\r\n    const upper = requireUpper || forceUpper;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const n = rnd(chosenMin, chosenMax + 1, true);\r\n    let out = '';\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\r\n    }\r\n\r\n    if (lower) out = out.toLowerCase();\r\n    if (upper) out = out.toUpperCase();\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: string): string\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: string): string\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\r\n\r\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\r\n\r\nconst ops = MapOperations;\r\n\r\nexport const MapOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\r\n\r\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\r\n\r\n  has: ops.set('has', {}, ['map', 'key']),\r\n\r\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\r\n\r\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\r\n\r\n  count: ops.set('count', { }, ['map']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\r\n\r\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\r\n\r\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nMapComputeds.set('copy', MapOps.copy);\r\nMapComputeds.set('keys', MapOps.keys);\r\nMapComputeds.set('values', MapOps.values);\r\nMapComputeds.set('entries', MapOps.entries);\r\nMapComputeds.set('pairs', MapOps.pairs);\r\nMapComputeds.set('count', MapOps.count);","\r\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { TextType } from './Text';\r\nimport { Expression } from '../Expression';\r\nimport { Exprs } from '../Exprs';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { MapOps } from '../ops/MapOps';\r\nimport { Types } from '../Types';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_KEY = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CONSTANTS = 3;\r\n\r\nexport interface EnumOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n  constants: Map<any, any>;\r\n}\r\n\r\nexport class EnumType extends Type<EnumOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n  \r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Enum;\r\n\r\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\r\n  \r\n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\r\n\r\n  public static decode(data: any[], types: TypeProvider): EnumType \r\n  {\r\n    const key = types.getType(data[INDEX_KEY]);\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n\r\n    return new EnumType({ key, value, constants });\r\n  }\r\n\r\n  public static encode(type: EnumType): any \r\n  {\r\n    const { key, value, constants } = type.options;\r\n\r\n    return [\r\n      this.id,\r\n      key.encode(),\r\n      value.encode(),\r\n      Array.from(constants.entries()).map(([k, v]) => [\r\n        key.toJson(k),\r\n        value.toJson(v)\r\n      ])\r\n    ];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EnumType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.value.getOperations();\r\n  }\r\n\r\n  public merge(type: EnumType): void\r\n  {\r\n    const c1 = this.options.constants;\r\n    const c2 = type.options.constants;\r\n\r\n    this.options.key = Types.merge(this.options.key, type.options.key);\r\n    this.options.value = Types.merge(this.options.value, type.options.value);\r\n\r\n    for (const [key, value] of c2.entries())\r\n    {\r\n      c1.set(key, value);\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.value.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.value.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.value;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof EnumType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { key, value } = this.options;\r\n\r\n    if (options.exact)\r\n    {\r\n      if (!key.isCompatible(other.options.key, options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value.isCompatible(other.options.value);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.options.value.isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.value.isSimple();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EnumType.STEP_KEY\r\n      ? this.options.key\r\n      : step === EnumType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.value.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.options.value.getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.options.value.getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === EnumType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    const { constants, value } = this.options;\r\n\r\n    if (!value.isValid(test))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const constantValue of constants.values())\r\n    {\r\n      if (DataTypes.compare(constantValue, test) === 0)\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.options.value.normalize(value);\r\n  }\r\n\r\n  public newInstance(): EnumType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n      constants: new Map(),\r\n    });\r\n  }\r\n\r\n  public clone(): EnumType\r\n  {\r\n    const { key, value, constants } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n      constants: new Map(constants.entries()),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EnumType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    const { value, constants } = this.options;\r\n    const firstKey = constants.keys().next();\r\n\r\n    return firstKey ? constants.get(firstKey) : value.create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const values = Array.from(this.options.constants.values());\r\n\r\n    return values[rnd(0, values.length, true)];\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.options.value.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.options.value.toJson(value);\r\n  }\r\n\r\n}","\r\nimport { isArray, isString, isNumber } from '../fns';\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { Type } from '../Type';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\nimport { NumberType } from '../types/Number';\r\nimport { Traverser } from '../Traverser';\r\nimport { AnyType } from '../types/Any';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_CONSTANT = 1;\r\n\r\nexport class ConstantExpression extends Expression \r\n{\r\n\r\n  public static has(e: Expression, constant: any): boolean\r\n  {\r\n    return e instanceof ConstantExpression && e.value === constant;\r\n  }\r\n\r\n  public static is(e: Expression): e is ConstantExpression\r\n  {\r\n    return e instanceof ConstantExpression;\r\n  }\r\n\r\n  public static id = 'constant';\r\n\r\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \r\n  {\r\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ConstantExpression): any \r\n  {\r\n    const value = AnyType.baseType.toJson(expr.value);\r\n\r\n    return isArray(value)\r\n      ? [this.id, value]\r\n      : value;\r\n  }\r\n\r\n  public value: any;\r\n\r\n  public constructor(value: any) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ConstantExpression.id;\r\n  }\r\n\r\n  public getComplexity(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ConstantExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ConstantExpression(DataTypes.copy(this.value));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const value = this.value;\r\n\r\n    if (isString(value)) \r\n    {\r\n      return new EnumType({\r\n        key: TextType.baseType.newInstance(),\r\n        value: TextType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    if (isNumber(value)) \r\n    {\r\n      return new EnumType({\r\n        key: NumberType.baseType.newInstance(),\r\n        value: NumberType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    const described = def.describe(this.value);\r\n\r\n    if (described)\r\n    {\r\n      described.removeDescribedRestrictions();\r\n    }\r\n\r\n    return described;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { GetExpression } from './Get';\r\nimport { ConstantExpression } from './Constant';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class PathExpression extends Expression \r\n{\r\n\r\n  public static id = 'path';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \r\n  {\r\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\r\n    \r\n    return new PathExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: PathExpression): any \r\n  {\r\n    return [this.id, expr.expressions.map((e) => e.encode())];\r\n  }\r\n\r\n  public static createForLegacy(path: Expression[])\r\n  {\r\n    for (let i = path.length - 1; i >= 0; i--)\r\n    {\r\n      const node = path[i];\r\n\r\n      if (node instanceof PathExpression)\r\n      {\r\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\r\n        {\r\n          path.splice(i, 1, ...node.expressions);\r\n        }\r\n      }\r\n    }\r\n\r\n    return new PathExpression(path);\r\n  }\r\n\r\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\r\n  {\r\n    const isPath = pathData[0] === PathExpression.id;\r\n    const path = isPath\r\n      ? PathExpression.decode(pathData, exprs)\r\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\r\n\r\n    if (isPath) {\r\n      exprs.setLegacy();\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return PathExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return PathExpression.encode(this);\r\n  }\r\n\r\n  public clone(): PathExpression\r\n  {\r\n    return new PathExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getPathType(this.expressions, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n    \r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const path = this.expressions;\r\n\r\n    if (path.length === 0)\r\n    {\r\n      handler({\r\n        type: ValidationType.EMPTY_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    let thisType = path[0].getType(def, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: path[0],\r\n        parent: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      path[0].validate(def, context, handler);\r\n\r\n      for (let i = 1; i < path.length; i++)\r\n      {\r\n        const node = path[i];\r\n\r\n        node.validate(def, context, handler, thisType);\r\n\r\n        thisType = node.isPathNode()\r\n          ? node.getType(def, context, thisType)\r\n          : thisType.getSubType(node, def, context);\r\n\r\n        if (!thisType)\r\n        {\r\n          handler({\r\n            type: ValidationType.INVALID_EXPRESSION,\r\n            severity: ValidationSeverity.HIGH,\r\n            context,\r\n            subject: node,\r\n            parent: this,\r\n          });\r\n          \r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)\r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public isWritable(defs: DefinitionProvider)\r\n  {\r\n    return this.expressions.length > 0\r\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\r\n      : false;\r\n  }\r\n\r\n  public isMutating(arg: string, directly: boolean = false): boolean\r\n  {\r\n    const e0 = this.expressions[0];\r\n    const e1 = this.expressions[1];\r\n    const e2 = this.expressions[2]; // tslint:disable-line: no-magic-numbers\r\n\r\n    if (!(e0 instanceof GetExpression && e1 instanceof ConstantExpression && e1.value === arg))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return directly ? true : !!e2;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_EXPRESSION = 2;\r\n\r\nexport class ComputedExpression extends Expression \r\n{\r\n\r\n  public static STEP_EXPRESSION = 'expression';\r\n\r\n  public static id = 'comp';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider) \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    if (data[INDEX_EXPRESSION]) \r\n    {\r\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\r\n    }\r\n    \r\n    return new ComputedExpression(name);\r\n  }\r\n\r\n  public static encode(expr: ComputedExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string) \r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ComputedExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const comp = def.getComputed(this.name);\r\n\r\n    if (!comp)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    const op = def.getOperation(comp.op);    \r\n    \r\n    return op ? op.complexity : 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ComputedExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ComputedExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.OUTSIDE_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      if (!def.hasComputed(thisType, this.name))\r\n      {\r\n        handler({\r\n          type: ValidationType.INVALID_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject: this,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    const comp = defs.getComputed(this.name);\r\n\r\n    return !comp || !!comp.writeable;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { NumberType } from '../types/Number';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { isNumber } from '../fns';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_VARIABLE = 1;\r\nconst INDEX_START = 2;\r\nconst INDEX_END = 3;\r\nconst INDEX_BODY = 4;\r\nconst INDEX_BREAK = 5;\r\nconst INDEX_MAX = 6;\r\n\r\nexport class ForExpression extends Expression \r\n{\r\n\r\n  public static STEP_START = 'start';\r\n\r\n  public static STEP_END = 'end';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'for';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \r\n  {\r\n    const variable = data[INDEX_VARIABLE];\r\n    const start = exprs.getExpression(data[INDEX_START]);\r\n    const end = exprs.getExpression(data[INDEX_END]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new ForExpression(variable, start, end, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: ForExpression): any \r\n  {\r\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public variable: string;\r\n  public start: Expression;\r\n  public end: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.variable = variable;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ForExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.variable]: NumberType.baseType.newInstance(),\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ForExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\r\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\r\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ForExpression.STEP_START\r\n      ? [1, this.start]\r\n      : steps[0] === ForExpression.STEP_END\r\n        ? [1, this.end]\r\n        : steps[0] === ForExpression.STEP_BODY\r\n          ? [1, this.body]\r\n          : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.start.setParent(this);\r\n    this.end.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\r\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.start.mutates(def, arg, directly) || \r\n      this.end.mutates(def, arg, directly) || \r\n      this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    this.variable = variable;\r\n\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      this.body = body;\r\n      this.body.setParent(this);\r\n    }\r\n\r\n    if (breakVariable)\r\n    {\r\n      this.breakVariable = breakVariable;\r\n    }\r\n\r\n    if (isNumber(maxIterations))\r\n    {\r\n      this.maxIterations = maxIterations;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public startAt(start: ExpressionValue): ForExpression\r\n  {\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public endAt(end: ExpressionValue): ForExpression\r\n  {\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): ForExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string)\r\n  {\r\n    this.variable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetDataExpression extends Expression \r\n{\r\n\r\n  public static id = 'data';\r\n\r\n  public static readonly instance = new GetDataExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetDataExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetDataExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetDataExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetDataExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const data = def.getData(this.name);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getData(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }  \r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false; \r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\r\n\r\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\r\n\r\nconst ops = EntityOperations;\r\n\r\nexport const EntityOps = \r\n{\r\n\r\n  newInstance: ops.set('newInstance', {}, ['name'], ['initial'], [], [], ['name']),\r\n\r\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\r\n\r\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\r\n\r\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\r\n\r\nconst ops = ObjectOperations;\r\n\r\nexport const ObjectOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  has: ops.set('has', {}, ['object', 'key']),\r\n\r\n  get: ops.set('get', {}, ['object', 'key']),\r\n\r\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\r\n\r\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\r\n\r\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nObjectComputeds.set('copy', ObjectOps.copy);","\r\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport interface ObjectOptions \r\n{\r\n  props: TypeMap;\r\n}\r\n\r\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \r\n{\r\n\r\n  public static wilcardProperty = '*';\r\n\r\n  public static id = ID.Object;\r\n\r\n  public static operations = ObjectOperations;\r\n\r\n  public static computeds = ObjectComputeds;\r\n\r\n  public static baseType = new ObjectType({ props: {} });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ObjectType \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\r\n    \r\n    return new ObjectType({ props });\r\n  }\r\n\r\n  public static encode(type: ObjectType): any \r\n  {\r\n    const props = objectMap(type.options.props, p => p.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public static describePriority: number = 5;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isObject(data) || data === null)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const type = new ObjectType({ props: {} });\r\n\r\n    cache.set(data, type);\r\n\r\n    type.options.props = objectMap(data, d => describer.describe(d));\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 7;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, reader);\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, writer);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isObject(x)) {\r\n          const newObject: any = {};\r\n\r\n          setObjectCopy(x, newObject);\r\n  \r\n          for (const prop in x) {\r\n            newObject[copy(prop)] = copy(x[prop]);\r\n          }\r\n  \r\n          return newObject;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        if (a === null) return 1;\r\n        if (b === null) return -1;\r\n\r\n        let less = 0;\r\n        let more = 0;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            less++;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            more++;\r\n          }\r\n        }\r\n\r\n        for (const prop in a) {\r\n          if (prop in b)\r\n          {\r\n            const c = compare(a[prop], b[prop]);\r\n\r\n            if (c < 0) less++;\r\n            if (c > 0) more++;\r\n          }\r\n        }\r\n\r\n        return DataTypes.getCompare(less, more);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        if ((a === null) !== (b === null)) return false;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            return false;\r\n          } else if (!equals(a[prop], b[prop])) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<object>({\r\n      priority,\r\n      isValid: (value) => isObject(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue as never),\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ObjectType.operations.map;\r\n  }\r\n\r\n  public merge(type: Type<O>): void\r\n  {\r\n    const p1 = this.options.props;\r\n    const p2 = type.options.props;\r\n\r\n    for (const prop in p1)\r\n    {\r\n      if (prop in p2 && p2[prop])\r\n      {\r\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\r\n      }\r\n      else if (p1[prop])\r\n      {\r\n        p1[prop] = Types.optional(p1[prop]);\r\n      }\r\n    }\r\n\r\n    for (const prop in p2)\r\n    {\r\n      if (!(prop in p1) && p2[prop])\r\n      {\r\n        p1[prop] = Types.optional(p2[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (isString(expr.value))\r\n      {\r\n        return this.options.props[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof TextType)\r\n      {\r\n        const types = objectValues(this.options.props);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n    }\r\n\r\n    return this.getWildcardType();\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const props = objectValues(this.options.props);\r\n\r\n    return [\r\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\r\n      {\r\n        key: new EnumType({\r\n          key: TextType.baseType,\r\n          value: TextType.baseType,\r\n          constants: new Map(\r\n            objectValues(this.options.props, (prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(props, NullType.baseType),\r\n      },\r\n      { \r\n        key: TextType.baseType, \r\n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\r\n      }\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.options.props, \r\n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => DataTypes.objectRemove(this.options.props, prop))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options.props[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof ObjectType)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!other.options.props[prop]) \r\n      {\r\n        if (props[prop].isOptional())\r\n        {\r\n          continue;\r\n        }\r\n        else\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      if (!props[prop].isCompatible(other.options.props[prop], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (options.exact)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop])\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    else if (wildcard)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.object(\r\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ObjectOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop) \r\n        }).run(\r\n          t ? t.getValidateExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop),\r\n          test: Exprs.get('test', prop) \r\n        }).run(\r\n          t ? t.getCompareExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = property\r\n    const hasFrom = from !== null && from !== undefined;\r\n    const hasTo = to !== null && to !== undefined;\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from !== to) // rename\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: Exprs.get('value', from),\r\n        }),\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isObject(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop].isValid(value[prop])) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (wildcard)\r\n    {\r\n      for (const prop in value)\r\n      {\r\n        if (!props[prop] && !wildcard.isValid(value[prop]))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ObjectType<O>\r\n  {\r\n    return new ObjectType({ props: {} } as O);\r\n  }\r\n\r\n  public clone(): ObjectType<O>\r\n  {\r\n    return new ObjectType<O>({\r\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\r\n    } as O);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    const { props } = this.options;\r\n    const out: any = Object.create(null);\r\n    \r\n    for (const prop in props)\r\n    {\r\n      const propType = props[prop];\r\n\r\n      if (propType && !propType.isOptional())\r\n      {\r\n        out[prop] = propType.create();\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { props } = this.options;\r\n    const out: any = Object.create(null);\r\n\r\n    for (const prop in props)\r\n    {\r\n      if (props[prop])\r\n      {\r\n        out[prop] = props[prop].random(rnd);\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return objectMap(json, (value, key) => {\r\n      const propType = this.options.props[key];\r\n\r\n      return propType ? propType.fromJson(value) : value;\r\n    });\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return objectMap(value, (subvalue, key) => {\r\n      const propType = this.options.props[key];\r\n      \r\n      return propType ? propType.toJson(subvalue) : subvalue;\r\n    });\r\n  }\r\n\r\n  public getWildcardType(): Type | null\r\n  {\r\n    return this.options.props[ObjectType.wilcardProperty] || null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { ObjectType } from './Object';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class EntityType extends Type<string>\r\n{\r\n\r\n  public static STEP_ENTITY = 'entity';\r\n\r\n  public static id = ID.Entity;\r\n\r\n  public static operations = EntityOperations;\r\n\r\n  public static computeds = EntityComputeds;\r\n\r\n  public static baseType = new EntityType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): EntityType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new EntityType( type, types );\r\n  }\r\n\r\n  public static encode(type: EntityType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(name: string, provider: TypeProvider): EntityType\r\n  {\r\n    return new EntityType(name, provider);\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    return this.provider\r\n      ? this.provider.getType(this.options, NullType.baseType)\r\n      : ObjectType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EntityType.id;\r\n  }\r\n\r\n  public merge(type: EntityType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n    // return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof EntityType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EntityType.STEP_ENTITY\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === aliased\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EntityType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EntityType } from '../types/Entity';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetEntityExpression extends Expression \r\n{\r\n\r\n  public static id = 'entity';\r\n\r\n  public static readonly instance = new GetEntityExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetEntityExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetEntityExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetEntityExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetEntityExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EntityType(this.name, def);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getEntity(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false; \r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetRelationExpression extends Expression \r\n{\r\n\r\n  public static id = 'relation';\r\n\r\n  public static readonly instance = new GetRelationExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetRelationExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetRelationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetRelationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetRelationExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EnumType({\r\n      key: TextType.baseType,\r\n      value: TextType.baseType,\r\n      constants: new Map([\r\n        ['relation', this.name],\r\n      ])\r\n    });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getRelation(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    return false; \r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { NoExpression } from './No';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_CASES = 1;\r\nconst INDEX_OTHERWISE = 2;\r\n\r\nexport class IfExpression extends Expression \r\n{\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_IF = 'if';\r\n\r\n  public static STEP_THEN = 'then';\r\n\r\n  public static STEP_ELSE = 'else';\r\n\r\n  public static id = 'if';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \r\n  {\r\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\r\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\r\n\r\n    return new IfExpression(cases, otherwise);\r\n  }\r\n\r\n  public static encode(expr: IfExpression): any \r\n  {\r\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.otherwise, undefined)\r\n      ? [this.id, cases]\r\n      : [this.id, cases, expr.otherwise.encode()];\r\n  }\r\n\r\n  public cases: [Expression, Expression][];\r\n  public otherwise: Expression;\r\n\r\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \r\n  {\r\n    super();\r\n    this.cases = cases;\r\n    this.otherwise = otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return IfExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [test, result]) => Math.max(\r\n        max, \r\n        test.getComplexity(def, context),\r\n        result.getComplexity(def, context)\r\n      ), \r\n      this.otherwise.getComplexity(def, context)\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return IfExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([test, value]) => value)\r\n      .concat(this.otherwise)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(IfExpression.STEP_CASES, () => \r\n        this.cases.forEach(([condition, result], index) => \r\n          traverse.step(index, () => {\r\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\r\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\r\n          })\r\n        )\r\n      );\r\n      if (this.otherwise !== NoExpression.instance) {\r\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\r\n      }\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === IfExpression.STEP_CASES\r\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n        ? steps[2] === IfExpression.STEP_IF\r\n          ? [3, this.cases[steps[1]][0]]\r\n          : steps[2] === IfExpression.STEP_THEN\r\n            ? [3, this.cases[steps[1]][1]]\r\n            : null\r\n        : null\r\n      : steps[0] === IfExpression.STEP_ELSE\r\n        ? [1, this.otherwise]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.cases.forEach(([condition, result]) => {\r\n      condition.setParent(this);\r\n      result.setParent(this);\r\n    });\r\n\r\n    this.otherwise.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.cases.forEach(([condition, result]) => \r\n    {\r\n      this.validateType(def, context, expectedType, condition, handler);\r\n      \r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.otherwise.validate(def, context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const [condition, result] of this.cases)\r\n    {\r\n      if (condition.mutates(def, arg, directly) || result.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return this.otherwise.mutates(def, arg, directly);\r\n  }\r\n\r\n  public if(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(body: Expression)\r\n  {\r\n    this.cases[this.cases.length - 1][1] = body;\r\n\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public elseif(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public else(body: Expression)\r\n  {\r\n    this.otherwise = body;\r\n    this.otherwise.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_ARGS = 2;\r\n\r\nexport class InvokeExpression extends Expression \r\n{\r\n\r\n  public static id = 'invoke';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new InvokeExpression(name, args);\r\n  }\r\n\r\n  public static encode(expr: InvokeExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.name, args];\r\n  }\r\n\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return InvokeExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return func.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return InvokeExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    return func\r\n      ? func.getReturnType(def, argTypes)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args ,arg))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    \r\n    if (!func) \r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_FUNCTION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      const params: TypeMap = {};\r\n\r\n      objectEach(func.params.options.props, (param, paramName) =>\r\n      {\r\n        const arg = this.args[paramName];\r\n\r\n        this.validateType(def, context, param, arg, handler);\r\n\r\n        if (arg)\r\n        {\r\n          params[paramName] = arg.getType(def, context);\r\n        }\r\n      });\r\n\r\n      // func.options.expression.validate(def, Types.object(params), handler);\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const argName in this.args)\r\n    {\r\n      const argType = this.args[argName];\r\n\r\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && func.mutates(def, argName)))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false; \r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return `Function \"${this.name}\" does not exist`;\r\n    }\r\n\r\n    return func.expression;\r\n  }\r\n\r\n  public named(name: string): InvokeExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): InvokeExpression\r\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { EntityType } from '../types/Entity';\r\nimport { DataTypes } from '../DataTypes';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_ENTITY = 1;\r\nconst INDEX_NAME = 2;\r\nconst INDEX_ARGS = 3;\r\n\r\nexport class MethodExpression extends Expression \r\n{\r\n\r\n  public static id = 'method';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \r\n  {\r\n    const entity = data[INDEX_ENTITY];\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new MethodExpression(entity, name, args);\r\n  }\r\n\r\n  public static encode(expr: MethodExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.entity, expr.name, args];\r\n  }\r\n\r\n  public entity: string;\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(entity: string, name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.entity = entity;\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MethodExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity || !entity.methods[this.name])\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return entity.methods[this.name].expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MethodExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return null;\r\n    }\r\n    \r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    argTypes[Expression.INSTANCE] = entity.type;\r\n    \r\n    return method.getReturnType(def, argTypes);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args, arg))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_THIS,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_METHOD,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const params: TypeMap = {};\r\n\r\n    params[Expression.INSTANCE] = entity.type;\r\n\r\n    objectEach(method.params.options.props, (param, paramName) =>\r\n    {\r\n      const arg = this.args[paramName];\r\n\r\n      this.validateType(def, context, param, arg, handler);\r\n\r\n      if (arg)\r\n      {\r\n        params[paramName] = arg.getType(def, context);\r\n      }\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const argName in this.args)\r\n    {\r\n      const argType = this.args[argName];\r\n\r\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && method.mutates(def, argName)))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return `Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    return method.expression;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public named(name: string): MethodExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): MethodExpression\r\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class OrExpression extends Expression \r\n{\r\n\r\n  public static id = 'or';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new OrExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: OrExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OrExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OrExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OrExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types: Type[] = this.expressions\r\n      .map(e => e.getType(def, context))\r\n      .concat(BooleanType.baseType)\r\n      .filter(t => !!t)\r\n    ;\r\n    \r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)\r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Operation } from '../Operation';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { AndExpression } from './And';\r\nimport { OrExpression } from './Or';\r\nimport { NotExpression } from './Not';\r\nimport { DataTypes } from '../DataTypes';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_PARAMS = 2;\r\nconst INDEX_SCOPE = 3;\r\n\r\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \r\n{\r\n\r\n  public static id = 'op';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\r\n    \r\n    return new OperationExpression(name, params, scopeAlias);\r\n  }\r\n\r\n  public static encode(expr: OperationExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return isEmpty(expr.scopeAlias)\r\n      ? [this.id, expr.name, params]\r\n      : [this.id, expr.name, params, expr.scopeAlias]\r\n  }\r\n\r\n  public static create<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\r\n  }\r\n\r\n  public name: string;\r\n  public params: ExpressionMap;\r\n  public scopeAlias: Record<string, string>;\r\n\r\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.params = params;\r\n    this.scopeAlias = scopeAlias;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OperationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const op = def.getOperation(this.name);\r\n    let complexity = op ? op.complexity : 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OperationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const { name, params, scopeAlias } = this;\r\n    const operation = def.getOperation(name);\r\n    const operationTypes = def.getOperationTypes(name);\r\n\r\n    if (!operation)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_OPERATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\r\n    const scopeContext = operation.hasScope.length > 0\r\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\r\n      : context;\r\n\r\n    for (const paramName in expectedTypes)\r\n    {\r\n      const optional = operation.optional.indexOf(paramName) !== -1;\r\n      const expectedRequired = expectedTypes[paramName];\r\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\r\n      const subject = params[paramName];\r\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n      const paramContext = hasScope ? scopeContext : context;\r\n      \r\n      this.validateType(def, paramContext, expected, subject, handler);\r\n    }\r\n\r\n    for (const paramName in params)\r\n    {\r\n      const subject = params[paramName];\r\n      const operationType = operationTypes.params[paramName];\r\n\r\n      if (!(paramName in expectedTypes) && operationType)\r\n      {\r\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n        const paramContext = hasScope ? scopeContext : context;\r\n\r\n        handler({\r\n          type: ValidationType.MISSING_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context: paramContext,\r\n          subject,\r\n          parent: this,\r\n        });\r\n\r\n        params[paramName].validate(def, paramContext, handler);\r\n      }\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    const { name, params } = this;\r\n    const operation = def.getOperation(name);\r\n\r\n    if (!operation)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const paramName in params)\r\n    {\r\n      const paramType = params[paramName];\r\n\r\n      if (paramType.mutates(def, arg, directly) || (paramType instanceof PathExpression && paramType.isMutating(arg, true) && operation.mutates.indexOf(paramName) !== -1))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\r\n  {\r\n    const param = Exprs.parse(value);\r\n\r\n    this.params[name] = param;\r\n    param.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\r\n  {\r\n    this.scopeAlias[scoped] = alias;\r\n\r\n    return this;\r\n  }\r\n\r\n  public and(exprs: Expression | Expression[]): AndExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new AndExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public or(exprs: Expression | Expression[]): OrExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new OrExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public not(): NotExpression\r\n  {\r\n    return new NotExpression(this);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\n\r\nexport class ReturnExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'return';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    \r\n    return new ReturnExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ReturnExpression): any \r\n  {\r\n    const returnValue = expr.value.encode();\r\n\r\n    return returnValue !== undefined\r\n      ? [this.id, returnValue]\r\n      : [this.id];\r\n  }\r\n\r\n  public value: Expression;\r\n\r\n  public constructor(value: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReturnExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.value.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReturnExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ReturnExpression(this.value.encode());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.value \r\n      ? this.value.getType(def, context)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ReturnExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.value.mutates(def, arg, directly);\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\n\r\nexport class SetExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'set';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n\r\n    return new SetExpression(path, value);\r\n  }\r\n\r\n  public static encode(expr: SetExpression): any \r\n  {\r\n    return [this.id, expr.path.encode(), expr.value.encode()];\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue)\r\n  {\r\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n\r\n  public constructor(path: PathExpression, value: Expression) \r\n  {\r\n    super();\r\n\r\n    this.path = path;\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SetExpression(this.path.clone(), this.value.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\r\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SetExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === SetExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      this.validateType(def, context, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public to(value: ExpressionValue): SetExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.path.isMutating(arg, directly) || \r\n      this.value.mutates(def, arg, directly) || \r\n      this.path.mutates(def, arg, directly);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { Operation } from '../Operation';\r\nimport { NoExpression } from './No';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_OP = 2;\r\nconst INDEX_CASES = 3;\r\nconst INDEX_DEFAULT_CASE = 4;\r\n\r\nexport class SwitchExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_CASE = 'case';\r\n\r\n  public static STEP_RESULT = 'result';\r\n\r\n  public static STEP_DEFAULT = 'default';\r\n\r\n  public static id = 'switch';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const op = data[INDEX_OP];\r\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\r\n      tests.map((t: any) => exprs.getExpression(t)), \r\n      exprs.getExpression(result)\r\n    ]);\r\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\r\n\r\n    return new SwitchExpression(value, op, cases, defaultCase);\r\n  }\r\n\r\n  public static encode(expr: SwitchExpression): any \r\n  {\r\n    const value = expr.value.encode();\r\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.defaultCase, undefined)\r\n      ? [this.id, value, expr.op, cases]\r\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\r\n  }\r\n\r\n  public value: Expression;\r\n  public op: string;\r\n  public cases: [Expression[], Expression][];\r\n  public defaultCase: Expression;\r\n\r\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n    this.op = op;\r\n    this.cases = cases;\r\n    this.defaultCase = defaultCase;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SwitchExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [tests, result]) => Math.max(\r\n        max, \r\n        result.getComplexity(def, context), \r\n        tests.reduce((tmax, t) => Math.max(\r\n          tmax, \r\n          t.getComplexity(def, context)\r\n        ), 0)\r\n      ), \r\n      Math.max(\r\n        this.value.getComplexity(def, context), \r\n        this.defaultCase.getComplexity(def, context)\r\n      )\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SwitchExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([tests, value]) => value)\r\n      .concat(this.defaultCase)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n      traverse.step(SwitchExpression.STEP_CASES, () => \r\n        this.cases.forEach(([tests, result], caseIndex) =>\r\n          traverse.step(caseIndex, () => {\r\n            traverse.step(SwitchExpression.STEP_CASE, () => \r\n              tests.forEach((test, index) => \r\n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\r\n              )\r\n            );\r\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\r\n          })  \r\n        )\r\n      );\r\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SwitchExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : steps[0] === SwitchExpression.STEP_CASES\r\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n          ? steps[2] === SwitchExpression.STEP_CASE\r\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\r\n              ? [4, this.cases[steps[1]][0][steps[3]]]\r\n              : null\r\n            : steps[2] === SwitchExpression.STEP_RESULT\r\n              ? [3, this.cases[steps[1]][1]]\r\n              : null\r\n            : null\r\n        : steps[0] === SwitchExpression.STEP_DEFAULT\r\n          ? [1, this.defaultCase]\r\n          : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n    this.cases.forEach(([tests, result]) => {\r\n      tests.forEach(e => e.setParent(this));\r\n      result.setParent(this);\r\n    });\r\n    this.defaultCase.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n\r\n    this.cases.forEach(([tests, result]) => \r\n    {\r\n      tests.forEach(e => e.validate(def, context, handler));\r\n\r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.defaultCase.validate(def, context, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    if (this.value.mutates(def, arg, directly))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    for (const [tests, result] of this.cases)\r\n    {\r\n      if (result.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n\r\n      for (const test of tests)\r\n      {\r\n        if (test.mutates(def, arg, directly))\r\n        {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.defaultCase.mutates(def, arg, directly);\r\n  }\r\n\r\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.op = op ? op.id : this.op;\r\n\r\n    return this;\r\n  }\r\n\r\n  public case(testValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const n = this.cases.length - 1;\r\n    const test = Exprs.parse(testValue);\r\n\r\n    test.setParent(this);\r\n\r\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\r\n    {\r\n      this.cases[n][0].push(test);\r\n    }\r\n    else\r\n    {\r\n      this.cases.push([[test], NoExpression.instance]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(bodyValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const body = Exprs.parse(bodyValue);\r\n\r\n    this.cases[this.cases.length - 1][1] = body;\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public default(body: ExpressionValue)\r\n  {\r\n    this.defaultCase = Exprs.parse(body);\r\n    this.defaultCase.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { TextType } from '../types/Text';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_TEMPLATE = 1;\r\nconst INDEX_PARAMS = 2;\r\n\r\nexport class TemplateExpression extends Expression \r\n{\r\n\r\n  public static id = 'tmpl';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \r\n  {\r\n    const template = data[INDEX_TEMPLATE];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    \r\n    return new TemplateExpression(template, params);\r\n  }\r\n\r\n  public static encode(expr: TemplateExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return [this.id, expr.template, params];\r\n  }\r\n\r\n  public template: string;\r\n  public params: ExpressionMap;\r\n\r\n  public constructor(template: string, params: ExpressionMap) \r\n  {\r\n    super();\r\n    this.template = template;\r\n    this.params = params;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TemplateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    let complexity = 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TemplateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return TextType.baseType.newInstance();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.params, subject =>\r\n    {\r\n      this.validateType(def, context, TextType.baseType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const param in this.params)\r\n    {\r\n      if (this.params[param].mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public param(name: string, value: ExpressionValue): TemplateExpression\r\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\r\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\r\n  {\r\n    const append = isString(nameOrParams)\r\n      ? { [nameOrParams]: value }\r\n      : nameOrParams;\r\n\r\n    for (const paramName in append)\r\n    {\r\n      const param = Exprs.parse(append[paramName]);\r\n      this.params[paramName] = param;\r\n      param.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyType } from '../types/Any';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst DEFAULT_CURRENT = 'current';\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CURRENT = 3;\r\n\r\nexport class UpdateExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'up';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \r\n\r\n    return new UpdateExpression(path, value, currentVariable);\r\n  }\r\n\r\n  public static encode(expr: UpdateExpression): any \r\n  {\r\n    const path = expr.path.encode();\r\n    const value = expr.value.encode();\r\n\r\n    return expr.currentVariable === DEFAULT_CURRENT\r\n      ? [this.id, path, value]\r\n      : [this.id, path, value, expr.currentVariable]\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\r\n  {\r\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n  public currentVariable: string;\r\n\r\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \r\n  {\r\n    super();\r\n    this.path = path;\r\n    this.value = value;\r\n    this.currentVariable = currentVariable;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return UpdateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.currentVariable]: AnyType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return UpdateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\r\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === UpdateExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === UpdateExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      const valueContext = def.getContext(context, {\r\n        [this.currentVariable]: expectedType,\r\n      });\r\n\r\n      this.validateType(def, valueContext, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.path.isMutating(arg, directly) || this.value.mutates(def, arg, directly) || this.path.mutates(def, arg, directly);\r\n  }\r\n\r\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.currentVariable = currentVariable || this.currentVariable;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string): UpdateExpression\r\n  {\r\n    this.currentVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class WhileExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'while';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new WhileExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: WhileExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n    \r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return WhileExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return WhileExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === WhileExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === WhileExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    return this.condition.mutates(def, arg, directly) || \r\n      this.body.mutates(def, arg, directly);\r\n  }\r\n\r\n  public while(condition: Expression)\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public do(body: Expression)\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\r\n\r\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\r\n\r\nconst ops = TupleOperations;\r\n\r\nexport const TupleOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  get: ops.set('get', {}, ['value', 'index']),\r\n\r\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\r\n\r\n  // Comparisons\r\n  \r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTupleComputeds.set('copy', TupleOps.copy);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\r\n\r\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\r\n\r\nconst ops = NumberOperations;\r\n\r\nexport const NumberOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  pi: ops.set('pi'),\r\n\r\n  pi2: ops.set('2pi'),\r\n\r\n  piHalf: ops.set('hpi'),\r\n\r\n  e: ops.set('e'),\r\n\r\n  sqrt2: ops.set('sqrt2'),\r\n\r\n  sqrt12: ops.set('sqrt1/2'),\r\n\r\n  ln2: ops.set('ln2'),\r\n\r\n  ln10: ops.set('ln10'),\r\n\r\n  log2e: ops.set('log2e'),\r\n\r\n  log10e: ops.set('log10e'),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.set('+', {}, ['value', 'addend']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor']),\r\n\r\n  min: ops.set('min', {}, ['a', 'b']),\r\n\r\n  max: ops.set('max', {}, ['a', 'b']),\r\n  \r\n  pow: ops.set('^^', {}, ['value', 'exponent']),\r\n  \r\n  atan2: ops.set('atan2', {}, ['x', 'y']),\r\n  \r\n  hypot: ops.set('hyp', {}, ['a', 'b']),\r\n  \r\n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\r\n  \r\n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\r\n\r\n  bitAnd: ops.set('&', {}, ['a', 'b']),\r\n\r\n  bitOr: ops.set('|', {}, ['a', 'b']),\r\n\r\n  bitXor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  sqrt: ops.set('sqrt', {}, ['value']),\r\n\r\n  sq: ops.set('^2', {}, ['value']),\r\n  \r\n  cbrt: ops.set('cbrt', {}, ['value']),\r\n  \r\n  floor: ops.set('floor', {}, ['value']),\r\n  \r\n  ceil: ops.set('ceil', {}, ['value']),\r\n  \r\n  up: ops.set('up', {}, ['value']),\r\n  \r\n  down: ops.set('down', {}, ['value']),\r\n  \r\n  round: ops.set('round', {}, ['value']),\r\n  \r\n  abs: ops.set('abs', {}, ['value']),\r\n  \r\n  neg: ops.set('neg', {}, ['value']),\r\n  \r\n  sign: ops.set('sign', {}, ['value']),\r\n  \r\n  log: ops.set('log', {}, ['value']),\r\n  \r\n  sin: ops.set('sin', {}, ['value']),\r\n  \r\n  cos: ops.set('cos', {}, ['value']),\r\n  \r\n  tan: ops.set('tan', {}, ['value']),\r\n  \r\n  sinh: ops.set('sinh', {}, ['value']),\r\n  \r\n  cosh: ops.set('cosh', {}, ['value']),\r\n\r\n  asin: ops.set('asin', {}, ['value']),\r\n  \r\n  acos: ops.set('acos', {}, ['value']),\r\n  \r\n  atan: ops.set('atan', {}, ['value']),\r\n  \r\n  factorial: ops.set('!', {}, ['value']),\r\n\r\n  bitFlip: ops.set('~', {}, ['value']),\r\n\r\n  // Other\r\n\r\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\r\n\r\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\r\n\r\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\r\n\r\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\r\n\r\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\r\n\r\n  fromPercent: ops.set('fromPercent', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\r\n\r\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\r\n\r\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\r\n\r\n  isPositive: ops.set('+?', {}, ['value']),\r\n\r\n  isNegative: ops.set('-?', {}, ['value']),\r\n\r\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\r\n\r\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nNumberComputeds.set('floor', NumberOps.floor);\r\nNumberComputeds.set('ceil', NumberOps.ceil);\r\nNumberComputeds.set('up', NumberOps.up);\r\nNumberComputeds.set('down', NumberOps.down);\r\nNumberComputeds.set('round', NumberOps.round);\r\nNumberComputeds.set('abs', NumberOps.abs);\r\nNumberComputeds.set('negate', NumberOps.neg);\r\nNumberComputeds.set('sign', NumberOps.sign);\r\nNumberComputeds.set('isZero', NumberOps.isZero);\r\nNumberComputeds.set('isWhole', NumberOps.isWhole);\r\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\r\nNumberComputeds.set('isPositive', NumberOps.isPositive);\r\nNumberComputeds.set('isNegative', NumberOps.isNegative);\r\nNumberComputeds.set('toText', NumberOps.toText);","\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\nimport { ID } from '../types/ID';\r\n\r\n\r\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\r\n\r\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\r\n\r\nconst ops = ListOperations;\r\n\r\nexport const ListOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\r\n\r\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\r\n\r\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\r\n\r\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\r\n\r\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\r\n\r\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\r\n\r\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\r\n\r\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\r\n\r\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\r\n\r\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\r\n\r\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\r\n\r\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\r\n\r\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\r\n\r\n  count: ops.set('count', {}, ['list']),\r\n\r\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\r\n\r\n  // Iteration\r\n\r\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\r\n\r\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\r\n\r\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\r\n\r\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\r\n\r\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\r\n\r\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\r\n\r\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\r\n\r\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['list']),\r\n\r\n  isNotEmpty: ops.set('!0', {}, ['list']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n  \r\n};\r\n\r\nListComputeds.set('copy', ListOps.copy);\r\nListComputeds.set('reversed', ListOps.reverse);\r\nListComputeds.set('shuffled', ListOps.shuffle);\r\nListComputeds.set('first', ListOps.first);\r\nListComputeds.set('last', ListOps.last);\r\nListComputeds.set('random', ListOps.random);\r\nListComputeds.set('isEmpty', ListOps.isEmpty);\r\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\r\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { NumberType } from './Number';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from './Tuple';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_ITEM = 1;\r\nconst INDEX_OPTIONS = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\nconst REQUIRED_SUB_MIN = 10;\r\n\r\nexport interface ListOptions \r\n{\r\n  item: Type;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport class ListType extends Type<ListOptions> \r\n{\r\n\r\n  public static STEP_ITEM = 'item';\r\n\r\n  public static id = ID.List;\r\n\r\n  public static operations = ListOperations;\r\n\r\n  public static computeds = ListComputeds;\r\n\r\n  public static baseType = new ListType({ item: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ListType \r\n  {\r\n    const item = types.getType(data[INDEX_ITEM]);\r\n    const options = data[INDEX_OPTIONS] || {};\r\n\r\n    return new ListType({ item, ...options });\r\n  }\r\n\r\n  public static encode(type: ListType): any \r\n  {\r\n    const options: any = { ...type.options };\r\n    const item = options.item;\r\n    delete options.item;\r\n\r\n    return isEmpty(options)\r\n      ? [this.id, item.encode()]\r\n      : [this.id, item.encode(), options];\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isArray(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const type = new ListType({\r\n      item: AnyType.baseType,\r\n      min: data.length,\r\n      max: data.length\r\n    });\r\n\r\n    cache.set(data, type);\r\n\r\n    let item = describer.describe(data[0]);\r\n\r\n    for (let i = 1; i < data.length; i++)\r\n    {\r\n      item = describer.merge(item, data[i]);\r\n    }\r\n\r\n    type.options.item = item;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 8;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      toJson: (json, writer) => {\r\n        if (isArray(json)) {\r\n          return json.map(writer);\r\n        }\r\n      },\r\n      fromJson: (json, reader) => {\r\n        if (isArray(json)) {\r\n          return json.map(reader);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isArray(a);\r\n        const bt = isArray(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (at) {\r\n          let dl = a.length - b.length;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            for (let i = 0; i < a.length; i++) {\r\n              const c = compare(a[i], b[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isArray(a);\r\n        const bl = isArray(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (al)\r\n        {\r\n          if (a.length !== b.length)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (let i = 0; i < a.length; i++)\r\n          {\r\n            if (!equals(a[i], b[i]))\r\n            {\r\n              return false\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isArray(x)) {\r\n          const newArray: any[] = [];\r\n\r\n          setObjectCopy(x, newArray);\r\n\r\n          for (const item of x) {\r\n            newArray.push(copy(item));\r\n          }\r\n\r\n          return newArray;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<any[]>({\r\n      priority,\r\n      isValid: (value) => isArray(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\r\n    });\r\n  }\r\n\r\n  public static forItem(itemOrClass: TypeInput)\r\n  {\r\n    const item = Types.parse(itemOrClass);\r\n    \r\n    return new ListType({ item });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ListType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ListType.operations.map;\r\n  }\r\n\r\n  public merge(type: ListType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.item = Types.merge(o1.item, o2.item);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.max = Math.max(o1.max, o2.max);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return isNumber(this.options.min) && expr.value < this.options.min\r\n          ? this.options.item\r\n          : Types.optional(this.options.item);\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.optional(this.options.item);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\r\n          {\r\n            return this.options.item;\r\n          }\r\n\r\n          return Types.optional(this.options.item);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const { min, item } = this.options;\r\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\r\n    const required: TypeSub[] = [];\r\n\r\n    for (let i = 0; i < requiredMin; i++) {\r\n      required.push({ key: i, value: item });\r\n    }\r\n\r\n    return [\r\n      ...required,\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(item) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    if (!options.strict &&\r\n      !options.exact &&\r\n      other instanceof TupleType &&\r\n      !other.options.some(o => !item.isCompatible(o, options)))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof ListType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!item.isCompatible(other.options.item, options))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ListType.STEP_ITEM \r\n      ? this.options.item \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.item.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { item } = this.options;\r\n\r\n    item.removeDescribedRestrictions();\r\n\r\n    this.options = { item };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ListOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.get('value'),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.item.getCompareExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = item\r\n    return Exprs.op(ListOps.map, {\r\n      list: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      item: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!Array.isArray(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { item, min, max } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const val of value)\r\n    {\r\n      if (!item.isValid(val)) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isArray(value))\r\n    {\r\n      const item = this.options.item; \r\n\r\n      for (let i = 0; i < value.length; i++)\r\n      {\r\n        value[i] = item.normalize(value[i]);\r\n      }\r\n    }\r\n    \r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ListType\r\n  {\r\n    const { item } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): ListType\r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.clone(),\r\n      min,\r\n      max,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ListType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const start = Math.min(chosenMin, chosenMax);\r\n    const end = Math.max(chosenMin, chosenMax);\r\n    const n = rnd(start, end + 1, true);\r\n    const out: any[] = [];\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out.push(this.options.item.random(rnd));\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\r\nimport { NumberOps } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ListType } from './List';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\n\r\n\r\nconst INDEX_ELEMENTS = 1;\r\n\r\nexport class TupleType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Tuple;\r\n\r\n  public static operations = TupleOperations;\r\n\r\n  public static computeds = TupleComputeds;\r\n\r\n  public static baseType = new TupleType([]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): TupleType \r\n  {\r\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\r\n\r\n    return new TupleType(elements);\r\n  }\r\n\r\n  public static encode(type: TupleType): any \r\n  {\r\n    const elements = type.options.map(t => t.encode());\r\n\r\n    return [this.id, elements];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static forItem(types: TypeInput[])\r\n  {\r\n    return new TupleType(types.map((t) => Types.parse(t)));\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TupleType.operations.map;\r\n  }\r\n\r\n  public merge(type: TupleType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return this.options[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.mergeMany(this.options, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\r\n          \r\n          return Types.mergeMany(types, NullType.baseType);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      ...this.options.map((value, key) => ({ key, value })),\r\n      { key: 'length', value: Types.LENGTH },\r\n      {\r\n        key: new EnumType({\r\n          key: NumberType.baseType,\r\n          value: NumberType.baseType,\r\n          constants: new Map(\r\n            this.options.map((prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(this.options, NullType.baseType),\r\n      },\r\n      { \r\n        key: Types.INDEX, \r\n        value: Types.optional(\r\n          Types.mergeMany(this.options, NullType.baseType)\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.tuple(\r\n      ...this.options.map((t) => t.getCreateExpression())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs\r\n      .op(TupleOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      })\r\n      .and(this.options.map((t, i) => Exprs\r\n        .define({ value: Exprs.get('value', i) })\r\n        .run(t.getValidateExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(NumberOps.cmp, {\r\n        value: Exprs.get('value', 'length'),\r\n        test: Exprs.get('test', 'length'),\r\n      }),\r\n      ...this.options.map((t, i) => Exprs\r\n        .define({\r\n          value: Exprs.get('value', i),\r\n          test: Exprs.get('test', i),\r\n        })\r\n        .run(t.getCompareExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = element index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ListOps.insert, {\r\n          list: Exprs.get('value'),\r\n          index: to,\r\n          item: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ListOps.removeAt, {\r\n          list: Exprs.get('value'),\r\n          index: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!options.exact && \r\n      !options.strict && \r\n      other instanceof ListType && \r\n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\r\n      isNumber(other.options.min) &&\r\n      other.options.min >= this.options.length)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof TupleType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const a = this.options;\r\n    const b = other.options;\r\n\r\n    if (b.length < a.length || (options.exact && a.length !== b.length))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; i++)\r\n    {\r\n      if (!a[i].isCompatible(b[i], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      if (!elements[i].isValid(value[i]))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      value[i] = elements[i].normalize(value[i]);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TupleType\r\n  {\r\n    return new TupleType([]);\r\n  }\r\n\r\n  public clone(): TupleType\r\n  {\r\n    return new TupleType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return this.options.map(e => e.create());\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options.map(e => e.random(rnd));\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.fromJson(json[i]));\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.toJson(value[i]));\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from '../types/Tuple';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class TupleExpression extends Expression \r\n{\r\n\r\n  public static id = 'tuple';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new TupleExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: TupleExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.expressions.forEach(subject =>\r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const expr of this.expressions)\r\n    {\r\n      if (expr.mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { objectMap, objectReduce, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ObjectType } from '../types/Object';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport class ObjectExpression extends Expression \r\n{\r\n\r\n  public static id = 'obj';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\r\n    \r\n    return new ObjectExpression(props);\r\n  }\r\n\r\n  public static encode(expr: ObjectExpression): any \r\n  {\r\n    const props = objectMap(expr.props, e => e.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public props: ExpressionMap;\r\n\r\n  public constructor(props: ExpressionMap) \r\n  {\r\n    super();\r\n    this.props = props;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.props, (expr, prop) =>\r\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => DataTypes.objectRemove(this.props, prop))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.props\r\n      ? [1, this.props[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.props, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.props, e => e.validate(def, context, handler));\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    for (const prop in this.props)\r\n    {\r\n      if (this.props[prop].mutates(def, arg, directly))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\r\nimport { NotExpression } from './exprs/Not';\r\nimport { AndExpression } from './exprs/And';\r\nimport { NoExpression } from './exprs/No';\r\nimport { DefineExpression } from './exprs/Define';\r\nimport { DoExpression } from './exprs/Do';\r\nimport { ChainExpression } from './exprs/Chain';\r\nimport { CommentExpression } from './exprs/Comment';\r\nimport { ComputedExpression } from './exprs/Computed';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { ForExpression } from './exprs/For';\r\nimport { GetExpression } from './exprs/Get';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { IfExpression } from './exprs/If';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { OperationExpression } from './exprs/Operation';\r\nimport { Operation } from './Operation';\r\nimport { OrExpression } from './exprs/Or';\r\nimport { PathExpression } from './exprs/Path';\r\nimport { ReturnExpression } from './exprs/Return';\r\nimport { SetExpression } from './exprs/Set';\r\nimport { SwitchExpression } from './exprs/Switch';\r\nimport { TemplateExpression } from './exprs/Template';\r\nimport { UpdateExpression } from './exprs/Update';\r\nimport { WhileExpression } from './exprs/While';\r\nimport { TupleExpression } from './exprs/Tuple';\r\nimport { ObjectExpression } from './exprs/Object';\r\nimport { isArray, isObject, objectMap } from './fns';\r\nimport { Type } from './Type';\r\n\r\n\r\nexport class Exprs\r\n{\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      expr.setParent();\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  public static parse(values: ExpressionValue[]): Expression[]\r\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\r\n  public static parse(value: ExpressionValue): Expression\r\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\r\n  {\r\n    return isArray(value)\r\n      ? value.map((v) => this.parse(v))\r\n      : value instanceof Expression \r\n        ? value\r\n        : isObject(value)\r\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\r\n          : new ConstantExpression(value);\r\n  }\r\n\r\n  public static cast(valueType: Type, targetType: Type): Expression;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\r\n  {\r\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\r\n    const op = valueType.getOperations()[opId];\r\n\r\n    return op\r\n      ? this.op(op, { value: this.get('value') })\r\n      : createOnMissing\r\n        ? this.setParent(targetType.getCreateExpression())\r\n        : null as unknown as Expression;\r\n  }\r\n\r\n  public static and(...exprs: Expression[]): AndExpression\r\n  {\r\n    return this.setParent(new AndExpression(exprs));\r\n  }\r\n\r\n  public static body(...exprs: Expression[]): ChainExpression\r\n  {\r\n    return this.setParent(new ChainExpression(exprs));\r\n  }\r\n\r\n  public static const(value: any): ConstantExpression\r\n  {\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\r\n  {\r\n    return this.setParent(new DefineExpression([], body).with(vars));\r\n  }\r\n\r\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\r\n  {\r\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\r\n  {\r\n    return path.length === 0\r\n      ? new GetExpression()\r\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\r\n  }\r\n\r\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\r\n  }\r\n\r\n  public static computed(name: string): ComputedExpression\r\n  {\r\n    return this.setParent(new ComputedExpression(name));\r\n  }\r\n\r\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\r\n  {\r\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\r\n  }\r\n\r\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\r\n  }\r\n\r\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\r\n  }\r\n\r\n  public static noop(): NoExpression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public static not(expr: Expression): NotExpression\r\n  {\r\n    return this.setParent(new NotExpression(expr));\r\n  }\r\n\r\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\r\n  {\r\n    return this.setParent(new ObjectExpression(this.parse(props)));\r\n  }\r\n\r\n  public static op<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\r\n  }\r\n\r\n  public static or(...exprs: Expression[]): OrExpression\r\n  {\r\n    return this.setParent(new OrExpression(exprs));\r\n  }\r\n\r\n  public static path(...exprs: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\r\n      ? exprs[0]\r\n      : new PathExpression(this.parse(exprs)));\r\n  }\r\n\r\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\r\n  {\r\n    return this.setParent(new ReturnExpression(this.parse(value)));\r\n  }\r\n\r\n  public static set(...path: ExpressionValue[]): SetExpression\r\n  {\r\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\r\n  {\r\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\r\n  }\r\n\r\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\r\n  {\r\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\r\n  }\r\n\r\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\r\n  {\r\n    return this.setParent(new TupleExpression(this.parse(elements)));\r\n  }\r\n\r\n  public static update(...path: ExpressionValue[]): UpdateExpression\r\n  {\r\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\r\n  {\r\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static undefined()\r\n  {\r\n    return this.const(undefined);\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return this.const(null);\r\n  }\r\n\r\n  public static true()\r\n  {\r\n    return this.const(true);\r\n  }\r\n\r\n  public static false()\r\n  {\r\n    return this.const(false);\r\n  }\r\n\r\n  public static zero()\r\n  {\r\n    return this.const(0);\r\n  }\r\n\r\n  public static one()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareEqual()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareLess()\r\n  {\r\n    return this.const(-1);\r\n  }\r\n\r\n  public static compareGreater()\r\n  {\r\n    return this.const(+1);\r\n  }\r\n\r\n  public static string()\r\n  {\r\n    return this.const('');\r\n  }\r\n\r\n  public static comment(comment: string)\r\n  {\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static entity(name: string)\r\n  {\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static relation(name: string)\r\n  {\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static data(name: string)\r\n  {\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n}","\r\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\r\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 0;\r\nconst RANDOM_MAX = 10;\r\n\r\nexport interface NumberOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  whole?: boolean;\r\n}\r\n\r\nexport class NumberType extends Type<NumberOptions> \r\n{\r\n\r\n  public static WHOLE_EPSILON = 0.000001;\r\n\r\n  public static id = ID.Number;\r\n\r\n  public static operations = NumberOperations;\r\n\r\n  public static computeds = NumberComputeds;\r\n\r\n  public static baseType = new NumberType({});\r\n\r\n  public static decode(data: any[]): NumberType \r\n  {\r\n    return new NumberType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: NumberType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isNumber(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new NumberType({\r\n      min: data,\r\n      max: data,\r\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static EQUALS_EPSILON = 0.000001;\r\n\r\n  public static COMPARES_EPSILON = 0.000001;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'number';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a < b\r\n          ? (b - a) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : -1\r\n          : (a - b) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : 1;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type: 'bigint',\r\n      compare: (a, b) => {\r\n        return a - b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type: 'bigint',\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NumberType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NumberType.operations.map;\r\n  }\r\n\r\n  public merge(type: NumberType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.whole = o1.whole && o2.whole;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof NumberType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isNumber(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, whole } = this.options;\r\n\r\n    if (isNumber(min) && value < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (whole && !isWhole(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NumberType\r\n  {\r\n    return new NumberType({});\r\n  }\r\n\r\n  public clone(): NumberType\r\n  {\r\n    return new NumberType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NumberType.encode(this);\r\n  }\r\n\r\n  public create(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, whole } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n\r\n    return rnd(chosenMin, chosenMax, whole);\r\n  }\r\n\r\n  public fromJson(json: number): number\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: number): number\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\n\r\nconst MAP: string[] = [\r\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\r\n];\r\n\r\n\r\nexport const en: LocaleOptions = \r\n{\r\n  weekStartsOn: 0,\r\n  firstWeekContainsDate: 4,\r\n\r\n  am: 'am',\r\n  pm: 'pm',\r\n\r\n  formatLT: 'h:mm A',\r\n  formatLTS: 'h:mm:ss A',\r\n  formatL: 'MM/DD/Y',\r\n  formatl: 'M/D/Y',\r\n  formatLL: 'MMMM D, Y',\r\n  formatll: 'MMM D, Y',\r\n  formatLLL: 'MMMM D, Y h:mm A',\r\n  formatlll: 'MMM D, Y h:mm A',\r\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\r\n  formatllll: 'ddd, MMM D, Y h:mm A',\r\n\r\n  suffix: (value: number) => \r\n  {\r\n    const TH_SPECIAL_MIN = 11;\r\n    const TH_SPECIAL_MAX = 13;\r\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\r\n\r\n    return value + suffix;\r\n  },\r\n\r\n  list: (items) => \r\n  {\r\n    const last: number = items.length - 1;\r\n    let out: string = items[0];\r\n\r\n    for (let i = 1; i < last; i++) \r\n    {\r\n      out += ', ' + items[i];\r\n    }\r\n\r\n    if (last > 0) {\r\n      out += ' and ' + items[last];\r\n    }\r\n\r\n    return out;\r\n  },\r\n\r\n  months: [\r\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\r\n  ],\r\n\r\n  weekdays: [\r\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\r\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\r\n  ],\r\n\r\n};\r\n","\r\nimport { en } from './en';\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\nexport let currentLocale: LocaleOptions = en;","\r\n\r\n/**\r\n * The number of milliseconds in a second.\r\n */\r\nexport const MILLIS_IN_SECOND: number = 1000;\r\n\r\n/**\r\n * The number of seconds in a minute.\r\n */\r\nexport const SECONDS_IN_MINUTE: number = 60;\r\n\r\n/**\r\n * The number of hours in a day (not including DST days).\r\n */\r\nexport const HOURS_IN_DAY: number = 24;\r\n\r\n/**\r\n * The number of days in a week.\r\n */\r\nexport const DAYS_IN_WEEK: number = 7;\r\n\r\n/**\r\n * The number of milliseconds in a minute.\r\n */\r\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in an hour.\r\n */\r\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in a day (not including DST days).\r\n */\r\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\r\n\r\n/**\r\n * The number of months in a quarter.\r\n */\r\nexport const MONTHS_IN_QUARTER = 3;\r\n\r\n/**\r\n * The number of months in a year.\r\n */\r\nexport const MONTHS_IN_YEAR: number = 12;\r\n\r\n/**\r\n * The first day of a month.\r\n */\r\nexport const DAY_MIN: number = 1;\r\n\r\n/**\r\n * The last day of the longest month.\r\n */\r\nexport const DAY_MAX: number = 31;\r\n\r\n/**\r\n * The last hour of the day.\r\n */\r\nexport const HOUR_MAX: number = 23;\r\n\r\n/**\r\n * The last minute of the hour.\r\n */\r\nexport const MINUTE_MAX: number = 59;\r\n\r\n/**\r\n * The last second of the minute.\r\n */\r\nexport const SECOND_MAX: number = 59;\r\n\r\n/**\r\n * The last millisecond of the second.\r\n */\r\nexport const MILLIS_MAX: number = 999;\r\n\r\n/**\r\n * The last day of the week.\r\n */\r\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\r\nimport { currentLocale } from '../../locales';\r\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\r\nimport { isDate, isNumber, isString } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport type Unit = \r\n  'millis' | \r\n  'second' | \r\n  'minute' | \r\n  'hour' | \r\n  'day' | \r\n  'week' | \r\n  'month' |\r\n  'quarter' |\r\n  'year';\r\n\r\nexport type UnitRecord<T> = Record<Unit, T>;\r\n\r\nexport type Adjuster = (value: number) => number;\r\n\r\nexport const adjusters: Record<string, Adjuster> = \r\n{\r\n  none:     (value) => value,\r\n  floor:    (value) => Math.floor(value),\r\n  ceil:     (value) => Math.ceil(value),\r\n  round:    (value) => Math.round(value),\r\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\r\n};\r\n\r\nexport type Getter = (x: Date) => number;\r\n\r\nexport const getters: Record<string, Getter> = \r\n{\r\n  timestamp:            d => d.valueOf(),\r\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\r\n  millis:               d => d.getMilliseconds(),\r\n  second:               d => d.getSeconds(),\r\n  minute:               d => d.getMinutes(),\r\n  hour:                 d => d.getHours(),\r\n  day:                  d => d.getDay(),\r\n  dayOfMonth:           d => d.getDate(),\r\n  lastDayOfMonth:       getLastDayOfMonth,\r\n  dayOfYear:            getDayOfYear,\r\n  dayOfWeek:            getDayOfWeek,\r\n  week:                 getWeekOfYear,\r\n  weekOfMonth:          getWeekOfMonthISO,\r\n  weekspanOfMonth:      getWeekspanOfMonth,\r\n  fullWeekOfMonth:      getFullWeekOfMonth,\r\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\r\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\r\n  weekOfYear:           getWeekOfYearISO,\r\n  weekspanOfYear:       getWeekspanOfYear,\r\n  fullWeekOfYear:       getFullWeekOfYear,\r\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\r\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\r\n  month:                d => d.getMonth(),\r\n  quarter:              getQuarter,\r\n  year:                 d => d.getFullYear(),\r\n  timeIdentifier:       getTimeIdentifier,\r\n  dayIdentifier:        getDayIdentifier,\r\n  weekIdentifier:       getWeekIdentifier,\r\n  monthIdentifier:      getMonthIdentifier,\r\n  quarterIdentifier:    getQuarterIdentifier,\r\n};\r\n\r\nexport type Setter = (x: Date, value: number) => void;\r\n\r\nexport const setters: Record<string, Setter> = \r\n{\r\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\r\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\r\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\r\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\r\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\r\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\r\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\r\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\r\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\r\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\r\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\r\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\r\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\r\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\r\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\r\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\r\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\r\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\r\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\r\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\r\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\r\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\r\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\r\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\r\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\r\n};\r\n\r\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const startOf: UnitRecord<Starter> = \r\n{\r\n  millis:   x => x,\r\n  second:   startOfSecond,\r\n  minute:   startOfMinute,\r\n  hour:     startOfHour,\r\n  day:      startOfDay,\r\n  week:     startOfWeek,\r\n  month:    startOfMonth,\r\n  quarter:  startOfQuarter,\r\n  year:     startOfYear,\r\n};\r\n\r\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const endOf: UnitRecord<Ender> = \r\n{\r\n  millis:   x => x,\r\n  second:   endOfSecond,\r\n  minute:   endOfMinute,\r\n  hour:     endOfHour,\r\n  day:      endOfDay,\r\n  week:     endOfWeek,\r\n  month:    endOfMonth,\r\n  quarter:  endOfQuarter,\r\n  year:     endOfYear,\r\n};\r\n\r\nexport type Adder = (x: Date, amount: number) => void;\r\n\r\nexport const add: UnitRecord<Adder> = \r\n{\r\n  millis:   addMilliseconds,\r\n  second:   addSeconds,\r\n  minute:   addMinutes,\r\n  hour:     addHours,\r\n  day:      addDays,\r\n  week:     addWeeks,\r\n  month:    addMonths,\r\n  quarter:  addQuarters,\r\n  year:     addYears,\r\n};\r\n\r\nexport type Differ = (a: Date, b: Date) => number;\r\n\r\nexport const diff: UnitRecord<Differ> = \r\n{\r\n  millis:   diffMilliseconds,\r\n  second:   diffSeconds,\r\n  minute:   diffMinutes,\r\n  hour:     diffHours,\r\n  day:      diffDays,\r\n  week:     diffWeeks,\r\n  month:    diffMonths,\r\n  quarter:  diffQuarters,\r\n  year:     diffYears,\r\n};\r\n\r\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\r\n{\r\n  const b = new Date(a.getTime());\r\n\r\n  mutator(b, options);\r\n\r\n  return b;\r\n}\r\n\r\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\r\n{\r\n  const starter = startOf[precision];\r\n  const x = mutate(a, starter, options);\r\n  const y = mutate(b, starter, options);\r\n\r\n  return x.getTime() - y.getTime();\r\n}\r\n\r\nexport type DateParserGroup = [number, number, number, number, number, number, number];\r\n\r\nexport const DateParsers: Array<{\r\n  pattern: RegExp;\r\n  groups: DateParserGroup;\r\n}> = [\r\n  { \r\n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [1, 2, 3, 5, 8, 10, 12 ],\r\n  },\r\n  { \r\n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [3, 1, 2, 5, 8, 10, 12 ],\r\n  }\r\n];\r\n\r\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\r\n{\r\n  if (isDate(value))\r\n  {\r\n    return value;\r\n  }\r\n\r\n  if (isNumber(value) && value > 0)\r\n  {\r\n    return new Date(value);\r\n  }\r\n\r\n  if (isString(value))\r\n  {\r\n    for (const parser of DateParsers)\r\n    {\r\n      const { pattern, groups } = parser;\r\n      const match = pattern.exec(value);\r\n\r\n      if (match) \r\n      {\r\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\r\n\r\n        for (let i = 0; i < times.length; i++) {\r\n          const x = parseInt(match[groups[i]]);\r\n          if (isFinite(x)) {\r\n            times[i] = i === 1 ? x - 1 : x;\r\n          }\r\n        }\r\n\r\n        return parseAsUTC\r\n          ? new Date(Date.UTC(...times))\r\n          : new Date(...times);\r\n      }\r\n    }\r\n\r\n    if (parseAsUTC)\r\n    {\r\n      const withUTC = value + ' UTC';\r\n      const parsedUTC = Date.parse(withUTC);\r\n\r\n      if (isFinite(parsedUTC))\r\n      {\r\n        return new Date(parsedUTC);\r\n      }\r\n    }\r\n\r\n    const parsed = Date.parse(value);\r\n\r\n    if (isFinite(parsed))\r\n    {\r\n      return new Date(parsed);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getTimeIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100000000\r\n       + (x.getMonth() + 1) * 1000000\r\n       + x.getDate() * 10000\r\n       + x.getHours() * 100\r\n       + x.getMinutes();\r\n}\r\n\r\nexport function getDayIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10000\r\n       + (x.getMonth() + 1) * 100\r\n       + x.getDate();\r\n}\r\n\r\nexport function getWeekIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 1000\r\n       + getWeekOfYear(x);\r\n}\r\n\r\nexport function getMonthIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100\r\n       + (x.getMonth() + 1);\r\n}\r\n\r\nexport function getQuarterIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10\r\n       + getQuarter(x);\r\n}\r\n\r\nexport function getLastDayOfMonth(x: Date): number\r\n{\r\n  return getDaysInMonth(x) - x.getDate() + 1;\r\n}\r\n\r\nexport function getLastWeekspanOfYear(x: Date): number\r\n{\r\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekspanOfYear(x: Date): number\r\n{\r\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\r\n}\r\n\r\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\r\n}\r\n\r\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const lastOfYear = mutate(x, endOfYear);\r\n  const week = getWeekOfYearISO(x, options);\r\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\r\n  const lastWeek = weekMax - week;\r\n\r\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \r\n    ? lastWeek + 1\r\n    : lastWeek;\r\n}\r\n\r\nexport function getWeekspanOfMonth(x: Date): number\r\n{\r\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getLastWeekspanOfMonth(x: Date): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\r\n  \r\n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { firstWeekContainsDate } = options;\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { weekStartsOn } = options;\r\n  const day = x.getDay();\r\n\r\n  return day < weekStartsOn \r\n    ? day - weekStartsOn + DAYS_IN_WEEK\r\n    : day - weekStartsOn;\r\n}\r\n\r\nexport function getDayOfYear(a: Date): number\r\n{\r\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\r\n}\r\n\r\nexport function getDateOffset(x: Date): number\r\n{\r\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\r\n}\r\n\r\nexport function isDaylightSavingTime(x: Date): boolean\r\n{\r\n  const offset = getDateOffset(x);\r\n\r\n  return (\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\r\n  );\r\n}\r\n\r\nexport function isLeapYear(x: Date): boolean\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\n\r\nexport function getDaysInYear(x: Date): number\r\n{\r\n  return isLeapYear(x) ? 366 : 365;\r\n}\r\n\r\nexport const daysInMonth = [\r\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n];\r\n\r\nexport function getDaysInMonth(x: Date): number\r\n{\r\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\r\n}\r\n\r\nexport function getAbsoluteTimestamp(a: Date): number\r\n{\r\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\r\n}\r\n\r\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\r\n{\r\n  const b = new Date(a.getTime());\r\n  const offsetMinutes = b.getTimezoneOffset();\r\n\r\n  b.setSeconds(0, 0);\r\n\r\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\r\n\r\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\r\n}\r\n\r\nexport function getQuarter(x: Date): number\r\n{\r\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function startOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(0);\r\n}\r\n\r\nexport function startOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(0, 0);\r\n}\r\n\r\nexport function startOfHour(x: Date): void\r\n{\r\n  x.setMinutes(0, 0, 0);\r\n}\r\n\r\nexport function startOfDay(x: Date): void\r\n{\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() - dayOfWeek);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfMonth(x: Date): void\r\n{\r\n  x.setDate(DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfYear(x: Date): void\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  x.setTime(0);\r\n  x.setFullYear(year, 0, 1);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function endOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(MILLIS_MAX);\r\n}\r\n\r\nexport function endOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfHour(x: Date): void\r\n{\r\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfDay(x: Date): void\r\n{\r\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfMonth(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfYear(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function addMilliseconds(x: Date, amount: number): void\r\n{\r\n  x.setTime(x.getTime() + amount);\r\n}\r\n\r\nexport function addSeconds(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\r\n}\r\n\r\nexport function addMinutes(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\r\n}\r\n\r\nexport function addHours(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\r\n}\r\n\r\nexport function addDays(x: Date, amount: number): void\r\n{\r\n  x.setDate(x.getDate() + amount);\r\n}\r\n\r\nexport function addWeeks(x: Date, amount: number): void\r\n{\r\n  addDays(x, amount * DAYS_IN_WEEK);\r\n}\r\n\r\nexport function addMonths(x: Date, amount: number): void\r\n{\r\n  const month = x.getMonth() + amount;\r\n\r\n  const y = new Date(0);\r\n  y.setFullYear(y.getFullYear(), month, 1);\r\n  y.setHours(0, 0, 0, 0);\r\n  const dayMax = getDaysInMonth(y);\r\n\r\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\r\n}\r\n\r\nexport function addQuarters(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function addYears(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_YEAR);\r\n}\r\n\r\nexport function diffMilliseconds(a: Date, b: Date): number\r\n{\r\n  return a.getTime() - b.getTime();\r\n}\r\n\r\nexport function diffSeconds(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\r\n}\r\n\r\nexport function diffMinutes(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\r\n}\r\n\r\nexport function diffHours(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\r\n}\r\n\r\nexport function diffDays(a: Date, b: Date): number \r\n{\r\n  const leftTimestamp = getAbsoluteTimestamp(a);\r\n  const rightTimestamp = getAbsoluteTimestamp(b);\r\n\r\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\r\n}\r\n\r\nexport function diffWeeks(a: Date, b: Date): number\r\n{\r\n  return diffDays(a, b) / DAYS_IN_WEEK;\r\n}\r\n\r\nexport function diffMonths(a: Date, b: Date): number\r\n{\r\n  const years = a.getFullYear() - b.getFullYear();\r\n  const months = a.getMonth() - b.getMonth();\r\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\r\n\r\n  return years * MONTHS_IN_YEAR + months + date;\r\n}\r\n\r\nexport function diffQuarters(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\r\n}\r\n\r\nexport function diffYears(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\r\n}\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\r\n\r\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\r\n\r\nconst ops = DateOperations;\r\n\r\nexport const DateOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  now: ops.set('now'),\r\n\r\n  today: ops.set('today'),\r\n\r\n  tomorrow: ops.set('today+'),\r\n\r\n  yesterday: ops.set('today-'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromTimestamp: ops.set('>tms', {}, ['value']),\r\n\r\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\r\n\r\n  min: ops.set('min', {}, ['value', 'test']),\r\n\r\n  max: ops.set('max', {}, ['value', 'test']),\r\n\r\n  get: ops.set('get', {}, ['value', 'property']),\r\n\r\n  set: ops.set('set', {}, ['value', 'property', 'set']),\r\n\r\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\r\n\r\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\r\n\r\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  daysInMonth: ops.set('dim', {}, ['value']),\r\n\r\n  daysInYear: ops.set('diy', {}, ['value']),\r\n\r\n  weeksInYear: ops.set('wiy', {}, ['value']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\r\n\r\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\r\n\r\n  timezoneOffset: ops.set('offset', {}, ['value']),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.set('toText', {}, ['value', 'format']),\r\n\r\n  toISOText: ops.set('toISOText', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n \r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\r\n\r\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\r\n\r\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  isDST: ops.set('dst?', {}, ['value']),\r\n\r\n  isLeapYear: ops.set('leap?', {}, ['value']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\r\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\r\n\r\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\r\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\r\n\r\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\r\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\r\n\r\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\r\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\r\n\r\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\r\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\r\n\r\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\r\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\r\n\r\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\r\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\r\n\r\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\r\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\r\n\r\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\r\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\r\n\r\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\r\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\r\n\r\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\r\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\r\n\r\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\r\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\r\n\r\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\r\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\r\n\r\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\r\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\r\n\r\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\r\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\r\n\r\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\r\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\r\n\r\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\r\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\r\n\r\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\r\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\r\n\r\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\r\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\r\n\r\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\r\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\r\n\r\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\r\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\r\n\r\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\r\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\r\n\r\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\r\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\r\n\r\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\r\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\r\n\r\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\r\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\r\n\r\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\r\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\r\n\r\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\r\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\r\n\r\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\r\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\r\n\r\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\r\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\r\n\r\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\r\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\r\n\r\n\r\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\r\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\r\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\r\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\r\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\r\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\r\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\r\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\r\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\r\nDateComputeds.set('daysInYear', DateOps.daysInYear);\r\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\r\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\r\nDateComputeds.set('toISOText', DateOps.toISOText);\r\nDateComputeds.set('isDST', DateOps.isDST);\r\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\r\n","\r\nimport { isDate, isEmpty, isObject, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\r\nimport { Expression } from '../Expression';\r\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\nexport interface DateOptions \r\n{\r\n  parseAsUTC?: boolean;\r\n  validateMin?: Date;\r\n  validateMax?: Date;\r\n  forceMin?: Date;\r\n  forceMax?: Date;\r\n  forceStartOf?: Unit;\r\n  forceEndOf?: Unit;\r\n  withTime?: boolean;\r\n}\r\n\r\nexport class DateType extends Type<DateOptions> \r\n{\r\n\r\n  public static id = ID.Date;\r\n\r\n  public static operations = DateOperations;\r\n\r\n  public static computeds = DateComputeds;\r\n\r\n  public static baseType = new DateType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): DateType \r\n  {\r\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: DateType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): DateOptions\r\n  {\r\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\r\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\r\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\r\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: DateOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n\r\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\r\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\r\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\r\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isDate(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new DateType({\r\n      validateMin: new Date(data.getTime()),\r\n      validateMax: new Date(data.getTime())\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 9;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n\r\n        if (at) {\r\n          return a.getTime() - b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return false;\r\n\r\n        if (at) {\r\n          return a.getTime() === b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\r\n          return new Date(json.value);\r\n        }\r\n      },\r\n      toJson: (json: Date) => {\r\n        if (isDate(json)) {\r\n          return { $any: 'date', value: json.toISOString() };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, _, setObjectCopy) => {\r\n        if (isDate(x)) {\r\n          const newDate = new Date(x.getTime());\r\n\r\n          setObjectCopy(x, newDate);\r\n  \r\n          return newDate;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DateType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return DateType.operations.map;\r\n  }\r\n\r\n  public merge(type: DateType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\r\n    \r\n    if (o1.validateMin && o2.validateMin)\r\n    {\r\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\r\n    }\r\n\r\n    if (o1.validateMax && o2.validateMax)\r\n    {\r\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof DateType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      if (other.options.withTime && !this.options.withTime)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const min = this.getMin();\r\n      const otherMin = other.getMin();\r\n\r\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.getMax();\r\n      const otherMax = other.getMax();\r\n\r\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const { forceStartOf, forceEndOf } = this.options;\r\n\r\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { parseAsUTC, withTime } = this.options;\r\n\r\n    this.options = { parseAsUTC, withTime };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    const { parseAsUTC, validateMin, validateMax } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMin && parsed.getTime() < validateMin.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMax && parsed.getTime() > validateMax.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    if (forceMin && parsed.getTime() < forceMin.getTime())\r\n    {\r\n      parsed.setTime(forceMin.getTime());\r\n    }\r\n    \r\n    if (forceMax && parsed.getTime() > forceMax.getTime())\r\n    {\r\n      parsed.setTime(forceMax.getTime());\r\n    }\r\n\r\n    if (forceStartOf)\r\n    {\r\n      startOf[forceStartOf](parsed);\r\n    }\r\n\r\n    if (forceEndOf)\r\n    {\r\n      endOf[forceEndOf](parsed);\r\n    }\r\n\r\n    return parsed;\r\n  }\r\n\r\n  public newInstance(): DateType\r\n  {\r\n    return new DateType({});\r\n  }\r\n\r\n  public clone(): DateType\r\n  {\r\n    return new DateType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DateType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return new Date();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const value = new Date();\r\n\r\n    const min = this.getMin();\r\n    const max = this.getMax();\r\n\r\n    const start = min ? min.getTime() : value.getTime();\r\n    const end = max ? max.getTime() : value.getTime();\r\n\r\n    return new Date(rnd(start, end, true));\r\n  }\r\n\r\n  public getMin(): Date | undefined\r\n  {\r\n    return this.options.validateMin || this.options.forceMin;\r\n  }\r\n\r\n  public getMax(): Date | undefined\r\n  {\r\n    return this.options.validateMax || this.options.forceMax;\r\n  }\r\n\r\n  public fromJson(json: string): Date\r\n  {\r\n    return new Date(json);\r\n  }\r\n\r\n  public toJson(value: Date): string\r\n  {\r\n    return value ? value.toISOString() : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations, OperationGeneric } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { isSameClass, isNumber } from '../fns';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_MANY = 1;\r\n\r\nexport class ManyType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Many;\r\n\r\n  public static operations = new Operations(ID.Many + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\r\n\r\n  public static baseType = new ManyType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ManyType \r\n  {\r\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\r\n\r\n    return new ManyType(many);\r\n  }\r\n\r\n  public static encode(type: ManyType): any \r\n  {\r\n    const many = type.options.map(t => t.encode());\r\n\r\n    return [this.id, many];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public operations?: Record<string, OperationGeneric>;\r\n\r\n  public getOperations()\r\n  {\r\n    if (!this.operations)\r\n    {\r\n      this.operations = {};\r\n\r\n      this.options.forEach(many => \r\n      {\r\n        const ops = many.getOperations();\r\n        \r\n        for (const prop in ops) \r\n        {\r\n          this.operations[prop] = ops[prop];\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.operations;\r\n  }\r\n\r\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const many = this.options;\r\n\r\n    for (const type of many)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ManyType.id;\r\n  }\r\n\r\n  public merge(type: ManyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    for (const sub of this.options)\r\n    {\r\n      const subType = sub.getSubType(expr, def, context);\r\n\r\n      if (subType)\r\n      {\r\n        return subType;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const subs: TypeSub[] = [];\r\n\r\n    this.options.forEach(type => {\r\n      type.getSubTypes(def).forEach(sub => {\r\n        const matching = subs.find(existing => \r\n          existing.key === sub.key || (\r\n            existing.key instanceof Type && \r\n            sub.key instanceof Type && \r\n            isSameClass(existing.key, sub.key)\r\n          )\r\n        );\r\n\r\n        if (!matching) {\r\n          subs.push(sub);\r\n        }\r\n      });\r\n    });\r\n\r\n    subs.sort((a, b) => {\r\n      const ad = a.key instanceof Type ? 1 : 0;\r\n      const bd = b.key instanceof Type ? 1 : 0;\r\n\r\n      return ad - bd;\r\n    });\r\n\r\n    return subs;\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.length === 1\r\n      ? this.options[0]\r\n      : this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.isOptional()\r\n      ? new ManyType(this.options.map((o) => o.getRequired()))\r\n      : this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options[0].getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...this.options.map((t) => t.getValidateExpression())\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'), \r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = sub type index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (hasFrom && !hasTo) // removed\r\n    {\r\n      const targetType = from === 0 ? this.options[1] : this.options[0];\r\n      const valueType = this.options[from];\r\n      const casting = Exprs.cast(valueType, targetType);\r\n\r\n      return Exprs\r\n        .if(targetType.getValidateExpression())\r\n        .than(Exprs.get('value'))\r\n        .else(casting)\r\n      ;\r\n    }\r\n    else if (!hasFrom && hasTo) // added\r\n    {\r\n      return newValue;\r\n    }\r\n    else if (to === from && hasFrom) // change\r\n    {\r\n      return Exprs\r\n        .if(Exprs.not(this.getValidateExpression()))\r\n        .than(newValue)\r\n        .else(Exprs.get('value'))\r\n      ;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\r\n  }\r\n\r\n  public newInstance(): ManyType\r\n  {\r\n    return new ManyType([]);\r\n  }\r\n\r\n  public clone(): ManyType\r\n  {\r\n    return new ManyType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ManyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options.length > 0\r\n      ? this.options[0].create()\r\n      : null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const options = this.options;\r\n    const chosen = rnd(0, options.length, true);\r\n\r\n    return options[chosen].random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      const parsed = many.normalize(json);\r\n\r\n      if (parsed !== null && parsed !== undefined)\r\n      {\r\n        return parsed;\r\n      }\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      if (many.isValid(value))\r\n      {\r\n        return many.toJson(value);\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { isObject, isMap, isSameClass, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { TextType } from './Text';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_KEY = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface MapOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n}\r\n\r\nexport class MapType extends Type<MapOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Map;\r\n\r\n  public static operations = MapOperations;\r\n\r\n  public static computeds = MapComputeds;\r\n\r\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): MapType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\r\n\r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public static encode(type: MapType): any \r\n  {\r\n    const { key, value } = type.options;\r\n\r\n    return key !== TextType.baseType\r\n      ? [this.id, value.encode()]\r\n      : [this.id, value.encode(), key.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isMap(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let key: Type = new AnyType({});\r\n    let value: Type = new AnyType({});\r\n\r\n    const type = new MapType({ key, value });\r\n\r\n    cache.set(data, type);\r\n\r\n    for (const [entryKey, entryValue] of data.entries())\r\n    {\r\n      key = describer.merge(key, entryKey);\r\n      value = describer.merge(value, entryValue);\r\n    }\r\n\r\n    type.options.key = key;\r\n    type.options.value = value;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 10;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\r\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isMap(json)) {\r\n          return {\r\n            $any: 'map',\r\n            value: Array.from(json.entries())\r\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isMap(x)) {\r\n          const newMap = new Map();\r\n\r\n          setObjectCopy(x, newMap);\r\n  \r\n          for (const [key, value] of x.entries()) {\r\n            newMap.set(copy(key), copy(value));\r\n          }\r\n  \r\n          return newMap;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          let less = 0;\r\n          let more = 0;\r\n\r\n          for (const key of a.keys()) {\r\n            if (!b.has(key)) {\r\n              less++;\r\n            }\r\n          }\r\n\r\n          for (const key of b.keys()) {\r\n            if (!a.has(key)) {\r\n              more++;\r\n            } else {\r\n              const c = compare(a.get(key), b.get(key));\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n          }\r\n\r\n          return DataTypes.getCompare(less, more);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return false;\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          if (a.size !== b.size) {\r\n            return false;\r\n          }\r\n\r\n          for (const [key, value] of a.entries()) {\r\n            if (!b.has(key)) {\r\n              return false;\r\n            } else if (!equals(value, b.get(key))) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<Map<any, any>>({\r\n      priority,\r\n      isValid: (value) => isMap(value),\r\n      get: (value, step) => value.get(step),\r\n      set: (value, step, stepValue) => value.set(step, stepValue),\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    const key = Types.parse(keyOrClass);\r\n    \r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MapType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return MapType.operations.map;\r\n  }\r\n\r\n  public merge(type: MapType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.key = Types.merge(o1.key, o2.key);\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (this.options.key.isValid(expr.value))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (isSameClass(exprType, this.options.key))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: this.options.key, value: this.options.value },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof MapType && \r\n      this.options.key.isCompatible(other.options.key, options) && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === MapType.STEP_KEY\r\n      ? this.options.key\r\n      : step === MapType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.key.removeDescribedRestrictions();\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(MapOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.value.getValidateExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === MapType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Map || isObject(test))\r\n    {\r\n      const { key, value } = this.options;\r\n\r\n      return this.iterate(test, true, (k, v) => {\r\n        if (!key.isValid(k) || !value.isValid(v)) {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const entries: [any, any][] = [];\r\n\r\n    this.iterate(test, undefined, (k, v) => {\r\n      entries.push([\r\n        key.normalize(k),\r\n        value.normalize(v)\r\n      ]);\r\n    });\r\n\r\n    return new Map(entries);\r\n  }\r\n\r\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\r\n  {\r\n    if (map instanceof Map)\r\n    {\r\n      for (const [key, value] of map.entries())\r\n      {\r\n        const result = onItem(key, value);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    else if (isObject(map))\r\n    {\r\n      for (const prop of map)\r\n      {\r\n        const result = onItem(prop, map[prop]);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return otherwise;\r\n  }\r\n\r\n  public newInstance(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MapType.encode(this);\r\n  }\r\n\r\n  public create(): Map<any, any>\r\n  {\r\n    return new Map();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Map<any, any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const k = key.random(rnd);\r\n      const v = value.random(rnd);\r\n\r\n      out.set(k, v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<[any, any]>): Map<any, any>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new Map(json.map(([k, v]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n  }\r\n\r\n  public toJson(map: Map<any, any>): Array<[any, any]>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return Array.from(map.entries()).map(([k, v]) => [\r\n      key.toJson(k),\r\n      value.toJson(v)\r\n    ]);\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { Types } from '../Types';\r\nimport { AnyType } from './Any';\r\n\r\n\r\nconst INDEX_TYPE = 1;\r\nconst RANDOM_CHANCE = 0.3;\r\n\r\nexport class OptionalType extends Type<Type>\r\n{\r\n\r\n  public static STEP_OPTIONAL = 'optional';\r\n\r\n  public static id = ID.Optional;\r\n\r\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\r\n\r\n  public static baseType = new OptionalType(AnyType.baseType);\r\n\r\n  public static decode(data: any[], types: TypeProvider): OptionalType \r\n  {\r\n    const type = types.getType(data[INDEX_TYPE]);\r\n\r\n    return new OptionalType( type );\r\n  }\r\n\r\n  public static encode(type: OptionalType): any \r\n  {\r\n    return [this.id, type.options.encode()];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(type: TypeInput): OptionalType\r\n  {\r\n    return new OptionalType(Types.parse(type));\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OptionalType.id;\r\n  }\r\n\r\n  public merge(type: OptionalType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.options.getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.options;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof OptionalType\r\n      ? this.options.isCompatible(other.options, options)\r\n      : this.options.isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === OptionalType.STEP_OPTIONAL\r\n      ? this.options\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'),\r\n        test: Exprs.undefined(),\r\n      }),\r\n      this.options.getValidateExpression(),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.define({\r\n      valueMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n      testMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('test'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n    }, Exprs\r\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\r\n      .than(Exprs.compareEqual())\r\n      .if(Exprs.get('valueMissing'))\r\n      .than(Exprs.compareLess())\r\n      .if(Exprs.get('testMissing'))\r\n      .than(Exprs.compareGreater())\r\n      .else(this.options.getCompareExpression()),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = optional\r\n    return Exprs\r\n      .if(this.options.getValidateExpression())\r\n      .than(newValue)\r\n      .else(Exprs.get('value'))\r\n    ;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null \r\n      || value === undefined\r\n      || this.options.isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value === null || value === undefined\r\n      ? value\r\n      : this.options.normalize(value);\r\n  }\r\n\r\n  public newInstance(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.newInstance());\r\n  }\r\n\r\n  public clone(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.clone());\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OptionalType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options ? this.options.create() : undefined;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\r\n      ? this.options.random(rnd)\r\n      : undefined;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NOT = 1;\r\n\r\nexport class NotType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Not;\r\n\r\n  public static operations = new Operations(ID.Not + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\r\n\r\n  public static baseType = new NotType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): NotType \r\n  {\r\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\r\n\r\n    return new NotType(not);\r\n  }\r\n\r\n  public static encode(type: NotType): any \r\n  {\r\n    const not = type.options.map(t => t.encode());\r\n\r\n    return [this.id, not];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getOperations()\r\n  { \r\n    return {};\r\n  }\r\n\r\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const not = this.options;\r\n\r\n    for (const type of not)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotType.id;\r\n  }\r\n\r\n  public merge(type: NotType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\r\n  }\r\n\r\n  public newInstance(): NotType\r\n  {\r\n    return new NotType([]);\r\n  }\r\n\r\n  public clone(): NotType\r\n  {\r\n    return new NotType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return AnyType.baseType.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return AnyType.baseType.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\r\n\r\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\r\n\r\nconst ops = ColorOperations;\r\n\r\n\r\nexport const ColorOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create', {}),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\r\n\r\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  clamp: ops.set('clamp', {}, ['value']),\r\n\r\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\r\n\r\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  format: ops.set('format', {}, ['value', 'format']),\r\n\r\n  parse: ops.set('parse', {}, ['value']),\r\n\r\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\r\n\r\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\r\n\r\n  darken: ops.set('darken', {}, ['value', 'amount']),\r\n\r\n  toHSL: ops.set('->hsl', {}, ['value']),\r\n\r\n  fromHSL: ops.set('<-hsl', {}, ['value']),\r\n\r\n  luminance: ops.set('luminance', {}, ['value']),\r\n\r\n  contrast: ops.set('contrast', {}, ['value', 'test']),\r\n\r\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\r\n\r\n  opaque: ops.set('opaque', {}, ['value']),\r\n\r\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\r\n\r\n  distance: ops.set('distance', {}, ['value', 'test']),\r\n\r\n  named: ops.set('named', {}, ['name']),\r\n\r\n  getName: ops.set('getName', {}, ['value']),\r\n\r\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nColorComputeds.set('toHSL', ColorOps.toHSL);\r\nColorComputeds.set('luminance', ColorOps.luminance);\r\nColorComputeds.set('inverted', ColorOps.invert);\r\nColorComputeds.set('opaque', ColorOps.opaque);\r\nColorComputeds.set('name', ColorOps.getName);","\r\nimport { isObject, isNumber, clamp } from '../../fns';\r\n\r\n\r\nexport const COMPONENT_MIN = 0;\r\nexport const COMPONENT_MAX = 255;\r\n\r\nexport interface Color\r\n{\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n}\r\n\r\nexport function isColor(x: any): x is Color\r\n{\r\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\r\n}\r\n\r\nexport function clampComponent(x: number): number\r\n{\r\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\r\n}","\r\nimport { Color } from './Color';\r\nimport { Type } from '../../Type';\r\n\r\n\r\n\r\nexport type ColorSpaceToColor<T> = (color: T) => Color;\r\n\r\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\r\n\r\nexport type ColorFormatParser<T> = (value: any) => T | null;\r\n\r\nexport type ColorFormatFormatter<T> = (color: T) => any;\r\n\r\n\r\nexport interface ColorFormat<T>\r\n{\r\n  code: string;\r\n  name: string;\r\n  parser: ColorFormatParser<T>;\r\n  formatter: ColorFormatFormatter<T>;\r\n}\r\n\r\n\r\nexport class ColorSpace<T>\r\n{\r\n  public code: string;\r\n  public name: string;\r\n  public type: Type;\r\n  public toColor: ColorSpaceToColor<T>;\r\n  public fromColor: ColorSpaceFromColor<T>;\r\n  public formatMap: Record<string, ColorFormat<T>>;\r\n  public formats: ColorFormat<T>[];\r\n\r\n  public constructor(code: string, name: string)\r\n  {\r\n    this.code = code;\r\n    this.name = name;\r\n    this.formatMap = {};\r\n    this.formats = [];\r\n  }\r\n\r\n  public setType(type: Type): this\r\n  {\r\n    this.type = type;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setToColor(toColor: ColorSpaceToColor<T>): this\r\n  {\r\n    this.toColor = toColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\r\n  {\r\n    this.fromColor = fromColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addFormat(format: ColorFormat<T>): this\r\n  {\r\n    this.formatMap[format.code] = format;\r\n    this.formats.push(format);\r\n\r\n    return this;\r\n  }\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\r\nimport { isString, pad } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\r\n  .setToColor((color) => color)\r\n  .setFromColor((color) => color)\r\n  .addFormat({\r\n    code: 'default',\r\n    name: 'Default',\r\n    parser: (data) => {\r\n      if (!isColor(data)) {\r\n        return null;\r\n      }\r\n\r\n      return data;\r\n    },\r\n    formatter: (color) => {\r\n      return color;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'bestfit',\r\n    name: 'Best Fit',\r\n    parser: (data) => {\r\n      return null;\r\n    },\r\n    formatter: (color) => {\r\n      if (color.a === COMPONENT_MAX) {\r\n        const r = formatHex(color.r);\r\n        const g = formatHex(color.g);\r\n        const b = formatHex(color.b);\r\n\r\n        return '#' + r + g + b;\r\n      } else {\r\n        const r = clampComponent(color.r);\r\n        const g = clampComponent(color.g);\r\n        const b = clampComponent(color.b);\r\n        const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n      }\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexShort',\r\n    name: 'Hex (#rgb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r + r, 16),\r\n        g: parseInt(g + g, 16),\r\n        b: parseInt(b + b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r).substring(0, 1);\r\n      const g = formatHex(color.g).substring(0, 1);\r\n      const b = formatHex(color.b).substring(0, 1);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hex',\r\n    name: 'Hex (#rrggbb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexLong',\r\n    name: 'Hex (#rrggbbaa)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: parseInt(a, 16),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n      const a = formatHex(color.a);\r\n\r\n      return '#' + r + g + b + a;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgb',\r\n    name: 'rgb(r, g, b)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n\r\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgba',\r\n    name: 'rgba(r, g, b, a)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction parseComponent(x: string): number\r\n{\r\n  return x.indexOf('%') === -1\r\n    ? clampComponent(parseInt(x, 10))\r\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\r\n}\r\n\r\nfunction formatHex(x: number)\r\n{\r\n  return pad(clampComponent(x).toString(16), 2, '0', true);\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { COMPONENT_MAX, clampComponent } from './Color';\r\nimport { isString, clamp, isObject, isNumber } from '../../fns';\r\nimport { NumberType } from '../../types/Number';\r\nimport { ObjectType } from '../../types/Object';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\r\n\r\n\r\nexport function isColorHSL(x: any): x is ColorHSL\r\n{\r\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\r\n}\r\n\r\n\r\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\r\n  .setType(new ObjectType({props: {\r\n    h: new NumberType({ min: 0, max: 360, whole: true }),\r\n    s: new NumberType({ min: 0, max: 100, whole: true }),\r\n    l: new NumberType({ min: 0, max: 100, whole: true }),\r\n    a: new NumberType({ min: 0, max: 255, whole: true }),\r\n  }}))\r\n  .setToColor((color) => {\r\n    const H = normalizeHue(color.h);\r\n    const L = clampPercent(color.l) / 100;\r\n    const S = clampPercent(color.s) / 100;\r\n    const C = (1 - Math.abs(2 * L - 1)) * S;\r\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\r\n    const m = L - C / 2;\r\n    const r1 = H < 60 || H >= 300\r\n      ? C\r\n      : H >= 120 && H < 240\r\n        ? 0\r\n        : X;\r\n    const g1 = H >= 240\r\n      ? 0\r\n      : H >= 60 && H < 180\r\n        ? C\r\n        : X;\r\n    const b1 = H <= 120\r\n      ? 0\r\n      : H >= 180 && H < 300\r\n        ? C\r\n        : X;\r\n\r\n    return {\r\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\r\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\r\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\r\n      a: color.a\r\n    };\r\n  })\r\n  .setFromColor((color) => {\r\n    const R = clampComponent(color.r);\r\n    const G = clampComponent(color.g);\r\n    const B = clampComponent(color.b);\r\n    const r1 = R / COMPONENT_MAX;\r\n    const g1 = G / COMPONENT_MAX;\r\n    const b1 = B / COMPONENT_MAX;\r\n    const Cmax = Math.max(r1, g1, b1);\r\n    const Cmin = Math.min(r1, g1, b1);\r\n    const delta = Cmax - Cmin;\r\n    const L = (Cmax + Cmin) / 2;\r\n    const h = delta === 0\r\n      ? 0\r\n      : Cmax === r1\r\n        ? ((g1 - b1) / delta) % 6\r\n        : Cmax === g1\r\n          ? ((b1 - r1) / delta) + 2\r\n          : ((r1 - g1) / delta) + 4;\r\n    const s = delta === 0\r\n      ? 0\r\n      : delta / (1 - Math.abs(2 * L - 1));\r\n\r\n    return {\r\n      h: normalizeHue(Math.round(h * 60)),\r\n      s: clampPercent(Math.round(s * 100)),\r\n      l: clampPercent(Math.round(L * 100)),\r\n      a: color.a,\r\n    };\r\n  })\r\n  .addFormat({\r\n    code: 'hsl',\r\n    name: 'HSL',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n\r\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hsla',\r\n    name: 'HSLA',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l, a] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction normalizeHue(h: number): number\r\n{\r\n  return h < 0 \r\n    ? 360 - Math.abs(h % 360)\r\n    : h % 360;\r\n}\r\n\r\nfunction clampPercent(x: number)\r\n{\r\n  return clamp(x, 0, 100);\r\n}","\r\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\r\nimport { ID } from './ID';\r\nimport { NumberType } from './Number';\r\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\r\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\r\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\r\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\r\nimport { ObjectType, ObjectOptions } from './Object';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\n\r\nexport interface ColorOptions extends ObjectOptions\r\n{\r\n  hasAlpha?: boolean;\r\n}\r\n\r\n\r\nexport class ColorType extends ObjectType<ColorOptions>\r\n{\r\n\r\n  public static readonly componentType = new NumberType({ \r\n    min: COMPONENT_MIN, \r\n    max: COMPONENT_MAX, \r\n    whole: true \r\n  });\r\n\r\n  public static readonly componentProps = {\r\n    r: ColorType.componentType,\r\n    g: ColorType.componentType,\r\n    b: ColorType.componentType,\r\n    a: ColorType.componentType,\r\n  };\r\n\r\n  public static spaces: ColorSpace<any>[] = [\r\n    ColorSpaceRGB,\r\n    ColorSpaceHSL,\r\n  ];\r\n\r\n  public static id = ID.Color;\r\n\r\n  public static operations = ColorOperations;\r\n\r\n  public static computeds = ColorComputeds;\r\n\r\n  public static baseType = new ColorType({ hasAlpha: true });\r\n\r\n  public static decode(data: any[]): ColorType \r\n  {\r\n    return new ColorType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: ColorType): any \r\n  {\r\n    return type.options.hasAlpha\r\n      ? [this.id, { hasAlpha: true }]\r\n      : this.id;\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    const parsed = ColorType.baseType.normalize(data);\r\n\r\n    if (!parsed)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new ColorType({\r\n      hasAlpha: parsed.a !== COMPONENT_MAX,\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static getFormat(id: string): ColorFormat<any> | undefined\r\n  {\r\n    const [spaceId, formatId] = id.split(':');\r\n    const space = this.spaces.find((s) => s.code === spaceId);\r\n\r\n    return space\r\n      ? space.formatMap[formatId]\r\n      : undefined;\r\n  }\r\n\r\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\r\n  {\r\n    super({\r\n      ...colorOptions,\r\n      props: ColorType.componentProps,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ColorType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ColorType.operations.map;\r\n  }\r\n\r\n  public merge(type: ColorType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (other instanceof ColorType)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.strict && \r\n        !options.exact &&\r\n        other instanceof ObjectType &&\r\n        other.isCompatible(this)) \r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    super.removeDescribedRestrictions();\r\n\r\n    delete this.options.hasAlpha;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.normalize(value) !== undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    for (const space of ColorType.spaces)\r\n    {\r\n      for (const formats of space.formats)\r\n      {\r\n        const parsed = formats.parser(value);\r\n\r\n        if (parsed !== null)\r\n        {\r\n          return space.toColor(parsed);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public newInstance(): ColorType\r\n  {\r\n    return new ColorType({});\r\n  }\r\n\r\n  public clone(): ColorType\r\n  {\r\n    return new ColorType({\r\n      hasAlpha: this.options.hasAlpha,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ColorType.encode(this);\r\n  }\r\n\r\n  public create(): Color\r\n  {\r\n    return { r: 0, g: 0, b: 0, a: 0 };\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\r\n  {\r\n    return {\r\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      a: COMPONENT_MAX,\r\n    };\r\n  }\r\n\r\n  public fromJson(json: Color): Color\r\n  {\r\n    return {\r\n      r: json.r,\r\n      g: json.g,\r\n      b: json.b,\r\n      a: json.a,\r\n    };\r\n  }\r\n\r\n  public toJson(value: Color): Color\r\n  {\r\n    return value ? {\r\n      r: value.r,\r\n      g: value.g,\r\n      b: value.b,\r\n      a: value.a,\r\n    } : null;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Set RGB color space type.\r\n */\r\nColorSpaceRGB.setType(ColorType.baseType);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\r\n\r\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\r\n\r\nconst ops = SetOperations;\r\n\r\nexport const SetOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\r\n\r\n  has: ops.set('has', {}, ['set', 'value']),\r\n\r\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\r\n\r\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\r\n\r\n  count: ops.set('count', { }, ['set']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nSetComputeds.set('copy', SetOps.copy);\r\nSetComputeds.set('values', SetOps.values);\r\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { FuncOptions, Func } from './Func';\r\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\r\nimport { Type, TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Exprs } from './Exprs';\r\nimport { Runtime } from './Runtime';\r\nimport { EnumType } from './types/Enum';\r\nimport { Relation } from './Relation';\r\nimport { ListOps } from './ops/ListOps';\r\nimport { AnyOps } from './ops/AnyOps';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface EntityOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  type: any;\r\n  instances: any[];\r\n  primaryType?: EntityPrimaryType,\r\n  key?: any;\r\n  describe?: any;\r\n  transcoders?: Record<string, EntityTranscoderOptions>;\r\n  indexes?: Record<string, EntityIndexOptions>;\r\n  methods?: Record<string, Func | FuncOptions>;\r\n}\r\n\r\nexport interface EntityIndex\r\n{\r\n  name: string;\r\n  props: string[];\r\n  types?: Type[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityIndexOptions\r\n{\r\n  props: string[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityTranscoder\r\n{\r\n  encode: Expression;\r\n  decode: Expression;\r\n  encodedType: Type;\r\n}\r\n\r\nexport interface EntityTranscoderOptions\r\n{\r\n  encode: any;\r\n  decode: any;\r\n  encodedType: any;\r\n}\r\n\r\nexport type EntityPropPair = [string, Type];\r\n\r\nexport interface EntityProps\r\n{\r\n  type: EntityKeyType;\r\n  props: EntityPropPair[];\r\n  relation?: Relation;\r\n}\r\n\r\nexport enum EntityKeyType\r\n{\r\n  PRIMARY,\r\n  FOREIGN,\r\n  NONE\r\n}\r\n\r\nexport enum EntityPrimaryType\r\n{\r\n  GIVEN,\r\n  AUTO_INCREMENT,\r\n  UUID\r\n}\r\n\r\nexport interface EntityEvents\r\n{\r\n  change(entity: Entity): void;\r\n  renamed(entity: Entity, oldName: string): void;\r\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\r\n  removeProp(entity: Entity, prop: string): void;\r\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \r\n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\r\n  addIndex(entity: Entity, index: EntityIndex): void;\r\n  removeIndex(entity: Entity, index: EntityIndex): void;\r\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\r\n  addMethod(entity: Entity, method: Func): void;\r\n  removeMethod(entity: Entity, method: Func): void;\r\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\r\n}\r\n\r\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\r\n    return new Entity({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      type: Types.object(),\r\n      instances: [],\r\n      methods: Object.create(null),\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public static uuid(): string {\r\n    // tslint:disable: no-magic-numbers no-bitwise\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n      const r = Math.random() * 16 | 0\r\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n\r\n      return v.toString(16);\r\n    });\r\n    // tslint:enable: no-magic-numbers no-bitwise\r\n  }\r\n\r\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\r\n    [EntityPrimaryType.GIVEN]: null,\r\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\r\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\r\n  };\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public type: ObjectType;\r\n  public instances: any[];\r\n  public methods: Record<string, Func>;\r\n  public key: Expression;\r\n  public keyType: Type;\r\n  public describe: Expression;\r\n  public transcoders: Record<string, EntityTranscoder>;\r\n  public indexes: Record<string, EntityIndex>;\r\n  public primaryType: EntityPrimaryType;\r\n\r\n  public constructor(options: EntityOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n    this.instances = options.instances && options.instances.length\r\n      ? options.instances.map((i) => this.type.fromJson(i))\r\n      : [];\r\n    this.methods = this.decodeMethods(defs, options.methods);\r\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\r\n    this.indexes = this.decodeIndexes(options.indexes);\r\n    this.primaryType = isNumber(options.primaryType)\r\n        ? options.primaryType\r\n        : EntityPrimaryType.AUTO_INCREMENT;\r\n    this.key = options.key \r\n      ? defs.getExpression(options.key)\r\n      : this.getPrimaryKeyExpression();\r\n    this.keyType = this.key.getType(defs, this.getKeyContext());\r\n    this.describe = options.describe\r\n      ? defs.getExpression(options.describe)\r\n      : Exprs.noop();\r\n  }\r\n\r\n  public sync(options: EntityOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n\r\n      this.instances = options instanceof Entity\r\n        ? options.instances\r\n        : options.instances && options.instances.length\r\n          ? options.instances.map((i) => this.type.fromJson(i))\r\n          : [];\r\n\r\n      objectSync(\r\n        this.methods, \r\n        this.decodeMethods(defs, options.methods),\r\n        (target, prop, method) => this.addMethod(method, true),\r\n        (target, prop) => this.removeMethod(prop, true),\r\n        (target, prop, existing, updated) => existing.sync(updated, defs),\r\n      ),\r\n      \r\n      objectSync(\r\n        this.transcoders,\r\n        this.decodeTranscoders(defs, options.transcoders),\r\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\r\n        (target, prop) => this.removeTranscoder(prop, true),\r\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\r\n      );\r\n\r\n      objectSync(\r\n        this.indexes,\r\n        this.decodeIndexes(options.indexes),\r\n        (target, name, index) => this.addIndex(name, index, true),\r\n        (target, name) => this.removeIndex(name, true),\r\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\r\n      );\r\n\r\n      this.primaryType = isNumber(options.primaryType)\r\n          ? options.primaryType\r\n          : EntityPrimaryType.AUTO_INCREMENT;\r\n      this.key = options.key \r\n        ? defs.getExpression(options.key)\r\n        : this.getPrimaryKeyExpression();\r\n      this.keyType = this.key.getType(defs, this.getKeyContext());\r\n      this.describe = options.describe\r\n        ? defs.getExpression(options.describe)\r\n        : Exprs.noop();\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.trigger('change', this);\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: EntityOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('change', this);\r\n  }\r\n\r\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\r\n  {\r\n    return methods\r\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\r\n      : {};\r\n  }\r\n\r\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\r\n  {\r\n    return method instanceof Func\r\n      ? method\r\n      : Func.create(defs, method);\r\n  }\r\n\r\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\r\n  {\r\n    return transcoders\r\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\r\n      : {};\r\n  }\r\n\r\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\r\n  {\r\n    return options.encode instanceof Expression\r\n      ? options\r\n      : {\r\n          encode: defs.getExpression(options.encode),\r\n          decode: defs.getExpression(options.decode),\r\n          encodedType: defs.getType(options.encodedType),\r\n        };\r\n  }\r\n\r\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\r\n  {\r\n    return indexes\r\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\r\n          name,\r\n          props,\r\n          unique,\r\n          primary,\r\n        }))\r\n      : {};\r\n  }\r\n\r\n  public encode(): EntityOptions \r\n  {\r\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\r\n\r\n    return {\r\n      name,\r\n      created, \r\n      updated,\r\n      description,\r\n      meta,\r\n      type: type.encode(),\r\n      instances: instances.map((i) => type.toJson(i)),\r\n      methods: objectMap(methods, (m) => m.encode()),\r\n      key: key.encode(),\r\n      describe: describe.encode(),\r\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\r\n        encode: encode.encode(),\r\n        decode: decode.encode(),\r\n        encodedType: encodedType.encode(),\r\n      })),\r\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\r\n        props,\r\n        unique,\r\n        primary,\r\n      })),\r\n    };\r\n  }\r\n\r\n  public canStore(defs: Definitions): boolean\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\r\n\r\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public updateKeyType(defs: Definitions)\r\n  {\r\n    const keyType = this.key.getType(defs, this.getKeyContext());\r\n\r\n    if (keyType)\r\n    {\r\n      this.keyType = keyType;\r\n    }\r\n  }\r\n\r\n  public renameProp(prop: string, newProp: string)\r\n  {\r\n    let changed = false;\r\n    const transcoder = this.transcoders[prop];\r\n\r\n    if (transcoder)\r\n    {\r\n      DataTypes.objectRemove(this.transcoders, prop);\r\n      DataTypes.objectSet(this.transcoders, newProp, transcoder);\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props[i] = newProp;\r\n\r\n        this.updateIndex(index.name, true);\r\n        changed = true;\r\n      }\r\n    });\r\n\r\n    this.trigger('renameProp', this, newProp, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public removeProp(prop: string)\r\n  {\r\n    let changed = false;\r\n\r\n    if (prop in this.transcoders)\r\n    {\r\n      this.removeTranscoder(prop, true);\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index, indexName) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props.splice(i, 1);\r\n        changed = true;\r\n\r\n        if (index.props.length === 0)\r\n        {\r\n          this.removeIndex(indexName, true);\r\n        }\r\n        else\r\n        {\r\n          this.updateIndex(indexName, true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.trigger('removeProp', this, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public getEntityProps(): EntityProps\r\n  {\r\n    const primary = this.getPrimary();\r\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\r\n      prop,\r\n      primary.types && primary.types[i]\r\n        ? primary.types[i]\r\n        : this.type.options.props[prop]\r\n    ]);\r\n\r\n    return {\r\n      type: EntityKeyType.PRIMARY,\r\n      props,\r\n    };\r\n  }\r\n\r\n  public getKey(run: Runtime, instance: any): any\r\n  {\r\n    const { type, key } = this;\r\n\r\n    return run.run(key, { instance, type });\r\n  }\r\n\r\n  public setKey(instance: any)\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const prop = this.getDynamicPrimaryKey();\r\n\r\n    if (instance[prop])\r\n    {\r\n      return;\r\n    }\r\n\r\n    switch (this.primaryType)\r\n    {\r\n      case EntityPrimaryType.AUTO_INCREMENT:\r\n        DataTypes.objectSet(instance, prop, this.instances.reduce((a, b) => Math.max(a, b[prop]), 0) + 1);\r\n        break;\r\n      case EntityPrimaryType.UUID:\r\n        DataTypes.objectSet(instance, prop, Entity.uuid());\r\n        break;\r\n    }\r\n  }\r\n\r\n  public takeKey(run: Runtime, instance: any): any\r\n  {\r\n    this.setKey(instance);\r\n\r\n    return this.getKey(run, instance);\r\n  }\r\n\r\n  public getDescribe(run: Runtime, instance: any): any\r\n  {\r\n    const { type, describe } = this;\r\n\r\n    return run.run(describe, { instance, type });\r\n  }\r\n\r\n  public getDecodedPropertyTypes(): TypeMap\r\n  {\r\n    return this.type.options.props;\r\n  }\r\n\r\n  public getPropertyTypeFor(forProperty?: string)\r\n  {\r\n    return forProperty\r\n    ? Types.enumForText([forProperty])\r\n    : this.getPropertyType(); \r\n  }\r\n\r\n  public getEncodedPropertyTypes(): TypeMap\r\n  {\r\n    return objectMap(this.type.options.props, \r\n      (type, prop) => prop in this.transcoders\r\n        ? this.transcoders[prop].encodedType\r\n        : type\r\n    );\r\n  }\r\n\r\n  public getEncodedType(): ObjectType\r\n  {\r\n    return Types.object(this.getEncodedPropertyTypes());\r\n  }\r\n\r\n  public getDecodedType(): ObjectType\r\n  {\r\n    return this.type;\r\n  }\r\n\r\n  public getProperties(): string[]\r\n  {\r\n    return Object.keys(this.getDecodedPropertyTypes());\r\n  }\r\n\r\n  public getPropertyType(): EnumType\r\n  {\r\n    return Types.enumForText(this.getProperties());\r\n  }\r\n\r\n  public getKeyReturnType()\r\n  {\r\n    return this.keyType;\r\n  }\r\n\r\n  public getKeyContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getDescribeContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getEncoded(run: Runtime, instance: any): any\r\n  {\r\n    const encoded: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\r\n    }\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const encoder = property in transcoders\r\n      ? transcoders[property].encode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return encoder\r\n      ? run.run(encoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getEncodeContext(forProperty?: string): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getDecodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getDecodeExpected(forProperty);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\r\n  {\r\n    return forProperty && forProperty in this.transcoders\r\n      ? this.transcoders[forProperty].encodedType\r\n      : defaultType;\r\n  }\r\n\r\n  public getDecoded(run: Runtime, encoded: any): any\r\n  {\r\n    const instance: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\r\n    }\r\n\r\n    return instance;\r\n  }\r\n\r\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const decoder = property in transcoders\r\n      ? transcoders[property].decode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return decoder\r\n      ? run.run(decoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getEncodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getDecodeExpected(forProperty?: string)\r\n  {\r\n    return forProperty\r\n      ? this.type.options.props[forProperty] || Types.any()\r\n      : Types.any();\r\n  }\r\n\r\n  public getIndexExpectedType()\r\n  {\r\n    return Types.set(this.getPropertyType());\r\n  }\r\n\r\n  public getDynamicPrimaryKey(): string\r\n  {\r\n    const existing = this.type.options.props;\r\n\r\n    return !('id' in existing)\r\n      ? 'id'\r\n      : !('_id' in existing)\r\n        ? '_id'\r\n        : '__id';\r\n  }\r\n\r\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\r\n  {\r\n    const primary = this.getPrimary(name);\r\n\r\n    return primary.props.length > 1\r\n      ? Exprs.op(ListOps.join, {\r\n          list: primary.props.map((prop) => \r\n            Exprs.get('instance', prop)\r\n          ),\r\n          delimiter: Exprs.const(separator),\r\n          toText: Exprs.op(AnyOps.asText, {\r\n            value: Exprs.get('item'),\r\n          }),\r\n        })\r\n      : Exprs.get('instance', primary.props[0]);\r\n  }\r\n\r\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\r\n  {\r\n    const defined = name in this.indexes\r\n      ? this.indexes[name]\r\n      : objectReduce(this.indexes, \r\n          (index, indexName, first) => first ? first : index.primary ? index : first, \r\n        null);\r\n\r\n    if (defined)\r\n    {\r\n      return defined;\r\n    }\r\n\r\n    if (returnDynamic)\r\n    {\r\n      const id = this.getDynamicPrimaryKey();\r\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\r\n\r\n      return {\r\n        name,\r\n        props: [id],\r\n        types: [type],\r\n        unique: true,\r\n        primary: true,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getUniqueIndexes(): EntityIndex[]\r\n  {\r\n    return objectReduce(this.indexes, (index, indexName, unique) => {\r\n      if (index.unique) {\r\n        unique.push(index);\r\n      }\r\n\r\n      return unique;\r\n    }, []);\r\n  }\r\n\r\n  public addPrimary(props: string | string[]): this\r\n  {\r\n    this.addIndex('primary', {\r\n      props: isArray(props) ? props : [props], \r\n      unique: true, \r\n      primary: true\r\n    });\r\n\r\n    this.primaryType = EntityPrimaryType.GIVEN;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.indexes[name];\r\n    const index: EntityIndex = { ...options, name };\r\n\r\n    DataTypes.objectSet(this.indexes, name, index);\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateIndex', this, index, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addIndex', this, index);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    this.trigger('updateIndex', this, index, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    DataTypes.objectRemove(this.indexes, name);\r\n\r\n    this.trigger('removeIndex', this, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameIndex(name: string, newName: string): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    if (index && name !== newName)\r\n    {\r\n      const previous = { ...index, props: index.props.slice() };\r\n\r\n      index.name = newName;\r\n\r\n      DataTypes.objectRemove(this.indexes, name);\r\n      DataTypes.objectSet(this.indexes, newName, index);\r\n\r\n      this.trigger('updateIndex', this, index, previous);\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.transcoders[prop];\r\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\r\n\r\n    DataTypes.objectSet(this.transcoders, prop, transcoder);\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addTranscoder', this, name, transcoder);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      DataTypes.objectRemove(this.transcoders, name);\r\n\r\n      this.trigger('removeTranscoder', this, name, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addMethod(method: Func, delayChange: boolean = false): this\r\n  {\r\n    const existing = this.methods[method.name];\r\n\r\n    DataTypes.objectSet(this.methods, method.name, method);\r\n\r\n    if (existing)\r\n    {\r\n      this.trigger('updateMethod', this, method, existing);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addMethod', this, method);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method && name !== newName)\r\n    {\r\n      method.name = newName;\r\n\r\n      DataTypes.objectRemove(this.methods, name);\r\n      DataTypes.objectSet(this.methods, newName, method);\r\n\r\n      this.trigger('updateMethod', this, method, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeMethod(name: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method)\r\n    {\r\n      DataTypes.objectRemove(this.methods, name);\r\n\r\n      this.trigger('removeMethod', this, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { isObject, isArray, isSet, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface SetOptions \r\n{\r\n  value: Type;\r\n}\r\n\r\nexport class SetType extends Type<SetOptions> \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Set;\r\n\r\n  public static operations = SetOperations;\r\n\r\n  public static computeds = SetComputeds;\r\n\r\n  public static baseType = new SetType({ value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): SetType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public static encode(type: SetType): any \r\n  {\r\n    const { value } = type.options;\r\n\r\n    return [this.id, value.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    if (!isSet(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let value: Type = new AnyType({});\r\n\r\n    const type = new SetType({ value });\r\n\r\n    cache.set(data, type);\r\n\r\n    for (const [setValue] of data.entries())\r\n    {\r\n      value = describer.merge(value, setValue);\r\n    }\r\n\r\n    type.options.value = value;\r\n\r\n    return type;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 11;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\r\n          return new Set(json.value.map(reader));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isSet(json)) {\r\n          return {\r\n            $any: 'set',\r\n            value: Array.from(json.entries()).map(writer),\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isSet(x)) {\r\n          const newSet = new Set();\r\n\r\n          setObjectCopy(x, newSet);\r\n  \r\n          for (const [value] of x.entries()) {\r\n            newSet.add(copy(value));\r\n          }\r\n  \r\n          return newSet;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isSet(a);\r\n        const bt = isSet(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isSet(a) && isSet(b)) {\r\n          let dl = a.size - b.size;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            const avalues = Array.from(a);\r\n            const bvalues = Array.from(b);\r\n\r\n            for (let i = 0; i < avalues.length; i++) {\r\n              const c = compare(avalues[i], bvalues[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isSet(a);\r\n        const bl = isSet(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (isSet(a) && isSet(b))\r\n        {\r\n          if (a.size !== b.size)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (const value of a)\r\n          {\r\n            if (!b.has(value))\r\n            {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return SetType.operations.map;\r\n  }\r\n\r\n  public merge(type: SetType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof SetType && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === SetType.STEP_VALUE \r\n      ? this.options.value\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(SetOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = value\r\n    return Exprs.op(SetOps.map, {\r\n      set: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      value: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Set || isArray(test))\r\n    {\r\n      const { value } = this.options;\r\n\r\n      return !Array.from(test).some((v) => !value.isValid(v));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { value } = this.options;\r\n    \r\n    return new Set(Array.from(test).map((v) => value.normalize(v)));\r\n  }\r\n\r\n  public newInstance(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetType.encode(this);\r\n  }\r\n\r\n  public create(): Set<any>\r\n  {\r\n    return new Set();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Set<any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const v = value.random(rnd);\r\n\r\n      out.add(v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<any>): Set<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new Set(json.map((v) => value.fromJson(v)));\r\n  }\r\n\r\n  public toJson(set: Set<any>): Array<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return Array.from(set.entries()).map((v) => value.toJson(v));\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved, TypeProvider } from './Type';\r\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\r\nimport { NumberType } from './types/Number'\r\nimport { AnyType } from './types/Any';\r\nimport { BooleanType } from './types/Boolean';\r\nimport { DateOptions, DateType } from './types/Date';\r\nimport { TextType, TextOptions } from './types/Text';\r\nimport { EnumType } from './types/Enum';\r\nimport { ObjectType } from './types/Object';\r\nimport { ListType } from './types/List';\r\nimport { ManyType } from './types/Many';\r\nimport { MapType } from './types/Map';\r\nimport { NullType } from './types/Null';\r\nimport { OptionalType } from './types/Optional';\r\nimport { TupleType } from './types/Tuple';\r\nimport { NotType } from './types/Not';\r\nimport { ColorType } from './types/Color';\r\nimport { SetType } from './types/Set';\r\nimport { EntityType } from './types/Entity';\r\n\r\n\r\nexport class Types\r\n{\r\n\r\n  public static INDEX = Types.index();\r\n\r\n  public static LENGTH = Types.index();\r\n\r\n  public static CHAR = Types.char();\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      type.setParent();\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  public static any()\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\r\n  {\r\n    return new BooleanType({ true: trues, false: falses });\r\n  }\r\n\r\n  public static date(options: DateOptions = {})\r\n  {\r\n    return new DateType(options);\r\n  }\r\n\r\n  public static entity(name: string, types: TypeProvider)\r\n  {\r\n    return new EntityType(name, types);\r\n  }\r\n\r\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.parse(value),\r\n      key: this.parse(key),\r\n      constants: toMap(constants),\r\n    }));\r\n  }\r\n\r\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.text(),\r\n      key: this.text(),\r\n      constants: isMap(constants)\r\n        ? constants\r\n        : isArray(constants[0])\r\n          ? new Map(constants as Array<[string, string]>)\r\n          : new Map((constants as string[]).map((c) => [c, c]))\r\n    }));\r\n  }\r\n\r\n  public static list(item: TypeInput, min?: number, max?: number)\r\n  {\r\n    return this.setParent(new ListType({\r\n      item: this.parse(item),\r\n      min, \r\n      max,\r\n    }));\r\n  }\r\n\r\n  public static many(types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\r\n  {\r\n    return this.setParent(new ManyType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static not(types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\r\n  {\r\n    return this.setParent(new NotType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static map(value: TypeInput, key: TypeInput = TextType)\r\n  {\r\n    return this.setParent(new MapType({ \r\n      key: this.parse(key),\r\n      value: this.parse(value)\r\n    }));\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return NullType.baseType\r\n  }\r\n\r\n  public static number(min?: number, max?: number, whole?: boolean)\r\n  {\r\n    return new NumberType({ min, max, whole });\r\n  }\r\n\r\n  public static int(min?: number, max?: number)\r\n  {\r\n    return new NumberType({ min, max, whole: true });\r\n  }\r\n\r\n  public static index(max?: number)\r\n  {\r\n    return new NumberType({ min: 0, max, whole: true });\r\n  }\r\n\r\n  public static char()\r\n  {\r\n    return new TextType({ min: 1, max: 1 });\r\n  }\r\n\r\n  public static object(props: TypeInputMap = {})\r\n  {\r\n    return this.setParent(new ObjectType({ \r\n      props: this.resolve(props),\r\n    }));\r\n  }\r\n\r\n  public static optional(type: TypeInput): Type\r\n  {\r\n    const innerType = this.parse(type);\r\n\r\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\r\n  }\r\n\r\n  public static color(options: { hasAlpha?: boolean } = {})\r\n  {\r\n    return this.setParent(new ColorType(options));\r\n  }\r\n\r\n  public static set(value: TypeInput)\r\n  {\r\n    return this.setParent(new SetType({\r\n      value: this.parse(value),\r\n    }));\r\n  }\r\n\r\n  public static text(options: TextOptions = {})\r\n  {\r\n    return new TextType(options);\r\n  }\r\n\r\n  public static tuple(types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\r\n  {\r\n    return this.setParent(new TupleType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static parse(input: TypeInput): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : input.baseType.newInstance();\r\n  }\r\n\r\n  public static simplify(type: Type): Type;\r\n  public static simplify(type: Type | null): Type | null;\r\n  public static simplify(type: Type | null): Type | null\r\n  {\r\n    return type ? type.getSimplifiedType() : null;\r\n  }\r\n\r\n  public static resolve<T>(types: T): TypeResolved<T>\r\n  {\r\n    let result: any;\r\n\r\n    if (!types)\r\n    {\r\n    }\r\n    else if (types instanceof Type)\r\n    {\r\n      result = types;\r\n    }\r\n    else if ((types as any).baseType instanceof Type)\r\n    {\r\n      result = (types as any).baseType.newInstance();\r\n    }\r\n    else if (isArray(types))\r\n    {\r\n      result = types.map(t => this.resolve(t));\r\n    }\r\n    else if (isObject(types))\r\n    {\r\n      result = objectMap(types as any, t => this.resolve(t));\r\n    }\r\n\r\n    return result as unknown as TypeResolved<T>;\r\n  }\r\n\r\n  public static reduce(type: Type[]): Type\r\n  {\r\n    return type.length === 1 ? type[0] : new ManyType(type);\r\n  }\r\n\r\n  public static explode(outerType: Type): Type[]\r\n  {\r\n    return outerType instanceof ManyType ? outerType.options : [outerType];\r\n  }\r\n\r\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\r\n  {\r\n    if (type instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof OptionalType && type.options instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof ManyType) \r\n    {\r\n      const oneOf = type.options.find((t) => t instanceof maybe);\r\n\r\n      if (oneOf) \r\n      {\r\n        return this.optional(oneOf);\r\n      }\r\n\r\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\r\n\r\n      if (oneOfOptional) \r\n      {\r\n        return oneOfOptional;\r\n      }\r\n    }\r\n\r\n    return this.optional(maybe);\r\n  }\r\n\r\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\r\n  {\r\n    if (readonlyTypes.length === 0)\r\n    {\r\n      return noTypes;\r\n    }\r\n\r\n    if (readonlyTypes.find(t => t instanceof AnyType))\r\n    {\r\n      return AnyType.baseType;\r\n    }\r\n\r\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\r\n\r\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\r\n  }\r\n\r\n  public static merge(a: Type, b: Type): Type\r\n  {\r\n    if (a instanceof AnyType)\r\n    {\r\n      return b;\r\n    }\r\n\r\n    const optional = \r\n      a instanceof OptionalType ||\r\n      b instanceof OptionalType;\r\n\r\n    const ar = a.getRequired();\r\n    const br = b.getRequired();\r\n\r\n    if (isSameClass(ar, br))\r\n    {\r\n      ar.merge(br);\r\n\r\n      return optional ? this.optional(ar) : ar;\r\n    }\r\n\r\n    if (ar instanceof ManyType || br instanceof ManyType)\r\n    {\r\n      const atypes = this.explode(ar);\r\n      const btypes = this.explode(br);\r\n      const an = atypes.length;\r\n\r\n      for (const ktype of btypes)\r\n      {\r\n        let matched = false;\r\n        const koptional = ktype instanceof OptionalType;\r\n        const krequired: Type = koptional ? ktype.options : ktype;\r\n\r\n        for (let i = 0; i < an; i++)\r\n        {\r\n          const itype = atypes[i];\r\n          const ioptional = itype instanceof OptionalType;\r\n          const irequired: Type = ioptional ? itype.options : itype;\r\n\r\n          if (isSameClass(irequired, krequired))\r\n          {\r\n            matched = true;\r\n            irequired.merge(krequired);\r\n\r\n            if (koptional && !ioptional) \r\n            {\r\n              atypes[i] = this.optional(irequired);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!matched)\r\n        {\r\n          atypes.push(ktype);\r\n        }\r\n      }\r\n\r\n      return optional\r\n        ? this.optional(this.reduce(atypes))\r\n        : this.reduce(atypes);\r\n    }\r\n\r\n    return this.many(a, b);\r\n  }\r\n\r\n}","\r\nexport class LinkedNode<T> \r\n{\r\n\r\n  public value: T;\r\n  public next: LinkedNode<T>;\r\n  public prev: LinkedNode<T>;\r\n\r\n  constructor(value: T) \r\n  {\r\n    this.value = value;\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  // List Operations\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public clear() \r\n  {\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  public addLast(value: T): LinkedNode<T> \r\n  {\r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this.prev);\r\n    \r\n    return node;\r\n  }\r\n\r\n  public addFirst(value: T): LinkedNode<T> \r\n  { \r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this);\r\n\r\n    return node;\r\n  }\r\n\r\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \r\n  {\r\n    const stop = this;\r\n    let curr = this.next;\r\n    let count = 0;\r\n\r\n    while (curr !== stop) \r\n    {\r\n      const next = curr.next;\r\n      callback(curr.value, count, curr);\r\n      curr = next;\r\n      count++;\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  // Item Operations\r\n\r\n  public isRemoved()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public remove() \r\n  {\r\n    if (!this.isRemoved()) \r\n    {\r\n      this.next.prev = this.prev;\r\n      this.prev.next = this.next;\r\n      this.next = this.prev = this;\r\n    }\r\n  }\r\n\r\n  public linkAfter(node: LinkedNode<T>) \r\n  {\r\n    this.remove();\r\n    this.next = node.next;\r\n    this.prev = node;\r\n    node.next.prev = this;\r\n    node.next = this;\r\n  }\r\n\r\n}\r\n","import { isArray } from './fns';\r\nimport { LinkedNode } from './LinkedNode';\r\n\r\n\r\n\r\nexport type EventCallback<\r\n  E, \r\n  K extends keyof E = any, \r\n  A extends any[] = EventTypeArgs<E, K>,\r\n  R = EventTypeResult<E, K>  \r\n> = (type: K, ...payload: A) => R;\r\n\r\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\r\n\r\nexport type EventCallbackMap<E> = \r\n{\r\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\r\n};\r\n\r\nexport type EventTypeResult<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<any, infer R>\r\n    ? R\r\n    : never;\r\n\r\nexport type EventTypeArgs<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<infer A, any>\r\n    ? A\r\n    : never;\r\n\r\nexport class EventBase<E> \r\n{\r\n\r\n  private listeners: EventCallbackMap<E> = Object.create(null);\r\n\r\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \r\n  {\r\n    const listeners = this.getListeners(event, false);\r\n    const results: R[] = [];\r\n\r\n    if (listeners) \r\n    { \r\n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  public hasListeners<K extends keyof E>(event: K): boolean\r\n  {\r\n    return this.getListeners(event) !== null;\r\n  }\r\n\r\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\r\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\r\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \r\n  {\r\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\r\n\r\n    if (!listeners && create) \r\n    {\r\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\r\n    }\r\n\r\n    return listeners || null;\r\n  }\r\n\r\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const events = isArray(event) ? event : [event];\r\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\r\n    \r\n    return () => nodes.forEach((n) => n.remove());\r\n  }\r\n\r\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const off = this.on(event, (type, ...payload) => {\r\n      off();\r\n      \r\n      return handler(type, ...payload);\r\n    });\r\n\r\n    return off;\r\n  }\r\n\r\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \r\n  {\r\n    if (event) \r\n    {\r\n      if (Array.isArray(event)) \r\n      {\r\n        event.forEach((e) => this.off(e, handler));\r\n      } \r\n      else \r\n      {\r\n        const listeners = this.listeners[event];\r\n\r\n        if (listeners) \r\n        {\r\n          if (handler) \r\n          {\r\n            listeners.each((other, index, node) => {\r\n              if (other === handler) {\r\n                node.remove();\r\n              }\r\n            });\r\n          }\r\n          else \r\n          {\r\n            listeners.clear();\r\n          }\r\n        }\r\n      }\r\n    } \r\n    else \r\n    {\r\n      this.listeners = Object.create(null);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n","import { ObjectType, ObjectOptions } from './types/Object';\r\nimport { TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Exprs } from './Exprs';\r\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { DataTypes } from './DataTypes';\r\nimport { EventBase } from './EventBase';\r\n\r\n\r\nexport interface FuncOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  params: any;\r\n  expression: any;\r\n  defaults: any;\r\n  tests: FuncTest[];\r\n}\r\n\r\nexport interface FuncTest\r\n{\r\n  name: string;\r\n  description: string;\r\n  args: any;\r\n  expected: any;\r\n}\r\n\r\nexport interface FuncEvents\r\n{\r\n  changed(func: Func): void;\r\n  renamed(func: Func, oldName: string): void;\r\n  renameParameter(func: Func, param: string, oldParam: string): void;\r\n  removeParameter(func: Func, param: string): void;\r\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\r\n  addTest(func: Func, test: FuncTest): void;\r\n  removeTest(func: Func, test: FuncTest): void;\r\n  updateTest(func: Func, test: FuncTest): void;\r\n}\r\n\r\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\r\n    return new Func({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      params: Types.object(),\r\n      expression: Exprs.noop(),\r\n      defaults: {},\r\n      tests: [],\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public params: ObjectType<ObjectOptions>;\r\n  public expression: Expression;\r\n  public defaults: any;\r\n  public tests: FuncTest[];\r\n\r\n  public constructor(options: FuncOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.defaults = this.params.fromJson(options.defaults);\r\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\r\n  }\r\n\r\n  public sync(options: FuncOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.params = options instanceof Func\r\n        ? options.params\r\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\r\n      this.expression = options instanceof Func\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n      this.defaults = options instanceof Func\r\n        ? options.defaults\r\n        : this.params.fromJson(options.defaults);\r\n\r\n      arraySync(\r\n        this.tests, \r\n        options instanceof Func\r\n          ? options.tests\r\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\r\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \r\n        (target, value) => this.addTest(value, true),\r\n        (target, index) => this.removeTest(index, true),\r\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: FuncOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): FuncOptions \r\n  {\r\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      description, \r\n      meta,\r\n      params: params.encode(),\r\n      expression: expression.encode(),\r\n      defaults: params.toJson(defaults),\r\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\r\n    };\r\n  }\r\n\r\n  public renameParameter(name: string, newName: string): boolean\r\n  {\r\n    const paramType = this.params.options.props[name];\r\n\r\n    if (paramType)\r\n    {\r\n      DataTypes.objectSet(this.params.options.props, newName, paramType);\r\n      DataTypes.objectRemove(this.params.options.props, name);\r\n\r\n      if (name in this.defaults)\r\n      {\r\n        DataTypes.objectSet(this.defaults, newName, this.defaults[name]);\r\n        DataTypes.objectRemove(this.defaults, name);\r\n      }\r\n\r\n      this.trigger('renameParameter', this, newName, name);\r\n      this.changed();\r\n    }\r\n\r\n    return !!paramType;\r\n  }\r\n\r\n  public removeParameter(name: string): boolean\r\n  {\r\n    const exists = name in this.params.options.props;\r\n\r\n    if (exists)\r\n    {\r\n      DataTypes.objectRemove(this.params.options.props, name);\r\n      DataTypes.objectRemove(this.defaults, name);\r\n\r\n      this.trigger('removeParameter', this, name);\r\n      this.changed();\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public addTest(test: FuncTest, delayChange: boolean = false)\r\n  {\r\n    this.tests.push(test);\r\n\r\n    this.trigger('addTest', this, test);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(test)\r\n      ? this.tests[test]\r\n      : test;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newTest);\r\n\r\n      this.trigger('updateTest', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(test)\r\n      ? test\r\n      : this.tests.indexOf(test);\r\n    const exists = index >= 0 && index < this.tests.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.tests[index];\r\n      \r\n      this.trigger('removeTest', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \r\n  {\r\n    const context = Types.object({\r\n      ...this.params.options.props,\r\n      ...paramsTypes,\r\n    });\r\n\r\n    return this.expression.getType(defs, context);\r\n  }\r\n\r\n  public getParamTypes(): ObjectType\r\n  {\r\n    return isEmpty(this.defaults)\r\n      ? this.params\r\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\r\n  }\r\n\r\n  public getParamType(param: string)\r\n  {\r\n    const propType = this.params.options.props[param];\r\n\r\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\r\n      ? propType.getRequired()\r\n      : propType;\r\n  }\r\n\r\n  public getArguments(args: any, returnNew: boolean = true)\r\n  {\r\n    const target = returnNew ? { ...args } : args;\r\n\r\n    for (const prop in this.defaults)\r\n    {\r\n      const propType = this.params.options.props[prop];\r\n\r\n      if (!propType.getRequired().isValid(target[prop]))\r\n      {\r\n        DataTypes.objectSet(target, prop, DataTypes.copy(this.defaults[prop]));\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.tests.forEach((test) =>\r\n    {\r\n      test.args = cmd({ value: test.args });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string): boolean\r\n  {\r\n    if (!(arg in this.params.options.props))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.expression.mutates(def, arg, false);\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { MapInput, toMap, reverseMap, now } from './fns';\r\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface RelationTypeKey\r\n{\r\n  name: string;\r\n  props: string[];\r\n}\r\n\r\nexport interface RelationOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  kind: RelationKind;\r\n  subject: RelationTypeKey;\r\n  subjectRelationName?: string;\r\n  morphs?: [string, any];\r\n  morphsToRelated?: MapInput<any, string>;\r\n  related: RelationTypeKey[];\r\n  relatedRelationName?: string;\r\n  multiple?: boolean;\r\n  required?: boolean;\r\n  owns?: boolean;\r\n  extension?: boolean;\r\n}\r\n\r\nexport interface EntityRelation\r\n{\r\n  relation: Relation;\r\n  name: string;\r\n  kind: RelationKind;\r\n  related: RelationTypeKey[];\r\n  morphs?: EntityPropPair;\r\n  morphsToRelated?: Map<any, string>;\r\n  relatedToMorphs?: Map<string, any>;\r\n  where?: [string, any];\r\n  itemType: Type;\r\n  relationType: Type;\r\n  cascade: RelationCascade;\r\n  local: string[];\r\n}\r\n\r\nexport enum RelationKind\r\n{\r\n  HAS_MANY,\r\n  BELONGS_TO,\r\n  HAS_ONE,\r\n  ONE,\r\n  HAS_ONE_POLYMORPHIC,\r\n  ONE_POLYMORPHIC,\r\n}\r\n\r\nexport enum RelationCascade\r\n{\r\n  NONE,\r\n  CASCADE,\r\n  SET_NULL,\r\n  RESTRICT\r\n}\r\n\r\nexport interface RelationEvents\r\n{\r\n  changed(relation: Relation): void;\r\n  renamed(relation: Relation, oldName: string): void;\r\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\r\n}\r\n\r\nexport class Relation extends EventBase<RelationEvents>\r\n{\r\n\r\n  /**\r\n   * A unique name for the relationship between the subject type and related types.\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * When the relation was created.\r\n   */\r\n  public created: number;\r\n\r\n  /**\r\n   * When the relation was last updated.\r\n   */\r\n  public updated: number;\r\n  \r\n  /**\r\n   * A name-props pair for the type that has the foreign key. The name is the\r\n   * aliased type name and the props are the properties on it that reference\r\n   * the related type or types.\r\n   */\r\n  public subject: RelationTypeKey; \r\n  \r\n  /**\r\n   * The name the subject uses to refer to the related types.\r\n   */\r\n  public subjectRelationName: string;\r\n\r\n  /**\r\n   * A name-type pair for a property that exists on the subject type that is \r\n   * used to determine which related type.\r\n   */\r\n  public morphs: EntityPropPair | null;\r\n\r\n  /**\r\n   * A map of values from the morphs property to the related type names.\r\n   */\r\n  public morphsToRelated: Map<any, string>;\r\n\r\n  /**\r\n   * The list of name-prop pairs that the subject type can be related to based\r\n   * on the morph \r\n   */\r\n  public related: RelationTypeKey[];\r\n  \r\n  /**\r\n   * The name the related types use to refer to the subject.\r\n   */\r\n  public relatedRelationName: string;\r\n\r\n  /**\r\n   * A map from related type names to the morph value.\r\n   */\r\n  public relatedToMorphs: Map<string, any>;\r\n\r\n  /**\r\n   * The kind of relation created.\r\n   */\r\n  public kind: RelationKind;\r\n\r\n  /**\r\n   * List or single related instance?\r\n   */\r\n  public multiple: boolean;\r\n\r\n  /**\r\n   * Remove subject if related is removed\r\n   */\r\n  public required: boolean;\r\n\r\n  /**\r\n   * When related is being removed, stop it. I own it. But when subject is\r\n   * removed then remove the related.\r\n   */\r\n  public owns: boolean;\r\n\r\n  /**\r\n   * Related types extend the subject, the subject has a morph value to know\r\n   * which type it is.\r\n   */\r\n  public extension: boolean;\r\n\r\n  /**\r\n   * Needed for retrieving aliased types and their current properties.\r\n   */\r\n  protected defs: Definitions;\r\n\r\n  \r\n  public constructor(defs: Definitions, options: RelationOptions)\r\n  {\r\n    super();\r\n\r\n    this.defs = defs;\r\n    this.name = options.name;\r\n    this.updated = options.updated || now();\r\n    this.created = options.created || now();\r\n    this.kind = options.kind;\r\n    this.subject = options.subject;\r\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n    this.morphs = options.morphs\r\n      ? this.decodeTypePair(options.morphs)\r\n      : null;\r\n    this.morphsToRelated = toMap(options.morphsToRelated);\r\n    this.related = options.related;\r\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n    this.multiple = !!options.multiple;\r\n    this.required = !!options.required;\r\n    this.owns = !!options.owns;\r\n    this.extension = !!options.extension;\r\n  }\r\n\r\n  public sync(options: RelationOptions | Relation, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.updated = options.updated || now();\r\n      this.created = options.created || now();\r\n      this.kind = options.kind;\r\n      this.subject = options.subject;\r\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n      this.morphs = options.morphs\r\n        ? this.decodeTypePair(options.morphs)\r\n        : null;\r\n      this.morphsToRelated = toMap(options.morphsToRelated);\r\n      this.related = options.related;\r\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n      this.multiple = !!options.multiple;\r\n      this.required = !!options.required;\r\n      this.owns = !!options.owns;\r\n      this.extension = !!options.extension;\r\n      \r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: RelationOptions | Relation): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\r\n  {\r\n    return [prop, this.defs.getType(propType)];\r\n  }\r\n\r\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\r\n  {\r\n    return pair\r\n      ? [pair[0], pair[1].encode()]\r\n      : null;\r\n  }\r\n\r\n  public encode(): RelationOptions\r\n  {\r\n    const { \r\n      name, created, updated,\r\n      kind, subject, subjectRelationName, \r\n      morphs, morphsToRelated, \r\n      related, relatedRelationName, \r\n      multiple, required, owns, extension \r\n    } = this;\r\n\r\n    return {\r\n      name,\r\n      updated,\r\n      created,\r\n      kind,\r\n      subject,\r\n      subjectRelationName,\r\n      morphs: this.encodeTypePair(morphs),\r\n      morphsToRelated: Array.from(morphsToRelated.entries()),\r\n      related,\r\n      relatedRelationName,\r\n      multiple, required, owns, extension,\r\n    };\r\n  }\r\n\r\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\r\n  {\r\n    return related.find((r) => r.name === name);\r\n  }\r\n\r\n  public rename(name: string, newName: string)\r\n  {\r\n    this.renameReference(name, newName, [this.subject]);\r\n    this.renameReference(name, newName, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      withName.name = newName;\r\n    }\r\n  }\r\n\r\n  public remove(name: string)\r\n  {\r\n    this.removeReference(name, [this.subject]);\r\n    this.removeReference(name, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removeReference(name: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      related.splice(i, 1);\r\n      related[i].props = [];\r\n    }\r\n  }\r\n\r\n  public renameProp(name: string, prop: string, newProp: string)\r\n  {\r\n    this.renamePropReference(name, prop, newProp, [this.subject]);\r\n    this.renamePropReference(name, prop, newProp, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      const i = withName.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        withName.props[i] = newProp;\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeProp(name: string, prop: string)\r\n  {\r\n    this.removePropReference(name, prop, [this.subject]);\r\n    this.removePropReference(name, prop, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const withName = related[i];\r\n      const k = withName.props.indexOf(prop);\r\n\r\n      if (k !== -1)\r\n      {\r\n        withName.props.splice(k, 1);\r\n\r\n        if (withName.props.length === 0)\r\n        {\r\n          related.splice(i, 1);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getPropTypes(related: RelationTypeKey[]): Type[]\r\n  {\r\n    const types: Type[] = [];\r\n\r\n    related.forEach(({ name, props }) => \r\n    {\r\n      const entity = this.defs.getEntity(name);\r\n      const primary = entity.getEntityProps();\r\n\r\n      props.forEach((_, i) =>\r\n      {\r\n        const propType = primary.props[i][1];\r\n\r\n        types[i] = types[i]\r\n          ? Types.merge(types[i], propType)\r\n          : propType.clone();\r\n      });\r\n    });\r\n\r\n    return types;\r\n  }\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.subject.props.length === 0\r\n        || this.related.length === 0;\r\n  }\r\n\r\n  private getItemType(related: RelationTypeKey[]): Type\r\n  {\r\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\r\n    const itemType = typesResolved.length > 1\r\n      ? Types.many(typesResolved)\r\n      : typesResolved[0];\r\n\r\n    return itemType;\r\n  }\r\n\r\n  public getSubjectRelation(subjectName: string): EntityRelation | null\r\n  {\r\n    if (this.subject.name !== subjectName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.subjectRelationName;\r\n    const local = this.subject.props;\r\n    const related = this.related;\r\n    const itemType = this.getItemType(related);\r\n    const cascade = this.owns && this.multiple\r\n      ? RelationCascade.CASCADE\r\n      : this.required\r\n        ? RelationCascade.RESTRICT\r\n        : RelationCascade.SET_NULL;\r\n    const relationType = this.required\r\n      ? itemType\r\n      : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.BELONGS_TO\r\n      : this.kind; \r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.morphs = this.morphs;\r\n      relation.morphsToRelated = this.morphsToRelated;\r\n      relation.relatedToMorphs = this.relatedToMorphs;\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getRelatedRelation(relatedName: string): EntityRelation | null\r\n  {\r\n    const withName = this.getRelatedWithName(relatedName, this.related);\r\n\r\n    if (!withName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.relatedRelationName;\r\n    const local = withName.props;\r\n    const related = [this.subject];\r\n    const itemType = this.getItemType(related);\r\n    const cascade = RelationCascade.NONE;\r\n    const relationType = this.multiple\r\n      ? Types.list(itemType)\r\n      : this.required\r\n        ? itemType\r\n        : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.HAS_MANY\r\n      : this.morphs\r\n        ? RelationKind.ONE_POLYMORPHIC\r\n        : RelationKind.ONE;\r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.where = [\r\n        this.morphs[0],\r\n        this.relatedToMorphs.get(relatedName)\r\n      ];\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getTypeProps(name: string): EntityProps[]\r\n  {\r\n    const typeProps: EntityProps[] = [];\r\n\r\n    if (this.subject.name === name)\r\n    {\r\n      const propTypesList = this.getPropTypes(this.related);\r\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\r\n\r\n      typeProps.push({\r\n        type: EntityKeyType.FOREIGN,\r\n        props,\r\n        relation: this,\r\n      });\r\n\r\n      if (this.morphs)\r\n      {\r\n        typeProps.push({\r\n          type: EntityKeyType.NONE,\r\n          props: [this.morphs],\r\n          relation: this,\r\n        });\r\n      }\r\n    }\r\n\r\n    return typeProps;\r\n  }\r\n\r\n  // one{id} has many many{one_id}\r\n  public static hasMany(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string, \r\n    many: string, \r\n    oneRelationName?: string, \r\n    manyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.many;\r\n    const subjectRelationName = options.manyRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_MANY,\r\n      subject: { \r\n        name: options.many,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps\r\n      }],\r\n      relatedRelationName,\r\n      multiple: true,\r\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n    });\r\n  }\r\n\r\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\r\n  public static belongsTo(defs: Definitions, options: {\r\n    name?: string,\r\n    oneOfMany: string,\r\n    belongsTo: string, \r\n    oneOfManyRelationName?: string,\r\n    belongsToRelationName?: string, \r\n    foreignKeyPrefix?: string, \r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation \r\n  {\r\n    return this.hasMany(defs, {\r\n      name: options.name,\r\n      one: options.belongsTo,\r\n      many: options.oneOfMany,\r\n      oneRelationName: options.belongsToRelationName,\r\n      manyRelationName: options.oneOfManyRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // hasOne{one_id} has one one{id}\r\n  public static hasOne(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    one: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName?: string,\r\n    oneRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.hasOne;\r\n    const subjectRelationName = options.hasOneRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps,\r\n      }],\r\n      relatedRelationName,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // one{id} belongs to belongsTo{one_id}\r\n  public static belongsToOne(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string,\r\n    belongsTo: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    oneRelationName?: string,\r\n    belongsToRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    return this.hasOne(defs, {\r\n      name: options.name,\r\n      hasOne: options.belongsTo,\r\n      one: options.one,\r\n      required: options.required,\r\n      owns: options.owns,\r\n      hasOneRelationName: options.belongsToRelationName,\r\n      oneRelationName: options.oneRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n    })\r\n  }\r\n\r\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\r\n  public static hasOnePolymorphic(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    morphs: [string, any],\r\n    morphsToRelated: MapInput<any, string>,\r\n    poly: string[],\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName: string,\r\n    polyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const subjectRelationName = options.hasOneRelationName;\r\n    const relatedRelationName = options.polyRelationName || options.hasOne;\r\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const related = options.poly.map((polyName) => ({\r\n      name: polyName, \r\n      props: defs.getEntity(polyName).getPrimary().props\r\n    }));\r\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related,\r\n      relatedRelationName,\r\n      morphs: options.morphs,\r\n      morphsToRelated: options.morphsToRelated,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { NoExpression } from './exprs/No';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { arraySync, isNumber, now } from './fns';\r\n\r\n\r\nexport interface ProgramOptions\r\n{\r\n  name: string;\r\n  author: string;\r\n  description: string;\r\n  meta: any;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  datasets: ProgramDataSet[];\r\n  expression: any;\r\n}\r\n\r\nexport interface ProgramDataSet\r\n{\r\n  name: string;\r\n  data: any;\r\n  created: number;\r\n  updated: number;\r\n  meta: any;\r\n}\r\n\r\nexport interface ProgramEvents\r\n{\r\n  changed(program: Program): void;\r\n  renamed(program: Program, oldName: string): void;\r\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\r\n  addDataset(program: Program, dataset: ProgramDataSet): void;\r\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\r\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\r\n  moveDataset(program: Program, dataset: ProgramDataSet, from: number, to: number): void;\r\n}\r\n\r\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\r\n    return new Program({\r\n      name,\r\n      author: '',\r\n      description: '',\r\n      meta: null,\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      datasets: [{\r\n        name: 'Data Set #1',\r\n        data: Object.create(null),\r\n        created: now(),\r\n        updated: now(),\r\n        meta: null,\r\n      }],\r\n      expression: NoExpression.instance,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public author: string;\r\n  public description: string;\r\n  public meta: any;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public datasets: ProgramDataSet[];\r\n  public expression: Expression;\r\n\r\n  public constructor(options: ProgramOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.author = options.author;\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.created = options.created;\r\n    this.updated = options.updated;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\r\n  }\r\n\r\n  public sync(options: ProgramOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.author = options.author;\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.created = options.created;\r\n      this.updated = options.updated;\r\n      this.dataType = options instanceof Program\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.expression = options instanceof Program\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n\r\n      arraySync(\r\n        this.datasets, \r\n        options instanceof Program\r\n          ? options.datasets\r\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\r\n        (a, b) => a.name === b.name || a.created === b.created,\r\n        (target, value) => this.addDataset(value, true),\r\n        (target, index, value) => this.removeDataset(index, true),\r\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ProgramOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ProgramOptions \r\n  {\r\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\r\n\r\n    return {\r\n      name,\r\n      author,\r\n      description,\r\n      meta,\r\n      created,\r\n      updated,\r\n      dataType: dataType.encode(),\r\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\r\n      expression: expression.encode(),\r\n    };\r\n  }\r\n\r\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\r\n  {\r\n    this.datasets.push(dataset);\r\n\r\n    this.trigger('addDataset', this, dataset);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public moveDataset(dataset: ProgramDataSet | number, to: number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(dataset)\r\n      ? dataset\r\n      : this.datasets.indexOf(dataset);\r\n    const exists = index >= 0 && index < this.datasets.length;\r\n    const inside = to >= 0 && to < this.datasets.length;\r\n    const movable = exists && inside;\r\n\r\n    if (movable)\r\n    {\r\n      const data = this.datasets[index];\r\n\r\n      this.datasets.splice(index, 1);\r\n      this.datasets.splice(to, 0, data);\r\n\r\n      this.trigger('moveDataset', this, data, index, to);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return movable;\r\n  }\r\n\r\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: Partial<ProgramDataSet>, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(dataset)\r\n      ? this.datasets[dataset]\r\n      : dataset;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newDataset);\r\n\r\n      this.trigger('updateDataset', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(dataset)\r\n      ? dataset\r\n      : this.datasets.indexOf(dataset);\r\n    const exists = index >= 0 && index < this.datasets.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.datasets[index];\r\n\r\n      DataTypes.arrayRemove(this.datasets, index);\r\n      \r\n      this.trigger('removeDataset', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.datasets.forEach((dataset) => \r\n    {\r\n      dataset.data = cmd({ value: dataset.data });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n  \r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Expression } from './Expression';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { now } from './fns';\r\n\r\n\r\nexport interface ReferenceDataOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  data: any;\r\n  meta: any;\r\n}\r\n\r\nexport interface ReferenceDataEvents\r\n{\r\n  changed(data: ReferenceData): void;\r\n  renamed(data: ReferenceData, oldName: string): void;\r\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\r\n}\r\n\r\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\r\n    return new ReferenceData({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      data: Object.create(null),\r\n      meta: null,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public data: any;\r\n  public meta: any;\r\n\r\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.meta = options.meta;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.data = this.dataType.fromJson(options.data);\r\n  }\r\n\r\n  public sync(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.meta = options.meta;\r\n      this.dataType = options instanceof ReferenceData\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.data = options instanceof ReferenceData\r\n        ? options.data\r\n        : this.dataType.fromJson(options.data);\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ReferenceDataOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ReferenceDataOptions\r\n  {\r\n    const { name, created, updated, meta, dataType, data } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      meta,\r\n      dataType: dataType.encode(),\r\n      data: dataType.toJson(data),\r\n    };\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    this.data = runtime.run(transform, { value: this.data });\r\n\r\n    this.changed();\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class ReferenceType extends Type<string>\r\n{\r\n\r\n  public static STEP_REFERENCED = 'referenced';\r\n\r\n  public static id = ID.Reference;\r\n\r\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\r\n\r\n  public static baseType = new ReferenceType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ReferenceType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new ReferenceType( type, types );\r\n  }\r\n\r\n  public static encode(type: ReferenceType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    if (!this.provider)\r\n    {\r\n      return NullType.baseType;\r\n    }\r\n\r\n    const data = this.provider.getData(this.options);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReferenceType.id;\r\n  }\r\n\r\n  public merge(type: ReferenceType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof ReferenceType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ReferenceType.STEP_REFERENCED\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === referenced\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReferenceType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, isObject } from '../fns';\r\n\r\n\r\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\r\n\r\n\r\nexport class FastMap<T>\r\n{\r\n\r\n  public indexes: Record<string, number>;\r\n  public keys: string[];\r\n  public values: T[];\r\n\r\n  public constructor(options?: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: FastMapOptions<T>)\r\n  {\r\n    if (options instanceof Map)\r\n    {\r\n      for (const [key, value] of options.entries())\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (options instanceof FastMap)\r\n    {\r\n      for (let i = 0; i < options.length(); i++)\r\n      {\r\n        this.set(options.keyAt(i), options.valueAt(i));\r\n      }\r\n    }\r\n    else if (isArray(options))\r\n    {\r\n      for (const [key, value] of options)\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (isObject(options))\r\n    {\r\n      for (const key in options)\r\n      {\r\n        this.set(key, options[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\r\n  {\r\n    const all = new FastMap(options);\r\n\r\n    this.filter((_, key) => all.has(key));\r\n    \r\n    all.forEach((value, key) => {\r\n      if (this.has(key) && combine) {\r\n        combine(this.get(key), value);\r\n      } else {\r\n        this.set(key, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  public clear()\r\n  {\r\n    this.indexes = Object.create(null);\r\n    this.keys = [];\r\n    this.values = [];\r\n  }\r\n\r\n  public length(): number\r\n  {\r\n    return this.keys.length;\r\n  }\r\n\r\n  public valueAt(i: number): T | undefined\r\n  {\r\n    return this.values[i];\r\n  }\r\n\r\n  public keyAt(i: number): string | undefined\r\n  {\r\n    return this.keys[i];\r\n  }\r\n\r\n  public pairAt(i: number): [string, T] | [undefined, undefined]\r\n  {\r\n    return [this.keys[i], this.values[i]];\r\n  }\r\n\r\n  public has(key: string | T): boolean\r\n  { \r\n    return isString(key) ? key in this.indexes : this.values.includes(key);\r\n  }\r\n\r\n  public set(key: string, value: T)\r\n  {\r\n    const i = this.indexes[key];\r\n\r\n    if (isNumber(i)) \r\n    {\r\n      this.values.splice(i, 1, value);\r\n    } \r\n    else \r\n    {\r\n      this.indexes[key] = this.values.length;\r\n      this.values.push(value);\r\n      this.keys.push(key);\r\n    }\r\n  }\r\n\r\n  public rekey(old: string | T, newKey: string): boolean\r\n  {\r\n    const i = this.indexOf(old);\r\n    const exists = i !== -1;\r\n\r\n    if (exists)\r\n    {\r\n      delete this.indexes[this.keys[i]];\r\n      this.indexes[newKey] = i;\r\n      this.keys.splice(i, 1, newKey);\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public sort(cmp: (a: T, b: T) => number)\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\r\n  }\r\n\r\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\r\n  }\r\n\r\n  public reindex(): void\r\n  {\r\n    const keys = this.keys;\r\n    const indexes = Object.create(null);\r\n\r\n    for (let i = 0; i < keys.length; i++)\r\n    {\r\n      indexes[keys[i]] = i;\r\n    }\r\n\r\n    this.indexes = indexes;\r\n  }\r\n\r\n  public swap(i: number, k: number): boolean\r\n  {\r\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const ikey = this.keys[i];\r\n    const ivalue = this.values[i];\r\n    const kkey = this.keys[k];\r\n    const kvalue = this.values[k];\r\n\r\n    this.indexes[ikey] = k;\r\n    this.indexes[kkey] = i;\r\n\r\n    this.keys.splice(i, 1, kkey);\r\n    this.keys.splice(k, 1, ikey);\r\n\r\n    this.values.splice(i, 1, kvalue);\r\n    this.values.splice(k, 1, ivalue);\r\n\r\n    return true;\r\n  }\r\n\r\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\r\n  {\r\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\r\n  }\r\n\r\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const { keys, values } = this;\r\n      const removing = values[i];\r\n\r\n      if (respectOrder)\r\n      {\r\n        this.removeAt(i);\r\n      }\r\n      else\r\n      {\r\n        delete this.indexes[keys[i]];\r\n        const lastKey = keys.pop();\r\n        const lastValue = values.pop();\r\n\r\n        if (i !== keys.length)\r\n        {\r\n          keys.splice(i, 1, lastKey);\r\n          values.splice(i, 1, lastValue);\r\n          this.indexes[lastKey] = i;\r\n        }\r\n      }\r\n\r\n      return removing;\r\n    }\r\n  }\r\n\r\n  public removeAt(i: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (i < 0 || i >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    delete this.indexes[keys[i]];\r\n    keys.splice(i, 1);\r\n    values.splice(i, 1);\r\n\r\n    while (++i < keys.length)\r\n    {\r\n      this.indexes[keys[i]]--;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public move(from: number, to: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (from !== to)\r\n    {\r\n      const value = values[from];\r\n      const key = keys[from];\r\n\r\n      values.splice(from, 1);\r\n      keys.splice(from, 1);\r\n\r\n      values.splice(to, 0, value);\r\n      keys.splice(to, 0, key);\r\n      \r\n      this.reindex();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public moveToFront(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, 0);\r\n  }\r\n\r\n  public moveToBack(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, this.keys.length - 1);\r\n  }\r\n\r\n  public indexOf(key: string | T): number\r\n  {\r\n    return isString(key) \r\n      ? key in this.indexes\r\n        ? this.indexes[key]\r\n        : -1\r\n      : this.values.indexOf(key);\r\n  }\r\n\r\n  public keyOf(value: T): string | undefined\r\n  {\r\n    const i = this.values.indexOf(value);\r\n\r\n    return i === -1 ? undefined : this.keys[i];\r\n  }\r\n\r\n  public toPairs(): Array<[string, T]>\r\n  {\r\n    return this.values.map((value, i) => [this.keys[i], value]);\r\n  }\r\n\r\n  public toMap(): Map<string, T>\r\n  {\r\n    return new Map(this.toPairs());\r\n  }\r\n\r\n  public toObject(): Record<string, T>\r\n  {\r\n    const obj = Object.create(null);\r\n\r\n    for (let i = 0; i < this.keys.length; i++)\r\n    {\r\n      obj[this.keys[i]] = this.values[i];\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  public clone(): FastMap<T>\r\n  {\r\n    return new FastMap(this);\r\n  }\r\n\r\n  public forEach(iterator: (value: T, key: string) => void)\r\n  {\r\n    const { keys, values } = this;\r\n    let i = 0;\r\n\r\n    while (i < keys.length)\r\n    {\r\n      const key = keys[i];\r\n      const value = values[i];\r\n\r\n      iterator(value, key);\r\n\r\n      if (keys[i] === key)\r\n      {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  public filter(pass: (value: T, key: string) => boolean)\r\n  {\r\n    const { values, keys, indexes } = this;\r\n    let passed = 0; \r\n    \r\n    for (let i = 0; i < values.length; i++) \r\n    {\r\n      const value = values[i];\r\n      const key = keys[i];\r\n\r\n      if (pass(value, key))\r\n      {\r\n        values[passed] = value;\r\n        keys[passed] = key;\r\n        indexes[key] = passed;\r\n        passed++;\r\n      }\r\n      else\r\n      {\r\n        delete indexes[key];\r\n      }\r\n    }\r\n\r\n    if (passed < values.length)\r\n    {\r\n      values.splice(passed, values.length - passed);\r\n      keys.splice(passed, keys.length - passed);\r\n    }\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\r\nimport { FastMap, FastMapOptions } from './FastMap';\r\n\r\n\r\nexport interface Named\r\n{\r\n  name: string;\r\n}\r\n\r\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\r\n\r\nexport class NamedMap<N extends Named> extends FastMap<N>\r\n{\r\n\r\n  public static isNamedArray<N extends Named>(x: any): x is N[]\r\n  {\r\n    return isArray(x) && x.length > 0 && isString(x[0].name);\r\n  }\r\n\r\n  public constructor(options?: NamedMapOptions<N>)\r\n  {\r\n    super();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: NamedMapOptions<N>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: NamedMapOptions<N>)\r\n  {\r\n    if (NamedMap.isNamedArray(options))\r\n    {\r\n      for (const named of options)\r\n      {\r\n        this.add(named);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      super.merge(options);\r\n    }\r\n  }\r\n\r\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\r\n  {\r\n    super.sync(new NamedMap(options), combine);\r\n  }\r\n\r\n  public syncManual<O extends Named = N>(\r\n    sourceOptions: NamedMapOptions<O>,\r\n    add: (target: this, value: O, key: string) => void,\r\n    remove: (target: this, value: N, key: string) => void,\r\n    update: (target: this, value: N, newValue: O, key: string) => void,\r\n    matches?: (a: N, b: O) => boolean,\r\n  ): this {\r\n    const source = new NamedMap<O>(sourceOptions);\r\n\r\n    if (matches) {\r\n      arraySync(\r\n        this.values, \r\n        source.values, \r\n        matches, \r\n        (target, value) => add(this, value, value.name), \r\n        (target, index, value) => remove(this, value, value.name),\r\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\r\n      );\r\n    } else {\r\n      this.forEach((targetValue, targetKey) => {\r\n        const existing = source.get(targetKey);\r\n        if (existing === undefined) {\r\n          remove(this, targetValue, targetKey);\r\n        } else {\r\n          update(this, targetValue, existing, targetKey);\r\n        }\r\n      });\r\n\r\n      source.forEach((sourceValue, sourceKey) => {\r\n        if (!this.has(sourceKey)) {\r\n          add(this, sourceValue, sourceKey);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public rename(namedInput: string | N, newName: string): boolean\r\n  {\r\n    const named = this.get(namedInput);\r\n    const valid = !!named && named.name !== newName;\r\n    \r\n    if (valid)\r\n    {\r\n      this.rekey(named, newName);\r\n      \r\n      named.name = newName;\r\n    }\r\n\r\n    return valid;\r\n  }\r\n\r\n  public has(named: string | N): boolean\r\n  {\r\n    return this.nameOf(named) in this.indexes;\r\n  }\r\n\r\n  public add(named: N)\r\n  {\r\n    this.set(named.name, named);\r\n  }\r\n\r\n  public nameOf(named: string | N): string\r\n  {\r\n    return isString(named) ? named : named.name;\r\n  }\r\n\r\n  public valueOf(named: string | N): N\r\n  {\r\n    return isString(named) ? this.get(named) : named;\r\n  }\r\n\r\n  public indexOf(named: string | N): number\r\n  {\r\n    const i = this.indexes[this.nameOf(named)];\r\n\r\n    return isNumber(i) ? i : -1;\r\n  }\r\n\r\n  public keyOf(named: N): string | undefined\r\n  {\r\n    return named.name;\r\n  }\r\n\r\n  public clone(): NamedMap<N>\r\n  {\r\n    return new NamedMap(this);\r\n  }\r\n\r\n}","\r\nimport { isArray, objectMap, objectValues, objectEach } from './fns';\r\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\r\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\r\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\r\nimport { Computeds, Computed } from './Computed';\r\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\r\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\r\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\r\nimport { Func, FuncOptions, FuncTest } from './Func';\r\nimport { Types } from './Types';\r\nimport { Traverser } from './Traverser';\r\nimport { ID } from './types/ID';\r\nimport { EntityType } from './types/Entity';\r\nimport { AnyType } from './types/Any';\r\nimport { ManyType } from './types/Many';\r\nimport { ObjectType } from './types/Object';\r\nimport { NullType } from './types/Null';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { NoExpression } from './exprs/No';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { ReferenceType } from './types/Reference';\r\nimport { NamedMap } from './maps/NamedMap';\r\nimport { FastMap } from './maps/FastMap';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\n\r\nexport interface DefinitionsImportOptions\r\n{\r\n  entities?: Record<string, Entity | EntityOptions>;\r\n  functions?: Record<string, Func | FuncOptions>;\r\n  relations?: Record<string, RelationOptions>;\r\n  programs?: Record<string, Program | ProgramOptions>;\r\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\r\n}\r\n\r\nexport interface DefinitionsOptions extends DefinitionsImportOptions\r\n{\r\n  types?: TypeClass[];\r\n  expressions?: ExpressionClass[];\r\n}\r\n\r\nexport type DefinitionsReferenceSource = \r\n  Program | \r\n  [Program, ProgramDataSet] |\r\n  Entity | \r\n  [Entity, 'key' | 'describe'] |\r\n  [Entity, string, EntityTranscoder] |\r\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\r\n  [Entity, Func] |\r\n  [Entity, Func, 'params' | 'returnType'] |\r\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\r\n  Func | \r\n  [Func, 'params' | 'returnType'] |\r\n  [Func, FuncTest, 'args' | 'expected'] |\r\n  Relation |\r\n  ReferenceData;\r\n\r\nexport type DefinitionsEntityReference = (\r\n  { value: EntityType, root: Type } |\r\n  { value: GetEntityExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport type DefinitionsDataReference = (\r\n  { value: ReferenceType, root: Type } |\r\n  { value: GetDataExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport interface DefinitionsRelationReference\r\n{\r\n  value: GetRelationExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsFunctionReference\r\n{\r\n  value: InvokeExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionReference<E extends Expression>\r\n{\r\n  value: E;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeReference<T extends Type>\r\n{\r\n  value: T;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataTypeReference<T extends Type>\r\n{\r\n  type: T;\r\n  data: any;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataInstance\r\n{\r\n  data: any;\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeInstance\r\n{\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionInstance\r\n{\r\n  expr: Expression;\r\n  context: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsEvents\r\n{\r\n  changed(defs: Definitions): void;\r\n  sync(defs: Definitions, options: DefinitionsOptions): void;\r\n\r\n  addRelation(defs: Definitions, relation: Relation): void;\r\n  removeRelation(defs: Definitions, relation: Relation): void;\r\n  updateRelation(defs: Definitions, relation: Relation): void;\r\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\r\n  clearRelations(defs: Definitions, relations: Relation[]): void;\r\n  changedRelations(defs: Definitions): void;\r\n  \r\n  addProgram(defs: Definitions, program: Program): void;\r\n  removeProgram(defs: Definitions, program: Program): void;\r\n  updateProgram(defs: Definitions, program: Program): void;\r\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\r\n  clearPrograms(defs: Definitions, programs: Program[]): void;\r\n  changedPrograms(defs: Definitions): void;\r\n  \r\n  addEntity(defs: Definitions, entity: Entity): void;\r\n  removeEntity(defs: Definitions, entity: Entity): void;\r\n  updateEntity(defs: Definitions, entity: Entity): void;\r\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\r\n  clearEntities(defs: Definitions, entities: Entity[]): void;\r\n  changedEntities(defs: Definitions): void;\r\n  \r\n  addFunction(defs: Definitions, func: Func): void;\r\n  removeFunction(defs: Definitions, func: Func): void;\r\n  updateFunction(defs: Definitions, func: Func): void;\r\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\r\n  clearFunctions(defs: Definitions, functions: Func[]): void;\r\n  changedFunctions(defs: Definitions): void;\r\n\r\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\r\n  changedMethods(defs: Definitions): void;\r\n  \r\n  addData(defs: Definitions, data: ReferenceData): void;\r\n  removeData(defs: Definitions, data: ReferenceData): void;\r\n  updateData(defs: Definitions, data: ReferenceData): void;\r\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\r\n  clearData(defs: Definitions, data: ReferenceData[]): void;\r\n  changedData(defs: Definitions): void;\r\n}\r\n\r\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\r\n{\r\n\r\n  public types: Record<string, TypeClass>;\r\n  public typeList: TypeClass[];\r\n  public describers: TypeClass[];\r\n  public parsers: Record<string, TypeParser>;\r\n  public expressions: Record<string, ExpressionClass>;\r\n  public operations: Operations;\r\n  public computeds: Computeds;\r\n\r\n  public relations: NamedMap<Relation>;\r\n  public programs: NamedMap<Program>;\r\n  public entities: NamedMap<Entity>;\r\n  public functions: NamedMap<Func>;\r\n  public data: NamedMap<ReferenceData>;\r\n\r\n  public keyExpectedType: Type;\r\n  public describeExpectedType: Type;\r\n\r\n  private legacy: boolean = false;\r\n\r\n  public constructor(initial?: DefinitionsOptions)\r\n  { \r\n    super();\r\n\r\n    this.types = Object.create(null);\r\n    this.typeList = [];\r\n    this.describers = [];\r\n    this.expressions = Object.create(null);\r\n    this.operations = new Operations('');\r\n    this.computeds = new Computeds('');\r\n    this.parsers = Object.create(null);\r\n\r\n    this.entities = new NamedMap();\r\n    this.functions = new NamedMap();\r\n    this.relations = new NamedMap();\r\n    this.programs = new NamedMap();\r\n    this.data = new NamedMap();\r\n\r\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\r\n    this.describeExpectedType = Types.text();\r\n\r\n    if (initial) \r\n    {\r\n      this.add(initial);\r\n    }\r\n  }\r\n\r\n  public isLegacy(): boolean\r\n  {\r\n    return this.legacy;\r\n  }\r\n\r\n  public setLegacy(): void\r\n  {\r\n    this.legacy = true;\r\n  }\r\n\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\r\n  {\r\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\r\n  }\r\n\r\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\r\n  { \r\n    const copy = new Definitions({\r\n      types: objectValues(this.types),\r\n      expressions: objectValues(this.expressions),\r\n      entities: this.encodeMap(this.entities, deepCopy),\r\n      functions: this.encodeMap(this.functions, deepCopy),\r\n      relations: this.encodeMap(this.relations, deepCopy),\r\n      programs: this.encodeMap(this.programs, deepCopy),\r\n      data: this.encodeMap(this.data, deepCopy),\r\n    });\r\n\r\n    if (initial)\r\n    {\r\n      copy.add(initial);\r\n    }\r\n\r\n    return copy;\r\n  }\r\n  \r\n  public changed()\r\n  {\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public add(options: DefinitionsOptions)\r\n  {\r\n    if (options.types) \r\n    {\r\n      options.types.forEach(type => this.addType(type, true));\r\n    }\r\n\r\n    this.sortDescribers();\r\n\r\n    if (options.expressions) \r\n    {\r\n      options.expressions.forEach(expr => this.addExpression(expr));\r\n    }\r\n\r\n    this.import(options);\r\n  }\r\n\r\n  public describe(completeData: any): Type\r\n  {\r\n    const described: Map<any, any> = new Map();\r\n\r\n    const provider: TypeDescribeProvider = \r\n    {\r\n      describe: (data) => \r\n      {\r\n        let describedType = described.get(data);\r\n\r\n        if (describedType !== undefined) \r\n        {\r\n          return describedType;\r\n        }\r\n\r\n        for (const describer of this.describers)\r\n        {\r\n          describedType = describer.describe(data, provider, described);\r\n    \r\n          if (describedType)\r\n          {\r\n            return describedType;\r\n          }\r\n        }\r\n\r\n        return AnyType.baseType;\r\n      },\r\n      merge: (type, data) => \r\n      {\r\n        return this.merge(type, data);\r\n      },\r\n    };\r\n\r\n    return provider.describe(completeData);\r\n  }\r\n\r\n  public merge(type: Type, data: any): Type\r\n  {\r\n    return Types.merge(type, this.describe(data));\r\n  }\r\n  \r\n  public sortDescribers()\r\n  {\r\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\r\n  }\r\n\r\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \r\n  {\r\n    this.types[type.id] = type;\r\n    this.typeList.push(type);\r\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\r\n    this.describers.push(type);\r\n\r\n    if (!delaySort)\r\n    {\r\n      this.sortDescribers();\r\n    }\r\n\r\n    if (!type.registered)\r\n    {\r\n      type.registered = true;\r\n      type.register();\r\n    }\r\n  }\r\n\r\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\r\n  {\r\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\r\n\r\n    return found ? found.name : false;\r\n  }\r\n\r\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const data = dataOptions instanceof ReferenceData \r\n      ? dataOptions \r\n      : ReferenceData.create(this, dataOptions);\r\n\r\n    const existing = this.data.get(data.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(data, this);\r\n      }\r\n      else\r\n      {\r\n        this.data.add(data);\r\n      }\r\n      \r\n      this.trigger('updateData', this, data);\r\n    }\r\n    else\r\n    {\r\n      this.data.add(data);\r\n\r\n      this.trigger('addData', this, data);\r\n    }\r\n\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getData(name: string): ReferenceData | null\r\n  {\r\n    return this.data.get(name, null);\r\n  }\r\n\r\n  public getDatas(): NamedMap<ReferenceData>\r\n  {\r\n    return this.data;\r\n  }\r\n\r\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n\r\n    if (!data)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.data.remove(data, respectOrder);\r\n\r\n    this.trigger('removeData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearData(delayChange: boolean = false)\r\n  {\r\n    const data = this.data.values.slice();\r\n\r\n    this.data.clear();\r\n\r\n    this.trigger('clearData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n    const oldName = data.name;\r\n    \r\n    if (!this.data.rename(data, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getDataReferences(data);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof ReferenceType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    data.trigger('renamed', data, oldName);\r\n    data.changed();\r\n\r\n    this.trigger('renameData', this, data, oldName);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const func = funcOptions instanceof Func \r\n      ? funcOptions \r\n      : Func.create(this, funcOptions);\r\n\r\n    const existing = this.functions.get(func.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(func, this);\r\n      }\r\n      else\r\n      {\r\n        this.functions.add(func);\r\n      }\r\n      \r\n      this.trigger('updateFunction', this, func);\r\n    }\r\n    else\r\n    {\r\n      this.functions.add(func);\r\n\r\n      this.trigger('addFunction', this, func);\r\n    }\r\n\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction(name: string): Func | null\r\n  {\r\n    return this.functions.get(name, null);\r\n  }  \r\n\r\n  public getFunctions(): NamedMap<Func>\r\n  {\r\n    return this.functions;\r\n  }\r\n\r\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const program = programOptions instanceof Program \r\n      ? programOptions \r\n      : Program.create(this, programOptions);\r\n\r\n    const existing = this.programs.get(program.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(program, this);\r\n      }\r\n      else\r\n      {\r\n        this.programs.add(program);\r\n      }\r\n      \r\n      this.trigger('updateProgram', this, program);\r\n    }\r\n    else\r\n    {\r\n      this.programs.add(program);\r\n\r\n      this.trigger('addProgram', this, program);\r\n    }\r\n\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getProgram(name: string): Program | null\r\n  {\r\n    return this.programs.get(name, null);\r\n  }\r\n\r\n  public getPrograms(): NamedMap<Program>\r\n  {\r\n    return this.programs;\r\n  }\r\n\r\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n\r\n    if (!program)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    this.programs.remove(program, respectOrder);\r\n\r\n    this.trigger('removeProgram', this, program);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearPrograms(delayChange: boolean = false)\r\n  {\r\n    const programs = this.programs.values.slice();\r\n\r\n    this.programs.clear();\r\n\r\n    this.trigger('clearPrograms', this, programs);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n  \r\n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const entity = entityOptions instanceof Entity\r\n      ? entityOptions\r\n      : Entity.create(this, entityOptions);\r\n\r\n    const existing = this.entities.get(entity.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(entity, this);\r\n      }\r\n      else\r\n      {\r\n        this.entities.add(entity);\r\n      }\r\n      \r\n      this.trigger('updateEntity', this, entity);\r\n    }\r\n    else\r\n    {\r\n      this.entities.add(entity);\r\n\r\n      this.trigger('addEntity', this, entity);\r\n    }\r\n\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getEntity(name: string): Entity | null\r\n  {\r\n    return this.entities.get(name, null);\r\n  }\r\n\r\n  public getEntities(): NamedMap<Entity>\r\n  {\r\n    return this.entities;\r\n  }\r\n\r\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const relation = relationOptions instanceof Relation \r\n      ? relationOptions \r\n      : new Relation(this, relationOptions);\r\n\r\n    const existing = this.relations.get(relation.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(relation, this);\r\n      }\r\n      else\r\n      {\r\n        this.relations.add(relation);\r\n      }\r\n      \r\n      this.trigger('updateRelation', this, relation);\r\n    }\r\n    else\r\n    {\r\n      this.relations.add(relation);\r\n\r\n      this.trigger('addRelation', this, relation);\r\n    }\r\n\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getRelation(name: string): Relation | null\r\n  {\r\n    return this.relations.get(name, null);\r\n  }\r\n\r\n  public getRelations(entityName: string): EntityRelation[]\r\n  {\r\n    const relations: EntityRelation[] = [];\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      const subjectRelation = relation.getSubjectRelation(entityName);\r\n\r\n      if (subjectRelation)\r\n      {\r\n        relations.push(subjectRelation);\r\n      }\r\n\r\n      const relatedRelation = relation.getRelatedRelation(entityName);\r\n\r\n      if (relatedRelation)\r\n      {\r\n        relations.push(relatedRelation);\r\n      }\r\n    });\r\n\r\n    return relations;\r\n  }\r\n\r\n  public getEntityProps(name: string): EntityProps[]\r\n  {\r\n    const keys: EntityProps[] = [];\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      keys.push(entity.getEntityProps());\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        keys.push(...relation.getTypeProps(name));\r\n      });\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n\r\n    if (!relation)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.remove(relation, respectOrder);\r\n\r\n    this.trigger('removeRelation', this, relation);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearRelations(delayChange: boolean = false)\r\n  {\r\n    const relations = this.relations.values.slice();\r\n\r\n    this.relations.clear();\r\n\r\n    this.trigger('clearRelations', this, relations);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n    const oldName = program.name;\r\n\r\n    if (!this.programs.rename(program, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    program.trigger('renamed', program, oldName);\r\n    program.changed();\r\n\r\n    this.trigger('renameProgram', this, program, oldName);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n    const oldName = entity.name;\r\n\r\n    if (!this.entities.rename(entity, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.forEach((relation) => \r\n    {\r\n      relation.rename(name, newName);\r\n    });\r\n\r\n    const refs = this.getEntityReferences(name);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof EntityType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    const methods = this.getMethodReferences(name);\r\n\r\n    methods.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    entity.trigger('renamed', entity, oldName);\r\n    entity.changed();\r\n\r\n    this.trigger('renameEntity', this, entity, oldName);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.renameProp(prop, newProp);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.renameProp(entity.name, prop, newProp);\r\n      });\r\n    }\r\n  }\r\n\r\n  public removeEntityProp(name: string | Entity, prop: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.removeProp(prop);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.removeProp(entity.name, prop);\r\n\r\n        if (relation.isEmpty())\r\n        {\r\n          this.relations.remove(relation);\r\n        }\r\n      });\r\n    } \r\n  }\r\n\r\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.entities.remove(entity, respectOrder);\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      relation.remove(name);\r\n\r\n      if (relation.isEmpty())\r\n      {\r\n        this.relations.remove(relation, respectOrder);\r\n      }\r\n    });\r\n\r\n    this.trigger('removeEntity', this, entity);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearEntities(delayChange: boolean = false)\r\n  {\r\n    const entities = this.entities.values.slice();\r\n\r\n    this.entities.clear();\r\n\r\n    this.trigger('clearEntities', this, entities);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const refs = this.getEntityDataReferences(entity);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.root.setParent();\r\n\r\n      const dataTransform = ref.type.getValueChangeAt(transform);\r\n\r\n      ref.data = runtime.run(dataTransform, { value: ref.data });\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n    const oldName = relation.name;\r\n\r\n    if (!this.relations.rename(relation, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getRelationReferences(relation);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    relation.trigger('renamed', relation, oldName);\r\n    relation.changed();\r\n\r\n    this.trigger('renameRelation', this, relation, oldName);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n    const oldName = func.name;\r\n\r\n    if (!this.functions.rename(func, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(func);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    func.trigger('renamed', func, oldName);\r\n    func.changed();\r\n\r\n    this.trigger('renameFunction', this, func, oldName);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\r\n      DataTypes.objectRemove(ref.value.args, oldName);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectRemove(ref.value.args, name);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.functions.remove(func, respectOrder);\r\n\r\n    this.trigger('removeFunction', this, func);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearFunctions(delayChange: boolean = false)\r\n  {\r\n    const functions = this.functions.values.slice();\r\n    \r\n    this.functions.clear();\r\n\r\n    this.trigger('clearFunctions', this, functions);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = methodOptions instanceof Func \r\n      ? methodOptions \r\n      : Func.create(this, methodOptions);\r\n\r\n    const existing = entity.methods[method.name];\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(method, this);\r\n      }\r\n      else\r\n      {\r\n        entity.addMethod(method);\r\n      }\r\n      \r\n      this.trigger('updateMethod', this, method, entity);\r\n    }\r\n    else\r\n    {\r\n      entity.addMethod(method);\r\n\r\n      this.trigger('addMethod', this, method, entity);\r\n    }\r\n\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const oldName = method.name;\r\n\r\n    entity.renameMethod(oldName, newName);\r\n\r\n    const refs = this.getMethodReferences(entity, method);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    method.trigger('renamed', method, oldName);\r\n    method.changed();\r\n\r\n    this.trigger('renameMethod', this, method, entity, oldName);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\r\n      DataTypes.objectRemove(ref.value.args, oldName);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      DataTypes.objectRemove(ref.value.args, name);\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    entity.removeMethod(method.name);\r\n\r\n\r\n    this.trigger('removeMethod', this, method, entity);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  \r\n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \r\n  {\r\n    const parsed = this.getType(value);\r\n\r\n    return parsed instanceof kind ? parsed : otherwise;\r\n  }\r\n\r\n  public getType(value: any, otherwise?: Type): Type \r\n  {\r\n    if (value instanceof Type)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const id = isArray(value) ? value[0] : value;\r\n    const data = isArray(value) ? value : [];\r\n    const parser = this.parsers[id];\r\n\r\n    if (!parser)\r\n    {\r\n      if (this.entities.has(id))\r\n      {\r\n        return this.entities.get(id).type;\r\n      }\r\n\r\n      if (otherwise)\r\n      {\r\n        return otherwise;\r\n      }\r\n      \r\n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\r\n    }\r\n    \r\n    return parser(data, this);\r\n  }\r\n\r\n  public getBaseTypes(): Type[]\r\n  {\r\n    return this.typeList.map((t) => t.baseType);\r\n  }\r\n\r\n  public getSimpleTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => t.isSimple());\r\n  }\r\n\r\n  public getComplexTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => !t.isSimple());\r\n  }\r\n\r\n  public getSimpleTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => t.baseType.isSimple());\r\n  }\r\n\r\n  public getComplexTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => !t.baseType.isSimple());\r\n  }\r\n\r\n  public getComputed(id: string): Computed | null\r\n  {\r\n    const comp = this.computeds.get(id);\r\n\r\n    if (comp)\r\n    {\r\n      return comp;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.computeds.get(id) : null;\r\n  }\r\n\r\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\r\n  {\r\n    const comp = this.getComputed(id);\r\n\r\n    if (!comp)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const op = this.getOperation(comp.op);\r\n    const types = this.getOperationTypes(comp.op);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\r\n  }\r\n\r\n  public getComputedsFor(valueType: Type): Computed[]\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? typeClass.computeds.list : [];\r\n  }\r\n\r\n  public hasComputed(valueType: Type, id: string): boolean\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? !!typeClass.computeds.get(id) : false;\r\n  }\r\n\r\n  public getOperation(id: string): OperationGeneric | null\r\n  {\r\n    const op = this.operations.get(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.get(id) : null;\r\n  }\r\n\r\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\r\n  {\r\n    const op = this.operations.getTypes(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.getTypes(id) : null;\r\n  }\r\n\r\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\r\n  {\r\n    const op = this.getOperation(id);\r\n    const types = this.getOperationTypes(id);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const returnType = types.returnType;\r\n\r\n    if (returnType instanceof Type)\r\n    {\r\n      return returnType;\r\n    }\r\n\r\n    if (!isOperationTypeFunction(returnType))\r\n    {\r\n      return returnType.baseType.newInstance();\r\n    }\r\n\r\n    const paramTypes = op.resultDependency.length > 0\r\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\r\n      : {};\r\n\r\n    return this.getOperationInputType(types.returnType, paramTypes);\r\n  }\r\n\r\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!opTypes)\r\n    {\r\n      return {};\r\n    }\r\n\r\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\r\n\r\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\r\n  }\r\n\r\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const types: TypeMap = {};\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!op || !opTypes)\r\n    {\r\n      return types;\r\n    }\r\n    \r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) === -1)\r\n      {\r\n        const paramType = params[param].getType(this, context);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) !== -1)\r\n      {\r\n        const paramType = params[param].getType(this, paramContext);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const param of op.params)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\r\n      }\r\n    }\r\n\r\n    for (const param of op.optional)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\r\n      }\r\n    }\r\n\r\n    return types;\r\n  }\r\n\r\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\r\n  {\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    return scopedContext;\r\n  }\r\n\r\n  public getContextWithScope(original: Type, scope: TypeMap = {})\r\n  {\r\n    const context = original instanceof ObjectType\r\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\r\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\r\n\r\n    return { context, scope };\r\n  }\r\n\r\n  public getContext(original: Type, scope: TypeMap): Type\r\n  {\r\n    return this.getContextWithScope(original, scope).context;\r\n  }\r\n\r\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\r\n  {\r\n    type ParamTuple = [string, Type, number];\r\n\r\n    const from = this.getOperation(fromId);\r\n    const fromTypes = this.getOperationTypes(toId);\r\n    const fromVars = from.params.concat(from.optional);\r\n    const to = this.getOperation(toId);\r\n    const toTypes = this.getOperationTypes(toId);\r\n    const mapping: Record<string, string> = Object.create(null);\r\n    const mapped: TypeMap = Object.create(null);\r\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \r\n      [key, value, fromVars.indexOf(key)];\r\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\r\n      .filter(([,, index]) => index >= 0)\r\n      .sort(([,, a], [,, b]) => a - b);\r\n\r\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \r\n    {\r\n      if (paramTypes.length === 0)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      let chosenIndex = -1;\r\n\r\n      if (isOperationTypeFunction(typeInput))\r\n      {\r\n        chosenIndex = paramTypes.findIndex(([, type]) => \r\n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\r\n        \r\n        if (chosenIndex === -1)\r\n        {\r\n          chosenIndex = paramTypes.findIndex(([, type]) =>\r\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\r\n        }\r\n      }\r\n      else\r\n      {\r\n        const paramType = Types.parse(typeInput);\r\n\r\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\r\n      }\r\n\r\n      if (chosenIndex === -1)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      const chosen = paramTypes[chosenIndex];\r\n      paramTypes.splice(chosenIndex, 1);\r\n      mapping[chosen[0]] = param;\r\n      mapped[param] = chosen[1];\r\n    };\r\n    \r\n    for (const param of to.params)\r\n    {\r\n      const tuple = getParamTuple(param, toTypes.params[param]);\r\n\r\n      if (tuple === null)\r\n      {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    for (const optional of to.optional)\r\n    {\r\n      getParamTuple(optional, toTypes.optional[optional]);\r\n    }\r\n\r\n    const unmapped = paramTypes.map(([key]) => key);\r\n    \r\n    return { from, fromTypes, to, toTypes, mapping, unmapped };\r\n  }\r\n\r\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\r\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\r\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : 'baseType' in input\r\n        ? input.baseType.clone()\r\n        : params\r\n          ? Types.parse(input(params, this))\r\n          : null;\r\n  }\r\n\r\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\r\n  }\r\n\r\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\r\n  {\r\n    return this.getOperations()\r\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\r\n      .filter((mapping) => !!mapping);\r\n  }\r\n\r\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) => \r\n    {\r\n      const paramName = op.params[0];\r\n      const opTypeInput = types.params[paramName];\r\n\r\n      if (opTypeInput) \r\n      {\r\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\r\n\r\n        if (opType)\r\n        {\r\n          if (type.acceptsType(opType))\r\n          {\r\n            return true;\r\n          }\r\n\r\n          if (acceptsDynamic && \r\n            op.resultDependency.length > 0 && \r\n            isOperationTypeFunction(types.returnType) && \r\n            (opType instanceof AnyType || opType instanceof NullType))\r\n          {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\r\n  }\r\n\r\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) =>\r\n    {\r\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\r\n\r\n      if (returnType)\r\n      {\r\n        if (type.acceptsType(returnType))\r\n        {\r\n          return true;\r\n        }\r\n\r\n        if (acceptsDynamic && \r\n          op.resultDependency.length > 0 && \r\n          isOperationTypeFunction(types.returnType) && \r\n          (returnType instanceof AnyType || returnType instanceof NullType))\r\n        {\r\n          return true;\r\n        }\r\n      }      \r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\r\n  {\r\n    return this.getOperationsForParamTypes(objectMap(params, expr => \r\n    {\r\n      const type = expr.getType(this, context);\r\n\r\n      return type ? type.getSimplifiedType() : undefined;\r\n    }));\r\n  }\r\n\r\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\r\n  {\r\n    const paramNames = Object.keys(paramTypes);\r\n\r\n    return this.getOperations(({ types }) => \r\n    {\r\n      for (const param of paramNames)\r\n      {\r\n        const opTypeInput = types.params[param] || types.optional[param];\r\n\r\n        if (!opTypeInput)\r\n        {\r\n          return false;\r\n        }\r\n\r\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\r\n\r\n        if (!opType || !paramTypes[param].acceptsType(opType))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\r\n  {\r\n    const ops: OperationPair[] = [];\r\n\r\n    const iterateOperations = (operations: Operations) => \r\n    {\r\n      const map = operations.map;\r\n\r\n      for (const id in map)\r\n      {\r\n        const op = map[id];\r\n        const types = operations.types[id];\r\n        const pair = { op, types };\r\n\r\n        if (onOperation(pair))\r\n        {\r\n          ops.push(pair);\r\n        }\r\n      }\r\n    };\r\n\r\n    iterateOperations(this.operations);\r\n\r\n    objectEach(this.types, t => iterateOperations(t.operations));\r\n\r\n    return ops;\r\n  }\r\n\r\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\r\n  {\r\n    let thisType = path[0].getType(this, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let optional = thisType.isOptional();\r\n\r\n    for (let i = 1; i < stopBefore; i++)\r\n    {\r\n      const node = path[i];\r\n\r\n      thisType = node.isPathNode()\r\n        ? node.getType(this, context, thisType)\r\n        : thisType.getSubType(node, this, context);\r\n\r\n      if (!thisType)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      optional = optional || thisType.isOptional();\r\n    }\r\n\r\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\r\n  }\r\n\r\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \r\n  {\r\n    this.expressions[expr.id] = expr;\r\n  }\r\n\r\n  public getExpression(value: any): Expression \r\n  {\r\n    if (value instanceof Expression)\r\n    {\r\n      return value;\r\n    }\r\n    else if (isArray(value))\r\n    {\r\n      const exprClass = this.expressions[value[0]];\r\n\r\n      if (!exprClass)\r\n      {\r\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\r\n      }\r\n\r\n      return exprClass.decode(value, this);\r\n    }\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\r\n  { \r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsEntityReference[]).concat(exprs);\r\n  }\r\n\r\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\r\n  {\r\n    const name = data ? this.data.nameOf(data) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsDataReference[]).concat(exprs);\r\n  }\r\n\r\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.type.options);\r\n    });\r\n  }\r\n\r\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\r\n  {\r\n    const name = relation ? this.relations.nameOf(relation) : undefined;\r\n\r\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n  }\r\n\r\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const name = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\r\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\r\n    const methodName = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\r\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsTypeReference<T>[] = [];\r\n\r\n    this.getTypeInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((ref) => {\r\n        if (ref instanceof typeClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsDataTypeReference<T>[] = [];\r\n\r\n    this.getDataInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((type) => {\r\n        if (type instanceof typeClass) {\r\n          refs.push({\r\n            type, \r\n            data: instance.data,\r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\r\n  {\r\n    const refs: DefinitionsExpressionReference<E>[] = [];\r\n\r\n    this.getExpressionInstances().forEach((instance) => {\r\n      instance.expr.traverse(new Traverser((ref) => {\r\n        if (ref instanceof exprClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.expr,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataInstances(): DefinitionsDataInstance[]\r\n  {\r\n    const instances: DefinitionsDataInstance[] = [];\r\n\r\n\r\n    this.programs.forEach((program) => {\r\n      program.datasets.forEach((dataset) => {\r\n        instances.push({\r\n          data: dataset.data,\r\n          type: program.dataType,\r\n          source: [program, dataset],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      const returnType = func.getReturnType(this);\r\n\r\n      func.tests.forEach((test) => {\r\n        instances.push({\r\n          data: test.args,\r\n          type: func.params,\r\n          source: [func, test, 'args'],\r\n        });\r\n\r\n        instances.push({\r\n          data: test.expected,\r\n          type: returnType,\r\n          source: [func, test, 'expected'],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        data: data.data,\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      if (entity.instances && entity.instances.length > 0) {\r\n        instances.push({\r\n          data: entity.instances,\r\n          type: Types.list(entity.type),\r\n          source: entity,\r\n        });\r\n      }\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        const returnType = method.getReturnType(this);\r\n\r\n        method.tests.forEach((test) => {\r\n          instances.push({\r\n            data: test.args,\r\n            type: method.params,\r\n            source: [entity, method, test, 'args'],\r\n          });\r\n\r\n          instances.push({\r\n            data: test.expected,\r\n            type: returnType,\r\n            source: [entity, method, test, 'expected'],\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\r\n  {\r\n    const instances: DefinitionsTypeInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        type: program.dataType,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        type: func.params,\r\n        source: [func, 'params'],\r\n      });\r\n\r\n      if (dynamic) {\r\n        instances.push({\r\n          type: func.getReturnType(this),\r\n          source: [func, 'returnType'],\r\n        });\r\n      }\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      instances.push({\r\n        type: entity.type,\r\n        source: entity,\r\n      });\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          type: method.params,\r\n          source: [entity, method, 'params'],\r\n        });\r\n\r\n        if (dynamic) {\r\n          instances.push({\r\n            type: method.getReturnType(this),\r\n            source: [entity, method, 'returnType'],\r\n          });\r\n        }\r\n      });\r\n\r\n      if (dynamic) {\r\n        if (entity.key !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getKeyContext(),\r\n            source: [entity, 'key'],\r\n          });\r\n        }\r\n        \r\n        if (entity.describe !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getDescribeContext(),\r\n            source: [entity, 'describe'],\r\n          });\r\n        }\r\n      }\r\n\r\n      objectEach(entity.transcoders, (transcoder, prop) => {\r\n        instances.push({\r\n          type: transcoder.encodedType,\r\n          source: [entity, prop, transcoder],\r\n        });\r\n      });\r\n    });\r\n\r\n    if (dynamic) {\r\n      this.relations.forEach((relation) => {\r\n        if (relation.morphs) {\r\n          instances.push({\r\n            type: relation.morphs[1],\r\n            source: relation,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\r\n  {\r\n    const instances: DefinitionsExpressionInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        context: program.dataType,\r\n        expr: program.expression,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        context: func.params,\r\n        expr: func.expression,\r\n        source: func,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          context: method.getParamTypes(),\r\n          expr: method.expression,\r\n          source: [entity, method],\r\n        });\r\n      });\r\n\r\n      if (entity.canStore(this)) {\r\n        instances.push({\r\n          context: entity.getKeyContext(),\r\n          expr: entity.key,\r\n          source: [entity, 'key'],\r\n        });\r\n\r\n        instances.push({\r\n          context: entity.getDescribeContext(),\r\n          expr: entity.describe,\r\n          source: [entity, 'describe'],\r\n        });\r\n\r\n        objectEach(entity.transcoders, (transcoder, prop) => {\r\n          instances.push({\r\n            context: entity.getEncodeContext(prop),\r\n            expr: transcoder.encode,\r\n            source: [entity, prop, transcoder, 'encode'],\r\n          });\r\n\r\n          instances.push({\r\n            context: entity.getDecodeContext(prop),\r\n            expr: transcoder.decode,\r\n            source: [entity, prop, transcoder, 'decode'],\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public export(): DefinitionsImportOptions\r\n  {\r\n    return {\r\n      entities: this.encodeMap(this.entities),\r\n      functions: this.encodeMap(this.functions),\r\n      relations: this.encodeMap(this.relations),\r\n      programs: this.encodeMap(this.programs),\r\n      data: this.encodeMap(this.data),\r\n    };\r\n  }\r\n\r\n  public sync(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      this.data.syncManual(\r\n        exported.data,\r\n        (map, value) => this.addData(value, false, true),\r\n        (map, value) => this.removeData(value, false, true, true),\r\n        (map, value, newValue) => this.addData(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      this.functions.syncManual(\r\n        exported.functions,\r\n        (map, value) => this.addFunction(value, false, true),\r\n        (map, value) => this.removeFunction(value, false, true, true),\r\n        (map, value, newValue) => this.addFunction(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.entities)\r\n    {\r\n      this.entities.syncManual(\r\n        exported.entities,\r\n        (map, value) => this.addEntity(value, false, true),\r\n        (map, value) => this.removeEntity(value, false, true, true),\r\n        (map, value, newValue) => this.addEntity(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      this.relations.syncManual(\r\n        exported.relations,\r\n        (map, value) => this.addRelation(value, false, true),\r\n        (map, value) => this.removeRelation(value, false, true, true),\r\n        (map, value, newValue) => this.addRelation(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      this.programs.syncManual(\r\n        exported.programs,\r\n        (map, value) => this.addProgram(value, false, true),\r\n        (map, value) => this.removeProgram(value, true, true),\r\n        (map, value, newValue) => this.addProgram(newValue, true, true),\r\n      );\r\n    }\r\n  }\r\n\r\n  public import(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      objectEach(exported.data, (data) => \r\n        this.addData(data)\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      objectEach(exported.functions, (func) => \r\n        this.addFunction(func)\r\n      );\r\n    }\r\n\r\n    if (exported.entities) \r\n    {\r\n      objectEach(exported.entities, (instance) => \r\n        this.addEntity(instance)\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      objectEach(exported.relations, (options) => \r\n        this.addRelation(options)\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      objectEach(exported.programs, (options) => \r\n        this.addProgram(options)\r\n      );\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\r\nimport { Definitions } from './Definitions';\r\nimport { Expression, ExpressionClass } from './Expression';\r\nimport { isArray } from './fns';\r\nimport { Operation } from './Operation';\r\nimport { Computed } from './Computed';\r\nimport { Func } from './Func';\r\n\r\n\r\n\r\nexport class Runtime<Context = any, Result = any>\r\n{\r\n\r\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\r\n\r\n  public defs: Definitions;\r\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\r\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\r\n  public returnProperty: string;\r\n\r\n  public constructor (defs: Definitions) \r\n  {\r\n    this.defs = defs;\r\n    this.ops = Object.create(null);\r\n    this.exprs = Object.create(null);\r\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\r\n  }\r\n\r\n  public extend(defs?: Definitions): Runtime<Context, Result>\r\n  {\r\n    const copy = new Runtime(defs || this.defs);\r\n\r\n    Object.assign(copy.ops, this.ops);\r\n    Object.assign(copy.exprs, this.exprs);\r\n    copy.returnProperty = this.returnProperty;\r\n\r\n    return copy;\r\n  }\r\n\r\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\r\n    operation: Operation<P, O, S, any, any>, \r\n    impl: OperationToCommand<Context, Result, P, O, S>\r\n  ): this \r\n  {\r\n    this.ops[operation.id] = impl;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\r\n  {\r\n    this.exprs[type.id] = getter;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction (name: string): Func\r\n  {\r\n    return this.defs.getFunction(name);\r\n  }\r\n\r\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \r\n  {\r\n    return this.ops[id];\r\n  }\r\n\r\n  public getComputed (id: string): Computed | null \r\n  {\r\n    return this.defs.getComputed(id);\r\n  }\r\n  \r\n  public getOperationScopeDefaults (id: string): Record<string, string>\r\n  {\r\n    const op = this.defs.getOperation(id);\r\n\r\n    return op ? op.scopeDefaults : {};\r\n  }\r\n\r\n  public getExpression (id: string): CommandBuilder<Context, Result>\r\n  {\r\n    return this.exprs[id];\r\n  }\r\n\r\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\r\n  {\r\n    return this.exprs[expr.getId()](expr, provider);\r\n  }\r\n\r\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\r\n  {\r\n    return this.eval(expr, provider)(context);\r\n  }\r\n\r\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \r\n  {\r\n    return isArray(value)\r\n      ? this.getCommand(this.defs.getExpression(value), provider)\r\n      : () => value;\r\n  }\r\n\r\n}","import { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_PATH = 2;\r\n\r\nexport class SubExpression extends Expression \r\n{\r\n\r\n  public static id = 'sub';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \r\n  {\r\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\r\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n    exprs.setLegacy();\r\n\r\n    return PathExpression.createForLegacy([value, ...path]);\r\n  }\r\n\r\n  public static encode(expr: SubExpression): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n}","\r\nimport { Definitions } from '../Definitions';\r\n\r\nimport { EntityType } from '../types/Entity';\r\nimport { AnyType } from '../types/Any';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { ColorType } from '../types/Color';\r\nimport { DateType } from '../types/Date';\r\nimport { EnumType } from '../types/Enum';\r\nimport { ListType } from '../types/List';\r\nimport { ManyType } from '../types/Many';\r\nimport { MapType } from '../types/Map';\r\nimport { NotType } from '../types/Not';\r\nimport { NullType } from '../types/Null';\r\nimport { NumberType } from '../types/Number';\r\nimport { ObjectType } from '../types/Object';\r\nimport { OptionalType } from '../types/Optional';\r\nimport { ReferenceType } from '../types/Reference';\r\nimport { SetType } from '../types/Set';\r\nimport { TextType } from '../types/Text';\r\nimport { TupleType } from '../types/Tuple';\r\n\r\nimport { AndExpression } from '../exprs/And';\r\nimport { ChainExpression } from '../exprs/Chain';\r\nimport { CommentExpression } from '../exprs/Comment';\r\nimport { ComputedExpression } from '../exprs/Computed';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { DefineExpression } from '../exprs/Define';\r\nimport { DoExpression } from '../exprs/Do';\r\nimport { ForExpression } from '../exprs/For';\r\nimport { GetExpression } from '../exprs/Get';\r\nimport { GetDataExpression } from '../exprs/GetData';\r\nimport { GetEntityExpression } from '../exprs/GetEntity';\r\nimport { GetRelationExpression } from '../exprs/GetRelation';\r\nimport { IfExpression } from '../exprs/If';\r\nimport { InvokeExpression } from '../exprs/Invoke';\r\nimport { MethodExpression } from '../exprs/Method';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { NotExpression } from '../exprs/Not';\r\nimport { ObjectExpression } from '../exprs/Object';\r\nimport { OperationExpression } from '../exprs/Operation';\r\nimport { OrExpression } from '../exprs/Or';\r\nimport { PathExpression } from '../exprs/Path';\r\nimport { ReturnExpression } from '../exprs/Return';\r\nimport { SetExpression } from '../exprs/Set';\r\nimport { SubExpression } from '../exprs/Sub';\r\nimport { SwitchExpression } from '../exprs/Switch';\r\nimport { TemplateExpression } from '../exprs/Template';\r\nimport { TupleExpression } from '../exprs/Tuple';\r\nimport { UpdateExpression } from '../exprs/Update';\r\nimport { WhileExpression } from '../exprs/While';\r\n\r\n\r\n\r\nexport const defs = new Definitions({\r\n  types: [\r\n    EntityType,\r\n    AnyType,\r\n    BooleanType, \r\n    ColorType,\r\n    DateType,\r\n    EnumType,\r\n    ListType, \r\n    ManyType,\r\n    MapType,\r\n    NotType,\r\n    NullType,\r\n    NumberType, \r\n    ObjectType, \r\n    OptionalType,\r\n    ReferenceType,\r\n    SetType,\r\n    TextType,\r\n    TupleType,\r\n  ],\r\n  expressions: [\r\n    AndExpression,\r\n    ChainExpression,\r\n    CommentExpression,\r\n    ComputedExpression,\r\n    ConstantExpression,\r\n    DefineExpression,\r\n    DoExpression,\r\n    ForExpression,\r\n    GetExpression,\r\n    GetDataExpression,\r\n    GetEntityExpression,\r\n    GetRelationExpression,\r\n    IfExpression,\r\n    InvokeExpression,\r\n    MethodExpression,\r\n    NoExpression,\r\n    NotExpression,\r\n    ObjectExpression,\r\n    OperationExpression,\r\n    OrExpression,\r\n    PathExpression,\r\n    ReturnExpression,\r\n    SetExpression,\r\n    SubExpression,    \r\n    SwitchExpression,\r\n    TemplateExpression,\r\n    TupleExpression,\r\n    UpdateExpression,\r\n    WhileExpression,\r\n  ]\r\n});","\r\nimport { EntityType } from '../../types/Entity';\r\nimport { EntityOps } from '../EntityOps';\r\nimport { Types } from '../../Types';\r\nimport { isArray, objectMap } from '../../fns';\r\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\r\nimport { ObjectType, ObjectOptions } from '../../types/Object';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { NullType } from '../../types/Null';\r\nimport { TextType } from '../../types/Text';\r\nimport { Type } from '../../Type';\r\nimport { EntityRelation } from '../../Relation';\r\n\r\nconst ops = EntityType.operations;\r\n\r\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \r\n  i.name instanceof EntityType\r\n    ? i.name\r\n    : ObjectType.baseType;\r\n\r\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\r\n  if (i.name instanceof EntityType) {\r\n    return i.name;\r\n  }\r\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\r\n  \r\n  return entities.length === 0\r\n    ? NullType.baseType\r\n    : entities.length === 1\r\n      ? entities[0]\r\n      : Types.many(entities);\r\n};\r\n\r\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\r\n  if (!(i.name instanceof EntityType)) {\r\n    return null;\r\n  }\r\n\r\n  const relations = provider.getRelations(i.name.options);\r\n\r\n  if (i.relation instanceof EnumType) {\r\n    const relationName = i.relation.options.constants.get('relation');\r\n\r\n    if (relationName) {\r\n      const match = relations.find((r) => r.name === relationName);\r\n\r\n      if (match) {\r\n        return match;\r\n      }\r\n    }\r\n  }\r\n\r\n  return relations;\r\n};\r\n\r\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation === null) {\r\n    return NullType.baseType;\r\n  } else if (isArray(typeRelation)) {\r\n    return Types.many(\r\n      typeRelation.map((relation) => Types.enum(\r\n        TextType,\r\n        TextType,\r\n        [['relation', relation.name]],\r\n      ))\r\n    );\r\n  } else {\r\n    return i.relation;\r\n  }\r\n};\r\n\r\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\r\n  const typeRelation = GetTypeRelation(i, defs);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.relationType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.itemType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\n\r\nexport const EntityOpsTypes = \r\n{\r\n\r\n  newInstance: ops.setTypes(EntityOps.newInstance, \r\n    GetNamedType,\r\n    { name: GetName },\r\n    { initial: (i, provider) => {\r\n      if (i.name instanceof EntityType) {\r\n        const type = i.name.getType();\r\n        if (type instanceof ObjectType) {\r\n          const objectType = type as ObjectType<ObjectOptions>;\r\n          \r\n          return Types.object(objectMap(objectType.options.props, (value) => Types.optional(value.clone())));\r\n        }\r\n      }\r\n      return ObjectType.baseType;\r\n    }}\r\n  ),\r\n\r\n  get: ops.setTypes(EntityOps.get, \r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity) {\r\n        return AnyType;\r\n      }\r\n\r\n      return Types.list(entity.type);\r\n    },\r\n    { name: GetName },\r\n    { where: BooleanType },\r\n    { instance: GetNamedType },\r\n  ),\r\n\r\n  getKey: ops.setTypes(EntityOps.getKey,\r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity || !entity.key) {\r\n        return AnyType;\r\n      }\r\n\r\n      return entity.keyType;\r\n    },\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  save: ops.setTypes(EntityOps.save, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  remove: ops.setTypes(EntityOps.remove, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  setRelated: ops.setTypes(EntityOps.setRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\r\n  ),\r\n\r\n  addRelated: ops.setTypes(EntityOps.addRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \r\n  ),\r\n\r\n  getRelated: ops.setTypes(EntityOps.getRelated,\r\n    (i, defs) => GetRelatedRelationType(i, defs),\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\r\n  ),\r\n\r\n  isRelated: ops.setTypes(EntityOps.isRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n};\r\n\r\nEntityOpsTypes.newInstance.rawTypes = true;\r\nEntityOpsTypes.get.rawTypes = true;\r\nEntityOpsTypes.getKey.rawTypes = true;\r\nEntityOpsTypes.save.rawTypes = true;\r\nEntityOpsTypes.remove.rawTypes = true;\r\nEntityOpsTypes.setRelated.rawTypes = true;\r\nEntityOpsTypes.addRelated.rawTypes = true;\r\nEntityOpsTypes.removeRelated.rawTypes = true;\r\nEntityOpsTypes.clearRelated.rawTypes = true;\r\nEntityOpsTypes.getRelated.rawTypes = true;\r\nEntityOpsTypes.isRelated.rawTypes = true;\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { AnyOps } from '../AnyOps';\r\nimport { OptionalType } from '../../types/Optional';\r\nimport { ManyType } from '../../types/Many';\r\nimport { NullType } from '../../types/Null';\r\nimport { Type } from '../../Type';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = AnyType.operations;\r\n\r\nexport const AnyOpsTypes = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\r\n\r\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\r\n\r\n  isDefined: ops.setTypes(AnyOps.isDefined, \r\n    BooleanType,\r\n    { value: AnyType }\r\n  ),\r\n\r\n  getDefined: ops.setTypes(AnyOps.getDefined, \r\n    BooleanType,\r\n    { value: AnyType, defined: AnyType },\r\n    {},\r\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\r\n  ),\r\n\r\n  coalesce: ops.setTypes(AnyOps.coalesce, \r\n    i => {\r\n      let optional = true;\r\n      const types: Type[] = [];\r\n      const checkType = (x?: Type) => {\r\n        if (!optional) return;\r\n        \r\n        if (x) {\r\n          let xoptional = x instanceof OptionalType;\r\n          const xinner = xoptional ? x.options as Type : x;\r\n\r\n          if (xinner instanceof ManyType) {\r\n            xinner.options.forEach((y) => {\r\n              const yoptional = y instanceof OptionalType;\r\n              const yinner = yoptional ? y.options as Type : y;\r\n\r\n              xoptional = xoptional || yoptional;\r\n\r\n              if (!types.some(t => t.exactType(yinner))) {\r\n                types.push(yinner);\r\n              }\r\n            });\r\n          }\r\n\r\n          optional = optional && xoptional;\r\n\r\n          if (!types.some(t => t.exactType(xinner))) {\r\n            types.push(xinner);\r\n          }\r\n        }\r\n      };\r\n\r\n      checkType(i.a);\r\n      checkType(i.b);\r\n      checkType(i.c);\r\n      checkType(i.d);\r\n      checkType(i.e);\r\n\r\n      return types.length > 1\r\n        ? optional\r\n          ? Types.optional(new ManyType(types))\r\n          : new ManyType(types)\r\n        : types.length === 1\r\n          ? optional\r\n            ? Types.optional(types[0])\r\n            : types[0]\r\n          : NullType;\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  require: ops.setTypes(AnyOps.require, \r\n    i => i.value instanceof OptionalType\r\n      ? i.value.options\r\n      : i.value || AnyType,\r\n    { value: i => i.value || AnyType },\r\n  ),\r\n\r\n  ternary: ops.setTypes(AnyOps.ternary, \r\n    (i) => {\r\n      if (i.truthy && i.falsy) {\r\n        return Types.mergeMany([i.truthy, i.falsy]);\r\n      } else if (i.truthy) {\r\n        return i.truthy;\r\n      } else if (i.falsy) {\r\n        return i.falsy;\r\n      } else {\r\n        return AnyType;\r\n      }\r\n    },\r\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\r\n\r\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\r\n\r\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\r\n\r\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\r\n\r\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\r\n\r\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\r\n\r\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\r\n\r\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\r\n\r\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n};\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { BooleanOps } from '../BooleanOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = BooleanType.operations;\r\n\r\n\r\nexport const BooleanOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(BooleanOps.create, BooleanType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(BooleanOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\r\n\r\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\r\n\r\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\r\n\r\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\r\n\r\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\r\n\r\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\r\n\r\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\r\n\r\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\r\n\r\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\r\n\r\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\r\n\r\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\r\n\r\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\r\n\r\n};","\r\nimport { ColorType } from '../../types/Color';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ColorOps } from '../ColorOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\r\nimport { Color } from '../../util/color/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ColorType.operations;\r\n\r\nexport const ColorComponentEnum = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['r', 'r'],\r\n    ['g', 'g'],\r\n    ['b', 'b'],\r\n    ['a', 'a'],\r\n  ]),\r\n});\r\n\r\nexport const ColorOrNumber = new ManyType([\r\n  ColorType.baseType,\r\n  new NumberType({ }),\r\n]);\r\n\r\nexport const ColorFormats = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\r\n    ['#rgb', 'rgb:hexShort'],\r\n    ['#rrggbb', 'rgb:hex'],\r\n    ['#rrggbbaa', 'rgb:hexLong'],\r\n    ['rgb(r, g, b)', 'rgb:rgb'],\r\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\r\n    ['hsl(h, s, l)', 'hsl:hsl'],\r\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\r\n  ]),\r\n});\r\n\r\nexport const ColorNames = new EnumType({\r\n  key: TextType.baseType,\r\n  value: ColorType.baseType,\r\n  constants: new Map<string, Color>([\r\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\r\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\r\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\r\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\r\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\r\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\r\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\r\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\r\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\r\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\r\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\r\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\r\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\r\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\r\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\r\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\r\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\r\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\r\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\r\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\r\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\r\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\r\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\r\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\r\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\r\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\r\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\r\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\r\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\r\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\r\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\r\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\r\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\r\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\r\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\r\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\r\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\r\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\r\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\r\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\r\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\r\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\r\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\r\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\r\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\r\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\r\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\r\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\r\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\r\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\r\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\r\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\r\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\r\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\r\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\r\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\r\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\r\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\r\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\r\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\r\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\r\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\r\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\r\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\r\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\r\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\r\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\r\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\r\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\r\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\r\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\r\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\r\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\r\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\r\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\r\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\r\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\r\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\r\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\r\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\r\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\r\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\r\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\r\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\r\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\r\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\r\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\r\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\r\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\r\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\r\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\r\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\r\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\r\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\r\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\r\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\r\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\r\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\r\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\r\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\r\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\r\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\r\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\r\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\r\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\r\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\r\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\r\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\r\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\r\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\r\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\r\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\r\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\r\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\r\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\r\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\r\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\r\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\r\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\r\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\r\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\r\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\r\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\r\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\r\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\r\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\r\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\r\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\r\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\r\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\r\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\r\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\r\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\r\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\r\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\r\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\r\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\r\n  ]),\r\n});\r\n\r\n// a = bottom layer (0 -> 1)\r\n// b = top layer (0 -> 1)\r\n\r\nexport const ColorBlendModes = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Multiply', 'multiply'],         // a * b\r\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\r\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\r\n    ['Dodge', 'dodge'],               // a / (1 - b)\r\n    ['Burn', 'burn'],                 // (1 - b) / a\r\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\r\n    ['Addition', 'add'],              // a + b\r\n    ['Subtract', 'sub'],              // a - b\r\n    ['Difference', 'diff'],           // b - a\r\n    ['Darken Only', 'darken'],        // min(a, b)\r\n    ['Lighten Only', 'lighten'],      // max(a, b)\r\n  ]),\r\n});\r\n\r\n\r\nexport const ColorOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ColorOps.create, ColorType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ColorOps.maybe, \r\n    (i) => Types.maybe(i.value, ColorType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(ColorOps.cmp, \r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ColorOps.copy, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  build: ops.setTypes(ColorOps.build, \r\n    ColorType,\r\n    { r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType }\r\n  ),\r\n\r\n  map: ops.setTypes(ColorOps.map, \r\n    ColorType,\r\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  op: ops.setTypes(ColorOps.op, \r\n    ColorType,\r\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  clamp: ops.setTypes(ColorOps.clamp, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  add: ops.setTypes(ColorOps.add, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  adds: ops.setTypes(ColorOps.adds, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  sub: ops.setTypes(ColorOps.sub, \r\n    ColorType,\r\n    { value: ColorType, subtrahend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mul: ops.setTypes(ColorOps.mul, \r\n    ColorType,\r\n    { value: ColorType, multiplier: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  div: ops.setTypes(ColorOps.div, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mod: ops.setTypes(ColorOps.mod, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  format: ops.setTypes(ColorOps.format, \r\n    TextType,\r\n    { value: ColorType, format: ColorFormats }\r\n  ),\r\n\r\n  parse: ops.setTypes(ColorOps.parse, \r\n    Types.optional(ColorType),\r\n    { value: AnyType }\r\n  ),\r\n\r\n  lerp: ops.setTypes(ColorOps.lerp,\r\n    ColorType,\r\n    { start: ColorType, end: ColorType, delta: NumberType }\r\n  ),\r\n\r\n  lighten: ops.setTypes(ColorOps.lighten,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  darken: ops.setTypes(ColorOps.darken,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  toHSL: ops.setTypes(ColorOps.toHSL,\r\n    ColorSpaceHSL.type,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\r\n    ColorType,\r\n    { value: ColorSpaceHSL.type }\r\n  ),\r\n\r\n  luminance: ops.setTypes(ColorOps.luminance,\r\n    NumberType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  contrast: ops.setTypes(ColorOps.contrast,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  invert: ops.setTypes(ColorOps.invert,\r\n    ColorType,\r\n    { value: ColorType },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  opaque: ops.setTypes(ColorOps.opaque,\r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  alpha: ops.setTypes(ColorOps.alpha,\r\n    ColorType,\r\n    { value: ColorType, alpha: NumberType }\r\n  ),\r\n\r\n  distance: ops.setTypes(ColorOps.distance,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  named: ops.setTypes(ColorOps.named,\r\n    ColorType,\r\n    { name: ColorNames }\r\n  ),\r\n\r\n  getName: ops.setTypes(ColorOps.getName,\r\n    TextType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  blend: ops.setTypes(ColorOps.blend, \r\n    ColorType,\r\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ColorOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ColorOps.isEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ColorOps.isLess, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ColorOps.isGreater, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\r\n\r\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\r\n\r\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\r\n\r\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\r\n\r\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\r\n\r\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\r\n\r\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\r\n\r\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\r\n\r\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\r\n\r\n};\r\n","import { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\n\r\nimport { DateOps } from '../DateOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = DateType.operations;\r\n\r\nconst DateProperty = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Timestamp', 'timestamp'],\r\n    ['Timestamp (seconds)', 'timestampSeconds'],\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Day of Month', 'dayOfMonth'],\r\n    ['Last Day of Month', 'lastDayOfMonth'],\r\n    ['Day of Year', 'dayOfYear'],\r\n    ['Day of Week', 'dayOfWeek'],\r\n    ['Week', 'week'],\r\n    ['Week of Month', 'weekOfMonth'],\r\n    ['Weekspan of Month', 'weekspanOfMonth'],\r\n    ['Full Week of Month', 'fullWeekOfMonth'],\r\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\r\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\r\n    ['Week of Year', 'weekOfYear'],\r\n    ['Weekspan of Year', 'weekspanOfYear'],\r\n    ['Full Week of Year', 'fullWeekOfYear'],\r\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\r\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year'],\r\n    ['Time Identifier', 'timeIdentifier'],\r\n    ['Day Identifier', 'dayIdentifier'],\r\n    ['Week Identifier', 'weekIdentifier'],\r\n    ['Month Identifier', 'monthIdentifier'],\r\n    ['Quarter Identifier', 'quarterIdentifier']\r\n  ])\r\n});\r\n\r\nconst DateUnits = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Week', 'week'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year']\r\n  ])\r\n});\r\n\r\nconst DateAdjust = new EnumType({\r\n  key: TextType.baseType.newInstance(),\r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['None', 'none'],\r\n    ['Floor', 'floor'],\r\n    ['Ceil', 'ceil'],\r\n    ['Round', 'round'],\r\n    ['Truncate', 'truncate'],\r\n    ['Up', 'up'],\r\n    ['Down', 'down']\r\n  ])\r\n})\r\n\r\n\r\nexport const DateOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(DateOps.create, DateType),\r\n\r\n  now: ops.setTypes(DateOps.now, DateType),\r\n\r\n  today: ops.setTypes(DateOps.today, DateType),\r\n\r\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\r\n\r\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(DateOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\r\n\r\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\r\n\r\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\r\n\r\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\r\n\r\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\r\n\r\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\r\n\r\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\r\n\r\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\r\n\r\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\r\n\r\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\r\n\r\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\r\n\r\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\r\n\r\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\r\n\r\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\r\n\r\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\r\n\r\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\r\n \r\n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\r\n\r\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\r\n\r\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\r\n\r\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\r\n\r\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\r\n\r\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\r\n\r\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\r\n\r\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\r\n\r\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\r\n\r\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\r\n\r\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\r\n\r\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\r\n\r\n};","\r\nimport { Type, TypeInput } from '../../Type';\r\nimport { ListType } from '../../types/List';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\nimport { MapType } from '../../types/Map';\r\nimport { DateType } from '../../types/Date';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { ListOps } from '../ListOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ListType.operations;\r\n\r\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\r\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\r\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\r\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\r\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\r\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\r\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\r\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\r\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\r\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\r\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\r\n\r\nexport const ListOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ListOps.create, ListType),\r\n\r\n  createLike: ops.setTypes(ListOps.createLike, \r\n    GivenList,\r\n    { list: GivenList },\r\n  ),\r\n\r\n  createFor: ops.setTypes(ListOps.createFor, \r\n    i => ListType.forItem(i.item || AnyType),\r\n    { item: i => i.item || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ListOps.maybe, \r\n    (i) => Types.maybe(i.value, ListType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  build: ops.setTypes(ListOps.build, \r\n    i => ListType.forItem(i.item || AnyType), \r\n    { count: NumberType, item: i => i.item || AnyType },\r\n    { sameItem: BooleanType },\r\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\r\n  ),\r\n\r\n  get: ops.setTypes(ListOps.get, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  set: ops.setTypes(ListOps.set, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType, value: GivenListItem }\r\n  ),\r\n\r\n  add: ops.setTypes(ListOps.add, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addFirst: ops.setTypes(ListOps.addFirst, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addLast: ops.setTypes(ListOps.addLast, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  insert: ops.setTypes(ListOps.insert, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem, index: NumberType }\r\n  ),\r\n\r\n  remove: ops.setTypes(ListOps.remove,  \r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  removeFirst: ops.setTypes(ListOps.removeFirst,\r\n    GivenListItemOptional, \r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeLast: ops.setTypes(ListOps.removeLast,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeAt: ops.setTypes(ListOps.removeAt,  \r\n    GivenListItemOptional,\r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \r\n    GivenList,\r\n    { list: GivenList, where: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  clear: ops.setTypes(ListOps.clear, \r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  contains: ops.setTypes(ListOps.contains,\r\n    BooleanType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  find: ops.setTypes(ListOps.find,\r\n    GivenListItemOptional,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  copy: ops.setTypes(ListOps.copy,\r\n    GivenList,\r\n    { list: GivenList },\r\n    { deepCopy: GivenListItem },\r\n    { copy: GivenListItem }\r\n  ),\r\n\r\n  reverse: ops.setTypes(ListOps.reverse,\r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  exclude: ops.setTypes(ListOps.exclude,  \r\n    GivenList,\r\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  overlap: ops.setTypes(ListOps.overlap,  \r\n    GivenList,\r\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  sort: ops.setTypes(ListOps.sort,   \r\n    GivenList,\r\n    { list: GivenList, compare: NumberType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  shuffle: ops.setTypes(ListOps.shuffle, \r\n    GivenList,\r\n    { list: GivenList },\r\n    { times: NumberType }\r\n  ),\r\n\r\n  unique: ops.setTypes(ListOps.unique,   \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  duplicates: ops.setTypes(ListOps.duplicates,  \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    { once: BooleanType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  take: ops.setTypes(ListOps.take,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  skip: ops.setTypes(ListOps.skip,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  drop: ops.setTypes(ListOps.drop,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  append: ops.setTypes(ListOps.append,\r\n    GivenList,\r\n    { list: GivenList, append: GivenList }\r\n  ),\r\n\r\n  prepend: ops.setTypes(ListOps.prepend,\r\n    GivenList,\r\n    { list: GivenList, prepend: GivenList }\r\n  ),\r\n\r\n  indexOf: ops.setTypes(ListOps.indexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  findIndex: ops.setTypes(ListOps.findIndex,\r\n    NumberType,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  last: ops.setTypes(ListOps.last,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  first: ops.setTypes(ListOps.first,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  count: ops.setTypes(ListOps.count,\r\n    NumberType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  randomList: ops.setTypes(ListOps.randomList,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  random: ops.setTypes(ListOps.random,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  // Iteration\r\n\r\n  join: ops.setTypes(ListOps.join,\r\n    TextType,\r\n    { list: GivenList },\r\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  each: ops.setTypes(ListOps.each,\r\n    GivenList,\r\n    { list: GivenList, each: AnyType },\r\n    { reverse: BooleanType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  filter: ops.setTypes(ListOps.filter,\r\n    GivenList,\r\n    { list: GivenList, filter: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  not: ops.setTypes(ListOps.not,\r\n    GivenList,\r\n    { list: GivenList, not: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(ListOps.map,\r\n    i => ListType.forItem(i.transform || AnyType),\r\n    { list: GivenList, transform: i => i.transform || AnyType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  split: ops.setTypes(ListOps.split,\r\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\r\n    { list: GivenList, pass: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  reduce: ops.setTypes(ListOps.reduce,\r\n    GivenReducer,\r\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\r\n    {},\r\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ListOps.cmp,\r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  group: ops.setTypes(ListOps.group, \r\n    i => ListType.forItem(Types.object({\r\n      by: i.by || AnyType,\r\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\r\n    })),\r\n    { list: GivenList, by: i => i.by || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toListMap: ops.setTypes(ListOps.toListMap, \r\n    i => MapType.forItem(\r\n      ListType.forItem(i.getValue || GivenListItem(i)), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toMap: ops.setTypes(ListOps.toMap,\r\n    i => MapType.forItem(\r\n      i.getValue || GivenListItem(i), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.setTypes(ListOps.joinInner, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinLeft: ops.setTypes(ListOps.joinLeft, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinRight: ops.setTypes(ListOps.joinRight, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinFull: ops.setTypes(ListOps.joinFull, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinCross: ops.setTypes(ListOps.joinCross, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\r\n    { },\r\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.setTypes(ListOps.min,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  max: ops.setTypes(ListOps.max,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  sum: ops.setTypes(ListOps.sum,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  avg: ops.setTypes(ListOps.avg,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  std: ops.setTypes(ListOps.std,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  variance: ops.setTypes(ListOps.variance,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  median: ops.setTypes(ListOps.median,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitand: ops.setTypes(ListOps.bitand,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitor: ops.setTypes(ListOps.bitor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitxor: ops.setTypes(ListOps.bitxor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ListOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEmpty: ops.setTypes(ListOps.isEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ListOps.isEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(ListOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ListOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  // Casts\r\n  \r\n\r\n  asAny: ops.setTypes(ListOps.asAny, \r\n    AnyType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asBoolean: ops.setTypes(ListOps.asBoolean, \r\n    BooleanType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asColor: ops.setTypes(ListOps.asColor, \r\n    ColorType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asDate: ops.setTypes(ListOps.asDate, \r\n    DateType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asList: ops.setTypes(ListOps.asList, \r\n    GivenValueList,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asMap: ops.setTypes(ListOps.asMap,\r\n    i => MapType.forItem(GivenValueListItem(i)),\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asNumber: ops.setTypes(ListOps.asNumber, \r\n    NumberType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asObject: ops.setTypes(ListOps.asObject,\r\n    ObjectType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asText: ops.setTypes(ListOps.asText, \r\n    TextType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asTuple: ops.setTypes(ListOps.asTuple, \r\n    TupleType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asSet: ops.setTypes(ListOps.asSet, \r\n    i => SetType.forItem(GivenValueListItem(i)), \r\n    { value: GivenValueList }\r\n  ),\r\n  \r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { MapType } from '../../types/Map';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { MapOps } from '../MapOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { objectValues } from '../../fns';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = MapType.operations;\r\n\r\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\r\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\r\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\r\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\r\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\r\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\r\n\r\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\r\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\r\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\r\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\r\n\r\nexport const MapOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(MapOps.create, MapType),\r\n\r\n  createLike: ops.setTypes(MapOps.createLike, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n  ),\r\n\r\n  createFor: ops.setTypes(MapOps.createFor, \r\n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\r\n    { value: i => i.value || AnyType },\r\n    { key: i => i.key || TextType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(MapOps.maybe, \r\n    (i) => Types.maybe(i.value, MapType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  get: ops.setTypes(MapOps.get, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  set: ops.setTypes(MapOps.set, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\r\n    {},\r\n    { existingValue: GivenMapValue }\r\n  ),\r\n\r\n  has: ops.setTypes(MapOps.has, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  delete: ops.setTypes(MapOps.delete, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  keys: ops.setTypes(MapOps.keys, \r\n    i => ListType.forItem(GivenMapKey(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  values: ops.setTypes(MapOps.values, \r\n    i => ListType.forItem(GivenMapValue(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  entries: ops.setTypes(MapOps.entries, \r\n    i => Types.object({\r\n      keys: ListType.forItem(GivenMapKey(i)),\r\n      values: ListType.forItem(GivenMapValue(i)),\r\n    }),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  pairs: ops.setTypes(MapOps.pairs, \r\n    i => ListType.forItem(Types.object({\r\n      key: GivenMapKey(i),\r\n      value: GivenMapValue(i)\r\n    })),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  clear: ops.setTypes(MapOps.clear, \r\n    GivenMap,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  count: ops.setTypes(MapOps.count, \r\n    NumberType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  cmp: ops.setTypes(MapOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  copy: ops.setTypes(MapOps.copy, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(MapOps.map, \r\n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\r\n    { map: GivenMap },\r\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\r\n    AnyType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \r\n    (i) => {\r\n      if (!(i.object instanceof ObjectType)) {\r\n        return MapType;\r\n      }\r\n\r\n      const propTypes = objectValues((i.object as ObjectType).options.props);\r\n      \r\n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\r\n    },\r\n    { object: i => i.object || ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(MapOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(MapOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(MapOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(MapOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\r\n\r\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\r\n\r\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\r\n\r\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\r\n\r\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\r\n\r\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\r\n\r\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\r\n\r\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\r\n\r\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\r\n\r\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { DateType } from '../../types/Date';\r\n\r\nimport { NumberOps } from '../NumberOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = NumberType.operations;\r\n\r\n\r\nconst BitMethod = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['has the bits', 'contain'],              // value & test === test\r\n    ['does not have the bits', 'notcontain'], // value & test !== test\r\n    ['has some of the bits', 'overlap'],      // value & test !== 0\r\n    ['has none of the bits', 'none'],         // value & test === 0\r\n    ['has the same bits', 'equal'],           // value === test\r\n    ['does not have the same bits', 'not'],   // value !== test\r\n    ['has all bits in', 'subset'],            // test & value === value\r\n  ])\r\n});\r\n\r\n\r\nexport const NumberOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(NumberOps.create, NumberType ),\r\n\r\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\r\n\r\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\r\n\r\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\r\n\r\n  e: ops.setTypes(NumberOps.e, NumberType ),\r\n\r\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\r\n\r\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\r\n\r\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\r\n\r\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\r\n\r\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\r\n\r\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\r\n\r\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\r\n\r\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\r\n\r\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\r\n  \r\n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\r\n  \r\n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\r\n  \r\n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.setTypes(NumberOps.maybe, \r\n    (i) => Types.maybe(i.value, NumberType),\r\n    { value: AnyType } \r\n  ),\r\n  \r\n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\r\n\r\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\r\n  \r\n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\r\n  \r\n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\r\n  \r\n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\r\n  \r\n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\r\n  \r\n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\r\n  \r\n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\r\n  \r\n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\r\n  \r\n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\r\n  \r\n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\r\n  \r\n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\r\n  \r\n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\r\n  \r\n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\r\n  \r\n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\r\n  \r\n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\r\n  \r\n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\r\n\r\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\r\n  \r\n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\r\n  \r\n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\r\n  \r\n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\r\n\r\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\r\n\r\n  // Other\r\n\r\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\r\n\r\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\r\n\r\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\r\n\r\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\r\n\r\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\r\n\r\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\r\n\r\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\r\n\r\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\r\n\r\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\r\n\r\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \r\n    BooleanType,\r\n    { value: NumberType, method: BitMethod, test: NumberType },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\r\n\r\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\r\n\r\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\r\n\r\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\r\n\r\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\r\n\r\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\r\n\r\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\r\n\r\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\r\n\r\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n};\r\n","\r\nimport { Type, TypeMap } from '../../Type';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ObjectOps } from '../ObjectOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { OptionalType } from '../../types/Optional';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { EntityType } from '../../types/Entity';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ObjectType.operations;\r\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\r\n\r\nexport const ObjectOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ObjectOps.create, \r\n    GivenObject\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ObjectOps.maybe, \r\n    (i) => Types.maybe(i.value, ObjectType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  has: ops.setTypes(ObjectOps.has, \r\n    BooleanType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  get: ops.setTypes(ObjectOps.get, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  set: ops.setTypes(ObjectOps.set, \r\n    GivenObject,\r\n    { object: GivenObject, key: TextType, value: AnyType },\r\n    {},\r\n    { existingValue: AnyType }\r\n  ),\r\n\r\n  delete: ops.setTypes(ObjectOps.delete, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ObjectOps.cmp, \r\n    NumberType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ObjectOps.copy, \r\n    GivenObject,\r\n    { object: GivenObject }\r\n  ),\r\n\r\n  merge: ops.setTypes(ObjectOps.merge, \r\n    (i) => {\r\n      const props: TypeMap = {};\r\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\r\n\r\n      for (const param of params) \r\n      {\r\n        let paramType = i[param];\r\n\r\n        if (paramType instanceof EntityType)\r\n        {\r\n          paramType = paramType.getType();\r\n        }\r\n\r\n        if (paramType instanceof ObjectType) \r\n        {\r\n          const paramProps = paramType.options.props;\r\n\r\n          for (const prop in paramProps) \r\n          {\r\n            const paramProp = paramProps[prop];\r\n\r\n            if (prop in props && paramProp instanceof OptionalType) \r\n            {\r\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\r\n            } \r\n            else \r\n            {\r\n              props[prop] = paramProp;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return new ObjectType({ props });\r\n    },\r\n    { a: ObjectType, b: ObjectType },\r\n    { c: ObjectType, d: ObjectType, e: ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ObjectOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ObjectOps.isEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ObjectOps.isLess, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ObjectOps.isGreater, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\r\n\r\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\r\n\r\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\r\n\r\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\r\n\r\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\r\n\r\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\r\n\r\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\r\n\r\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\r\n\r\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { SetOps } from '../SetOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { MapType } from '../../types/Map';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = SetType.operations;\r\n\r\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\r\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\r\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\r\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\r\n\r\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\r\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\r\n\r\nexport const SetOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(SetOps.create, SetType),\r\n\r\n  createLike: ops.setTypes(SetOps.createLike, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n  ),\r\n\r\n  createFor: ops.setTypes(SetOps.createFor, \r\n    i => ListType.forItem(i.value || AnyType),\r\n    { value: i => i.value || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(SetOps.maybe, \r\n    (i) => Types.maybe(i.value, SetType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  add: ops.setTypes(SetOps.add, \r\n    GivenSet,\r\n    { set: GivenSet, value: GivenSetValue },\r\n  ),\r\n\r\n  has: ops.setTypes(SetOps.has, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  delete: ops.setTypes(SetOps.delete, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  values: ops.setTypes(SetOps.values, \r\n    i => ListType.forItem(GivenSetValue(i)),\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  clear: ops.setTypes(SetOps.clear, \r\n    GivenSet,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  count: ops.setTypes(SetOps.count, \r\n    NumberType,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  cmp: ops.setTypes(SetOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  copy: ops.setTypes(SetOps.copy, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n    { deepCopy: GivenSetValue },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(SetOps.map, \r\n    i => SetType.forItem(i.transform || GivenSetValue(i)),\r\n    { set: GivenSet },\r\n    { transform: i => i.transform || GivenSetValue(i) },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(SetOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(SetOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isLess: ops.setTypes(SetOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreater: ops.setTypes(SetOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\r\n\r\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\r\n\r\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\r\n\r\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\r\n\r\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\r\n\r\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\r\n\r\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\r\n\r\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\r\n\r\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { ListType } from '../../types/List';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { TextOps } from '../TextOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = TextType.operations;\r\nconst TextListType = ListType.forItem(TextType);\r\nconst RegexMatchType = Types.object({\r\n  index: NumberType,\r\n  lastIndex: NumberType,\r\n  input: TextType,\r\n  groups: TextListType,\r\n});\r\n\r\n\r\nexport const TextOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TextOps.create, TextType),\r\n\r\n  uuid: ops.setTypes(TextOps.uuid, TextType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TextOps.maybe, \r\n    (i) => Types.maybe(i.value, TextType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\r\n\r\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\r\n\r\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\r\n\r\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\r\n\r\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\r\n\r\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\r\n\r\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\r\n\r\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\r\n\r\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\r\n\r\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\r\n\r\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\r\n\r\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\r\n\r\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\r\n\r\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\r\n\r\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\r\n\r\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\r\n\r\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \r\n    ListType.forItem(RegexMatchType), \r\n    { value: TextType, regex: TextType }, \r\n    { ignoreCase: BooleanType, multiline: BooleanType }\r\n  ),\r\n\r\n  regexReplace: ops.setTypes(TextOps.regexReplace, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replacement: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n  ),\r\n\r\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replace: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n    { match: RegexMatchType }\r\n  ),\r\n\r\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\r\n\r\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\r\n\r\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\r\n\r\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\r\n\r\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\r\n\r\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\r\n\r\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\r\n\r\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\r\n\r\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\r\n\r\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\r\n\r\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\r\n\r\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\r\n\r\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\r\n\r\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\r\n\r\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\r\n\r\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\r\n\r\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\r\n\r\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\r\n\r\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\r\n\r\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n};\r\n","\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { TupleOps } from '../TupleOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\nimport { NullType } from '../../types/Null';\r\n\r\n\r\nconst ops = TupleType.operations;\r\n\r\n\r\nexport const TupleOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TupleOps.create, TupleType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TupleOps.maybe, \r\n    (i) => Types.maybe(i.value, TupleType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\r\n\r\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\r\n\r\n  build: ops.setTypes(TupleOps.build, \r\n    (i) => {\r\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\r\n      let elements: Type[] = [];\r\n      let list = false;\r\n      \r\n      for (const param of params) \r\n      {\r\n        const paramType = i[param];\r\n\r\n        if (paramType) \r\n        {\r\n          if (paramType instanceof TupleType) \r\n          {\r\n            elements = elements.concat(paramType.options);\r\n          }\r\n          else if (paramType instanceof ListType)\r\n          {\r\n            list = true;\r\n            elements.push(paramType.options.item);\r\n          }\r\n          else \r\n          {\r\n            elements.push(paramType);\r\n          }\r\n        }\r\n      }\r\n\r\n      return list\r\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\r\n        : new TupleType(elements);\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\r\n\r\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\r\n\r\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\r\n\r\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\r\n\r\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\r\n\r\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\r\n\r\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\r\n\r\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\r\n\r\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\r\n\r\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n};\r\n","import { isString } from '../fns';\r\n\r\n\r\nexport type Formatter<T> = (item: T) => string;\r\n\r\nexport interface FormatterMap<T> \r\n{\r\n  [key: string]: Formatter<T>;\r\n}\r\n\r\nexport interface FormatSection<T>\r\n{\r\n  size: number;\r\n  formats: FormatterMap<T>;\r\n}\r\n\r\nexport interface FormatEscapes\r\n{\r\n  [first: string]: {\r\n    start: string;\r\n    startEscape: string;\r\n    end: string;\r\n    endEscape: string;\r\n  };\r\n}\r\n\r\nexport class Format<T>\r\n{\r\n\r\n  private cached: FormatterMap<T> = {};\r\n\r\n  private sections: FormatSection<T>[] = [];\r\n\r\n  private escapes: FormatEscapes;\r\n\r\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\r\n  {\r\n    this.add(formats);\r\n    this.escapes = escapes;\r\n  }\r\n\r\n  public add(map: FormatterMap<T>): this;\r\n  public add(key: string, formatter: Formatter<T>): this;\r\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\r\n  {\r\n    if (isString(keyOrMap))\r\n    {\r\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\r\n    }\r\n    else\r\n    {\r\n      for (const key in keyOrMap)\r\n      {\r\n        this.getSection(key.length).formats[key] = keyOrMap[key];\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getSection(size: number): FormatSection<T>\r\n  {\r\n    const guess = this.sections.length - size;\r\n    const guessSection = this.sections[guess];\r\n\r\n    if (guessSection && guessSection.size === size)\r\n    {\r\n      return guessSection;\r\n    }\r\n\r\n    for (const section of this.sections)\r\n    {\r\n      if (section.size === size)\r\n      {\r\n        return section;\r\n      }\r\n    }\r\n\r\n    const newSection = { size, formats: {} };\r\n\r\n    this.sections.push(newSection);\r\n    this.sortBySize();\r\n\r\n    return newSection;\r\n  }\r\n\r\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\r\n  {\r\n    if (format in this.cached)\r\n    {\r\n      return this.cached[format];\r\n    }\r\n\r\n    const sections = this.sections;\r\n    const formats: Formatter<T>[] = [];\r\n    let constant: string = '';\r\n\r\n    for (let i = 0; i < format.length; i++)\r\n    {\r\n      const escaped = this.getEscaped(format, i);\r\n\r\n      if (escaped !== false)\r\n      {\r\n        const [ content, end ] = escaped;\r\n\r\n        constant += content;\r\n        i = end - 1;\r\n\r\n        continue;\r\n      }\r\n\r\n      let handled: boolean = false;\r\n\r\n      for (let k = 0; k < sections.length && !handled; k++)\r\n      {\r\n        const section = sections[ k ];\r\n        const part: string = format.substring( i, i + section.size );\r\n\r\n        if (part.length === section.size)\r\n        {\r\n          const formatter = section.formats[ part ];\r\n\r\n          if (formatter)\r\n          {\r\n            formats.push(formatter);\r\n            i += section.size - 1;\r\n            handled = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (handled)\r\n      {\r\n        if (constant)\r\n        {\r\n          const copy = constant;\r\n\r\n          formats.splice(formats.length - 1, 0, () => copy);\r\n          constant = '';\r\n        }\r\n      }\r\n      else\r\n      {\r\n        constant += format.charAt(i);\r\n      }\r\n    }\r\n\r\n    if (constant)\r\n    {\r\n      formats.push(() => constant);\r\n    }\r\n\r\n    const finalFormatter = (item: T) => \r\n    {\r\n      let formatted: string = '';\r\n\r\n      for (const formatter of formats)\r\n      {\r\n        formatted += formatter(item);\r\n      }\r\n\r\n      return formatted;\r\n    };\r\n\r\n    if (cache)\r\n    {\r\n      this.cached[format] = finalFormatter;\r\n    }\r\n\r\n    return finalFormatter;\r\n  }\r\n\r\n  public format (format: string, item: T, cache: boolean = false): string\r\n  {\r\n    return this.getFormatter(format, cache)(item);\r\n  }\r\n\r\n  private sortBySize()\r\n  {\r\n    this.sections.sort((a, b) => b.size - a.size);\r\n  }\r\n\r\n  private getEscaped (x: string, i: number): false | [string, number]\r\n  {\r\n    const c = x.charAt(i);\r\n    const escaped = this.escapes[c];\r\n\r\n    if (!escaped)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { start, end, startEscape, endEscape } = escaped;\r\n\r\n    const possibleStart = x.substring(i, i + start.length);\r\n\r\n    if (possibleStart !== start)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\r\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\r\n\r\n    if (possibleEscape === startEscape)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    i += start.length;\r\n\r\n    const endOffset = endEscape.indexOf(end);\r\n    let last = x.indexOf(end, i);\r\n    let content: string = x.substring(i, last);\r\n\r\n    i = last - endOffset;\r\n\r\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\r\n    {\r\n      content = content.substring(0, content.length - endOffset);\r\n      content += end;\r\n      i += endEscape.length;\r\n      last = x.indexOf(end, i);\r\n      content += x.substring(i, last);\r\n      i = last - endOffset;\r\n    }\r\n\r\n    if (last === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return [content, last + end.length];\r\n  }\r\n\r\n}\r\n","\r\nimport { Format } from '../Format';\r\nimport { LocaleOptions } from '../../Locale';\r\nimport { padNumber } from '../../fns';\r\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\r\n  M:          ([day]) => (day.getMonth() + 1) + '',\r\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\r\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\r\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\r\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\r\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\r\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\r\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\r\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\r\n  D:          ([day]) => day.getDate() + '',\r\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\r\n  DD:         ([day]) => padNumber(day.getDate(), 2),\r\n  DDD:        ([day]) => getDayOfYear(day) + '',\r\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\r\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\r\n  d:          ([day]) => day.getDay() + '',\r\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\r\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\r\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\r\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\r\n  e:          ([day]) => getDayOfWeek(day) + '',\r\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\r\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\r\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\r\n  w:          ([day]) => getWeekOfYear(day) + '',\r\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\r\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\r\n  W:          ([day]) => getWeekOfYearISO(day) + '',\r\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\r\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\r\n  Y:          ([day]) => day.getFullYear() + '',\r\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\r\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\r\n  H:          ([day]) => day.getHours() + '',\r\n  HH:         ([day]) => padNumber(day.getHours(), 2),\r\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\r\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\r\n  k:          ([day]) => (day.getHours() + 1) + '',\r\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\r\n  m:          ([day]) => day.getMinutes() + '',\r\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\r\n  s:          ([day]) => day.getSeconds() + '',\r\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\r\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\r\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\r\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\r\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\r\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\r\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\r\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\r\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\r\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\r\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\r\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\r\n  Z:          ([day]) => formatOffset(day, ':'),\r\n  ZZ:         ([day]) => formatOffset(day, ''),\r\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\r\n  x:          ([day]) => day.valueOf() + '',\r\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\r\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\r\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\r\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\r\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\r\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\r\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\r\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\r\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\r\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\r\n}, {\r\n  '[': {\r\n    start: '[',\r\n    startEscape: '\\\\[',\r\n    end: ']',\r\n    endEscape: '\\\\]'\r\n  },\r\n  \"'\": {\r\n    start: \"'\",\r\n    startEscape: \"''\",\r\n    end: \"'\",\r\n    endEscape: \"''\"\r\n  }\r\n});\r\n\r\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\r\n\r\nfunction formatOffset(day: Date, splitter: string): string\r\n{\r\n  const off = getDateOffset(day);\r\n  const hr = Math.floor(Math.abs(off) / 100);\r\n  const mn = Math.abs(off) % 100;\r\n\r\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\r\n}","\r\nexport * from './fns';\r\n\r\nexport * from './Command';\r\nexport * from './DefinitionProvider';\r\nexport * from './Definitions';\r\nexport * from './DataTypes';\r\nexport * from './Entity';\r\nexport * from './EventBase';\r\nexport * from './Expression';\r\nexport * from './Exprs';\r\nexport * from './Func';\r\nexport * from './LinkedNode';\r\nexport * from './Locale';\r\nexport * from './Operation';\r\nexport * from './Computed';\r\nexport * from './Program';\r\nexport * from './ReferenceData';\r\nexport * from './Relation';\r\nexport * from './Runtime';\r\nexport * from './Type';\r\nexport * from './Types';\r\nexport * from './Traverser';\r\nexport * from './Validate';\r\n\r\nexport * from './maps/FastMap';\r\nexport * from './maps/NamedMap';\r\n\r\nexport * from './types/ID';\r\nexport * from './types/Entity';\r\nexport * from './types/Any';\r\nexport * from './types/Boolean';\r\nexport * from './types/Color';\r\nexport * from './types/Date';\r\nexport * from './types/Enum';\r\nexport * from './types/List';\r\nexport * from './types/Many';\r\nexport * from './types/Map';\r\nexport * from './types/Not';\r\nexport * from './types/Null';\r\nexport * from './types/Number';\r\nexport * from './types/Object';\r\nexport * from './types/Optional';\r\nexport * from './types/Set';\r\nexport * from './types/Text';\r\nexport * from './types/Tuple';\r\n\r\nexport * from './exprs/And';\r\nexport * from './exprs/Chain';\r\nexport * from './exprs/Comment';\r\nexport * from './exprs/Computed';\r\nexport * from './exprs/Constant';\r\nexport * from './exprs/Define';\r\nexport * from './exprs/Do';\r\nexport * from './exprs/For';\r\nexport * from './exprs/Get';\r\nexport * from './exprs/GetData';\r\nexport * from './exprs/GetEntity';\r\nexport * from './exprs/GetRelation';\r\nexport * from './exprs/If';\r\nexport * from './exprs/Invoke';\r\nexport * from './exprs/Method';\r\nexport * from './exprs/No';\r\nexport * from './exprs/Not';\r\nexport * from './exprs/Object';\r\nexport * from './exprs/Operation';\r\nexport * from './exprs/Or';\r\nexport * from './exprs/Path';\r\nexport * from './exprs/Return';\r\nexport * from './exprs/Set';\r\nexport * from './exprs/Sub';\r\nexport * from './exprs/Switch';\r\nexport * from './exprs/Template';\r\nexport * from './exprs/Tuple';\r\nexport * from './exprs/Update';\r\nexport * from './exprs/While';\r\n\r\nexport * from './def';\r\n\r\nexport * from './ops/EntityOps';\r\nexport * from './ops/AnyOps';\r\nexport * from './ops/BooleanOps';\r\nexport * from './ops/ColorOps';\r\nexport * from './ops/DateOps';\r\nexport * from './ops/ListOps';\r\nexport * from './ops/MapOps';\r\nexport * from './ops/NumberOps';\r\nexport * from './ops/ObjectOps';\r\nexport * from './ops/SetOps';\r\nexport * from './ops/TextOps';\r\nexport * from './ops/TupleOps';\r\n\r\nexport * from './ops/types/EntityOpsTypes';\r\nexport * from './ops/types/AnyOpsTypes';\r\nexport * from './ops/types/BooleanOpsTypes';\r\nexport * from './ops/types/ColorOpsTypes';\r\nexport * from './ops/types/DateOpsTypes';\r\nexport * from './ops/types/ListOpsTypes';\r\nexport * from './ops/types/MapOpsTypes';\r\nexport * from './ops/types/NumberOpsTypes';\r\nexport * from './ops/types/ObjectOpsTypes';\r\nexport * from './ops/types/SetOpsTypes';\r\nexport * from './ops/types/TextOpsTypes';\r\nexport * from './ops/types/TupleOpsTypes';\r\n\r\nexport * from './locales';\r\n\r\nexport * from './util/color/Color';\r\nexport * from './util/color/ColorSpace';\r\nexport * from './util/color/ColorSpaceHSL';\r\nexport * from './util/color/ColorSpaceRGB';\r\nexport * from './util/date/DateConstants';\r\nexport * from './util/date/DateFormat';\r\nexport * from './util/date/DateFunctions';\r\nexport * from './util/Format';"],"sourceRoot":""}