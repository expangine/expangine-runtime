{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","isCompatible","other","exact","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","def","context","validate","validateType","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","validatePath","start","subjects","forEach","getSubType","INVALID_EXPRESSION","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","op","setTypes","returnType","comp","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","compareTypes","createTypeMap","index","compareMap","equalsMap","copyList","jsonList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","baseType","register","getId","getOperations","operations","merge","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","expressions","AndExpression","e","splice","expectedType","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","ComputedExpression","getComputed","getOperation","getComputedReturnType","STEP_EXPRESSION","hasComputed","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","has","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","variable","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","GetExpression","part","getPathType","nodeValue","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","arg","param","paramName","MISSING_FUNCTION","named","nameOrArgs","argName","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","SubExpression","valueType","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","item","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","some","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","force","autoSetParent","cast","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","entity","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","getTime","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","now","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","defs","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","paramType","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","methods","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","method","addMethod","removeMethod","updated","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","created","datasets","Program","addDataset","removeDataset","updateDataset","dataset","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","obj","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","typeList","describers","parsers","entities","functions","relations","programs","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getEscaped","escaped","startEscape","endEscape","possibleEscapeIndex","endOffset","content","getFormatter","cache","handled","finalFormatter","formatted","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is any \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): boolean \n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\n  map: Record<K, V>, \n  getValue: (value: V, key: K) => R, \n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey(key, value)] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<V, M = V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeMap = Record<string, Type>;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  getData(name: string): ReferenceData | null;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<O> = any, O = any> \n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider): Type | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public abstract getExactType(value: any): Type<O>;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): boolean;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<O>;\n\n  public abstract clone(): Type<O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): any;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\n\n  public abstract fromJson(json: any): any;\n\n  public abstract toJson(value: any): any;\n  \n}","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): T;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void;\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n  protected validatePath(def: DefinitionProvider, context: Type, start: Type, subjects: Expression[], handler: ValidationHandler, parent: Expression = this): void\n  {\n    let node = start;\n\n    subjects.forEach(subject => \n    {\n      if (node)\n      {\n        node = node.getSubType(subject, def, context);\n      }\n\n      if (!node)\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          subject,\n          context,\n          parent,\n        });\n      }\n\n      subject.validate(def, context, handler);\n    });\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = []\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed {\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport class DataTypeRegistry\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expression.getComplexity(def);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public define: [string, Expression][];\n  public body: Expression;\n\n  public constructor(define: [string, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def)), this.body.getComplexity(def));\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\n\n    return this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public with(name: string, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\n  {\n    const append = isString(nameOrDefines)\n      ? { [nameOrDefines]: value }\n      : nameOrDefines;\n\n    for (const name in append)\n    {\n      const expr = Exprs.parse(append[name]);\n      const existing = this.define.find(([varName]) => varName === name);\n\n      if (existing) {\n        existing[1] = expr;\n      } else {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return Math.max(this.condition.getComplexity(def), this.body.getComplexity(def)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n  \n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ComputedExpression \n  {\n    const name = data[INDEX_NAME];\n    const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n    \n    return new ComputedExpression(expression, name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name, expr.expression.encode()];\n  }\n\n  public expression: Expression;\n  public name: string;\n\n  public constructor(expression: Expression, name: string) \n  {\n    super();\n    this.expression = expression;\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return Math.max(op ? op.complexity : 0, this.expression.getComplexity(def));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.expression.encode(), this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getComputedReturnType(this.name, this.expression.getType(def, context));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(ComputedExpression.STEP_EXPRESSION, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ComputedExpression.STEP_EXPRESSION\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const baseType = this.expression.getType(def, context);\n\n    if (!baseType || !def.hasComputed(baseType, this.name))\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.expression,\n        parent: this,\n      })\n    }\n\n    this.expression.validate(def, context, handler);\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions \n{\n  key: Type;\n  value: Type;\n  constants: Map<any, any>;\n}\n\nexport class EnumType extends Type<EnumOptions> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next();\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BREAK = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, breakVariable, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return Math.max(this.start.getComplexity(def), this.end.getComplexity(def), this.body.getComplexity(def)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (breakVariable)\n    {\n      this.breakVariable = breakVariable;\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    return new GetExpression(path);\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    const path = expr.path.map(e => e.encode());\n\n    return [this.id, path];\n  }\n\n  public static create(path: ExpressionValue[])\n  {\n    return new GetExpression(Exprs.parse(path));\n  }\n\n  public path: Expression[];\n\n  public constructor(path: Expression[]) \n  {\n    super();\n    this.path = path;\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression(this.path.map((p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.path, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.path.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.path.length\n      ? [1, this.path[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validatePath(def, context, context, this.path, handler);\n  }\n\n  public add(expr: ExpressionValue | ExpressionValue[]): GetExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], [], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport interface ObjectOptions \n{\n  props: TypeMap;\n}\n\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    return new ObjectType({\n      props: objectMap(data, d => describer.describe(d))\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<O>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        p1[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\n      {\n        key: new EnumType({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map(\n            objectValues(this.options.props, (prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => delete this.options.props[prop])\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        return false;\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<O>\n  {\n    return new ObjectType<O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    return Object.create(null);\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): any\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: any): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def),\n        result.getComplexity(def)\n      ), \n      this.otherwise.getComplexity(def)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return 0;\n    }\n\n    return func.expression.getComplexity(def);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const func = def.getFunction(this.name);\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    return func\n      ? func.getReturnType(def, argTypes)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const func = def.getFunction(this.name);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const params: TypeMap = {};\n\n      objectEach(func.params.options.props, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n\n        if (arg)\n        {\n          params[paramName] = arg.getType(def, context);\n        }\n      });\n\n      // func.options.expression.validate(def, Types.object(params), handler);\n    }\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_VALUE = 1;\n\nexport class ReturnExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'return';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new ReturnExpression(value);\n  }\n\n  public static encode(expr: ReturnExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, returnValue]\n      : [this.id];\n  }\n\n  public value: Expression;\n\n  public constructor(value: Expression) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ReturnExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.value.getComplexity(def);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ReturnExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ReturnExpression(this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ReturnExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n\n    return new SetExpression(path, value);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    const path = expr.path.map(e => e.encode());\n\n    return [this.id, path, expr.value.encode()];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue)\n  {\n    return new SetExpression(Exprs.parse(path), Exprs.parse(value));\n  }\n\n  public path: Expression[];\n  public value: Expression;\n\n  public constructor(path: Expression[], value: Expression) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), this.value.getComplexity(def));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.map((p) => p.clone()), this.value.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, () => \n        this.path.forEach((expr, index) => \n          traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n        )\n      );\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? isNumber(steps[1]) && steps[1] < this.path.length\n        ? [2, this.path[steps[1]]]\n        : null\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.forEach(e => e.setParent(this));\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validatePath(def, context, context, this.path, handler);\n\n    const expectedType = def.getPathType(this.path, context);\n\n    if (expectedType)\n    {\n      this.validateType(def, context, expectedType, this.value, handler);\n    }\n  }\n\n  public add(expr: ExpressionValue | ExpressionValue[]): SetExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n    return this;\n  }\n\n  public to(value: ExpressionValue): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_PATH = 2;\n\nexport class SubExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'sub';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \n  {\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    return new SubExpression(value, path);\n  }\n\n  public static encode(expr: SubExpression): any \n  {\n    const value = expr.value.encode();\n    const path = expr.path.map(e => e.encode());\n\n    return [this.id, value, path];\n  }\n\n  public static create(value: ExpressionValue, path: ExpressionValue[])\n  {\n    return new SubExpression(Exprs.parse(value), Exprs.parse(path));\n  }\n\n  public value: Expression;\n  public path: Expression[];\n\n  public constructor(value: Expression, path: Expression[]) \n  {\n    super();\n    this.value = value;\n    this.path = path;\n  }\n\n  public getId(): string\n  {\n    return SubExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), this.value.getComplexity(def));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SubExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SubExpression(this.value.clone(), this.path.map((p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const valueType = this.value.getType(def, context);\n\n    return valueType\n      ? def.getPathType(this.path, valueType)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SubExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SubExpression.STEP_PATH, () => {\n        this.path.forEach((expr, index) => \n          traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n        )\n      });\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SubExpression.STEP_PATH\n      ? isNumber(steps[1]) && steps[1] < this.path.length\n        ? [2, this.path[steps[1]]]\n        : null\n      : steps[0] === SubExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.path.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const type = this.value.getType(def, context);\n\n    this.validatePath(def, context, type, this.path, handler);\n\n    this.value.validate(def, context, handler);\n  }\n\n  public with(expr: ExpressionValue): SubExpression\n  {\n    this.value = Exprs.parse(expr);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n  public sub(expr: ExpressionValue | ExpressionValue[]): SubExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def), \n        this.defaultCase.getComplexity(def)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst DEFAULT_CURRENT = 'current';\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\n\nexport class UpdateExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'up';\n\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \n  {\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT;\n\n    return new UpdateExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: UpdateExpression): any \n  {\n    const path = expr.path.map(e => e.encode());\n    const value = expr.value.encode();\n\n    return expr.currentVariable === DEFAULT_CURRENT\n      ? [this.id, path, value]\n      : [this.id, path, value, expr.currentVariable]\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\n  {\n    return new UpdateExpression(Exprs.parse(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: Expression[];\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: Expression[], value: Expression, currentVariable: string = DEFAULT_CURRENT) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return UpdateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.path.reduce((max, e) => Math.max(max, e.getComplexity(def)), this.value.getComplexity(def));\n  }\n\n  public getScope()\n  {\n    return {\n      [this.currentVariable]: AnyType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return UpdateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new UpdateExpression(this.path.map((p) => p.clone()), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(UpdateExpression.STEP_PATH, () => \n        this.path.forEach((expr, index) => \n          traverse.step(index, expr, (replaceWith) => this.path.splice(index, 1, replaceWith), () => this.path.splice(index, 1))\n        )\n      );\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === UpdateExpression.STEP_PATH\n      ? isNumber(steps[1]) && steps[1] < this.path.length\n        ? [2, this.path[steps[1]]]\n        : null\n      : steps[0] === UpdateExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.forEach(e => e.setParent(this));\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validatePath(def, context, context, this.path, handler);\n\n    const expectedType = def.getPathType(this.path, context);\n\n    if (expectedType)\n    {\n      const valueContext = def.getContext(context, {\n        [this.currentVariable]: expectedType,\n      });\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n  }\n\n  public add(expr: ExpressionValue | ExpressionValue[]): UpdateExpression\n  {\n    const append = isArray(expr)\n      ? expr\n      : [expr];\n\n    for (const nodeValue of append)\n    {\n      const node = Exprs.parse(nodeValue);\n      this.path.push(node);\n      node.setParent(this);\n    }\n\n\n    return this;\n  }\n\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable || this.currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): UpdateExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n    \n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return Math.max(this.condition.getComplexity(def), this.body.getComplexity(def)) + 1;\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions \n{\n  item: Type;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType extends Type<ListOptions> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    return new ListType({ \n      item,\n      min: data.length,\n      max: data.length\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport class TupleType extends Type<Type[]>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: TupleType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType\n  {\n    return new TupleType([]);\n  }\n\n  public clone(): TupleType\n  {\n    return new TupleType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return this.options.map(e => e.create());\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return this.options.map((e, i) => e.fromJson(json[i]));\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => delete this.props[prop])\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { ReturnExpression } from './exprs/Return';\nimport { SetExpression } from './exprs/Set';\nimport { SubExpression } from './exprs/Sub';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { UpdateExpression } from './exprs/Update';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type } from './Type';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\n  }\n\n  public static get(...path: ExpressionValue[]): GetExpression\n  {\n    return this.setParent(new GetExpression(this.parse(path)));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): SubExpression\n  {\n    return this.setParent(new SubExpression(this.parse(value), this.parse(path)));\n  }\n\n  public static computed(name: string, value: ExpressionValue): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(this.parse(value), name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\n  {\n    return this.setParent(new ReturnExpression(this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.parse(path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static update(...path: ExpressionValue[]): UpdateExpression\n  {\n    return this.setParent(new UpdateExpression(this.parse(path), NoExpression.instance));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0)\n  y.setFullYear(y.getFullYear(), month, 1)\n  y.setHours(0, 0, 0, 0)\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): any\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions \n{\n  key: Type;\n  value: Type;\n}\n\nexport class MapType extends Type<MapOptions> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    return new MapType({ key, value });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop of map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport class OptionalType extends Type<Type>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): any\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions\n{\n  hasAlpha?: boolean;\n}\n\n\nexport class ColorType extends ObjectType<ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any): Type | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      delete this.transcoders[prop];\n\n      this.transcoders[newProp] = transcoder;\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        instance[prop] = this.instances.reduce((a, b) => Math.max(a, b[prop]), 0) + 1;\n        break;\n      case EntityPrimaryType.UUID:\n        instance[prop] = Entity.uuid();\n        break;\n    }\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    this.indexes[name] = index;\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    delete this.indexes[name];\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      delete this.indexes[name];\n\n      this.indexes[newName] = index;\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    this.transcoders[prop] = transcoder;\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      delete this.transcoders[name];\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    this.methods[method.name] = method;\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      delete this.methods[name];\n\n      this.methods[newName] = method;\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      delete this.methods[name];\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions \n{\n  value: Type;\n}\n\nexport class SetType extends Type<SetOptions> \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    return new SetType({ value });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<any>): Set<any>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<any>): Array<any>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.entries()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\n  {\n    return this.setParent(new EnumType({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list(item: TypeInput, min?: number, max?: number)\n  {\n    return this.setParent(new ListType({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map(value: TypeInput, key: TypeInput = TextType)\n  {\n    return this.setParent(new MapType({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object(props: TypeInputMap = {})\n  {\n    return this.setParent(new ObjectType({ \n      props: this.resolve(props),\n    }));\n  }\n\n  public static optional(type: TypeInput): Type\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set(value: TypeInput)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple(types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\n  {\n    return this.setParent(new TupleType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static parse(input: TypeInput): Type\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  private listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { ObjectType, ObjectOptions } from './types/Object';\nimport { TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { isEmpty, objectMap, arraySync, isNumber } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  description: string;\n  meta: any;\n  params: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      description: '',\n      meta: null,\n      params: Types.object(),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public description: string;\n  public meta: any;\n  public params: ObjectType<ObjectOptions>;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\n    this.expression = defs.getExpression(options.expression);\n    this.defaults = this.params.fromJson(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.params = options instanceof Func\n        ? options.params\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\n      this.expression = options instanceof Func\n        ? options.expression\n        : defs.getExpression(options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.params.fromJson(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, description, meta, params, expression, defaults, tests } = this;\n\n    return {\n      name,\n      description, \n      meta,\n      params: params.encode(),\n      expression: expression.encode(),\n      defaults: params.toJson(defaults),\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const paramType = this.params.options.props[name];\n\n    if (paramType)\n    {\n      this.params.options.props[newName] = paramType;\n      delete this.params.options.props[name];\n\n      if (name in this.defaults)\n      {\n        this.defaults[newName] = this.defaults[name];\n        delete this.defaults[name];\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const exists = name in this.params.options.props[name];\n\n    if (exists)\n    {\n      delete this.params.options.props[name];\n      delete this.defaults[name];\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \n  {\n    const context = Types.object({\n      ...this.params.options.props,\n      ...paramsTypes,\n    });\n\n    return this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): ObjectType\n  {\n    return isEmpty(this.defaults)\n      ? this.params\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\n  }\n\n  public getParamType(param: string)\n  {\n    const propType = this.params.options.props[param];\n\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\n      ? propType.getRequired()\n      : propType;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.params.options.props[prop];\n\n      if (!propType.getRequired().isValid(target[prop]))\n      {\n        target[prop] = DataTypes.copy(this.defaults[prop]);\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    const now = new Date().getTime();\n\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now,\n      updated: now,\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now,\n        updated: now,\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: ProgramDataSet, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, meta, dataType, data } = this;\n\n    return {\n      name,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func, 'params' | 'returnType'] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func, 'params' | 'returnType'] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(data: any): Type\n  {\n    for (const describer of this.describers)\n    {\n      const type = describer.describe(data, this);\n\n      if (type)\n      {\n        return type;\n      }\n    }\n\n    return AnyType.baseType;\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.args[newName] = ref.value.args[oldName];\n      delete ref.value.args[oldName];\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      delete ref.value.args[name];\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    let optional = false;\n    let node = context;\n\n    for (let i = 0; i < stopBefore; i++)\n    {\n      node = node.getSubType(path[i], this, context);\n\n      if (!node)\n      {\n        return null;\n      }\n\n      optional = optional || node.isOptional();\n    }\n\n    return optional && !node.isOptional() ? Types.optional(node) : node;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const exprClass = this.expressions[value[0]];\n\n      if (!exprClass)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return exprClass.decode(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.getReturnType(this);\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.params,\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.getReturnType(this);\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.params,\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.params,\n        source: [func, 'params'],\n      });\n\n      if (dynamic) {\n        instances.push({\n          type: func.getReturnType(this),\n          source: [func, 'returnType'],\n        });\n      }\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.params,\n          source: [entity, method, 'params'],\n        });\n\n        if (dynamic) {\n          instances.push({\n            type: method.getReturnType(this),\n            source: [entity, method, 'returnType'],\n          });\n        }\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        context: func.params,\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.getParamTypes(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public returnProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.returnProperty = this.returnProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : () => value;\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { ReturnExpression } from '../exprs/Return';\nimport { SetExpression } from '../exprs/Set';\nimport { SubExpression } from '../exprs/Sub';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { UpdateExpression } from '../exprs/Update';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    ReturnExpression,\n    SetExpression,\n    SubExpression,    \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    UpdateExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName }\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ManyType } from '../../types/Many';\nimport { NullType } from '../../types/Null';\nimport { Type } from '../../Type';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => {\n      let optional = true;\n      const types: Type[] = [];\n      const checkType = (x?: Type) => {\n        if (!optional) return;\n        \n        if (x) {\n          let xoptional = x instanceof OptionalType;\n          const xinner = xoptional ? x.options as Type : x;\n\n          if (xinner instanceof ManyType) {\n            xinner.options.forEach((y) => {\n              const yoptional = y instanceof OptionalType;\n              const yinner = yoptional ? y.options as Type : y;\n\n              xoptional = xoptional || yoptional;\n\n              if (!types.some(t => t.exactType(yinner))) {\n                types.push(yinner);\n              }\n            });\n          }\n\n          optional = optional && xoptional;\n\n          if (!types.some(t => t.exactType(xinner))) {\n            types.push(xinner);\n          }\n        }\n      };\n\n      checkType(i.a);\n      checkType(i.b);\n      checkType(i.c);\n      checkType(i.d);\n      checkType(i.e);\n\n      return types.length > 1\n        ? optional\n          ? Types.optional(new ManyType(types))\n          : new ManyType(types)\n        : types.length === 1\n          ? optional\n            ? Types.optional(types[0])\n            : types[0]\n          : NullType;\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    AnyType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type, TypeMap } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { OptionalType } from '../../types/Optional';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EntityType } from '../../types/Entity';\nimport { Types } from '../../Types';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => {\n      const props: TypeMap = {};\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n\n      for (const param of params) \n      {\n        let paramType = i[param];\n\n        if (paramType instanceof EntityType)\n        {\n          paramType = paramType.getType();\n        }\n\n        if (paramType instanceof ObjectType) \n        {\n          const paramProps = paramType.options.props;\n\n          for (const prop in paramProps) \n          {\n            const paramProp = paramProps[prop];\n\n            if (prop in props && paramProp instanceof OptionalType) \n            {\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\n            } \n            else \n            {\n              props[prop] = paramProp;\n            }\n          }\n        }\n      }\n\n      return new ObjectType({ props });\n    },\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number,\n  formats: FormatterMap<T>\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  }\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this\n  public add(key: string, formatter: Formatter<T>): this\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n}","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}","\nexport * from './fns';\n\nexport * from './Command';\nexport * from './DefinitionProvider';\nexport * from './Definitions';\nexport * from './DataTypes';\nexport * from './Entity';\nexport * from './EventBase';\nexport * from './Expression';\nexport * from './Exprs';\nexport * from './Func';\nexport * from './LinkedNode';\nexport * from './Locale';\nexport * from './Operation';\nexport * from './Computed';\nexport * from './Program';\nexport * from './ReferenceData';\nexport * from './Relation';\nexport * from './Runtime';\nexport * from './Type';\nexport * from './Types';\nexport * from './Traverser';\nexport * from './Validate';\n\nexport * from './maps/FastMap';\nexport * from './maps/NamedMap';\n\nexport * from './types/ID';\nexport * from './types/Entity';\nexport * from './types/Any';\nexport * from './types/Boolean';\nexport * from './types/Color';\nexport * from './types/Date';\nexport * from './types/Enum';\nexport * from './types/List';\nexport * from './types/Many';\nexport * from './types/Map';\nexport * from './types/Not';\nexport * from './types/Null';\nexport * from './types/Number';\nexport * from './types/Object';\nexport * from './types/Optional';\nexport * from './types/Set';\nexport * from './types/Text';\nexport * from './types/Tuple';\n\nexport * from './exprs/And';\nexport * from './exprs/Chain';\nexport * from './exprs/Comment';\nexport * from './exprs/Computed';\nexport * from './exprs/Constant';\nexport * from './exprs/Define';\nexport * from './exprs/Do';\nexport * from './exprs/For';\nexport * from './exprs/Get';\nexport * from './exprs/GetData';\nexport * from './exprs/GetEntity';\nexport * from './exprs/GetRelation';\nexport * from './exprs/If';\nexport * from './exprs/Invoke';\nexport * from './exprs/No';\nexport * from './exprs/Not';\nexport * from './exprs/Object';\nexport * from './exprs/Operation';\nexport * from './exprs/Or';\nexport * from './exprs/Return';\nexport * from './exprs/Set';\nexport * from './exprs/Sub';\nexport * from './exprs/Switch';\nexport * from './exprs/Template';\nexport * from './exprs/Tuple';\nexport * from './exprs/Update';\nexport * from './exprs/While';\n\nexport * from './def';\n\nexport * from './ops/EntityOps';\nexport * from './ops/AnyOps';\nexport * from './ops/BooleanOps';\nexport * from './ops/ColorOps';\nexport * from './ops/DateOps';\nexport * from './ops/ListOps';\nexport * from './ops/MapOps';\nexport * from './ops/NumberOps';\nexport * from './ops/ObjectOps';\nexport * from './ops/SetOps';\nexport * from './ops/TextOps';\nexport * from './ops/TupleOps';\n\nexport * from './ops/types/EntityOpsTypes';\nexport * from './ops/types/AnyOpsTypes';\nexport * from './ops/types/BooleanOpsTypes';\nexport * from './ops/types/ColorOpsTypes';\nexport * from './ops/types/DateOpsTypes';\nexport * from './ops/types/ListOpsTypes';\nexport * from './ops/types/MapOpsTypes';\nexport * from './ops/types/NumberOpsTypes';\nexport * from './ops/types/ObjectOpsTypes';\nexport * from './ops/types/SetOpsTypes';\nexport * from './ops/types/TextOpsTypes';\nexport * from './ops/types/TupleOpsTypes';\n\nexport * from './locales';\n\nexport * from './util/color/Color';\nexport * from './util/color/ColorSpace';\nexport * from './util/color/ColorSpaceHSL';\nexport * from './util/color/ColorSpaceRGB';\nexport * from './util/date/DateConstants';\nexport * from './util/date/DateFormat';\nexport * from './util/date/DateFunctions';\nexport * from './util/Format';"],"sourceRoot":""}