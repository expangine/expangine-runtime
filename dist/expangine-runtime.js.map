{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/helpers.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","getWrappedType","isCompatible","other","exact","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","isDynamic","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","getSimplifiedType","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","has","defaultResult","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","cache","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","arg","expressions","AndExpression","e","some","expectedType","directly","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","SetExpression","fromPartial","STEP_PATH","isWritable","READONLY","INVALID_EXPRESSION","isMutating","currentVariable","UpdateExpression","valueContext","withVariable","PathExpression","pathData","isPath","getPathType","thisType","EMPTY_PATH","e0","e1","e2","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","param","paramName","MISSING_FUNCTION","argName","argType","named","nameOrArgs","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","paramType","alias","scoped","ReturnExpression","returnValue","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","flatten","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","propExpr","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","SECONDS_IN_MINUTE","HOURS_IN_DAY","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","takeKey","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","moveDataset","inside","movable","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","completeData","describedType","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","isExpression","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","objectType","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","MergedObjectType","GivenObjectType","paramProps","paramProp","merger","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getFormatter","escaped","getEscaped","content","handled","finalFormatter","formatted","startEscape","endEscape","possibleEscapeIndex","endOffset","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"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","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\nexport type RecordKey = string | number | symbol;\n\nexport type MapInput<K = any, V = any> = \n  Map<K, V> | \n  Array<[K, V]> | \n  (K extends string | number | symbol ? Record<K, V> : never);\n\nexport function isNumber(value: any): value is number \n{\n  return typeof value === 'number' && isFinite(value);\n}\n\nexport function isString(value: any): value is string \n{\n  return typeof value === 'string';\n}\n\nexport function isArray<T = any>(value: any): value is T[] \n{\n  return Array.isArray(value);\n}\n\nexport function isDate(value: any): value is Date\n{\n  return value instanceof Date;\n}\n\nexport function isMap<K, V>(value: any): value is Map<K, V>\n{\n  return value instanceof Map;\n}\n\nexport function isSet<V>(value: any): value is Set<V>\n{\n  return value instanceof Set;\n}\n\nexport function isBoolean(value: any): value is boolean \n{\n  return typeof value === 'boolean';\n}\n\nexport function isFunction(value: any): value is ((...args: any[]) => any) \n{\n  return typeof value === 'function';\n}\n\nexport function isObject(value: any): value is Record<string, any> \n{\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport function isUndefined(value: any): value is undefined \n{\n  return typeof value === 'undefined';\n}\n\nexport function isSameClass(a: any, b: any): boolean\n{\n  return a.constructor === b.constructor;\n}\n\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\n{\n  return Math.abs(x - Math.round(x)) <= epsilon;\n}\n\nexport function isEmpty(value: any): value is ([] | {} | null | undefined)\n{\n  if (isArray(value)) \n  {\n    return value.length === 0;\n  }\n  else if (isObject(value)) \n  {\n    for (const _prop in value) \n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  return value === null || value === undefined;\n}\n\nexport function now(): number\n{\n  return new Date().getTime();\n}\n\nexport function clamp(x: number, min: number, max: number): number\n{\n  return x < min ? min : x > max ? max : x;\n}\n\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\n{\n  if (isArray(input))\n  {\n    return new Map(input);\n  }\n  else if (isMap(input))\n  {\n    return input;\n  }\n  else if (isObject(input))\n  {\n    return new Map(objectToArray(input, (v, k) => [k, v]));\n  }\n  \n  return new Map();\n}\n\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\n{\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\n}\n\nexport function arraySync<V, W = V>(\n  target: V[],\n  source: W[],\n  matches: (target: V, source: W) => boolean,\n  add: (target: V[], value: W) => void,\n  remove: (target: V[], index: number, value: V) => void,\n  update: (target: V[], index: number, value: V, newValue: W) => void,\n): V[]\n{\n  const taken = source.map(() => false);\n\n  for (let i = target.length - 1; i >= 0; i--)\n  {\n    const targetValue = target[i];\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\n\n    if (matchIndex !== -1)\n    {\n      update(target, i, targetValue, source[matchIndex]);\n\n      taken[matchIndex] = true;\n    }\n    else\n    {\n      remove(target, i, targetValue);\n    }\n  }\n\n  for (let i = 0; i < source.length; i++)\n  {\n    if (!taken[i])\n    {\n      add(target, source[i]);\n    }\n  }\n\n  return target;\n}\n\nexport function objectSync<V, K extends RecordKey = string>(\n  target: Record<K, V>,\n  source: Record<K, V>,\n  add: (target: Record<K, V>, key: K, value: V) => void,\n  remove: (target: Record<K, V>, key: K, value: V) => void,\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\n): Record<K, V> \n{\n for (const key in target)\n {\n   if (!(key in source))\n   {\n     remove(target, key, target[key]);\n   }\n }\n\n for (const key in source)\n {\n   if (key in target)\n   {\n     update(target, key, target[key], source[key]);\n   }\n   else\n   {\n     add(target, key, source[key]);\n   }\n }\n\n  return target;\n}\n\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\n  map: Record<K, V>, \n  getValue: (value: V, key: K) => R, \n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \n{\n  return objectReduce(map, (value, key, out) => \n    (out[getKey(key, value)] = getValue(value, key), out)\n  , Object.create(null));\n}\n\nexport function objectEach<V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\n{\n  return objectReduce(map, (value, key) => \n    onEach(value, key, map)\n  , undefined);\n}\n\nexport function objectValues<V, M = V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\n{\n  return objectReduce(map, (value, key, out) => \n    (out.push(transform(value, key)), out)\n  , []);\n}\n\nexport function objectReduce<R, V, K extends RecordKey = string>(\n  map: Record<K, V>, \n  reduce: (value: V, key: K, reduced: R) => R, \n  initial: R): R\n{\n  for (const key in map)\n  {\n    initial = reduce(map[key], key, initial);\n  }\n\n  return initial;\n}\n\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\n{\n  const out = Object.create(null) as Record<P, V>;\n\n  for (let i = 0; i < props.length; i++)\n  {\n    const prop = props[i];\n\n    out[prop] = getValue(prop, i);\n  }\n\n  return out;\n}\n\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\n{\n  const arr: T[] = [];\n\n  for (const key in map)\n  {\n    arr.push(getItem(map[key], key));\n  }\n\n  return arr;\n}\n\n\nexport function coalesce<T>(x?: T, y?: T): T\n{\n  return x === undefined ? y : x;\n}\n\nexport function padNumber(x: number, length: number, first: number = length)\n{\n  return pad(x + '', length, '0', true).substring( 0, first );\n}\n\nexport function pad(x: string, length: number, padding: string, before: boolean): string\n{\n  while (x.length < length)\n  {\n    before ? x = padding + x : x = x + padding;\n  }\n\n  return x;\n}\n\nexport function toString(x: any)\n{\n  return isArray(x) || isObject(x)\n    ? JSON.stringify(x)\n    : x + '';\n}","import { isFunction } from './fns';\n\n\nexport type TraverseStep = string | number;\n\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\n\nexport type TraverseRemove = () => void;\n\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\n\nexport type TraverseReplace<T> = (replaceWith: T) => void;\n\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\n\nexport interface Traversable<T>\n{\n  traverse<R>(traverse: Traverser<T, R>): R;\n}\n\nexport interface TraverseResult<T>\n{\n  value: T;\n  stack: T[];\n  path: TraverseStep[];\n}\n\nexport class Traverser<T, R = any>\n{\n\n  public static isTraversable<T>(x: any): x is Traversable<T>\n  {\n    return x && isFunction(x.traverse);\n  }\n\n  public callback: TraverseCallback<T, R>;\n  public stack: T[];\n  public path: TraverseStep[];\n  public result: R;\n  public stopped: boolean;\n  public remove: TraverseRemove = TraverseRemoveNoop;\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\n\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\n  {\n    this.callback = callback;\n    this.stack = [];\n    this.path = [];\n    this.stopped = false;\n    this.result = initialResult;\n  }\n\n  public enter(value: T, getInner?: () => any): R\n  {\n    if (this.stopped)\n    {\n      return this.result;\n    }\n    \n    this.callback(value, this.stack, this.path, this);\n\n    this.remove = TraverseRemoveNoop;\n    this.replace = TraverseReplaceNoop;\n\n    if (getInner && !this.stopped)\n    {\n      this.stack.push(value);\n\n      getInner();\n\n      this.stack.pop();\n    }\n\n    return this.result;\n  }\n\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\n  {\n    if (this.stopped)\n    {\n      return this;\n    }\n\n    this.path.push(step);\n\n    this.remove = remove;\n    this.replace = replace;\n\n    if (Traverser.isTraversable<T>(getStep))\n    {\n      getStep.traverse(this);\n    }\n    else\n    {\n      getStep();\n    }\n\n    this.path.pop();\n\n    return this;\n  }\n\n  public modify(getResult: (result: R) => R | undefined): this\n  {\n    const newResult = getResult(this.result);\n\n    if (newResult !== undefined)\n    {\n      this.result = newResult;\n    }\n\n    return this;\n  }\n\n  public stop(result?: R): this\n  {\n    this.result = result;\n\n    return this;\n  }\n\n  public getResult(): R\n  {\n    return this.result;\n  }\n\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\n  {\n    const remove = this.canRemove();\n    const replace = this.canReplace();\n\n    if (!remove && !replace) {\n      return false;\n    }\n\n    remove\n      ? this.remove()\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\n\n    return true;\n  }\n\n  public canRemove(): boolean\n  {\n    return this.remove !== TraverseRemoveNoop;\n  }\n\n  public canReplace(): boolean\n  {\n    return this.replace !== TraverseReplaceNoop;\n  }\n\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\n  {\n    return this.filter((value: T) => value.constructor === construct, initialResult);\n  }\n\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\n  {\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\n      if (pass(value, stack, path)) {\n        this.callback(value, stack, path, traverser);\n      }\n    };\n\n    return new Traverser<T, R>(callback, initialResult);\n  }\n\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\n  {\n    const list: TraverseResult<T>[] = [];\n\n    return new Traverser((value, stack, path) => {\n      list.push({\n        value,\n        stack: stack.slice(),\n        path: path.slice(),\n      });\n    }, list);\n  }\n\n  public static count<T>(): Traverser<T, number>\n  {\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\n  }\n\n}","import { Expression } from './Expression';\nimport { Type } from './Type';\n\n\n\nexport enum ValidationSeverity \n{\n  LOW = 1,\n  MEDIUM = 2,\n  HIGH = 3,\n}\n\nexport enum ValidationType \n{\n  UNSAFE_OPERATION = 1,       // LOW\n  POSSIBLY_NULL = 2,          // MEDIUM\n  INCOMPATIBLE_TYPES = 3,     // HIGH\n  INVALID_EXPRESSION = 4,     // HIGH\n  MISSING_FUNCTION = 5,       // HiGH\n  MISSING_EXPRESSION = 6,     // HiGH\n  MISSING_OPERATION = 7,      // HiGH\n  MISSING_TYPE_NAME = 8,      // HIGH\n  MISSING_TYPE = 9,           // HIGH\n  MISSING_RELATION_NAME = 10, // HIGH\n  MISSING_RELATION = 11,      // HIGH\n  MISSING_DATA_NAME = 12,     // HIGH\n  MISSING_DATA = 13,          // HIGH\n  OUTSIDE_PATH = 14,          // HIGH\n  READONLY = 15,              // HIGH\n  EMPTY_PATH = 16,            // HIGH\n  INVALID_THIS = 17,          // HIGH\n  MISSING_METHOD = 18,        // HIGH\n}\n\nexport interface Validation \n{\n  type: ValidationType;\n  severity: ValidationSeverity;\n  context: Type;\n  subject?: Expression;\n  parent?: Expression;\n  expected?: Type;\n  actual?: Type;\n}\n\nexport type ValidationHandler = (validation: Validation) => void;\n","\nimport { isSameClass } from './fns';\nimport { Operations, OperationGeneric } from './Operation';\nimport { Expression } from './Expression';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\nimport { Computeds } from './Computed';\nimport { ReferenceData } from './ReferenceData';\n\n\n\nexport type TypeInput = TypeClass | Type;\n\nexport type TypeInputMap = Record<string, TypeInput>;\n\nexport type TypeMap = Record<string, Type>;\n\nexport interface TypeSub \n{ \n  key: string | number | Type;\n  value: Type;\n}\n\nexport type TypeResolved<T> = T extends (null | undefined)\n  ? undefined\n  : T extends TypeInput\n    ? Type\n    : T extends TypeInput[]\n      ? Type[]\n      : T extends TypeInputMap\n        ? Record<keyof T, Type>\n        : {\n          [K in keyof T]: TypeResolved<T[K]>\n        };\n\nexport interface TypeProvider \n{\n  getType(data: any, otherwise?: Type): Type;\n  getExpression(data: any): Expression;\n  getData(name: string): ReferenceData | null;\n  setLegacy(): void;\n}\n\nexport interface TypeDescribeProvider\n{\n  describe(data: any): Type;\n  merge(type: Type, data: any): Type;\n}\n\nexport interface TypeCompatibleOptions\n{\n  strict?: boolean;\n  value?: boolean;\n  exact?: boolean;\n}\n\nexport interface TypeParser \n{\n  (data: any, types: TypeProvider): Type;\n}\n\nexport interface TypeClass<T extends Type<O> = any, O = any> \n{\n  id: string;\n  operations: Operations;\n  computeds: Computeds;\n  baseType: T;\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\n  encode(this: TypeClass<T>, type: T): any;\n  describePriority: number;\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null;\n  register(this: TypeClass<T>): void;\n  registered: boolean;\n  new(options: O, ...args: any[]): T;\n}\n\nexport abstract class Type<O = any> implements Traversable<Type>\n{\n\n  public options: O;\n  public parent: Type = null;\n\n  public constructor(options: O) \n  {\n    this.options = options;\n  }\n\n  public abstract getOperations(): Record<string, OperationGeneric>;\n\n  public abstract getId(): string;\n\n  public abstract merge(type: Type<O>): void;\n\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\n\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\n\n  public abstract getExactType(value: any): Type<O>;\n\n  public abstract getSimplifiedType(): Type;\n\n  public getRequired(): Type\n  {\n    return this;\n  }\n\n  public isWrapper(): boolean\n  {\n    return false;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this;\n  }\n\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\n\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\n  {\n    if (other === this)\n    {\n      return true;\n    }\n\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getWrappedType(), options))\n    {\n      return true;\n    }\n\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\n    {\n      return false;\n    }\n\n    return this.isDeepCompatible(other, options);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return false;\n  }\n\n  public acceptsType(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true });\n  }\n\n  public acceptsData(other: Type): boolean\n  {\n    return this.isCompatible(other, { strict: true, value: true });\n  }\n\n  public exactType(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true });\n  }\n\n  public exactData(other: Type): boolean\n  {\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\n  }\n\n  public abstract isOptional(): boolean;\n\n  public abstract isSimple(): boolean;\n\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\n\n  public abstract setParent(parent?: Type): void;\n\n  public abstract removeDescribedRestrictions(): void;\n\n  public abstract getCreateExpression(): Expression;\n\n  public abstract getValidateExpression(): Expression;\n\n  public abstract getCompareExpression(): Expression;\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    return newValue;\n  }\n\n  public getValueChangeAt(newValue: Expression): Expression\n  {\n    let node: Type = this.parent;\n    const path = this.getPath();\n\n    while(node)\n    {\n      const step = path.pop();\n\n      newValue = node.getValueChangeExpression(newValue, step, step);\n      node = node.parent;\n    }\n\n    return newValue;\n  }\n\n  public getPath(): TraverseStep[]\n  {\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getTypeFromPath(path: TraverseStep[]): Type | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const type = this.getTypeFromStep(path[0]);\n\n    if (!type)\n    {\n      return null;\n    }\n\n    return type.getTypeFromPath(path.slice(1));\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return null;\n  }\n\n  public getRootType(): Type\n  {\n    let node: Type = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public abstract isValid(value: any): boolean;\n\n  public abstract normalize(value: any): any;\n\n  public abstract newInstance(): Type<O>;\n\n  public abstract clone(): Type<O>;\n\n  public abstract encode(): any;\n\n  public abstract create(): any;\n\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\n\n  public abstract fromJson(json: any): any;\n\n  public abstract toJson(value: any): any;\n  \n}","import { Type, TypeMap } from './Type';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\n\n\nexport interface ExpressionProvider \n{ \n  getExpression(value: any): Expression;\n  setLegacy(): void;\n}\n\nexport interface ExpressionClass<T extends Expression = any> \n{\n  id: string;\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\n  encode(this: ExpressionClass<T>, expr: T): any;\n  new(...args: any[]): T;\n}\n\nexport type ExpressionValue = any | Expression;\n\nexport type ExpressionMap = Record<string, Expression>;\n\nexport abstract class Expression implements Traversable<Expression>\n{\n\n  public static INSTANCE = 'instance';\n\n  public parent: Expression = null;\n  \n  public abstract getId(): string;\n\n  public abstract getScope(): TypeMap | null;\n\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\n\n  public abstract encode(): any;\n\n  public abstract clone(): Expression;\n\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\n\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\n\n  public abstract setParent(parent?: Expression): void;\n\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\n  \n  public abstract mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;\n\n  public isDynamic(): boolean\n  {\n    return true;\n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return false;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return true;\n  }\n  \n  public getPath(): TraverseStep[]\n  {\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\n    {\n      if (type === this)\n      {\n        traverser.stop(path.slice());\n      }\n    }));\n  }\n\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\n  {\n    if (path.length === 0)\n    {\n      return this;\n    }\n    \n    const step = this.getExpressionFromStep(path);\n\n    if (!step || !step[1])\n    {\n      return null;\n    }\n\n    const [steps, expr] = step;\n\n    return expr.getExpressionFromPath(path.slice(steps));\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public getRootExpression(): Expression\n  {\n    let node: Expression = this;\n\n    while (node.parent)\n    {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  public validations(def: DefinitionProvider, context: Type): Validation[]\n  {\n    const validations: Validation[] = [];\n\n    this.validate(def, context, x => validations.push(x));\n\n    return validations;\n  }\n\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\n  {\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\n    const actualComplete = subject ? subject.getType(def, context) : null;\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\n    let test = actual;\n\n    if (!actual)\n    {\n      if (expected && !expected.isOptional())\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n        });\n      }\n    }\n    else\n    {\n      if (actual.isOptional() && !expected.isOptional())\n      {\n        test = test.getRequired();\n      }\n\n      if (!expected.acceptsType(test))\n      {\n        handler({\n          type: ValidationType.INCOMPATIBLE_TYPES,\n          severity: expected.isCompatible(actual)\n            ? ValidationSeverity.MEDIUM\n            : ValidationSeverity.HIGH,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n      else if (test !== actual)\n      {\n        handler({\n          type: ValidationType.POSSIBLY_NULL,\n          severity: ValidationSeverity.MEDIUM,\n          context,\n          subject,\n          parent,\n          expected,\n          actual,\n        });\n      }\n    }\n\n    if (subject)\n    {\n      subject.validate(def, context, handler);\n    }\n  }\n\n}","\nimport { Type, TypeInput, TypeProvider } from './Type';\nimport { isFunction } from './fns';\nimport { Entity } from './Entity';\nimport { Relation, EntityRelation } from './Relation';\nimport { NamedMap } from './maps/NamedMap';\n\n\nexport interface OperationFlags\n{\n  complexity: number;\n  mutates: string[];\n}\n\nexport interface Operation<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never,\n  H extends (P | O) = never,\n  R extends (P | O) = never\n> extends OperationFlags {\n  id: string;\n  params: P[];\n  optional: O[];\n  scope: S[];\n  scopeDefaults: Record<S, string>;\n  hasScope: H[];\n  resultDependency: R[];\n}\n\nexport type OperationResolved<\n  P extends string, \n  O extends string, \n  S extends string, \n  H extends (P | O), \n  R extends (P | O)\n> = Operation<\n  string extends P ? never : P, \n  string extends O ? never : O, \n  string extends S ? never : S, \n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\n>;\n\nexport interface OperationTypeProvider extends TypeProvider\n{\n  getEntity(name: string): Entity | null;\n  getEntities(): NamedMap<Entity>;\n  getRelation(name: string): Relation | null;\n  getRelations(entityName: string): EntityRelation[];\n}\n\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\n\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\n\nexport interface OperationTypes<\n  P extends string = never, \n  O extends string = never,\n  S extends string = never\n> {\n  returnType: OperationTypeInput<P | O>,\n  params: Record<P, OperationTypeInput<P | O>>;\n  optional: Record<O, OperationTypeInput<P | O>>;\n  scope: Record<S, OperationTypeInput<P | O>>;\n  rawTypes?: boolean;\n}\n\nexport type OperationGeneric = Operation<any, any, any, any, any>;\n\nexport interface OperationPair<\n  P extends string = any, \n  O extends string = any,\n  S extends string = any\n> {\n  op: Operation<P, O, S, any, any>;\n  types: OperationTypes<P, O, S>;\n}\n\nexport interface OperationMapping\n{\n  from: Operation<any, any, any, any, any>;\n  fromTypes: OperationTypes<any, any, any>;\n  to: Operation<any, any, any, any, any>;\n  toTypes: OperationTypes<any, any, any>;\n  mapping: Record<string, string>;\n  unmapped: string[];\n}\n\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\n{\n  return !('baseType' in x) && isFunction(x);\n}\n\nexport class Operations\n{\n\n  public prefix: string;\n\n  public map: Record<string, OperationGeneric>;\n  public types: Record<string, OperationTypes<any, any, any>>;\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.types = Object.create(null);\n  }\n\n  public get (id: string): OperationGeneric\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n  public getTypes (id: string): OperationTypes<any, any, any>\n  {\n    return this.types[id] || this.types[this.prefix + id];\n  }\n\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\n    localId: string, \n    flags: Partial<OperationFlags> = {},\n    params: P[] = [], \n    optional: O[] = [], \n    scope: S[] = [],\n    hasScope: H[] = [],\n    resultDependency: R[] = []\n  ) : OperationResolved<P, O, S, H, R> \n  {\n    const id = this.prefix + localId;\n    const mutates = flags.mutates || [];\n    const complexity = flags.complexity || 0;\n    const scopeDefaults: Record<S, string> = Object.create(null);\n    scope.forEach((s) => scopeDefaults[s] = s);\n\n    const op = { \n      id, \n      mutates, \n      complexity, \n      params,\n      optional,\n      scope,\n      scopeDefaults,\n      hasScope,\n      resultDependency\n    };\n    \n    this.map[id] = op;\n\n    return op as unknown as OperationResolved<P, O, S, H, R>;\n  }\n\n  public setTypes(\n    op: Operation<never, never, never, never, never>,\n    returnType: OperationTypeInput<never>\n  ) : OperationTypes<never, never, never>\n  public setTypes<P extends string>(\n    op: Operation<P, never, never, any, any>,\n    returnType: OperationTypeInput<P>,\n    params: Record<P, OperationTypeInput<P>>\n  ) : OperationTypes<P, never, never>\n  public setTypes<P extends string, O extends string>(\n    op: Operation<P, O, never, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, never>\n  public setTypes<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>,\n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>>,\n    optional: Record<O, OperationTypeInput<P | O>>,\n    scope: Record<S, OperationTypeInput<P | O>>\n  ) : OperationTypes<P, O, S>\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\n    op: Operation<P, O, S, any, any>, \n    returnType: OperationTypeInput<P | O>,\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\n  ): OperationTypes<P, O, S> {\n\n    const types = { returnType, params, optional, scope };\n\n    this.types[op.id] = types;\n\n    return types;\n  }\n\n}","\nimport { Operation } from './Operation';\n\n\n\nexport interface Computed \n{\n  id: string;\n  op: string;\n  value: string;\n  params: Record<string, any>;\n  writeable?: {\n    op: string;\n    value: string;\n    newValue: string;\n    params: Record<string, any>;\n  };\n}\n\nexport class Computeds\n{\n\n  public prefix: string;\n\n  public map: Record<string, Computed>;\n  public list: Computed[];\n\n  public constructor(prefix: string)\n  { \n    this.prefix = prefix;\n    this.map = Object.create(null);\n    this.list = [];\n  }\n\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp: Computed = {\n      id,\n      op: op.id,\n      value: value || op.params[0],\n      params: params || {},\n    };\n\n    this.map[id] = comp;\n    this.list.push(comp);\n\n    return comp;\n  }\n\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \n  {\n    const id = this.prefix + localId;\n    const comp = this.map[id];\n\n    comp.writeable = { \n      op: op.id,\n      value,\n      newValue,\n      params: params || {},\n    };\n\n    return comp;\n  }\n\n  public get (id: string): Computed\n  {\n    return this.map[id] || this.map[this.prefix + id];\n  }\n\n}","\nexport const ID = {\n  Entity: '@',\n  Any: 'any',\n  Boolean: 'bool',\n  Color: 'color',\n  Date: 'date',\n  Enum: 'enum',\n  Function: 'func',\n  List: 'list',\n  Many: 'many',\n  Not: 'not',\n  Map: 'map',\n  Null: 'null',\n  Number: 'num',\n  Object: 'obj',\n  Optional: '?',\n  Reference: 'ref',\n  Relation: 'rel',\n  Set: 'set',\n  Text: 'text',\n  Tuple: 'tuple',\n  Delimiter: ':',\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\n\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\n\nconst ops = BooleanOperations;\n\nexport const BooleanOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  and: ops.set('&', {}, ['a', 'b']),\n\n  or: ops.set('|', {}, ['a', 'b']),\n\n  xor: ops.set('^', {}, ['a', 'b']),\n\n  not: ops.set('!', {}, ['a']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isTrue: ops.set('t?', {}, ['value']),\n\n  isFalse: ops.set('f?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\n\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\n\nexport interface DataTypeComparator\n{\n  priority: number;\n  type: DataTypeRaw;\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\n}\n\nexport interface DataTypeEquality\n{\n  priority: number;\n  type: DataTypeRaw;\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\n}\n\nexport interface DataTypeCopier\n{\n  priority: number;\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\n}\n\nexport interface DataTypeJson<T = any>\n{\n  priority: number;\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\n  fromJson(json: any, fromJson: (json: any) => any): T;\n}\n\nexport interface DataTypeAccessor<T = any>\n{\n  priority: number;\n  isValid(value: any, step: any): boolean;\n  set(value: T, step: any, stepValue: any): void;\n  get(value: T, step: any): any;\n  remove(value: T, step: any): any;\n  has(value: T, step: any): any;\n}\n\nexport interface DataTypeRegistryOperations\n{\n  objectSet<O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]): void;\n  objectRemove<O extends object, K extends keyof O>(obj: O, prop: K): void;\n  arrayAdd<T>(arr: T[], item: T): void;\n  arrayRemove<T>(arr: T[], index: number): T;\n  arraySet<T>(arr: T[], index: number, item: T): T;\n}\n\nexport class DataTypeRegistry implements DataTypeRegistryOperations\n{\n\n  public static TYPES: DataTypeRaw[] = [\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\n  ];\n\n  private compareTypes: Record<DataTypeRaw, number>;\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\n  private copyList: DataTypeCopier[];\n  private jsonList: DataTypeJson[];\n  private accessorList: DataTypeAccessor[];\n\n  public objectSet: DataTypeRegistryOperations['objectSet']\n    = (obj, prop, value) => obj[prop] = value;\n  public objectRemove: DataTypeRegistryOperations['objectRemove']\n    = (obj, prop) => delete obj[prop];\n  public arrayAdd: DataTypeRegistryOperations['arrayAdd']\n    = (arr, item) => arr.push(item);\n  public arrayRemove: DataTypeRegistryOperations['arrayRemove']\n    = (arr, index) => arr.splice(index, 1)[0];\n  public arraySet: DataTypeRegistryOperations['arraySet']\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\n\n  public constructor()\n  {\n    this.compareTypes = this.createTypeMap((_, index) => index);\n    this.compareMap = this.createTypeMap(() => []);\n    this.equalsMap = this.createTypeMap(() => []);\n    this.copyList = [];\n    this.jsonList = [];\n    this.accessorList = [];\n  }\n\n  public compare(a: any, b: any): number\n  {\n    const comparator = (x: any, y: any): number =>\n    {\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\n      }\n\n      const compares = this.compareMap[xtype];\n\n      for (const compare of compares)\n      {\n        const result = compare.compare(x, y, comparator);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return x === y ? 0 : x < y ? -1 : 1;\n    };\n\n    return comparator(a, b);\n  }\n\n  public getCompare(less: number, more: number): number\n  {\n    return less === 0 && more === 0\n      ? 0\n      : less < more ? 1 : -1;\n  }\n\n  public addCompare(compare: DataTypeComparator): this\n  {\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\n  }\n\n  public equals(a: any, b: any): boolean\n  {\n    const equalitor = (x: any, y: any): boolean =>\n    {\n      if (x === y)\n      {\n        return true;\n      }\n\n      const xtype = typeof x;\n      const ytype = typeof y;\n\n      if (xtype !== ytype)\n      {\n        return false;\n      }\n\n      const equals = this.equalsMap[xtype];\n\n      for (const equality of equals)\n      {\n        const result = equality.equals(x, y, equalitor);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n\n      return false;\n    };\n\n    return equalitor(a, b);\n  }\n\n  public addEquals(equals: DataTypeEquality): this\n  {\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\n  }\n\n  public copy<T>(x: T, containsCycles: boolean = false): T\n  {\n    if (!x) return x; // null, undefined, 0, '', NaN, false\n\n    if (typeof x === 'object')\n    {\n      const copiers = this.copyList;\n\n      if (containsCycles)\n      {\n        const copied = new Map();\n  \n        const setObjectCopy = (original: any, copy: any) => \n        {\n          copied.set(original, copy);\n        };\n  \n        const copyObject = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            const existing = copied.get(a);\n  \n            if (existing !== undefined)\n            {\n              return existing;\n            }\n  \n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyObject(x);\n      }\n      else\n      {\n        const setObjectCopy = (original: any, copy: any) => {};\n\n        const copyValue = (a: any): any =>\n        {\n          if (!a) return a;\n  \n          if (typeof a === 'object')\n          {\n            for (const copier of copiers)\n            {\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\n    \n              if (copierCopy !== undefined)\n              {\n                return copierCopy;\n              }\n            }\n          }\n  \n          return a;\n        };\n  \n        return copyValue(x);\n      }\n\n      \n    }\n  \n    return x;\n  }\n\n  public addCopier(copier: DataTypeCopier): this\n  {\n    return this.addToPriorityList(this.copyList, copier);\n  }\n\n  public toJson<T>(value: T): any\n  {\n    if (!value) return value; // null, undefined, 0, '', NaN, false\n\n    if (typeof value === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: T): any =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.toJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n\n        return x;\n      };\n      \n      return jsonObject(value);\n    }\n\n    return value;\n  }\n\n  public fromJson<T>(json: any): T\n  {\n    if (!json) return json; // null, undefined, 0, '', NaN, false\n\n    if (typeof json === 'object')\n    {\n      const parsers = this.jsonList;\n\n      const jsonObject = (x: any): T =>\n      {\n        if (!x) return x; // null, undefined, 0, '', NaN, false\n\n        if (typeof x === 'object')\n        {\n          for (const parser of parsers)\n          {\n            const result = parser.fromJson(x, jsonObject);\n\n            if (result !== undefined)\n            {\n              return result;\n            }\n          }\n        }\n        \n        return x;\n      };\n\n      return jsonObject(json);\n    }\n\n    return json;\n  }\n\n  public addJson<T>(json: DataTypeJson<T>): this\n  {\n    return this.addToPriorityList(this.jsonList, json);\n  }\n\n  public get(value: any, step: any): any\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.get(value, step);\n      }\n    }\n  }\n\n  public set(value: any, step: any, stepValue: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.set(value, step, stepValue);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public remove(value: any, step: any): boolean\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        access.remove(value, step);\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public has<O = false>(value: any, step: any, defaultResult: O = false as unknown as O): boolean | O\n  {\n    const accessors = this.accessorList;\n\n    for (const access of accessors)\n    {\n      if (access.isValid(value, step))\n      {\n        return access.has(value, step);\n      }\n    }\n\n    return defaultResult;\n  }\n\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\n  {\n    return this.addToPriorityList(this.accessorList, accessor);\n  }\n\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\n  {\n    const map: Record<DataTypeRaw, V> = Object.create(null);\n    \n    DataTypeRegistry.TYPES.forEach((type, index) => \n    {\n      map[type] = create(type, index);\n    });\n\n    return map;\n  }\n\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\n  {\n    list.push(value);\n    list.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n}\n\nexport const DataTypes = new DataTypeRegistry();","\nimport { isBoolean, isEmpty } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_TRUE_PROBABILITY = 0.5;\n\nexport interface BooleanOptions \n{\n  true?: Record<string, true>;\n  false?: Record<string, true>;\n}\n\nexport class BooleanType extends Type<BooleanOptions> \n{\n\n  public static id = ID.Boolean;\n\n  public static operations = BooleanOperations;\n\n  public static computeds = BooleanComputeds;\n\n  public static baseType = new BooleanType({});\n\n  public static decode(data: any[], types: TypeProvider): BooleanType \n  {\n    return new BooleanType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: BooleanType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return isBoolean(data) ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'boolean';\n\n    DataTypes.addCompare({\n      priority, \n      type,\n      compare: (a, b) => {\n        return (a ? 1 : 0) - (b ? 1 : 0);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => a === b,\n    });\n  }\n\n  public getId(): string\n  {\n    return BooleanType.id;\n  }\n\n  public getOperations()\n  {\n    return BooleanType.operations.map;\n  }\n\n  public merge(type: BooleanType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (options.exact || options.strict)\n    {\n      return other instanceof BooleanType;\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(BooleanOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (isBoolean(value))\n    {\n      return true;\n    }\n\n    const asKey = value + '';\n\n    if (this.options.true && this.options.true[asKey])\n    {\n      return true;\n    }\n    \n    if (this.options.false && this.options.false[asKey])\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isBoolean(value))\n    {\n      const asKey = value + '';\n\n      if (this.options.true && this.options.true[asKey])\n      {\n        return true;\n      }\n      \n      if (this.options.false && this.options.false[asKey])\n      {\n        return false;\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): BooleanType\n  {\n    return new BooleanType({});\n  }\n\n  public clone(): BooleanType\n  {\n    return new BooleanType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return BooleanType.encode(this);\n  }\n\n  public create(): boolean\n  {\n    return false;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\n  }\n\n  public fromJson(json: boolean): boolean\n  {\n    return json;\n  }\n\n  public toJson(value: boolean): boolean\n  {\n    return value;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPR = 1;\n\nexport class NotExpression extends Expression \n{\n\n  public static STEP_NOT = 'not';\n\n  public static id = 'not';\n\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \n  {\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\n    \n    return new NotExpression(expression);\n  }\n\n  public static encode(expr: NotExpression): any \n  {\n    const expression = expr.expression.encode();\n\n    return [this.id, expression];\n  }\n\n  public expression: Expression;\n\n  public constructor(expression: Expression) \n  {\n    super();\n    this.expression = expression;\n  }\n\n  public getId(): string\n  {\n    return NotExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expression.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expression.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NotExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new NotExpression(this.expression.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === NotExpression.STEP_NOT\n      ? [1, this.expression]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expression.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return this.expression.mutates(def, arg);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class AndExpression extends Expression \n{\n\n  public static id = 'and';\n\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new AndExpression(expressions);\n  }\n\n  public static encode(expr: AndExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return AndExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return AndExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new AndExpression(this.expressions.map(e => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)    \n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\n\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\n\nconst ops = AnyOperations;\nconst ANY_COMPLEXITY = {\n  complexity: 2\n};\n\nexport const AnyOps = \n{\n\n  // Operations\n\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\n\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\n\n  isDefined: ops.set('isDefined', {}, ['value']),\n\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\n\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\n\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n","\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyOps } from '../ops/AnyOps';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nexport class NullType extends Type<null> \n{\n\n  public static id = ID.Null;\n\n  public static operations = new Operations(ID.Null + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\n\n  public static baseType = new NullType(null);\n\n  public static decode(data: any[]): NullType \n  {\n    return NullType.baseType;\n  }\n\n  public static encode(type: NullType): any \n  {\n    return this.id;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return data === null ? this.baseType : null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return NullType.id;\n  }\n\n  public getOperations()\n  {\n    return NullType.operations.map;\n  }\n\n  public merge(type: NullType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof NullType;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    \n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.null();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(AnyOps.isEqual, {\n      value: Exprs.get('value'),\n      test: Exprs.null(),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null || value === undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NullType\n  {\n    return this;\n  }\n\n  public clone(): NullType\n  {\n    return this;\n  }\n\n  public encode(): any \n  {\n    return NullType.encode(this);\n  }\n\n  public create(): null\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: null): null\n  {\n    return null;\n  }\n\n  public toJson(value: null): null\n  {\n    return null;\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nexport class NoExpression extends Expression \n{\n\n  public static id = 'noop';\n\n  public static readonly instance = new NoExpression();\n\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \n  {\n    return this.instance\n  }\n\n  public static encode(expr: NoExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return NoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return NoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return this;\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    \n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isObject, isString } from '../fns';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nexport class AnyType extends Type \n{\n\n  public static id = ID.Any;\n\n  public static operations = AnyOperations;\n\n  public static computeds = AnyComputeds;\n\n  public static baseType = new AnyType({});\n\n  public static decode(data: any[], types: TypeProvider): AnyType \n  {\n    return this.baseType;\n  }\n\n  public static encode(type: AnyType): any \n  {\n    return this.id\n  }\n\n  public static describePriority: number = 8;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (isObject(data) && isString(data.$any))\n    {\n      return new AnyType({});\n    }\n\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return AnyType.id;\n  }\n\n  public getOperations()\n  {\n    return AnyType.operations.map;\n  }\n\n  public merge(type: AnyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public isCompatible(other: Type): boolean \n  {\n    return true;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.string();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.true();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public clone(): AnyType\n  {\n    return new AnyType({});\n  }\n\n  public encode(): any \n  {\n    return AnyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return DataTypes.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return DataTypes.toJson(value);\n  }\n\n}\n","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { isString } from '../fns';\nimport { AnyType } from '../types/Any';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_DEFINE = 1;\nconst INDEX_BODY = 2;\n\nexport class DefineExpression extends Expression \n{\n\n  public static STEP_DEFINE = 'define';\n\n  public static STEP_BODY = 'body';\n\n  public static id = 'def';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \n  {\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    \n    return new DefineExpression(define, body);\n  }\n\n  public static encode(expr: DefineExpression): any \n  {\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\n\n    return [this.id, define, expr.body.encode()];\n  }\n\n  public define: [string, Expression][];\n  public body: Expression;\n\n  public constructor(define: [string, Expression][], body: Expression) \n  {\n    super();\n    this.define = define;\n    this.body = body;\n  }\n\n  public getId(): string\n  {\n    return DefineExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    const scope = {};\n\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\n\n    return scope;\n  }\n\n  public encode(): any \n  {\n    return DefineExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { scope, context } = def.getContextWithScope(original);\n\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\n\n    return this.body.getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\n        this.define.forEach(([name, defined], index) => \n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\n        )\n      );\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DefineExpression.STEP_BODY\n      ? [1, this.body]\n      : steps[0] === DefineExpression.STEP_DEFINE\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.define.forEach(([name, defined]) => defined.setParent(this));\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const defineContext = def.getContextWithScope(context);\n\n    this.define.forEach(([name, defined]) => \n    {\n      defined.validate(def, defineContext.context, handler);\n\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\n    });\n    \n    this.body.validate(def, defineContext.context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [, defined] of this.define)    \n    {\n      if (defined.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.body.mutates(def, arg, directly);\n  }\n\n  public with(name: string, value: ExpressionValue): DefineExpression\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\n  {\n    const append = isString(nameOrDefines)\n      ? { [nameOrDefines]: value }\n      : nameOrDefines;\n\n    for (const name in append)\n    {\n      const expr = Exprs.parse(append[name]);\n      const existing = this.define.find(([varName]) => varName === name);\n\n      if (existing) {\n        existing[1] = expr;\n      } else {\n        this.define.push([name, expr]);\n      }\n\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n  public run(expr: Expression): DefineExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class DoExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'do';\n\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new DoExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: DoExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return DoExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return DoExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === DoExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === DoExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public do(body: Expression, condition?: Expression): DoExpression\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    if (condition)\n    {\n      this.condition = condition;\n      this.condition.setParent(this);\n    }\n\n    return this;\n  }\n\n  public while(condition: Expression): DoExpression\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isArray, isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_CHAIN = 1;\n\nexport class ChainExpression extends Expression \n{\n\n  public static id = 'chain';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \n  {\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\n\n    return new ChainExpression(chain);\n  }\n\n  public static encode(expr: ChainExpression): any \n  {\n    const chain = expr.chain.map(e => e.encode());\n\n    return [this.id, chain];\n  }\n\n  public chain: Expression[];\n\n  public constructor(chain: Expression[]) \n  {\n    super();\n    this.chain = chain;\n  }\n\n  public getId(): string\n  {\n    return ChainExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.chain.length\n      ? this.chain[this.chain.length - 1].isDynamic()\n      : false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ChainExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ChainExpression(this.chain.map(c => c.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.chain[this.chain.length - 1].getType(def, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.chain.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.chain.length\n      ? [1, this.chain[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.chain.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.chain.forEach(subject => \n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const link of this.chain)\n    {\n      if (link.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public add(exprs: Expression | Expression[]): ChainExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    for (const expr of append)\n    {\n      this.chain.push(expr);\n      expr.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_COMMENT = 1;\n\nexport class CommentExpression extends Expression \n{\n\n  public static id = 'comment';\n\n  public static readonly instance = new CommentExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \n  {\n    const comment = data[INDEX_COMMENT];\n\n    return new CommentExpression(comment);\n  }\n\n  public static encode(expr: CommentExpression): any \n  {\n    return [this.id, expr.comment];\n  }\n\n  public comment: string;\n\n  public constructor(comment: string)\n  {\n    super();\n    this.comment = comment;\n  }\n\n  public getId(): string\n  {\n    return CommentExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return CommentExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new CommentExpression(this.comment);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\n\nexport class GetExpression extends Expression \n{\n\n  public static id = 'get';\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \n  {\n    if (data[INDEX_PATH])\n    {\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\n    }\n    \n    return new GetExpression();\n  }\n\n  public static encode(expr: GetExpression): any \n  {\n    return [this.id];\n  }\n\n  public getId(): string\n  {\n    return GetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetExpression();\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return context;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\n\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\n\nconst ops = TextOperations;\n\nexport const TextOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  uuid: ops.set('uuid'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  append: ops.set('+', {}, ['value', 'append']),\n\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\n\n  lower: ops.set('lo', {}, ['value']),\n\n  upper: ops.set('up', {}, ['value']),\n\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\n\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\n\n  repeat: ops.set('repeat', {}, ['value', 'times']),\n\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\n\n  chars: ops.set('chars', {}, ['value']),\n\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\n\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\n\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\n\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\n\n  startsWith: ops.set('starts', {}, ['value', 'test']),\n\n  endsWith: ops.set('ends', {}, ['value', 'test']),\n\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\n\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\n\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\n\n  length: ops.set('len', {}, ['value']),\n\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\n\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\n\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\n\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\n\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\n\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\n\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.set('base64', {}, ['value']),\n\n  unbase64: ops.set('unbase64', {}, ['value']),\n\n  encodeURI: ops.set('encodeURI', {}, ['value']),\n\n  decodeURI: ops.set('decodeURI', {}, ['value']),\n\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\n\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\n\n  md5: ops.set('md5', {}, ['value']),\n\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\n\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\n\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\n  \n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['value']),\n\n  isNotEmpty: ops.set('n?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\n\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\n\n  isLower: ops.set('lo?', {}, ['value']),\n\n  isUpper: ops.set('up?', {}, ['value']),\n\n  isUuid: ops.set('uuid?', {}, ['value']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTextComputeds.set('toUpper', TextOps.upper);\nTextComputeds.set('toLower', TextOps.lower);\nTextComputeds.set('chars', TextOps.chars);\nTextComputeds.set('trim', TextOps.trim);\nTextComputeds.set('soundex', TextOps.soundex);\nTextComputeds.set('metaphone', TextOps.metaphone);\nTextComputeds.set('base64', TextOps.base64);\nTextComputeds.set('unbase64', TextOps.unbase64);\nTextComputeds.set('encodeURI', TextOps.encodeURI);\nTextComputeds.set('decodeURI', TextOps.decodeURI);\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\nTextComputeds.set('md5', TextOps.md5);\nTextComputeds.set('toNumber', TextOps.toNumber);\nTextComputeds.set('isEmpty', TextOps.isEmpty);\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\nTextComputeds.set('isLower', TextOps.isLower);\nTextComputeds.set('isUpper', TextOps.isUpper);","\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\nimport { Type, TypeSub, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from './Enum';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 1;\nconst RANDOM_MAX = 16;\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\n\nexport interface TextOptions \n{\n  min?: number;\n  max?: number;\n  requireUpper?: boolean;\n  requireLower?: boolean;\n  forceUpper?: boolean;\n  forceLower?: boolean;\n  matches?: RegExp;\n}\n\nexport class TextType extends Type<TextOptions> \n{\n\n  public static id = ID.Text;\n\n  public static operations = TextOperations;\n\n  public static computeds = TextComputeds;\n  \n  public static baseType = new TextType({});\n\n  public static decode(data: any[]): TextType \n  {\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: TextType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): TextOptions\n  {\n    const matches = options.matches;\n\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\n\n    return options;\n  }\n\n  private static encodeOptions(options: TextOptions): any\n  {\n    const encoded: any = { ...options };\n    const matches = encoded.matches;\n\n    if (matches) encoded.matches = [matches.source, matches.flags];\n\n    return encoded;\n  }\n\n  public static describePriority: number = 3;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isString(data))\n    {\n      return null;\n    }\n\n    return new TextType({\n      min: data.length,\n      max: data.length,\n      requireLower: data.toLowerCase() === data,\n      requireUpper: data.toUpperCase() === data\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 4;\n    const type: DataTypeRaw = 'string';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a.localeCompare(b);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n\n    DataTypes.addAccessor<string>({\n      priority,\n      isValid: isString,\n      get: (x, step) => x[step],\n      set: (x, step, value) => {},\n      remove: (x, step) => x.substring(0, step) + x.substring(step + 1),\n      has: (x, step) => x[step] !== undefined,\n    });\n  }\n\n  public getId(): string\n  {\n    return TextType.id;\n  }\n\n  public getOperations()\n  {\n    return TextType.operations.map;\n  }\n\n  public merge(type: TextType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.requireLower = o1.requireLower && o2.requireLower;\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return Types.CHAR;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.CHAR;\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          return Types.CHAR;\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof TextType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax > max))\n      {\n        return false;\n      }\n\n      const lower = this.options.forceLower || this.options.requireUpper;\n      const otherLower = other.options.forceLower || other.options.requireLower;\n\n      if (lower && !otherLower)\n      {\n        return false;\n      }\n\n      const upper = this.options.forceUpper || this.options.requireUpper;\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\n\n      if (upper && !otherUpper)\n      {\n        return false;\n      }\n\n      const matches = this.options.matches;\n      const otherMatches = other.options.matches;\n\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(TextOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(TextOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(TextOps.compare, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      ignoreCase: Exprs.true(),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isString(value))\n    {\n      return false;\n    }\n\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\n\n    if (isNumber(min) && value.length < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max)\n    {\n      return false;\n    }\n\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\n    {\n      return false;\n    }\n\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\n    {\n      return false;\n    }\n\n    if (matches && matches instanceof RegExp && !matches.test(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isString(value))\n    {\n      if (this.options.forceLower)\n      {\n        value = value.toLowerCase();\n      }\n\n      if (this.options.forceUpper)\n      {\n        value = value.toUpperCase();\n      }\n    }\n\n    return value;\n  }\n\n  public newInstance(): TextType\n  {\n    return new TextType({});\n  }\n\n  public clone(): TextType\n  {\n    return new TextType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return TextType.encode(this);\n  }\n\n  public create(): string\n  {\n    return '';\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\n    const lower = requireLower || forceLower;\n    const upper = requireUpper || forceUpper;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const n = rnd(chosenMin, chosenMax + 1, true);\n    let out = '';\n\n    for (let i = 0; i < n; i++)\n    {\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\n    }\n\n    if (lower) out = out.toLowerCase();\n    if (upper) out = out.toUpperCase();\n\n    return out;\n  }\n\n  public fromJson(json: string): string\n  {\n    return json;\n  }\n\n  public toJson(value: string): string\n  {\n    return value;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\n\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\n\nconst ops = MapOperations;\n\nexport const MapOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\n  \n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\n\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\n\n  has: ops.set('has', {}, ['map', 'key']),\n\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\n\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\n\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\n\n  count: ops.set('count', { }, ['map']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\n\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\n\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\n\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nMapComputeds.set('copy', MapOps.copy);\nMapComputeds.set('keys', MapOps.keys);\nMapComputeds.set('values', MapOps.values);\nMapComputeds.set('entries', MapOps.entries);\nMapComputeds.set('pairs', MapOps.pairs);\nMapComputeds.set('count', MapOps.count);","\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { TextType } from './Text';\nimport { Expression } from '../Expression';\nimport { Exprs } from '../Exprs';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { MapOps } from '../ops/MapOps';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_KEY = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CONSTANTS = 3;\n\nexport interface EnumOptions \n{\n  key: Type;\n  value: Type;\n  constants: Map<any, any>;\n}\n\nexport class EnumType extends Type<EnumOptions> \n{\n\n  public static STEP_KEY = 'key';\n  \n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Enum;\n\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\n  \n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\n\n  public static decode(data: any[], types: TypeProvider): EnumType \n  {\n    const key = types.getType(data[INDEX_KEY]);\n    const value = types.getType(data[INDEX_VALUE]);\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n\n    return new EnumType({ key, value, constants });\n  }\n\n  public static encode(type: EnumType): any \n  {\n    const { key, value, constants } = type.options;\n\n    return [\n      this.id,\n      key.encode(),\n      value.encode(),\n      Array.from(constants.entries()).map(([k, v]) => [\n        key.toJson(k),\n        value.toJson(v)\n      ])\n    ];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getId(): string\n  {\n    return EnumType.id;\n  }\n\n  public getOperations()\n  {\n    return this.options.value.getOperations();\n  }\n\n  public merge(type: EnumType): void\n  {\n    const c1 = this.options.constants;\n    const c2 = type.options.constants;\n\n    this.options.key = Types.merge(this.options.key, type.options.key);\n    this.options.value = Types.merge(this.options.value, type.options.value);\n\n    for (const [key, value] of c2.entries())\n    {\n      c1.set(key, value);\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.value.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.value.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.value;\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this.options.value;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof EnumType))\n    {\n      return false;\n    }\n\n    const { key, value } = this.options;\n\n    if (options.exact)\n    {\n      if (!key.isCompatible(other.options.key, options))\n      {\n        return false;\n      }\n    }\n\n    return value.isCompatible(other.options.value);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.options.value.isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.value.isSimple();\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EnumType.STEP_KEY\n      ? this.options.key\n      : step === EnumType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.value.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.options.value.getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.options.value.getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === EnumType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    const { constants, value } = this.options;\n\n    if (!value.isValid(test))\n    {\n      return false;\n    }\n\n    for (const constantValue of constants.values())\n    {\n      if (DataTypes.compare(constantValue, test) === 0)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public normalize(value: any): any\n  {\n    return this.options.value.normalize(value);\n  }\n\n  public newInstance(): EnumType\n  {\n    const { key, value } = this.options;\n\n    return new EnumType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n      constants: new Map(),\n    });\n  }\n\n  public clone(): EnumType\n  {\n    const { key, value, constants } = this.options;\n\n    return new EnumType({\n      key: key.clone(),\n      value: value.clone(),\n      constants: new Map(constants.entries()),\n    });\n  }\n\n  public encode(): any \n  {\n    return EnumType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { value, constants } = this.options;\n    const firstKey = constants.keys().next();\n\n    return firstKey ? constants.get(firstKey) : value.create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const values = Array.from(this.options.constants.values());\n\n    return values[rnd(0, values.length, true)];\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.options.value.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.options.value.toJson(value);\n  }\n\n}","\nimport { isArray, isString, isNumber } from '../fns';\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { Type } from '../Type';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\nimport { NumberType } from '../types/Number';\nimport { Traverser } from '../Traverser';\nimport { AnyType } from '../types/Any';\nimport { ValidationHandler } from '../Validate';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_CONSTANT = 1;\n\nexport class ConstantExpression extends Expression \n{\n\n  public static has(e: Expression, constant: any): boolean\n  {\n    return e instanceof ConstantExpression && e.value === constant;\n  }\n\n  public static is(e: Expression): e is ConstantExpression\n  {\n    return e instanceof ConstantExpression;\n  }\n\n  public static id = 'constant';\n\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \n  {\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\n\n    return new ConstantExpression(value);\n  }\n\n  public static encode(expr: ConstantExpression): any \n  {\n    const value = AnyType.baseType.toJson(expr.value);\n\n    return isArray(value)\n      ? [this.id, value]\n      : value;\n  }\n\n  public value: any;\n\n  public constructor(value: any) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ConstantExpression.id;\n  }\n\n  public getComplexity(): number\n  {\n    return 0;\n  }\n\n  public isDynamic(): boolean\n  {\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ConstantExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ConstantExpression(DataTypes.copy(this.value));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const value = this.value;\n\n    if (isString(value)) \n    {\n      return new EnumType({\n        key: TextType.baseType.newInstance(),\n        value: TextType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    if (isNumber(value)) \n    {\n      return new EnumType({\n        key: NumberType.baseType.newInstance(),\n        value: NumberType.baseType.newInstance(),\n        constants: new Map([[value, value]]),\n      });\n    }\n\n    const described = def.describe(this.value);\n\n    if (described)\n    {\n      described.removeDescribedRestrictions();\n    }\n\n    return described;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    \n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { BooleanType } from '../types/Boolean';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\n\nexport class SetExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'set';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n\n    return new SetExpression(path, value);\n  }\n\n  public static encode(expr: SetExpression): any \n  {\n    return [this.id, expr.path.encode(), expr.value.encode()];\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue)\n  {\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n\n  public constructor(path: PathExpression, value: Expression) \n  {\n    super();\n\n    this.path = path;\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return SetExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SetExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SetExpression(this.path.clone(), this.value.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SetExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === SetExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      this.validateType(def, context, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public to(value: ExpressionValue): SetExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n\n    return this;\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || \n      this.value.mutates(def, arg, directly) || \n      this.path.mutates(def, arg, directly);\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { AnyType } from '../types/Any';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { PathExpression } from './Path';\n\n\nconst DEFAULT_CURRENT = 'current';\nconst INDEX_PATH = 1;\nconst INDEX_VALUE = 2;\nconst INDEX_CURRENT = 3;\n\nexport class UpdateExpression extends Expression \n{\n\n  public static STEP_PATH = 'path';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'up';\n\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \n  {\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \n\n    return new UpdateExpression(path, value, currentVariable);\n  }\n\n  public static encode(expr: UpdateExpression): any \n  {\n    const path = expr.path.encode();\n    const value = expr.value.encode();\n\n    return expr.currentVariable === DEFAULT_CURRENT\n      ? [this.id, path, value]\n      : [this.id, path, value, expr.currentVariable]\n  }\n\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\n  {\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\n  }\n\n  public path: PathExpression;\n  public value: Expression;\n  public currentVariable: string;\n\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \n  {\n    super();\n    this.path = path;\n    this.value = value;\n    this.currentVariable = currentVariable;\n  }\n\n  public getId(): string\n  {\n    return UpdateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\n  }\n\n  public getScope()\n  {\n    return {\n      [this.currentVariable]: AnyType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return UpdateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return BooleanType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === UpdateExpression.STEP_PATH\n      ? [1, this.path]\n      : steps[0] === UpdateExpression.STEP_VALUE\n        ? [1, this.value]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.path.setParent(this);\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.path.validate(def, context, handler);\n\n    const expectedType = this.path.getType(def, context);\n\n    if (!this.path.isWritable(def))\n    {\n      handler({\n        type: ValidationType.READONLY,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n\n    if (expectedType)\n    {\n      const valueContext = def.getContext(context, {\n        [this.currentVariable]: expectedType,\n      });\n\n      this.validateType(def, valueContext, expectedType, this.value, handler);\n    }\n    else\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this.path,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.path.isMutating(arg, directly) || this.value.mutates(def, arg, directly) || this.path.mutates(def, arg, directly);\n  }\n\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.currentVariable = currentVariable || this.currentVariable;\n\n    return this;\n  }\n\n  public withVariable(name: string): UpdateExpression\n  {\n    this.currentVariable = name;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { isNumber } from '../fns';\nimport { GetExpression } from './Get';\nimport { ConstantExpression } from './Constant';\nimport { SetExpression } from './Set';\nimport { UpdateExpression } from './Update';\n\n\nconst INDEX_PATH = 1;\n\nexport class PathExpression extends Expression \n{\n\n  public static id = 'path';\n\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \n  {\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\n    \n    return new PathExpression(expressions);\n  }\n\n  public static encode(expr: PathExpression): any \n  {\n    return [this.id, expr.expressions.map((e) => e.encode())];\n  }\n\n  public static createForLegacy(path: Expression[])\n  {\n    for (let i = path.length - 1; i >= 0; i--)\n    {\n      const node = path[i];\n\n      if (node instanceof PathExpression)\n      {\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\n        {\n          path.splice(i, 1, ...node.expressions);\n        }\n      }\n    }\n\n    return new PathExpression(path);\n  }\n\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\n  {\n    const isPath = pathData[0] === PathExpression.id;\n    const path = isPath\n      ? PathExpression.decode(pathData, exprs)\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\n\n    if (isPath) {\n      exprs.setLegacy();\n    }\n\n    return path;\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return PathExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return PathExpression.encode(this);\n  }\n\n  public clone(): PathExpression\n  {\n    return new PathExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getPathType(this.expressions, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n    \n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const path = this.expressions;\n\n    if (path.length === 0)\n    {\n      handler({\n        type: ValidationType.EMPTY_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    let thisType = path[0].getType(def, context);\n\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.INVALID_EXPRESSION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: path[0],\n        parent: this,\n      });\n    }\n    else\n    {\n      path[0].validate(def, context, handler);\n\n      for (let i = 1; i < path.length; i++)\n      {\n        const node = path[i];\n\n        node.validate(def, context, handler, thisType);\n\n        thisType = node.isPathNode()\n          ? node.getType(def, context, thisType)\n          : thisType.getSubType(node, def, context);\n\n        if (!thisType)\n        {\n          handler({\n            type: ValidationType.INVALID_EXPRESSION,\n            severity: ValidationSeverity.HIGH,\n            context,\n            subject: node,\n            parent: this,\n          });\n          \n          break;\n        }\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public isWritable(defs: DefinitionProvider)\n  {\n    return this.expressions.length > 0\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\n      : false;\n  }\n\n  public isMutating(arg: string, directly: boolean = false): boolean\n  {\n    const e0 = this.expressions[0];\n    const e1 = this.expressions[1];\n    const e2 = this.expressions[2]; // tslint:disable-line: no-magic-numbers\n\n    if (!(e0 instanceof GetExpression && e1 instanceof ConstantExpression && e1.value === arg))\n    {\n      return false;\n    }\n\n    return directly ? true : !!e2;\n  }\n\n  public set(value: Expression): SetExpression\n  {\n    return new SetExpression(this.clone(), value);\n  }\n\n  public update(value: Expression, currentVariable?: string): UpdateExpression\n  {\n    return new UpdateExpression(this.clone(), value, currentVariable);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_EXPRESSION = 2;\n\nexport class ComputedExpression extends Expression \n{\n\n  public static STEP_EXPRESSION = 'expression';\n\n  public static id = 'comp';\n\n  public static decode(data: any[], exprs: ExpressionProvider) \n  {\n    const name = data[INDEX_NAME];\n\n    if (data[INDEX_EXPRESSION]) \n    {\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\n\n      exprs.setLegacy();\n\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\n    }\n    \n    return new ComputedExpression(name);\n  }\n\n  public static encode(expr: ComputedExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string) \n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return ComputedExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const comp = def.getComputed(this.name);\n\n    if (!comp)\n    {\n      return 0;\n    }\n\n    const op = def.getOperation(comp.op);    \n    \n    return op ? op.complexity : 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ComputedExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ComputedExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType)\n    {\n      handler({\n        type: ValidationType.OUTSIDE_PATH,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      if (!def.hasComputed(thisType, this.name))\n      {\n        handler({\n          type: ValidationType.INVALID_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context,\n          subject: this,\n        });\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    const comp = defs.getComputed(this.name);\n\n    return !comp || !!comp.writeable;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { NumberType } from '../types/Number';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { isNumber } from '../fns';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_VARIABLE = 1;\nconst INDEX_START = 2;\nconst INDEX_END = 3;\nconst INDEX_BODY = 4;\nconst INDEX_BREAK = 5;\nconst INDEX_MAX = 6;\n\nexport class ForExpression extends Expression \n{\n\n  public static STEP_START = 'start';\n\n  public static STEP_END = 'end';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'for';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \n  {\n    const variable = data[INDEX_VARIABLE];\n    const start = exprs.getExpression(data[INDEX_START]);\n    const end = exprs.getExpression(data[INDEX_END]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new ForExpression(variable, start, end, body, breakVariable, max);\n  }\n\n  public static encode(expr: ForExpression): any \n  {\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n\n    return out;\n  }\n\n  public variable: string;\n  public start: Expression;\n  public end: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.variable = variable;\n    this.start = start;\n    this.end = end;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return ForExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.variable]: NumberType.baseType.newInstance(),\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return ForExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ForExpression.STEP_START\n      ? [1, this.start]\n      : steps[0] === ForExpression.STEP_END\n        ? [1, this.end]\n        : steps[0] === ForExpression.STEP_BODY\n          ? [1, this.body]\n          : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.start.setParent(this);\n    this.end.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.start.mutates(def, arg, directly) || \n      this.end.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    this.variable = variable;\n\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    if (body)\n    {\n      this.body = body;\n      this.body.setParent(this);\n    }\n\n    if (breakVariable)\n    {\n      this.breakVariable = breakVariable;\n    }\n\n    if (isNumber(maxIterations))\n    {\n      this.maxIterations = maxIterations;\n    }\n\n    return this;\n  }\n\n  public startAt(start: ExpressionValue): ForExpression\n  {\n    this.start = Exprs.parse(start);\n    this.start.setParent(this);\n\n    return this;\n  }\n\n  public endAt(end: ExpressionValue): ForExpression\n  {\n    this.end = Exprs.parse(end);\n    this.end.setParent(this);\n\n    return this;\n  }\n\n  public run(expr: Expression): ForExpression\n  {\n    this.body = expr;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withVariable(name: string)\n  {\n    this.variable = name;\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetDataExpression extends Expression \n{\n\n  public static id = 'data';\n\n  public static readonly instance = new GetDataExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetDataExpression(name);\n  }\n\n  public static encode(expr: GetDataExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetDataExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetDataExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetDataExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const data = def.getData(this.name);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_DATA_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getData(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_DATA,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }  \n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n  public isPathStart(): boolean\n  {\n    return true;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\n\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\n\nconst ops = EntityOperations;\n\nexport const EntityOps = \n{\n\n  newInstance: ops.set('newInstance', {}, ['name'], ['initial'], [], [], ['name']),\n\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\n\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\n\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\n\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\n\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\n\n};\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\n\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\n\nconst ops = ObjectOperations;\n\nexport const ObjectOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  has: ops.set('has', {}, ['object', 'key']),\n\n  get: ops.set('get', {}, ['object', 'key']),\n\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\n\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\n\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nObjectComputeds.set('copy', ObjectOps.copy);","\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport interface ObjectOptions \n{\n  props: TypeMap;\n}\n\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \n{\n\n  public static wilcardProperty = '*';\n\n  public static id = ID.Object;\n\n  public static operations = ObjectOperations;\n\n  public static computeds = ObjectComputeds;\n\n  public static baseType = new ObjectType({ props: {} });\n\n  public static decode(data: any[], types: TypeProvider): ObjectType \n  {\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\n    \n    return new ObjectType({ props });\n  }\n\n  public static encode(type: ObjectType): any \n  {\n    const props = objectMap(type.options.props, p => p.encode());\n\n    return [this.id, props];\n  }\n\n  public static describePriority: number = 5;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isObject(data) || data === null)\n    {\n      return null;\n    }\n\n    const type = new ObjectType({ props: {} });\n\n    cache.set(data, type);\n\n    type.options.props = objectMap(data, d => describer.describe(d));\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 7;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json)) {\n          return objectMap(json, reader);\n        }\n      },\n      toJson: (json, writer) => {\n        if (isObject(json)) {\n          return objectMap(json, writer);\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isObject(x)) {\n          const newObject: any = {};\n\n          setObjectCopy(x, newObject);\n  \n          for (const prop in x) {\n            newObject[copy(prop)] = copy(x[prop]);\n          }\n  \n          return newObject;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        if (a === null) return 1;\n        if (b === null) return -1;\n\n        let less = 0;\n        let more = 0;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            less++;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            more++;\n          }\n        }\n\n        for (const prop in a) {\n          if (prop in b)\n          {\n            const c = compare(a[prop], b[prop]);\n\n            if (c < 0) less++;\n            if (c > 0) more++;\n          }\n        }\n\n        return DataTypes.getCompare(less, more);\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        if ((a === null) !== (b === null)) return false;\n\n        for (const prop in a) {\n          if (!(prop in b)) {\n            return false;\n          }\n        }\n\n        for (const prop in b) {\n          if (!(prop in a)) {\n            return false;\n          } else if (!equals(a[prop], b[prop])) {\n            return false;\n          }\n        }\n\n        return true;\n      },\n    });\n\n    DataTypes.addAccessor<Record<string, any>>({\n      priority,\n      isValid: (value) => isObject(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue),\n      remove: (value, step) => DataTypes.objectRemove(value, step),\n      has: (value, step) => step in value,\n    });\n  }\n\n  public getId(): string\n  {\n    return ObjectType.id;\n  }\n\n  public getOperations()\n  {\n    return ObjectType.operations.map;\n  }\n\n  public merge(type: Type<O>): void\n  {\n    const p1 = this.options.props;\n    const p2 = type.options.props;\n\n    for (const prop in p1)\n    {\n      if (prop in p2 && p2[prop])\n      {\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\n      }\n      else if (p1[prop])\n      {\n        p1[prop] = Types.optional(p1[prop]);\n      }\n    }\n\n    for (const prop in p2)\n    {\n      if (!(prop in p1) && p2[prop])\n      {\n        p1[prop] = Types.optional(p2[prop]);\n      }\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (isString(expr.value))\n      {\n        return this.options.props[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof TextType)\n      {\n        const types = objectValues(this.options.props);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\n\n        return Types.mergeMany(types, NullType.baseType);\n      }\n    }\n\n    return this.getWildcardType();\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const props = objectValues(this.options.props);\n\n    return [\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\n      {\n        key: new EnumType({\n          key: TextType.baseType,\n          value: TextType.baseType,\n          constants: new Map(\n            objectValues(this.options.props, (prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(props, NullType.baseType),\n      },\n      { \n        key: TextType.baseType, \n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\n      }\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type \n  {\n    return this;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.options.props, \n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => DataTypes.objectRemove(this.options.props, prop))\n      )\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options.props[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof ObjectType)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!other.options.props[prop]) \n      {\n        if (props[prop].isOptional())\n        {\n          continue;\n        }\n        else\n        {\n          return false;\n        }\n      }\n\n      if (!props[prop].isCompatible(other.options.props[prop], options))\n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (options.exact)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop])\n        {\n          return false;\n        }\n      }\n    }\n    else if (wildcard)\n    {\n      for (const prop in other.options.props)\n      {\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.object(\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ObjectOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop) \n        }).run(\n          t ? t.getValidateExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      ...objectValues(this.options.props, (t, prop) =>\n        Exprs.define({ \n          value: Exprs.get('value', prop),\n          test: Exprs.get('test', prop) \n        }).run(\n          t ? t.getCompareExpression() : Exprs.true(),\n        ),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = property\n    const hasFrom = from !== null && from !== undefined;\n    const hasTo = to !== null && to !== undefined;\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from !== to) // rename\n    {\n      return Exprs.body(\n        Exprs.op(ObjectOps.set, {\n          object: Exprs.get('value'),\n          key: to,\n          value: Exprs.get('value', from),\n        }),\n        Exprs.op(ObjectOps.delete, {\n          object: Exprs.get('value'),\n          key: from,\n        }),\n        Exprs.get('value'),\n      );\n    } \n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isObject(value)) \n    {\n      return false;\n    }\n\n    const props = this.options.props;\n\n    for (const prop in props) \n    {\n      if (prop === ObjectType.wilcardProperty)\n      {\n        continue;\n      }\n\n      if (!props[prop])\n      {\n        continue;\n      }\n\n      if (!props[prop].isValid(value[prop])) \n      {\n        return false;\n      }\n    }\n\n    const wildcard = this.getWildcardType();\n\n    if (wildcard)\n    {\n      for (const prop in value)\n      {\n        if (!props[prop] && !wildcard.isValid(value[prop]))\n        {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): ObjectType<O>\n  {\n    return new ObjectType({ props: {} } as O);\n  }\n\n  public clone(): ObjectType<O>\n  {\n    return new ObjectType<O>({\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\n    } as O);\n  }\n\n  public encode(): any \n  {\n    return ObjectType.encode(this);\n  }\n\n  public create(): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n    \n    for (const prop in props)\n    {\n      const propType = props[prop];\n\n      if (propType && !propType.isOptional())\n      {\n        out[prop] = propType.create();\n      }\n    }\n\n    return out;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { props } = this.options;\n    const out: any = Object.create(null);\n\n    for (const prop in props)\n    {\n      if (props[prop])\n      {\n        out[prop] = props[prop].random(rnd);\n      }\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any): any\n  {\n    return objectMap(json, (value, key) => {\n      const propType = this.options.props[key];\n\n      return propType ? propType.fromJson(value) : value;\n    });\n  }\n\n  public toJson(value: any): any\n  {\n    return objectMap(value, (subvalue, key) => {\n      const propType = this.options.props[key];\n      \n      return propType ? propType.toJson(subvalue) : subvalue;\n    });\n  }\n\n  public getWildcardType(): Type | null\n  {\n    return this.options.props[ObjectType.wilcardProperty] || null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { ObjectType } from './Object';\n\n\nconst INDEX_NAME = 1;\n\nexport class EntityType extends Type<string>\n{\n\n  public static STEP_ENTITY = 'entity';\n\n  public static id = ID.Entity;\n\n  public static operations = EntityOperations;\n\n  public static computeds = EntityComputeds;\n\n  public static baseType = new EntityType('', null);\n\n  public static decode(data: any[], types: TypeProvider): EntityType \n  {\n    const type = data[INDEX_NAME];\n\n    return new EntityType( type, types );\n  }\n\n  public static encode(type: EntityType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(name: string, provider: TypeProvider): EntityType\n  {\n    return new EntityType(name, provider);\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    return this.provider\n      ? this.provider.getType(this.options, NullType.baseType)\n      : ObjectType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return EntityType.id;\n  }\n\n  public merge(type: EntityType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n    // return this.getType().getSimplifiedType();\n  }\n\n  public isWrapper(): boolean\n  {\n    return true;\n  }\n\n  public getWrappedType(): Type\n  {\n    return this.getType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof EntityType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === EntityType.STEP_ENTITY\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === aliased\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public clone(): EntityType\n  {\n    return new EntityType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return EntityType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EntityType } from '../types/Entity';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetEntityExpression extends Expression \n{\n\n  public static id = 'entity';\n\n  public static readonly instance = new GetEntityExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetEntityExpression(name);\n  }\n\n  public static encode(expr: GetEntityExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetEntityExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetEntityExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetEntityExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EntityType(this.name, def);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getEntity(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser } from '../Traverser';\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\nimport { EnumType } from '../types/Enum';\nimport { TextType } from '../types/Text';\n\n\nconst INDEX_NAME = 1;\n\nexport class GetRelationExpression extends Expression \n{\n\n  public static id = 'relation';\n\n  public static readonly instance = new GetRelationExpression('');\n\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \n  {\n    const name = data[INDEX_NAME];\n\n    return new GetRelationExpression(name);\n  }\n\n  public static encode(expr: GetRelationExpression): any \n  {\n    return [this.id, expr.name];\n  }\n\n  public name: string;\n\n  public constructor(name: string)\n  {\n    super();\n    this.name = name;\n  }\n\n  public getId(): string\n  {\n    return GetRelationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return 0;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return GetRelationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new GetRelationExpression(this.name);\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new EnumType({\n      key: TextType.baseType,\n      value: TextType.baseType,\n      constants: new Map([\n        ['relation', this.name],\n      ])\n    });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    if (!this.name)\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION_NAME,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n    else if (!def.getRelation(this.name))\n    {\n      handler({\n        type: ValidationType.MISSING_RELATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        parent: this,\n      });\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    return false; \n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { NoExpression } from './No';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { BooleanType } from '../types/Boolean';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_CASES = 1;\nconst INDEX_OTHERWISE = 2;\n\nexport class IfExpression extends Expression \n{\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_IF = 'if';\n\n  public static STEP_THEN = 'then';\n\n  public static STEP_ELSE = 'else';\n\n  public static id = 'if';\n\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \n  {\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\n\n    return new IfExpression(cases, otherwise);\n  }\n\n  public static encode(expr: IfExpression): any \n  {\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\n\n    return ConstantExpression.has(expr.otherwise, undefined)\n      ? [this.id, cases]\n      : [this.id, cases, expr.otherwise.encode()];\n  }\n\n  public cases: [Expression, Expression][];\n  public otherwise: Expression;\n\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \n  {\n    super();\n    this.cases = cases;\n    this.otherwise = otherwise;\n  }\n\n  public getId(): string\n  {\n    return IfExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [test, result]) => Math.max(\n        max, \n        test.getComplexity(def, context),\n        result.getComplexity(def, context)\n      ), \n      this.otherwise.getComplexity(def, context)\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return IfExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([test, value]) => value)\n      .concat(this.otherwise)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(IfExpression.STEP_CASES, () => \n        this.cases.forEach(([condition, result], index) => \n          traverse.step(index, () => {\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\n          })\n        )\n      );\n      if (this.otherwise !== NoExpression.instance) {\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\n      }\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === IfExpression.STEP_CASES\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\n        ? steps[2] === IfExpression.STEP_IF\n          ? [3, this.cases[steps[1]][0]]\n          : steps[2] === IfExpression.STEP_THEN\n            ? [3, this.cases[steps[1]][1]]\n            : null\n        : null\n      : steps[0] === IfExpression.STEP_ELSE\n        ? [1, this.otherwise]\n        : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.cases.forEach(([condition, result]) => {\n      condition.setParent(this);\n      result.setParent(this);\n    });\n\n    this.otherwise.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.cases.forEach(([condition, result]) => \n    {\n      this.validateType(def, context, expectedType, condition, handler);\n      \n      result.validate(def, context, handler);\n    });\n\n    this.otherwise.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const [condition, result] of this.cases)\n    {\n      if (condition.mutates(def, arg, directly) || result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return this.otherwise.mutates(def, arg, directly);\n  }\n\n  public if(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public than(body: Expression)\n  {\n    this.cases[this.cases.length - 1][1] = body;\n\n    body.setParent(this);\n\n    return this;\n  }\n\n  public elseif(condition: Expression, body?: Expression)\n  {\n    this.cases.push([condition, body || NoExpression.instance]);\n\n    condition.setParent(this);\n\n    if (body)\n    {\n      body.setParent(this);\n    }\n\n    return this;\n  }\n\n  public else(body: Expression)\n  {\n    this.otherwise = body;\n    this.otherwise.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_ARGS = 2;\n\nexport class InvokeExpression extends Expression \n{\n\n  public static id = 'invoke';\n\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \n  {\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new InvokeExpression(name, args);\n  }\n\n  public static encode(expr: InvokeExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.name, args];\n  }\n\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(name: string, args: ExpressionMap) \n  {\n    super();\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return InvokeExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return 0;\n    }\n\n    return func.expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return InvokeExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const func = def.getFunction(this.name);\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    return func\n      ? func.getReturnType(def, argTypes)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args ,arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const func = def.getFunction(this.name);\n    \n    if (!func) \n    {\n      handler({\n        type: ValidationType.MISSING_FUNCTION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n    }\n    else\n    {\n      const params: TypeMap = {};\n\n      objectEach(func.params.options.props, (param, paramName) =>\n      {\n        const arg = this.args[paramName];\n\n        this.validateType(def, context, param, arg, handler);\n\n        if (arg)\n        {\n          params[paramName] = arg.getType(def, context);\n        }\n      });\n\n      // func.options.expression.validate(def, Types.object(params), handler);\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && func.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false; \n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const func = def.getFunction(this.name);\n\n    if (!func)\n    {\n      return `Function \"${this.name}\" does not exist`;\n    }\n\n    return func.expression;\n  }\n\n  public named(name: string): InvokeExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): InvokeExpression\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Type, TypeMap } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { EntityType } from '../types/Entity';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_ENTITY = 1;\nconst INDEX_NAME = 2;\nconst INDEX_ARGS = 3;\n\nexport class MethodExpression extends Expression \n{\n\n  public static id = 'method';\n\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \n  {\n    const entity = data[INDEX_ENTITY];\n    const name = data[INDEX_NAME];\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\n    \n    return new MethodExpression(entity, name, args);\n  }\n\n  public static encode(expr: MethodExpression): any \n  {\n    const args = objectMap(expr.args, a => a.encode());\n\n    return [this.id, expr.entity, expr.name, args];\n  }\n\n  public entity: string;\n  public name: string;\n  public args: ExpressionMap;\n\n  public constructor(entity: string, name: string, args: ExpressionMap) \n  {\n    super();\n    this.entity = entity;\n    this.name = name;\n    this.args = args;\n  }\n\n  public getId(): string\n  {\n    return MethodExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity || !entity.methods[this.name])\n    {\n      return 0;\n    }\n\n    return entity.methods[this.name].expression.getComplexity(def, context);\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return MethodExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      return null;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return null;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return null;\n    }\n    \n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\n\n    argTypes[Expression.INSTANCE] = entity.type;\n    \n    return method.getReturnType(def, argTypes);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.args, (expr, arg) =>\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => DataTypes.objectRemove(this.args, arg))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.args\n      ? [1, this.args[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.args, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\n  {\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\n    {\n      handler({\n        type: ValidationType.INVALID_THIS,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      handler({\n        type: ValidationType.MISSING_TYPE,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      handler({\n        type: ValidationType.MISSING_METHOD,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const params: TypeMap = {};\n\n    params[Expression.INSTANCE] = entity.type;\n\n    objectEach(method.params.options.props, (param, paramName) =>\n    {\n      const arg = this.args[paramName];\n\n      this.validateType(def, context, param, arg, handler);\n\n      if (arg)\n      {\n        params[paramName] = arg.getType(def, context);\n      }\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return false;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return false;\n    }\n\n    for (const argName in this.args)\n    {\n      const argType = this.args[argName];\n\n      if (argType.mutates(def, arg, directly) || (argType instanceof PathExpression && argType.isMutating(arg, true) && method.mutates(def, argName)))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\n  {\n    const entity = def.getEntity(this.entity);\n\n    if (!entity)\n    {\n      return `Entity \"${this.entity}\" does not exist`;\n    }\n\n    const method = entity.methods[this.name];\n\n    if (!method)\n    {\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\n    }\n\n    return method.expression;\n  }\n\n  public isPathNode(): boolean\n  {\n    return true;\n  }\n\n  public named(name: string): MethodExpression\n  {\n    this.name = name;\n\n    return this;\n  }\n\n  public arg(name: string, value: ExpressionValue): MethodExpression\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\n  {\n    const append = isString(nameOrArgs)\n      ? { [nameOrArgs]: value }\n      : nameOrArgs;\n\n    for (const argName in append)\n    {\n      const arg = Exprs.parse(append[argName]);\n\n      this.args[argName] = arg;\n\n      arg.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { BooleanType } from '../types/Boolean';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class OrExpression extends Expression \n{\n\n  public static id = 'or';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new OrExpression(expressions);\n  }\n\n  public static encode(expr: OrExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return OrExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OrExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OrExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types: Type[] = this.expressions\n      .map(e => e.getType(def, context))\n      .concat(BooleanType.baseType)\n      .filter(t => !!t)\n    ;\n    \n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const expectedType = BooleanType.baseType;\n\n    this.expressions.forEach(subject => \n    {\n      this.validateType(def, context, expectedType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Operation } from '../Operation';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { AndExpression } from './And';\nimport { OrExpression } from './Or';\nimport { NotExpression } from './Not';\nimport { DataTypes } from '../DataTypes';\nimport { PathExpression } from './Path';\n\n\nconst INDEX_NAME = 1;\nconst INDEX_PARAMS = 2;\nconst INDEX_SCOPE = 3;\n\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \n{\n\n  public static id = 'op';\n\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \n  {\n    const name = data[INDEX_NAME];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\n    \n    return new OperationExpression(name, params, scopeAlias);\n  }\n\n  public static encode(expr: OperationExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return isEmpty(expr.scopeAlias)\n      ? [this.id, expr.name, params]\n      : [this.id, expr.name, params, expr.scopeAlias]\n  }\n\n  public static create<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\n  }\n\n  public name: string;\n  public params: ExpressionMap;\n  public scopeAlias: Record<string, string>;\n\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \n  {\n    super();\n    this.name = name;\n    this.params = params;\n    this.scopeAlias = scopeAlias;\n  }\n\n  public getId(): string\n  {\n    return OperationExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    const op = def.getOperation(this.name);\n    let complexity = op ? op.complexity : 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return OperationExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () =>\n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    const { name, params, scopeAlias } = this;\n    const operation = def.getOperation(name);\n    const operationTypes = def.getOperationTypes(name);\n\n    if (!operation)\n    {\n      handler({\n        type: ValidationType.MISSING_OPERATION,\n        severity: ValidationSeverity.HIGH,\n        context,\n        subject: this,\n      });\n\n      return;\n    }\n\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\n    const scopeContext = operation.hasScope.length > 0\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\n      : context;\n\n    for (const paramName in expectedTypes)\n    {\n      const optional = operation.optional.indexOf(paramName) !== -1;\n      const expectedRequired = expectedTypes[paramName];\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\n      const subject = params[paramName];\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n      const paramContext = hasScope ? scopeContext : context;\n      \n      this.validateType(def, paramContext, expected, subject, handler);\n    }\n\n    for (const paramName in params)\n    {\n      const subject = params[paramName];\n      const operationType = operationTypes.params[paramName];\n\n      if (!(paramName in expectedTypes) && operationType)\n      {\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\n        const paramContext = hasScope ? scopeContext : context;\n\n        handler({\n          type: ValidationType.MISSING_EXPRESSION,\n          severity: ValidationSeverity.HIGH,\n          context: paramContext,\n          subject,\n          parent: this,\n        });\n\n        params[paramName].validate(def, paramContext, handler);\n      }\n    }\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    const { name, params } = this;\n    const operation = def.getOperation(name);\n\n    if (!operation)\n    {\n      return false;\n    }\n\n    for (const paramName in params)\n    {\n      const paramType = params[paramName];\n\n      if (paramType.mutates(def, arg, directly) || (paramType instanceof PathExpression && paramType.isMutating(arg, true) && operation.mutates.indexOf(paramName) !== -1))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\n  {\n    const param = Exprs.parse(value);\n\n    this.params[name] = param;\n    param.setParent(this);\n\n    return this;\n  }\n\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\n  {\n    this.scopeAlias[scoped] = alias;\n\n    return this;\n  }\n\n  public and(exprs: Expression | Expression[]): AndExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new AndExpression([this as Expression].concat(append));\n  }\n\n  public or(exprs: Expression | Expression[]): OrExpression\n  {\n    const append = isArray(exprs) ? exprs : [exprs];\n\n    return new OrExpression([this as Expression].concat(append));\n  }\n\n  public not(): NotExpression\n  {\n    return new NotExpression(this);\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\n\n\nconst INDEX_VALUE = 1;\n\nexport class ReturnExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = 'return';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    \n    return new ReturnExpression(value);\n  }\n\n  public static encode(expr: ReturnExpression): any \n  {\n    const returnValue = expr.value.encode();\n\n    return returnValue !== undefined\n      ? [this.id, returnValue]\n      : [this.id];\n  }\n\n  public value: Expression;\n\n  public constructor(value: Expression) \n  {\n    super();\n    this.value = value;\n  }\n\n  public getId(): string\n  {\n    return ReturnExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.value.getComplexity(def, context);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.value.isDynamic();\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ReturnExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ReturnExpression(this.value.encode());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.value \n      ? this.value.getType(def, context)\n      : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === ReturnExpression.STEP_VALUE\n      ? [1, this.value]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.value.mutates(def, arg, directly);\n  }\n\n  public isPathWritable(defs: DefinitionProvider): boolean\n  {\n    return false;\n  }\n\n}","\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from './Constant';\nimport { Operation } from '../Operation';\nimport { NoExpression } from './No';\nimport { isNumber } from '../fns';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { Exprs } from '../Exprs';\nimport { NullType } from '../types/Null';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_OP = 2;\nconst INDEX_CASES = 3;\nconst INDEX_DEFAULT_CASE = 4;\n\nexport class SwitchExpression extends Expression \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static STEP_CASES = 'cases';\n\n  public static STEP_CASE = 'case';\n\n  public static STEP_RESULT = 'result';\n\n  public static STEP_DEFAULT = 'default';\n\n  public static id = 'switch';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \n  {\n    const value = exprs.getExpression(data[INDEX_VALUE]);\n    const op = data[INDEX_OP];\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\n      tests.map((t: any) => exprs.getExpression(t)), \n      exprs.getExpression(result)\n    ]);\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\n\n    return new SwitchExpression(value, op, cases, defaultCase);\n  }\n\n  public static encode(expr: SwitchExpression): any \n  {\n    const value = expr.value.encode();\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\n\n    return ConstantExpression.has(expr.defaultCase, undefined)\n      ? [this.id, value, expr.op, cases]\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\n  }\n\n  public value: Expression;\n  public op: string;\n  public cases: [Expression[], Expression][];\n  public defaultCase: Expression;\n\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \n  {\n    super();\n    this.value = value;\n    this.op = op;\n    this.cases = cases;\n    this.defaultCase = defaultCase;\n  }\n\n  public getId(): string\n  {\n    return SwitchExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.cases.reduce(\n      (max, [tests, result]) => Math.max(\n        max, \n        result.getComplexity(def, context), \n        tests.reduce((tmax, t) => Math.max(\n          tmax, \n          t.getComplexity(def, context)\n        ), 0)\n      ), \n      Math.max(\n        this.value.getComplexity(def, context), \n        this.defaultCase.getComplexity(def, context)\n      )\n    );\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return SwitchExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    const types = this.cases\n      .map(([tests, value]) => value)\n      .concat(this.defaultCase)\n      .filter(e => !!e)\n      .map(e => e.getType(def, context))\n      .filter(t => !!t)\n    ;\n\n    return Types.mergeMany(types, NullType.baseType);\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\n      traverse.step(SwitchExpression.STEP_CASES, () => \n        this.cases.forEach(([tests, result], caseIndex) =>\n          traverse.step(caseIndex, () => {\n            traverse.step(SwitchExpression.STEP_CASE, () => \n              tests.forEach((test, index) => \n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\n              )\n            );\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\n          })  \n        )\n      );\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\n    });\n  }\n\n  // tslint:disable: no-magic-numbers\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === SwitchExpression.STEP_VALUE\n      ? [1, this.value]\n      : steps[0] === SwitchExpression.STEP_CASES\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\n          ? steps[2] === SwitchExpression.STEP_CASE\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\n              ? [4, this.cases[steps[1]][0][steps[3]]]\n              : null\n            : steps[2] === SwitchExpression.STEP_RESULT\n              ? [3, this.cases[steps[1]][1]]\n              : null\n            : null\n        : steps[0] === SwitchExpression.STEP_DEFAULT\n          ? [1, this.defaultCase]\n          : null;\n  }\n  // tslint:enable: no-magic-numbers\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.value.setParent(this);\n    this.cases.forEach(([tests, result]) => {\n      tests.forEach(e => e.setParent(this));\n      result.setParent(this);\n    });\n    this.defaultCase.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.value.validate(def, context, handler);\n\n    this.cases.forEach(([tests, result]) => \n    {\n      tests.forEach(e => e.validate(def, context, handler));\n\n      result.validate(def, context, handler);\n    });\n\n    this.defaultCase.validate(def, context, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    if (this.value.mutates(def, arg, directly))\n    {\n      return true;\n    }\n\n    for (const [tests, result] of this.cases)\n    {\n      if (result.mutates(def, arg, directly))\n      {\n        return true;\n      }\n\n      for (const test of tests)\n      {\n        if (test.mutates(def, arg, directly))\n        {\n          return true;\n        }\n      }\n    }\n\n    return this.defaultCase.mutates(def, arg, directly);\n  }\n\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\n  {\n    this.value = Exprs.parse(value);\n    this.value.setParent(this);\n    this.op = op ? op.id : this.op;\n\n    return this;\n  }\n\n  public case(testValue: ExpressionValue): SwitchExpression\n  {\n    const n = this.cases.length - 1;\n    const test = Exprs.parse(testValue);\n\n    test.setParent(this);\n\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\n    {\n      this.cases[n][0].push(test);\n    }\n    else\n    {\n      this.cases.push([[test], NoExpression.instance]);\n    }\n\n    return this;\n  }\n\n  public than(bodyValue: ExpressionValue): SwitchExpression\n  {\n    const body = Exprs.parse(bodyValue);\n\n    this.cases[this.cases.length - 1][1] = body;\n    body.setParent(this);\n\n    return this;\n  }\n\n  public default(body: ExpressionValue)\n  {\n    this.defaultCase = Exprs.parse(body);\n    this.defaultCase.setParent(this);\n\n    return this;\n  }\n\n}","\nimport { objectMap, isString, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { TextType } from '../types/Text';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Exprs } from '../Exprs';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_TEMPLATE = 1;\nconst INDEX_PARAMS = 2;\n\nexport class TemplateExpression extends Expression \n{\n\n  public static id = 'tmpl';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \n  {\n    const template = data[INDEX_TEMPLATE];\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\n    \n    return new TemplateExpression(template, params);\n  }\n\n  public static encode(expr: TemplateExpression): any \n  {\n    const params = objectMap(expr.params, e => e.encode());\n\n    return [this.id, expr.template, params];\n  }\n\n  public template: string;\n  public params: ExpressionMap;\n\n  public constructor(template: string, params: ExpressionMap) \n  {\n    super();\n    this.template = template;\n    this.params = params;\n  }\n\n  public getId(): string\n  {\n    return TemplateExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    let complexity = 0;\n\n    for (const prop in this.params)\n    {\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\n    }\n\n    return complexity;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TemplateExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return TextType.baseType.newInstance();\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.params, (expr, param) =>\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => DataTypes.objectRemove(this.params, param))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.params\n      ? [1, this.params[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.params, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.params, subject =>\n    {\n      this.validateType(def, context, TextType.baseType, subject, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const param in this.params)\n    {\n      if (this.params[param].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public param(name: string, value: ExpressionValue): TemplateExpression\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\n  {\n    const append = isString(nameOrParams)\n      ? { [nameOrParams]: value }\n      : nameOrParams;\n\n    for (const paramName in append)\n    {\n      const param = Exprs.parse(append[paramName]);\n      this.params[paramName] = param;\n      param.setParent(this);\n    }\n\n    return this;\n  }\n\n}","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { BooleanType } from '../types/Boolean';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\n\n\nconst DEFAULT_MAX_ITERATIONS = 100000;\nconst DEFAULT_BREAK = 'break';\nconst INDEX_CONDITION = 1;\nconst INDEX_BODY = 2;\nconst INDEX_BREAK = 3;\nconst INDEX_MAX = 4;\n\nexport class WhileExpression extends Expression \n{\n\n  public static STEP_CONDITION = 'condition';\n\n  public static STEP_BODY = 'body';\n\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\n\n  public static id = 'while';\n\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \n  {\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\n    const body = exprs.getExpression(data[INDEX_BODY]);\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\n    \n    return new WhileExpression(condition, body, breakVariable, max);\n  }\n\n  public static encode(expr: WhileExpression): any \n  {\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\n\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\n      out.push(expr.breakVariable);\n    }\n    if (hasMax) {\n      out.push(expr.maxIterations);\n    }\n    \n    return out;\n  }\n  \n  public condition: Expression;\n  public body: Expression;\n  public breakVariable: string;\n  public maxIterations: number;\n\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \n  {\n    super();\n    this.condition = condition;\n    this.body = body;\n    this.breakVariable = breakVariable;\n    this.maxIterations = maxIterations;\n  }\n\n  public getId(): string\n  {\n    return WhileExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.body.isDynamic();\n  }\n\n  public getScope()\n  {\n    return {\n      [this.breakVariable]: BooleanType.baseType\n    };\n  }\n\n  public encode(): any \n  {\n    return WhileExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\n  }\n\n  public getType(def: DefinitionProvider, original: Type): Type | null\n  {\n    const { context } = def.getContextWithScope(original, this.getScope());\n\n    const body = this.body.getType(def, context);\n\n    return body ? Types.optional(body) : null;\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\n    });\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] === WhileExpression.STEP_CONDITION\n      ? [1, this.condition]\n      : steps[0] === WhileExpression.STEP_BODY\n        ? [1, this.body]\n        : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.condition.setParent(this);\n    this.body.setParent(this);\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\n\n    const bodyContext = def.getContext(context, this.getScope());\n\n    this.body.validate(def, bodyContext, handler);\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    return this.condition.mutates(def, arg, directly) || \n      this.body.mutates(def, arg, directly);\n  }\n\n  public while(condition: Expression)\n  {\n    this.condition = condition;\n    this.condition.setParent(this);\n\n    return this;\n  }\n\n  public do(body: Expression)\n  {\n    this.body = body;\n    this.body.setParent(this);\n\n    return this;\n  }\n\n  public withBreak(name: string)\n  {\n    this.breakVariable = name;\n\n    return this;\n  }\n\n  public withMax(iterations: number)\n  {\n    this.maxIterations = iterations;\n\n    return this;\n  }\n\n}","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\n\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\n\nconst ops = TupleOperations;\n\nexport const TupleOps = \n{\n\n  // Statics\n\n  create: ops.set('create'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\n\n  get: ops.set('get', {}, ['value', 'index']),\n\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\n\n  // Comparisons\n  \n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nTupleComputeds.set('copy', TupleOps.copy);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\n\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\n\nconst ops = NumberOperations;\n\nexport const NumberOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  pi: ops.set('pi'),\n\n  pi2: ops.set('2pi'),\n\n  piHalf: ops.set('hpi'),\n\n  e: ops.set('e'),\n\n  sqrt2: ops.set('sqrt2'),\n\n  sqrt12: ops.set('sqrt1/2'),\n\n  ln2: ops.set('ln2'),\n\n  ln10: ops.set('ln10'),\n\n  log2e: ops.set('log2e'),\n\n  log10e: ops.set('log10e'),\n\n  // Binary Operations\n\n  add: ops.set('+', {}, ['value', 'addend']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier']),\n\n  div: ops.set('/', {}, ['value', 'divisor']),\n\n  mod: ops.set('%', {}, ['value', 'divisor']),\n\n  min: ops.set('min', {}, ['a', 'b']),\n\n  max: ops.set('max', {}, ['a', 'b']),\n  \n  pow: ops.set('^^', {}, ['value', 'exponent']),\n  \n  atan2: ops.set('atan2', {}, ['x', 'y']),\n  \n  hypot: ops.set('hyp', {}, ['a', 'b']),\n  \n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\n  \n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\n\n  bitAnd: ops.set('&', {}, ['a', 'b']),\n\n  bitOr: ops.set('|', {}, ['a', 'b']),\n\n  bitXor: ops.set('^', {}, ['a', 'b']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  // Unary Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  sqrt: ops.set('sqrt', {}, ['value']),\n\n  sq: ops.set('^2', {}, ['value']),\n  \n  cbrt: ops.set('cbrt', {}, ['value']),\n  \n  floor: ops.set('floor', {}, ['value']),\n  \n  ceil: ops.set('ceil', {}, ['value']),\n  \n  up: ops.set('up', {}, ['value']),\n  \n  down: ops.set('down', {}, ['value']),\n  \n  round: ops.set('round', {}, ['value']),\n  \n  abs: ops.set('abs', {}, ['value']),\n  \n  neg: ops.set('neg', {}, ['value']),\n  \n  sign: ops.set('sign', {}, ['value']),\n  \n  log: ops.set('log', {}, ['value']),\n  \n  sin: ops.set('sin', {}, ['value']),\n  \n  cos: ops.set('cos', {}, ['value']),\n  \n  tan: ops.set('tan', {}, ['value']),\n  \n  sinh: ops.set('sinh', {}, ['value']),\n  \n  cosh: ops.set('cosh', {}, ['value']),\n\n  asin: ops.set('asin', {}, ['value']),\n  \n  acos: ops.set('acos', {}, ['value']),\n  \n  atan: ops.set('atan', {}, ['value']),\n  \n  factorial: ops.set('!', {}, ['value']),\n\n  bitFlip: ops.set('~', {}, ['value']),\n\n  // Other\n\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\n\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\n\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\n\n  // Generators\n\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\n\n  // Formatters\n\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\n\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\n\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\n\n  fromPercent: ops.set('fromPercent', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\n\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\n\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\n\n  isPositive: ops.set('+?', {}, ['value']),\n\n  isNegative: ops.set('-?', {}, ['value']),\n\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\n\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nNumberComputeds.set('floor', NumberOps.floor);\nNumberComputeds.set('ceil', NumberOps.ceil);\nNumberComputeds.set('up', NumberOps.up);\nNumberComputeds.set('down', NumberOps.down);\nNumberComputeds.set('round', NumberOps.round);\nNumberComputeds.set('abs', NumberOps.abs);\nNumberComputeds.set('negate', NumberOps.neg);\nNumberComputeds.set('sign', NumberOps.sign);\nNumberComputeds.set('isZero', NumberOps.isZero);\nNumberComputeds.set('isWhole', NumberOps.isWhole);\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\nNumberComputeds.set('isPositive', NumberOps.isPositive);\nNumberComputeds.set('isNegative', NumberOps.isNegative);\nNumberComputeds.set('toText', NumberOps.toText);","\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\nimport { ID } from '../types/ID';\n\n\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\n\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\n\nconst ops = ListOperations;\n\nexport const ListOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\n  \n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\n\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\n\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\n\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\n\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\n\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\n\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\n\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\n\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\n\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\n\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\n\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\n\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\n\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\n\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\n\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\n\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\n\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\n\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\n\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\n\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\n\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\n\n  count: ops.set('count', {}, ['list']),\n\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\n\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\n\n  flatten: ops.set('flatten', {}, ['list'], [], [], [], ['list']),\n\n  // Iteration\n\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\n\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\n\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\n\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\n\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\n\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\n\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\n\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\n\n  // Joins\n\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\n\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\n\n  // Aggregates\n\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEmpty: ops.set('0?', {}, ['list']),\n\n  isNotEmpty: ops.set('!0', {}, ['list']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n  \n};\n\nListComputeds.set('copy', ListOps.copy);\nListComputeds.set('reversed', ListOps.reverse);\nListComputeds.set('shuffled', ListOps.shuffle);\nListComputeds.set('first', ListOps.first);\nListComputeds.set('last', ListOps.last);\nListComputeds.set('random', ListOps.random);\nListComputeds.set('isEmpty', ListOps.isEmpty);\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { NumberType } from './Number';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from './Tuple';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_ITEM = 1;\nconst INDEX_OPTIONS = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\nconst REQUIRED_SUB_MIN = 10;\n\nexport interface ListOptions \n{\n  item: Type;\n  min?: number;\n  max?: number;\n}\n\nexport class ListType extends Type<ListOptions> \n{\n\n  public static STEP_ITEM = 'item';\n\n  public static id = ID.List;\n\n  public static operations = ListOperations;\n\n  public static computeds = ListComputeds;\n\n  public static baseType = new ListType({ item: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): ListType \n  {\n    const item = types.getType(data[INDEX_ITEM]);\n    const options = data[INDEX_OPTIONS] || {};\n\n    return new ListType({ item, ...options });\n  }\n\n  public static encode(type: ListType): any \n  {\n    const options: any = { ...type.options };\n    const item = options.item;\n    delete options.item;\n\n    return isEmpty(options)\n      ? [this.id, item.encode()]\n      : [this.id, item.encode(), options];\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isArray(data))\n    {\n      return null;\n    }\n\n    const type = new ListType({\n      item: AnyType.baseType,\n      min: data.length,\n      max: data.length\n    });\n\n    cache.set(data, type);\n\n    let item = describer.describe(data[0]);\n\n    for (let i = 1; i < data.length; i++)\n    {\n      item = describer.merge(item, data[i]);\n    }\n\n    type.options.item = item;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 8;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      toJson: (json, writer) => {\n        if (isArray(json)) {\n          return json.map(writer);\n        }\n      },\n      fromJson: (json, reader) => {\n        if (isArray(json)) {\n          return json.map(reader);\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isArray(a);\n        const bt = isArray(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (at) {\n          let dl = a.length - b.length;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            for (let i = 0; i < a.length; i++) {\n              const c = compare(a[i], b[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isArray(a);\n        const bl = isArray(b);\n\n        if (al !== bl) return false;\n        \n        if (al)\n        {\n          if (a.length !== b.length)\n          {\n            return false\n          }\n\n          for (let i = 0; i < a.length; i++)\n          {\n            if (!equals(a[i], b[i]))\n            {\n              return false\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isArray(x)) {\n          const newArray: any[] = [];\n\n          setObjectCopy(x, newArray);\n\n          for (const item of x) {\n            newArray.push(copy(item));\n          }\n\n          return newArray;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<any[]>({\n      priority,\n      isValid: (value) => isArray(value),\n      get: (value, step) => value[step],\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\n      remove: (value, step) => DataTypes.arrayRemove(value, step),\n      has: (value, step) => value[step] !== undefined,\n    });\n  }\n\n  public static forItem(itemOrClass: TypeInput)\n  {\n    const item = Types.parse(itemOrClass);\n    \n    return new ListType({ item });\n  }\n\n  public getId(): string\n  {\n    return ListType.id;\n  }\n\n  public getOperations()\n  {\n    return ListType.operations.map;\n  }\n\n  public merge(type: ListType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.item = Types.merge(o1.item, o2.item);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.max = Math.max(o1.max, o2.max);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return isNumber(this.options.min) && expr.value < this.options.min\n          ? this.options.item\n          : Types.optional(this.options.item);\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.optional(this.options.item);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        const values = Array.from(exprType.options.constants.values());\n\n        if (exprType.options.value instanceof NumberType)\n        {\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\n          {\n            return this.options.item;\n          }\n\n          return Types.optional(this.options.item);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const { min, item } = this.options;\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\n    const required: TypeSub[] = [];\n\n    for (let i = 0; i < requiredMin; i++) {\n      required.push({ key: i, value: item });\n    }\n\n    return [\n      ...required,\n      { key: 'length', value: Types.LENGTH },\n      { key: Types.INDEX, value: Types.optional(item) },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    const { item, min, max } = this.options;\n\n    if (!options.strict &&\n      !options.exact &&\n      other instanceof TupleType &&\n      !other.options.some(o => !item.isCompatible(o, options)))\n    {\n      return true;\n    }\n\n    if (!(other instanceof ListType))\n    {\n      return false;\n    }\n\n    if (!item.isCompatible(other.options.item, options))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const otherMin = other.options.min;\n\n      if (min && (!otherMin || otherMin < min))\n      {\n        return false;\n      }\n\n      const otherMax = other.options.max;\n\n      if (max && (!otherMax || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ListType.STEP_ITEM \n      ? this.options.item \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.item.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { item } = this.options;\n\n    item.removeDescribedRestrictions();\n\n    this.options = { item };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ListOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(ListOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.get('value'),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ListOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.item.getCompareExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = item\n    return Exprs.op(ListOps.map, {\n      list: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      item: 'value',\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!Array.isArray(value)) \n    {\n      return false;\n    }\n\n    const { item, min, max } = this.options;\n\n    if (isNumber(min) && value.length < min) \n    {\n      return false;\n    }\n\n    if (isNumber(max) && value.length > max) \n    {\n      return false;\n    }\n\n    for (const val of value)\n    {\n      if (!item.isValid(val)) \n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (isArray(value))\n    {\n      const item = this.options.item; \n\n      for (let i = 0; i < value.length; i++)\n      {\n        value[i] = item.normalize(value[i]);\n      }\n    }\n    \n    return value;\n  }\n\n  public newInstance(): ListType\n  {\n    const { item } = this.options;\n\n    return new ListType({\n      item: item.newInstance(),\n    });\n  }\n\n  public clone(): ListType\n  {\n    const { item, min, max } = this.options;\n\n    return new ListType({\n      item: item.clone(),\n      min,\n      max,\n    });\n  }\n\n  public encode(): any \n  {\n    return ListType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return [];\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n    const start = Math.min(chosenMin, chosenMax);\n    const end = Math.max(chosenMin, chosenMax);\n    const n = rnd(start, end + 1, true);\n    const out: any[] = [];\n\n    for (let i = 0; i < n; i++)\n    {\n      out.push(this.options.item.random(rnd));\n    }\n\n    return out;\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { isArray, isNumber } from '../fns';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\nimport { NumberOps } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { NumberType } from './Number';\nimport { EnumType } from './Enum';\nimport { TextType } from './Text';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ListType } from './List';\nimport { ListOps } from '../ops/ListOps';\nimport { Types } from '../Types';\nimport { NullType } from './Null';\n\n\nconst INDEX_ELEMENTS = 1;\n\nexport class TupleType extends Type<Type[]>\n{\n\n  public static id = ID.Tuple;\n\n  public static operations = TupleOperations;\n\n  public static computeds = TupleComputeds;\n\n  public static baseType = new TupleType([]);\n\n  public static decode(data: any[], types: TypeProvider): TupleType \n  {\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\n\n    return new TupleType(elements);\n  }\n\n  public static encode(type: TupleType): any \n  {\n    const elements = type.options.map(t => t.encode());\n\n    return [this.id, elements];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static forItem(types: TypeInput[])\n  {\n    return new TupleType(types.map((t) => Types.parse(t)));\n  }\n\n  public getId(): string\n  {\n    return TupleType.id;\n  }\n\n  public getOperations()\n  {\n    return TupleType.operations.map;\n  }\n\n  public merge(type: TupleType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (expr.value === 'length')\n      {\n        return Types.LENGTH;\n      }\n\n      if (isNumber(expr.value))\n      {\n        return this.options[expr.value];\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (exprType instanceof NumberType)\n      {\n        return Types.mergeMany(this.options, NullType.baseType);\n      }\n\n      if (exprType instanceof EnumType)\n      {\n        if (exprType.options.value instanceof NumberType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\n          \n          return Types.mergeMany(types, NullType.baseType);\n        }\n\n        if (exprType.options.value instanceof TextType)\n        {\n          const values = Array.from(exprType.options.constants.values());\n\n          if (values.length === 1 && values[0] === 'length')\n          {\n            return Types.LENGTH;\n          }\n        }\n      }\n    }\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      ...this.options.map((value, key) => ({ key, value })),\n      { key: 'length', value: Types.LENGTH },\n      {\n        key: new EnumType({\n          key: NumberType.baseType,\n          value: NumberType.baseType,\n          constants: new Map(\n            this.options.map((prop, key) => [key, key]),\n          ),\n        }),\n        value: Types.mergeMany(this.options, NullType.baseType),\n      },\n      { \n        key: Types.INDEX, \n        value: Types.optional(\n          Types.mergeMany(this.options, NullType.baseType)\n        ),\n      },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.tuple(\n      ...this.options.map((t) => t.getCreateExpression())\n    );\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs\n      .op(TupleOps.isValid, {\n        value: Exprs.get('value'),\n      })\n      .and(this.options.map((t, i) => Exprs\n        .define({ value: Exprs.get('value', i) })\n        .run(t.getValidateExpression()),\n      ),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(NumberOps.cmp, {\n        value: Exprs.get('value', 'length'),\n        test: Exprs.get('test', 'length'),\n      }),\n      ...this.options.map((t, i) => Exprs\n        .define({\n          value: Exprs.get('value', i),\n          test: Exprs.get('test', i),\n        })\n        .run(t.getCompareExpression()),\n      ),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = element index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (!hasFrom && hasTo) // add\n    {\n      return Exprs.define({ parent: Exprs.get('value') },\n        Exprs.op(ListOps.insert, {\n          list: Exprs.get('value'),\n          index: to,\n          item: newValue,\n        }),\n      );\n    } \n    else if (hasFrom && !hasTo) // remove\n    {\n      return Exprs.body(\n        Exprs.op(ListOps.removeAt, {\n          list: Exprs.get('value'),\n          index: from,\n        }),\n        Exprs.get('value'),\n      );\n    }\n    else if (from === to && hasFrom) // change\n    { \n      return Exprs.body(\n        Exprs.update('value', from)\n          .to(newValue, 'value'),\n        Exprs.get('value'),\n      );\n    }\n\n    return newValue;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!options.exact && \n      !options.strict && \n      other instanceof ListType && \n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\n      isNumber(other.options.min) &&\n      other.options.min >= this.options.length)\n    {\n      return true;\n    }\n\n    if (!(other instanceof TupleType))\n    {\n      return false;\n    }\n\n    const a = this.options;\n    const b = other.options;\n\n    if (b.length < a.length || (options.exact && a.length !== b.length))\n    {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++)\n    {\n      if (!a[i].isCompatible(b[i], options))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isArray(value))\n    {\n      return false;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      if (!elements[i].isValid(value[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    if (!isArray(value))\n    {\n      return value;\n    }\n\n    const elements = this.options;\n\n    for (let i = 0; i < elements.length; i++)\n    {\n      value[i] = elements[i].normalize(value[i]);\n    }\n\n    return value;\n  }\n\n  public newInstance(): TupleType\n  {\n    return new TupleType([]);\n  }\n\n  public clone(): TupleType\n  {\n    return new TupleType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return TupleType.encode(this);\n  }\n\n  public create(): any[]\n  {\n    return this.options.map(e => e.create());\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options.map(e => e.random(rnd));\n  }\n\n  public fromJson(json: any[]): any[]\n  {\n    return this.options.map((e, i) => e.fromJson(json[i]));\n  }\n\n  public toJson(value: any[]): any[]\n  {\n    return this.options.map((e, i) => e.toJson(value[i]));\n  }\n\n}\n","\nimport { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { TupleType } from '../types/Tuple';\nimport { ValidationHandler } from '../Validate';\nimport { isNumber } from '../fns';\nimport { Types } from '../Types';\n\n\nconst INDEX_EXPRESSIONS = 1;\n\nexport class TupleExpression extends Expression \n{\n\n  public static id = 'tuple';\n\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \n  {\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\n    \n    return new TupleExpression(expressions);\n  }\n\n  public static encode(expr: TupleExpression): any \n  {\n    const expressions = expr.expressions.map(e => e.encode());\n\n    return [this.id, expressions];\n  }\n\n  public expressions: Expression[];\n\n  public constructor(expressions: Expression[]) \n  {\n    super();\n    this.expressions = expressions;\n  }\n\n  public getId(): string\n  {\n    return TupleExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    return this.expressions.some((e) => e.isDynamic());\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return TupleExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      this.expressions.forEach((expr, index) => \n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\n      )\n    );\n  }\n\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\n      ? [1, this.expressions[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    this.expressions.forEach(e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    this.expressions.forEach(subject =>\n    {\n      subject.validate(def, context, handler);\n    });\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const expr of this.expressions)\n    {\n      if (expr.mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","\nimport { objectMap, objectReduce, objectEach } from '../fns';\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ObjectType } from '../types/Object';\nimport { ValidationHandler } from '../Validate';\nimport { Types } from '../Types';\nimport { DataTypes } from '../DataTypes';\n\n\nconst INDEX_PROPS = 1;\n\nexport class ObjectExpression extends Expression \n{\n\n  public static id = 'obj';\n\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \n  {\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\n    \n    return new ObjectExpression(props);\n  }\n\n  public static encode(expr: ObjectExpression): any \n  {\n    const props = objectMap(expr.props, e => e.encode());\n\n    return [this.id, props];\n  }\n\n  public props: ExpressionMap;\n\n  public constructor(props: ExpressionMap) \n  {\n    super();\n    this.props = props;\n  }\n\n  public getId(): string\n  {\n    return ObjectExpression.id;\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\n  }\n\n  public isDynamic(): boolean\n  {\n    for (const prop in this.props)\n    {\n      const propExpr = this.props[prop];\n\n      if (propExpr && propExpr.isDynamic())\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getScope(): null\n  {\n    return null;\n  }\n\n  public encode(): any \n  {\n    return ObjectExpression.encode(this);\n  }\n\n  public clone(): Expression\n  {\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    return traverse.enter(this, () => \n      objectEach(this.props, (expr, prop) =>\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => DataTypes.objectRemove(this.props, prop))\n      )\n    );\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    return steps[0] in this.props\n      ? [1, this.props[steps[0]]]\n      : null;\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    this.parent = parent;\n\n    objectEach(this.props, e => e.setParent(this));\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    objectEach(this.props, e => e.validate(def, context, handler));\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    for (const prop in this.props)\n    {\n      if (this.props[prop].mutates(def, arg, directly))\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\nimport { NotExpression } from './exprs/Not';\nimport { AndExpression } from './exprs/And';\nimport { NoExpression } from './exprs/No';\nimport { DefineExpression } from './exprs/Define';\nimport { DoExpression } from './exprs/Do';\nimport { ChainExpression } from './exprs/Chain';\nimport { CommentExpression } from './exprs/Comment';\nimport { ComputedExpression } from './exprs/Computed';\nimport { ConstantExpression } from './exprs/Constant';\nimport { ForExpression } from './exprs/For';\nimport { GetExpression } from './exprs/Get';\nimport { GetDataExpression } from './exprs/GetData';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { IfExpression } from './exprs/If';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { OperationExpression } from './exprs/Operation';\nimport { Operation } from './Operation';\nimport { OrExpression } from './exprs/Or';\nimport { PathExpression } from './exprs/Path';\nimport { ReturnExpression } from './exprs/Return';\nimport { SetExpression } from './exprs/Set';\nimport { SwitchExpression } from './exprs/Switch';\nimport { TemplateExpression } from './exprs/Template';\nimport { UpdateExpression } from './exprs/Update';\nimport { WhileExpression } from './exprs/While';\nimport { TupleExpression } from './exprs/Tuple';\nimport { ObjectExpression } from './exprs/Object';\nimport { isArray, isObject, objectMap } from './fns';\nimport { Type } from './Type';\n\n\nexport class Exprs\n{\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\n  {\n    if (this.autoSetParent || force)\n    {\n      expr.setParent();\n    }\n\n    return expr;\n  }\n\n  public static parse(values: ExpressionValue[]): Expression[]\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\n  public static parse(value: ExpressionValue): Expression\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\n  {\n    return isArray(value)\n      ? value.map((v) => this.parse(v))\n      : value instanceof Expression \n        ? value\n        : isObject(value)\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\n          : new ConstantExpression(value);\n  }\n\n  public static cast(valueType: Type, targetType: Type): Expression;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\n  {\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\n    const op = valueType.getOperations()[opId];\n\n    return op\n      ? this.op(op, { value: this.get('value') })\n      : createOnMissing\n        ? this.setParent(targetType.getCreateExpression())\n        : null as unknown as Expression;\n  }\n\n  public static and(...exprs: Expression[]): AndExpression\n  {\n    return this.setParent(new AndExpression(exprs));\n  }\n\n  public static body(...exprs: Expression[]): ChainExpression\n  {\n    return this.setParent(new ChainExpression(exprs));\n  }\n\n  public static const(value: any): ConstantExpression\n  {\n    return new ConstantExpression(value);\n  }\n\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\n  {\n    return this.setParent(new DefineExpression([], body).with(vars));\n  }\n\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\n  {\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\n  {\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\n  }\n\n  public static get(): GetExpression\n  public static get(...path: ExpressionValue[]): PathExpression\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\n  {\n    return path.length === 0\n      ? new GetExpression()\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\n  }\n\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\n  }\n\n  public static computed(name: string): ComputedExpression\n  {\n    return this.setParent(new ComputedExpression(name));\n  }\n\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\n  {\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\n  }\n\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\n  }\n\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\n  {\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\n  }\n\n  public static noop(): NoExpression\n  {\n    return NoExpression.instance;\n  }\n\n  public static not(expr: Expression): NotExpression\n  {\n    return this.setParent(new NotExpression(expr));\n  }\n\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\n  {\n    return this.setParent(new ObjectExpression(this.parse(props)));\n  }\n\n  public static op<P extends string, O extends string, S extends string>(\n    op: Operation<P, O, S, any, any>, \n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\n  ): OperationExpression<P, O, S> {\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\n  }\n\n  public static or(...exprs: Expression[]): OrExpression\n  {\n    return this.setParent(new OrExpression(exprs));\n  }\n\n  public static path(...exprs: ExpressionValue[]): PathExpression\n  {\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\n      ? exprs[0]\n      : new PathExpression(this.parse(exprs)));\n  }\n\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\n  {\n    return this.setParent(new ReturnExpression(this.parse(value)));\n  }\n\n  public static set(...path: ExpressionValue[]): SetExpression\n  {\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\n  {\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\n  }\n\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\n  {\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\n  }\n\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\n  {\n    return this.setParent(new TupleExpression(this.parse(elements)));\n  }\n\n  public static update(...path: ExpressionValue[]): UpdateExpression\n  {\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\n  }\n\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\n  {\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\n  }\n\n  public static undefined()\n  {\n    return this.const(undefined);\n  }\n\n  public static null()\n  {\n    return this.const(null);\n  }\n\n  public static true()\n  {\n    return this.const(true);\n  }\n\n  public static false()\n  {\n    return this.const(false);\n  }\n\n  public static zero()\n  {\n    return this.const(0);\n  }\n\n  public static one()\n  {\n    return this.const(1);\n  }\n\n  public static compareEqual()\n  {\n    return this.const(1);\n  }\n\n  public static compareLess()\n  {\n    return this.const(-1);\n  }\n\n  public static compareGreater()\n  {\n    return this.const(+1);\n  }\n\n  public static string()\n  {\n    return this.const('');\n  }\n\n  public static comment(comment: string)\n  {\n    return new CommentExpression(comment);\n  }\n\n  public static entity(name: string)\n  {\n    return new GetEntityExpression(name);\n  }\n\n  public static relation(name: string)\n  {\n    return new GetRelationExpression(name);\n  }\n\n  public static data(name: string)\n  {\n    return new GetDataExpression(name);\n  }\n\n}","\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\nconst RANDOM_MIN = 0;\nconst RANDOM_MAX = 10;\n\nexport interface NumberOptions \n{\n  min?: number;\n  max?: number;\n  whole?: boolean;\n}\n\nexport class NumberType extends Type<NumberOptions> \n{\n\n  public static WHOLE_EPSILON = 0.000001;\n\n  public static id = ID.Number;\n\n  public static operations = NumberOperations;\n\n  public static computeds = NumberComputeds;\n\n  public static baseType = new NumberType({});\n\n  public static decode(data: any[]): NumberType \n  {\n    return new NumberType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: NumberType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, type.options];\n  }\n\n  public static describePriority: number = 4;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isNumber(data))\n    {\n      return null;\n    }\n\n    return new NumberType({\n      min: data,\n      max: data,\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static EQUALS_EPSILON = 0.000001;\n\n  public static COMPARES_EPSILON = 0.000001;\n\n  public static register(): void\n  {\n    const priority = 0;\n    const type: DataTypeRaw = 'number';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        return a < b\n          ? (b - a) < this.COMPARES_EPSILON\n            ? 0\n            : -1\n          : (a - b) < this.COMPARES_EPSILON\n            ? 0\n            : 1;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type: 'bigint',\n      compare: (a, b) => {\n        return a - b;\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type: 'bigint',\n      equals: (a, b) => {\n        return a === b;\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return NumberType.id;\n  }\n\n  public getOperations()\n  {\n    return NumberType.operations.map;\n  }\n\n  public merge(type: NumberType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.max = Math.max(o1.max, o2.max);\n    o1.min = Math.min(o1.min, o2.min);\n    o1.whole = o1.whole && o2.whole;\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (!(other instanceof NumberType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      const min = this.options.min;\n      const otherMin = other.options.min;\n\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\n      {\n        return false;\n      }\n\n      const max = this.options.max;\n      const otherMax = other.options.max;\n\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options = {};\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(NumberOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(NumberOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    if (!isNumber(value))\n    {\n      return false;\n    }\n\n    const { min, max, whole } = this.options;\n\n    if (isNumber(min) && value < min)\n    {\n      return false;\n    }\n\n    if (isNumber(max) && value > max)\n    {\n      return false;\n    }\n\n    if (whole && !isWhole(value))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    return value;\n  }\n\n  public newInstance(): NumberType\n  {\n    return new NumberType({});\n  }\n\n  public clone(): NumberType\n  {\n    return new NumberType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return NumberType.encode(this);\n  }\n\n  public create(): number\n  {\n    return 0;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { min, max, whole } = this.options;\n    const chosenMin = coalesce(min, RANDOM_MIN);\n    const chosenMax = coalesce(max, RANDOM_MAX);\n\n    return rnd(chosenMin, chosenMax, whole);\n  }\n\n  public fromJson(json: number): number\n  {\n    return json;\n  }\n\n  public toJson(value: number): number\n  {\n    return value;\n  }\n\n}","\nimport { LocaleOptions } from '../Locale';\n\n\n\nconst MAP: string[] = [\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\n];\n\n\nexport const en: LocaleOptions = \n{\n  weekStartsOn: 0,\n  firstWeekContainsDate: 4,\n\n  am: 'am',\n  pm: 'pm',\n\n  formatLT: 'h:mm A',\n  formatLTS: 'h:mm:ss A',\n  formatL: 'MM/DD/Y',\n  formatl: 'M/D/Y',\n  formatLL: 'MMMM D, Y',\n  formatll: 'MMM D, Y',\n  formatLLL: 'MMMM D, Y h:mm A',\n  formatlll: 'MMM D, Y h:mm A',\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\n  formatllll: 'ddd, MMM D, Y h:mm A',\n\n  suffix: (value: number) => \n  {\n    const TH_SPECIAL_MIN = 11;\n    const TH_SPECIAL_MAX = 13;\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\n\n    return value + suffix;\n  },\n\n  list: (items) => \n  {\n    const last: number = items.length - 1;\n    let out: string = items[0];\n\n    for (let i = 1; i < last; i++) \n    {\n      out += ', ' + items[i];\n    }\n\n    if (last > 0) {\n      out += ' and ' + items[last];\n    }\n\n    return out;\n  },\n\n  months: [\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\n  ],\n\n  weekdays: [\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\n  ],\n\n};\n","\nimport { en } from './en';\nimport { LocaleOptions } from '../Locale';\n\n\nexport let currentLocale: LocaleOptions = en;","\n\n/**\n * The number of milliseconds in a second.\n */\nexport const MILLIS_IN_SECOND: number = 1000;\n\n/**\n * The number of seconds in a minute.\n */\nexport const SECONDS_IN_MINUTE: number = 60;\n\n/**\n * The number of hours in a day (not including DST days).\n */\nexport const HOURS_IN_DAY: number = 24;\n\n/**\n * The number of days in a week.\n */\nexport const DAYS_IN_WEEK: number = 7;\n\n/**\n * The number of milliseconds in a minute.\n */\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in an hour.\n */\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\n\n/**\n * The number of milliseconds in a day (not including DST days).\n */\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * The number of months in a quarter.\n */\nexport const MONTHS_IN_QUARTER = 3;\n\n/**\n * The number of months in a year.\n */\nexport const MONTHS_IN_YEAR: number = 12;\n\n/**\n * The first day of a month.\n */\nexport const DAY_MIN: number = 1;\n\n/**\n * The last day of the longest month.\n */\nexport const DAY_MAX: number = 31;\n\n/**\n * The last hour of the day.\n */\nexport const HOUR_MAX: number = 23;\n\n/**\n * The last minute of the hour.\n */\nexport const MINUTE_MAX: number = 59;\n\n/**\n * The last second of the minute.\n */\nexport const SECOND_MAX: number = 59;\n\n/**\n * The last millisecond of the second.\n */\nexport const MILLIS_MAX: number = 999;\n\n/**\n * The last day of the week.\n */\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\nimport { currentLocale } from '../../locales';\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\nimport { isDate, isNumber, isString } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport type Unit = \n  'millis' | \n  'second' | \n  'minute' | \n  'hour' | \n  'day' | \n  'week' | \n  'month' |\n  'quarter' |\n  'year';\n\nexport type UnitRecord<T> = Record<Unit, T>;\n\nexport type Adjuster = (value: number) => number;\n\nexport const adjusters: Record<string, Adjuster> = \n{\n  none:     (value) => value,\n  floor:    (value) => Math.floor(value),\n  ceil:     (value) => Math.ceil(value),\n  round:    (value) => Math.round(value),\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\n};\n\nexport type Getter = (x: Date) => number;\n\nexport const getters: Record<string, Getter> = \n{\n  timestamp:            d => d.valueOf(),\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\n  millis:               d => d.getMilliseconds(),\n  second:               d => d.getSeconds(),\n  minute:               d => d.getMinutes(),\n  hour:                 d => d.getHours(),\n  day:                  d => d.getDay(),\n  dayOfMonth:           d => d.getDate(),\n  lastDayOfMonth:       getLastDayOfMonth,\n  dayOfYear:            getDayOfYear,\n  dayOfWeek:            getDayOfWeek,\n  week:                 getWeekOfYear,\n  weekOfMonth:          getWeekOfMonthISO,\n  weekspanOfMonth:      getWeekspanOfMonth,\n  fullWeekOfMonth:      getFullWeekOfMonth,\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\n  weekOfYear:           getWeekOfYearISO,\n  weekspanOfYear:       getWeekspanOfYear,\n  fullWeekOfYear:       getFullWeekOfYear,\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\n  month:                d => d.getMonth(),\n  quarter:              getQuarter,\n  year:                 d => d.getFullYear(),\n  timeIdentifier:       getTimeIdentifier,\n  dayIdentifier:        getDayIdentifier,\n  weekIdentifier:       getWeekIdentifier,\n  monthIdentifier:      getMonthIdentifier,\n  quarterIdentifier:    getQuarterIdentifier,\n};\n\nexport type Setter = (x: Date, value: number) => void;\n\nexport const setters: Record<string, Setter> = \n{\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\n};\n\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\n\nexport const startOf: UnitRecord<Starter> = \n{\n  millis:   x => x,\n  second:   startOfSecond,\n  minute:   startOfMinute,\n  hour:     startOfHour,\n  day:      startOfDay,\n  week:     startOfWeek,\n  month:    startOfMonth,\n  quarter:  startOfQuarter,\n  year:     startOfYear,\n};\n\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\n\nexport const endOf: UnitRecord<Ender> = \n{\n  millis:   x => x,\n  second:   endOfSecond,\n  minute:   endOfMinute,\n  hour:     endOfHour,\n  day:      endOfDay,\n  week:     endOfWeek,\n  month:    endOfMonth,\n  quarter:  endOfQuarter,\n  year:     endOfYear,\n};\n\nexport type Adder = (x: Date, amount: number) => void;\n\nexport const add: UnitRecord<Adder> = \n{\n  millis:   addMilliseconds,\n  second:   addSeconds,\n  minute:   addMinutes,\n  hour:     addHours,\n  day:      addDays,\n  week:     addWeeks,\n  month:    addMonths,\n  quarter:  addQuarters,\n  year:     addYears,\n};\n\nexport type Differ = (a: Date, b: Date) => number;\n\nexport const diff: UnitRecord<Differ> = \n{\n  millis:   diffMilliseconds,\n  second:   diffSeconds,\n  minute:   diffMinutes,\n  hour:     diffHours,\n  day:      diffDays,\n  week:     diffWeeks,\n  month:    diffMonths,\n  quarter:  diffQuarters,\n  year:     diffYears,\n};\n\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\n{\n  const b = new Date(a.getTime());\n\n  mutator(b, options);\n\n  return b;\n}\n\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\n{\n  const starter = startOf[precision];\n  const x = mutate(a, starter, options);\n  const y = mutate(b, starter, options);\n\n  return x.getTime() - y.getTime();\n}\n\nexport type DateParserGroup = [number, number, number, number, number, number, number];\n\nexport const DateParsers: Array<{\n  pattern: RegExp;\n  groups: DateParserGroup;\n}> = [\n  { \n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [1, 2, 3, 5, 8, 10, 12 ],\n  },\n  { \n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \n    groups: [3, 1, 2, 5, 8, 10, 12 ],\n  }\n];\n\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\n{\n  if (isDate(value))\n  {\n    return value;\n  }\n\n  if (isNumber(value) && value > 0)\n  {\n    return new Date(value);\n  }\n\n  if (isString(value))\n  {\n    for (const parser of DateParsers)\n    {\n      const { pattern, groups } = parser;\n      const match = pattern.exec(value);\n\n      if (match) \n      {\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\n\n        for (let i = 0; i < times.length; i++) {\n          const x = parseInt(match[groups[i]]);\n          if (isFinite(x)) {\n            times[i] = i === 1 ? x - 1 : x;\n          }\n        }\n\n        return parseAsUTC\n          ? new Date(Date.UTC(...times))\n          : new Date(...times);\n      }\n    }\n\n    if (parseAsUTC)\n    {\n      const withUTC = value + ' UTC';\n      const parsedUTC = Date.parse(withUTC);\n\n      if (isFinite(parsedUTC))\n      {\n        return new Date(parsedUTC);\n      }\n    }\n\n    const parsed = Date.parse(value);\n\n    if (isFinite(parsed))\n    {\n      return new Date(parsed);\n    }\n  }\n\n  return null;\n}\n\nexport function getTimeIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100000000\n       + (x.getMonth() + 1) * 1000000\n       + x.getDate() * 10000\n       + x.getHours() * 100\n       + x.getMinutes();\n}\n\nexport function getDayIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10000\n       + (x.getMonth() + 1) * 100\n       + x.getDate();\n}\n\nexport function getWeekIdentifier(x: Date): number\n{\n  return x.getFullYear() * 1000\n       + getWeekOfYear(x);\n}\n\nexport function getMonthIdentifier(x: Date): number\n{\n  return x.getFullYear() * 100\n       + (x.getMonth() + 1);\n}\n\nexport function getQuarterIdentifier(x: Date): number\n{\n  return x.getFullYear() * 10\n       + getQuarter(x);\n}\n\nexport function getLastDayOfMonth(x: Date): number\n{\n  return getDaysInMonth(x) - x.getDate() + 1;\n}\n\nexport function getLastWeekspanOfYear(x: Date): number\n{\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\n}\n\nexport function getWeekspanOfYear(x: Date): number\n{\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\n}\n\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\n}\n\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const lastOfYear = mutate(x, endOfYear);\n  const week = getWeekOfYearISO(x, options);\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\n  const lastWeek = weekMax - week;\n\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \n    ? lastWeek + 1\n    : lastWeek;\n}\n\nexport function getWeekspanOfMonth(x: Date): number\n{\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\n}\n\nexport function getLastWeekspanOfMonth(x: Date): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const fromEnd = getDaysInMonth(x) - x.getDate();\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\n  \n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\n}\n\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\n{\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\n}\n\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const { firstWeekContainsDate } = options;\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\n{\n  const dayOfWeekFirst = getDayOfWeek(start, options);\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\n  const offset = hasWeekZero\n    ? dayOfWeekFirst - 1\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\n\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\n}\n\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\n{\n  const { weekStartsOn } = options;\n  const day = x.getDay();\n\n  return day < weekStartsOn \n    ? day - weekStartsOn + DAYS_IN_WEEK\n    : day - weekStartsOn;\n}\n\nexport function getDayOfYear(a: Date): number\n{\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\n}\n\nexport function getDateOffset(x: Date): number\n{\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\n}\n\nexport function isDaylightSavingTime(x: Date): boolean\n{\n  const offset = getDateOffset(x);\n\n  return (\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\n  );\n}\n\nexport function isLeapYear(x: Date): boolean\n{\n  const year = x.getFullYear();\n\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nexport function getDaysInYear(x: Date): number\n{\n  return isLeapYear(x) ? 366 : 365;\n}\n\nexport const daysInMonth = [\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n];\n\nexport function getDaysInMonth(x: Date): number\n{\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\n}\n\nexport function getAbsoluteTimestamp(a: Date): number\n{\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\n}\n\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\n{\n  const b = new Date(a.getTime());\n  const offsetMinutes = b.getTimezoneOffset();\n\n  b.setSeconds(0, 0);\n\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\n\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\n}\n\nexport function getQuarter(x: Date): number\n{\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\n}\n\nexport function startOfSecond(x: Date): void\n{\n  x.setMilliseconds(0);\n}\n\nexport function startOfMinute(x: Date): void\n{\n  x.setSeconds(0, 0);\n}\n\nexport function startOfHour(x: Date): void\n{\n  x.setMinutes(0, 0, 0);\n}\n\nexport function startOfDay(x: Date): void\n{\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() - dayOfWeek);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfMonth(x: Date): void\n{\n  x.setDate(DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function startOfYear(x: Date): void\n{\n  const year = x.getFullYear();\n\n  x.setTime(0);\n  x.setFullYear(year, 0, 1);\n  x.setHours(0, 0, 0, 0);\n}\n\nexport function endOfSecond(x: Date): void\n{\n  x.setMilliseconds(MILLIS_MAX);\n}\n\nexport function endOfMinute(x: Date): void\n{\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfHour(x: Date): void\n{\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfDay(x: Date): void\n{\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\n}\n\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\n{\n  const dayOfWeek = getDayOfWeek(x, options);\n\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\n  endOfDay(x);\n}\n\nexport function endOfMonth(x: Date): void\n{\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\n  endOfDay(x);\n}\n\nexport function endOfQuarter(x: Date): void\n{\n  const month = x.getMonth();\n\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\n  endOfDay(x);\n}\n\nexport function endOfYear(x: Date): void\n{\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\n  endOfDay(x);\n}\n\nexport function addMilliseconds(x: Date, amount: number): void\n{\n  x.setTime(x.getTime() + amount);\n}\n\nexport function addSeconds(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\n}\n\nexport function addMinutes(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\n}\n\nexport function addHours(x: Date, amount: number): void\n{\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\n}\n\nexport function addDays(x: Date, amount: number): void\n{\n  x.setDate(x.getDate() + amount);\n}\n\nexport function addWeeks(x: Date, amount: number): void\n{\n  addDays(x, amount * DAYS_IN_WEEK);\n}\n\nexport function addMonths(x: Date, amount: number): void\n{\n  const month = x.getMonth() + amount;\n\n  const y = new Date(0);\n  y.setFullYear(y.getFullYear(), month, 1);\n  y.setHours(0, 0, 0, 0);\n  const dayMax = getDaysInMonth(y);\n\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\n}\n\nexport function addQuarters(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_QUARTER);\n}\n\nexport function addYears(x: Date, amount: number): void\n{\n  addMonths(x, amount * MONTHS_IN_YEAR);\n}\n\nexport function diffMilliseconds(a: Date, b: Date): number\n{\n  return a.getTime() - b.getTime();\n}\n\nexport function diffSeconds(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\n}\n\nexport function diffMinutes(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\n}\n\nexport function diffHours(a: Date, b: Date): number\n{\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\n}\n\nexport function diffDays(a: Date, b: Date): number \n{\n  const leftTimestamp = getAbsoluteTimestamp(a);\n  const rightTimestamp = getAbsoluteTimestamp(b);\n\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\n}\n\nexport function diffWeeks(a: Date, b: Date): number\n{\n  return diffDays(a, b) / DAYS_IN_WEEK;\n}\n\nexport function diffMonths(a: Date, b: Date): number\n{\n  const years = a.getFullYear() - b.getFullYear();\n  const months = a.getMonth() - b.getMonth();\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\n\n  return years * MONTHS_IN_YEAR + months + date;\n}\n\nexport function diffQuarters(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\n}\n\nexport function diffYears(a: Date, b: Date): number\n{\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\n}\n","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\n\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\n\nconst ops = DateOperations;\n\nexport const DateOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  now: ops.set('now'),\n\n  today: ops.set('today'),\n\n  tomorrow: ops.set('today+'),\n\n  yesterday: ops.set('today-'),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\n\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\n\n  fromTimestamp: ops.set('>tms', {}, ['value']),\n\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\n\n  min: ops.set('min', {}, ['value', 'test']),\n\n  max: ops.set('max', {}, ['value', 'test']),\n\n  get: ops.set('get', {}, ['value', 'property']),\n\n  set: ops.set('set', {}, ['value', 'property', 'set']),\n\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\n\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\n\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\n\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\n\n  daysInMonth: ops.set('dim', {}, ['value']),\n\n  daysInYear: ops.set('diy', {}, ['value']),\n\n  weeksInYear: ops.set('wiy', {}, ['value']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\n\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\n\n  timezoneOffset: ops.set('offset', {}, ['value']),\n\n  // Formatters\n\n  toText: ops.set('toText', {}, ['value', 'format']),\n\n  toISOText: ops.set('toISOText', {}, ['value']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n \n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\n\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\n\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\n\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\n\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\n\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\n\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\n\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\n\n  isDST: ops.set('dst?', {}, ['value']),\n\n  isLeapYear: ops.set('leap?', {}, ['value']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\n\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\n\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\n\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\n\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\n\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\n\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\n\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\n\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\n\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\n\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\n\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\n\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\n\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\n\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\n\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\n\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\n\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\n\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\n\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\n\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\n\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\n\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\n\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\n\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\n\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\n\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\n\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\n\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\n\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\n\n\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\n\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\n\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\nDateComputeds.set('daysInYear', DateOps.daysInYear);\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\nDateComputeds.set('toISOText', DateOps.toISOText);\nDateComputeds.set('isDST', DateOps.isDST);\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\n","\nimport { isDate, isEmpty, isObject, isString } from '../fns';\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\nimport { Expression } from '../Expression';\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser } from '../Traverser';\nimport { Exprs } from '../Exprs';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_OPTIONS = 1;\n\nexport interface DateOptions \n{\n  parseAsUTC?: boolean;\n  validateMin?: Date;\n  validateMax?: Date;\n  forceMin?: Date;\n  forceMax?: Date;\n  forceStartOf?: Unit;\n  forceEndOf?: Unit;\n  withTime?: boolean;\n}\n\nexport class DateType extends Type<DateOptions> \n{\n\n  public static id = ID.Date;\n\n  public static operations = DateOperations;\n\n  public static computeds = DateComputeds;\n\n  public static baseType = new DateType({});\n\n  public static decode(data: any[], types: TypeProvider): DateType \n  {\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\n  }\n\n  public static encode(type: DateType): any \n  {\n    return isEmpty(type.options)\n      ? this.id\n      : [this.id, this.encodeOptions(type.options)];\n  }\n\n  private static decodeOptions(options: any): DateOptions\n  {\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\n\n    return options;\n  }\n\n  private static encodeOptions(options: DateOptions): any\n  {\n    const encoded: any = { ...options };\n\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\n\n    return encoded;\n  }\n\n  public static describePriority: number = 6;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isDate(data))\n    {\n      return null;\n    }\n\n    return new DateType({\n      validateMin: new Date(data.getTime()),\n      validateMax: new Date(data.getTime())\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 9;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n\n        if (at) {\n          return a.getTime() - b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b) => {\n        const at = isDate(a);\n        const bt = isDate(b);\n\n        if (at !== bt) return false;\n\n        if (at) {\n          return a.getTime() === b.getTime();\n        }\n      },\n    });\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\n          return new Date(json.value);\n        }\n      },\n      toJson: (json: Date) => {\n        if (isDate(json)) {\n          return { $any: 'date', value: json.toISOString() };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, _, setObjectCopy) => {\n        if (isDate(x)) {\n          const newDate = new Date(x.getTime());\n\n          setObjectCopy(x, newDate);\n  \n          return newDate;\n        }\n      },\n    });\n  }\n\n  public getId(): string\n  {\n    return DateType.id;\n  }\n\n  public getOperations()\n  {\n    return DateType.operations.map;\n  }\n\n  public merge(type: DateType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\n    \n    if (o1.validateMin && o2.validateMin)\n    {\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\n    }\n\n    if (o1.validateMax && o2.validateMax)\n    {\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\n    }\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \n  {\n    if (!(other instanceof DateType))\n    {\n      return false;\n    }\n\n    if (options.value)\n    {\n      if (other.options.withTime && !this.options.withTime)\n      {\n        return false;\n      }\n\n      const min = this.getMin();\n      const otherMin = other.getMin();\n\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\n      {\n        return false;\n      }\n\n      const max = this.getMax();\n      const otherMax = other.getMax();\n\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\n      {\n        return false;\n      }\n\n      const { forceStartOf, forceEndOf } = this.options;\n\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\n      {\n        return false;\n      }\n\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this);\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    const { parseAsUTC, withTime } = this.options;\n\n    this.options = { parseAsUTC, withTime };\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(DateOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(DateOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(DateOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    const { parseAsUTC, validateMin, validateMax } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return false;\n    }\n\n    if (validateMin && parsed.getTime() < validateMin.getTime())\n    {\n      return false;\n    }\n\n    if (validateMax && parsed.getTime() > validateMax.getTime())\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public normalize(value: any): any\n  {\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\n    const parsed = parse(value, parseAsUTC);\n\n    if (!parsed)\n    {\n      return value;\n    }\n\n    if (forceMin && parsed.getTime() < forceMin.getTime())\n    {\n      parsed.setTime(forceMin.getTime());\n    }\n    \n    if (forceMax && parsed.getTime() > forceMax.getTime())\n    {\n      parsed.setTime(forceMax.getTime());\n    }\n\n    if (forceStartOf)\n    {\n      startOf[forceStartOf](parsed);\n    }\n\n    if (forceEndOf)\n    {\n      endOf[forceEndOf](parsed);\n    }\n\n    return parsed;\n  }\n\n  public newInstance(): DateType\n  {\n    return new DateType({});\n  }\n\n  public clone(): DateType\n  {\n    return new DateType(DataTypes.copy(this.options));\n  }\n\n  public encode(): any \n  {\n    return DateType.encode(this);\n  }\n\n  public create(): any\n  {\n    return new Date();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const value = new Date();\n\n    const min = this.getMin();\n    const max = this.getMax();\n\n    const start = min ? min.getTime() : value.getTime();\n    const end = max ? max.getTime() : value.getTime();\n\n    return new Date(rnd(start, end, true));\n  }\n\n  public getMin(): Date | undefined\n  {\n    return this.options.validateMin || this.options.forceMin;\n  }\n\n  public getMax(): Date | undefined\n  {\n    return this.options.validateMax || this.options.forceMax;\n  }\n\n  public fromJson(json: string): Date\n  {\n    return new Date(json);\n  }\n\n  public toJson(value: Date): string\n  {\n    return value ? value.toISOString() : null;\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations, OperationGeneric } from '../Operation';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { isSameClass, isNumber } from '../fns';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_MANY = 1;\n\nexport class ManyType extends Type<Type[]>\n{\n\n  public static id = ID.Many;\n\n  public static operations = new Operations(ID.Many + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\n\n  public static baseType = new ManyType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): ManyType \n  {\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\n\n    return new ManyType(many);\n  }\n\n  public static encode(type: ManyType): any \n  {\n    const many = type.options.map(t => t.encode());\n\n    return [this.id, many];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public operations?: Record<string, OperationGeneric>;\n\n  public getOperations()\n  {\n    if (!this.operations)\n    {\n      this.operations = {};\n\n      this.options.forEach(many => \n      {\n        const ops = many.getOperations();\n        \n        for (const prop in ops) \n        {\n          this.operations[prop] = ops[prop];\n        }\n      });\n    }\n\n    return this.operations;\n  }\n\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const many = this.options;\n\n    for (const type of many)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return ManyType.id;\n  }\n\n  public merge(type: ManyType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    for (const sub of this.options)\n    {\n      const subType = sub.getSubType(expr, def, context);\n\n      if (subType)\n      {\n        return subType;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    const subs: TypeSub[] = [];\n\n    this.options.forEach(type => {\n      type.getSubTypes(def).forEach(sub => {\n        const matching = subs.find(existing => \n          existing.key === sub.key || (\n            existing.key instanceof Type && \n            sub.key instanceof Type && \n            isSameClass(existing.key, sub.key)\n          )\n        );\n\n        if (!matching) {\n          subs.push(sub);\n        }\n      });\n    });\n\n    subs.sort((a, b) => {\n      const ad = a.key instanceof Type ? 1 : 0;\n      const bd = b.key instanceof Type ? 1 : 0;\n\n      return ad - bd;\n    });\n\n    return subs;\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.options.length === 1\n      ? this.options[0]\n      : this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.isOptional()\n      ? new ManyType(this.options.map((o) => o.getRequired()))\n      : this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\n  }\n\n  public isSimple(): boolean\n  {\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options[0].getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      ...this.options.map((t) => t.getValidateExpression())\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(AnyOps.cmp, {\n      value: Exprs.get('value'), \n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = sub type index\n    const hasFrom = isNumber(from);\n    const hasTo = isNumber(to);\n\n    if (hasFrom && !hasTo) // removed\n    {\n      const targetType = from === 0 ? this.options[1] : this.options[0];\n      const valueType = this.options[from];\n      const casting = Exprs.cast(valueType, targetType);\n\n      return Exprs\n        .if(targetType.getValidateExpression())\n        .than(Exprs.get('value'))\n        .else(casting)\n      ;\n    }\n    else if (!hasFrom && hasTo) // added\n    {\n      return newValue;\n    }\n    else if (to === from && hasFrom) // change\n    {\n      return Exprs\n        .if(Exprs.not(this.getValidateExpression()))\n        .than(newValue)\n        .else(Exprs.get('value'))\n      ;\n    }\n\n    return newValue;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\n  }\n\n  public newInstance(): ManyType\n  {\n    return new ManyType([]);\n  }\n\n  public clone(): ManyType\n  {\n    return new ManyType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return ManyType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options.length > 0\n      ? this.options[0].create()\n      : null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const options = this.options;\n    const chosen = rnd(0, options.length, true);\n\n    return options[chosen].random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      const parsed = many.normalize(json);\n\n      if (parsed !== null && parsed !== undefined)\n      {\n        return parsed;\n      }\n    }\n\n    return json;\n  }\n\n  public toJson(value: any): any\n  {\n    const options = this.options;\n\n    for (const many of options)\n    {\n      if (many.isValid(value))\n      {\n        return many.toJson(value);\n      }\n    }\n\n    return value;\n  }\n\n}\n","\nimport { isObject, isMap, isSameClass, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { TextType } from './Text';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_KEY = 2;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface MapOptions \n{\n  key: Type;\n  value: Type;\n}\n\nexport class MapType extends Type<MapOptions> \n{\n\n  public static STEP_KEY = 'key';\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Map;\n\n  public static operations = MapOperations;\n\n  public static computeds = MapComputeds;\n\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): MapType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\n\n    return new MapType({ key, value });\n  }\n\n  public static encode(type: MapType): any \n  {\n    const { key, value } = type.options;\n\n    return key !== TextType.baseType\n      ? [this.id, value.encode()]\n      : [this.id, value.encode(), key.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isMap(data))\n    {\n      return null;\n    }\n\n    let key: Type = new AnyType({});\n    let value: Type = new AnyType({});\n\n    const type = new MapType({ key, value });\n\n    cache.set(data, type);\n\n    for (const [entryKey, entryValue] of data.entries())\n    {\n      key = describer.merge(key, entryKey);\n      value = describer.merge(value, entryValue);\n    }\n\n    type.options.key = key;\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 10;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isMap(json)) {\n          return {\n            $any: 'map',\n            value: Array.from(json.entries())\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isMap(x)) {\n          const newMap = new Map();\n\n          setObjectCopy(x, newMap);\n  \n          for (const [key, value] of x.entries()) {\n            newMap.set(copy(key), copy(value));\n          }\n  \n          return newMap;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isMap(a) && isMap(b)) {\n          let less = 0;\n          let more = 0;\n\n          for (const key of a.keys()) {\n            if (!b.has(key)) {\n              less++;\n            }\n          }\n\n          for (const key of b.keys()) {\n            if (!a.has(key)) {\n              more++;\n            } else {\n              const c = compare(a.get(key), b.get(key));\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n          }\n\n          return DataTypes.getCompare(less, more);\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const at = isMap(a);\n        const bt = isMap(b);\n\n        if (at !== bt) return false;\n        \n        if (isMap(a) && isMap(b)) {\n          if (a.size !== b.size) {\n            return false;\n          }\n\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key)) {\n              return false;\n            } else if (!equals(value, b.get(key))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n\n    DataTypes.addAccessor<Map<any, any>>({\n      priority,\n      isValid: (value) => isMap(value),\n      get: (value, step) => value.get(step),\n      set: (value, step, stepValue) => value.set(step, stepValue),\n      remove: (value, step) => value.delete(step),\n      has: (value, step) => value.has(step),\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\n  {\n    const value = Types.parse(valueOrClass);\n    const key = Types.parse(keyOrClass);\n    \n    return new MapType({ key, value });\n  }\n\n  public getId(): string\n  {\n    return MapType.id;\n  }\n\n  public getOperations()\n  {\n    return MapType.operations.map;\n  }\n\n  public merge(type: MapType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.key = Types.merge(o1.key, o2.key);\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    if (ConstantExpression.is(expr))\n    {\n      if (this.options.key.isValid(expr.value))\n      {\n        return this.options.value;\n      }\n    }\n\n    let exprType = expr.getType(def, context);\n\n    if (exprType)\n    {\n      exprType = exprType.getRequired();\n\n      if (isSameClass(exprType, this.options.key))\n      {\n        return this.options.value;\n      }\n    }\n\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [\n      { key: this.options.key, value: this.options.value },\n    ];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof MapType && \n      this.options.key.isCompatible(other.options.key, options) && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === MapType.STEP_KEY\n      ? this.options.key\n      : step === MapType.STEP_VALUE\n        ? this.options.value\n        : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.key.setParent(this);\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.key.removeDescribedRestrictions();\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(MapOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(MapOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(MapOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n      compare: this.options.value.getValidateExpression(),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = key or value\n    if (from === MapType.STEP_KEY) \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transformKey: newValue,\n      }, {\n        key: 'value',\n        value: 'actualValue',\n      });\n    } \n    else \n    {\n      return Exprs.op(MapOps.map, {\n        map: Exprs.get('value'),\n        transform: newValue,\n      });\n    }\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Map || isObject(test))\n    {\n      const { key, value } = this.options;\n\n      return this.iterate(test, true, (k, v) => {\n        if (!key.isValid(k) || !value.isValid(v)) {\n          return false;\n        }\n      });\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { key, value } = this.options;\n    const entries: [any, any][] = [];\n\n    this.iterate(test, undefined, (k, v) => {\n      entries.push([\n        key.normalize(k),\n        value.normalize(v)\n      ]);\n    });\n\n    return new Map(entries);\n  }\n\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\n  {\n    if (map instanceof Map)\n    {\n      for (const [key, value] of map.entries())\n      {\n        const result = onItem(key, value);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    else if (isObject(map))\n    {\n      for (const prop in map)\n      {\n        const result = onItem(prop, map[prop]);\n\n        if (result !== undefined)\n        {\n          return result;\n        }\n      }\n    }\n    \n    return otherwise;\n  }\n\n  public newInstance(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.newInstance(),\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): MapType\n  {\n    const { key, value } = this.options;\n\n    return new MapType({\n      key: key.clone(),\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return MapType.encode(this);\n  }\n\n  public create(): Map<any, any>\n  {\n    return new Map();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { key, value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Map<any, any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const k = key.random(rnd);\n      const v = value.random(rnd);\n\n      out.set(k, v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<[any, any]>): Map<any, any>\n  {\n    const { key, value } = this.options;\n\n    return new Map(json.map(([k, v]) => [\n      key.fromJson(k),\n      value.fromJson(v)\n    ]));\n  }\n\n  public toJson(map: Map<any, any>): Array<[any, any]>\n  {\n    const { key, value } = this.options;\n\n    return Array.from(map.entries()).map(([k, v]) => [\n      key.toJson(k),\n      value.toJson(v)\n    ]);\n  }\n\n}","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { AnyOps } from '../ops/AnyOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Computeds } from '../Computed';\nimport { Types } from '../Types';\nimport { AnyType } from './Any';\n\n\nconst INDEX_TYPE = 1;\nconst RANDOM_CHANCE = 0.3;\n\nexport class OptionalType extends Type<Type>\n{\n\n  public static STEP_OPTIONAL = 'optional';\n\n  public static id = ID.Optional;\n\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\n\n  public static baseType = new OptionalType(AnyType.baseType);\n\n  public static decode(data: any[], types: TypeProvider): OptionalType \n  {\n    const type = types.getType(data[INDEX_TYPE]);\n\n    return new OptionalType( type );\n  }\n\n  public static encode(type: OptionalType): any \n  {\n    return [this.id, type.options.encode()];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static for(type: TypeInput): OptionalType\n  {\n    return new OptionalType(Types.parse(type));\n  }\n\n  public getOperations()\n  {\n    return this.options.getOperations();\n  }\n\n  public getId(): string\n  {\n    return OptionalType.id;\n  }\n\n  public merge(type: OptionalType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.options.getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.options.getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.options.getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  public getRequired(): Type\n  {\n    return this.options;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof OptionalType\n      ? this.options.isCompatible(other.options, options)\n      : this.options.isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return this.options.isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === OptionalType.STEP_OPTIONAL\n      ? this.options\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.options.getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.or(\n      Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'),\n        test: Exprs.undefined(),\n      }),\n      this.options.getValidateExpression(),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.define({\n      valueMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('value'), \n        test: Exprs.undefined(),\n      }),\n      testMissing: Exprs.op(AnyOps.isEqual, {\n        value: Exprs.get('test'), \n        test: Exprs.undefined(),\n      }),\n    }, Exprs\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\n      .than(Exprs.compareEqual())\n      .if(Exprs.get('valueMissing'))\n      .than(Exprs.compareLess())\n      .if(Exprs.get('testMissing'))\n      .than(Exprs.compareGreater())\n      .else(this.options.getCompareExpression()),\n    );\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = optional\n    return Exprs\n      .if(this.options.getValidateExpression())\n      .than(newValue)\n      .else(Exprs.get('value'))\n    ;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return value === null \n      || value === undefined\n      || this.options.isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return value === null || value === undefined\n      ? value\n      : this.options.normalize(value);\n  }\n\n  public newInstance(): OptionalType\n  {\n    return new OptionalType(this.options.newInstance());\n  }\n\n  public clone(): OptionalType\n  {\n    return new OptionalType(this.options.clone());\n  }\n\n  public encode(): any \n  {\n    return OptionalType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.options ? this.options.create() : undefined;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\n      ? this.options.random(rnd)\n      : undefined;\n  }\n\n  public fromJson(json: any): any\n  {\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Operations } from '../Operation';\nimport { AnyType } from './Any';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NoExpression } from '../exprs/No';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NOT = 1;\n\nexport class NotType extends Type<Type[]>\n{\n\n  public static id = ID.Not;\n\n  public static operations = new Operations(ID.Not + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\n\n  public static baseType = new NotType([AnyType.baseType]);\n\n  public static decode(data: any[], types: TypeProvider): NotType \n  {\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\n\n    return new NotType(not);\n  }\n\n  public static encode(type: NotType): any \n  {\n    const not = type.options.map(t => t.encode());\n\n    return [this.id, not];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public getOperations()\n  { \n    return {};\n  }\n\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\n  {\n    const not = this.options;\n\n    for (const type of not)\n    {\n      const result = handler(type);\n\n      if (result !== undefined)\n      {\n        return result;\n      } \n    }\n\n    return otherwise;\n  }\n\n  public getId(): string\n  {\n    return NotType.id;\n  }\n\n  public merge(type: NotType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n\n  public isOptional(): boolean\n  {\n    return true;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () =>\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return this.options[step] || null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.forEach(t => t.setParent(this));\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.forEach(t => t.removeDescribedRestrictions());\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return NoExpression.instance;\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\n  }\n\n  public newInstance(): NotType\n  {\n    return new NotType([]);\n  }\n\n  public clone(): NotType\n  {\n    return new NotType(this.options.map(e => e.clone()));\n  }\n\n  public encode(): any \n  {\n    return NotType.encode(this);\n  }\n\n  public create(): any\n  {\n    return null;\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return null;\n  }\n\n  public fromJson(json: any): any\n  {\n    return AnyType.baseType.fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return AnyType.baseType.toJson(value);\n  }\n\n}\n","\nimport { ID } from '../types/ID';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\n\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\n\nconst ops = ColorOperations;\n\n\nexport const ColorOps = \n{\n\n  // Static\n\n  create: ops.set('create', {}),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  cmp: ops.set('cmp', {}, ['value', 'test']),\n\n  copy: ops.set('copy', {}, ['value']),\n\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\n\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\n\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\n\n  clamp: ops.set('clamp', {}, ['value']),\n\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\n\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\n\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\n\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\n\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\n\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\n\n  format: ops.set('format', {}, ['value', 'format']),\n\n  parse: ops.set('parse', {}, ['value']),\n\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\n\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\n\n  darken: ops.set('darken', {}, ['value', 'amount']),\n\n  toHSL: ops.set('->hsl', {}, ['value']),\n\n  fromHSL: ops.set('<-hsl', {}, ['value']),\n\n  luminance: ops.set('luminance', {}, ['value']),\n\n  contrast: ops.set('contrast', {}, ['value', 'test']),\n\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\n\n  opaque: ops.set('opaque', {}, ['value']),\n\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\n\n  distance: ops.set('distance', {}, ['value', 'test']),\n\n  named: ops.set('named', {}, ['name']),\n\n  getName: ops.set('getName', {}, ['value']),\n\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\n\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\n\n  isLess: ops.set('<', {}, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\n\n  isGreater: ops.set('>', {}, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\n\n  // Casts\n\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nColorComputeds.set('toHSL', ColorOps.toHSL);\nColorComputeds.set('luminance', ColorOps.luminance);\nColorComputeds.set('inverted', ColorOps.invert);\nColorComputeds.set('opaque', ColorOps.opaque);\nColorComputeds.set('name', ColorOps.getName);","\nimport { isObject, isNumber, clamp } from '../../fns';\n\n\nexport const COMPONENT_MIN = 0;\nexport const COMPONENT_MAX = 255;\n\nexport interface Color\n{\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport function isColor(x: any): x is Color\n{\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\n}\n\nexport function clampComponent(x: number): number\n{\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\n}","\nimport { Color } from './Color';\nimport { Type } from '../../Type';\n\n\n\nexport type ColorSpaceToColor<T> = (color: T) => Color;\n\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\n\nexport type ColorFormatParser<T> = (value: any) => T | null;\n\nexport type ColorFormatFormatter<T> = (color: T) => any;\n\n\nexport interface ColorFormat<T>\n{\n  code: string;\n  name: string;\n  parser: ColorFormatParser<T>;\n  formatter: ColorFormatFormatter<T>;\n}\n\n\nexport class ColorSpace<T>\n{\n  public code: string;\n  public name: string;\n  public type: Type;\n  public toColor: ColorSpaceToColor<T>;\n  public fromColor: ColorSpaceFromColor<T>;\n  public formatMap: Record<string, ColorFormat<T>>;\n  public formats: ColorFormat<T>[];\n\n  public constructor(code: string, name: string)\n  {\n    this.code = code;\n    this.name = name;\n    this.formatMap = {};\n    this.formats = [];\n  }\n\n  public setType(type: Type): this\n  {\n    this.type = type;\n\n    return this;\n  }\n\n  public setToColor(toColor: ColorSpaceToColor<T>): this\n  {\n    this.toColor = toColor;\n\n    return this;\n  }\n\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\n  {\n    this.fromColor = fromColor;\n\n    return this;\n  }\n\n  public addFormat(format: ColorFormat<T>): this\n  {\n    this.formatMap[format.code] = format;\n    this.formats.push(format);\n\n    return this;\n  }\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\nimport { isString, pad } from '../../fns';\n\n\n// tslint:disable: no-magic-numbers\n\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\n  .setToColor((color) => color)\n  .setFromColor((color) => color)\n  .addFormat({\n    code: 'default',\n    name: 'Default',\n    parser: (data) => {\n      if (!isColor(data)) {\n        return null;\n      }\n\n      return data;\n    },\n    formatter: (color) => {\n      return color;\n    },\n  })\n  .addFormat({\n    code: 'bestfit',\n    name: 'Best Fit',\n    parser: (data) => {\n      return null;\n    },\n    formatter: (color) => {\n      if (color.a === COMPONENT_MAX) {\n        const r = formatHex(color.r);\n        const g = formatHex(color.g);\n        const b = formatHex(color.b);\n\n        return '#' + r + g + b;\n      } else {\n        const r = clampComponent(color.r);\n        const g = clampComponent(color.g);\n        const b = clampComponent(color.b);\n        const a = clampComponent(color.a) / COMPONENT_MAX;\n\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n      }\n    },\n  })\n  .addFormat({\n    code: 'hexShort',\n    name: 'Hex (#rgb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r + r, 16),\n        g: parseInt(g + g, 16),\n        b: parseInt(b + b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r).substring(0, 1);\n      const g = formatHex(color.g).substring(0, 1);\n      const b = formatHex(color.b).substring(0, 1);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hex',\n    name: 'Hex (#rrggbb)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n\n      return '#' + r + g + b;\n    },\n  })\n  .addFormat({\n    code: 'hexLong',\n    name: 'Hex (#rrggbbaa)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n    \n      return {\n        r: parseInt(r, 16),\n        g: parseInt(g, 16),\n        b: parseInt(b, 16),\n        a: parseInt(a, 16),\n      };\n    },\n    formatter: (color) => {\n      const r = formatHex(color.r);\n      const g = formatHex(color.g);\n      const b = formatHex(color.b);\n      const a = formatHex(color.a);\n\n      return '#' + r + g + b + a;\n    },\n  })\n  .addFormat({\n    code: 'rgb',\n    name: 'rgb(r, g, b)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    },\n  })\n  .addFormat({\n    code: 'rgba',\n    name: 'rgba(r, g, b, a)',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, r, g, b, a] = matches;\n\n      return {\n        r: parseComponent(r),\n        g: parseComponent(g),\n        b: parseComponent(b),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const r = clampComponent(color.r);\n      const g = clampComponent(color.g);\n      const b = clampComponent(color.b);\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n    },\n  })\n;\n\nfunction parseComponent(x: string): number\n{\n  return x.indexOf('%') === -1\n    ? clampComponent(parseInt(x, 10))\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\n}\n\nfunction formatHex(x: number)\n{\n  return pad(clampComponent(x).toString(16), 2, '0', true);\n}","\nimport { ColorSpace } from './ColorSpace';\nimport { COMPONENT_MAX, clampComponent } from './Color';\nimport { isString, clamp, isObject, isNumber } from '../../fns';\nimport { NumberType } from '../../types/Number';\nimport { ObjectType } from '../../types/Object';\n\n\n// tslint:disable: no-magic-numbers\n\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\n\n\nexport function isColorHSL(x: any): x is ColorHSL\n{\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\n}\n\n\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\n  .setType(new ObjectType({props: {\n    h: new NumberType({ min: 0, max: 360, whole: true }),\n    s: new NumberType({ min: 0, max: 100, whole: true }),\n    l: new NumberType({ min: 0, max: 100, whole: true }),\n    a: new NumberType({ min: 0, max: 255, whole: true }),\n  }}))\n  .setToColor((color) => {\n    const H = normalizeHue(color.h);\n    const L = clampPercent(color.l) / 100;\n    const S = clampPercent(color.s) / 100;\n    const C = (1 - Math.abs(2 * L - 1)) * S;\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\n    const m = L - C / 2;\n    const r1 = H < 60 || H >= 300\n      ? C\n      : H >= 120 && H < 240\n        ? 0\n        : X;\n    const g1 = H >= 240\n      ? 0\n      : H >= 60 && H < 180\n        ? C\n        : X;\n    const b1 = H <= 120\n      ? 0\n      : H >= 180 && H < 300\n        ? C\n        : X;\n\n    return {\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\n      a: color.a\n    };\n  })\n  .setFromColor((color) => {\n    const R = clampComponent(color.r);\n    const G = clampComponent(color.g);\n    const B = clampComponent(color.b);\n    const r1 = R / COMPONENT_MAX;\n    const g1 = G / COMPONENT_MAX;\n    const b1 = B / COMPONENT_MAX;\n    const Cmax = Math.max(r1, g1, b1);\n    const Cmin = Math.min(r1, g1, b1);\n    const delta = Cmax - Cmin;\n    const L = (Cmax + Cmin) / 2;\n    const h = delta === 0\n      ? 0\n      : Cmax === r1\n        ? ((g1 - b1) / delta) % 6\n        : Cmax === g1\n          ? ((b1 - r1) / delta) + 2\n          : ((r1 - g1) / delta) + 4;\n    const s = delta === 0\n      ? 0\n      : delta / (1 - Math.abs(2 * L - 1));\n\n    return {\n      h: normalizeHue(Math.round(h * 60)),\n      s: clampPercent(Math.round(s * 100)),\n      l: clampPercent(Math.round(L * 100)),\n      a: color.a,\n    };\n  })\n  .addFormat({\n    code: 'hsl',\n    name: 'HSL',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: COMPONENT_MAX,\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\n    },\n  })\n  .addFormat({\n    code: 'hsla',\n    name: 'HSLA',\n    parser: (data) => {\n      if (!isString(data)) {\n        return null;\n      }\n    \n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\n      if (!matches) {\n        return null;\n      }\n    \n      const [, h, s, l, a] = matches;\n    \n      return {\n        h: normalizeHue(parseInt(h, 10)),\n        s: clampPercent(parseInt(s, 10)),\n        l: clampPercent(parseInt(l, 10)),\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\n      };\n    },\n    formatter: (color) => {\n      const h = normalizeHue(Math.round(color.h));\n      const s = clampPercent(Math.round(color.s));\n      const l = clampPercent(Math.round(color.l));\n      const a = clampComponent(color.a) / COMPONENT_MAX;\n\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\n    },\n  })\n;\n\nfunction normalizeHue(h: number): number\n{\n  return h < 0 \n    ? 360 - Math.abs(h % 360)\n    : h % 360;\n}\n\nfunction clampPercent(x: number)\n{\n  return clamp(x, 0, 100);\n}","\nimport { Type, TypeCompatibleOptions, TypeDescribeProvider } from '../Type';\nimport { Expression } from '../Expression';\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\nimport { ID } from './ID';\nimport { NumberType } from './Number';\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\nimport { ObjectType, ObjectOptions } from './Object';\nimport { Exprs } from '../Exprs';\n\n\nconst INDEX_OPTIONS = 1;\n\n\nexport interface ColorOptions extends ObjectOptions\n{\n  hasAlpha?: boolean;\n}\n\n\nexport class ColorType extends ObjectType<ColorOptions>\n{\n\n  public static readonly componentType = new NumberType({ \n    min: COMPONENT_MIN, \n    max: COMPONENT_MAX, \n    whole: true \n  });\n\n  public static readonly componentProps = {\n    r: ColorType.componentType,\n    g: ColorType.componentType,\n    b: ColorType.componentType,\n    a: ColorType.componentType,\n  };\n\n  public static spaces: ColorSpace<any>[] = [\n    ColorSpaceRGB,\n    ColorSpaceHSL,\n  ];\n\n  public static id = ID.Color;\n\n  public static operations = ColorOperations;\n\n  public static computeds = ColorComputeds;\n\n  public static baseType = new ColorType({ hasAlpha: true });\n\n  public static decode(data: any[]): ColorType \n  {\n    return new ColorType(data[INDEX_OPTIONS] || {});\n  }\n\n  public static encode(type: ColorType): any \n  {\n    return type.options.hasAlpha\n      ? [this.id, { hasAlpha: true }]\n      : this.id;\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    const parsed = ColorType.baseType.normalize(data);\n\n    if (!parsed)\n    {\n      return null;\n    }\n\n    return new ColorType({\n      hasAlpha: parsed.a !== COMPONENT_MAX,\n    });\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  public static getFormat(id: string): ColorFormat<any> | undefined\n  {\n    const [spaceId, formatId] = id.split(':');\n    const space = this.spaces.find((s) => s.code === spaceId);\n\n    return space\n      ? space.formatMap[formatId]\n      : undefined;\n  }\n\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\n  {\n    super({\n      ...colorOptions,\n      props: ColorType.componentProps,\n    });\n  }\n\n  public getId(): string\n  {\n    return ColorType.id;\n  }\n\n  public getOperations()\n  {\n    return ColorType.operations.map;\n  }\n\n  public merge(type: ColorType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    if (other instanceof ColorType)\n    {\n      return true;\n    }\n\n    if (!options.strict && \n        !options.exact &&\n        other instanceof ObjectType &&\n        other.isCompatible(this)) \n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return true;\n  }\n  \n  public removeDescribedRestrictions(): void\n  {\n    super.removeDescribedRestrictions();\n\n    delete this.options.hasAlpha;\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.op(ColorOps.isValid, {\n      value: Exprs.get('value'),\n    });\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(ColorOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public isValid(value: any): boolean \n  {\n    return this.normalize(value) !== undefined;\n  }\n\n  public normalize(value: any): any\n  {\n    for (const space of ColorType.spaces)\n    {\n      for (const formats of space.formats)\n      {\n        const parsed = formats.parser(value);\n\n        if (parsed !== null)\n        {\n          return space.toColor(parsed);\n        }\n      }\n    }\n  }\n\n  public newInstance(): ColorType\n  {\n    return new ColorType({});\n  }\n\n  public clone(): ColorType\n  {\n    return new ColorType({\n      hasAlpha: this.options.hasAlpha,\n    });\n  }\n\n  public encode(): any \n  {\n    return ColorType.encode(this);\n  }\n\n  public create(): Color\n  {\n    return { r: 0, g: 0, b: 0, a: 0 };\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\n  {\n    return {\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\n      a: COMPONENT_MAX,\n    };\n  }\n\n  public fromJson(json: Color): Color\n  {\n    return {\n      r: json.r,\n      g: json.g,\n      b: json.b,\n      a: json.a,\n    };\n  }\n\n  public toJson(value: Color): Color\n  {\n    return value ? {\n      r: value.r,\n      g: value.g,\n      b: value.b,\n      a: value.a,\n    } : null;\n  }\n\n}\n\n/**\n * Set RGB color space type.\n */\nColorSpaceRGB.setType(ColorType.baseType);","\nimport { Operations } from '../Operation';\nimport { ID } from '../types/ID';\nimport { Computeds } from '../Computed';\n\n\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\n\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\n\nconst ops = SetOperations;\n\nexport const SetOps = \n{\n\n  // Static\n\n  create: ops.set('create'),\n\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\n  \n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\n\n  // Operations\n\n  maybe: ops.set('maybe', {}, ['value']),\n\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\n\n  has: ops.set('has', {}, ['set', 'value']),\n\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\n\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\n\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\n\n  count: ops.set('count', { }, ['set']),\n\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\n\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\n\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\n\n  // Comparisons\n\n  isValid: ops.set('?', {}, ['value']),\n\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\n\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\n\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\n\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\n\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\n\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\n\n  // Casts\n  \n  asAny: ops.set('~' + ID.Any, {}, ['value']),\n\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\n\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\n\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\n\n  asList: ops.set('~' + ID.List, {}, ['value']),\n\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\n\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\n\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\n\n  asText: ops.set('~' + ID.Text, {}, ['value']),\n\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\n\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\n\n};\n\nSetComputeds.set('copy', SetOps.copy);\nSetComputeds.set('values', SetOps.values);\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { FuncOptions, Func } from './Func';\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\nimport { Type, TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Exprs } from './Exprs';\nimport { Runtime } from './Runtime';\nimport { EnumType } from './types/Enum';\nimport { Relation } from './Relation';\nimport { ListOps } from './ops/ListOps';\nimport { AnyOps } from './ops/AnyOps';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface EntityOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  type: any;\n  instances: any[];\n  primaryType?: EntityPrimaryType,\n  key?: any;\n  describe?: any;\n  transcoders?: Record<string, EntityTranscoderOptions>;\n  indexes?: Record<string, EntityIndexOptions>;\n  methods?: Record<string, Func | FuncOptions>;\n}\n\nexport interface EntityIndex\n{\n  name: string;\n  props: string[];\n  types?: Type[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityIndexOptions\n{\n  props: string[];\n  unique?: boolean;\n  primary?: boolean;\n}\n\nexport interface EntityTranscoder\n{\n  encode: Expression;\n  decode: Expression;\n  encodedType: Type;\n}\n\nexport interface EntityTranscoderOptions\n{\n  encode: any;\n  decode: any;\n  encodedType: any;\n}\n\nexport type EntityPropPair = [string, Type];\n\nexport interface EntityProps\n{\n  type: EntityKeyType;\n  props: EntityPropPair[];\n  relation?: Relation;\n}\n\nexport enum EntityKeyType\n{\n  PRIMARY,\n  FOREIGN,\n  NONE\n}\n\nexport enum EntityPrimaryType\n{\n  GIVEN,\n  AUTO_INCREMENT,\n  UUID\n}\n\nexport interface EntityEvents\n{\n  change(entity: Entity): void;\n  renamed(entity: Entity, oldName: string): void;\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\n  removeProp(entity: Entity, prop: string): void;\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\n  addIndex(entity: Entity, index: EntityIndex): void;\n  removeIndex(entity: Entity, index: EntityIndex): void;\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\n  addMethod(entity: Entity, method: Func): void;\n  removeMethod(entity: Entity, method: Func): void;\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\n}\n\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\n    return new Entity({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      type: Types.object(),\n      instances: [],\n      methods: Object.create(null),\n      ...defaults,\n    }, defs);\n  }\n\n  public static uuid(): string {\n    // tslint:disable: no-magic-numbers no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n\n      return v.toString(16);\n    });\n    // tslint:enable: no-magic-numbers no-bitwise\n  }\n\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\n    [EntityPrimaryType.GIVEN]: null,\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\n  };\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public type: ObjectType;\n  public instances: any[];\n  public methods: Record<string, Func>;\n  public key: Expression;\n  public keyType: Type;\n  public describe: Expression;\n  public transcoders: Record<string, EntityTranscoder>;\n  public indexes: Record<string, EntityIndex>;\n  public primaryType: EntityPrimaryType;\n\n  public constructor(options: EntityOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n    this.instances = options.instances && options.instances.length\n      ? options.instances.map((i) => this.type.fromJson(i))\n      : [];\n    this.methods = this.decodeMethods(defs, options.methods);\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\n    this.indexes = this.decodeIndexes(options.indexes);\n    this.primaryType = isNumber(options.primaryType)\n        ? options.primaryType\n        : EntityPrimaryType.AUTO_INCREMENT;\n    this.key = options.key \n      ? defs.getExpression(options.key)\n      : this.getPrimaryKeyExpression();\n    this.keyType = this.key.getType(defs, this.getKeyContext());\n    this.describe = options.describe\n      ? defs.getExpression(options.describe)\n      : Exprs.noop();\n  }\n\n  public sync(options: EntityOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\n\n      this.instances = options instanceof Entity\n        ? options.instances\n        : options.instances && options.instances.length\n          ? options.instances.map((i) => this.type.fromJson(i))\n          : [];\n\n      objectSync(\n        this.methods, \n        this.decodeMethods(defs, options.methods),\n        (target, prop, method) => this.addMethod(method, true),\n        (target, prop) => this.removeMethod(prop, true),\n        (target, prop, existing, updated) => existing.sync(updated, defs),\n      ),\n      \n      objectSync(\n        this.transcoders,\n        this.decodeTranscoders(defs, options.transcoders),\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\n        (target, prop) => this.removeTranscoder(prop, true),\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\n      );\n\n      objectSync(\n        this.indexes,\n        this.decodeIndexes(options.indexes),\n        (target, name, index) => this.addIndex(name, index, true),\n        (target, name) => this.removeIndex(name, true),\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\n      );\n\n      this.primaryType = isNumber(options.primaryType)\n          ? options.primaryType\n          : EntityPrimaryType.AUTO_INCREMENT;\n      this.key = options.key \n        ? defs.getExpression(options.key)\n        : this.getPrimaryKeyExpression();\n      this.keyType = this.key.getType(defs, this.getKeyContext());\n      this.describe = options.describe\n        ? defs.getExpression(options.describe)\n        : Exprs.noop();\n\n      this.trigger('sync', this, options, defs);\n      this.trigger('change', this);\n    }\n  }\n\n  public hasChanges(options: EntityOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('change', this);\n  }\n\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\n  {\n    return methods\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\n      : {};\n  }\n\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\n  {\n    return method instanceof Func\n      ? method\n      : Func.create(defs, method);\n  }\n\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\n  {\n    return transcoders\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\n      : {};\n  }\n\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\n  {\n    return options.encode instanceof Expression\n      ? options\n      : {\n          encode: defs.getExpression(options.encode),\n          decode: defs.getExpression(options.decode),\n          encodedType: defs.getType(options.encodedType),\n        };\n  }\n\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\n  {\n    return indexes\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\n          name,\n          props,\n          unique,\n          primary,\n        }))\n      : {};\n  }\n\n  public encode(): EntityOptions \n  {\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\n\n    return {\n      name,\n      created, \n      updated,\n      description,\n      meta,\n      type: type.encode(),\n      instances: instances.map((i) => type.toJson(i)),\n      methods: objectMap(methods, (m) => m.encode()),\n      key: key.encode(),\n      describe: describe.encode(),\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\n        encode: encode.encode(),\n        decode: decode.encode(),\n        encodedType: encodedType.encode(),\n      })),\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\n        props,\n        unique,\n        primary,\n      })),\n    };\n  }\n\n  public canStore(defs: Definitions): boolean\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\n      {\n        return false;\n      }\n    }\n\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\n\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\n    {\n      return false;\n    }\n\n    return true;\n  }\n\n  public updateKeyType(defs: Definitions)\n  {\n    const keyType = this.key.getType(defs, this.getKeyContext());\n\n    if (keyType)\n    {\n      this.keyType = keyType;\n    }\n  }\n\n  public renameProp(prop: string, newProp: string)\n  {\n    let changed = false;\n    const transcoder = this.transcoders[prop];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, prop);\n      DataTypes.objectSet(this.transcoders, newProp, transcoder);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props[i] = newProp;\n\n        this.updateIndex(index.name, true);\n        changed = true;\n      }\n    });\n\n    this.trigger('renameProp', this, newProp, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public removeProp(prop: string)\n  {\n    let changed = false;\n\n    if (prop in this.transcoders)\n    {\n      this.removeTranscoder(prop, true);\n\n      changed = true;\n    }\n\n    objectEach(this.indexes, (index, indexName) =>\n    {\n      const i = index.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        index.props.splice(i, 1);\n        changed = true;\n\n        if (index.props.length === 0)\n        {\n          this.removeIndex(indexName, true);\n        }\n        else\n        {\n          this.updateIndex(indexName, true);\n        }\n      }\n    });\n\n    this.trigger('removeProp', this, prop);\n\n    if (changed)\n    {\n      this.changed();\n    }\n  }\n\n  public getEntityProps(): EntityProps\n  {\n    const primary = this.getPrimary();\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\n      prop,\n      primary.types && primary.types[i]\n        ? primary.types[i]\n        : this.type.options.props[prop]\n    ]);\n\n    return {\n      type: EntityKeyType.PRIMARY,\n      props,\n    };\n  }\n\n  public getKey(run: Runtime, instance: any): any\n  {\n    const { type, key } = this;\n\n    return run.run(key, { instance, type });\n  }\n\n  public setKey(instance: any)\n  {\n    if (this.primaryType === EntityPrimaryType.GIVEN)\n    {\n      return;\n    }\n\n    const prop = this.getDynamicPrimaryKey();\n\n    if (instance[prop])\n    {\n      return;\n    }\n\n    switch (this.primaryType)\n    {\n      case EntityPrimaryType.AUTO_INCREMENT:\n        DataTypes.objectSet(instance, prop, this.instances.reduce((a, b) => isNumber(b[prop]) ? Math.max(a, b[prop]) : a, 0) + 1);\n        break;\n      case EntityPrimaryType.UUID:\n        DataTypes.objectSet(instance, prop, Entity.uuid());\n        break;\n    }\n  }\n\n  public takeKey(run: Runtime, instance: any): any\n  {\n    this.setKey(instance);\n\n    return this.getKey(run, instance);\n  }\n\n  public getDescribe(run: Runtime, instance: any): any\n  {\n    const { type, describe } = this;\n\n    return run.run(describe, { instance, type });\n  }\n\n  public getDecodedPropertyTypes(): TypeMap\n  {\n    return this.type.options.props;\n  }\n\n  public getPropertyTypeFor(forProperty?: string)\n  {\n    return forProperty\n    ? Types.enumForText([forProperty])\n    : this.getPropertyType(); \n  }\n\n  public getEncodedPropertyTypes(): TypeMap\n  {\n    return objectMap(this.type.options.props, \n      (type, prop) => prop in this.transcoders\n        ? this.transcoders[prop].encodedType\n        : type\n    );\n  }\n\n  public getEncodedType(): ObjectType\n  {\n    return Types.object(this.getEncodedPropertyTypes());\n  }\n\n  public getDecodedType(): ObjectType\n  {\n    return this.type;\n  }\n\n  public getProperties(): string[]\n  {\n    return Object.keys(this.getDecodedPropertyTypes());\n  }\n\n  public getPropertyType(): EnumType\n  {\n    return Types.enumForText(this.getProperties());\n  }\n\n  public getKeyReturnType()\n  {\n    return this.keyType;\n  }\n\n  public getKeyContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getDescribeContext(): Type\n  {\n    return Types.object({\n      instance: this.type,\n      type: Types.text(),\n    });\n  }\n\n  public getEncoded(run: Runtime, instance: any): any\n  {\n    const encoded: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\n    }\n\n    return encoded;\n  }\n\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const encoder = property in transcoders\n      ? transcoders[property].encode\n      : null;\n    const value = instance[property];\n\n    return encoder\n      ? run.run(encoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getEncodeContext(forProperty?: string): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getDecodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getDecodeExpected(forProperty);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\n  {\n    return forProperty && forProperty in this.transcoders\n      ? this.transcoders[forProperty].encodedType\n      : defaultType;\n  }\n\n  public getDecoded(run: Runtime, encoded: any): any\n  {\n    const instance: any = {};\n\n    for (const prop in this.getDecodedPropertyTypes())\n    {\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\n    }\n\n    return instance;\n  }\n\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\n  {\n    const { name, transcoders } = this;\n    const decoder = property in transcoders\n      ? transcoders[property].decode\n      : null;\n    const value = instance[property];\n\n    return decoder\n      ? run.run(decoder, { name, instance, property, value })\n      : value;\n  }\n\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\n  {\n    const name = Types.enumForText([this.name]);\n    const instance = this.getEncodedType();\n    const property = this.getPropertyTypeFor(forProperty);\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\n\n    return Types.object({ name, instance, property, value });\n  }\n\n  public getDecodeExpected(forProperty?: string)\n  {\n    return forProperty\n      ? this.type.options.props[forProperty] || Types.any()\n      : Types.any();\n  }\n\n  public getIndexExpectedType()\n  {\n    return Types.set(this.getPropertyType());\n  }\n\n  public getDynamicPrimaryKey(): string\n  {\n    const existing = this.type.options.props;\n\n    return !('id' in existing)\n      ? 'id'\n      : !('_id' in existing)\n        ? '_id'\n        : '__id';\n  }\n\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\n  {\n    const primary = this.getPrimary(name);\n\n    return primary.props.length > 1\n      ? Exprs.op(ListOps.join, {\n          list: primary.props.map((prop) => \n            Exprs.get('instance', prop)\n          ),\n          delimiter: Exprs.const(separator),\n          toText: Exprs.op(AnyOps.asText, {\n            value: Exprs.get('item'),\n          }),\n        })\n      : Exprs.get('instance', primary.props[0]);\n  }\n\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\n  {\n    const defined = name in this.indexes\n      ? this.indexes[name]\n      : objectReduce(this.indexes, \n          (index, indexName, first) => first ? first : index.primary ? index : first, \n        null);\n\n    if (defined)\n    {\n      return defined;\n    }\n\n    if (returnDynamic)\n    {\n      const id = this.getDynamicPrimaryKey();\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\n\n      return {\n        name,\n        props: [id],\n        types: [type],\n        unique: true,\n        primary: true,\n      };\n    }\n\n    return null;\n  }\n\n  public getUniqueIndexes(): EntityIndex[]\n  {\n    return objectReduce(this.indexes, (index, indexName, unique) => {\n      if (index.unique) {\n        unique.push(index);\n      }\n\n      return unique;\n    }, []);\n  }\n\n  public addPrimary(props: string | string[]): this\n  {\n    this.addIndex('primary', {\n      props: isArray(props) ? props : [props], \n      unique: true, \n      primary: true\n    });\n\n    this.primaryType = EntityPrimaryType.GIVEN;\n\n    return this;\n  }\n\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\n  {\n    const previous = this.indexes[name];\n    const index: EntityIndex = { ...options, name };\n\n    DataTypes.objectSet(this.indexes, name, index);\n\n    if (previous)\n    {\n      this.trigger('updateIndex', this, index, previous);\n    }\n    else\n    {\n      this.trigger('addIndex', this, index);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public updateIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    this.trigger('updateIndex', this, index, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeIndex(name: string, delayChange: boolean = false): this\n  {\n    const index = this.indexes[name];\n\n    DataTypes.objectRemove(this.indexes, name);\n\n    this.trigger('removeIndex', this, index);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameIndex(name: string, newName: string): this\n  {\n    const index = this.indexes[name];\n\n    if (index && name !== newName)\n    {\n      const previous = { ...index, props: index.props.slice() };\n\n      index.name = newName;\n\n      DataTypes.objectRemove(this.indexes, name);\n      DataTypes.objectSet(this.indexes, newName, index);\n\n      this.trigger('updateIndex', this, index, previous);\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\n  {\n    const previous = this.transcoders[prop];\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\n\n    DataTypes.objectSet(this.transcoders, prop, transcoder);\n\n    if (previous)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\n    }\n    else\n    {\n      this.trigger('addTranscoder', this, name, transcoder);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public removeTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      DataTypes.objectRemove(this.transcoders, name);\n\n      this.trigger('removeTranscoder', this, name, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public updateTranscoder(name: string, delayChange: boolean = false): this\n  {\n    const transcoder = this.transcoders[name];\n\n    if (transcoder)\n    {\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public addMethod(method: Func, delayChange: boolean = false): this\n  {\n    const existing = this.methods[method.name];\n\n    DataTypes.objectSet(this.methods, method.name, method);\n\n    if (existing)\n    {\n      this.trigger('updateMethod', this, method, existing);\n    }\n    else\n    {\n      this.trigger('addMethod', this, method);\n    }\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method && name !== newName)\n    {\n      method.name = newName;\n\n      DataTypes.objectRemove(this.methods, name);\n      DataTypes.objectSet(this.methods, newName, method);\n\n      this.trigger('updateMethod', this, method, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n  public removeMethod(name: string, delayChange: boolean = false): this\n  {\n    const method = this.methods[name];\n\n    if (method)\n    {\n      DataTypes.objectRemove(this.methods, name);\n\n      this.trigger('removeMethod', this, method);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return this;\n  }\n\n}","\nimport { isObject, isArray, isSet, isString } from '../fns';\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { AnyType } from './Any';\nimport { Exprs } from '../Exprs';\nimport { Expression } from '../Expression';\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\nimport { ListOps } from '../ops/ListOps';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { Types } from '../Types';\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\n\n\nconst INDEX_VALUE = 1;\nconst RANDOM_MIN = 2;\nconst RANDOM_MAX = 5;\n\nexport interface SetOptions \n{\n  value: Type;\n}\n\nexport class SetType extends Type<SetOptions> \n{\n\n  public static STEP_VALUE = 'value';\n\n  public static id = ID.Set;\n\n  public static operations = SetOperations;\n\n  public static computeds = SetComputeds;\n\n  public static baseType = new SetType({ value: AnyType.baseType });\n\n  public static decode(data: any[], types: TypeProvider): SetType \n  {\n    const value = types.getType(data[INDEX_VALUE]);\n    \n    return new SetType({ value });\n  }\n\n  public static encode(type: SetType): any \n  {\n    const { value } = type.options;\n\n    return [this.id, value.encode()];\n  }\n\n  public static describePriority: number = 7;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    if (!isSet(data))\n    {\n      return null;\n    }\n\n    let value: Type = new AnyType({});\n\n    const type = new SetType({ value });\n\n    cache.set(data, type);\n\n    for (const [setValue] of data.entries())\n    {\n      value = describer.merge(value, setValue);\n    }\n\n    type.options.value = value;\n\n    return type;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n    const priority = 11;\n    const type: DataTypeRaw = 'object';\n\n    DataTypes.addJson({\n      priority,\n      fromJson: (json, reader) => {\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\n          return new Set(json.value.map(reader));\n        }\n      },\n      toJson: (json, writer) => {\n        if (isSet(json)) {\n          return {\n            $any: 'set',\n            value: Array.from(json.entries()).map(writer),\n          };\n        }\n      },\n    });\n\n    DataTypes.addCopier({\n      priority,\n      copy: (x, copy, setObjectCopy) => {\n        if (isSet(x)) {\n          const newSet = new Set();\n\n          setObjectCopy(x, newSet);\n  \n          for (const [value] of x.entries()) {\n            newSet.add(copy(value));\n          }\n  \n          return newSet;\n        }\n      },\n    });\n\n    DataTypes.addCompare({\n      priority,\n      type,\n      compare: (a, b, compare) => {\n        const at = isSet(a);\n        const bt = isSet(b);\n\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\n        \n        if (isSet(a) && isSet(b)) {\n          let dl = a.size - b.size;\n\n          if (dl === 0) {\n            let less = 0;\n            let more = 0;\n\n            const avalues = Array.from(a);\n            const bvalues = Array.from(b);\n\n            for (let i = 0; i < avalues.length; i++) {\n              const c = compare(avalues[i], bvalues[i]);\n\n              if (c < 0) less++;\n              if (c > 0) more++;\n            }\n\n            dl = DataTypes.getCompare(less, more);\n          }\n\n          return dl;\n        }\n      },\n    });\n\n    DataTypes.addEquals({\n      priority,\n      type,\n      equals: (a, b, equals) => {\n        const al = isSet(a);\n        const bl = isSet(b);\n\n        if (al !== bl) return false;\n        \n        if (isSet(a) && isSet(b))\n        {\n          if (a.size !== b.size)\n          {\n            return false\n          }\n\n          for (const value of a)\n          {\n            if (!b.has(value))\n            {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      },\n    });\n  }\n\n  public static forItem(valueOrClass: TypeInput)\n  {\n    const value = Types.parse(valueOrClass);\n    \n    return new SetType({ value });\n  }\n\n  public getId(): string\n  {\n    return SetType.id;\n  }\n\n  public getOperations()\n  {\n    return SetType.operations.map;\n  }\n\n  public merge(type: SetType): void\n  {\n    const o1 = this.options;\n    const o2 = type.options;\n\n    o1.value = Types.merge(o1.value, o2.value);\n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return null;\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return [];\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this;\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this;\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof SetType && \n      this.options.value.isCompatible(other.options.value, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return false;\n  }\n\n  public isSimple(): boolean\n  {\n    return false;\n  }\n\n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => {\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\n    });\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === SetType.STEP_VALUE \n      ? this.options.value\n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n\n    this.options.value.setParent(this);\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    this.options.value.removeDescribedRestrictions();\n  }\n\n  public getCreateExpression(): Expression\n  {\n    return Exprs.op(SetOps.create, {});\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return Exprs.and(\n      Exprs.op(SetOps.isValid, {\n        value: Exprs.get('value'),\n      }),\n      Exprs.not(Exprs.op(ListOps.contains, {\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\n        item: Exprs.null(),\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\n      }, {\n        value: 'ignore',\n        test: 'value',\n      })),\n    );\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return Exprs.op(SetOps.cmp, {\n      value: Exprs.get('value'),\n      test: Exprs.get('test'),\n    });\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to = value\n    return Exprs.op(SetOps.map, {\n      set: Exprs.get('value'),\n      transform: newValue,\n    }, {\n      value: 'value',\n    });\n  }\n\n  public isValid(test: any): boolean \n  {\n    if (test instanceof Set || isArray(test))\n    {\n      const { value } = this.options;\n\n      return !Array.from(test).some((v) => !value.isValid(v));\n    }\n\n    return false;\n  }\n\n  public normalize(test: any): any\n  {\n    const { value } = this.options;\n    \n    return new Set(Array.from(test).map((v) => value.normalize(v)));\n  }\n\n  public newInstance(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.newInstance(),\n    });\n  }\n\n  public clone(): SetType\n  {\n    const { value } = this.options;\n\n    return new SetType({\n      value: value.clone(),\n    });\n  }\n\n  public encode(): any \n  {\n    return SetType.encode(this);\n  }\n\n  public create(): Set<any>\n  {\n    return new Set();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    const { value } = this.options;\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\n    const out = new Set<any>();\n\n    for (let i = 0; i < n; i++)\n    {\n      const v = value.random(rnd);\n\n      out.add(v);\n    }\n\n    return out;\n  }\n\n  public fromJson(json: Array<any>): Set<any>\n  {\n    const { value } = this.options;\n\n    return new Set(json.map((v) => value.fromJson(v)));\n  }\n\n  public toJson(set: Set<any>): Array<any>\n  {\n    const { value } = this.options;\n\n    return Array.from(set.entries()).map((v) => value.toJson(v));\n  }\n\n}","\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved, TypeProvider } from './Type';\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\nimport { NumberType } from './types/Number'\nimport { AnyType } from './types/Any';\nimport { BooleanType } from './types/Boolean';\nimport { DateOptions, DateType } from './types/Date';\nimport { TextType, TextOptions } from './types/Text';\nimport { EnumType } from './types/Enum';\nimport { ObjectType } from './types/Object';\nimport { ListType } from './types/List';\nimport { ManyType } from './types/Many';\nimport { MapType } from './types/Map';\nimport { NullType } from './types/Null';\nimport { OptionalType } from './types/Optional';\nimport { TupleType } from './types/Tuple';\nimport { NotType } from './types/Not';\nimport { ColorType } from './types/Color';\nimport { SetType } from './types/Set';\nimport { EntityType } from './types/Entity';\n\n\nexport class Types\n{\n\n  public static INDEX = Types.index();\n\n  public static LENGTH = Types.index();\n\n  public static CHAR = Types.char();\n\n  public static autoSetParent: boolean = true;\n\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\n  {\n    if (this.autoSetParent || force)\n    {\n      type.setParent();\n    }\n\n    return type;\n  }\n\n  public static any()\n  {\n    return new AnyType({});\n  }\n\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\n  {\n    return new BooleanType({ true: trues, false: falses });\n  }\n\n  public static date(options: DateOptions = {})\n  {\n    return new DateType(options);\n  }\n\n  public static entity(name: string, types: TypeProvider)\n  {\n    return new EntityType(name, types);\n  }\n\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\n  {\n    return this.setParent(new EnumType({\n      value: this.parse(value),\n      key: this.parse(key),\n      constants: toMap(constants),\n    }));\n  }\n\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\n  {\n    return this.setParent(new EnumType({\n      value: this.text(),\n      key: this.text(),\n      constants: isMap(constants)\n        ? constants\n        : isArray(constants[0])\n          ? new Map(constants as Array<[string, string]>)\n          : new Map((constants as string[]).map((c) => [c, c]))\n    }));\n  }\n\n  public static list(item: TypeInput, min?: number, max?: number)\n  {\n    return this.setParent(new ListType({\n      item: this.parse(item),\n      min, \n      max,\n    }));\n  }\n\n  public static many(types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[]): ManyType\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\n  {\n    return this.setParent(new ManyType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static not(types: TypeInput[]): NotType\n  public static not(...types: TypeInput[]): NotType\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\n  {\n    return this.setParent(new NotType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static map(value: TypeInput, key: TypeInput = TextType)\n  {\n    return this.setParent(new MapType({ \n      key: this.parse(key),\n      value: this.parse(value)\n    }));\n  }\n\n  public static null()\n  {\n    return NullType.baseType\n  }\n\n  public static number(min?: number, max?: number, whole?: boolean)\n  {\n    return new NumberType({ min, max, whole });\n  }\n\n  public static int(min?: number, max?: number)\n  {\n    return new NumberType({ min, max, whole: true });\n  }\n\n  public static index(max?: number)\n  {\n    return new NumberType({ min: 0, max, whole: true });\n  }\n\n  public static char()\n  {\n    return new TextType({ min: 1, max: 1 });\n  }\n\n  public static object(props: TypeInputMap = {})\n  {\n    return this.setParent(new ObjectType({ \n      props: this.resolve(props),\n    }));\n  }\n\n  public static optional(type: TypeInput): Type\n  {\n    const innerType = this.parse(type);\n\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\n  }\n\n  public static color(options: { hasAlpha?: boolean } = {})\n  {\n    return this.setParent(new ColorType(options));\n  }\n\n  public static set(value: TypeInput)\n  {\n    return this.setParent(new SetType({\n      value: this.parse(value),\n    }));\n  }\n\n  public static text(options: TextOptions = {})\n  {\n    return new TextType(options);\n  }\n\n  public static tuple(types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[]): TupleType\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\n  {\n    return this.setParent(new TupleType(\n      isArray(types[0])\n        ? types[0].map((t) => this.parse(t))\n        : (types as TypeInput[]).map((t) => this.parse(t))\n    ));\n  }\n\n  public static parse(input: TypeInput): Type\n  {\n    return input instanceof Type\n      ? input\n      : input.baseType.newInstance();\n  }\n\n  public static simplify(type: Type): Type;\n  public static simplify(type: Type | null): Type | null;\n  public static simplify(type: Type | null): Type | null\n  {\n    return type ? type.getSimplifiedType() : null;\n  }\n\n  public static resolve<T>(types: T): TypeResolved<T>\n  {\n    let result: any;\n\n    if (!types)\n    {\n    }\n    else if (types instanceof Type)\n    {\n      result = types;\n    }\n    else if ((types as any).baseType instanceof Type)\n    {\n      result = (types as any).baseType.newInstance();\n    }\n    else if (isArray(types))\n    {\n      result = types.map(t => this.resolve(t));\n    }\n    else if (isObject(types))\n    {\n      result = objectMap(types as any, t => this.resolve(t));\n    }\n\n    return result as unknown as TypeResolved<T>;\n  }\n\n  public static reduce(type: Type[]): Type\n  {\n    return type.length === 1 ? type[0] : new ManyType(type);\n  }\n\n  public static explode(outerType: Type): Type[]\n  {\n    return outerType instanceof ManyType ? outerType.options : [outerType];\n  }\n\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\n  {\n    if (type instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof OptionalType && type.options instanceof maybe)\n    {\n      return type;\n    }\n\n    if (type instanceof ManyType) \n    {\n      const oneOf = type.options.find((t) => t instanceof maybe);\n\n      if (oneOf) \n      {\n        return this.optional(oneOf);\n      }\n\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\n\n      if (oneOfOptional) \n      {\n        return oneOfOptional;\n      }\n    }\n\n    return this.optional(maybe);\n  }\n\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\n  {\n    if (readonlyTypes.length === 0)\n    {\n      return noTypes;\n    }\n\n    if (readonlyTypes.find(t => t instanceof AnyType))\n    {\n      return AnyType.baseType;\n    }\n\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\n\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\n  }\n\n  public static merge(a: Type, b: Type): Type\n  {\n    if (a instanceof AnyType)\n    {\n      return b;\n    }\n\n    const optional = \n      a instanceof OptionalType ||\n      b instanceof OptionalType;\n\n    const ar = a.getRequired();\n    const br = b.getRequired();\n\n    if (isSameClass(ar, br))\n    {\n      ar.merge(br);\n\n      return optional ? this.optional(ar) : ar;\n    }\n\n    if (ar instanceof ManyType || br instanceof ManyType)\n    {\n      const atypes = this.explode(ar);\n      const btypes = this.explode(br);\n      const an = atypes.length;\n\n      for (const ktype of btypes)\n      {\n        let matched = false;\n        const koptional = ktype instanceof OptionalType;\n        const krequired: Type = koptional ? ktype.options : ktype;\n\n        for (let i = 0; i < an; i++)\n        {\n          const itype = atypes[i];\n          const ioptional = itype instanceof OptionalType;\n          const irequired: Type = ioptional ? itype.options : itype;\n\n          if (isSameClass(irequired, krequired))\n          {\n            matched = true;\n            irequired.merge(krequired);\n\n            if (koptional && !ioptional) \n            {\n              atypes[i] = this.optional(irequired);\n            }\n          }\n        }\n\n        if (!matched)\n        {\n          atypes.push(ktype);\n        }\n      }\n\n      return optional\n        ? this.optional(this.reduce(atypes))\n        : this.reduce(atypes);\n    }\n\n    return this.many(a, b);\n  }\n\n}","\nexport class LinkedNode<T> \n{\n\n  public value: T;\n  public next: LinkedNode<T>;\n  public prev: LinkedNode<T>;\n\n  constructor(value: T) \n  {\n    this.value = value;\n    this.next = this.prev = this;\n  }\n\n  // List Operations\n\n  public isEmpty()\n  {\n    return this.next === this;\n  }\n\n  public clear() \n  {\n    this.next = this.prev = this;\n  }\n\n  public addLast(value: T): LinkedNode<T> \n  {\n    const node = new LinkedNode(value);\n    node.linkAfter(this.prev);\n    \n    return node;\n  }\n\n  public addFirst(value: T): LinkedNode<T> \n  { \n    const node = new LinkedNode(value);\n    node.linkAfter(this);\n\n    return node;\n  }\n\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \n  {\n    const stop = this;\n    let curr = this.next;\n    let count = 0;\n\n    while (curr !== stop) \n    {\n      const next = curr.next;\n      callback(curr.value, count, curr);\n      curr = next;\n      count++;\n    }\n\n    return count;\n  }\n\n  // Item Operations\n\n  public isRemoved()\n  {\n    return this.next === this;\n  }\n\n  public remove() \n  {\n    if (!this.isRemoved()) \n    {\n      this.next.prev = this.prev;\n      this.prev.next = this.next;\n      this.next = this.prev = this;\n    }\n  }\n\n  public linkAfter(node: LinkedNode<T>) \n  {\n    this.remove();\n    this.next = node.next;\n    this.prev = node;\n    node.next.prev = this;\n    node.next = this;\n  }\n\n}\n","import { isArray } from './fns';\nimport { LinkedNode } from './LinkedNode';\n\n\n\nexport type EventCallback<\n  E, \n  K extends keyof E = any, \n  A extends any[] = EventTypeArgs<E, K>,\n  R = EventTypeResult<E, K>  \n> = (type: K, ...payload: A) => R;\n\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\n\nexport type EventCallbackMap<E> = \n{\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\n};\n\nexport type EventTypeResult<E, K extends keyof E> =\n  E[K] extends EventDefinition<any, infer R>\n    ? R\n    : never;\n\nexport type EventTypeArgs<E, K extends keyof E> =\n  E[K] extends EventDefinition<infer A, any>\n    ? A\n    : never;\n\nexport class EventBase<E> \n{\n\n  private listeners: EventCallbackMap<E> = Object.create(null);\n\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \n  {\n    const listeners = this.getListeners(event, false);\n    const results: R[] = [];\n\n    if (listeners) \n    { \n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\n    }\n\n    return results;\n  }\n\n  public hasListeners<K extends keyof E>(event: K): boolean\n  {\n    return this.getListeners(event) !== null;\n  }\n\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \n  {\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\n\n    if (!listeners && create) \n    {\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\n    }\n\n    return listeners || null;\n  }\n\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const events = isArray(event) ? event : [event];\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\n    \n    return () => nodes.forEach((n) => n.remove());\n  }\n\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \n  {\n    const off = this.on(event, (type, ...payload) => {\n      off();\n      \n      return handler(type, ...payload);\n    });\n\n    return off;\n  }\n\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \n  {\n    if (event) \n    {\n      if (Array.isArray(event)) \n      {\n        event.forEach((e) => this.off(e, handler));\n      } \n      else \n      {\n        const listeners = this.listeners[event];\n\n        if (listeners) \n        {\n          if (handler) \n          {\n            listeners.each((other, index, node) => {\n              if (other === handler) {\n                node.remove();\n              }\n            });\n          }\n          else \n          {\n            listeners.clear();\n          }\n        }\n      }\n    } \n    else \n    {\n      this.listeners = Object.create(null);\n    }\n\n    return this;\n  }\n\n}\n","import { ObjectType, ObjectOptions } from './types/Object';\nimport { TypeMap } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Exprs } from './Exprs';\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { DataTypes } from './DataTypes';\nimport { EventBase } from './EventBase';\n\n\nexport interface FuncOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  description: string;\n  meta: any;\n  params: any;\n  expression: any;\n  defaults: any;\n  tests: FuncTest[];\n}\n\nexport interface FuncTest\n{\n  name: string;\n  description: string;\n  args: any;\n  expected: any;\n}\n\nexport interface FuncEvents\n{\n  changed(func: Func): void;\n  renamed(func: Func, oldName: string): void;\n  renameParameter(func: Func, param: string, oldParam: string): void;\n  removeParameter(func: Func, param: string): void;\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\n  addTest(func: Func, test: FuncTest): void;\n  removeTest(func: Func, test: FuncTest): void;\n  updateTest(func: Func, test: FuncTest): void;\n}\n\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\n    return new Func({\n      name: '',\n      created: now(),\n      updated: now(),\n      description: '',\n      meta: null,\n      params: Types.object(),\n      expression: Exprs.noop(),\n      defaults: {},\n      tests: [],\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public description: string;\n  public meta: any;\n  public params: ObjectType<ObjectOptions>;\n  public expression: Expression;\n  public defaults: any;\n  public tests: FuncTest[];\n\n  public constructor(options: FuncOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.description = options.description;\n    this.meta = options.meta;\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\n    this.expression = defs.getExpression(options.expression);\n    this.defaults = this.params.fromJson(options.defaults);\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\n  }\n\n  public sync(options: FuncOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.description = options.description;\n      this.meta = options.meta;\n      this.params = options instanceof Func\n        ? options.params\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\n      this.expression = options instanceof Func\n        ? options.expression\n        : defs.getExpression(options.expression);\n      this.defaults = options instanceof Func\n        ? options.defaults\n        : this.params.fromJson(options.defaults);\n\n      arraySync(\n        this.tests, \n        options instanceof Func\n          ? options.tests\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \n        (target, value) => this.addTest(value, true),\n        (target, index) => this.removeTest(index, true),\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: FuncOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): FuncOptions \n  {\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      description, \n      meta,\n      params: params.encode(),\n      expression: expression.encode(),\n      defaults: params.toJson(defaults),\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\n    };\n  }\n\n  public renameParameter(name: string, newName: string): boolean\n  {\n    const paramType = this.params.options.props[name];\n\n    if (paramType)\n    {\n      DataTypes.objectSet(this.params.options.props, newName, paramType);\n      DataTypes.objectRemove(this.params.options.props, name);\n\n      if (name in this.defaults)\n      {\n        DataTypes.objectSet(this.defaults, newName, this.defaults[name]);\n        DataTypes.objectRemove(this.defaults, name);\n      }\n\n      this.trigger('renameParameter', this, newName, name);\n      this.changed();\n    }\n\n    return !!paramType;\n  }\n\n  public removeParameter(name: string): boolean\n  {\n    const exists = name in this.params.options.props;\n\n    if (exists)\n    {\n      DataTypes.objectRemove(this.params.options.props, name);\n      DataTypes.objectRemove(this.defaults, name);\n\n      this.trigger('removeParameter', this, name);\n      this.changed();\n    }\n\n    return exists;\n  }\n\n  public addTest(test: FuncTest, delayChange: boolean = false)\n  {\n    this.tests.push(test);\n\n    this.trigger('addTest', this, test);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(test)\n      ? this.tests[test]\n      : test;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newTest);\n\n      this.trigger('updateTest', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(test)\n      ? test\n      : this.tests.indexOf(test);\n    const exists = index >= 0 && index < this.tests.length;\n\n    if (exists)\n    {\n      const removed = this.tests[index];\n      \n      this.trigger('removeTest', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \n  {\n    const context = Types.object({\n      ...this.params.options.props,\n      ...paramsTypes,\n    });\n\n    return this.expression.getType(defs, context);\n  }\n\n  public getParamTypes(): ObjectType\n  {\n    return isEmpty(this.defaults)\n      ? this.params\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\n  }\n\n  public getParamType(param: string)\n  {\n    const propType = this.params.options.props[param];\n\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\n      ? propType.getRequired()\n      : propType;\n  }\n\n  public getArguments(args: any, returnNew: boolean = true)\n  {\n    const target = returnNew ? { ...args } : args;\n\n    for (const prop in this.defaults)\n    {\n      const propType = this.params.options.props[prop];\n\n      if (!propType.getRequired().isValid(target[prop]))\n      {\n        DataTypes.objectSet(target, prop, DataTypes.copy(this.defaults[prop]));\n      }\n    }\n\n    return target;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.tests.forEach((test) =>\n    {\n      test.args = cmd({ value: test.args });\n    });\n\n    this.changed();\n  }\n\n  public mutates(def: DefinitionProvider, arg: string): boolean\n  {\n    if (!(arg in this.params.options.props))\n    {\n      return false;\n    }\n\n    return this.expression.mutates(def, arg, false);\n  }\n\n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { MapInput, toMap, reverseMap, now } from './fns';\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\nexport interface RelationTypeKey\n{\n  name: string;\n  props: string[];\n}\n\nexport interface RelationOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  kind: RelationKind;\n  subject: RelationTypeKey;\n  subjectRelationName?: string;\n  morphs?: [string, any];\n  morphsToRelated?: MapInput<any, string>;\n  related: RelationTypeKey[];\n  relatedRelationName?: string;\n  multiple?: boolean;\n  required?: boolean;\n  owns?: boolean;\n  extension?: boolean;\n}\n\nexport interface EntityRelation\n{\n  relation: Relation;\n  name: string;\n  kind: RelationKind;\n  related: RelationTypeKey[];\n  morphs?: EntityPropPair;\n  morphsToRelated?: Map<any, string>;\n  relatedToMorphs?: Map<string, any>;\n  where?: [string, any];\n  itemType: Type;\n  relationType: Type;\n  cascade: RelationCascade;\n  local: string[];\n}\n\nexport enum RelationKind\n{\n  HAS_MANY,\n  BELONGS_TO,\n  HAS_ONE,\n  ONE,\n  HAS_ONE_POLYMORPHIC,\n  ONE_POLYMORPHIC,\n}\n\nexport enum RelationCascade\n{\n  NONE,\n  CASCADE,\n  SET_NULL,\n  RESTRICT\n}\n\nexport interface RelationEvents\n{\n  changed(relation: Relation): void;\n  renamed(relation: Relation, oldName: string): void;\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\n}\n\nexport class Relation extends EventBase<RelationEvents>\n{\n\n  /**\n   * A unique name for the relationship between the subject type and related types.\n   */\n  public name: string;\n\n  /**\n   * When the relation was created.\n   */\n  public created: number;\n\n  /**\n   * When the relation was last updated.\n   */\n  public updated: number;\n  \n  /**\n   * A name-props pair for the type that has the foreign key. The name is the\n   * aliased type name and the props are the properties on it that reference\n   * the related type or types.\n   */\n  public subject: RelationTypeKey; \n  \n  /**\n   * The name the subject uses to refer to the related types.\n   */\n  public subjectRelationName: string;\n\n  /**\n   * A name-type pair for a property that exists on the subject type that is \n   * used to determine which related type.\n   */\n  public morphs: EntityPropPair | null;\n\n  /**\n   * A map of values from the morphs property to the related type names.\n   */\n  public morphsToRelated: Map<any, string>;\n\n  /**\n   * The list of name-prop pairs that the subject type can be related to based\n   * on the morph \n   */\n  public related: RelationTypeKey[];\n  \n  /**\n   * The name the related types use to refer to the subject.\n   */\n  public relatedRelationName: string;\n\n  /**\n   * A map from related type names to the morph value.\n   */\n  public relatedToMorphs: Map<string, any>;\n\n  /**\n   * The kind of relation created.\n   */\n  public kind: RelationKind;\n\n  /**\n   * List or single related instance?\n   */\n  public multiple: boolean;\n\n  /**\n   * Remove subject if related is removed\n   */\n  public required: boolean;\n\n  /**\n   * When related is being removed, stop it. I own it. But when subject is\n   * removed then remove the related.\n   */\n  public owns: boolean;\n\n  /**\n   * Related types extend the subject, the subject has a morph value to know\n   * which type it is.\n   */\n  public extension: boolean;\n\n  /**\n   * Needed for retrieving aliased types and their current properties.\n   */\n  protected defs: Definitions;\n\n  \n  public constructor(defs: Definitions, options: RelationOptions)\n  {\n    super();\n\n    this.defs = defs;\n    this.name = options.name;\n    this.updated = options.updated || now();\n    this.created = options.created || now();\n    this.kind = options.kind;\n    this.subject = options.subject;\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n    this.morphs = options.morphs\n      ? this.decodeTypePair(options.morphs)\n      : null;\n    this.morphsToRelated = toMap(options.morphsToRelated);\n    this.related = options.related;\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\n    this.multiple = !!options.multiple;\n    this.required = !!options.required;\n    this.owns = !!options.owns;\n    this.extension = !!options.extension;\n  }\n\n  public sync(options: RelationOptions | Relation, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.updated = options.updated || now();\n      this.created = options.created || now();\n      this.kind = options.kind;\n      this.subject = options.subject;\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\n      this.morphs = options.morphs\n        ? this.decodeTypePair(options.morphs)\n        : null;\n      this.morphsToRelated = toMap(options.morphsToRelated);\n      this.related = options.related;\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\n      this.multiple = !!options.multiple;\n      this.required = !!options.required;\n      this.owns = !!options.owns;\n      this.extension = !!options.extension;\n      \n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: RelationOptions | Relation): boolean\n  {\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\n  {\n    return [prop, this.defs.getType(propType)];\n  }\n\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\n  {\n    return pair\n      ? [pair[0], pair[1].encode()]\n      : null;\n  }\n\n  public encode(): RelationOptions\n  {\n    const { \n      name, created, updated,\n      kind, subject, subjectRelationName, \n      morphs, morphsToRelated, \n      related, relatedRelationName, \n      multiple, required, owns, extension \n    } = this;\n\n    return {\n      name,\n      updated,\n      created,\n      kind,\n      subject,\n      subjectRelationName,\n      morphs: this.encodeTypePair(morphs),\n      morphsToRelated: Array.from(morphsToRelated.entries()),\n      related,\n      relatedRelationName,\n      multiple, required, owns, extension,\n    };\n  }\n\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\n  {\n    return related.find((r) => r.name === name);\n  }\n\n  public rename(name: string, newName: string)\n  {\n    this.renameReference(name, newName, [this.subject]);\n    this.renameReference(name, newName, this.related);\n\n    this.changed();\n  }\n\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      withName.name = newName;\n    }\n  }\n\n  public remove(name: string)\n  {\n    this.removeReference(name, [this.subject]);\n    this.removeReference(name, this.related);\n\n    this.changed();\n  }\n\n  private removeReference(name: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      related.splice(i, 1);\n      related[i].props = [];\n    }\n  }\n\n  public renameProp(name: string, prop: string, newProp: string)\n  {\n    this.renamePropReference(name, prop, newProp, [this.subject]);\n    this.renamePropReference(name, prop, newProp, this.related);\n\n    this.changed();\n  }\n\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\n  {\n    const withName = this.getRelatedWithName(name, related);\n\n    if (withName)\n    {\n      const i = withName.props.indexOf(prop);\n\n      if (i !== -1)\n      {\n        withName.props[i] = newProp;\n      }\n    }\n  }\n\n  public removeProp(name: string, prop: string)\n  {\n    this.removePropReference(name, prop, [this.subject]);\n    this.removePropReference(name, prop, this.related);\n\n    this.changed();\n  }\n\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\n  {\n    const i = related.findIndex((r) => r.name === name);\n\n    if (i !== -1)\n    {\n      const withName = related[i];\n      const k = withName.props.indexOf(prop);\n\n      if (k !== -1)\n      {\n        withName.props.splice(k, 1);\n\n        if (withName.props.length === 0)\n        {\n          related.splice(i, 1);\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public getPropTypes(related: RelationTypeKey[]): Type[]\n  {\n    const types: Type[] = [];\n\n    related.forEach(({ name, props }) => \n    {\n      const entity = this.defs.getEntity(name);\n      const primary = entity.getEntityProps();\n\n      props.forEach((_, i) =>\n      {\n        const propType = primary.props[i][1];\n\n        types[i] = types[i]\n          ? Types.merge(types[i], propType)\n          : propType.clone();\n      });\n    });\n\n    return types;\n  }\n\n  public isEmpty()\n  {\n    return this.subject.props.length === 0\n        || this.related.length === 0;\n  }\n\n  private getItemType(related: RelationTypeKey[]): Type\n  {\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\n    const itemType = typesResolved.length > 1\n      ? Types.many(typesResolved)\n      : typesResolved[0];\n\n    return itemType;\n  }\n\n  public getSubjectRelation(subjectName: string): EntityRelation | null\n  {\n    if (this.subject.name !== subjectName)\n    {\n      return null;\n    }\n\n    const name = this.subjectRelationName;\n    const local = this.subject.props;\n    const related = this.related;\n    const itemType = this.getItemType(related);\n    const cascade = this.owns && this.multiple\n      ? RelationCascade.CASCADE\n      : this.required\n        ? RelationCascade.RESTRICT\n        : RelationCascade.SET_NULL;\n    const relationType = this.required\n      ? itemType\n      : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.BELONGS_TO\n      : this.kind; \n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.morphs = this.morphs;\n      relation.morphsToRelated = this.morphsToRelated;\n      relation.relatedToMorphs = this.relatedToMorphs;\n    }\n\n    return relation;\n  }\n\n  public getRelatedRelation(relatedName: string): EntityRelation | null\n  {\n    const withName = this.getRelatedWithName(relatedName, this.related);\n\n    if (!withName)\n    {\n      return null;\n    }\n\n    const name = this.relatedRelationName;\n    const local = withName.props;\n    const related = [this.subject];\n    const itemType = this.getItemType(related);\n    const cascade = RelationCascade.NONE;\n    const relationType = this.multiple\n      ? Types.list(itemType)\n      : this.required\n        ? itemType\n        : Types.optional(itemType);\n    const kind = this.kind === RelationKind.HAS_MANY\n      ? RelationKind.HAS_MANY\n      : this.morphs\n        ? RelationKind.ONE_POLYMORPHIC\n        : RelationKind.ONE;\n\n    const relation: EntityRelation = {\n      relation: this,\n      name,\n      kind,\n      local,\n      cascade,\n      related,\n      itemType,\n      relationType,\n    };\n\n    if (this.morphs) {\n      relation.where = [\n        this.morphs[0],\n        this.relatedToMorphs.get(relatedName)\n      ];\n    }\n\n    return relation;\n  }\n\n  public getTypeProps(name: string): EntityProps[]\n  {\n    const typeProps: EntityProps[] = [];\n\n    if (this.subject.name === name)\n    {\n      const propTypesList = this.getPropTypes(this.related);\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\n\n      typeProps.push({\n        type: EntityKeyType.FOREIGN,\n        props,\n        relation: this,\n      });\n\n      if (this.morphs)\n      {\n        typeProps.push({\n          type: EntityKeyType.NONE,\n          props: [this.morphs],\n          relation: this,\n        });\n      }\n    }\n\n    return typeProps;\n  }\n\n  // one{id} has many many{one_id}\n  public static hasMany(defs: Definitions, options: {\n    name?: string,\n    one: string, \n    many: string, \n    oneRelationName?: string, \n    manyRelationName?: string,\n    foreignKeyPrefix?: string,\n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.many;\n    const subjectRelationName = options.manyRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_MANY,\n      subject: { \n        name: options.many,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps\n      }],\n      relatedRelationName,\n      multiple: true,\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\n    });\n  }\n\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\n  public static belongsTo(defs: Definitions, options: {\n    name?: string,\n    oneOfMany: string,\n    belongsTo: string, \n    oneOfManyRelationName?: string,\n    belongsToRelationName?: string, \n    foreignKeyPrefix?: string, \n    owns?: boolean,\n    created?: number,\n    updated?: number,\n  }): Relation \n  {\n    return this.hasMany(defs, {\n      name: options.name,\n      one: options.belongsTo,\n      many: options.oneOfMany,\n      oneRelationName: options.belongsToRelationName,\n      manyRelationName: options.oneOfManyRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n      owns: options.owns,\n    });\n  }\n\n  // hasOne{one_id} has one one{id}\n  public static hasOne(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    one: string,\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName?: string,\n    oneRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const relatedRelationName = options.oneRelationName || options.hasOne;\n    const subjectRelationName = options.hasOneRelationName || options.one;\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related: [{\n        name: options.one,\n        props: relatedProps,\n      }],\n      relatedRelationName,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n  // one{id} belongs to belongsTo{one_id}\n  public static belongsToOne(defs: Definitions, options: {\n    name?: string,\n    one: string,\n    belongsTo: string,\n    required?: boolean,\n    owns?: boolean,\n    oneRelationName?: string,\n    belongsToRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    return this.hasOne(defs, {\n      name: options.name,\n      hasOne: options.belongsTo,\n      one: options.one,\n      required: options.required,\n      owns: options.owns,\n      hasOneRelationName: options.belongsToRelationName,\n      oneRelationName: options.oneRelationName,\n      foreignKeyPrefix: options.foreignKeyPrefix,\n    })\n  }\n\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\n  public static hasOnePolymorphic(defs: Definitions, options: {\n    name?: string,\n    hasOne: string,\n    morphs: [string, any],\n    morphsToRelated: MapInput<any, string>,\n    poly: string[],\n    required?: boolean,\n    owns?: boolean,\n    hasOneRelationName: string,\n    polyRelationName?: string,\n    foreignKeyPrefix?: string,\n    created?: number,\n    updated?: number,\n  }): Relation\n  {\n    const subjectRelationName = options.hasOneRelationName;\n    const relatedRelationName = options.polyRelationName || options.hasOne;\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\n    const related = options.poly.map((polyName) => ({\n      name: polyName, \n      props: defs.getEntity(polyName).getPrimary().props\n    }));\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\n\n    return new Relation(defs, {\n      name,\n      created: options.created || now(),\n      updated: options.updated || now(),\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\n      subject: {\n        name: options.hasOne,\n        props: subjectProps,\n      },\n      subjectRelationName,\n      related,\n      relatedRelationName,\n      morphs: options.morphs,\n      morphsToRelated: options.morphsToRelated,\n      required: options.required,\n      owns: options.owns,\n    });\n  }\n\n}","import { Type } from './Type';\nimport { Expression } from './Expression';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { NoExpression } from './exprs/No';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { arraySync, isNumber, now } from './fns';\n\n\nexport interface ProgramOptions\n{\n  name: string;\n  author: string;\n  description: string;\n  meta: any;\n  created: number;\n  updated: number;\n  dataType: any;\n  datasets: ProgramDataSet[];\n  expression: any;\n}\n\nexport interface ProgramDataSet\n{\n  name: string;\n  data: any;\n  created: number;\n  updated: number;\n  meta: any;\n}\n\nexport interface ProgramEvents\n{\n  changed(program: Program): void;\n  renamed(program: Program, oldName: string): void;\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\n  addDataset(program: Program, dataset: ProgramDataSet): void;\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\n  moveDataset(program: Program, dataset: ProgramDataSet, from: number, to: number): void;\n}\n\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\n    return new Program({\n      name,\n      author: '',\n      description: '',\n      meta: null,\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      datasets: [{\n        name: 'Data Set #1',\n        data: Object.create(null),\n        created: now(),\n        updated: now(),\n        meta: null,\n      }],\n      expression: NoExpression.instance,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public author: string;\n  public description: string;\n  public meta: any;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public datasets: ProgramDataSet[];\n  public expression: Expression;\n\n  public constructor(options: ProgramOptions, defs: Definitions) \n  {\n    super();\n\n    this.name = options.name;\n    this.author = options.author;\n    this.description = options.description;\n    this.meta = options.meta;\n    this.created = options.created;\n    this.updated = options.updated;\n    this.dataType = defs.getType(options.dataType);\n    this.expression = defs.getExpression(options.expression);\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\n  }\n\n  public sync(options: ProgramOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.author = options.author;\n      this.description = options.description;\n      this.meta = options.meta;\n      this.created = options.created;\n      this.updated = options.updated;\n      this.dataType = options instanceof Program\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.expression = options instanceof Program\n        ? options.expression\n        : defs.getExpression(options.expression);\n\n      arraySync(\n        this.datasets, \n        options instanceof Program\n          ? options.datasets\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\n        (a, b) => a.name === b.name || a.created === b.created,\n        (target, value) => this.addDataset(value, true),\n        (target, index, value) => this.removeDataset(index, true),\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\n      );\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ProgramOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ProgramOptions \n  {\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\n\n    return {\n      name,\n      author,\n      description,\n      meta,\n      created,\n      updated,\n      dataType: dataType.encode(),\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\n      expression: expression.encode(),\n    };\n  }\n\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\n  {\n    this.datasets.push(dataset);\n\n    this.trigger('addDataset', this, dataset);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public moveDataset(dataset: ProgramDataSet | number, to: number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n    const inside = to >= 0 && to < this.datasets.length;\n    const movable = exists && inside;\n\n    if (movable)\n    {\n      const data = this.datasets[index];\n\n      this.datasets.splice(index, 1);\n      this.datasets.splice(to, 0, data);\n\n      this.trigger('moveDataset', this, data, index, to);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return movable;\n  }\n\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: Partial<ProgramDataSet>, delayChange: boolean = false): boolean\n  {\n    const target = isNumber(dataset)\n      ? this.datasets[dataset]\n      : dataset;\n    const exists = !!target;\n\n    if (exists)\n    {\n      Object.assign(target, newDataset);\n\n      this.trigger('updateDataset', this, target);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\n  {\n    const index = isNumber(dataset)\n      ? dataset\n      : this.datasets.indexOf(dataset);\n    const exists = index >= 0 && index < this.datasets.length;\n\n    if (exists)\n    {\n      const removed = this.datasets[index];\n\n      DataTypes.arrayRemove(this.datasets, index);\n      \n      this.trigger('removeDataset', this, removed);\n\n      if (!delayChange)\n      {\n        this.changed();\n      }\n    }\n\n    return exists;\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    const cmd = runtime.getCommand(transform);\n\n    this.datasets.forEach((dataset) => \n    {\n      dataset.data = cmd({ value: dataset.data });\n    });\n\n    this.changed();\n  }\n  \n}","import { Type } from './Type';\nimport { Definitions } from './Definitions';\nimport { Types } from './Types';\nimport { Expression } from './Expression';\nimport { Runtime } from './Runtime';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\nimport { now } from './fns';\n\n\nexport interface ReferenceDataOptions\n{\n  name: string;\n  created: number;\n  updated: number;\n  dataType: any;\n  data: any;\n  meta: any;\n}\n\nexport interface ReferenceDataEvents\n{\n  changed(data: ReferenceData): void;\n  renamed(data: ReferenceData, oldName: string): void;\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\n}\n\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\n{\n\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\n    return new ReferenceData({\n      name: '',\n      created: now(),\n      updated: now(),\n      dataType: Types.object(),\n      data: Object.create(null),\n      meta: null,\n      ...defaults,\n    }, defs);\n  }\n\n  public name: string;\n  public created: number;\n  public updated: number;\n  public dataType: Type;\n  public data: any;\n  public meta: any;\n\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\n  {\n    super();\n\n    this.name = options.name;\n    this.created = options.created || now();\n    this.updated = options.updated || now();\n    this.meta = options.meta;\n    this.dataType = defs.getType(options.dataType);\n    this.data = this.dataType.fromJson(options.data);\n  }\n\n  public sync(options: ReferenceDataOptions, defs: Definitions)\n  {\n    if (this.hasChanges(options))\n    {\n      this.name = options.name;\n      this.created = options.created || now();\n      this.updated = options.updated || now();\n      this.meta = options.meta;\n      this.dataType = options instanceof ReferenceData\n        ? options.dataType\n        : defs.getType(options.dataType);\n      this.data = options instanceof ReferenceData\n        ? options.data\n        : this.dataType.fromJson(options.data);\n\n      this.trigger('sync', this, options, defs);\n      this.changed();\n    }\n  }\n\n  public hasChanges(options: ReferenceDataOptions): boolean\n  {\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\n  }\n\n  public changed()\n  {\n    this.updated = now();\n\n    this.trigger('changed', this);\n  }\n\n  public encode(): ReferenceDataOptions\n  {\n    const { name, created, updated, meta, dataType, data } = this;\n\n    return {\n      name,\n      created,\n      updated,\n      meta,\n      dataType: dataType.encode(),\n      data: dataType.toJson(data),\n    };\n  }\n\n  public refactor(transform: Expression, runtime: Runtime)\n  {\n    this.data = runtime.run(transform, { value: this.data });\n\n    this.changed();\n  }\n\n}\n","\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\nimport { Expression } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { ID } from './ID';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { NullType } from './Null';\nimport { Operations } from '../Operation';\nimport { Computeds } from '../Computed';\n\n\nconst INDEX_NAME = 1;\n\nexport class ReferenceType extends Type<string>\n{\n\n  public static STEP_REFERENCED = 'referenced';\n\n  public static id = ID.Reference;\n\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\n\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\n\n  public static baseType = new ReferenceType('', null);\n\n  public static decode(data: any[], types: TypeProvider): ReferenceType \n  {\n    const type = data[INDEX_NAME];\n\n    return new ReferenceType( type, types );\n  }\n\n  public static encode(type: ReferenceType): any \n  {\n    return [this.id, type.options];\n  }\n\n  public static describePriority: number = -1;\n  \n  public static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | null\n  {\n    return null;\n  }\n\n  public static registered: boolean = false;\n\n  public static register(): void\n  {\n\n  }\n\n  protected provider: TypeProvider;\n\n  public constructor(name: string, provider: TypeProvider)\n  {\n    super(name);\n\n    this.provider = provider;\n  }\n\n  public getType()\n  {\n    if (!this.provider)\n    {\n      return NullType.baseType;\n    }\n\n    const data = this.provider.getData(this.options);\n\n    return data ? data.dataType : NullType.baseType;\n  }\n\n  public getOperations()\n  {\n    return this.getType().getOperations();\n  }\n\n  public getId(): string\n  {\n    return ReferenceType.id;\n  }\n\n  public merge(type: ReferenceType): void\n  {\n    \n  }\n\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\n  {\n    return this.getType().getSubType(expr, def, context);\n  }\n\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\n  {\n    return this.getType().getSubTypes(def);\n  }\n\n  public getExactType(value: any): Type \n  {\n    return this.getType().getExactType(value);\n  }\n\n  public getSimplifiedType(): Type\n  {\n    return this.getType().getSimplifiedType();\n  }\n\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \n  {\n    return other instanceof ReferenceType\n      ? this.getType().isCompatible(other.getType(), options)\n      : this.getType().isCompatible(other, options);\n  }\n\n  public isOptional(): boolean\n  {\n    return this.getType().isOptional();\n  }\n\n  public isSimple(): boolean\n  {\n    return this.getType().isSimple();\n  }\n\n  protected acceptsOtherTypes(): boolean\n  {\n    return true;\n  }\n  \n  public traverse<R>(traverse: Traverser<Type, R>): R\n  {\n    return traverse.enter(this, () => \n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\n    );\n  }\n\n  public getTypeFromStep(step: TraverseStep): Type | null\n  {\n    return step === ReferenceType.STEP_REFERENCED\n      ? this.getType() \n      : null;\n  }\n\n  public setParent(parent: Type = null): void\n  {\n    this.parent = parent;\n  }\n\n  public removeDescribedRestrictions(): void\n  {\n    \n  }\n\n  public getCreateExpression(): Expression\n  {\n    return this.getType().getCreateExpression();\n  }\n\n  public getValidateExpression(): Expression\n  {\n    return this.getType().getValidateExpression();\n  }\n\n  public getCompareExpression(): Expression\n  {\n    return this.getType().getCompareExpression();\n  }\n\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\n  {\n    // from & to === referenced\n    return newValue;\n  }\n  \n  public isValid(value: any): boolean \n  {\n    return this.getType().isValid(value);\n  }\n\n  public normalize(value: any): any\n  {\n    return this.getType().normalize(value);\n  }\n\n  public newInstance(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public clone(): ReferenceType\n  {\n    return new ReferenceType(this.options, this.provider);\n  }\n\n  public encode(): any \n  {\n    return ReferenceType.encode(this);\n  }\n\n  public create(): any\n  {\n    return this.getType().create();\n  }\n\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\n  {\n    return this.getType().random(rnd);\n  }\n\n  public fromJson(json: any): any\n  {\n    return this.getType().fromJson(json);\n  }\n\n  public toJson(value: any): any\n  {\n    return this.getType().toJson(value);\n  }\n\n}","import { isString, isNumber, isArray, isObject } from '../fns';\n\n\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\n\n\nexport class FastMap<T>\n{\n\n  public indexes: Record<string, number>;\n  public keys: string[];\n  public values: T[];\n\n  public constructor(options?: FastMapOptions<T>)\n  {\n    this.clear();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: FastMapOptions<T>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: FastMapOptions<T>)\n  {\n    if (options instanceof Map)\n    {\n      for (const [key, value] of options.entries())\n      {\n        this.set(key, value);\n      }\n    }\n    else if (options instanceof FastMap)\n    {\n      for (let i = 0; i < options.length(); i++)\n      {\n        this.set(options.keyAt(i), options.valueAt(i));\n      }\n    }\n    else if (isArray(options))\n    {\n      for (const [key, value] of options)\n      {\n        this.set(key, value);\n      }\n    }\n    else if (isObject(options))\n    {\n      for (const key in options)\n      {\n        this.set(key, options[key]);\n      }\n    }\n  }\n\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\n  {\n    const all = new FastMap(options);\n\n    this.filter((_, key) => all.has(key));\n    \n    all.forEach((value, key) => {\n      if (this.has(key) && combine) {\n        combine(this.get(key), value);\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  public clear()\n  {\n    this.indexes = Object.create(null);\n    this.keys = [];\n    this.values = [];\n  }\n\n  public length(): number\n  {\n    return this.keys.length;\n  }\n\n  public valueAt(i: number): T | undefined\n  {\n    return this.values[i];\n  }\n\n  public keyAt(i: number): string | undefined\n  {\n    return this.keys[i];\n  }\n\n  public pairAt(i: number): [string, T] | [undefined, undefined]\n  {\n    return [this.keys[i], this.values[i]];\n  }\n\n  public has(key: string | T): boolean\n  { \n    return isString(key) ? key in this.indexes : this.values.includes(key);\n  }\n\n  public set(key: string, value: T)\n  {\n    const i = this.indexes[key];\n\n    if (isNumber(i)) \n    {\n      this.values.splice(i, 1, value);\n    } \n    else \n    {\n      this.indexes[key] = this.values.length;\n      this.values.push(value);\n      this.keys.push(key);\n    }\n  }\n\n  public rekey(old: string | T, newKey: string): boolean\n  {\n    const i = this.indexOf(old);\n    const exists = i !== -1;\n\n    if (exists)\n    {\n      delete this.indexes[this.keys[i]];\n      this.indexes[newKey] = i;\n      this.keys.splice(i, 1, newKey);\n    }\n\n    return exists;\n  }\n\n  public sort(cmp: (a: T, b: T) => number)\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\n  }\n\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\n  {\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\n  }\n\n  public reindex(): void\n  {\n    const keys = this.keys;\n    const indexes = Object.create(null);\n\n    for (let i = 0; i < keys.length; i++)\n    {\n      indexes[keys[i]] = i;\n    }\n\n    this.indexes = indexes;\n  }\n\n  public swap(i: number, k: number): boolean\n  {\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\n    {\n      return false;\n    }\n\n    const ikey = this.keys[i];\n    const ivalue = this.values[i];\n    const kkey = this.keys[k];\n    const kvalue = this.values[k];\n\n    this.indexes[ikey] = k;\n    this.indexes[kkey] = i;\n\n    this.keys.splice(i, 1, kkey);\n    this.keys.splice(k, 1, ikey);\n\n    this.values.splice(i, 1, kvalue);\n    this.values.splice(k, 1, ivalue);\n\n    return true;\n  }\n\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\n  {\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\n  }\n\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\n  {\n    const i = this.indexOf(key);\n\n    if (i !== -1)\n    {\n      const { keys, values } = this;\n      const removing = values[i];\n\n      if (respectOrder)\n      {\n        this.removeAt(i);\n      }\n      else\n      {\n        delete this.indexes[keys[i]];\n        const lastKey = keys.pop();\n        const lastValue = values.pop();\n\n        if (i !== keys.length)\n        {\n          keys.splice(i, 1, lastKey);\n          values.splice(i, 1, lastValue);\n          this.indexes[lastKey] = i;\n        }\n      }\n\n      return removing;\n    }\n  }\n\n  public removeAt(i: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (i < 0 || i >= keys.length)\n    {\n      return false;\n    }\n\n    delete this.indexes[keys[i]];\n    keys.splice(i, 1);\n    values.splice(i, 1);\n\n    while (++i < keys.length)\n    {\n      this.indexes[keys[i]]--;\n    }\n\n    return true;\n  }\n\n  public move(from: number, to: number): boolean\n  {\n    const { keys, values } = this;\n\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\n    {\n      return false;\n    }\n\n    if (from !== to)\n    {\n      const value = values[from];\n      const key = keys[from];\n\n      values.splice(from, 1);\n      keys.splice(from, 1);\n\n      values.splice(to, 0, value);\n      keys.splice(to, 0, key);\n      \n      this.reindex();\n    }\n\n    return true;\n  }\n\n  public moveToFront(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, 0);\n  }\n\n  public moveToBack(key: string | T): boolean\n  {\n    const i = this.indexOf(key);\n\n    if (i === -1)\n    {\n      return false;\n    }\n\n    return this.move(i, this.keys.length - 1);\n  }\n\n  public indexOf(key: string | T): number\n  {\n    return isString(key) \n      ? key in this.indexes\n        ? this.indexes[key]\n        : -1\n      : this.values.indexOf(key);\n  }\n\n  public keyOf(value: T): string | undefined\n  {\n    const i = this.values.indexOf(value);\n\n    return i === -1 ? undefined : this.keys[i];\n  }\n\n  public toPairs(): Array<[string, T]>\n  {\n    return this.values.map((value, i) => [this.keys[i], value]);\n  }\n\n  public toMap(): Map<string, T>\n  {\n    return new Map(this.toPairs());\n  }\n\n  public toObject(): Record<string, T>\n  {\n    const obj = Object.create(null);\n\n    for (let i = 0; i < this.keys.length; i++)\n    {\n      obj[this.keys[i]] = this.values[i];\n    }\n\n    return obj;\n  }\n\n  public clone(): FastMap<T>\n  {\n    return new FastMap(this);\n  }\n\n  public forEach(iterator: (value: T, key: string) => void)\n  {\n    const { keys, values } = this;\n    let i = 0;\n\n    while (i < keys.length)\n    {\n      const key = keys[i];\n      const value = values[i];\n\n      iterator(value, key);\n\n      if (keys[i] === key)\n      {\n        i++;\n      }\n    }\n  }\n\n  public filter(pass: (value: T, key: string) => boolean)\n  {\n    const { values, keys, indexes } = this;\n    let passed = 0; \n    \n    for (let i = 0; i < values.length; i++) \n    {\n      const value = values[i];\n      const key = keys[i];\n\n      if (pass(value, key))\n      {\n        values[passed] = value;\n        keys[passed] = key;\n        indexes[key] = passed;\n        passed++;\n      }\n      else\n      {\n        delete indexes[key];\n      }\n    }\n\n    if (passed < values.length)\n    {\n      values.splice(passed, values.length - passed);\n      keys.splice(passed, keys.length - passed);\n    }\n  }\n\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\nimport { FastMap, FastMapOptions } from './FastMap';\n\n\nexport interface Named\n{\n  name: string;\n}\n\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\n\nexport class NamedMap<N extends Named> extends FastMap<N>\n{\n\n  public static isNamedArray<N extends Named>(x: any): x is N[]\n  {\n    return isArray(x) && x.length > 0 && isString(x[0].name);\n  }\n\n  public constructor(options?: NamedMapOptions<N>)\n  {\n    super();\n\n    if (options)\n    {\n      this.merge(options);\n    }\n  }\n\n  public reset(options: NamedMapOptions<N>)\n  {\n    this.clear();\n    this.merge(options);\n  }\n\n  public merge(options: NamedMapOptions<N>)\n  {\n    if (NamedMap.isNamedArray(options))\n    {\n      for (const named of options)\n      {\n        this.add(named);\n      }\n    }\n    else\n    {\n      super.merge(options);\n    }\n  }\n\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\n  {\n    super.sync(new NamedMap(options), combine);\n  }\n\n  public syncManual<O extends Named = N>(\n    sourceOptions: NamedMapOptions<O>,\n    add: (target: this, value: O, key: string) => void,\n    remove: (target: this, value: N, key: string) => void,\n    update: (target: this, value: N, newValue: O, key: string) => void,\n    matches?: (a: N, b: O) => boolean,\n  ): this {\n    const source = new NamedMap<O>(sourceOptions);\n\n    if (matches) {\n      arraySync(\n        this.values, \n        source.values, \n        matches, \n        (target, value) => add(this, value, value.name), \n        (target, index, value) => remove(this, value, value.name),\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\n      );\n    } else {\n      this.forEach((targetValue, targetKey) => {\n        const existing = source.get(targetKey);\n        if (existing === undefined) {\n          remove(this, targetValue, targetKey);\n        } else {\n          update(this, targetValue, existing, targetKey);\n        }\n      });\n\n      source.forEach((sourceValue, sourceKey) => {\n        if (!this.has(sourceKey)) {\n          add(this, sourceValue, sourceKey);\n        }\n      });\n    }\n\n    return this;\n  }\n\n  public rename(namedInput: string | N, newName: string): boolean\n  {\n    const named = this.get(namedInput);\n    const valid = !!named && named.name !== newName;\n    \n    if (valid)\n    {\n      this.rekey(named, newName);\n      \n      named.name = newName;\n    }\n\n    return valid;\n  }\n\n  public has(named: string | N): boolean\n  {\n    return this.nameOf(named) in this.indexes;\n  }\n\n  public add(named: N)\n  {\n    this.set(named.name, named);\n  }\n\n  public nameOf(named: string | N): string\n  {\n    return isString(named) ? named : named.name;\n  }\n\n  public valueOf(named: string | N): N\n  {\n    return isString(named) ? this.get(named) : named;\n  }\n\n  public indexOf(named: string | N): number\n  {\n    const i = this.indexes[this.nameOf(named)];\n\n    return isNumber(i) ? i : -1;\n  }\n\n  public keyOf(named: N): string | undefined\n  {\n    return named.name;\n  }\n\n  public clone(): NamedMap<N>\n  {\n    return new NamedMap(this);\n  }\n\n}","\nimport { isArray, isString, objectMap, objectValues, objectEach } from './fns';\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions, TypeDescribeProvider } from './Type';\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\nimport { Computeds, Computed } from './Computed';\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\nimport { Func, FuncOptions, FuncTest } from './Func';\nimport { Types } from './Types';\nimport { Traverser } from './Traverser';\nimport { ID } from './types/ID';\nimport { EntityType } from './types/Entity';\nimport { AnyType } from './types/Any';\nimport { ManyType } from './types/Many';\nimport { ObjectType } from './types/Object';\nimport { NullType } from './types/Null';\nimport { ConstantExpression } from './exprs/Constant';\nimport { GetEntityExpression } from './exprs/GetEntity';\nimport { NoExpression } from './exprs/No';\nimport { InvokeExpression } from './exprs/Invoke';\nimport { MethodExpression } from './exprs/Method';\nimport { GetRelationExpression } from './exprs/GetRelation';\nimport { Runtime } from './Runtime';\nimport { DefinitionProvider } from './DefinitionProvider';\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\nimport { GetDataExpression } from './exprs/GetData';\nimport { ReferenceType } from './types/Reference';\nimport { NamedMap } from './maps/NamedMap';\nimport { FastMap } from './maps/FastMap';\nimport { EventBase } from './EventBase';\nimport { DataTypes } from './DataTypes';\n\n\n\nexport interface DefinitionsImportOptions\n{\n  entities?: Record<string, Entity | EntityOptions>;\n  functions?: Record<string, Func | FuncOptions>;\n  relations?: Record<string, RelationOptions>;\n  programs?: Record<string, Program | ProgramOptions>;\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\n}\n\nexport interface DefinitionsOptions extends DefinitionsImportOptions\n{\n  types?: TypeClass[];\n  expressions?: ExpressionClass[];\n}\n\nexport type DefinitionsReferenceSource = \n  Program | \n  [Program, ProgramDataSet] |\n  Entity | \n  [Entity, 'key' | 'describe'] |\n  [Entity, string, EntityTranscoder] |\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\n  [Entity, Func] |\n  [Entity, Func, 'params' | 'returnType'] |\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\n  Func | \n  [Func, 'params' | 'returnType'] |\n  [Func, FuncTest, 'args' | 'expected'] |\n  Relation |\n  ReferenceData;\n\nexport type DefinitionsEntityReference = (\n  { value: EntityType, root: Type } |\n  { value: GetEntityExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport type DefinitionsDataReference = (\n  { value: ReferenceType, root: Type } |\n  { value: GetDataExpression, root: Expression }\n) & { source: DefinitionsReferenceSource };\n\nexport interface DefinitionsRelationReference\n{\n  value: GetRelationExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsFunctionReference\n{\n  value: InvokeExpression;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionReference<E extends Expression>\n{\n  value: E;\n  root: Expression;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeReference<T extends Type>\n{\n  value: T;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataTypeReference<T extends Type>\n{\n  type: T;\n  data: any;\n  root: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsDataInstance\n{\n  data: any;\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsTypeInstance\n{\n  type: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsExpressionInstance\n{\n  expr: Expression;\n  context: Type;\n  source: DefinitionsReferenceSource;\n}\n\nexport interface DefinitionsEvents\n{\n  changed(defs: Definitions): void;\n  sync(defs: Definitions, options: DefinitionsOptions): void;\n\n  addRelation(defs: Definitions, relation: Relation): void;\n  removeRelation(defs: Definitions, relation: Relation): void;\n  updateRelation(defs: Definitions, relation: Relation): void;\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\n  clearRelations(defs: Definitions, relations: Relation[]): void;\n  changedRelations(defs: Definitions): void;\n  \n  addProgram(defs: Definitions, program: Program): void;\n  removeProgram(defs: Definitions, program: Program): void;\n  updateProgram(defs: Definitions, program: Program): void;\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\n  clearPrograms(defs: Definitions, programs: Program[]): void;\n  changedPrograms(defs: Definitions): void;\n  \n  addEntity(defs: Definitions, entity: Entity): void;\n  removeEntity(defs: Definitions, entity: Entity): void;\n  updateEntity(defs: Definitions, entity: Entity): void;\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\n  clearEntities(defs: Definitions, entities: Entity[]): void;\n  changedEntities(defs: Definitions): void;\n  \n  addFunction(defs: Definitions, func: Func): void;\n  removeFunction(defs: Definitions, func: Func): void;\n  updateFunction(defs: Definitions, func: Func): void;\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\n  clearFunctions(defs: Definitions, functions: Func[]): void;\n  changedFunctions(defs: Definitions): void;\n\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\n  changedMethods(defs: Definitions): void;\n  \n  addData(defs: Definitions, data: ReferenceData): void;\n  removeData(defs: Definitions, data: ReferenceData): void;\n  updateData(defs: Definitions, data: ReferenceData): void;\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\n  clearData(defs: Definitions, data: ReferenceData[]): void;\n  changedData(defs: Definitions): void;\n}\n\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\n{\n\n  public types: Record<string, TypeClass>;\n  public typeList: TypeClass[];\n  public describers: TypeClass[];\n  public parsers: Record<string, TypeParser>;\n  public expressions: Record<string, ExpressionClass>;\n  public operations: Operations;\n  public computeds: Computeds;\n\n  public relations: NamedMap<Relation>;\n  public programs: NamedMap<Program>;\n  public entities: NamedMap<Entity>;\n  public functions: NamedMap<Func>;\n  public data: NamedMap<ReferenceData>;\n\n  public keyExpectedType: Type;\n  public describeExpectedType: Type;\n\n  private legacy: boolean = false;\n\n  public constructor(initial?: DefinitionsOptions)\n  { \n    super();\n\n    this.types = Object.create(null);\n    this.typeList = [];\n    this.describers = [];\n    this.expressions = Object.create(null);\n    this.operations = new Operations('');\n    this.computeds = new Computeds('');\n    this.parsers = Object.create(null);\n\n    this.entities = new NamedMap();\n    this.functions = new NamedMap();\n    this.relations = new NamedMap();\n    this.programs = new NamedMap();\n    this.data = new NamedMap();\n\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\n    this.describeExpectedType = Types.text();\n\n    if (initial) \n    {\n      this.add(initial);\n    }\n  }\n\n  public isLegacy(): boolean\n  {\n    return this.legacy;\n  }\n\n  public setLegacy(): void\n  {\n    this.legacy = true;\n  }\n\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\n  {\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\n  }\n\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\n  { \n    const copy = new Definitions({\n      types: objectValues(this.types),\n      expressions: objectValues(this.expressions),\n      entities: this.encodeMap(this.entities, deepCopy),\n      functions: this.encodeMap(this.functions, deepCopy),\n      relations: this.encodeMap(this.relations, deepCopy),\n      programs: this.encodeMap(this.programs, deepCopy),\n      data: this.encodeMap(this.data, deepCopy),\n    });\n\n    if (initial)\n    {\n      copy.add(initial);\n    }\n\n    return copy;\n  }\n  \n  public changed()\n  {\n    this.trigger('changed', this);\n  }\n\n  public add(options: DefinitionsOptions)\n  {\n    if (options.types) \n    {\n      options.types.forEach(type => this.addType(type, true));\n    }\n\n    this.sortDescribers();\n\n    if (options.expressions) \n    {\n      options.expressions.forEach(expr => this.addExpression(expr));\n    }\n\n    this.import(options);\n  }\n\n  public describe(completeData: any): Type\n  {\n    const described: Map<any, any> = new Map();\n\n    const provider: TypeDescribeProvider = \n    {\n      describe: (data) => \n      {\n        let describedType = described.get(data);\n\n        if (describedType !== undefined) \n        {\n          return describedType;\n        }\n\n        for (const describer of this.describers)\n        {\n          describedType = describer.describe(data, provider, described);\n    \n          if (describedType)\n          {\n            return describedType;\n          }\n        }\n\n        return AnyType.baseType;\n      },\n      merge: (type, data) => \n      {\n        return this.merge(type, data);\n      },\n    };\n\n    return provider.describe(completeData);\n  }\n\n  public merge(type: Type, data: any): Type\n  {\n    return Types.merge(type, this.describe(data));\n  }\n  \n  public sortDescribers()\n  {\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\n  }\n\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \n  {\n    this.types[type.id] = type;\n    this.typeList.push(type);\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\n    this.describers.push(type);\n\n    if (!delaySort)\n    {\n      this.sortDescribers();\n    }\n\n    if (!type.registered)\n    {\n      type.registered = true;\n      type.register();\n    }\n  }\n\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\n  {\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\n\n    return found ? found.name : false;\n  }\n\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const data = dataOptions instanceof ReferenceData \n      ? dataOptions \n      : ReferenceData.create(this, dataOptions);\n\n    const existing = this.data.get(data.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(data, this);\n      }\n      else\n      {\n        this.data.add(data);\n      }\n      \n      this.trigger('updateData', this, data);\n    }\n    else\n    {\n      this.data.add(data);\n\n      this.trigger('addData', this, data);\n    }\n\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getData(name: string): ReferenceData | null\n  {\n    return this.data.get(name, null);\n  }\n\n  public getDatas(): NamedMap<ReferenceData>\n  {\n    return this.data;\n  }\n\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const data = this.data.valueOf(dataInput);\n\n    if (!data)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\n    {\n      return false;\n    }\n\n    this.data.remove(data, respectOrder);\n\n    this.trigger('removeData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearData(delayChange: boolean = false)\n  {\n    const data = this.data.values.slice();\n\n    this.data.clear();\n\n    this.trigger('clearData', this, data);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\n  {\n    const data = this.data.valueOf(dataInput);\n    const oldName = data.name;\n    \n    if (!this.data.rename(data, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getDataReferences(data);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof ReferenceType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    data.trigger('renamed', data, oldName);\n    data.changed();\n\n    this.trigger('renameData', this, data, oldName);\n    this.trigger('changedData', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const func = funcOptions instanceof Func \n      ? funcOptions \n      : Func.create(this, funcOptions);\n\n    const existing = this.functions.get(func.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(func, this);\n      }\n      else\n      {\n        this.functions.add(func);\n      }\n      \n      this.trigger('updateFunction', this, func);\n    }\n    else\n    {\n      this.functions.add(func);\n\n      this.trigger('addFunction', this, func);\n    }\n\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getFunction(name: string): Func | null\n  {\n    return this.functions.get(name, null);\n  }  \n\n  public getFunctions(): NamedMap<Func>\n  {\n    return this.functions;\n  }\n\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const program = programOptions instanceof Program \n      ? programOptions \n      : Program.create(this, programOptions);\n\n    const existing = this.programs.get(program.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(program, this);\n      }\n      else\n      {\n        this.programs.add(program);\n      }\n      \n      this.trigger('updateProgram', this, program);\n    }\n    else\n    {\n      this.programs.add(program);\n\n      this.trigger('addProgram', this, program);\n    }\n\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getProgram(name: string): Program | null\n  {\n    return this.programs.get(name, null);\n  }\n\n  public getPrograms(): NamedMap<Program>\n  {\n    return this.programs;\n  }\n\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n\n    if (!program)\n    {\n      return true;\n    }\n\n    this.programs.remove(program, respectOrder);\n\n    this.trigger('removeProgram', this, program);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearPrograms(delayChange: boolean = false)\n  {\n    const programs = this.programs.values.slice();\n\n    this.programs.clear();\n\n    this.trigger('clearPrograms', this, programs);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n  \n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const entity = entityOptions instanceof Entity\n      ? entityOptions\n      : Entity.create(this, entityOptions);\n\n    const existing = this.entities.get(entity.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(entity, this);\n      }\n      else\n      {\n        this.entities.add(entity);\n      }\n      \n      this.trigger('updateEntity', this, entity);\n    }\n    else\n    {\n      this.entities.add(entity);\n\n      this.trigger('addEntity', this, entity);\n    }\n\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getEntity(name: string): Entity | null\n  {\n    return this.entities.get(name, null);\n  }\n\n  public getEntities(): NamedMap<Entity>\n  {\n    return this.entities;\n  }\n\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\n  {\n    const relation = relationOptions instanceof Relation \n      ? relationOptions \n      : new Relation(this, relationOptions);\n\n    const existing = this.relations.get(relation.name);\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(relation, this);\n      }\n      else\n      {\n        this.relations.add(relation);\n      }\n      \n      this.trigger('updateRelation', this, relation);\n    }\n    else\n    {\n      this.relations.add(relation);\n\n      this.trigger('addRelation', this, relation);\n    }\n\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return this;\n  }\n\n  public getRelation(name: string): Relation | null\n  {\n    return this.relations.get(name, null);\n  }\n\n  public getRelations(entityName: string): EntityRelation[]\n  {\n    const relations: EntityRelation[] = [];\n\n    this.relations.forEach((relation) =>\n    {\n      const subjectRelation = relation.getSubjectRelation(entityName);\n\n      if (subjectRelation)\n      {\n        relations.push(subjectRelation);\n      }\n\n      const relatedRelation = relation.getRelatedRelation(entityName);\n\n      if (relatedRelation)\n      {\n        relations.push(relatedRelation);\n      }\n    });\n\n    return relations;\n  }\n\n  public getEntityProps(name: string): EntityProps[]\n  {\n    const keys: EntityProps[] = [];\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      keys.push(entity.getEntityProps());\n\n      this.relations.forEach((relation) =>\n      {\n        keys.push(...relation.getTypeProps(name));\n      });\n    }\n\n    return keys;\n  }\n\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const relation = this.relations.valueOf(relationInput);\n\n    if (!relation)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\n    {\n      return false;\n    }\n\n    this.relations.remove(relation, respectOrder);\n\n    this.trigger('removeRelation', this, relation);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearRelations(delayChange: boolean = false)\n  {\n    const relations = this.relations.values.slice();\n\n    this.relations.clear();\n\n    this.trigger('clearRelations', this, relations);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\n  {\n    const program = this.programs.valueOf(programInput);\n    const oldName = program.name;\n\n    if (!this.programs.rename(program, newName))\n    {\n      return false;\n    }\n\n    program.trigger('renamed', program, oldName);\n    program.changed();\n\n    this.trigger('renameProgram', this, program, oldName);\n    this.trigger('changedPrograms', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n    \n    return true;\n  }\n\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n    const oldName = entity.name;\n\n    if (!this.entities.rename(entity, newName))\n    {\n      return false;\n    }\n\n    this.relations.forEach((relation) => \n    {\n      relation.rename(name, newName);\n    });\n\n    const refs = this.getEntityReferences(name);\n\n    refs.forEach((ref) => \n    {\n      if (ref.value instanceof EntityType) \n      {\n        ref.value.options = newName;\n      } \n      else \n      {\n        ref.value.name = newName;\n      }\n    });\n\n    const methods = this.getMethodReferences(name);\n\n    methods.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    entity.trigger('renamed', entity, oldName);\n    entity.changed();\n\n    this.trigger('renameEntity', this, entity, oldName);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.renameProp(prop, newProp);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.renameProp(entity.name, prop, newProp);\n      });\n    }\n  }\n\n  public removeEntityProp(name: string | Entity, prop: string)\n  {\n    const entity = this.entities.get(name);\n\n    if (entity)\n    {\n      entity.removeProp(prop);\n\n      this.relations.forEach((relation) =>\n      {\n        relation.removeProp(entity.name, prop);\n\n        if (relation.isEmpty())\n        {\n          this.relations.remove(relation);\n        }\n      });\n    } \n  }\n\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\n    {\n      return false;\n    }\n\n    this.entities.remove(entity, respectOrder);\n\n    this.relations.forEach((relation) =>\n    {\n      relation.remove(name);\n\n      if (relation.isEmpty())\n      {\n        this.relations.remove(relation, respectOrder);\n      }\n    });\n\n    this.trigger('removeEntity', this, entity);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n\n    return true;\n  }\n\n  public clearEntities(delayChange: boolean = false)\n  {\n    const entities = this.entities.values.slice();\n\n    this.entities.clear();\n\n    this.trigger('clearEntities', this, entities);\n    this.trigger('changedEntities', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const refs = this.getEntityDataReferences(entity);\n\n    refs.forEach((ref) =>\n    {\n      ref.root.setParent();\n\n      const dataTransform = ref.type.getValueChangeAt(transform);\n\n      ref.data = runtime.run(dataTransform, { value: ref.data });\n    });\n\n    return refs;\n  }\n\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\n  {\n    const relation = this.relations.valueOf(relationInput);\n    const oldName = relation.name;\n\n    if (!this.relations.rename(relation, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getRelationReferences(relation);\n\n    refs.forEach((ref) => \n    {\n      ref.value.name = newName;\n    });\n\n    relation.trigger('renamed', relation, oldName);\n    relation.changed();\n\n    this.trigger('renameRelation', this, relation, oldName);\n    this.trigger('changedRelations', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.valueOf(funcInput);\n    const oldName = func.name;\n\n    if (!this.functions.rename(func, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(func);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    func.trigger('renamed', func, oldName);\n    func.changed();\n\n    this.trigger('renameFunction', this, func, oldName);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const func = this.functions.get(funcInput);\n\n    if (!func)\n    {\n      return false;\n    }\n\n    if (!func.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getFunctionReferences(funcInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const func = this.functions.valueOf(funcInput);\n\n    if (!func)\n    {\n      return true;\n    }\n\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\n    {\n      return false;\n    }\n\n    this.functions.remove(func, respectOrder);\n\n    this.trigger('removeFunction', this, func);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public clearFunctions(delayChange: boolean = false)\n  {\n    const functions = this.functions.values.slice();\n    \n    this.functions.clear();\n\n    this.trigger('clearFunctions', this, functions);\n    this.trigger('changedFunctions', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n  }\n\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = methodOptions instanceof Func \n      ? methodOptions \n      : Func.create(this, methodOptions);\n\n    const existing = entity.methods[method.name];\n\n    if (existing)\n    {\n      if (sync)\n      {\n        existing.sync(method, this);\n      }\n      else\n      {\n        entity.addMethod(method);\n      }\n      \n      this.trigger('updateMethod', this, method, entity);\n    }\n    else\n    {\n      entity.addMethod(method);\n\n      this.trigger('addMethod', this, method, entity);\n    }\n\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    const oldName = method.name;\n\n    entity.renameMethod(oldName, newName);\n\n    const refs = this.getMethodReferences(entity, method);\n\n    refs.forEach((ref) =>\n    {\n      ref.value.name = newName;\n    });\n\n    method.trigger('renamed', method, oldName);\n    method.changed();\n\n    this.trigger('renameMethod', this, method, entity, oldName);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return refs;\n  }\n\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.renameParameter(oldName, newName))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectSet(ref.value.args, newName, ref.value.args[oldName]);\n      DataTypes.objectRemove(ref.value.args, oldName);\n    });\n\n    return refs;\n  }\n\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (!method.removeParameter(name))\n    {\n      return false;\n    }\n\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\n\n    refs.forEach((ref) =>\n    {\n      DataTypes.objectRemove(ref.value.args, name);\n    });\n\n    return refs;\n  }\n\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\n  {\n    const entity = this.entities.valueOf(entityInput);\n\n    if (!entity) \n    {\n      return false;\n    }\n\n    const method = entity.methods[this.functions.nameOf(methodInput)];\n\n    if (!method) \n    {\n      return false;\n    }\n\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\n    {\n      return false;\n    }\n\n    entity.removeMethod(method.name);\n\n\n    this.trigger('removeMethod', this, method, entity);\n    this.trigger('changedMethods', this);\n\n    if (!delayChange)\n    {\n      this.changed();\n    }\n\n    return true;\n  }\n\n\n  \n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \n  {\n    const parsed = this.getType(value);\n\n    return parsed instanceof kind ? parsed : otherwise;\n  }\n\n  public getType(value: any, otherwise?: Type): Type \n  {\n    if (value instanceof Type)\n    {\n      return value;\n    }\n\n    const id = isArray(value) ? value[0] : value;\n    const data = isArray(value) ? value : [];\n    const parser = this.parsers[id];\n\n    if (!parser)\n    {\n      if (this.entities.has(id))\n      {\n        return this.entities.get(id).type;\n      }\n\n      if (otherwise)\n      {\n        return otherwise;\n      }\n      \n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\n    }\n    \n    return parser(data, this);\n  }\n\n  public getBaseTypes(): Type[]\n  {\n    return this.typeList.map((t) => t.baseType);\n  }\n\n  public getSimpleTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => t.isSimple());\n  }\n\n  public getComplexTypes(): Type[]\n  {\n    return this.getBaseTypes().filter((t) => !t.isSimple());\n  }\n\n  public getSimpleTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => t.baseType.isSimple());\n  }\n\n  public getComplexTypeClasses(): TypeClass[]\n  {\n    return this.typeList.filter((t) => !t.baseType.isSimple());\n  }\n\n  public getComputed(id: string): Computed | null\n  {\n    const comp = this.computeds.get(id);\n\n    if (comp)\n    {\n      return comp;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.computeds.get(id) : null;\n  }\n\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\n  {\n    const comp = this.getComputed(id);\n\n    if (!comp)\n    {\n      return null;\n    }\n\n    const op = this.getOperation(comp.op);\n    const types = this.getOperationTypes(comp.op);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\n  }\n\n  public getComputedsFor(valueType: Type): Computed[]\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? typeClass.computeds.list : [];\n  }\n\n  public hasComputed(valueType: Type, id: string): boolean\n  {\n    const typeClass = this.types[valueType.getId()];\n\n    return typeClass ? !!typeClass.computeds.get(id) : false;\n  }\n\n  public getOperation(id: string): OperationGeneric | null\n  {\n    const op = this.operations.get(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.get(id) : null;\n  }\n\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\n  {\n    const op = this.operations.getTypes(id);\n\n    if (op)\n    {\n      return op;\n    }\n\n    const [typeName] = id.split(ID.Delimiter);\n    const type = this.types[typeName];\n\n    return type ? type.operations.getTypes(id) : null;\n  }\n\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\n  {\n    const op = this.getOperation(id);\n    const types = this.getOperationTypes(id);\n\n    if (!op || !types)\n    {\n      return null;\n    }\n\n    const returnType = types.returnType;\n\n    if (returnType instanceof Type)\n    {\n      return returnType;\n    }\n\n    if (!isOperationTypeFunction(returnType))\n    {\n      return returnType.baseType.newInstance();\n    }\n\n    const paramTypes = op.resultDependency.length > 0\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\n      : {};\n\n    return this.getOperationInputType(types.returnType, paramTypes);\n  }\n\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const opTypes = this.getOperationTypes(id);\n\n    if (!opTypes)\n    {\n      return {};\n    }\n\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\n\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\n  }\n\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\n  {\n    const types: TypeMap = {};\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n\n    if (!op || !opTypes)\n    {\n      return types;\n    }\n    \n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) === -1)\n      {\n        const paramType = params[param].getType(this, context);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\n      }\n    }\n\n    for (const param in params)\n    {\n      if (op.hasScope.indexOf(param) !== -1)\n      {\n        const paramType = params[param].getType(this, paramContext);\n\n        if (paramType)\n        {\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\n        }\n      }\n    }\n\n    for (const param of op.params)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\n      }\n    }\n\n    for (const param of op.optional)\n    {\n      if (!types[param])\n      {\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\n      }\n    }\n\n    return types;\n  }\n\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\n  {\n    const op = this.getOperation(id);\n    const opTypes = this.getOperationTypes(id);\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\n    \n    for (const scopeParam of op.scope)\n    {\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\n\n      if (scopeType)\n      {\n        const alias = scopeAlias[scopeParam] || scopeParam;\n\n        scopeTarget[alias] = scopeType.getSimplifiedType();\n      }\n    }\n\n    return scopedContext;\n  }\n\n  public getContextWithScope(original: Type, scope: TypeMap = {})\n  {\n    const context = original instanceof ObjectType\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\n\n    return { context, scope };\n  }\n\n  public getContext(original: Type, scope: TypeMap): Type\n  {\n    return this.getContextWithScope(original, scope).context;\n  }\n\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\n  {\n    type ParamTuple = [string, Type, number];\n\n    const from = this.getOperation(fromId);\n    const fromTypes = this.getOperationTypes(toId);\n    const fromVars = from.params.concat(from.optional);\n    const to = this.getOperation(toId);\n    const toTypes = this.getOperationTypes(toId);\n    const mapping: Record<string, string> = Object.create(null);\n    const mapped: TypeMap = Object.create(null);\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \n      [key, value, fromVars.indexOf(key)];\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\n      .filter(([,, index]) => index >= 0)\n      .sort(([,, a], [,, b]) => a - b);\n\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \n    {\n      if (paramTypes.length === 0)\n      {\n        return null;\n      }\n\n      let chosenIndex = -1;\n\n      if (isOperationTypeFunction(typeInput))\n      {\n        chosenIndex = paramTypes.findIndex(([, type]) => \n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\n        \n        if (chosenIndex === -1)\n        {\n          chosenIndex = paramTypes.findIndex(([, type]) =>\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\n        }\n      }\n      else\n      {\n        const paramType = Types.parse(typeInput);\n\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\n      }\n\n      if (chosenIndex === -1)\n      {\n        return null;\n      }\n\n      const chosen = paramTypes[chosenIndex];\n      paramTypes.splice(chosenIndex, 1);\n      mapping[chosen[0]] = param;\n      mapped[param] = chosen[1];\n    };\n    \n    for (const param of to.params)\n    {\n      const tuple = getParamTuple(param, toTypes.params[param]);\n\n      if (tuple === null)\n      {\n        return null;\n      }\n    }\n\n    for (const optional of to.optional)\n    {\n      getParamTuple(optional, toTypes.optional[optional]);\n    }\n\n    const unmapped = paramTypes.map(([key]) => key);\n    \n    return { from, fromTypes, to, toTypes, mapping, unmapped };\n  }\n\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\n  {\n    return input instanceof Type\n      ? input\n      : 'baseType' in input\n        ? input.baseType.clone()\n        : params\n          ? Types.parse(input(params, this))\n          : null;\n  }\n\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\n  }\n\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\n  {\n    return this.getOperations()\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\n      .filter((mapping) => !!mapping);\n  }\n\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) => \n    {\n      const paramName = op.params[0];\n      const opTypeInput = types.params[paramName];\n\n      if (opTypeInput) \n      {\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\n\n        if (opType)\n        {\n          if (type.acceptsType(opType))\n          {\n            return true;\n          }\n\n          if (acceptsDynamic && \n            op.resultDependency.length > 0 && \n            isOperationTypeFunction(types.returnType) && \n            (opType instanceof AnyType || opType instanceof NullType))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    const type = expr.getType(this, context);\n\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\n  }\n\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\n  {\n    return this.getOperations(({ op, types }) =>\n    {\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\n\n      if (returnType)\n      {\n        if (type.acceptsType(returnType))\n        {\n          return true;\n        }\n\n        if (acceptsDynamic && \n          op.resultDependency.length > 0 && \n          isOperationTypeFunction(types.returnType) && \n          (returnType instanceof AnyType || returnType instanceof NullType))\n        {\n          return true;\n        }\n      }      \n\n      return false;\n    });\n  }\n\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\n  {\n    return this.getOperationsForParamTypes(objectMap(params, expr => \n    {\n      const type = expr.getType(this, context);\n\n      return type ? type.getSimplifiedType() : undefined;\n    }));\n  }\n\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\n  {\n    const paramNames = Object.keys(paramTypes);\n\n    return this.getOperations(({ types }) => \n    {\n      for (const param of paramNames)\n      {\n        const opTypeInput = types.params[param] || types.optional[param];\n\n        if (!opTypeInput)\n        {\n          return false;\n        }\n\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\n\n        if (!opType || !paramTypes[param].acceptsType(opType))\n        {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\n  {\n    const ops: OperationPair[] = [];\n\n    const iterateOperations = (operations: Operations) => \n    {\n      const map = operations.map;\n\n      for (const id in map)\n      {\n        const op = map[id];\n        const types = operations.types[id];\n        const pair = { op, types };\n\n        if (onOperation(pair))\n        {\n          ops.push(pair);\n        }\n      }\n    };\n\n    iterateOperations(this.operations);\n\n    objectEach(this.types, t => iterateOperations(t.operations));\n\n    return ops;\n  }\n\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\n  {\n    if (path.length === 0)\n    {\n      return null;\n    }\n\n    let thisType = path[0].getType(this, context);\n\n    if (!thisType)\n    {\n      return null;\n    }\n\n    let optional = thisType.isOptional();\n\n    for (let i = 1; i < stopBefore; i++)\n    {\n      const node = path[i];\n\n      thisType = node.isPathNode()\n        ? node.getType(this, context, thisType)\n        : thisType.getSubType(node, this, context);\n\n      if (!thisType)\n      {\n        return null;\n      }\n\n      optional = optional || thisType.isOptional();\n    }\n\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\n  }\n\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \n  {\n    this.expressions[expr.id] = expr;\n  }\n\n  public getExpression(value: any): Expression \n  {\n    if (value instanceof Expression)\n    {\n      return value;\n    }\n    else if (isArray(value))\n    {\n      const exprClass = this.expressions[value[0]];\n\n      if (!exprClass)\n      {\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\n      }\n\n      return exprClass.decode(value, this);\n    }\n\n    return new ConstantExpression(value);\n  }\n\n  public isExpression(value: any): value is (Expression | [string, ...any[]])\n  {\n    return value instanceof Expression || (isArray(value) && isString(value[0]) && value[0] in this.expressions);\n  }\n\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\n  { \n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsEntityReference[]).concat(exprs);\n  }\n\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\n  {\n    const name = data ? this.data.nameOf(data) : undefined;\n\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\n      return (!name || name === match.value.options);\n    });\n\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n\n    return (types as DefinitionsDataReference[]).concat(exprs);\n  }\n\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\n  {\n    const name = entity ? this.entities.nameOf(entity) : undefined;\n\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\n      return (!name || name === match.type.options);\n    });\n  }\n\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\n  {\n    const name = relation ? this.relations.nameOf(relation) : undefined;\n\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\n      return (!name || name === match.value.name);\n    });\n  }\n\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const name = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\n  {\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\n    const methodName = func ? this.functions.nameOf(func) : undefined;\n\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\n    });\n  }\n\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\n  {\n    const refs: DefinitionsTypeReference<T>[] = [];\n\n    this.getTypeInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((ref) => {\n        if (ref instanceof typeClass) {\n          refs.push({\n            value: ref, \n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\n  {\n    const refs: DefinitionsDataTypeReference<T>[] = [];\n\n    this.getDataInstances().forEach((instance) => {\n      instance.type.traverse(new Traverser((type) => {\n        if (type instanceof typeClass) {\n          refs.push({\n            type, \n            data: instance.data,\n            root: instance.type,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\n  {\n    const refs: DefinitionsExpressionReference<E>[] = [];\n\n    this.getExpressionInstances().forEach((instance) => {\n      instance.expr.traverse(new Traverser((ref) => {\n        if (ref instanceof exprClass) {\n          refs.push({\n            value: ref, \n            root: instance.expr,\n            source: instance.source,\n          });\n        }\n      }));\n    });\n\n    return refs;\n  }\n\n  public getDataInstances(): DefinitionsDataInstance[]\n  {\n    const instances: DefinitionsDataInstance[] = [];\n\n\n    this.programs.forEach((program) => {\n      program.datasets.forEach((dataset) => {\n        instances.push({\n          data: dataset.data,\n          type: program.dataType,\n          source: [program, dataset],\n        });\n      });\n    });\n\n    this.functions.forEach((func) => {\n      const returnType = func.getReturnType(this);\n\n      func.tests.forEach((test) => {\n        instances.push({\n          data: test.args,\n          type: func.params,\n          source: [func, test, 'args'],\n        });\n\n        instances.push({\n          data: test.expected,\n          type: returnType,\n          source: [func, test, 'expected'],\n        });\n      });\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        data: data.data,\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      if (entity.instances && entity.instances.length > 0) {\n        instances.push({\n          data: entity.instances,\n          type: Types.list(entity.type),\n          source: entity,\n        });\n      }\n\n      objectEach(entity.methods, (method) => {\n        const returnType = method.getReturnType(this);\n\n        method.tests.forEach((test) => {\n          instances.push({\n            data: test.args,\n            type: method.params,\n            source: [entity, method, test, 'args'],\n          });\n\n          instances.push({\n            data: test.expected,\n            type: returnType,\n            source: [entity, method, test, 'expected'],\n          });\n        });\n      });\n    });\n\n    return instances;\n  }\n\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\n  {\n    const instances: DefinitionsTypeInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        type: program.dataType,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        type: func.params,\n        source: [func, 'params'],\n      });\n\n      if (dynamic) {\n        instances.push({\n          type: func.getReturnType(this),\n          source: [func, 'returnType'],\n        });\n      }\n    });\n\n    this.data.forEach((data) => {\n      instances.push({\n        type: data.dataType,\n        source: data,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      instances.push({\n        type: entity.type,\n        source: entity,\n      });\n\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          type: method.params,\n          source: [entity, method, 'params'],\n        });\n\n        if (dynamic) {\n          instances.push({\n            type: method.getReturnType(this),\n            source: [entity, method, 'returnType'],\n          });\n        }\n      });\n\n      if (dynamic) {\n        if (entity.key !== NoExpression.instance) {\n          instances.push({\n            type: entity.getKeyContext(),\n            source: [entity, 'key'],\n          });\n        }\n        \n        if (entity.describe !== NoExpression.instance) {\n          instances.push({\n            type: entity.getDescribeContext(),\n            source: [entity, 'describe'],\n          });\n        }\n      }\n\n      objectEach(entity.transcoders, (transcoder, prop) => {\n        instances.push({\n          type: transcoder.encodedType,\n          source: [entity, prop, transcoder],\n        });\n      });\n    });\n\n    if (dynamic) {\n      this.relations.forEach((relation) => {\n        if (relation.morphs) {\n          instances.push({\n            type: relation.morphs[1],\n            source: relation,\n          });\n        }\n      });\n    }\n\n    return instances;\n  }\n\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\n  {\n    const instances: DefinitionsExpressionInstance[] = [];\n\n    this.programs.forEach((program) => {\n      instances.push({\n        context: program.dataType,\n        expr: program.expression,\n        source: program,\n      });\n    });\n\n    this.functions.forEach((func) => {\n      instances.push({\n        context: func.params,\n        expr: func.expression,\n        source: func,\n      });\n    });\n\n    this.entities.forEach((entity) => {\n      objectEach(entity.methods, (method) => {\n        instances.push({\n          context: method.getParamTypes(),\n          expr: method.expression,\n          source: [entity, method],\n        });\n      });\n\n      if (entity.canStore(this)) {\n        instances.push({\n          context: entity.getKeyContext(),\n          expr: entity.key,\n          source: [entity, 'key'],\n        });\n\n        instances.push({\n          context: entity.getDescribeContext(),\n          expr: entity.describe,\n          source: [entity, 'describe'],\n        });\n\n        objectEach(entity.transcoders, (transcoder, prop) => {\n          instances.push({\n            context: entity.getEncodeContext(prop),\n            expr: transcoder.encode,\n            source: [entity, prop, transcoder, 'encode'],\n          });\n\n          instances.push({\n            context: entity.getDecodeContext(prop),\n            expr: transcoder.decode,\n            source: [entity, prop, transcoder, 'decode'],\n          });\n        });\n      }\n    });\n\n    return instances;\n  }\n\n  public export(): DefinitionsImportOptions\n  {\n    return {\n      entities: this.encodeMap(this.entities),\n      functions: this.encodeMap(this.functions),\n      relations: this.encodeMap(this.relations),\n      programs: this.encodeMap(this.programs),\n      data: this.encodeMap(this.data),\n    };\n  }\n\n  public sync(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      this.data.syncManual(\n        exported.data,\n        (map, value) => this.addData(value, false, true),\n        (map, value) => this.removeData(value, false, true, true),\n        (map, value, newValue) => this.addData(newValue, true, true),\n      );\n    }\n\n    if (exported.functions)\n    {\n      this.functions.syncManual(\n        exported.functions,\n        (map, value) => this.addFunction(value, false, true),\n        (map, value) => this.removeFunction(value, false, true, true),\n        (map, value, newValue) => this.addFunction(newValue, true, true),\n      );\n    }\n\n    if (exported.entities)\n    {\n      this.entities.syncManual(\n        exported.entities,\n        (map, value) => this.addEntity(value, false, true),\n        (map, value) => this.removeEntity(value, false, true, true),\n        (map, value, newValue) => this.addEntity(newValue, true, true),\n      );\n    }\n\n    if (exported.relations)\n    {\n      this.relations.syncManual(\n        exported.relations,\n        (map, value) => this.addRelation(value, false, true),\n        (map, value) => this.removeRelation(value, false, true, true),\n        (map, value, newValue) => this.addRelation(newValue, true, true),\n      );\n    }\n\n    if (exported.programs)\n    {\n      this.programs.syncManual(\n        exported.programs,\n        (map, value) => this.addProgram(value, false, true),\n        (map, value) => this.removeProgram(value, true, true),\n        (map, value, newValue) => this.addProgram(newValue, true, true),\n      );\n    }\n  }\n\n  public import(exported: DefinitionsImportOptions): void\n  {\n    if (exported.data)\n    {\n      objectEach(exported.data, (data) => \n        this.addData(data)\n      );\n    }\n\n    if (exported.functions)\n    {\n      objectEach(exported.functions, (func) => \n        this.addFunction(func)\n      );\n    }\n\n    if (exported.entities) \n    {\n      objectEach(exported.entities, (instance) => \n        this.addEntity(instance)\n      );\n    }\n\n    if (exported.relations)\n    {\n      objectEach(exported.relations, (options) => \n        this.addRelation(options)\n      );\n    }\n\n    if (exported.programs)\n    {\n      objectEach(exported.programs, (options) => \n        this.addProgram(options)\n      );\n    }\n  }\n\n}","\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\nimport { Definitions } from './Definitions';\nimport { Expression, ExpressionClass } from './Expression';\nimport { isArray } from './fns';\nimport { Operation } from './Operation';\nimport { Computed } from './Computed';\nimport { Func } from './Func';\n\n\n\nexport class Runtime<Context = any, Result = any>\n{\n\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\n\n  public defs: Definitions;\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\n  public returnProperty: string;\n\n  public constructor (defs: Definitions) \n  {\n    this.defs = defs;\n    this.ops = Object.create(null);\n    this.exprs = Object.create(null);\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\n  }\n\n  public extend(defs?: Definitions): Runtime<Context, Result>\n  {\n    const copy = new Runtime(defs || this.defs);\n\n    Object.assign(copy.ops, this.ops);\n    Object.assign(copy.exprs, this.exprs);\n    copy.returnProperty = this.returnProperty;\n\n    return copy;\n  }\n\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\n    operation: Operation<P, O, S, any, any>, \n    impl: OperationToCommand<Context, Result, P, O, S>\n  ): this \n  {\n    this.ops[operation.id] = impl;\n\n    return this;\n  }\n\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\n  {\n    this.exprs[type.id] = getter;\n\n    return this;\n  }\n\n  public getFunction (name: string): Func\n  {\n    return this.defs.getFunction(name);\n  }\n\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \n  {\n    return this.ops[id];\n  }\n\n  public getComputed (id: string): Computed | null \n  {\n    return this.defs.getComputed(id);\n  }\n  \n  public getOperationScopeDefaults (id: string): Record<string, string>\n  {\n    const op = this.defs.getOperation(id);\n\n    return op ? op.scopeDefaults : {};\n  }\n\n  public getExpression (id: string): CommandBuilder<Context, Result>\n  {\n    return this.exprs[id];\n  }\n\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\n  {\n    return this.exprs[expr.getId()](expr, provider);\n  }\n\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\n  {\n    return this.eval(expr, provider)(context);\n  }\n\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \n  {\n    return isArray(value)\n      ? this.getCommand(this.defs.getExpression(value), provider)\n      : value instanceof Expression\n        ? this.getCommand(value, provider)\n        : () => value;\n  }\n\n}","import { Expression, ExpressionProvider } from '../Expression';\nimport { DefinitionProvider } from '../DefinitionProvider';\nimport { Type } from '../Type';\nimport { Traverser, TraverseStep } from '../Traverser';\nimport { ValidationHandler } from '../Validate';\nimport { PathExpression } from './Path';\n\n\n\nconst INDEX_VALUE = 1;\nconst INDEX_PATH = 2;\n\nexport class SubExpression extends Expression \n{\n\n  public static id = 'sub';\n\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \n  {\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\n\n    exprs.setLegacy();\n\n    return PathExpression.createForLegacy([value, ...path]);\n  }\n\n  public static encode(expr: SubExpression): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getId(): string\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getComplexity(def: DefinitionProvider, context: Type): number\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getScope(): null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public encode(): any \n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public clone(): Expression\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getType(def: DefinitionProvider, context: Type): Type | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public traverse<R>(traverse: Traverser<Expression, R>): R\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public setParent(parent: Expression = null): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n  public mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean\n  {\n    throw new Error('Sub expression is no longer supported.');\n  }\n\n}","\nimport { Definitions } from '../Definitions';\n\nimport { EntityType } from '../types/Entity';\nimport { AnyType } from '../types/Any';\nimport { BooleanType } from '../types/Boolean';\nimport { ColorType } from '../types/Color';\nimport { DateType } from '../types/Date';\nimport { EnumType } from '../types/Enum';\nimport { ListType } from '../types/List';\nimport { ManyType } from '../types/Many';\nimport { MapType } from '../types/Map';\nimport { NotType } from '../types/Not';\nimport { NullType } from '../types/Null';\nimport { NumberType } from '../types/Number';\nimport { ObjectType } from '../types/Object';\nimport { OptionalType } from '../types/Optional';\nimport { ReferenceType } from '../types/Reference';\nimport { SetType } from '../types/Set';\nimport { TextType } from '../types/Text';\nimport { TupleType } from '../types/Tuple';\n\nimport { AndExpression } from '../exprs/And';\nimport { ChainExpression } from '../exprs/Chain';\nimport { CommentExpression } from '../exprs/Comment';\nimport { ComputedExpression } from '../exprs/Computed';\nimport { ConstantExpression } from '../exprs/Constant';\nimport { DefineExpression } from '../exprs/Define';\nimport { DoExpression } from '../exprs/Do';\nimport { ForExpression } from '../exprs/For';\nimport { GetExpression } from '../exprs/Get';\nimport { GetDataExpression } from '../exprs/GetData';\nimport { GetEntityExpression } from '../exprs/GetEntity';\nimport { GetRelationExpression } from '../exprs/GetRelation';\nimport { IfExpression } from '../exprs/If';\nimport { InvokeExpression } from '../exprs/Invoke';\nimport { MethodExpression } from '../exprs/Method';\nimport { NoExpression } from '../exprs/No';\nimport { NotExpression } from '../exprs/Not';\nimport { ObjectExpression } from '../exprs/Object';\nimport { OperationExpression } from '../exprs/Operation';\nimport { OrExpression } from '../exprs/Or';\nimport { PathExpression } from '../exprs/Path';\nimport { ReturnExpression } from '../exprs/Return';\nimport { SetExpression } from '../exprs/Set';\nimport { SubExpression } from '../exprs/Sub';\nimport { SwitchExpression } from '../exprs/Switch';\nimport { TemplateExpression } from '../exprs/Template';\nimport { TupleExpression } from '../exprs/Tuple';\nimport { UpdateExpression } from '../exprs/Update';\nimport { WhileExpression } from '../exprs/While';\n\n\n\nexport const defs = new Definitions({\n  types: [\n    EntityType,\n    AnyType,\n    BooleanType, \n    ColorType,\n    DateType,\n    EnumType,\n    ListType, \n    ManyType,\n    MapType,\n    NotType,\n    NullType,\n    NumberType, \n    ObjectType, \n    OptionalType,\n    ReferenceType,\n    SetType,\n    TextType,\n    TupleType,\n  ],\n  expressions: [\n    AndExpression,\n    ChainExpression,\n    CommentExpression,\n    ComputedExpression,\n    ConstantExpression,\n    DefineExpression,\n    DoExpression,\n    ForExpression,\n    GetExpression,\n    GetDataExpression,\n    GetEntityExpression,\n    GetRelationExpression,\n    IfExpression,\n    InvokeExpression,\n    MethodExpression,\n    NoExpression,\n    NotExpression,\n    ObjectExpression,\n    OperationExpression,\n    OrExpression,\n    PathExpression,\n    ReturnExpression,\n    SetExpression,\n    SubExpression,    \n    SwitchExpression,\n    TemplateExpression,\n    TupleExpression,\n    UpdateExpression,\n    WhileExpression,\n  ]\n});","\nimport { EntityType } from '../../types/Entity';\nimport { EntityOps } from '../EntityOps';\nimport { Types } from '../../Types';\nimport { isArray, objectMap } from '../../fns';\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\nimport { ObjectType, ObjectOptions } from '../../types/Object';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { EnumType } from '../../types/Enum';\nimport { NullType } from '../../types/Null';\nimport { TextType } from '../../types/Text';\nimport { Type } from '../../Type';\nimport { EntityRelation } from '../../Relation';\n\nconst ops = EntityType.operations;\n\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \n  i.name instanceof EntityType\n    ? i.name\n    : ObjectType.baseType;\n\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\n  if (i.name instanceof EntityType) {\n    return i.name;\n  }\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\n  \n  return entities.length === 0\n    ? NullType.baseType\n    : entities.length === 1\n      ? entities[0]\n      : Types.many(entities);\n};\n\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\n  if (!(i.name instanceof EntityType)) {\n    return null;\n  }\n\n  const relations = provider.getRelations(i.name.options);\n\n  if (i.relation instanceof EnumType) {\n    const relationName = i.relation.options.constants.get('relation');\n\n    if (relationName) {\n      const match = relations.find((r) => r.name === relationName);\n\n      if (match) {\n        return match;\n      }\n    }\n  }\n\n  return relations;\n};\n\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation === null) {\n    return NullType.baseType;\n  } else if (isArray(typeRelation)) {\n    return Types.many(\n      typeRelation.map((relation) => Types.enum(\n        TextType,\n        TextType,\n        [['relation', relation.name]],\n      ))\n    );\n  } else {\n    return i.relation;\n  }\n};\n\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\n  const typeRelation = GetTypeRelation(i, defs);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.relationType;\n  }\n\n  return NullType.baseType;\n};\n\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\n  const typeRelation = GetTypeRelation(i, provider);\n\n  if (typeRelation !== null && !isArray(typeRelation)) {\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\n      return i.related;\n    }\n    \n    return typeRelation.itemType;\n  }\n\n  return NullType.baseType;\n};\n\n\nexport const EntityOpsTypes = \n{\n\n  newInstance: ops.setTypes(EntityOps.newInstance, \n    GetNamedType,\n    { name: GetName },\n    { initial: (i, provider) => {\n      if (i.name instanceof EntityType) {\n        const type = i.name.getType();\n        if (type instanceof ObjectType) {\n          const objectType = type as ObjectType<ObjectOptions>;\n          \n          return Types.object(objectMap(objectType.options.props, (value) => Types.optional(value.clone())));\n        }\n      }\n      return ObjectType.baseType;\n    }}\n  ),\n\n  get: ops.setTypes(EntityOps.get, \n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity) {\n        return AnyType;\n      }\n\n      return Types.list(entity.type);\n    },\n    { name: GetName },\n    { where: BooleanType },\n    { instance: GetNamedType },\n  ),\n\n  getKey: ops.setTypes(EntityOps.getKey,\n    (i, provider) => {\n      if (!(i.name instanceof EntityType)) {\n        return AnyType;\n      }\n      const entity = provider.getEntity(i.name.options);\n      if (!entity || !entity.key) {\n        return AnyType;\n      }\n\n      return entity.keyType;\n    },\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  save: ops.setTypes(EntityOps.save, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  remove: ops.setTypes(EntityOps.remove, \n    BooleanType,\n    { name: GetName, instance: GetNamedType }\n  ),\n\n  setRelated: ops.setTypes(EntityOps.setRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\n  ),\n\n  addRelated: ops.setTypes(EntityOps.addRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \n  ),\n\n  getRelated: ops.setTypes(EntityOps.getRelated,\n    (i, defs) => GetRelatedRelationType(i, defs),\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\n  ),\n\n  isRelated: ops.setTypes(EntityOps.isRelated, \n    NumberType,\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \n  ),\n\n};\n\nEntityOpsTypes.newInstance.rawTypes = true;\nEntityOpsTypes.get.rawTypes = true;\nEntityOpsTypes.getKey.rawTypes = true;\nEntityOpsTypes.save.rawTypes = true;\nEntityOpsTypes.remove.rawTypes = true;\nEntityOpsTypes.setRelated.rawTypes = true;\nEntityOpsTypes.addRelated.rawTypes = true;\nEntityOpsTypes.removeRelated.rawTypes = true;\nEntityOpsTypes.clearRelated.rawTypes = true;\nEntityOpsTypes.getRelated.rawTypes = true;\nEntityOpsTypes.isRelated.rawTypes = true;\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { AnyOps } from '../AnyOps';\nimport { OptionalType } from '../../types/Optional';\nimport { ManyType } from '../../types/Many';\nimport { NullType } from '../../types/Null';\nimport { Type } from '../../Type';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = AnyType.operations;\n\nexport const AnyOpsTypes = \n{\n\n  // Operations\n\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\n\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\n\n  isDefined: ops.setTypes(AnyOps.isDefined, \n    BooleanType,\n    { value: AnyType }\n  ),\n\n  getDefined: ops.setTypes(AnyOps.getDefined, \n    BooleanType,\n    { value: AnyType, defined: AnyType },\n    {},\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\n  ),\n\n  coalesce: ops.setTypes(AnyOps.coalesce, \n    i => {\n      let optional = true;\n      const types: Type[] = [];\n      const checkType = (x?: Type) => {\n        if (!optional) return;\n        \n        if (x) {\n          let xoptional = x instanceof OptionalType;\n          const xinner = xoptional ? x.options as Type : x;\n\n          if (xinner instanceof ManyType) {\n            xinner.options.forEach((y) => {\n              const yoptional = y instanceof OptionalType;\n              const yinner = yoptional ? y.options as Type : y;\n\n              xoptional = xoptional || yoptional;\n\n              if (!types.some(t => t.exactType(yinner))) {\n                types.push(yinner);\n              }\n            });\n          }\n\n          optional = optional && xoptional;\n\n          if (!types.some(t => t.exactType(xinner))) {\n            types.push(xinner);\n          }\n        }\n      };\n\n      checkType(i.a);\n      checkType(i.b);\n      checkType(i.c);\n      checkType(i.d);\n      checkType(i.e);\n\n      return types.length > 1\n        ? optional\n          ? Types.optional(new ManyType(types))\n          : new ManyType(types)\n        : types.length === 1\n          ? optional\n            ? Types.optional(types[0])\n            : types[0]\n          : NullType;\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  require: ops.setTypes(AnyOps.require, \n    i => i.value instanceof OptionalType\n      ? i.value.options\n      : i.value || AnyType,\n    { value: i => i.value || AnyType },\n  ),\n\n  ternary: ops.setTypes(AnyOps.ternary, \n    (i) => {\n      if (i.truthy && i.falsy) {\n        return Types.mergeMany([i.truthy, i.falsy]);\n      } else if (i.truthy) {\n        return i.truthy;\n      } else if (i.falsy) {\n        return i.falsy;\n      } else {\n        return AnyType;\n      }\n    },\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\n\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\n\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\n\n  // Casts\n\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\n\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\n\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\n\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\n\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\n\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\n\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\n\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\n\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\n\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\n\n};\n","\nimport { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\n\nimport { BooleanOps } from '../BooleanOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = BooleanType.operations;\n\n\nexport const BooleanOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(BooleanOps.create, BooleanType),\n\n  // Operations\n\n  maybe: ops.setTypes(BooleanOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\n\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\n\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\n\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\n\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\n\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\n\n  // Casts\n\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\n\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\n\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\n\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\n\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\n\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\n\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\n\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\n\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\n\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\n\n};","\nimport { ColorType } from '../../types/Color';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ColorOps } from '../ColorOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\nimport { Color } from '../../util/color/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = ColorType.operations;\n\nexport const ColorComponentEnum = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['r', 'r'],\n    ['g', 'g'],\n    ['b', 'b'],\n    ['a', 'a'],\n  ]),\n});\n\nexport const ColorOrNumber = new ManyType([\n  ColorType.baseType,\n  new NumberType({ }),\n]);\n\nexport const ColorFormats = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\n    ['#rgb', 'rgb:hexShort'],\n    ['#rrggbb', 'rgb:hex'],\n    ['#rrggbbaa', 'rgb:hexLong'],\n    ['rgb(r, g, b)', 'rgb:rgb'],\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\n    ['hsl(h, s, l)', 'hsl:hsl'],\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\n  ]),\n});\n\nexport const ColorNames = new EnumType({\n  key: TextType.baseType,\n  value: ColorType.baseType,\n  constants: new Map<string, Color>([\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\n  ]),\n});\n\n// a = bottom layer (0 -> 1)\n// b = top layer (0 -> 1)\n\nexport const ColorBlendModes = new EnumType({\n  key: TextType.baseType,\n  value: TextType.baseType,\n  constants: new Map([\n    ['Multiply', 'multiply'],         // a * b\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\n    ['Dodge', 'dodge'],               // a / (1 - b)\n    ['Burn', 'burn'],                 // (1 - b) / a\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\n    ['Addition', 'add'],              // a + b\n    ['Subtract', 'sub'],              // a - b\n    ['Difference', 'diff'],           // b - a\n    ['Darken Only', 'darken'],        // min(a, b)\n    ['Lighten Only', 'lighten'],      // max(a, b)\n  ]),\n});\n\n\nexport const ColorOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ColorOps.create, ColorType),\n\n  // Operations\n\n  maybe: ops.setTypes(ColorOps.maybe, \n    (i) => Types.maybe(i.value, ColorType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(ColorOps.cmp, \n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  copy: ops.setTypes(ColorOps.copy, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  build: ops.setTypes(ColorOps.build, \n    ColorType,\n    { r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType }\n  ),\n\n  map: ops.setTypes(ColorOps.map, \n    ColorType,\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, component: ColorComponentEnum }\n  ),\n\n  op: ops.setTypes(ColorOps.op, \n    ColorType,\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\n    { a: NumberType },\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\n  ),\n\n  clamp: ops.setTypes(ColorOps.clamp, \n    ColorType,\n    { value: ColorType }\n  ),\n\n  add: ops.setTypes(ColorOps.add, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  adds: ops.setTypes(ColorOps.adds, \n    ColorType,\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  sub: ops.setTypes(ColorOps.sub, \n    ColorType,\n    { value: ColorType, subtrahend: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mul: ops.setTypes(ColorOps.mul, \n    ColorType,\n    { value: ColorType, multiplier: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  div: ops.setTypes(ColorOps.div, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  mod: ops.setTypes(ColorOps.mod, \n    ColorType,\n    { value: ColorType, divisor: ColorOrNumber },\n    { alpha: BooleanType }\n  ),\n\n  format: ops.setTypes(ColorOps.format, \n    TextType,\n    { value: ColorType, format: ColorFormats }\n  ),\n\n  parse: ops.setTypes(ColorOps.parse, \n    Types.optional(ColorType),\n    { value: AnyType }\n  ),\n\n  lerp: ops.setTypes(ColorOps.lerp,\n    ColorType,\n    { start: ColorType, end: ColorType, delta: NumberType }\n  ),\n\n  lighten: ops.setTypes(ColorOps.lighten,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  darken: ops.setTypes(ColorOps.darken,\n    ColorType,\n    { value: ColorType, amount: NumberType }\n  ),\n\n  toHSL: ops.setTypes(ColorOps.toHSL,\n    ColorSpaceHSL.type,\n    { value: ColorType }\n  ),\n\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\n    ColorType,\n    { value: ColorSpaceHSL.type }\n  ),\n\n  luminance: ops.setTypes(ColorOps.luminance,\n    NumberType,\n    { value: ColorType }\n  ),\n\n  contrast: ops.setTypes(ColorOps.contrast,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  invert: ops.setTypes(ColorOps.invert,\n    ColorType,\n    { value: ColorType },\n    { alpha: BooleanType }\n  ),\n\n  opaque: ops.setTypes(ColorOps.opaque,\n    ColorType,\n    { value: ColorType }\n  ),\n\n  alpha: ops.setTypes(ColorOps.alpha,\n    ColorType,\n    { value: ColorType, alpha: NumberType }\n  ),\n\n  distance: ops.setTypes(ColorOps.distance,\n    NumberType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  named: ops.setTypes(ColorOps.named,\n    ColorType,\n    { name: ColorNames }\n  ),\n\n  getName: ops.setTypes(ColorOps.getName,\n    TextType,\n    { value: ColorType }\n  ),\n\n  blend: ops.setTypes(ColorOps.blend, \n    ColorType,\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ColorOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ColorOps.isEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType },\n    { epsilon: NumberType }\n  ),\n\n  isLess: ops.setTypes(ColorOps.isLess, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreater: ops.setTypes(ColorOps.isGreater, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ColorType, test: ColorType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\n\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\n\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\n\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\n\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\n\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\n\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\n\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\n\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\n\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\n\n};\n","import { AnyType } from '../../types/Any';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TextType } from '../../types/Text';\nimport { TupleType } from '../../types/Tuple';\nimport { EnumType } from '../../types/Enum';\nimport { ManyType } from '../../types/Many';\n\nimport { DateOps } from '../DateOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = DateType.operations;\n\nconst DateProperty = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Timestamp', 'timestamp'],\n    ['Timestamp (seconds)', 'timestampSeconds'],\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Day of Month', 'dayOfMonth'],\n    ['Last Day of Month', 'lastDayOfMonth'],\n    ['Day of Year', 'dayOfYear'],\n    ['Day of Week', 'dayOfWeek'],\n    ['Week', 'week'],\n    ['Week of Month', 'weekOfMonth'],\n    ['Weekspan of Month', 'weekspanOfMonth'],\n    ['Full Week of Month', 'fullWeekOfMonth'],\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\n    ['Week of Year', 'weekOfYear'],\n    ['Weekspan of Year', 'weekspanOfYear'],\n    ['Full Week of Year', 'fullWeekOfYear'],\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year'],\n    ['Time Identifier', 'timeIdentifier'],\n    ['Day Identifier', 'dayIdentifier'],\n    ['Week Identifier', 'weekIdentifier'],\n    ['Month Identifier', 'monthIdentifier'],\n    ['Quarter Identifier', 'quarterIdentifier']\n  ])\n});\n\nconst DateUnits = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['Millisecond', 'millis'],\n    ['Second', 'second'],\n    ['Minute', 'minute'],\n    ['Hour', 'hour'],\n    ['Day', 'day'],\n    ['Week', 'week'],\n    ['Month', 'month'],\n    ['Quarter', 'quarter'],\n    ['Year', 'year']\n  ])\n});\n\nconst DateAdjust = new EnumType({\n  key: TextType.baseType.newInstance(),\n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['None', 'none'],\n    ['Floor', 'floor'],\n    ['Ceil', 'ceil'],\n    ['Round', 'round'],\n    ['Truncate', 'truncate'],\n    ['Up', 'up'],\n    ['Down', 'down']\n  ])\n})\n\n\nexport const DateOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(DateOps.create, DateType),\n\n  now: ops.setTypes(DateOps.now, DateType),\n\n  today: ops.setTypes(DateOps.today, DateType),\n\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\n\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\n\n  // Operations\n\n  maybe: ops.setTypes(DateOps.maybe, \n    (i) => Types.maybe(i.value, BooleanType),\n    { value: AnyType } \n  ),\n\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\n\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\n\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\n\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\n\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\n\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\n\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\n\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\n\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\n\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\n\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\n\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\n\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\n\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\n\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\n\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\n\n  // Formatters\n\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\n\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\n \n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\n\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\n\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\n\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\n\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\n\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\n\n  // Casts\n\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\n\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\n\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\n\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\n\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\n\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\n\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\n\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\n\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\n\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\n\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\n\n};","import { Type, TypeInput, TypeMap } from \"../../Type\";\nimport { ObjectType } from \"../../types/Object\";\nimport { EntityType } from \"../../types/Entity\";\nimport { EnumType } from \"../../types/Enum\";\nimport { ManyType } from \"../../types/Many\";\nimport { Types } from \"../../Types\";\nimport { OptionalType } from \"../../types/Optional\";\n\n\n\nexport function MergedObjectType(types: Type[]): ObjectType\n{\n    const props: TypeMap = {};\n\n    for (const type of types) \n    {\n        const objectType = GivenObjectType(type, undefined, MergedObjectType);\n        \n        if (objectType instanceof ObjectType) \n        {\n            const paramProps = objectType.options.props;\n\n            for (const prop in paramProps) \n            {\n                const paramProp = paramProps[prop];\n\n                if (prop in props && paramProp instanceof OptionalType) \n                {\n                    props[prop] = Types.mergeMany([paramProp, props[prop]]);\n                } \n                else \n                {\n                    props[prop] = paramProp;\n                }\n            }\n        }\n    }\n\n    return new ObjectType({ props });\n}\n\nexport function GivenObjectType(type?: Type, otherwise?: TypeInput, merger?: (multiple: Type[]) => Type): TypeInput\n{\n    return type instanceof ObjectType \n        ? type \n        : type instanceof EntityType \n            ? type.getType()\n            : type instanceof EnumType\n                ? GivenObjectType(type.options.value, otherwise)\n                : type instanceof ManyType && type.options.some((e) => GivenObjectType(e)) && merger\n                    ? merger(type.options.filter((e) => GivenObjectType(e)))\n                    : type instanceof OptionalType\n                        ? GivenObjectType(type.options, otherwise)\n                        : otherwise;\n}\n  ","\nimport { Type, TypeInput } from '../../Type';\nimport { ListType } from '../../types/List';\nimport { BooleanType } from '../../types/Boolean';\nimport { NumberType } from '../../types/Number';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\nimport { MapType } from '../../types/Map';\nimport { DateType } from '../../types/Date';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { ListOps } from '../ListOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { GivenObjectType, MergedObjectType } from './helpers';\n\n\nconst ops = ListType.operations;\n\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\nconst GivenList = (i: {list?: Type}) => RequireList(i.list, ListType);\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value, ListType);\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\n\n\nexport const ListOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ListOps.create, ListType),\n\n  createLike: ops.setTypes(ListOps.createLike, \n    GivenList,\n    { list: GivenList },\n  ),\n\n  createFor: ops.setTypes(ListOps.createFor, \n    i => ListType.forItem(i.item || AnyType),\n    { item: i => i.item || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ListOps.maybe, \n    (i) => Types.maybe(i.value, ListType),\n    { value: AnyType } \n  ),\n\n  build: ops.setTypes(ListOps.build, \n    i => ListType.forItem(i.item || AnyType), \n    { count: NumberType, item: i => i.item || AnyType },\n    { sameItem: BooleanType },\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\n  ),\n\n  get: ops.setTypes(ListOps.get, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType }\n  ),\n\n  set: ops.setTypes(ListOps.set, \n    GivenListItemOptional, \n    { list: GivenList, index: NumberType, value: GivenListItem }\n  ),\n\n  add: ops.setTypes(ListOps.add, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addFirst: ops.setTypes(ListOps.addFirst, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  addLast: ops.setTypes(ListOps.addLast, \n    GivenList,\n    { list: GivenList, item: GivenListItem }\n  ),\n\n  insert: ops.setTypes(ListOps.insert, \n    GivenList,\n    { list: GivenList, item: GivenListItem, index: NumberType }\n  ),\n\n  remove: ops.setTypes(ListOps.remove,  \n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  removeFirst: ops.setTypes(ListOps.removeFirst,\n    GivenListItemOptional, \n    { list: GivenList }\n  ),\n\n  removeLast: ops.setTypes(ListOps.removeLast,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  removeAt: ops.setTypes(ListOps.removeAt,  \n    GivenListItemOptional,\n    { list: GivenList, index: NumberType }\n  ),\n\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \n    GivenList,\n    { list: GivenList, where: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  clear: ops.setTypes(ListOps.clear, \n    GivenList,\n    { list: GivenList }\n  ),\n\n  contains: ops.setTypes(ListOps.contains,\n    BooleanType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  find: ops.setTypes(ListOps.find,\n    GivenListItemOptional,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  copy: ops.setTypes(ListOps.copy,\n    GivenList,\n    { list: GivenList },\n    { deepCopy: GivenListItem },\n    { copy: GivenListItem }\n  ),\n\n  reverse: ops.setTypes(ListOps.reverse,\n    GivenList,\n    { list: GivenList }\n  ),\n\n  exclude: ops.setTypes(ListOps.exclude,  \n    GivenList,\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  overlap: ops.setTypes(ListOps.overlap,  \n    GivenList,\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  sort: ops.setTypes(ListOps.sort,   \n    GivenList,\n    { list: GivenList, compare: NumberType },\n    {},\n    GivenListCompareScope\n  ),\n\n  shuffle: ops.setTypes(ListOps.shuffle, \n    GivenList,\n    { list: GivenList },\n    { times: NumberType }\n  ),\n\n  unique: ops.setTypes(ListOps.unique,   \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  duplicates: ops.setTypes(ListOps.duplicates,  \n    GivenList,\n    { list: GivenList, isEqual: BooleanType },\n    { once: BooleanType },\n    GivenListCompareScope\n  ),\n\n  take: ops.setTypes(ListOps.take,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  skip: ops.setTypes(ListOps.skip,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  drop: ops.setTypes(ListOps.drop,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  append: ops.setTypes(ListOps.append,\n    GivenList,\n    { list: GivenList, append: GivenList }\n  ),\n\n  prepend: ops.setTypes(ListOps.prepend,\n    GivenList,\n    { list: GivenList, prepend: GivenList }\n  ),\n\n  indexOf: ops.setTypes(ListOps.indexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\n    NumberType,\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\n    { start: NumberType },\n    GivenListCompareScope\n  ),\n\n  findIndex: ops.setTypes(ListOps.findIndex,\n    NumberType,\n    { list: GivenList, where: BooleanType },\n    { reverse: BooleanType, start: NumberType },\n    GivenListIterationScope\n  ),\n\n  last: ops.setTypes(ListOps.last,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  first: ops.setTypes(ListOps.first,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  count: ops.setTypes(ListOps.count,\n    NumberType,\n    { list: GivenList }\n  ),\n\n  randomList: ops.setTypes(ListOps.randomList,\n    GivenList,\n    { list: GivenList, count: NumberType }\n  ),\n\n  random: ops.setTypes(ListOps.random,\n    GivenListItemOptional,\n    { list: GivenList }\n  ),\n\n  flatten: ops.setTypes(ListOps.flatten,\n    (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n      ? GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n      : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\n        ? MergedObjectType(i.list.options.filter((e) => GivenObjectType(e, undefined, MergedObjectType)))\n        : ObjectType,\n    { list: (i) => i.list instanceof ListType && GivenObjectType(i.list.options.item, undefined, MergedObjectType)\n        ? i.list\n        : i.list instanceof TupleType && i.list.options.some((e) => GivenObjectType(e, undefined, MergedObjectType))\n          ? i.list\n          : ListType\n    }\n  ),\n\n  // Iteration\n\n  join: ops.setTypes(ListOps.join,\n    TextType,\n    { list: GivenList },\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\n    GivenListIterationScope\n  ),\n\n  each: ops.setTypes(ListOps.each,\n    GivenList,\n    { list: GivenList, each: AnyType },\n    { reverse: BooleanType },\n    GivenListIterationScope\n  ),\n\n  filter: ops.setTypes(ListOps.filter,\n    GivenList,\n    { list: GivenList, filter: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  not: ops.setTypes(ListOps.not,\n    GivenList,\n    { list: GivenList, not: BooleanType }, \n    {}, \n    GivenListIterationScope\n  ),\n\n  map: ops.setTypes(ListOps.map,\n    i => ListType.forItem(i.transform || AnyType),\n    { list: GivenList, transform: i => i.transform || AnyType },\n    {},\n    GivenListIterationScope\n  ),\n\n  split: ops.setTypes(ListOps.split,\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\n    { list: GivenList, pass: BooleanType },\n    {},\n    GivenListIterationScope\n  ),\n\n  reduce: ops.setTypes(ListOps.reduce,\n    GivenReducer,\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\n    {},\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\n  ),\n\n  cmp: ops.setTypes(ListOps.cmp,\n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  group: ops.setTypes(ListOps.group, \n    i => ListType.forItem(Types.object({\n      by: i.by || AnyType,\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\n    })),\n    { list: GivenList, by: i => i.by || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toListMap: ops.setTypes(ListOps.toListMap, \n    i => MapType.forItem(\n      ListType.forItem(i.getValue || GivenListItem(i)), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  toMap: ops.setTypes(ListOps.toMap,\n    i => MapType.forItem(\n      i.getValue || GivenListItem(i), \n      i.getKey || AnyType\n    ),\n    { list: GivenList, getKey: i => i.getKey || AnyType },\n    { getValue: i => i.getValue || GivenListItem(i) },\n    GivenListIterationScope\n  ),\n\n  // Joins\n\n  joinInner: ops.setTypes(ListOps.joinInner, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinLeft: ops.setTypes(ListOps.joinLeft, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinRight: ops.setTypes(ListOps.joinRight, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  joinFull: ops.setTypes(ListOps.joinFull, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\n    { },\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\n  ),\n\n  joinCross: ops.setTypes(ListOps.joinCross, \n    i => ListType.forItem(i.join || AnyType),\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\n    { },\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\n  ),\n\n  // Aggregates\n\n  min: ops.setTypes(ListOps.min,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  max: ops.setTypes(ListOps.max,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  sum: ops.setTypes(ListOps.sum,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  avg: ops.setTypes(ListOps.avg,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  std: ops.setTypes(ListOps.std,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  variance: ops.setTypes(ListOps.variance,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  median: ops.setTypes(ListOps.median,\n    Types.optional(NumberType),\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitand: ops.setTypes(ListOps.bitand,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitor: ops.setTypes(ListOps.bitor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  bitxor: ops.setTypes(ListOps.bitxor,\n    NumberType,\n    { list: GivenList, value: NumberType },\n    {},\n    GivenListIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ListOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEmpty: ops.setTypes(ListOps.isEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\n    BooleanType,\n    { list: GivenList }\n  ),\n\n  isEqual: ops.setTypes(ListOps.isEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\n    BooleanType,\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\n    {},\n    GivenListCompareScope\n  ),\n\n  isLess: ops.setTypes(ListOps.isLess, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreater: ops.setTypes(ListOps.isGreater, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\n    {},\n    GivenValueListCompareScope\n  ),\n\n  // Casts\n  \n\n  asAny: ops.setTypes(ListOps.asAny, \n    AnyType, \n    { value: GivenValueList }\n  ),\n\n  asBoolean: ops.setTypes(ListOps.asBoolean, \n    BooleanType,\n    { value: GivenValueList }\n  ),\n\n  asColor: ops.setTypes(ListOps.asColor, \n    ColorType, \n    { value: GivenValueList }\n  ),\n\n  asDate: ops.setTypes(ListOps.asDate, \n    DateType,\n    { value: GivenValueList }\n  ),\n\n  asList: ops.setTypes(ListOps.asList, \n    GivenValueList,\n    { value: GivenValueList }\n  ),\n\n  asMap: ops.setTypes(ListOps.asMap,\n    i => MapType.forItem(GivenValueListItem(i)),\n    { value: GivenValueList }\n  ),\n\n  asNumber: ops.setTypes(ListOps.asNumber, \n    NumberType,\n    { value: GivenValueList }\n  ),\n\n  asObject: ops.setTypes(ListOps.asObject,\n    ObjectType,\n    { value: GivenValueList }\n  ),\n\n  asText: ops.setTypes(ListOps.asText, \n    TextType,\n    { value: GivenValueList }\n  ),\n\n  asTuple: ops.setTypes(ListOps.asTuple, \n    TupleType,\n    { value: GivenValueList }\n  ),\n\n  asSet: ops.setTypes(ListOps.asSet, \n    i => SetType.forItem(GivenValueListItem(i)), \n    { value: GivenValueList }\n  ),\n  \n};\n","\nimport { Type } from '../../Type';\nimport { MapType } from '../../types/Map';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { MapOps } from '../MapOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { objectValues } from '../../fns';\nimport { Types } from '../../Types';\n\n\nconst ops = MapType.operations;\n\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\n\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\n\nexport const MapOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(MapOps.create, MapType),\n\n  createLike: ops.setTypes(MapOps.createLike, \n    GivenMap,\n    { map: GivenMap },\n  ),\n\n  createFor: ops.setTypes(MapOps.createFor, \n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\n    { value: i => i.value || AnyType },\n    { key: i => i.key || TextType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(MapOps.maybe, \n    (i) => Types.maybe(i.value, MapType),\n    { value: AnyType } \n  ),\n\n  get: ops.setTypes(MapOps.get, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  set: ops.setTypes(MapOps.set, \n    GivenMapValueOptional,\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\n    {},\n    { existingValue: GivenMapValue }\n  ),\n\n  has: ops.setTypes(MapOps.has, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  delete: ops.setTypes(MapOps.delete, \n    BooleanType,\n    { map: GivenMap, key: GivenMapKey }\n  ),\n\n  keys: ops.setTypes(MapOps.keys, \n    i => ListType.forItem(GivenMapKey(i)),\n    { map: GivenMap }\n  ),\n\n  values: ops.setTypes(MapOps.values, \n    i => ListType.forItem(GivenMapValue(i)),\n    { map: GivenMap }\n  ),\n\n  entries: ops.setTypes(MapOps.entries, \n    i => Types.object({\n      keys: ListType.forItem(GivenMapKey(i)),\n      values: ListType.forItem(GivenMapValue(i)),\n    }),\n    { map: GivenMap }\n  ),\n\n  pairs: ops.setTypes(MapOps.pairs, \n    i => ListType.forItem(Types.object({\n      key: GivenMapKey(i),\n      value: GivenMapValue(i)\n    })),\n    { map: GivenMap }\n  ),\n\n  clear: ops.setTypes(MapOps.clear, \n    GivenMap,\n    { map: GivenMap }\n  ),\n\n  count: ops.setTypes(MapOps.count, \n    NumberType,\n    { map: GivenMap }\n  ),\n\n  cmp: ops.setTypes(MapOps.cmp, \n    NumberType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\n    {},\n    GivenValueCompareScope\n  ),\n\n  copy: ops.setTypes(MapOps.copy, \n    GivenMap,\n    { map: GivenMap },\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\n    GivenMapIterationScope\n  ),\n\n  map: ops.setTypes(MapOps.map, \n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\n    { map: GivenMap },\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\n    GivenMapIterationScope\n  ),\n\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\n    ObjectType,\n    { map: GivenMap }\n  ),\n\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \n    (i) => {\n      if (!(i.object instanceof ObjectType)) {\n        return MapType;\n      }\n\n      const propTypes = objectValues((i.object as ObjectType).options.props);\n      \n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\n    },\n    { object: i => i.object || ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(MapOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(MapOps.isEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLess: ops.setTypes(MapOps.isLess, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreater: ops.setTypes(MapOps.isGreater, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \n    {},\n    GivenValueCompareScope\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\n\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\n\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\n\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\n\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\n\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\n\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\n\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\n\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\n\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TupleType } from '../../types/Tuple';\nimport { DateType } from '../../types/Date';\n\nimport { NumberOps } from '../NumberOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { EnumType } from '../../types/Enum';\nimport { Types } from '../../Types';\n\n\nconst ops = NumberType.operations;\n\n\nconst BitMethod = new EnumType({\n  key: TextType.baseType.newInstance(), \n  value: TextType.baseType.newInstance(),\n  constants: new Map([\n    ['has the bits', 'contain'],              // value & test === test\n    ['does not have the bits', 'notcontain'], // value & test !== test\n    ['has some of the bits', 'overlap'],      // value & test !== 0\n    ['has none of the bits', 'none'],         // value & test === 0\n    ['has the same bits', 'equal'],           // value === test\n    ['does not have the same bits', 'not'],   // value !== test\n    ['has all bits in', 'subset'],            // test & value === value\n  ])\n});\n\n\nexport const NumberOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(NumberOps.create, NumberType ),\n\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\n\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\n\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\n\n  e: ops.setTypes(NumberOps.e, NumberType ),\n\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\n\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\n\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\n\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\n\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\n\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\n\n  // Binary Operations\n\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\n\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\n\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\n\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\n\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\n\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\n\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\n  \n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\n  \n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\n  \n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\n  \n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\n  \n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\n\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\n\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\n\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\n\n  // Unary Operations\n\n  maybe: ops.setTypes(NumberOps.maybe, \n    (i) => Types.maybe(i.value, NumberType),\n    { value: AnyType } \n  ),\n  \n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\n\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\n  \n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\n  \n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\n  \n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\n  \n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\n  \n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\n  \n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\n  \n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\n  \n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\n  \n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\n  \n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\n  \n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\n  \n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\n  \n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\n  \n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\n  \n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\n\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\n  \n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\n  \n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\n  \n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\n\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\n\n  // Other\n\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\n\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\n\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\n\n  // Generators\n\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\n\n  // Formatters\n\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\n\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\n\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\n\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\n\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\n\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\n\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\n\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\n\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\n\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\n\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\n\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\n\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\n\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \n    BooleanType,\n    { value: NumberType, method: BitMethod, test: NumberType },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\n\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\n\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\n\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\n\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\n\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\n\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\n\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\n\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\n\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { ObjectType } from '../../types/Object';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { AnyType } from '../../types/Any';\n\nimport { ObjectOps } from '../ObjectOps';\nimport { DateType } from '../../types/Date';\nimport { ListType } from '../../types/List';\nimport { MapType } from '../../types/Map';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { MergedObjectType } from './helpers';\n\n\nconst ops = ObjectType.operations;\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\n\nexport const ObjectOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(ObjectOps.create, \n    GivenObject\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(ObjectOps.maybe, \n    (i) => Types.maybe(i.value, ObjectType),\n    { value: AnyType } \n  ),\n\n  has: ops.setTypes(ObjectOps.has, \n    BooleanType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  get: ops.setTypes(ObjectOps.get, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  set: ops.setTypes(ObjectOps.set, \n    GivenObject,\n    { object: GivenObject, key: TextType, value: AnyType },\n    {},\n    { existingValue: AnyType }\n  ),\n\n  delete: ops.setTypes(ObjectOps.delete, \n    AnyType,\n    { object: GivenObject, key: TextType }\n  ),\n\n  cmp: ops.setTypes(ObjectOps.cmp, \n    NumberType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  copy: ops.setTypes(ObjectOps.copy, \n    GivenObject,\n    { object: GivenObject }\n  ),\n\n  merge: ops.setTypes(ObjectOps.merge, \n    (i) => MergedObjectType(['a', 'b', 'c', 'd', 'e'].map(k => i[k])),\n    { a: ObjectType, b: ObjectType },\n    { c: ObjectType, d: ObjectType, e: ObjectType }\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(ObjectOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(ObjectOps.isEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLess: ops.setTypes(ObjectOps.isLess, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreater: ops.setTypes(ObjectOps.isGreater, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \n    BooleanType,\n    { value: ObjectType, test: ObjectType }\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\n\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\n\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\n\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\n\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\n\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\n\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\n\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\n\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\n\n};\n","\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { TextType } from '../../types/Text';\n\nimport { SetOps } from '../SetOps';\nimport { ListType } from '../../types/List';\nimport { ObjectType } from '../../types/Object';\nimport { DateType } from '../../types/Date';\nimport { TupleType } from '../../types/Tuple';\nimport { ColorType } from '../../types/Color';\nimport { MapType } from '../../types/Map';\nimport { Types } from '../../Types';\n\n\nconst ops = SetType.operations;\n\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\n\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\n\nexport const SetOpsTypes = \n{\n\n  // Static\n\n  create: ops.setTypes(SetOps.create, SetType),\n\n  createLike: ops.setTypes(SetOps.createLike, \n    GivenSet,\n    { set: GivenSet },\n  ),\n\n  createFor: ops.setTypes(SetOps.createFor, \n    i => ListType.forItem(i.value || AnyType),\n    { value: i => i.value || AnyType }\n  ),\n\n  // Operations\n\n  maybe: ops.setTypes(SetOps.maybe, \n    (i) => Types.maybe(i.value, SetType),\n    { value: AnyType } \n  ),\n\n  add: ops.setTypes(SetOps.add, \n    GivenSet,\n    { set: GivenSet, value: GivenSetValue },\n  ),\n\n  has: ops.setTypes(SetOps.has, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  delete: ops.setTypes(SetOps.delete, \n    BooleanType,\n    { set: GivenSet, value: GivenSetValue }\n  ),\n\n  values: ops.setTypes(SetOps.values, \n    i => ListType.forItem(GivenSetValue(i)),\n    { set: GivenSet }\n  ),\n\n  clear: ops.setTypes(SetOps.clear, \n    GivenSet,\n    { set: GivenSet }\n  ),\n\n  count: ops.setTypes(SetOps.count, \n    NumberType,\n    { set: GivenSet }\n  ),\n\n  cmp: ops.setTypes(SetOps.cmp, \n    NumberType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  copy: ops.setTypes(SetOps.copy, \n    GivenSet,\n    { set: GivenSet },\n    { deepCopy: GivenSetValue },\n    GivenSetIterationScope\n  ),\n\n  map: ops.setTypes(SetOps.map, \n    i => SetType.forItem(i.transform || GivenSetValue(i)),\n    { set: GivenSet },\n    { transform: i => i.transform || GivenSetValue(i) },\n    GivenSetIterationScope\n  ),\n\n  // Comparisons\n\n  isValid: ops.setTypes(SetOps.isValid, \n    BooleanType, \n    { value: AnyType }\n  ),\n\n  isEqual: ops.setTypes(SetOps.isEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet }, \n  ),\n\n  isLess: ops.setTypes(SetOps.isLess, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreater: ops.setTypes(SetOps.isGreater, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \n    BooleanType,\n    { value: GivenValueSet, test: GivenValueSet },\n  ),\n\n  // Casts\n\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\n\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\n\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\n\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\n\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\n\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\n\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\n\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\n\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\n\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\n\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\n\n};\n","\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { TextType } from '../../types/Text';\nimport { ListType } from '../../types/List';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { TupleType } from '../../types/Tuple';\n\nimport { TextOps } from '../TextOps';\nimport { ColorType } from '../../types/Color';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\n\n\nconst ops = TextType.operations;\nconst TextListType = ListType.forItem(TextType);\nconst RegexMatchType = Types.object({\n  index: NumberType,\n  lastIndex: NumberType,\n  input: TextType,\n  groups: TextListType,\n});\n\n\nexport const TextOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TextOps.create, TextType),\n\n  uuid: ops.setTypes(TextOps.uuid, TextType),\n\n  // Operations\n\n  maybe: ops.setTypes(TextOps.maybe, \n    (i) => Types.maybe(i.value, TextType),\n    { value: AnyType } \n  ),\n\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\n\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\n\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\n\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\n\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\n\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\n\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\n\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\n\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\n\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\n\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\n\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\n\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\n\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\n\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\n\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\n\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\n\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\n\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\n\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\n\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \n    ListType.forItem(RegexMatchType), \n    { value: TextType, regex: TextType }, \n    { ignoreCase: BooleanType, multiline: BooleanType }\n  ),\n\n  regexReplace: ops.setTypes(TextOps.regexReplace, \n    TextType, \n    { value: TextType, regex: TextType, replacement: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n  ),\n\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \n    TextType, \n    { value: TextType, regex: TextType, replace: TextType },\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\n    { match: RegexMatchType }\n  ),\n\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\n\n  // Other\n\n  // Generators\n\n  // Formatters\n\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\n\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\n\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\n\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\n\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\n\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\n\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\n\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\n\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\n\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\n  \n  // Comparisons\n\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\n\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\n\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\n\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\n\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\n\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\n\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\n\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\n\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\n\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\n\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\n\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\n\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\n\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\n\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\n\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\n\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\n\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\n\n};\n","\nimport { TupleType } from '../../types/Tuple';\nimport { NumberType } from '../../types/Number';\nimport { BooleanType } from '../../types/Boolean';\nimport { AnyType } from '../../types/Any';\nimport { DateType } from '../../types/Date';\nimport { MapType } from '../../types/Map';\nimport { ObjectType } from '../../types/Object';\nimport { ListType } from '../../types/List';\nimport { TextType } from '../../types/Text';\n\nimport { TupleOps } from '../TupleOps';\nimport { ColorType } from '../../types/Color';\nimport { Type } from '../../Type';\nimport { SetType } from '../../types/Set';\nimport { Types } from '../../Types';\nimport { NullType } from '../../types/Null';\n\n\nconst ops = TupleType.operations;\n\n\nexport const TupleOpsTypes = \n{\n\n  // Statics\n\n  create: ops.setTypes(TupleOps.create, TupleType),\n\n  // Operations\n\n  maybe: ops.setTypes(TupleOps.maybe, \n    (i) => Types.maybe(i.value, TupleType),\n    { value: AnyType } \n  ),\n\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\n\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\n\n  build: ops.setTypes(TupleOps.build, \n    (i) => {\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\n      let elements: Type[] = [];\n      let list = false;\n      \n      for (const param of params) \n      {\n        const paramType = i[param];\n\n        if (paramType) \n        {\n          if (paramType instanceof TupleType) \n          {\n            elements = elements.concat(paramType.options);\n          }\n          else if (paramType instanceof ListType)\n          {\n            list = true;\n            elements.push(paramType.options.item);\n          }\n          else \n          {\n            elements.push(paramType);\n          }\n        }\n      }\n\n      return list\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\n        : new TupleType(elements);\n    },\n    { a: AnyType, b: AnyType },\n    { c: AnyType, d: AnyType, e: AnyType }\n  ),\n\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\n\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\n\n  // Comparisons\n\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\n\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\n\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\n\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\n\n  // Casts\n\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\n\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\n\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\n\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\n\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\n\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\n\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\n\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\n\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\n\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\n\n};\n","import { isString } from '../fns';\n\n\nexport type Formatter<T> = (item: T) => string;\n\nexport interface FormatterMap<T> \n{\n  [key: string]: Formatter<T>;\n}\n\nexport interface FormatSection<T>\n{\n  size: number;\n  formats: FormatterMap<T>;\n}\n\nexport interface FormatEscapes\n{\n  [first: string]: {\n    start: string;\n    startEscape: string;\n    end: string;\n    endEscape: string;\n  };\n}\n\nexport class Format<T>\n{\n\n  private cached: FormatterMap<T> = {};\n\n  private sections: FormatSection<T>[] = [];\n\n  private escapes: FormatEscapes;\n\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\n  {\n    this.add(formats);\n    this.escapes = escapes;\n  }\n\n  public add(map: FormatterMap<T>): this;\n  public add(key: string, formatter: Formatter<T>): this;\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\n  {\n    if (isString(keyOrMap))\n    {\n      if (formatter)\n      {\n        this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\n      }\n    }\n    else\n    {\n      for (const key in keyOrMap)\n      {\n        this.getSection(key.length).formats[key] = keyOrMap[key];\n      }\n    }\n\n    return this;\n  }\n\n  public getSection(size: number): FormatSection<T>\n  {\n    const guess = this.sections.length - size;\n    const guessSection = this.sections[guess];\n\n    if (guessSection && guessSection.size === size)\n    {\n      return guessSection;\n    }\n\n    for (const section of this.sections)\n    {\n      if (section.size === size)\n      {\n        return section;\n      }\n    }\n\n    const newSection = { size, formats: {} };\n\n    this.sections.push(newSection);\n    this.sortBySize();\n\n    return newSection;\n  }\n\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\n  {\n    if (format in this.cached)\n    {\n      return this.cached[format];\n    }\n\n    const sections = this.sections;\n    const formats: Formatter<T>[] = [];\n    let constant: string = '';\n\n    for (let i = 0; i < format.length; i++)\n    {\n      const escaped = this.getEscaped(format, i);\n\n      if (escaped !== false)\n      {\n        const [ content, end ] = escaped;\n\n        constant += content;\n        i = end - 1;\n\n        continue;\n      }\n\n      let handled: boolean = false;\n\n      for (let k = 0; k < sections.length && !handled; k++)\n      {\n        const section = sections[ k ];\n        const part: string = format.substring( i, i + section.size );\n\n        if (part.length === section.size)\n        {\n          const formatter = section.formats[ part ];\n\n          if (formatter)\n          {\n            formats.push(formatter);\n            i += section.size - 1;\n            handled = true;\n          }\n        }\n      }\n\n      if (handled)\n      {\n        if (constant)\n        {\n          const copy = constant;\n\n          formats.splice(formats.length - 1, 0, () => copy);\n          constant = '';\n        }\n      }\n      else\n      {\n        constant += format.charAt(i);\n      }\n    }\n\n    if (constant)\n    {\n      formats.push(() => constant);\n    }\n\n    const finalFormatter = (item: T) => \n    {\n      let formatted: string = '';\n\n      for (const formatter of formats)\n      {\n        formatted += formatter(item);\n      }\n\n      return formatted;\n    };\n\n    if (cache)\n    {\n      this.cached[format] = finalFormatter;\n    }\n\n    return finalFormatter;\n  }\n\n  public format (format: string, item: T, cache: boolean = false): string\n  {\n    return this.getFormatter(format, cache)(item);\n  }\n\n  private sortBySize()\n  {\n    this.sections.sort((a, b) => b.size - a.size);\n  }\n\n  private getEscaped (x: string, i: number): false | [string, number]\n  {\n    const c = x.charAt(i);\n    const escaped = this.escapes[c];\n\n    if (!escaped)\n    {\n      return false;\n    }\n\n    const { start, end, startEscape, endEscape } = escaped;\n\n    const possibleStart = x.substring(i, i + start.length);\n\n    if (possibleStart !== start)\n    {\n      return false;\n    }\n\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\n\n    if (possibleEscape === startEscape)\n    {\n      return false;\n    }\n\n    i += start.length;\n\n    const endOffset = endEscape.indexOf(end);\n    let last = x.indexOf(end, i);\n    let content: string = x.substring(i, last);\n\n    i = last - endOffset;\n\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\n    {\n      content = content.substring(0, content.length - endOffset);\n      content += end;\n      i += endEscape.length;\n      last = x.indexOf(end, i);\n      content += x.substring(i, last);\n      i = last - endOffset;\n    }\n\n    if (last === -1)\n    {\n      return false;\n    }\n\n    return [content, last + end.length];\n  }\n\n}\n","\nimport { Format } from '../Format';\nimport { LocaleOptions } from '../../Locale';\nimport { padNumber } from '../../fns';\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\n\n\n// tslint:disable: no-magic-numbers\n\n\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\n  M:          ([day]) => (day.getMonth() + 1) + '',\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\n  D:          ([day]) => day.getDate() + '',\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\n  DD:         ([day]) => padNumber(day.getDate(), 2),\n  DDD:        ([day]) => getDayOfYear(day) + '',\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\n  d:          ([day]) => day.getDay() + '',\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\n  e:          ([day]) => getDayOfWeek(day) + '',\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\n  w:          ([day]) => getWeekOfYear(day) + '',\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\n  W:          ([day]) => getWeekOfYearISO(day) + '',\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\n  Y:          ([day]) => day.getFullYear() + '',\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\n  H:          ([day]) => day.getHours() + '',\n  HH:         ([day]) => padNumber(day.getHours(), 2),\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\n  k:          ([day]) => (day.getHours() + 1) + '',\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\n  m:          ([day]) => day.getMinutes() + '',\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\n  s:          ([day]) => day.getSeconds() + '',\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\n  Z:          ([day]) => formatOffset(day, ':'),\n  ZZ:         ([day]) => formatOffset(day, ''),\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\n  x:          ([day]) => day.valueOf() + '',\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\n}, {\n  '[': {\n    start: '[',\n    startEscape: '\\\\[',\n    end: ']',\n    endEscape: '\\\\]'\n  },\n  \"'\": {\n    start: \"'\",\n    startEscape: \"''\",\n    end: \"'\",\n    endEscape: \"''\"\n  }\n});\n\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\n\nfunction formatOffset(day: Date, splitter: string): string\n{\n  const off = getDateOffset(day);\n  const hr = Math.floor(Math.abs(off) / 100);\n  const mn = Math.abs(off) % 100;\n\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\n}"],"sourceRoot":""}