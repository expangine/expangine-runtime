{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./fns.ts","webpack://[name]/./Traverser.ts","webpack://[name]/./Validate.ts","webpack://[name]/./Type.ts","webpack://[name]/./Expression.ts","webpack://[name]/./Operation.ts","webpack://[name]/./Computed.ts","webpack://[name]/./types/ID.ts","webpack://[name]/./ops/BooleanOps.ts","webpack://[name]/./DataTypes.ts","webpack://[name]/./types/Boolean.ts","webpack://[name]/./exprs/Not.ts","webpack://[name]/./exprs/And.ts","webpack://[name]/./ops/AnyOps.ts","webpack://[name]/./types/Null.ts","webpack://[name]/./exprs/No.ts","webpack://[name]/./types/Any.ts","webpack://[name]/./exprs/Define.ts","webpack://[name]/./exprs/Do.ts","webpack://[name]/./exprs/Chain.ts","webpack://[name]/./exprs/Comment.ts","webpack://[name]/./exprs/Get.ts","webpack://[name]/./exprs/Path.ts","webpack://[name]/./exprs/Computed.ts","webpack://[name]/./ops/TextOps.ts","webpack://[name]/./types/Text.ts","webpack://[name]/./ops/MapOps.ts","webpack://[name]/./types/Enum.ts","webpack://[name]/./exprs/Constant.ts","webpack://[name]/./exprs/For.ts","webpack://[name]/./exprs/GetData.ts","webpack://[name]/./ops/EntityOps.ts","webpack://[name]/./ops/ObjectOps.ts","webpack://[name]/./types/Object.ts","webpack://[name]/./types/Entity.ts","webpack://[name]/./exprs/GetEntity.ts","webpack://[name]/./exprs/GetRelation.ts","webpack://[name]/./exprs/If.ts","webpack://[name]/./exprs/Invoke.ts","webpack://[name]/./exprs/Method.ts","webpack://[name]/./exprs/Or.ts","webpack://[name]/./exprs/Operation.ts","webpack://[name]/./exprs/Return.ts","webpack://[name]/./exprs/Set.ts","webpack://[name]/./exprs/Switch.ts","webpack://[name]/./exprs/Template.ts","webpack://[name]/./exprs/Update.ts","webpack://[name]/./exprs/While.ts","webpack://[name]/./ops/TupleOps.ts","webpack://[name]/./ops/NumberOps.ts","webpack://[name]/./ops/ListOps.ts","webpack://[name]/./types/List.ts","webpack://[name]/./types/Tuple.ts","webpack://[name]/./exprs/Tuple.ts","webpack://[name]/./exprs/Object.ts","webpack://[name]/./Exprs.ts","webpack://[name]/./types/Number.ts","webpack://[name]/./locales/en.ts","webpack://[name]/./locales/index.ts","webpack://[name]/./util/date/DateConstants.ts","webpack://[name]/./util/date/DateFunctions.ts","webpack://[name]/./ops/DateOps.ts","webpack://[name]/./types/Date.ts","webpack://[name]/./types/Many.ts","webpack://[name]/./types/Map.ts","webpack://[name]/./types/Optional.ts","webpack://[name]/./types/Not.ts","webpack://[name]/./ops/ColorOps.ts","webpack://[name]/./util/color/Color.ts","webpack://[name]/./util/color/ColorSpace.ts","webpack://[name]/./util/color/ColorSpaceRGB.ts","webpack://[name]/./util/color/ColorSpaceHSL.ts","webpack://[name]/./types/Color.ts","webpack://[name]/./ops/SetOps.ts","webpack://[name]/./Entity.ts","webpack://[name]/./types/Set.ts","webpack://[name]/./Types.ts","webpack://[name]/./LinkedNode.ts","webpack://[name]/./EventBase.ts","webpack://[name]/./Func.ts","webpack://[name]/./Relation.ts","webpack://[name]/./Program.ts","webpack://[name]/./ReferenceData.ts","webpack://[name]/./types/Reference.ts","webpack://[name]/./maps/FastMap.ts","webpack://[name]/./maps/NamedMap.ts","webpack://[name]/./Definitions.ts","webpack://[name]/./Runtime.ts","webpack://[name]/./exprs/Sub.ts","webpack://[name]/./def/index.ts","webpack://[name]/./ops/types/EntityOpsTypes.ts","webpack://[name]/./ops/types/AnyOpsTypes.ts","webpack://[name]/./ops/types/BooleanOpsTypes.ts","webpack://[name]/./ops/types/ColorOpsTypes.ts","webpack://[name]/./ops/types/DateOpsTypes.ts","webpack://[name]/./ops/types/ListOpsTypes.ts","webpack://[name]/./ops/types/MapOpsTypes.ts","webpack://[name]/./ops/types/NumberOpsTypes.ts","webpack://[name]/./ops/types/ObjectOpsTypes.ts","webpack://[name]/./ops/types/SetOpsTypes.ts","webpack://[name]/./ops/types/TextOpsTypes.ts","webpack://[name]/./ops/types/TupleOpsTypes.ts","webpack://[name]/./util/Format.ts","webpack://[name]/./util/date/DateFormat.ts","webpack://[name]/./index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isNumber","isFinite","isString","isArray","Array","isDate","Date","isMap","Map","isSet","Set","isBoolean","isFunction","isObject","isUndefined","isSameClass","a","b","constructor","isWhole","x","epsilon","Math","abs","round","isEmpty","length","_prop","now","getTime","clamp","min","max","toMap","input","objectToArray","v","k","reverseMap","map","from","entries","arraySync","target","source","matches","add","remove","update","taken","targetValue","matchIndex","findIndex","sourceValue","objectSync","objectMap","getValue","getKey","objectReduce","out","objectEach","onEach","undefined","objectValues","transform","push","reduce","initial","objectFromProps","props","prop","getItem","arr","coalesce","y","padNumber","first","pad","substring","padding","before","JSON","stringify","ValidationSeverity","ValidationType","TraverseRemoveNoop","TraverseReplaceNoop","callback","initialResult","replace","this","stack","path","stopped","result","isTraversable","traverse","enter","getInner","pop","step","getStep","Traverser","modify","getResult","newResult","stop","removeOrReplace","replaceWith","canRemove","canReplace","filterClass","construct","filter","pass","traverser","list","slice","count","options","parent","getRequired","isWrapper","isCompatible","other","exact","getSimplifiedType","strict","acceptsOtherTypes","isDeepCompatible","acceptsType","acceptsData","exactType","exactData","getValueChangeExpression","newValue","to","getValueChangeAt","node","getPath","getRootType","type","_","getTypeFromPath","getTypeFromStep","getInnerExpression","def","isPathStart","isPathNode","isPathWritable","defs","getRootExpression","getExpressionFromPath","getExpressionFromStep","steps","validations","context","validate","validateType","expectedComplex","subject","handler","expected","actualComplete","getType","actual","test","isOptional","POSSIBLY_NULL","severity","MEDIUM","INCOMPATIBLE_TYPES","HIGH","THIS","INSTANCE","isOperationTypeFunction","prefix","types","id","getTypes","set","localId","flags","params","optional","scope","hasScope","resultDependency","mutates","complexity","scopeDefaults","forEach","op","setTypes","returnType","comp","setWritable","writeable","ID","Entity","Any","Boolean","Color","Enum","Function","List","Many","Not","Null","Number","Optional","Reference","Relation","Text","Tuple","Delimiter","BooleanOperations","Operations","BooleanComputeds","Computeds","BooleanOps","maybe","and","or","xor","not","cmp","isValid","isTrue","isFalse","isEqual","isNotEqual","asAny","asBoolean","asColor","asDate","asList","asMap","asNumber","asObject","asText","asTuple","asSet","objectSet","obj","objectRemove","arrayAdd","item","arrayRemove","index","splice","arraySet","compareTypes","createTypeMap","compareMap","equalsMap","copyList","jsonList","accessorList","compare","comparator","xtype","ytype","compares","getCompare","less","more","addCompare","addToPriorityList","equals","equalitor","addEquals","copy","containsCycles","original","existing","copierCopy","addCopier","copier","toJson","fromJson","json","addJson","accessors","access","stepValue","addAccessor","accessor","DataTypeRegistry","TYPES","sort","priority","DataTypes","decode","data","BooleanType","encode","describe","describer","baseType","register","getId","getOperations","operations","merge","getSubType","expr","getSubTypes","getExactType","isSimple","setParent","removeDescribedRestrictions","getCreateExpression","getValidateExpression","getCompareExpression","asKey","true","false","normalize","newInstance","clone","random","rnd","computeds","describePriority","registered","expression","exprs","NotExpression","getExpression","getComplexity","getScope","STEP_NOT","expressions","AndExpression","e","expectedType","AnyOperations","AnyComputeds","ANY_COMPLEXITY","AnyOps","isDefined","getDefined","require","ternary","isLess","isLessOrEqual","isGreater","isGreaterOrEqual","NullType","null","instance","NoExpression","$any","AnyType","string","body","DefineExpression","defined","STEP_DEFINE","STEP_BODY","defineContext","getContextWithScope","with","nameOrDefines","append","parse","find","run","DEFAULT_MAX_ITERATIONS","DEFAULT_BREAK","condition","breakVariable","maxIterations","DoExpression","parseInt","MAX_ITERATIONS","hasMax","STEP_CONDITION","bodyContext","getContext","do","while","withBreak","withMax","iterations","chain","ChainExpression","comment","CommentExpression","part","setLegacy","createForLegacy","GetExpression","PathExpression","fromPartial","pathData","isPath","getPathType","thisType","INVALID_EXPRESSION","EMPTY_PATH","isWritable","ComputedExpression","getComputed","getOperation","getComputedReturnType","hasComputed","OUTSIDE_PATH","STEP_EXPRESSION","TextOperations","TextComputeds","TextOps","uuid","prepend","lower","upper","char","repeat","split","chars","sub","indexOf","lastIndexOf","trim","startsWith","endsWith","soundex","metaphone","distance","like","regexTest","regexSplit","regexMatch","regexMatchAll","regexReplace","regexReplaceDynamic","regexIndexOf","base64","unbase64","encodeURI","decodeURI","encodeURIComponent","decodeURIComponent","md5","encrypt","decrypt","toNumber","isNotEmpty","isLower","isUpper","isUuid","RANDOM_CHARACTERS","TextType","decodeOptions","encodeOptions","RegExp","encoded","requireLower","toLowerCase","requireUpper","toUpperCase","localeCompare","o1","o2","is","LENGTH","CHAR","exprType","values","constants","INDEX","otherMin","otherMax","forceLower","otherLower","forceUpper","otherUpper","otherMatches","ignoreCase","charAt","MapOperations","MapComputeds","MapOps","createLike","createFor","has","delete","keys","pairs","clear","toPlainObject","fromPlainObject","EnumType","c1","c2","STEP_KEY","STEP_VALUE","transformKey","constantValue","firstKey","next","constant","ConstantExpression","described","variable","start","end","ForExpression","STEP_START","STEP_END","loop","startAt","endAt","withVariable","GetDataExpression","getData","dataType","MISSING_DATA","MISSING_DATA_NAME","EntityOperations","EntityComputeds","EntityOps","save","setRelated","addRelated","removeRelated","clearRelated","getRelated","isRelated","ObjectOperations","ObjectComputeds","ObjectOps","ObjectType","reader","writer","setObjectCopy","newObject","p1","p2","mergeMany","getWildcardType","wilcardProperty","wildcard","noop","hasFrom","hasTo","propType","subvalue","provider","EntityType","for","STEP_ENTITY","GetEntityExpression","getEntity","MISSING_TYPE","MISSING_TYPE_NAME","GetRelationExpression","getRelation","MISSING_RELATION","MISSING_RELATION_NAME","cases","otherwise","IfExpression","then","concat","STEP_CASES","STEP_IF","STEP_THEN","STEP_ELSE","if","than","elseif","else","args","InvokeExpression","func","getFunction","argTypes","getReturnType","arg","param","paramName","MISSING_FUNCTION","named","nameOrArgs","argName","entity","MethodExpression","methods","method","MISSING_METHOD","INVALID_THIS","OrExpression","scopeAlias","OperationExpression","getOperationReturnType","operation","operationTypes","getOperationTypes","expectedTypes","getOperationExpectedTypes","scopeContext","getOperationScopeContext","expectedRequired","paramContext","operationType","MISSING_EXPRESSION","MISSING_OPERATION","alias","scoped","ReturnExpression","returnValue","SetExpression","STEP_PATH","READONLY","defaultCase","SwitchExpression","tests","tmax","caseIndex","STEP_CASE","STEP_RESULT","STEP_DEFAULT","val","case","testValue","bodyValue","default","template","TemplateExpression","nameOrParams","DEFAULT_CURRENT","currentVariable","UpdateExpression","valueContext","WhileExpression","TupleOperations","TupleComputeds","TupleOps","build","NumberOperations","NumberComputeds","NumberOps","pi","pi2","piHalf","sqrt2","sqrt12","ln2","ln10","log2e","log10e","mul","div","mod","pow","atan2","hypot","choose","gcd","bitAnd","bitOr","bitXor","sqrt","sq","cbrt","floor","ceil","up","down","neg","sign","log","sin","cos","tan","sinh","cosh","asin","acos","atan","factorial","bitFlip","triangleHeight","lerp","toBaseText","toText","toPercent","fromPercent","isZero","isBetween","isDecimal","isPositive","isNegative","isDivisible","bitCompare","ListOperations","ListComputeds","ListOps","addFirst","addLast","insert","removeFirst","removeLast","removeAt","removeWhere","contains","reverse","exclude","overlap","shuffle","unique","duplicates","take","skip","drop","last","randomList","join","each","group","toListMap","joinInner","joinLeft","joinRight","joinFull","joinCross","sum","avg","std","variance","median","bitand","bitor","bitxor","ListType","at","bt","dl","al","newArray","forItem","itemOrClass","some","requiredMin","required","STEP_ITEM","chosenMin","chosenMax","TupleType","elements","tuple","TupleExpression","simplify","ObjectExpression","force","autoSetParent","cast","valueType","targetType","createOnMissing","opId","const","vars","computed","invoke","return","switch","zero","one","compareEqual","compareLess","compareGreater","relation","NumberType","whole","WHOLE_EPSILON","COMPARES_EPSILON","EQUALS_EPSILON","MAP","currentLocale","weekStartsOn","firstWeekContainsDate","am","pm","formatLT","formatLTS","formatL","formatl","formatLL","formatll","formatLLL","formatlll","formatLLLL","formatllll","suffix","items","months","weekdays","MILLIS_IN_SECOND","DAYS_IN_WEEK","MILLIS_IN_MINUTE","MILLIS_IN_HOUR","MILLIS_IN_DAY","MONTHS_IN_QUARTER","MONTHS_IN_YEAR","DAY_MIN","DAY_MAX","HOUR_MAX","MINUTE_MAX","SECOND_MAX","MILLIS_MAX","WEEKDAY_MAX","adjusters","none","truncate","getters","timestamp","valueOf","timestampSeconds","millis","getMilliseconds","second","getSeconds","minute","getMinutes","hour","getHours","day","getDay","dayOfMonth","getDate","lastDayOfMonth","getLastDayOfMonth","dayOfYear","getDayOfYear","dayOfWeek","getDayOfWeek","week","getWeekOfYear","weekOfMonth","getWeekOfMonthISO","weekspanOfMonth","getWeekspanOfMonth","fullWeekOfMonth","getFullWeekOfMonth","lastWeekspanOfMonth","getLastWeekspanOfMonth","lastFullWeekOfMonth","getLastFullWeekOfMonth","weekOfYear","getWeekOfYearISO","weekspanOfYear","getWeekspanOfYear","fullWeekOfYear","getFullWeekOfYear","lastWeekspanOfYear","getLastWeekspanOfYear","lastFullWeekOfYear","getLastFullWeekOfYear","month","getMonth","quarter","getQuarter","year","getFullYear","timeIdentifier","getTimeIdentifier","dayIdentifier","getDayIdentifier","weekIdentifier","getWeekIdentifier","monthIdentifier","getMonthIdentifier","quarterIdentifier","getQuarterIdentifier","setters","mutate","setTime","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","setFullYear","startOf","startOfSecond","startOfMinute","startOfHour","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOf","endOfSecond","endOfMinute","endOfHour","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addQuarters","addYears","diff","diffMilliseconds","diffSeconds","diffMinutes","diffHours","diffDays","diffWeeks","diffMonths","diffQuarters","diffYears","mutator","compareDates","precision","starter","DateParsers","pattern","groups","parseAsUTC","parser","match","exec","times","UTC","withUTC","parsedUTC","parsed","getDaysInMonth","fromEnd","getDaysInYear","getWeekISO","getWeek","getFullWeekOf","getWeeksInYear","lastOfYear","lastWeek","invertedDayOfWeek","getWeekOfMonth","dayOfStart","dayOfWeekFirst","offset","getDateOffset","getTimezoneOffset","isDaylightSavingTime","isLeapYear","daysInMonth","getAbsoluteTimestamp","getTimezoneOffsetInMilliseconds","offsetMinutes","offsetMilliseconds","amount","dayMax","years","date","DateOperations","DateComputeds","DateOps","today","tomorrow","yesterday","fromText","fromTimestamp","fromTimestampSeconds","daysInYear","weeksInYear","timezoneOffset","toISOText","isBefore","isBeforeOrEqual","isAfter","isAfterOrEqual","isStartOf","isEndOf","isDST","unit","DateType","validateMin","validateMax","forceMin","forceMax","toISOString","newDate","withTime","getMin","getMax","forceStartOf","forceEndOf","ManyType","many","ops","forMany","subType","subs","casting","MapType","entryKey","entryValue","newMap","size","valueOrClass","keyOrClass","iterate","onItem","OptionalType","STEP_OPTIONAL","valueMissing","testMissing","NotType","forNot","ColorOperations","ColorComputeds","ColorOps","adds","format","lighten","darken","toHSL","fromHSL","luminance","contrast","invert","opaque","alpha","getName","blend","COMPONENT_MIN","COMPONENT_MAX","isColor","g","clampComponent","code","formatMap","formats","setType","setToColor","toColor","setFromColor","fromColor","addFormat","ColorSpaceRGB","ColorSpace","color","formatter","formatHex","parseComponent","parseFloat","toString","isColorHSL","h","ColorSpaceHSL","H","normalizeHue","L","clampPercent","S","C","X","g1","b1","R","G","B","r1","Cmax","Cmin","delta","colorOptions","ColorType","componentProps","hasAlpha","getFormat","spaceId","formatId","space","spaces","componentType","SetOperations","SetComputeds","SetOps","EntityKeyType","EntityPrimaryType","SetType","setValue","newSet","avalues","bvalues","any","bool","trues","falses","enum","enumForText","text","number","int","resolve","innerType","explode","outerType","oneOf","oneOfOptional","readonlyTypes","noTypes","ar","br","atypes","btypes","an","ktype","matched","koptional","krequired","itype","ioptional","irequired","Types","prev","LinkedNode","linkAfter","curr","isRemoved","listeners","trigger","event","getListeners","results","listener","payload","hasListeners","on","nodes","once","off","created","updated","description","meta","getTypeKind","defaults","Func","sync","hasChanges","addTest","removeTest","updateTest","changed","renameParameter","newName","paramType","removeParameter","exists","delayChange","newTest","assign","removed","paramsTypes","getParamTypes","getParamType","getArguments","returnNew","refactor","runtime","cmd","getCommand","RelationKind","RelationCascade","instances","decodeMethods","transcoders","decodeTranscoders","indexes","decodeIndexes","primaryType","AUTO_INCREMENT","getPrimaryKeyExpression","keyType","getKeyContext","addMethod","removeMethod","transcoder","addTranscoder","removeTranscoder","addIndex","removeIndex","decodeMethod","decodeTranscoder","encodedType","primary","canStore","GIVEN","keyExpectedType","describeType","getDescribeContext","describeExpectedType","updateKeyType","renameProp","newProp","updateIndex","removeProp","indexName","getEntityProps","getPrimary","PRIMARY","setKey","getDynamicPrimaryKey","UUID","getDescribe","getDecodedPropertyTypes","getPropertyTypeFor","forProperty","getPropertyType","getEncodedPropertyTypes","getEncodedType","getDecodedType","getProperties","getKeyReturnType","getEncoded","getEncodedValue","encoder","getEncodeContext","getDecodeExpected","getEncodeExpected","defaultType","getDecoded","getDecodedValue","decoder","getDecodeContext","overrideValueType","getIndexExpectedType","separator","delimiter","returnDynamic","PRIMARY_TYPES","getUniqueIndexes","addPrimary","previous","renameIndex","updateTranscoder","renameMethod","kind","subjectRelationName","related","morphs","decodeTypePair","morphsToRelated","relatedRelationName","relatedToMorphs","multiple","owns","extension","encodeTypePair","pair","getRelatedWithName","rename","renameReference","withName","removeReference","renamePropReference","removePropReference","getPropTypes","getItemType","typesResolved","getSubjectRelation","subjectName","local","itemType","cascade","CASCADE","RESTRICT","SET_NULL","relationType","HAS_MANY","BELONGS_TO","getRelatedRelation","relatedName","NONE","ONE_POLYMORPHIC","ONE","where","getTypeProps","typeProps","FOREIGN","hasMany","oneRelationName","manyRelationName","foreignKeyPrefix","relatedProps","subjectProps","belongsTo","oneOfMany","belongsToRelationName","oneOfManyRelationName","hasOne","hasOneRelationName","HAS_ONE","belongsToOne","hasOnePolymorphic","polyRelationName","poly","polyName","HAS_ONE_POLYMORPHIC","author","datasets","Program","addDataset","removeDataset","updateDataset","dataset","newDataset","ReferenceData","ReferenceType","STEP_REFERENCED","reset","FastMap","keyAt","valueAt","combine","all","pairAt","includes","rekey","old","newKey","toPairs","av","bv","sortByKey","ak","bk","reindex","swap","ikey","ivalue","kkey","kvalue","respectOrder","removing","lastKey","lastValue","move","moveToFront","moveToBack","keyOf","toObject","iterator","passed","isNamedArray","NamedMap","syncManual","sourceOptions","targetKey","sourceKey","namedInput","valid","nameOf","legacy","typeList","describers","parsers","entities","functions","relations","programs","isLegacy","encodeMap","extend","deepCopy","Definitions","addType","sortDescribers","addExpression","import","delaySort","findEntity","found","addData","dataOptions","getDatas","removeData","dataInput","stopWithReferences","getDataReferences","clearData","renameData","oldName","refs","ref","addFunction","funcOptions","getFunctions","addProgram","programOptions","program","getProgram","getPrograms","removeProgram","programInput","clearPrograms","addEntity","entityOptions","getEntities","addRelation","relationOptions","getRelations","entityName","subjectRelation","relatedRelation","removeRelation","relationInput","getRelationReferences","clearRelations","renameProgram","renameEntity","entityInput","getEntityReferences","getMethodReferences","renameEntityProp","removeEntityProp","removeEntity","clearEntities","refactorEntity","getEntityDataReferences","dataTransform","renameRelation","renameFunction","funcInput","getFunctionReferences","renameFunctionParameter","removeFunctionParameter","removeFunction","clearFunctions","methodOptions","methodInput","renameMethodParameter","removeMethodParameter","Error","getBaseTypes","getSimpleTypes","getComplexTypes","getSimpleTypeClasses","getComplexTypeClasses","typeName","getOperationInputType","getComputedsFor","typeClass","paramTypes","getOperationParamTypes","rawTypes","opTypes","scopeParam","scopeType","scopeTarget","scopedContext","getOperationMapping","fromId","fromParamTypes","toId","fromTypes","fromVars","toTypes","mapping","mapped","getParamTuple","typeInput","chosenIndex","chosen","unmapped","getOperationsForExpression","getOperationsForType","getOperationsWithMapping","acceptsDynamic","opTypeInput","opType","getOperationsWithReturnExpression","getOperationsWithReturnType","getOperationsForParamExpressions","getOperationsForParamTypes","paramNames","onOperation","iterateOperations","stopBefore","exprClass","getTypeClassReferences","getExpressionClassReferences","getDataTypeClassReferences","methodName","getTypeInstances","getDataInstances","getExpressionInstances","dynamic","export","exported","returnProperty","Runtime","DEFAULT_RETURN_PROPERTY","setOperation","impl","setExpression","getOperationScopeDefaults","eval","GetNamedType","GetName","GetTypeRelation","GetRelation","typeRelation","GetRelatedRelationType","GetRelatedItemType","EntityOpsTypes","AnyOpsTypes","checkType","yoptional","yinner","truthy","falsy","BooleanOpsTypes","ColorComponentEnum","ColorOrNumber","ColorFormats","ColorNames","ColorBlendModes","ColorOpsTypes","component","addend","addendScale","subtrahend","multiplier","divisor","top","bottom","DateProperty","DateUnits","DateAdjust","DateOpsTypes","inclusive","absolute","adjust","startInclusive","endInclusive","RequireList","ListItem","GivenList","GivenValueList","GivenListItem","GivenListItemOptional","GivenValueListItem","GivenReducer","GivenListCompareScope","GivenValueListCompareScope","GivenListIterationScope","ListOpsTypes","sameItem","fail","reduced","by","onA","onB","joinA","joinB","RequireMap","GivenMap","GivenMapValue","GivenMapValueOptional","GivenMapKey","GivenMapIterationScope","GivenValueMap","GivenValueMapValue","GivenValueCompareScope","MapOpsTypes","existingValue","deepCopyKey","propTypes","BitMethod","NumberOpsTypes","exponent","base","side1","side2","includeMax","minDigits","minPlaces","maxPlaces","useExponent","thousandSeparator","minInclusive","maxInclusive","GivenObject","ObjectOpsTypes","paramProps","paramProp","RequireSet","GivenSet","GivenSetValue","GivenSetIterationScope","GivenValueSet","GivenValueSetValue","SetOpsTypes","TextListType","RegexMatchType","lastIndex","TextOpsTypes","outside","limit","search","regex","multiline","replacement","secret","invalidValue","TupleOpsTypes","element","escapes","cached","sections","keyOrMap","getSection","guess","guessSection","section","newSection","sortBySize","getEscaped","escaped","startEscape","endEscape","possibleEscapeIndex","endOffset","content","getFormatter","cache","handled","finalFormatter","formatted","DateFormat","M","Mo","MM","MMm","MMM","MMMm","MMMM","Q","Qo","D","Do","DD","DDD","DDDo","DDDD","dd","ddd","dddd","E","eo","Eo","w","wo","ww","W","Wo","WW","Y","YY","YYYY","gg","gggg","GG","GGGG","locale","A","HH","hh","kk","mm","ss","SS","SSS","SSSS","SSSSS","SSSSSS","SSSSSSS","SSSSSSSS","SSSSSSSSS","z","toLocaleTimeString","timeZoneName","zz","Z","formatOffset","ZZ","LT","DateFormatter","LTS","LL","ll","LLL","lll","LLLL","llll","splitter","hr","mn"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAQ,qBAAuBD,IAE/BD,EAAK,qBAAuBC,IAR9B,CASGK,OAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,oUC1E9C,SAASC,EAASf,GAEvB,MAAwB,iBAAVA,GAAsBgB,SAAShB,GAGxC,SAASiB,EAASjB,GAEvB,MAAwB,iBAAVA,EAGT,SAASkB,EAAiBlB,GAE/B,OAAOmB,MAAMD,QAAQlB,GAGhB,SAASoB,EAAOpB,GAErB,OAAOA,aAAiBqB,KAGnB,SAASC,EAAYtB,GAE1B,OAAOA,aAAiBuB,IAGnB,SAASC,EAASxB,GAEvB,OAAOA,aAAiByB,IAGnB,SAASC,EAAU1B,GAExB,MAAwB,kBAAVA,EAGT,SAAS2B,EAAW3B,GAEzB,MAAwB,mBAAVA,EAGT,SAAS4B,EAAS5B,GAEvB,MAAwB,iBAAVA,GAAgC,OAAVA,IAAmBmB,MAAMD,QAAQlB,GAGhE,SAAS6B,EAAY7B,GAE1B,YAAwB,IAAVA,EAGT,SAAS8B,EAAYC,EAAQC,GAElC,OAAOD,EAAEE,cAAgBD,EAAEC,YAGtB,SAASC,EAAQC,EAAWC,GAEjC,YAFiC,IAAAA,MAAA,MAE1BC,KAAKC,IAAIH,EAAIE,KAAKE,MAAMJ,KAAOC,EAGjC,SAASI,EAAQxC,GAEtB,GAAIkB,EAAQlB,GAEV,OAAwB,IAAjBA,EAAMyC,OAEV,GAAIb,EAAS5B,GAClB,CACE,IAAK,IAAM0C,KAAS1C,EAElB,OAAO,EAGT,OAAO,EAGT,OAAOA,QAGF,SAAS2C,IAEd,OAAO,IAAItB,MAAOuB,UAGb,SAASC,EAAMV,EAAWW,EAAaC,GAE5C,OAAOZ,EAAIW,EAAMA,EAAMX,EAAIY,EAAMA,EAAMZ,EAGlC,SAASa,EAAwBC,GAEtC,OAAI/B,EAAQ+B,GAEH,IAAI1B,IAAI0B,GAER3B,EAAM2B,GAENA,EAEArB,EAASqB,GAET,IAAI1B,IAAI2B,EAAcD,EAAO,SAACE,EAAGC,GAAM,OAACA,EAAGD,MAG7C,IAAI5B,IAGN,SAAS8B,EAAiBC,GAE/B,OAAO,IAAI/B,IAAIJ,MAAMoC,KAAKD,EAAIE,WAAWF,IAAI,SAAC,G,IAAA,SAACF,EAAA,KAAU,OAAP,KAAWA,MAGxD,SAASK,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,GAKA,IAFA,IAAMC,EAAQL,EAAOL,IAAI,WAAM,W,WAEtBvE,GAEP,IAAMkF,EAAcP,EAAO3E,GACrBmF,EAAaP,EAAOQ,UAAU,SAACC,GAAgB,OAAAR,EAAQK,EAAaG,MAEtD,IAAhBF,GAEFH,EAAOL,EAAQ3E,EAAGkF,EAAaN,EAAOO,IAEtCF,EAAME,IAAc,GAIpBJ,EAAOJ,EAAQ3E,EAAGkF,IAbblF,EAAI2E,EAAOjB,OAAS,EAAG1D,GAAK,EAAGA,I,EAA/BA,GAiBT,IAASA,EAAI,EAAGA,EAAI4E,EAAOlB,OAAQ1D,IAE5BiF,EAAMjF,IAET8E,EAAIH,EAAQC,EAAO5E,IAIvB,OAAO2E,EAGF,SAASW,EACdX,EACAC,EACAE,EACAC,EACAC,GAGD,IAAK,IAAMzD,KAAOoD,EAEVpD,KAAOqD,GAEXG,EAAOJ,EAAQpD,EAAKoD,EAAOpD,IAI/B,IAAK,IAAMA,KAAOqD,EAEZrD,KAAOoD,EAETK,EAAOL,EAAQpD,EAAKoD,EAAOpD,GAAMqD,EAAOrD,IAIxCuD,EAAIH,EAAQpD,EAAKqD,EAAOrD,IAI3B,OAAOoD,EAGF,SAASY,EACdhB,EACAiB,EACAC,GAEA,YAFA,IAAAA,MAAA,SAAoClE,GAAQ,OAAAA,IAErCmE,EAAanB,EAAK,SAACtD,EAAOM,EAAKoE,GACpC,OAACA,EAAIF,EAAOlE,EAAKN,IAAUuE,EAASvE,EAAOM,GAAMoE,GACjDjF,OAAOY,OAAO,OAGX,SAASsE,EACdrB,EACAsB,GAEA,OAAOH,EAAanB,EAAK,SAACtD,EAAOM,GAC/B,OAAAsE,EAAO5E,EAAOM,EAAKgD,SACnBuB,GAGG,SAASC,EACdxB,EACAyB,GAEA,YAFA,IAAAA,MAAA,SAAuC5B,GAAM,OAAAA,IAEtCsB,EAAanB,EAAK,SAACtD,EAAOM,EAAKoE,GACpC,OAACA,EAAIM,KAAKD,EAAU/E,EAAOM,IAAOoE,GAClC,IAGG,SAASD,EACdnB,EACA2B,EACAC,GAEA,IAAK,IAAM5E,KAAOgD,EAEhB4B,EAAUD,EAAO3B,EAAIhD,GAAMA,EAAK4E,GAGlC,OAAOA,EAGF,SAASC,EAAqCC,EAAYb,GAI/D,IAFA,IAAMG,EAAMjF,OAAOY,OAAO,MAEjBtB,EAAI,EAAGA,EAAIqG,EAAM3C,OAAQ1D,IAClC,CACE,IAAMsG,EAAOD,EAAMrG,GAEnB2F,EAAIW,GAAQd,EAASc,EAAMtG,GAG7B,OAAO2F,EAGF,SAASxB,EAAyCI,EAAmBgC,GAE1E,IAAMC,EAAW,GAEjB,IAAK,IAAMjF,KAAOgD,EAEhBiC,EAAIP,KAAKM,EAAQhC,EAAIhD,GAAMA,IAG7B,OAAOiF,EAIF,SAASC,EAAYrD,EAAOsD,GAEjC,YAAaZ,IAAN1C,EAAkBsD,EAAItD,EAGxB,SAASuD,EAAUvD,EAAWM,EAAgBkD,GAEnD,YAFmD,IAAAA,MAAA,GAE5CC,EAAIzD,EAAI,GAAIM,EAAQ,KAAK,GAAMoD,UAAW,EAAGF,GAG/C,SAASC,EAAIzD,EAAWM,EAAgBqD,EAAiBC,GAE9D,KAAO5D,EAAEM,OAASA,GAEhBsD,EAAS5D,EAAI2D,EAAU3D,EAAIA,GAAQ2D,EAGrC,OAAO3D,EAGF,SAAS,EAASA,GAEvB,OAAOjB,EAAQiB,IAAMP,EAASO,GAC1B6D,KAAKC,UAAU9D,GACfA,EAAI,GCjRH,ICJK+D,EAOAC,EDHCC,EAAqC,aAIrCC,EAA4C,aAczD,aAgBE,WAAmBC,EAAkCC,GAH9C,KAAAzC,OAAyBsC,EACzB,KAAAI,QAA8BH,EAInCI,KAAKH,SAAWA,EAChBG,KAAKC,MAAQ,GACbD,KAAKE,KAAO,GACZF,KAAKG,SAAU,EACfH,KAAKI,OAASN,EAyIlB,OA5JgB,EAAAO,cAAd,SAA+B3E,GAE7B,OAAOA,GAAKR,EAAWQ,EAAE4E,WAoBpB,YAAAC,MAAP,SAAahH,EAAUiH,GAErB,OAAIR,KAAKG,QAEAH,KAAKI,QAGdJ,KAAKH,SAAStG,EAAOyG,KAAKC,MAAOD,KAAKE,KAAMF,MAE5CA,KAAK3C,OAASsC,EACdK,KAAKD,QAAUH,EAEXY,IAAaR,KAAKG,UAEpBH,KAAKC,MAAM1B,KAAKhF,GAEhBiH,IAEAR,KAAKC,MAAMQ,OAGNT,KAAKI,SAGP,YAAAM,KAAP,SAAYA,EAAoBC,EAAuCZ,EAAmD1C,GAExH,YAFqE,IAAA0C,MAAA,QAAmD,IAAA1C,MAAA,GAEpH2C,KAAKG,QAEAH,MAGTA,KAAKE,KAAK3B,KAAKmC,GAEfV,KAAK3C,OAASA,EACd2C,KAAKD,QAAUA,EAEXa,EAAUP,cAAiBM,GAE7BA,EAAQL,SAASN,MAIjBW,IAGFX,KAAKE,KAAKO,MAEHT,OAGF,YAAAa,OAAP,SAAcC,GAEZ,IAAMC,EAAYD,EAAUd,KAAKI,QAOjC,YALkBhC,IAAd2C,IAEFf,KAAKI,OAASW,GAGTf,MAGF,YAAAgB,KAAP,SAAYZ,GAIV,OAFAJ,KAAKI,OAASA,EAEPJ,MAGF,YAAAc,UAAP,WAEE,OAAOd,KAAKI,QAGP,YAAAa,gBAAP,SAAuBC,GAErB,IAAM7D,EAAS2C,KAAKmB,YACdpB,EAAUC,KAAKoB,aAErB,SAAK/D,IAAW0C,KAIhB1C,EACI2C,KAAK3C,SACL2C,KAAKD,QAAQ7E,EAAWgG,GAAeA,IAAgBA,IAEpD,IAGF,YAAAC,UAAP,WAEE,OAAOnB,KAAK3C,SAAWsC,GAGlB,YAAAyB,WAAP,WAEE,OAAOpB,KAAKD,UAAYH,GAGnB,YAAAyB,YAAP,SAAmBC,EAAwCxB,GAEzD,YAFyD,IAAAA,MAAmBE,KAAKI,QAE1EJ,KAAKuB,OAAO,SAAChI,GAAa,OAAAA,EAAMiC,cAAgB8F,GAAWxB,IAG7D,YAAAyB,OAAP,SAAcC,EAA2D1B,GAAzE,gBAAyE,IAAAA,MAAmBE,KAAKI,QAQ/F,OAAO,IAAIQ,EAN8B,SAACrH,EAAO0G,EAAOC,EAAMuB,GACxDD,EAAKjI,EAAO0G,EAAOC,IACrB,EAAKL,SAAStG,EAAO0G,EAAOC,EAAMuB,IAID3B,IAGzB,EAAA4B,KAAd,WAEE,IAAMA,EAA4B,GAElC,OAAO,IAAId,EAAU,SAACrH,EAAO0G,EAAOC,GAClCwB,EAAKnD,KAAK,CACRhF,MAAK,EACL0G,MAAOA,EAAM0B,QACbzB,KAAMA,EAAKyB,WAEZD,IAGS,EAAAE,MAAd,WAEE,OAAO,IAAIhB,EAAU,SAACrH,EAAO0G,EAAOC,EAAMuB,GAAc,OAAAA,EAAUrB,UAAU,IAGhF,EA/JA,GEiDA,aAME,WAAmByB,GAFZ,KAAAC,OAAe,KAIpB9B,KAAK6B,QAAUA,EA8KnB,OA7JS,YAAAE,YAAP,WAEE,OAAO/B,MAGF,YAAAgC,UAAP,WAEE,OAAO,GAKF,YAAAC,aAAP,SAAoBC,EAAaL,GAE/B,YAF+B,IAAAA,MAAA,IAE3BK,IAAUlC,SAKT6B,EAAQM,QAASD,EAAMF,cAAehC,KAAKiC,aAAaC,EAAME,oBAAqBP,OAKpFA,EAAQQ,SAAWhH,EAAY2E,KAAMkC,KAAWlC,KAAKsC,sBAKlDtC,KAAKuC,iBAAiBL,EAAOL,KAG5B,YAAAS,kBAAV,WAEE,OAAO,GAGF,YAAAE,YAAP,SAAmBN,GAEjB,OAAOlC,KAAKiC,aAAaC,EAAO,CAAEG,QAAQ,KAGrC,YAAAI,YAAP,SAAmBP,GAEjB,OAAOlC,KAAKiC,aAAaC,EAAO,CAAEG,QAAQ,EAAM9I,OAAO,KAGlD,YAAAmJ,UAAP,SAAiBR,GAEf,OAAOlC,KAAKiC,aAAaC,EAAO,CAAEC,OAAO,EAAME,QAAQ,KAGlD,YAAAM,UAAP,SAAiBT,GAEf,OAAOlC,KAAKiC,aAAaC,EAAO,CAAEC,OAAO,EAAME,QAAQ,EAAM9I,OAAO,KAmB/D,YAAAqJ,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAEzE,OAAOD,GAGF,YAAAE,iBAAP,SAAwBF,GAKtB,IAHA,IAAIG,EAAahD,KAAK8B,OAChB5B,EAAOF,KAAKiD,UAEZD,GACN,CACE,IAAMtC,EAAOR,EAAKO,MAElBoC,EAAWG,EAAKJ,yBAAyBC,EAAUnC,EAAMA,GACzDsC,EAAOA,EAAKlB,OAGd,OAAOe,GAGF,YAAAI,QAAP,sBAEE,OAAOjD,KAAKkD,cAAc5C,SAAS,IAAI,EAAU,SAAC6C,EAAMC,EAAGlD,EAAMuB,GAE3D0B,IAAS,GAEX1B,EAAUT,KAAKd,EAAKyB,aAKnB,YAAA0B,gBAAP,SAAuBnD,GAErB,GAAoB,IAAhBA,EAAKlE,OAEP,OAAOgE,KAGT,IAAMmD,EAAOnD,KAAKsD,gBAAgBpD,EAAK,IAEvC,OAAKiD,EAKEA,EAAKE,gBAAgBnD,EAAKyB,MAAM,IAH9B,MAMJ,YAAA2B,gBAAP,SAAuB5C,GAErB,OAAO,MAGF,YAAAwC,YAAP,WAIE,IAFA,IAAIF,EAAahD,KAEVgD,EAAKlB,QAEVkB,EAAOA,EAAKlB,OAGd,OAAOkB,GAqBX,EAtLA,IDvEA,SAAYvD,GAEV,iBACA,uBACA,mBAJF,CAAYA,MAAkB,KAO9B,SAAYC,GAEV,2CACA,qCACA,+CACA,+CACA,2CACA,+CACA,6CACA,6CACA,mCACA,sDACA,4CACA,8CACA,oCACA,oCACA,4BACA,gCACA,oCACA,wCAnBF,CAAYA,MAAc,K,8REY1B,0BAOS,KAAAoC,OAAqB,KA8J9B,OA1IS,YAAAyB,mBAAP,SAA0BC,GAExB,OAAO,GAGF,YAAAC,YAAP,WAEE,OAAO,GAGF,YAAAC,WAAP,WAEE,OAAO,GAGF,YAAAC,eAAP,SAAsBC,GAEpB,OAAO,GAGF,YAAAX,QAAP,sBAEE,OAAOjD,KAAK6D,oBAAoBvD,SAAS,IAAI,EAAU,SAAC6C,EAAMC,EAAGlD,EAAMuB,GAEjE0B,IAAS,GAEX1B,EAAUT,KAAKd,EAAKyB,aAKnB,YAAAmC,sBAAP,SAA6B5D,GAE3B,GAAoB,IAAhBA,EAAKlE,OAEP,OAAOgE,KAGT,IAAMU,EAAOV,KAAK+D,sBAAsB7D,GAExC,IAAKQ,IAASA,EAAK,GAEjB,OAAO,KAGH,aAACsD,EAAA,KAEP,OAFc,KAEFF,sBAAsB5D,EAAKyB,MAAMqC,KAGxC,YAAAD,sBAAP,SAA6BC,GAE3B,OAAO,MAGF,YAAAH,kBAAP,WAIE,IAFA,IAAIb,EAAmBhD,KAEhBgD,EAAKlB,QAEVkB,EAAOA,EAAKlB,OAGd,OAAOkB,GAGF,YAAAiB,YAAP,SAAmBT,EAAyBU,GAE1C,IAAMD,EAA4B,GAIlC,OAFAjE,KAAKmE,SAASX,EAAKU,EAAS,SAAAxI,GAAK,OAAAuI,EAAY1F,KAAK7C,KAE3CuI,GAGC,YAAAG,aAAV,SAAuBZ,EAAyBU,EAAeG,EAAuBC,EAA4BC,EAA4BzC,QAAA,IAAAA,MAAA,MAE5I,IAAM0C,EAAWH,EAAkBA,EAAgBjC,oBAAsB,KACnEqC,EAAiBH,EAAUA,EAAQI,QAAQlB,EAAKU,GAAW,KAC3DS,EAASF,EAAiBA,EAAerC,oBAAsB,KACjEwC,EAAOD,EAENA,GAgBCA,EAAOE,eAAiBL,EAASK,eAEnCD,EAAOA,EAAK7C,eAGTyC,EAAShC,YAAYoC,GAcjBA,IAASD,GAEhBJ,EAAQ,CACNpB,KAAMzD,EAAeoF,cACrBC,SAAUtF,EAAmBuF,OAC7Bd,QAAO,EACPI,QAAO,EACPxC,OAAM,EACN0C,SAAQ,EACRG,OAAM,IArBRJ,EAAQ,CACNpB,KAAMzD,EAAeuF,mBACrBF,SAAUP,EAASvC,aAAa0C,GAC5BlF,EAAmBuF,OACnBvF,EAAmByF,KACvBhB,QAAO,EACPI,QAAO,EACPxC,OAAM,EACN0C,SAAQ,EACRG,OAAM,KA9BNH,IAAaA,EAASK,cAExBN,EAAQ,CACNpB,KAAMzD,EAAeuF,mBACrBF,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAO,EACPxC,OAAM,EACN0C,SAAQ,IAuCVF,GAEFA,EAAQH,SAASX,EAAKU,EAASK,IA9JrB,EAAAY,KAAO,OAEP,EAAAC,SAAW,WAgK3B,EArKA,GCiEO,SAASC,EAA0C3J,GAExD,QAAS,aAAcA,IAAMR,EAAWQ,GAG1C,I,EAAA,aAQE,WAAmB4J,GAEjBtF,KAAKsF,OAASA,EACdtF,KAAKnD,IAAM7D,OAAOY,OAAO,MACzBoG,KAAKuF,MAAQvM,OAAOY,OAAO,MAmF/B,OAhFS,YAAAT,IAAP,SAAYqM,GAEV,OAAOxF,KAAKnD,IAAI2I,IAAOxF,KAAKnD,IAAImD,KAAKsF,OAASE,IAGzC,YAAAC,SAAP,SAAiBD,GAEf,OAAOxF,KAAKuF,MAAMC,IAAOxF,KAAKuF,MAAMvF,KAAKsF,OAASE,IAG7C,YAAAE,IAAP,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QALA,IAAAL,MAAA,SACA,IAAAC,MAAA,SACA,IAAAC,MAAA,SACA,IAAAC,MAAA,SACA,IAAAC,MAAA,SACA,IAAAC,MAAA,IAGA,IAAMT,EAAKxF,KAAKsF,OAASK,EACnBO,EAAUN,EAAMM,SAAW,GAC3BC,EAAaP,EAAMO,YAAc,EACjCC,EAAmCpN,OAAOY,OAAO,MACvDmM,EAAMM,QAAQ,SAAChM,GAAM,OAAA+L,EAAc/L,GAAKA,IAExC,IAAMiM,EAAK,CACTd,GAAE,EACFU,QAAO,EACPC,WAAU,EACVN,OAAM,EACNC,SAAQ,EACRC,MAAK,EACLK,cAAa,EACbJ,SAAQ,EACRC,iBAAgB,GAKlB,OAFAjG,KAAKnD,IAAI2I,GAAMc,EAERA,GAyBF,YAAAC,SAAP,SACED,EACAE,EACAX,EACAC,EACAC,QAFA,IAAAF,MAA+C7M,OAAOY,OAAO,YAC7D,IAAAkM,MAAiD9M,OAAOY,OAAO,YAC/D,IAAAmM,MAA8C/M,OAAOY,OAAO,OAG5D,IAAM2L,EAAQ,CAAEiB,WAAU,EAAEX,OAAM,EAAEC,SAAQ,EAAEC,MAAK,GAInD,OAFA/F,KAAKuF,MAAMe,EAAGd,IAAMD,EAEbA,GAGX,EA/FA,GC3EA,aAQE,WAAmBD,GAEjBtF,KAAKsF,OAASA,EACdtF,KAAKnD,IAAM7D,OAAOY,OAAO,MACzBoG,KAAK0B,KAAO,GAuChB,OApCS,YAAAgE,IAAP,SAAoFC,EAAiBW,EAAoC/M,EAAWsM,GAElJ,IAAML,EAAKxF,KAAKsF,OAASK,EACnBc,EAAiB,CACrBjB,GAAE,EACFc,GAAIA,EAAGd,GACPjM,MAAOA,GAAS+M,EAAGT,OAAO,GAC1BA,OAAQA,GAAU,IAMpB,OAHA7F,KAAKnD,IAAI2I,GAAMiB,EACfzG,KAAK0B,KAAKnD,KAAKkI,GAERA,GAGF,YAAAC,YAAP,SAAiHf,EAAiBW,EAAoC/M,EAAUsJ,EAAagD,GAE3L,IAAML,EAAKxF,KAAKsF,OAASK,EACnBc,EAAOzG,KAAKnD,IAAI2I,GAStB,OAPAiB,EAAKE,UAAY,CACfL,GAAIA,EAAGd,GACPjM,MAAK,EACLsJ,SAAQ,EACRgD,OAAQA,GAAU,IAGbY,GAGF,YAAAtN,IAAP,SAAYqM,GAEV,OAAOxF,KAAKnD,IAAI2I,IAAOxF,KAAKnD,IAAImD,KAAKsF,OAASE,IAGlD,EAnDA,GClBaoB,EAAK,CAChBC,OAAQ,IACRC,IAAK,MACLC,QAAS,OACTC,MAAO,QACPpM,KAAM,OACNqM,KAAM,OACNC,SAAU,OACVC,KAAM,OACNC,KAAM,OACNC,IAAK,MACLvM,IAAK,MACLwM,KAAM,OACNC,OAAQ,MACRvO,OAAQ,MACRwO,SAAU,IACVC,UAAW,MACXC,SAAU,MACV1M,IAAK,MACL2M,KAAM,OACNC,MAAO,QACPC,UAAW,KChBAC,EAAoB,IAAIC,EAAWnB,EAAGG,QAAUH,EAAGiB,WAEnDG,EAAmB,IAAIC,EAAUrB,EAAGG,QAAUH,EAAGiB,WAExD,EAAMC,EAECI,EACb,CAIEtO,OAAQ,EAAI8L,IAAI,UAIhByC,MAAO,EAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7B0C,IAAK,EAAI1C,IAAI,IAAK,GAAI,CAAC,IAAK,MAE5B2C,GAAI,EAAI3C,IAAI,IAAK,GAAI,CAAC,IAAK,MAE3B4C,IAAK,EAAI5C,IAAI,IAAK,GAAI,CAAC,IAAK,MAE5B6C,IAAK,EAAI7C,IAAI,IAAK,GAAI,CAAC,MAEvB8C,IAAK,EAAI9C,IAAI,MAAO,GAAI,CAAC,QAAS,SAIlC+C,QAAS,EAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BgD,OAAQ,EAAIhD,IAAI,KAAM,GAAI,CAAC,UAE3BiD,QAAS,EAAIjD,IAAI,KAAM,GAAI,CAAC,UAE5BkD,QAAS,EAAIlD,IAAI,IAAK,GAAI,CAAC,QAAS,SAEpCmD,WAAY,EAAInD,IAAI,KAAM,GAAI,CAAC,QAAS,SAIxCoD,MAAO,EAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,EAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,EAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,EAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,EAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,EAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,EAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,EAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,EAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,EAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,EAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,W,4SC5BpC,aAyBE,aAXO,KAAAyO,UACH,SAACC,EAAK9K,EAAMrF,GAAU,OAAAmQ,EAAI9K,GAAQrF,GAC/B,KAAAoQ,aACH,SAACD,EAAK9K,GAAS,cAAO8K,EAAI9K,IACvB,KAAAgL,SACH,SAAC9K,EAAK+K,GAAS,OAAA/K,EAAIP,KAAKsL,IACrB,KAAAC,YACH,SAAChL,EAAKiL,GAAU,OAAAjL,EAAIkL,OAAOD,EAAO,GAAG,IAClC,KAAAE,SACH,SAACnL,EAAKiL,EAAOF,GAAS,OAAA/K,EAAIkL,OAAOD,EAAO,EAAGF,GAAM,IAInD7J,KAAKkK,aAAelK,KAAKmK,cAAc,SAAC/G,EAAG2G,GAAU,OAAAA,IACrD/J,KAAKoK,WAAapK,KAAKmK,cAAc,WAAM,WAC3CnK,KAAKqK,UAAYrK,KAAKmK,cAAc,WAAM,WAC1CnK,KAAKsK,SAAW,GAChBtK,KAAKuK,SAAW,GAChBvK,KAAKwK,aAAe,GAySxB,OAtSS,YAAAC,QAAP,SAAenP,EAAQC,GAAvB,WAEQmP,EAAa,SAAChP,EAAQsD,G,QAEpB2L,SAAejP,EACfkP,SAAe5L,EAErB,GAAI2L,IAAUC,EAEZ,OAAO,EAAKV,aAAaS,GAAS,EAAKT,aAAaU,GAGtD,IAAMC,EAAW,EAAKT,WAAWO,G,IAEjC,IAAsB,QAAAE,GAAQ,8BAC9B,CADK,IAEGzK,EAFU,QAEOqK,QAAQ/O,EAAGsD,EAAG0L,GAErC,QAAetM,IAAXgC,EAEF,OAAOA,G,iGAIX,OAAO1E,IAAMsD,EAAI,EAAItD,EAAIsD,GAAK,EAAI,GAGpC,OAAO0L,EAAWpP,EAAGC,IAGhB,YAAAuP,WAAP,SAAkBC,EAAcC,GAE9B,OAAgB,IAATD,GAAuB,IAATC,EACjB,EACAD,EAAOC,EAAO,GAAK,GAGlB,YAAAC,WAAP,SAAkBR,GAEhB,OAAOzK,KAAKkL,kBAAkBlL,KAAKoK,WAAWK,EAAQtH,MAAOsH,IAGxD,YAAAU,OAAP,SAAc7P,EAAQC,GAAtB,WAEQ6P,EAAY,SAAC1P,EAAQsD,G,QAEzB,GAAItD,IAAMsD,EAER,OAAO,EAGT,IAAM2L,SAAejP,EAGrB,GAAIiP,WAFiB3L,EAInB,OAAO,EAGT,IAAMmM,EAAS,EAAKd,UAAUM,G,IAE9B,IAAuB,QAAAQ,GAAM,8BAC7B,CADK,IAEG/K,EAFW,QAEO+K,OAAOzP,EAAGsD,EAAGoM,GAErC,QAAehN,IAAXgC,EAEF,OAAOA,G,iGAIX,OAAO,GAGT,OAAOgL,EAAU9P,EAAGC,IAGf,YAAA8P,UAAP,SAAiBF,GAEf,OAAOnL,KAAKkL,kBAAkBlL,KAAKqK,UAAUc,EAAOhI,MAAOgI,IAGtD,YAAAG,KAAP,SAAe5P,EAAM6P,GAEnB,QAFmB,IAAAA,OAAA,IAEd7P,EAAG,OAAOA,EAEf,GAAiB,iBAANA,EACX,CACE,IAAM,EAAUsE,KAAKsK,SAErB,GAAIiB,EACJ,CACE,IAAM,EAAS,IAAIzQ,IAEb,EAAgB,SAAC0Q,EAAeF,GAEpC,EAAO5F,IAAI8F,EAAUF,IAGjB,EAAa,SAAChQ,G,QAElB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,EACX,CACE,IAAMmQ,EAAW,EAAOtS,IAAImC,GAE5B,QAAiB8C,IAAbqN,EAEF,OAAOA,E,IAGT,IAAqB,WAAO,8BAC5B,CADK,IAEGC,EAFS,QAEWJ,KAAKhQ,EAAG,EAAY,GAE9C,QAAmB8C,IAAfsN,EAEF,OAAOA,G,kGAKb,OAAOpQ,GAGT,OAAO,EAAWI,GAIlB,IAAM,EAAgB,SAAC8P,EAAeF,KAEhC,EAAY,SAAChQ,G,QAEjB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,E,IAET,IAAqB,WAAO,8BAC5B,CADK,IAEGoQ,EAFS,QAEWJ,KAAKhQ,EAAG,EAAW,GAE7C,QAAmB8C,IAAfsN,EAEF,OAAOA,G,iGAKb,OAAOpQ,GAGT,OAAO,EAAUI,GAMrB,OAAOA,GAGF,YAAAiQ,UAAP,SAAiBC,GAEf,OAAO5L,KAAKkL,kBAAkBlL,KAAKsK,SAAUsB,IAGxC,YAAAC,OAAP,SAAiBtS,GAEf,IAAKA,EAAO,OAAOA,EAEnB,GAAqB,iBAAVA,EACX,CACE,IAAM,EAAUyG,KAAKuK,SAEf,EAAa,SAAC7O,G,QAElB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,E,IAET,IAAqB,WAAO,8BAC5B,CADK,IAEG0E,EAFS,QAEOyL,OAAOnQ,EAAG,GAEhC,QAAe0C,IAAXgC,EAEF,OAAOA,G,iGAKb,OAAO1E,GAGT,OAAO,EAAWnC,GAGpB,OAAOA,GAGF,YAAAuS,SAAP,SAAmBC,GAEjB,IAAKA,EAAM,OAAOA,EAElB,GAAoB,iBAATA,EACX,CACE,IAAM,EAAU/L,KAAKuK,SAEf,EAAa,SAAC7O,G,QAElB,IAAKA,EAAG,OAAOA,EAEf,GAAiB,iBAANA,E,IAET,IAAqB,WAAO,8BAC5B,CADK,IAEG0E,EAFS,QAEO0L,SAASpQ,EAAG,GAElC,QAAe0C,IAAXgC,EAEF,OAAOA,G,iGAKb,OAAO1E,GAGT,OAAO,EAAWqQ,GAGpB,OAAOA,GAGF,YAAAC,QAAP,SAAkBD,GAEhB,OAAO/L,KAAKkL,kBAAkBlL,KAAKuK,SAAUwB,IAGxC,YAAA5S,IAAP,SAAWI,EAAYmH,G,QAEfuL,EAAYjM,KAAKwK,a,IAEvB,IAAqB,QAAAyB,GAAS,8BAC9B,CADK,IAAMC,EAAM,QAEf,GAAIA,EAAOzD,QAAQlP,EAAOmH,GAExB,OAAOwL,EAAO/S,IAAII,EAAOmH,I,mGAKxB,YAAAgF,IAAP,SAAWnM,EAAYmH,EAAWyL,G,QAE1BF,EAAYjM,KAAKwK,a,IAEvB,IAAqB,QAAAyB,GAAS,8BAC9B,CADK,IAAMC,EAAM,QAEf,GAAIA,EAAOzD,QAAQlP,EAAOmH,GAIxB,OAFAwL,EAAOxG,IAAInM,EAAOmH,EAAMyL,IAEjB,G,iGAIX,OAAO,GAGF,YAAAC,YAAP,SAAsBC,GAEpB,OAAOrM,KAAKkL,kBAAkBlL,KAAKwK,aAAc6B,IAG3C,YAAAlC,cAAR,SAAyBvQ,GAEvB,IAAMiD,EAA8B7D,OAAOY,OAAO,MAOlD,OALA0S,EAAiBC,MAAMlG,QAAQ,SAAClD,EAAM4G,GAEpClN,EAAIsG,GAAQvJ,EAAOuJ,EAAM4G,KAGpBlN,GAGD,YAAAqO,kBAAR,SAA0DxJ,EAAWnI,GAKnE,OAHAmI,EAAKnD,KAAKhF,GACVmI,EAAK8K,KAAK,SAAClR,EAAGC,GAAM,OAAAA,EAAEkR,SAAWnR,EAAEmR,WAE5BzM,MAnUK,EAAAuM,MAAuB,CACnC,UAAW,SAAU,SAAU,SAAU,SAAU,SAAU,YAAa,YAqU9E,EAzUA,GA2UaG,EAAY,IAAIJ,E,oTC7V7B,4B,+CA2NA,OA3NiC,OAWjB,EAAAK,OAAd,SAAqBC,EAAarH,GAEhC,OAAO,IAAIsH,EAAYD,EAtBL,IAsB4B,KAGlC,EAAAE,OAAd,SAAqB3J,GAEnB,OAAOpH,EAAQoH,EAAKtB,SAChB7B,KAAKwF,GACL,CAACxF,KAAKwF,GAAIrC,EAAKtB,UAKP,EAAAkL,SAAd,SAAuBH,EAAWI,GAEhC,OAAO/R,EAAU2R,GAAQ5M,KAAKiN,SAAW,MAK7B,EAAAC,SAAd,WAKER,EAAUzB,WAAW,CACnBwB,SAJe,EAKftJ,KAJwB,UAKxBsH,QAAS,SAACnP,EAAGC,GACX,OAAQD,EAAI,EAAI,IAAMC,EAAI,EAAI,MAIlCmR,EAAUrB,UAAU,CAClBoB,SAZe,EAaftJ,KAZwB,UAaxBgI,OAAQ,SAAC7P,EAAGC,GAAM,OAAAD,IAAMC,MAIrB,YAAA4R,MAAP,WAEE,OAAON,EAAYrH,IAGd,YAAA4H,cAAP,WAEE,OAAOP,EAAYQ,WAAWxQ,KAGzB,YAAAyQ,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAO,MAGF,YAAAuJ,YAAP,SAAmBjK,GAEjB,MAAO,IAGF,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,OAAIA,EAAQM,QAASN,EAAQQ,QAEpBH,aAAiB2K,GAMrB,YAAAhI,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAA+L,4BAAP,aAKO,YAAAC,oBAAP,WAEE,OAAO,GAAMxH,GAAG4B,EAAWtO,OAAQ,KAG9B,YAAAmU,sBAAP,WAEE,OAAO,GAAMzH,GAAG4B,EAAWO,QAAS,CAClClP,MAAO,GAAMJ,IAAI,YAId,YAAA6U,qBAAP,WAEE,OAAO,GAAM1H,GAAG4B,EAAWM,IAAK,CAC9BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAsP,QAAP,SAAelP,GAEb,GAAI0B,EAAU1B,GAEZ,OAAO,EAGT,IAAM0U,EAAQ1U,EAAQ,GAEtB,SAAIyG,KAAK6B,QAAQqM,OAAQlO,KAAK6B,QAAQqM,KAAKD,QAKvCjO,KAAK6B,QAAQsM,QAASnO,KAAK6B,QAAQsM,MAAMF,KAQxC,YAAAG,UAAP,SAAiB7U,GAEf,IAAK0B,EAAU1B,GACf,CACE,IAAM0U,EAAQ1U,EAAQ,GAEtB,GAAIyG,KAAK6B,QAAQqM,MAAQlO,KAAK6B,QAAQqM,KAAKD,GAEzC,OAAO,EAGT,GAAIjO,KAAK6B,QAAQsM,OAASnO,KAAK6B,QAAQsM,MAAMF,GAE3C,OAAO,EAIX,OAAO1U,GAGF,YAAA8U,YAAP,WAEE,OAAO,IAAIxB,EAAY,KAGlB,YAAAyB,MAAP,WAEE,OAAO,IAAIzB,EAAYH,EAAUpB,KAAKtL,KAAK6B,WAGtC,YAAAiL,OAAP,WAEE,OAAOD,EAAYC,OAAO9M,OAGrB,YAAApG,OAAP,WAEE,OAAO,GAGF,YAAA2U,OAAP,SAAcC,GAEZ,OAAOA,EAAI,EAAG,GAAG,GAtNW,IAyNvB,YAAA1C,SAAP,SAAgBC,GAEd,OAAOA,GAGF,YAAAF,OAAP,SAActS,GAEZ,OAAOA,GArNK,EAAAiM,GAAKoB,EAAGG,QAER,EAAAsG,WAAavF,EAEb,EAAA2G,UAAYzG,EAEZ,EAAAiF,SAAW,IAAIJ,EAAY,IAc3B,EAAA6B,iBAA2B,EAO3B,EAAAC,YAAsB,EA6LtC,EA3NA,CAAiC,G,4UCVjC,eAuBE,WAAmBC,GAAnB,MAEE,cAAO,K,OACP,EAAKA,WAAaA,E,EA2DtB,OArFmC,QAOnB,EAAAjC,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAIC,EAFQD,EAAME,cAAcnC,EAXxB,MAgBH,EAAAE,OAAd,SAAqBU,GAEnB,IAAMoB,EAAapB,EAAKoB,WAAW9B,SAEnC,MAAO,CAAC9M,KAAKwF,GAAIoJ,IAWZ,YAAAzB,MAAP,WAEE,OAAO2B,EAActJ,IAGhB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAK4O,WAAWI,cAAcxL,EAAKU,IAGrC,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOgC,EAAchC,OAAO9M,OAGvB,YAAAsO,MAAP,WAEE,OAAO,IAAIQ,EAAc9O,KAAK4O,WAAWN,UAGpC,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,GAAY+I,UAGd,YAAA3M,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAAM,EAASI,KAAKoO,EAAcI,SAAU,EAAKN,WAAY,SAAC1N,GAAgB,SAAK0N,WAAa1N,OAIvF,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAO8K,EAAcI,SAC9B,CAAC,EAAGlP,KAAK4O,YACT,MAGC,YAAAhB,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK4O,WAAWhB,UAAU5N,OAGrB,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKoE,aAAaZ,EAAKU,EAAS,GAAY+I,SAAUjN,KAAK4O,WAAYrK,IA/E3D,EAAA2K,SAAW,MAEX,EAAA1J,GAAK,MAgFrB,EArFA,CAAmC,G,4UCCnC,eAqBE,WAAmB2J,GAAnB,MAEE,cAAO,K,OACP,EAAKA,YAAcA,E,EAkEvB,OA1FmC,QAKnB,EAAAxC,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAIO,EAFSxC,EATE,GASsB/P,IAAI,SAACjE,GAAW,OAAAiW,EAAME,cAAcnW,OAKpE,EAAAkU,OAAd,SAAqBU,GAEnB,IAAM2B,EAAc3B,EAAK2B,YAAYtS,IAAI,SAAAwS,GAAK,OAAAA,EAAEvC,WAEhD,MAAO,CAAC9M,KAAKwF,GAAI2J,IAWZ,YAAAhC,MAAP,WAEE,OAAOiC,EAAc5J,IAGhB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKmP,YAAY3Q,OAAO,SAAClC,EAAK+S,GAAM,OAAAzT,KAAKU,IAAIA,EAAK+S,EAAEL,cAAcxL,EAAKU,KAAW,IAGpF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOsC,EAActC,OAAO9M,OAGvB,YAAAsO,MAAP,WAEE,OAAO,IAAIc,EAAcpP,KAAKmP,YAAYtS,IAAI,SAAAwS,GAAK,OAAAA,EAAEf,YAGhD,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,GAAY+I,UAGd,YAAA3M,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAKmP,YAAY9I,QAAQ,SAACmH,EAAMzD,GAC9B,OAAAzJ,EAASI,KAAKqJ,EAAOyD,EAAM,SAACtM,GAAgB,SAAKiO,YAAYnF,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKiO,YAAYnF,OAAOD,EAAO,UAKhI,YAAAhG,sBAAP,SAA6BC,GAE3B,OAAO1J,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKmP,YAAYnT,OACrD,CAAC,EAAGgE,KAAKmP,YAAYnL,EAAM,KAC3B,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKmP,YAAY9I,QAAQ,SAAAgJ,GAAK,OAAAA,EAAEzB,UAAU,MAGrC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAAxD,WAEQ+K,EAAe,GAAYrC,SAEjCjN,KAAKmP,YAAY9I,QAAQ,SAAA/B,GAEvB,EAAKF,aAAaZ,EAAKU,EAASoL,EAAchL,EAASC,MAnF7C,EAAAiB,GAAK,MAuFrB,EA1FA,CAAmC,GCNtB+J,GAAgB,IAAIxH,EAAWnB,EAAGE,IAAMF,EAAGiB,WAE3C2H,GAAe,IAAIvH,EAAUrB,EAAGE,IAAMF,EAAGiB,WAEhD,GAAM0H,GACNE,GAAiB,CACrBtJ,WAAY,GAGDuJ,GACb,CAIElH,IAAK,GAAI9C,IAAI,MAAO+J,GAAgB,CAAC,QAAS,SAE9CnE,KAAM,GAAI5F,IAAI,OAAQ+J,GAAgB,CAAC,UAEvCE,UAAW,GAAIjK,IAAI,YAAa,GAAI,CAAC,UAErCkK,WAAY,GAAIlK,IAAI,aAAc,GAAI,CAAC,QAAS,WAAY,GAAI,CAAC,WAAY,CAAC,WAAY,CAAC,UAE3F3G,SAAU,GAAI2G,IAAI,WAAY,GAAI,CAAC,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,GAAI,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MAE5FmK,QAAS,GAAInK,IAAI,UAAW,GAAI,CAAC,SAAU,GAAI,GAAI,GAAI,CAAC,UAExDoK,QAAS,GAAIpK,IAAI,UAAW,GAAI,CAAC,YAAa,SAAU,SAAU,GAAI,GAAI,GAAI,CAAC,SAAU,UAIzF+C,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BkD,QAAS,GAAIlD,IAAI,IAAK+J,GAAgB,CAAC,QAAS,SAEhD5G,WAAY,GAAInD,IAAI,KAAM+J,GAAgB,CAAC,QAAS,SAEpDM,OAAQ,GAAIrK,IAAI,IAAK+J,GAAgB,CAAC,QAAS,SAE/CO,cAAe,GAAItK,IAAI,KAAM+J,GAAgB,CAAC,QAAS,SAEvDQ,UAAW,GAAIvK,IAAI,IAAK+J,GAAgB,CAAC,QAAS,SAElDS,iBAAkB,GAAIxK,IAAI,KAAM+J,GAAgB,CAAC,QAAS,SAI1D3G,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,W,4UC5DpC,4B,+CAsKA,OAtK8B,QAWd,EAAA2R,OAAd,SAAqBC,GAEnB,OAAOuD,EAASlD,UAGJ,EAAAH,OAAd,SAAqB3J,GAEnB,OAAOnD,KAAKwF,IAKA,EAAAuH,SAAd,SAAuBH,GAErB,OAAgB,OAATA,EAAgB5M,KAAKiN,SAAW,MAK3B,EAAAC,SAAd,aAKO,YAAAC,MAAP,WAEE,OAAOgD,EAAS3K,IAGX,YAAA4H,cAAP,WAEE,OAAO+C,EAAS9C,WAAWxQ,KAGtB,YAAAyQ,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAO,MAGF,YAAAuJ,YAAP,SAAmBjK,GAEjB,MAAO,IAGF,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,OAAOK,aAAiBiO,GAGnB,YAAAtL,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,OAKV,YAAA+L,4BAAP,aAKO,YAAAC,oBAAP,WAEE,OAAO,GAAMsC,QAGR,YAAArC,sBAAP,WAEE,OAAO,GAAMzH,GAAGoJ,GAAO9G,QAAS,CAC9BrP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMwL,UAIT,YAAApC,qBAAP,WAEE,OAAO,GAAM1H,GAAGoJ,GAAOlH,IAAK,CAC1BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAsP,QAAP,SAAelP,GAEb,OAAOA,SAGF,YAAA6U,UAAP,SAAiB7U,GAEf,OAAOA,GAGF,YAAA8U,YAAP,WAEE,OAAOrO,MAGF,YAAAsO,MAAP,WAEE,OAAOtO,MAGF,YAAA8M,OAAP,WAEE,OAAOqD,EAASrD,OAAO9M,OAGlB,YAAApG,OAAP,WAEE,OAAO,MAGF,YAAA2U,OAAP,SAAcC,GAEZ,OAAO,MAGF,YAAA1C,SAAP,SAAgBC,GAEd,OAAO,MAGF,YAAAF,OAAP,SAActS,GAEZ,OAAO,MAhKK,EAAAiM,GAAKoB,EAAGU,KAER,EAAA+F,WAAa,IAAItF,EAAWnB,EAAGU,KAAOV,EAAGiB,WAEzC,EAAA4G,UAAY,IAAIxG,EAAUrB,EAAGU,KAAOV,EAAGiB,WAEvC,EAAAoF,SAAW,IAAIkD,EAAS,MAYxB,EAAAzB,iBAA2B,EAO3B,EAAAC,YAAsB,EA0ItC,EAtKA,CAA8B,G,4UCH9B,4B,+CA8DA,OA9DkC,QAOlB,EAAAhC,OAAd,SAAqBC,EAAaiC,GAEhC,OAAO7O,KAAKqQ,UAGA,EAAAvD,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,KAGR,YAAA2H,MAAP,WAEE,OAAOmD,EAAa9K,IAGf,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAO,GAGF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOwD,EAAaxD,OAAO9M,OAGtB,YAAAsO,MAAP,WAEE,OAAOtO,MAGF,YAAA0E,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,GAAS+I,UAGX,YAAA3M,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,OAKV,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,KAtD1C,EAAAiB,GAAK,OAEI,EAAA6K,SAAW,IAAIC,EAyDxC,EA9DA,CAAkC,G,4UCGlC,4B,+CA6KA,OA7K6B,QAWb,EAAA3D,OAAd,SAAqBC,EAAarH,GAEhC,OAAOvF,KAAKiN,UAGA,EAAAH,OAAd,SAAqB3J,GAEnB,OAAOnD,KAAKwF,IAKA,EAAAuH,SAAd,SAAuBH,EAAWI,GAEhC,OAAI7R,EAASyR,IAASpS,EAASoS,EAAK2D,MAE3B,IAAIC,EAAQ,IAGd,MAKK,EAAAtD,SAAd,aAKO,YAAAC,MAAP,WAEE,OAAOqD,EAAQhL,IAGV,YAAA4H,cAAP,WAEE,OAAOoD,EAAQnD,WAAWxQ,KAGrB,YAAAyQ,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAO,MAGF,YAAAuJ,YAAP,SAAmBjK,GAEjB,MAAO,IAGF,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGF,YAAAiC,aAAP,SAAoBC,GAElB,OAAO,GAGC,YAAAK,iBAAV,SAA2BL,EAAaL,GAEtC,OAAO,GAGF,YAAAgD,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAA+L,4BAAP,aAKO,YAAAC,oBAAP,WAEE,OAAO,GAAM2C,UAGR,YAAA1C,sBAAP,WAEE,OAAO,GAAMG,QAGR,YAAAF,qBAAP,WAEE,OAAO,GAAM1H,GAAGoJ,GAAOlH,IAAK,CAC1BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAsP,QAAP,SAAelP,GAEb,OAAO,GAGF,YAAA6U,UAAP,SAAiB7U,GAEf,OAAOA,GAGF,YAAA8U,YAAP,WAEE,OAAO,IAAImC,EAAQ,KAGd,YAAAlC,MAAP,WAEE,OAAO,IAAIkC,EAAQ,KAGd,YAAA1D,OAAP,WAEE,OAAO0D,EAAQ1D,OAAO9M,OAGjB,YAAApG,OAAP,WAEE,MAAO,IAGF,YAAA2U,OAAP,SAAcC,GAEZ,OAAO,MAGF,YAAA1C,SAAP,SAAgBC,GAEd,OAAOW,EAAUZ,SAASC,IAGrB,YAAAF,OAAP,SAActS,GAEZ,OAAOmT,EAAUb,OAAOtS,IAvKZ,EAAAiM,GAAKoB,EAAGE,IAER,EAAAuG,WAAakC,GAEb,EAAAd,UAAYe,GAEZ,EAAAvC,SAAW,IAAIuD,EAAQ,IAYvB,EAAA9B,iBAA2B,EAY3B,EAAAC,YAAsB,EA4ItC,EA7KA,CAA6B,G,umBCE7B,eA2BE,WAAmB3W,EAAgC0Y,GAAnD,MAEE,cAAO,K,OACP,EAAK1Y,OAASA,EACd,EAAK0Y,KAAOA,E,EAuHhB,OAtJsC,QAStB,EAAA/D,OAAd,SAAqBC,EAAaiC,GAKhC,OAAO,IAAI8B,EAHI/D,EAdE,GAciB/P,IAAI,SAAC,G,IAAA,UAAChE,EAAA,KAAMD,EAAA,KAAsB,OAACC,EAAMgW,EAAME,cAAcnW,MAClFiW,EAAME,cAAcnC,EAdlB,MAmBH,EAAAE,OAAd,SAAqBU,GAEnB,IAAMxV,EAASwV,EAAKxV,OAAO6E,IAAI,SAAC,G,IAAA,UAAoB,OAAnB,KAAM,KAA4BiQ,YAEnE,MAAO,CAAC9M,KAAKwF,GAAIxN,EAAQwV,EAAKkD,KAAK5D,WAa9B,YAAAK,MAAP,WAEE,OAAOwD,EAAiBnL,IAGnB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKhI,OAAOwG,OAAO,SAAClC,EAAK,G,IAAA,UAAO+S,GAAN,KAAM,MAAO,OAAAzT,KAAKU,IAAIA,EAAK+S,EAAEL,cAAcxL,EAAKU,KAAWlE,KAAK0Q,KAAK1B,cAAcxL,EAAKU,KAGpH,YAAA+K,SAAP,WAEE,IAAMlJ,EAAQ,GAId,OAFA/F,KAAKhI,OAAOqO,QAAQ,SAAC,G,IAAA,UAACxN,EAAA,KAAM,KAAa,OAAAkN,EAAMlN,GAAQ,GAAQoU,WAExDlH,GAGF,YAAA+G,OAAP,WAEE,OAAO6D,EAAiB7D,OAAO9M,OAG1B,YAAAsO,MAAP,WAEE,OAAO,IAAIqC,EAAiB3Q,KAAKhI,OAAO6E,IAAI,SAAC,G,IAAA,UAAqB,OAApB,KAAM,KAA8ByR,WAAWtO,KAAK0Q,KAAKpC,UAGlG,YAAA5J,QAAP,SAAelB,EAAyBgI,GAEhC,+BAAEzF,EAAA,EAAAA,MAAO7B,EAAA,EAAAA,QAIf,OAFAlE,KAAKhI,OAAOqO,QAAQ,SAAC,G,IAAA,UAACxN,EAAA,KAAM+X,EAAA,KAAa,OAAA7K,EAAMlN,GAAQ+X,EAAQlM,QAAQlB,EAAKU,KAErElE,KAAK0Q,KAAKhM,QAAQlB,EAAKU,IAGzB,YAAA5D,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKiQ,EAAiBE,YAAa,WAC1C,SAAK7Y,OAAOqO,QAAQ,SAAC,EAAiB0D,G,IAAjB,UAAClR,EAAA,KAAM+X,EAAA,KAC1B,OAAAtQ,EAASI,KAAK7H,EAAM+X,EAAS,SAAC1P,GAAgB,SAAKlJ,OAAO+R,GAAOC,OAAO,EAAG,EAAG9I,IAAc,WAAM,SAAKlJ,OAAOgS,OAAOD,EAAO,SAGhIzJ,EAASI,KAAKiQ,EAAiBG,UAAW,EAAKJ,KAAM,SAACxP,GAAgB,SAAKwP,KAAOxP,OAK/E,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAO2M,EAAiBG,UACjC,CAAC,EAAG9Q,KAAK0Q,MACT1M,EAAM,KAAO2M,EAAiBE,YAC5B,CAAC,EAAG7Q,KAAKhI,OAAOuJ,OAAO,SAAC,GAAW,OAAX,QAAC,KAAmByC,EAAM,KAAInH,IAAI,SAAC,G,IAAA,UAAC,KAAa,OAAV,OAAgB,IAC/E,MAID,YAAA+Q,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKhI,OAAOqO,QAAQ,SAAC,G,IAAA,UAAC,KAAmB,OAAb,KAAqBuH,UAAU,KAC3D5N,KAAK0Q,KAAK9C,UAAU5N,OAGf,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtD,IAAMwM,EAAgBvN,EAAIwN,oBAAoB9M,GAE9ClE,KAAKhI,OAAOqO,QAAQ,SAAC,G,IAAA,UAACxN,EAAA,KAAM+X,EAAA,KAE1BA,EAAQzM,SAASX,EAAKuN,EAAc7M,QAASK,GAE7CwM,EAAchL,MAAMlN,GAAQ+X,EAAQlM,QAAQlB,EAAKuN,EAAc7M,WAGjElE,KAAK0Q,KAAKvM,SAASX,EAAKuN,EAAc7M,QAASK,IAK1C,YAAA0M,KAAP,SAAYC,EAAyD3X,G,MAE7D4X,EAAS3W,EAAS0W,KACrB,MAAIA,GAAgB3X,EAAK,GACxB2X,E,WAEO,GAET,IAAM1D,EAAO,GAAM4D,MAAMD,EAAO,IAC1B1F,EAAW,EAAKzT,OAAOqZ,KAAK,SAAC,GAAc,OAAd,QAAC,KAAyB,IAEzD5F,EACFA,EAAS,GAAK+B,EAEd,EAAKxV,OAAOuG,KAAK,CAAC,EAAMiP,IAG1BA,EAAKI,UAAU,I,OAXjB,IAAK,IAAM,KAAQuD,E,EAAR,GAcX,OAAOnR,MAGF,YAAAsR,IAAP,SAAW9D,GAKT,OAHAxN,KAAK0Q,KAAOlD,EACZxN,KAAK0Q,KAAK9C,UAAU5N,MAEbA,MAhJK,EAAA6Q,YAAc,SAEd,EAAAC,UAAY,OAEZ,EAAAtL,GAAK,MA+IrB,EAtJA,CAAsC,G,4UCJhC+L,GAAyB,IACzBC,GAAgB,QAMtB,eAyCE,WAAmBC,EAAuBf,EAAkBgB,EAAuCC,QAAvC,IAAAD,MAAA,SAAuC,IAAAC,MAAA,IAAnG,MAEE,cAAO,K,OACP,EAAKF,UAAYA,EACjB,EAAKf,KAAOA,EACZ,EAAKgB,cAAgBA,EACrB,EAAKC,cAAgBA,E,EA6GzB,OA5JkC,QAWlB,EAAAhF,OAAd,SAAqBC,EAAaiC,GAOhC,OAAO,IAAI+C,EALO/C,EAAME,cAAcnC,EAlBlB,IAmBPiC,EAAME,cAAcnC,EAlBlB,IAmBOA,EAlBN,IAkB2B4E,GAC/BK,SAASjF,EAlBP,KAkB2B5M,KAAK8R,iBAKlC,EAAAhF,OAAd,SAAqBU,GAEnB,IAAMvP,EAAM,CAAC+B,KAAKwF,GAAIgI,EAAKiE,UAAU3E,SAAUU,EAAKkD,KAAK5D,UACnDiF,EAASvE,EAAKmE,gBAAkB3R,KAAK8R,eAS3C,OAPItE,EAAKkE,gBAAkBF,IAAiBO,IAC1C9T,EAAIM,KAAKiP,EAAKkE,eAEZK,GACF9T,EAAIM,KAAKiP,EAAKmE,eAGT1T,GAiBF,YAAAkP,MAAP,WAEE,OAAOyE,EAAapM,IAGf,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOtI,KAAKU,IAAI0D,KAAKyR,UAAUzC,cAAcxL,EAAKU,GAAUlE,KAAK0Q,KAAK1B,cAAcxL,EAAKU,IAAY,GAGhG,YAAA+K,SAAP,W,MAEE,OAAO,EAAP,IACGjP,KAAK0R,eAAgB,GAAYzE,S,GAI/B,YAAAH,OAAP,WAEE,OAAO8E,EAAa9E,OAAO9M,OAGtB,YAAAsO,MAAP,WAEE,OAAO,IAAIsD,EAAa5R,KAAKyR,UAAUnD,QAAStO,KAAK0Q,KAAKpC,QAAStO,KAAK0R,cAAe1R,KAAK2R,gBAGvF,YAAAjN,QAAP,SAAelB,EAAyBgI,GAE9B,IAAAtH,EAAA,yCAAAA,QAEFwM,EAAO1Q,KAAK0Q,KAAKhM,QAAQlB,EAAKU,GAEpC,OAAOwM,EAAO,GAAM5K,SAAS4K,GAAQ,MAGhC,YAAApQ,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKkR,EAAaI,eAAgB,EAAKP,UAAW,SAACvQ,GAAgB,SAAKuQ,UAAYvQ,IAC7FZ,EAASI,KAAKkR,EAAad,UAAW,EAAKJ,KAAM,SAACxP,GAAgB,SAAKwP,KAAOxP,OAI3E,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAO4N,EAAaI,eAC7B,CAAC,EAAGhS,KAAKyR,WACTzN,EAAM,KAAO4N,EAAad,UACxB,CAAC,EAAG9Q,KAAK0Q,MACT,MAGD,YAAA9C,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKyR,UAAU7D,UAAU5N,MACzBA,KAAK0Q,KAAK9C,UAAU5N,OAGf,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKoE,aAAaZ,EAAKU,EAAS,GAAY+I,SAAUjN,KAAKyR,UAAWlN,GAEtE,IAAM0N,EAAczO,EAAI0O,WAAWhO,EAASlE,KAAKiP,YAEjDjP,KAAK0Q,KAAKvM,SAASX,EAAKyO,EAAa1N,IAGhC,YAAA4N,GAAP,SAAUzB,EAAkBe,GAW1B,OATAzR,KAAK0Q,KAAOA,EACZ1Q,KAAK0Q,KAAK9C,UAAU5N,MAEhByR,IAEFzR,KAAKyR,UAAYA,EACjBzR,KAAKyR,UAAU7D,UAAU5N,OAGpBA,MAGF,YAAAoS,MAAP,SAAaX,GAKX,OAHAzR,KAAKyR,UAAYA,EACjBzR,KAAKyR,UAAU7D,UAAU5N,MAElBA,MAGF,YAAAqS,UAAP,SAAiBxZ,GAIf,OAFAmH,KAAK0R,cAAgB7Y,EAEdmH,MAGF,YAAAsS,QAAP,SAAeC,GAIb,OAFAvS,KAAK2R,cAAgBY,EAEdvS,MAtJK,EAAAgS,eAAiB,YAEjB,EAAAlB,UAAY,OAEZ,EAAAgB,eAAiBP,GAEjB,EAAA/L,GAAK,KAmJrB,EA5JA,CAAkC,G,ynBCNlC,eAqBE,WAAmBgN,GAAnB,MAEE,cAAO,K,OACP,EAAKA,MAAQA,E,EA6EjB,OArGqC,QAKrB,EAAA7F,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAI4D,EAFG7F,EATE,GASgB/P,IAAI,SAACjE,GAAW,OAAAiW,EAAME,cAAcnW,OAKxD,EAAAkU,OAAd,SAAqBU,GAEnB,IAAMgF,EAAQhF,EAAKgF,MAAM3V,IAAI,SAAAwS,GAAK,OAAAA,EAAEvC,WAEpC,MAAO,CAAC9M,KAAKwF,GAAIgN,IAWZ,YAAArF,MAAP,WAEE,OAAOsF,EAAgBjN,IAGlB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKwS,MAAMhU,OAAO,SAAClC,EAAK+S,GAAM,OAAAzT,KAAKU,IAAIA,EAAK+S,EAAEL,cAAcxL,EAAKU,KAAW,IAG9E,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO2F,EAAgB3F,OAAO9M,OAGzB,YAAAsO,MAAP,WAEE,OAAO,IAAImE,EAAgBzS,KAAKwS,MAAM3V,IAAI,SAAAlE,GAAK,OAAAA,EAAE2V,YAG5C,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAOlE,KAAKwS,MAAMxS,KAAKwS,MAAMxW,OAAS,GAAG0I,QAAQlB,EAAKU,IAGjD,YAAA5D,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAKwS,MAAMnM,QAAQ,SAACmH,EAAMzD,GACxB,OAAAzJ,EAASI,KAAKqJ,EAAOyD,EAAM,SAACtM,GAAgB,SAAKsR,MAAMxI,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKsR,MAAMxI,OAAOD,EAAO,UAKpH,YAAAhG,sBAAP,SAA6BC,GAE3B,OAAO1J,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKwS,MAAMxW,OAC/C,CAAC,EAAGgE,KAAKwS,MAAMxO,EAAM,KACrB,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKwS,MAAMnM,QAAQ,SAAAgJ,GAAK,OAAAA,EAAEzB,UAAU,MAG/B,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKwS,MAAMnM,QAAQ,SAAA/B,GAEjBA,EAAQH,SAASX,EAAKU,EAASK,MAI5B,YAAAnH,IAAP,SAAWyR,G,QAEHsC,EAAS1W,EAAQoU,GAASA,EAAQ,CAACA,G,IAEzC,IAAmB,SAAAsC,GAAM,8BACzB,CADK,IAAM3D,EAAI,QAEbxN,KAAKwS,MAAMjU,KAAKiP,GAChBA,EAAKI,UAAU5N,O,iGAGjB,OAAOA,MA/FK,EAAAwF,GAAK,QAkGrB,EArGA,CAAqC,G,4UCArC,eAqBE,WAAmBkN,GAAnB,MAEE,cAAO,K,OACP,EAAKA,QAAUA,E,EAqDnB,OA7EuC,QAOvB,EAAA/F,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAI8D,EAFK/F,EAXE,KAgBN,EAAAE,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,GAAIgI,EAAKkF,UAWjB,YAAAvF,MAAP,WAEE,OAAOwF,EAAkBnN,IAGpB,YAAAwJ,cAAP,SAAqBxL,GAEnB,OAAO,GAGF,YAAAyL,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO6F,EAAkB7F,OAAO9M,OAG3B,YAAAsO,MAAP,WAEE,OAAO,IAAIqE,EAAkB3S,KAAK0S,UAG7B,YAAAhO,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,GAAS+I,UAGX,YAAA3M,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,KAKjD,YAAAZ,eAAP,SAAsBC,GAEpB,OAAO,GAvEK,EAAA4B,GAAK,UAEI,EAAA6K,SAAW,IAAIsC,EAAkB,IAwE1D,EA7EA,CAAuC,G,osBCAvC,4B,+CAoFA,OApFmC,QAKnB,EAAAhG,OAAd,SAAqBC,EAAaiC,GAEhC,GAAIjC,EATW,GAUf,CACE,IAAM1M,EAAqB0M,EAXd,GAW+B/P,IAAI,SAAC+V,GAAc,OAAA/D,EAAME,cAAc6D,KAInF,OAFA/D,EAAMgE,YAEC,GAAeC,gBAAgB,GAAD,CAAE,IAAIC,GAAoB7S,IAGjE,OAAO,IAAI6S,GAGC,EAAAjG,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,KAGR,YAAA2H,MAAP,WAEE,OAAO4F,EAAcvN,IAGhB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAO,GAGF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOiG,EAAcjG,OAAO9M,OAGvB,YAAAsO,MAAP,WAEE,OAAO,IAAIyE,GAGN,YAAArO,QAAP,SAAelB,EAAyBU,GAEtC,OAAOA,GAGF,YAAA5D,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA+D,sBAAP,SAA6BC,GAE3B,OAAO,MAGF,YAAA4J,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,KAKjD,YAAAd,YAAP,WAEE,OAAO,GAGF,YAAAC,WAAP,WAEE,OAAO,GA9EK,EAAA8B,GAAK,MAiFrB,EApFA,CAAmC,G,osBCCnC,eAmDE,WAAmB2J,GAAnB,MAEE,cAAO,K,OAEP,EAAKA,YAAcA,E,EAyHvB,OAhLoC,QAKpB,EAAAxC,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAImE,EAFSpG,EATL,GASsB/P,IAAI,SAACwS,GAAW,OAAAR,EAAME,cAAcM,OAK7D,EAAAvC,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,GAAIgI,EAAK2B,YAAYtS,IAAI,SAACwS,GAAM,OAAAA,EAAEvC,aAGnC,EAAAgG,gBAAd,SAA8B5S,GAE5B,IAAK,IAAI5H,EAAI4H,EAAKlE,OAAS,EAAG1D,GAAK,EAAGA,IACtC,CACE,IAAM0K,EAAO9C,EAAK5H,GAEd0K,aAAgBgQ,IAEc,IAA5BhQ,EAAKmM,YAAYnT,QAAiBgH,EAAKmM,YAAY,GAAG1L,eAExDvD,EAAK8J,OAAM,MAAX9J,EAAI,IAAQ5H,EAAG,GAAM0K,EAAKmM,eAKhC,OAAO,IAAI6D,EAAe9S,IAGd,EAAA+S,YAAd,SAA0BC,EAAiBrE,GAEzC,IAAMsE,EAASD,EAAS,KAAOF,EAAexN,GACxCtF,EAAOiT,EACTH,EAAerG,OAAOuG,EAAUrE,GAChCmE,EAAerG,OAAO,CAAC,OAAQ,IAAC,IAAI,IAAoBuG,IAAYrE,GAMxE,OAJIsE,GACFtE,EAAMgE,YAGD3S,GAYF,YAAAiN,MAAP,WAEE,OAAO6F,EAAexN,IAGjB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKmP,YAAY3Q,OAAO,SAAClC,EAAK0G,GAAS,OAAApH,KAAKU,IAAIA,EAAK0G,EAAKgM,cAAcxL,EAAKU,KAAW,IAG1F,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOkG,EAAelG,OAAO9M,OAGxB,YAAAsO,MAAP,WAEE,OAAO,IAAI0E,EAAehT,KAAKmP,YAAYtS,IAAI,SAACwS,GAAM,OAAAA,EAAEf,YAGnD,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAOV,EAAI4P,YAAYpT,KAAKmP,YAAajL,IAGpC,YAAA5D,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAKmP,YAAY9I,QAAQ,SAACmH,EAAMzD,GAC9B,OAAAzJ,EAASI,KAAKqJ,EAAOyD,EAAM,SAACtM,GAAgB,SAAKiO,YAAYnF,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKiO,YAAYnF,OAAOD,EAAO,UAKhI,YAAAhG,sBAAP,SAA6BC,GAE3B,OAAO1J,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKmP,YAAYnT,OACrD,CAAC,EAAGgE,KAAKmP,YAAYnL,EAAM,KAC3B,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKmP,YAAY9I,QAAQ,SAAAgJ,GAAK,OAAAA,EAAEzB,UAAU,MAGrC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtD,IAAMrE,EAAOF,KAAKmP,YAElB,GAAoB,IAAhBjP,EAAKlE,OAAT,CAYA,IAAIqX,EAAWnT,EAAK,GAAGwE,QAAQlB,EAAKU,GAEpC,GAAKmP,EAWL,CACEnT,EAAK,GAAGiE,SAASX,EAAKU,EAASK,GAE/B,IAAK,IAAIjM,EAAI,EAAGA,EAAI4H,EAAKlE,OAAQ1D,IACjC,CACE,IAAM0K,EAAO9C,EAAK5H,GAQlB,GANA0K,EAAKmB,SAASX,EAAKU,EAASK,EAAS8O,KAErCA,EAAWrQ,EAAKU,aACZV,EAAK0B,QAAQlB,EAAKU,EAASmP,GAC3BA,EAAS9F,WAAWvK,EAAMQ,EAAKU,IAGnC,CACEK,EAAQ,CACNpB,KAAMzD,EAAe4T,mBACrBvO,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStB,EACTlB,OAAQ9B,OAGV,aAhCJuE,EAAQ,CACNpB,KAAMzD,EAAe4T,mBACrBvO,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAASpE,EAAK,GACd4B,OAAQ9B,YAnBVuE,EAAQ,CACNpB,KAAMzD,EAAe6T,WACrBxO,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,QAgDR,YAAAwT,WAAP,SAAkB5P,GAEhB,OAAO5D,KAAKmP,YAAYnT,OAAS,GAC7BgE,KAAKmP,YAAYnP,KAAKmP,YAAYnT,OAAS,GAAG2H,eAAeC,IAzKrD,EAAA4B,GAAK,OA6KrB,EAhLA,CAAoC,G,4UCApC,eA8BE,WAAmB3M,GAAnB,MAEE,cAAO,K,OACP,EAAKA,KAAOA,E,EA8FhB,OA/HwC,QAOxB,EAAA8T,OAAd,SAAqBC,EAAaiC,GAEhC,IAAMhW,EAAO+T,EAZE,GAcf,GAAIA,EAbiB,GAcrB,CACE,IAAMgC,EAAaC,EAAME,cAAcnC,EAfpB,IAmBnB,OAFAiC,EAAMgE,YAEC,GAAeC,gBAAgB,CAAClE,EAAY,IAAI6E,EAAmB5a,KAG5E,OAAO,IAAI4a,EAAmB5a,IAGlB,EAAAiU,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,GAAIgI,EAAK3U,OAWjB,YAAAsU,MAAP,WAEE,OAAOsG,EAAmBjO,IAGrB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,IAAMuC,EAAOjD,EAAIkQ,YAAY1T,KAAKnH,MAElC,IAAK4N,EAEH,OAAO,EAGT,IAAMH,EAAK9C,EAAImQ,aAAalN,EAAKH,IAEjC,OAAOA,EAAKA,EAAGH,WAAa,GAGvB,YAAA8I,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO2G,EAAmB3G,OAAO9M,OAG5B,YAAAsO,MAAP,WAEE,OAAO,IAAImF,EAAmBzT,KAAKnH,OAG9B,YAAA6L,QAAP,SAAelB,EAAyBU,EAAemP,GAErD,OAAOA,EAAW7P,EAAIoQ,sBAAsB5T,KAAKnH,KAAMwa,GAAY,MAG9D,YAAA/S,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA+D,sBAAP,SAA6BC,GAE3B,OAAO,MAGF,YAAA4J,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,EAA4B8O,GAE7EA,EAWE7P,EAAIqQ,YAAYR,EAAUrT,KAAKnH,OAElC0L,EAAQ,CACNpB,KAAMzD,EAAe4T,mBACrBvO,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,OAfbuE,EAAQ,CACNpB,KAAMzD,EAAeoU,aACrB/O,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,QAiBR,YAAA0D,WAAP,WAEE,OAAO,GAGF,YAAAC,eAAP,SAAsBC,GAEpB,IAAM6C,EAAO7C,EAAK8P,YAAY1T,KAAKnH,MAEnC,OAAQ4N,KAAUA,EAAKE,WAzHX,EAAAoN,gBAAkB,aAElB,EAAAvO,GAAK,OA0HrB,EA/HA,CAAwC,GCN3BwO,GAAiB,IAAIjM,EAAWnB,EAAGe,KAAOf,EAAGiB,WAE7CoM,GAAgB,IAAIhM,EAAUrB,EAAGe,KAAOf,EAAGiB,WAElD,GAAMmM,GAECE,GACb,CAIEta,OAAQ,GAAI8L,IAAI,UAEhByO,KAAM,GAAIzO,IAAI,QAIdyC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7ByL,OAAQ,GAAIzL,IAAI,IAAK,GAAI,CAAC,QAAS,WAEnC0O,QAAS,GAAI1O,IAAI,MAAO,GAAI,CAAC,QAAS,YAEtC2O,MAAO,GAAI3O,IAAI,KAAM,GAAI,CAAC,UAE1B4O,MAAO,GAAI5O,IAAI,KAAM,GAAI,CAAC,UAE1B6O,KAAM,GAAI7O,IAAI,IAAK,GAAI,CAAC,QAAS,SAAU,CAAC,YAE5C3F,QAAS,GAAI2F,IAAI,UAAW,GAAI,CAAC,QAAS,OAAQ,YAElD8O,OAAQ,GAAI9O,IAAI,SAAU,GAAI,CAAC,QAAS,UAExC+O,MAAO,GAAI/O,IAAI,QAAS,GAAI,CAAC,QAAS,MAAO,CAAC,UAE9CgP,MAAO,GAAIhP,IAAI,QAAS,GAAI,CAAC,UAE7BiP,IAAK,GAAIjP,IAAI,MAAO,GAAI,CAAC,SAAU,CAAC,QAAS,QAE7CkP,QAAS,GAAIlP,IAAI,KAAM,GAAI,CAAC,QAAS,UAAW,CAAC,UAEjDmP,YAAa,GAAInP,IAAI,MAAO,GAAI,CAAC,QAAS,UAAW,CAAC,UAEtDoP,KAAM,GAAIpP,IAAI,OAAQ,GAAI,CAAC,SAAU,CAAC,QAAS,QAE/CqP,WAAY,GAAIrP,IAAI,SAAU,GAAI,CAAC,QAAS,SAE5CsP,SAAU,GAAItP,IAAI,OAAQ,GAAI,CAAC,QAAS,SAExCuP,QAAS,GAAIvP,IAAI,UAAW,CAAES,WAAY,GAAK,CAAC,SAAU,CAAC,MAAO,QAElE+O,UAAW,GAAIxP,IAAI,YAAa,CAAES,WAAY,GAAK,CAAC,UAEpDgP,SAAU,GAAIzP,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,QAAS,SAEvDnK,OAAQ,GAAI0J,IAAI,MAAO,GAAI,CAAC,UAE5B+E,QAAS,GAAI/E,IAAI,MAAO,GAAI,CAAC,QAAS,QAAS,CAAC,eAEhD0P,KAAM,GAAI1P,IAAI,OAAQ,GAAI,CAAC,QAAS,WAAY,CAAC,eAEjDvG,IAAK,GAAIuG,IAAI,MAAO,GAAI,CAAC,QAAS,UAAW,OAAQ,CAAC,MAAO,WAE7D2P,UAAW,GAAI3P,IAAI,YAAa,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAEvE4P,WAAY,GAAI5P,IAAI,aAAc,GAAI,CAAC,QAAS,SAAU,CAAC,QAAS,aAAc,cAElF6P,WAAY,GAAI7P,IAAI,aAAc,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAEzE8P,cAAe,GAAI9P,IAAI,gBAAiB,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAE/E+P,aAAc,GAAI/P,IAAI,eAAgB,GAAI,CAAC,QAAS,QAAS,eAAgB,CAAC,MAAO,aAAc,cAEnGgQ,oBAAqB,GAAIhQ,IAAI,sBAAuB,GAAI,CAAC,QAAS,QAAS,WAAY,CAAC,MAAO,aAAc,aAAc,CAAC,SAAU,CAAC,YAEvIiQ,aAAc,GAAIjQ,IAAI,eAAgB,GAAI,CAAC,QAAS,SAAU,CAAC,aAAc,cAQ7EkQ,OAAQ,GAAIlQ,IAAI,SAAU,GAAI,CAAC,UAE/BmQ,SAAU,GAAInQ,IAAI,WAAY,GAAI,CAAC,UAEnCoQ,UAAW,GAAIpQ,IAAI,YAAa,GAAI,CAAC,UAErCqQ,UAAW,GAAIrQ,IAAI,YAAa,GAAI,CAAC,UAErCsQ,mBAAoB,GAAItQ,IAAI,qBAAsB,GAAI,CAAC,UAEvDuQ,mBAAoB,GAAIvQ,IAAI,qBAAsB,GAAI,CAAC,UAEvDwQ,IAAK,GAAIxQ,IAAI,MAAO,GAAI,CAAC,UAEzByQ,QAAS,GAAIzQ,IAAI,UAAW,GAAI,CAAC,QAAS,WAE1C0Q,QAAS,GAAI1Q,IAAI,UAAW,GAAI,CAAC,QAAS,WAE1C2Q,SAAU,GAAI3Q,IAAI,WAAY,GAAI,CAAC,SAAU,CAAC,iBAI9C+C,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3B3J,QAAS,GAAI2J,IAAI,KAAM,GAAI,CAAC,UAE5B4Q,WAAY,GAAI5Q,IAAI,KAAM,GAAI,CAAC,UAE/BkD,QAAS,GAAIlD,IAAI,IAAK,GAAI,CAAC,IAAK,KAAM,CAAC,eAEvCmD,WAAY,GAAInD,IAAI,KAAM,GAAI,CAAC,IAAK,KAAM,CAAC,eAE3CqK,OAAQ,GAAIrK,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,eAE7CsK,cAAe,GAAItK,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,eAErDuK,UAAW,GAAIvK,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,eAEhDwK,iBAAkB,GAAIxK,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,eAExD6Q,QAAS,GAAI7Q,IAAI,MAAO,GAAI,CAAC,UAE7B8Q,QAAS,GAAI9Q,IAAI,MAAO,GAAI,CAAC,UAE7B+Q,OAAQ,GAAI/Q,IAAI,QAAS,GAAI,CAAC,UAI9BoD,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpCiZ,GAAcvO,IAAI,UAAWwO,GAAQI,OACrCL,GAAcvO,IAAI,UAAWwO,GAAQG,OACrCJ,GAAcvO,IAAI,QAASwO,GAAQQ,OACnCT,GAAcvO,IAAI,OAAQwO,GAAQY,MAClCb,GAAcvO,IAAI,UAAWwO,GAAQe,SACrChB,GAAcvO,IAAI,YAAawO,GAAQgB,WACvCjB,GAAcvO,IAAI,SAAUwO,GAAQ0B,QACpC3B,GAAcvO,IAAI,WAAYwO,GAAQ2B,UACtC5B,GAAcvO,IAAI,YAAawO,GAAQ4B,WACvC7B,GAAcvO,IAAI,YAAawO,GAAQ6B,WACvC9B,GAAcvO,IAAI,qBAAsBwO,GAAQ8B,oBAChD/B,GAAcvO,IAAI,qBAAsBwO,GAAQ+B,oBAChDhC,GAAcvO,IAAI,MAAOwO,GAAQgC,KACjCjC,GAAcvO,IAAI,WAAYwO,GAAQmC,UACtCpC,GAAcvO,IAAI,UAAWwO,GAAQnY,SACrCkY,GAAcvO,IAAI,aAAcwO,GAAQoC,YACxCrC,GAAcvO,IAAI,UAAWwO,GAAQqC,SACrCtC,GAAcvO,IAAI,UAAWwO,GAAQsC,S,iiBC/J/BE,GAAoB,uEAa1B,4B,+CA4XA,OA5X8B,QAWd,EAAA/J,OAAd,SAAqBC,GAEnB,OAAO,IAAI+J,EAAS3W,KAAK4W,cAAchK,EA7BrB,IA6B4C,MAGlD,EAAAE,OAAd,SAAqB3J,GAEnB,OAAOpH,EAAQoH,EAAKtB,SAChB7B,KAAKwF,GACL,CAACxF,KAAKwF,GAAIxF,KAAK6W,cAAc1T,EAAKtB,WAGzB,EAAA+U,cAAf,SAA6B/U,GAE3B,IAAM1E,EAAU0E,EAAQ1E,QAIxB,OAFIA,IAAS0E,EAAQ1E,QAAU,IAAI2Z,OAAO3Z,EAAQ,GAAIA,EAAQ,KAEvD0E,GAGM,EAAAgV,cAAf,SAA6BhV,GAE3B,IAAMkV,EAAO,MAAalV,GACpB1E,EAAU4Z,EAAQ5Z,QAIxB,OAFIA,IAAS4Z,EAAQ5Z,QAAU,CAACA,EAAQD,OAAQC,EAAQyI,QAEjDmR,GAKK,EAAAhK,SAAd,SAAuBH,GAErB,OAAKpS,EAASoS,GAKP,IAAI+J,EAAS,CAClBta,IAAKuQ,EAAK5Q,OACVM,IAAKsQ,EAAK5Q,OACVgb,aAAcpK,EAAKqK,gBAAkBrK,EACrCsK,aAActK,EAAKuK,gBAAkBvK,IAP9B,MAaG,EAAAM,SAAd,WAKER,EAAUzB,WAAW,CACnBwB,SAJe,EAKftJ,KAJwB,SAKxBsH,QAAS,SAACnP,EAAGC,GACX,OAAOD,EAAE8b,cAAc7b,MAI3BmR,EAAUrB,UAAU,CAClBoB,SAZe,EAaftJ,KAZwB,SAaxBgI,OAAQ,SAAC7P,EAAGC,GACV,OAAOD,IAAMC,KAIjBmR,EAAUN,YAAY,CACpBK,SApBe,EAqBfhE,QAASjO,EACTrB,IAAK,SAACuC,EAAGgF,GAAS,OAAAhF,EAAEgF,IACpBgF,IAAK,SAAChK,EAAGgF,EAAMnH,GAAU,OAAAmC,EAAEgF,GAAQnH,MAIhC,YAAA4T,MAAP,WAEE,OAAOwJ,EAASnR,IAGX,YAAA4H,cAAP,WAEE,OAAOuJ,EAAStJ,WAAWxQ,KAGtB,YAAAyQ,MAAP,SAAanK,GAEX,IAAMkU,EAAKrX,KAAK6B,QACVyV,EAAKnU,EAAKtB,QAEhBwV,EAAG/a,IAAMV,KAAKU,IAAI+a,EAAG/a,IAAKgb,EAAGhb,KAC7B+a,EAAGhb,IAAMT,KAAKS,IAAIgb,EAAGhb,IAAKib,EAAGjb,KAC7Bgb,EAAGL,aAAeK,EAAGL,cAAgBM,EAAGN,aACxCK,EAAGH,aAAeG,EAAGH,cAAgBI,EAAGJ,cAGnC,YAAA3J,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,GAAI,GAAmBqT,GAAG/J,GAC1B,CACE,GAAmB,WAAfA,EAAKjU,MAEP,OAAO,GAAMie,OAGf,GAAIld,EAASkT,EAAKjU,OAEhB,OAAO,GAAMke,KAIjB,IAAIC,EAAWlK,EAAK9I,QAAQlB,EAAKU,GAEjC,GAAIwT,EACJ,CAGE,IAFAA,EAAWA,EAAS3V,yBAEI,GAEtB,OAAO,GAAM0V,KAGf,GAAIC,aAAoB,GACxB,CACE,GAAIA,EAAS7V,QAAQtI,iBAAiB,GAEpC,OAAO,GAAMke,KAGf,GAAIC,EAAS7V,QAAQtI,iBAAiBod,EACtC,CACE,IAAMgB,EAASjd,MAAMoC,KAAK4a,EAAS7V,QAAQ+V,UAAUD,UAErD,GAAsB,IAAlBA,EAAO3b,QAA8B,WAAd2b,EAAO,GAEhC,OAAO,GAAMH,WAOhB,YAAA/J,YAAP,SAAmBjK,GAEjB,MAAO,CACL,CAAE3J,IAAK,SAAUN,MAAO,GAAMie,QAC9B,CAAE3d,IAAK,GAAMge,MAAOte,MAAO,GAAMuM,SAAS,GAAM2R,SAI7C,YAAA/J,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,KAAMK,aAAiByU,GAErB,OAAO,EAGT,GAAI9U,EAAQtI,MACZ,CACE,IAAM8C,EAAM2D,KAAK6B,QAAQxF,IACnByb,EAAW5V,EAAML,QAAQxF,IAE/B,GAAIA,KAASyb,GAAYA,EAAWzb,GAElC,OAAO,EAGT,IAAMC,EAAM0D,KAAK6B,QAAQvF,IACnByb,EAAW7V,EAAML,QAAQvF,IAE/B,GAAIA,KAASyb,GAAYA,EAAWzb,GAElC,OAAO,EAGT,IAAM+X,EAAQrU,KAAK6B,QAAQmW,YAAchY,KAAK6B,QAAQqV,aAChDe,EAAa/V,EAAML,QAAQmW,YAAc9V,EAAML,QAAQmV,aAE7D,GAAI3C,IAAU4D,EAEZ,OAAO,EAGT,IAAM3D,EAAQtU,KAAK6B,QAAQqW,YAAclY,KAAK6B,QAAQqV,aAChDiB,EAAajW,EAAML,QAAQqW,YAAchW,EAAML,QAAQqV,aAE7D,GAAI5C,IAAU6D,EAEZ,OAAO,EAGT,IAAMhb,EAAU6C,KAAK6B,QAAQ1E,QACvBib,EAAelW,EAAML,QAAQ1E,QAEnC,GAAIA,KAAaib,GAAgBA,EAAalb,SAAWC,EAAQD,QAE/D,OAAO,EAIX,OAAO,GAGF,YAAA2H,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAA+L,4BAAP,WAEE7N,KAAK6B,QAAU,IAGV,YAAAiM,oBAAP,WAEE,OAAO,GAAMxH,GAAG4N,GAAQta,OAAQ,KAG3B,YAAAmU,sBAAP,WAEE,OAAO,GAAMzH,GAAG4N,GAAQzL,QAAS,CAC/BlP,MAAO,GAAMJ,IAAI,YAId,YAAA6U,qBAAP,WAEE,OAAO,GAAM1H,GAAG4N,GAAQzJ,QAAS,CAC/BlR,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,QAChBkf,WAAY,GAAMnK,UAIf,YAAAzF,QAAP,SAAelP,GAEb,IAAKiB,EAASjB,GAEZ,OAAO,EAGH,mBAAE8C,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IAAK0a,EAAA,EAAAA,aAAcE,EAAA,EAAAA,aAAc/Z,EAAA,EAAAA,QAAS6a,EAAA,EAAAA,WAAYE,EAAA,EAAAA,WAEnE,QAAI5d,EAAS+B,IAAQ9C,EAAMyC,OAASK,OAKhC/B,EAASgC,IAAQ/C,EAAMyC,OAASM,OAKhC0a,GAAgBzd,IAAUA,EAAM0d,gBAAkBe,OAKlDd,GAAgB3d,IAAUA,EAAM4d,gBAAkBe,MAKlD/a,GAAWA,aAAmB2Z,SAAW3Z,EAAQyH,KAAKrL,QAQrD,YAAA6U,UAAP,SAAiB7U,GAef,OAbIiB,EAASjB,KAEPyG,KAAK6B,QAAQmW,aAEfze,EAAQA,EAAM0d,eAGZjX,KAAK6B,QAAQqW,aAEf3e,EAAQA,EAAM4d,gBAIX5d,GAGF,YAAA8U,YAAP,WAEE,OAAO,IAAIsI,EAAS,KAGf,YAAArI,MAAP,WAEE,OAAO,IAAIqI,EAASjK,EAAUpB,KAAKtL,KAAK6B,WAGnC,YAAAiL,OAAP,WAEE,OAAO6J,EAAS7J,OAAO9M,OAGlB,YAAApG,OAAP,WAEE,MAAO,IAGF,YAAA2U,OAAP,SAAcC,GAUZ,IARM,mBAAEnS,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IAAK0a,EAAA,EAAAA,aAAcgB,EAAA,EAAAA,WAAYd,EAAA,EAAAA,aAAcgB,EAAA,EAAAA,WACpD7D,EAAQ2C,GAAgBgB,EACxB1D,EAAQ4C,GAAgBgB,EAGxBne,EAAIyU,EAFQzP,EAAS1C,EAjXZ,GAkXG0C,EAASzC,EAjXZ,IAkXsB,GAAG,GACpC2B,EAAM,GAED3F,EAAI,EAAGA,EAAIyB,EAAGzB,IAErB2F,GAAOyY,GAAkB4B,OAAO9J,EAAI,EAAGkI,GAAkB1a,QAAQ,IAMnE,OAHIqY,IAAOpW,EAAMA,EAAIgZ,eACjB3C,IAAOrW,EAAMA,EAAIkZ,eAEdlZ,GAGF,YAAA6N,SAAP,SAAgBC,GAEd,OAAOA,GAGF,YAAAF,OAAP,SAActS,GAEZ,OAAOA,GAtXK,EAAAiM,GAAKoB,EAAGe,KAER,EAAA0F,WAAa2G,GAEb,EAAAvF,UAAYwF,GAEZ,EAAAhH,SAAW,IAAI0J,EAAS,IAiCxB,EAAAjI,iBAA2B,EAiB3B,EAAAC,YAAsB,EAiUtC,EA5XA,CAA8B,GC1BjB4J,GAAgB,IAAIxQ,EAAWnB,EAAG9L,IAAM8L,EAAGiB,WAE3C2Q,GAAe,IAAIvQ,EAAUrB,EAAG9L,IAAM8L,EAAGiB,WAEhD,GAAM0Q,GAECE,GACb,CAIE7e,OAAQ,GAAI8L,IAAI,UAEhBgT,WAAY,GAAIhT,IAAI,aAAc,GAAI,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAE5DiT,UAAW,GAAIjT,IAAI,YAAa,GAAI,CAAC,SAAU,CAAC,OAAS,GAAI,GAAI,CAAC,QAAS,QAI3EyC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7BvM,IAAK,GAAIuM,IAAI,MAAO,GAAI,CAAC,MAAO,OAAQ,GAAI,GAAI,GAAI,CAAC,QAErDA,IAAK,GAAIA,IAAI,MAAO,CAAEQ,QAAS,CAAC,QAAU,CAAC,MAAO,MAAO,SAAU,GAAI,CAAC,iBAAkB,CAAC,SAAU,CAAC,QAEtG0S,IAAK,GAAIlT,IAAI,MAAO,GAAI,CAAC,MAAO,QAEhCmT,OAAQ,GAAInT,IAAI,SAAU,CAAEQ,QAAS,CAAC,QAAU,CAAC,MAAO,QAExD4S,KAAM,GAAIpT,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAE/DwR,OAAQ,GAAIjS,IAAI,SAAU,CAAES,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEnEpJ,QAAS,GAAI2I,IAAI,UAAW,CAAES,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAErE4S,MAAO,GAAIrT,IAAI,QAAS,CAAES,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEjE6S,MAAO,GAAItT,IAAI,QAAS,CAAEQ,QAAS,CAAC,QAAU,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEpEtE,MAAO,GAAI8D,IAAI,QAAS,GAAK,CAAC,QAE9B8C,IAAK,GAAI9C,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAEpGmF,KAAM,GAAI5F,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,OAAQ,CAAC,WAAY,eAAgB,CAAC,MAAO,MAAO,SAAU,CAAC,WAAY,eAAgB,CAAC,QAEtItJ,IAAK,GAAI6I,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,CAAC,YAAa,gBAAiB,CAAC,MAAO,MAAO,SAAU,CAAC,YAAa,gBAAiB,CAAC,QAExI8S,cAAe,GAAIvT,IAAI,QAAS,CAAES,WAAY,GAAK,CAAC,QAEpD+S,gBAAiB,GAAIxT,IAAI,YAAa,CAAES,WAAY,GAAK,CAAC,UAAW,GAAI,GAAI,GAAI,CAAC,WAIlFsC,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BkD,QAAS,GAAIlD,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAEtG0C,WAAY,GAAInD,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAE1G4J,OAAQ,GAAIrK,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAErG6J,cAAe,GAAItK,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAE7G8J,UAAW,GAAIvK,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAExG+J,iBAAkB,GAAIxK,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,MAAO,QAAS,QAAS,CAAC,YAIhH2C,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpCwd,GAAa9S,IAAI,OAAQ+S,GAAOnN,MAChCkN,GAAa9S,IAAI,OAAQ+S,GAAOK,MAChCN,GAAa9S,IAAI,SAAU+S,GAAOd,QAClCa,GAAa9S,IAAI,UAAW+S,GAAO1b,SACnCyb,GAAa9S,IAAI,QAAS+S,GAAOM,OACjCP,GAAa9S,IAAI,QAAS+S,GAAO7W,O,w5BC9EjC,4B,+CAuRA,OAvR8B,QAed,EAAA+K,OAAd,SAAqBC,EAAarH,GAEhC,IAAM1L,EAAM0L,EAAMb,QAAQkI,EA5BZ,IA6BRrT,EAAQgM,EAAMb,QAAQkI,EA5BZ,IA6BVgL,EAAY,IAAI9c,IAAI8R,EA5BN,GA4B4B/P,IAAI,SAAC,G,IAAA,UAACF,EAAA,KAAGD,EAAA,KAAmB,OAC1E7C,EAAIiS,SAASnP,GACbpD,EAAMuS,SAASpP,OAGjB,OAAO,IAAIyc,EAAS,CAAEtf,IAAG,EAAEN,MAAK,EAAEqe,UAAS,KAG/B,EAAA9K,OAAd,SAAqB3J,GAEb,gBAAEtJ,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAAOqe,EAAA,EAAAA,UAEpB,MAAO,CACL5X,KAAKwF,GACL3L,EAAIiT,SACJvT,EAAMuT,SACNpS,MAAMoC,KAAK8a,EAAU7a,WAAWF,IAAI,SAAC,G,IAAA,UAACF,EAAA,KAAGD,EAAA,KAAO,OAC9C7C,EAAIgS,OAAOlP,GACXpD,EAAMsS,OAAOnP,QAOL,EAAAqQ,SAAd,WAEE,OAAO,MAKK,EAAAG,SAAd,aAKO,YAAAC,MAAP,WAEE,OAAOgM,EAAS3T,IAGX,YAAA4H,cAAP,WAEE,OAAOpN,KAAK6B,QAAQtI,MAAM6T,iBAGrB,YAAAE,MAAP,SAAanK,G,QAELiW,EAAKpZ,KAAK6B,QAAQ+V,UAClByB,EAAKlW,EAAKtB,QAAQ+V,UAExB5X,KAAK6B,QAAQhI,IAAM,GAAMyT,MAAMtN,KAAK6B,QAAQhI,IAAKsJ,EAAKtB,QAAQhI,KAC9DmG,KAAK6B,QAAQtI,MAAQ,GAAM+T,MAAMtN,KAAK6B,QAAQtI,MAAO4J,EAAKtB,QAAQtI,O,IAElE,IAA2B,SAAA8f,EAAGtc,WAAS,8BACvC,CADW,oBAAClD,EAAA,KAAKN,EAAA,KAEf6f,EAAG1T,IAAI7L,EAAKN,I,mGAIT,YAAAgU,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAOlE,KAAK6B,QAAQtI,MAAMgU,WAAWC,EAAMhK,EAAKU,IAG3C,YAAAuJ,YAAP,SAAmBjK,GAEjB,OAAOxD,KAAK6B,QAAQtI,MAAMkU,YAAYjK,IAGjC,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,KAAK6B,QAAQtI,OAGf,YAAAyI,UAAP,WAEE,OAAO,GAGC,YAAAO,iBAAV,SAA2BL,EAAaL,GAEtC,QAFsC,IAAAA,MAAA,MAEhCK,aAAiBiX,GAErB,OAAO,EAGH,mBAAEtf,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAEb,QAAIsI,EAAQM,QAELtI,EAAIoI,aAAaC,EAAML,QAAQhI,IAAKgI,KAMpCtI,EAAM0I,aAAaC,EAAML,QAAQtI,QAGnC,YAAAsL,WAAP,WAEE,OAAO7E,KAAK6B,QAAQtI,MAAMsL,cAGrB,YAAA8I,SAAP,WAEE,OAAO3N,KAAK6B,QAAQtI,MAAMoU,YAGrB,YAAArN,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKyY,EAASG,SAAU,EAAKzX,QAAQhI,IAAK,SAACqH,GAAgB,SAAKW,QAAQhI,IAAMqH,IACvFZ,EAASI,KAAKyY,EAASI,WAAY,EAAK1X,QAAQtI,MAAO,SAAC2H,GAAgB,SAAKW,QAAQtI,MAAQ2H,OAI1F,YAAAoC,gBAAP,SAAuB5C,GAErB,OAAOA,IAASyY,EAASG,SACrBtZ,KAAK6B,QAAQhI,IACb6G,IAASyY,EAASI,WAChBvZ,KAAK6B,QAAQtI,MACb,MAGD,YAAAqU,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQhI,IAAI+T,UAAU5N,MAC3BA,KAAK6B,QAAQtI,MAAMqU,UAAU5N,OAGxB,YAAA6N,4BAAP,aAKO,YAAAC,oBAAP,WAEE,OAAO9N,KAAK6B,QAAQtI,MAAMuU,uBAGrB,YAAAC,sBAAP,WAEE,OAAO/N,KAAK6B,QAAQtI,MAAMwU,yBAGrB,YAAAC,qBAAP,WAEE,OAAOhO,KAAK6B,QAAQtI,MAAMyU,wBAGrB,YAAApL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,OAAIhG,IAASqc,EAASG,SAEb,GAAMhT,GAAGmS,GAAO5b,IAAK,CAC1BA,IAAK,GAAM1D,IAAI,SACfqgB,aAAc3W,GACb,CACDhJ,IAAK,QACLN,MAAO,gBAKF,GAAM+M,GAAGmS,GAAO5b,IAAK,CAC1BA,IAAK,GAAM1D,IAAI,SACfmF,UAAWuE,KAKV,YAAA4F,QAAP,SAAe7D,G,QAEP,eAAEgT,EAAA,EAAAA,UAER,IAFmB,EAAAre,MAERkP,QAAQ7D,GAEjB,OAAO,E,IAGT,IAA4B,SAAAgT,EAAUD,UAAQ,8BAC9C,CADK,IAAM8B,EAAa,QAEtB,GAA+C,IAA3C/M,EAAUjC,QAAQgP,EAAe7U,GAEnC,OAAO,G,iGAIX,OAAO,GAGF,YAAAwJ,UAAP,SAAiB7U,GAEf,OAAOyG,KAAK6B,QAAQtI,MAAM6U,UAAU7U,IAG/B,YAAA8U,YAAP,WAEQ,mBAAExU,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAEb,OAAO,IAAI4f,EAAS,CAClBtf,IAAKA,EAAIwU,cACT9U,MAAOA,EAAM8U,cACbuJ,UAAW,IAAI9c,OAIZ,YAAAwT,MAAP,WAEQ,mBAAEzU,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAAOqe,EAAA,EAAAA,UAEpB,OAAO,IAAIuB,EAAS,CAClBtf,IAAKA,EAAIyU,QACT/U,MAAOA,EAAM+U,QACbsJ,UAAW,IAAI9c,IAAI8c,EAAU7a,cAI1B,YAAA+P,OAAP,WAEE,OAAOqM,EAASrM,OAAO9M,OAGlB,YAAApG,OAAP,WAEQ,mBAAEL,EAAA,EAAAA,MAAOqe,EAAA,EAAAA,UACT8B,EAAW9B,EAAUkB,OAAOa,OAElC,OAAOD,EAAW9B,EAAUze,IAAIugB,GAAYngB,EAAMK,UAG7C,YAAA2U,OAAP,SAAcC,GAEZ,IAAMmJ,EAASjd,MAAMoC,KAAKkD,KAAK6B,QAAQ+V,UAAUD,UAEjD,OAAOA,EAAOnJ,EAAI,EAAGmJ,EAAO3b,QAAQ,KAG/B,YAAA8P,SAAP,SAAgBC,GAEd,OAAO/L,KAAK6B,QAAQtI,MAAMuS,SAASC,IAG9B,YAAAF,OAAP,SAActS,GAEZ,OAAOyG,KAAK6B,QAAQtI,MAAMsS,OAAOtS,IAjRrB,EAAA+f,SAAW,MAEX,EAAAC,WAAa,QAEb,EAAA/T,GAAKoB,EAAGK,KAER,EAAAoG,WAAa,IAAItF,EAAWnB,EAAGK,KAAOL,EAAGiB,WAEzC,EAAA4G,UAAY,IAAIxG,EAAUrB,EAAGK,KAAOL,EAAGiB,WAEvC,EAAAoF,SAAW,IAAIkM,EAAS,CAAEtf,IAAK,GAASoT,SAAU1T,MAAO,GAAS0T,SAAU2K,UAAW,IAAI9c,MA6B3F,EAAA4T,kBAA4B,EAO5B,EAAAC,YAAsB,EAsOtC,EAvRA,CAA8B,G,4UCV9B,eAiCE,WAAmBpV,GAAnB,MAEE,cAAO,K,OACP,EAAKA,MAAQA,E,EA2EjB,OA/GwC,QAGxB,EAAAqf,IAAd,SAAkBvJ,EAAeuK,GAE/B,OAAOvK,aAAawK,GAAsBxK,EAAE9V,QAAUqgB,GAG1C,EAAArC,GAAd,SAAiBlI,GAEf,OAAOA,aAAawK,GAKR,EAAAlN,OAAd,SAAqBC,EAAaY,GAIhC,OAAO,IAAIqM,EAFG,GAAQ5M,SAASnB,SAASc,EAnBrB,MAwBP,EAAAE,OAAd,SAAqBU,GAEnB,IAAMjU,EAAQ,GAAQ0T,SAASpB,OAAO2B,EAAKjU,OAE3C,OAAOkB,EAAQlB,GACX,CAACyG,KAAKwF,GAAIjM,GACVA,GAWC,YAAA4T,MAAP,WAEE,OAAO0M,EAAmBrU,IAGrB,YAAAwJ,cAAP,WAEE,OAAO,GAGF,YAAAC,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO+M,EAAmB/M,OAAO9M,OAG5B,YAAAsO,MAAP,WAEE,OAAO,IAAIuL,EAAmBnN,EAAUpB,KAAKtL,KAAKzG,SAG7C,YAAAmL,QAAP,SAAelB,EAAyBU,GAEtC,IAAM3K,EAAQyG,KAAKzG,MAEnB,GAAIiB,EAASjB,GAEX,OAAO,IAAI,GAAS,CAClBM,IAAK,GAASoT,SAASoB,cACvB9U,MAAO,GAAS0T,SAASoB,cACzBuJ,UAAW,IAAI9c,IAAI,CAAC,CAACvB,EAAOA,OAIhC,GAAIe,EAASf,GAEX,OAAO,IAAI,GAAS,CAClBM,IAAK,GAAWoT,SAASoB,cACzB9U,MAAO,GAAW0T,SAASoB,cAC3BuJ,UAAW,IAAI9c,IAAI,CAAC,CAACvB,EAAOA,OAIhC,IAAMugB,EAAYtW,EAAIuJ,SAAS/M,KAAKzG,OAOpC,OALIugB,GAEFA,EAAUjM,8BAGLiM,GAGF,YAAAxZ,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,KA7F1C,EAAAiB,GAAK,WAkGrB,EA/GA,CAAwC,G,4UCHlC,GAAyB,IACzB,GAAgB,QAQtB,eA+CE,WAAmBuU,EAAkBC,EAAmBC,EAAiBvJ,EAAkBgB,EAAuCC,QAAvC,IAAAD,MAAA,SAAuC,IAAAC,MAAA,IAAlI,MAEE,cAAO,K,OACP,EAAKoI,SAAWA,EAChB,EAAKC,MAAQA,EACb,EAAKC,IAAMA,EACX,EAAKvJ,KAAOA,EACZ,EAAKgB,cAAgBA,EACrB,EAAKC,cAAgBA,E,EAyJzB,OAhNmC,QAanB,EAAAhF,OAAd,SAAqBC,EAAaiC,GAShC,OAAO,IAAIqL,EAPMtN,EAtBE,GAuBLiC,EAAME,cAAcnC,EAtBlB,IAuBJiC,EAAME,cAAcnC,EAtBlB,IAuBDiC,EAAME,cAAcnC,EAtBlB,IAuBOA,EAtBN,IAsB2B,GAC/BiF,SAASjF,EAtBP,KAsB2B5M,KAAK8R,iBAKlC,EAAAhF,OAAd,SAAqBU,GAEnB,IAAMvP,EAAM,CAAC+B,KAAKwF,GAAIgI,EAAKuM,SAAUvM,EAAKwM,MAAMlN,SAAUU,EAAKyM,IAAInN,SAAUU,EAAKkD,KAAK5D,UACjFiF,EAASvE,EAAKmE,gBAAkB3R,KAAK8R,eAS3C,OAPItE,EAAKkE,gBAAkB,IAAiBK,IAC1C9T,EAAIM,KAAKiP,EAAKkE,eAEZK,GACF9T,EAAIM,KAAKiP,EAAKmE,eAGT1T,GAqBF,YAAAkP,MAAP,WAEE,OAAO+M,EAAc1U,IAGhB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOtI,KAAKU,IAAI0D,KAAKga,MAAMhL,cAAcxL,EAAKU,GAAUlE,KAAKia,IAAIjL,cAAcxL,EAAKU,GAAUlE,KAAK0Q,KAAK1B,cAAcxL,EAAKU,IAAY,GAGlI,YAAA+K,SAAP,W,MAEE,OAAO,EAAP,IACGjP,KAAK+Z,UAAW,GAAW9M,SAASoB,cACrC,EAACrO,KAAK0R,eAAgB,GAAYzE,S,GAI/B,YAAAH,OAAP,WAEE,OAAOoN,EAAcpN,OAAO9M,OAGvB,YAAAsO,MAAP,WAEE,OAAO,IAAI4L,EAAcla,KAAK+Z,SAAU/Z,KAAKga,MAAM1L,QAAStO,KAAKia,IAAI3L,QAAStO,KAAK0Q,KAAKpC,QAAStO,KAAK0R,cAAe1R,KAAK2R,gBAGrH,YAAAjN,QAAP,SAAelB,EAAyBgI,GAE9B,IAAAtH,EAAA,yCAAAA,QAEFwM,EAAO1Q,KAAK0Q,KAAKhM,QAAQlB,EAAKU,GAEpC,OAAOwM,EAAO,GAAM5K,SAAS4K,GAAQ,MAGhC,YAAApQ,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKwZ,EAAcC,WAAY,EAAKH,MAAO,SAAC9Y,GAAgB,SAAK8Y,MAAQ9Y,IAClFZ,EAASI,KAAKwZ,EAAcE,SAAU,EAAKH,IAAK,SAAC/Y,GAAgB,SAAK+Y,IAAM/Y,IAC5EZ,EAASI,KAAKwZ,EAAcpJ,UAAW,EAAKJ,KAAM,SAACxP,GAAgB,SAAKwP,KAAOxP,OAI5E,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAOkW,EAAcC,WAC9B,CAAC,EAAGna,KAAKga,OACThW,EAAM,KAAOkW,EAAcE,SACzB,CAAC,EAAGpa,KAAKia,KACTjW,EAAM,KAAOkW,EAAcpJ,UACzB,CAAC,EAAG9Q,KAAK0Q,MACT,MAGH,YAAA9C,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKga,MAAMpM,UAAU5N,MACrBA,KAAKia,IAAIrM,UAAU5N,MACnBA,KAAK0Q,KAAK9C,UAAU5N,OAGf,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKoE,aAAaZ,EAAKU,EAAS,GAAW+I,SAAUjN,KAAKga,MAAOzV,GACjEvE,KAAKoE,aAAaZ,EAAKU,EAAS,GAAW+I,SAAUjN,KAAKia,IAAK1V,GAE/D,IAAM0N,EAAczO,EAAI0O,WAAWhO,EAASlE,KAAKiP,YAEjDjP,KAAK0Q,KAAKvM,SAASX,EAAKyO,EAAa1N,IAGhC,YAAA8V,KAAP,SAAYN,EAAkBC,EAAwBC,EAAsBvJ,EAAmBgB,EAAwBC,GA0BrH,OAxBA3R,KAAK+Z,SAAWA,EAEhB/Z,KAAKga,MAAQ,GAAM5I,MAAM4I,GACzBha,KAAKga,MAAMpM,UAAU5N,MAErBA,KAAKia,IAAM,GAAM7I,MAAM6I,GACvBja,KAAKia,IAAIrM,UAAU5N,MAEf0Q,IAEF1Q,KAAK0Q,KAAOA,EACZ1Q,KAAK0Q,KAAK9C,UAAU5N,OAGlB0R,IAEF1R,KAAK0R,cAAgBA,GAGnBpX,EAASqX,KAEX3R,KAAK2R,cAAgBA,GAGhB3R,MAGF,YAAAsa,QAAP,SAAeN,GAKb,OAHAha,KAAKga,MAAQ,GAAM5I,MAAM4I,GACzBha,KAAKga,MAAMpM,UAAU5N,MAEdA,MAGF,YAAAua,MAAP,SAAaN,GAKX,OAHAja,KAAKia,IAAM,GAAM7I,MAAM6I,GACvBja,KAAKia,IAAIrM,UAAU5N,MAEZA,MAGF,YAAAsR,IAAP,SAAW9D,GAKT,OAHAxN,KAAK0Q,KAAOlD,EACZxN,KAAK0Q,KAAK9C,UAAU5N,MAEbA,MAGF,YAAAwa,aAAP,SAAoB3hB,GAIlB,OAFAmH,KAAK+Z,SAAWlhB,EAETmH,MAGF,YAAAqS,UAAP,SAAiBxZ,GAIf,OAFAmH,KAAK0R,cAAgB7Y,EAEdmH,MAGF,YAAAsS,QAAP,SAAeC,GAIb,OAFAvS,KAAK2R,cAAgBY,EAEdvS,MA1MK,EAAAma,WAAa,QAEb,EAAAC,SAAW,MAEX,EAAAtJ,UAAY,OAEZ,EAAAgB,eAAiB,GAEjB,EAAAtM,GAAK,MAqMrB,EAhNA,CAAmC,G,4UCXnC,eAqBE,WAAmB3M,GAAnB,MAEE,cAAO,K,OACP,EAAKA,KAAOA,E,EA6EhB,OArGuC,QAOvB,EAAA8T,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAI4L,EAFE7N,EAXE,KAgBH,EAAAE,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,GAAIgI,EAAK3U,OAWjB,YAAAsU,MAAP,WAEE,OAAOsN,EAAkBjV,IAGpB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAO,GAGF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO2N,EAAkB3N,OAAO9M,OAG3B,YAAAsO,MAAP,WAEE,OAAO,IAAImM,EAAkBza,KAAKnH,OAG7B,YAAA6L,QAAP,SAAelB,EAAyBU,GAEtC,IAAM0I,EAAOpJ,EAAIkX,QAAQ1a,KAAKnH,MAE9B,OAAO+T,EAAOA,EAAK+N,SAAW,GAAS1N,UAGlC,YAAA3M,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,GAEjDvE,KAAKnH,KASA2K,EAAIkX,QAAQ1a,KAAKnH,OAEzB0L,EAAQ,CACNpB,KAAMzD,EAAekb,aACrB7V,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPpC,OAAQ9B,OAbVuE,EAAQ,CACNpB,KAAMzD,EAAemb,kBACrB9V,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPpC,OAAQ9B,QAcP,YAAAyD,YAAP,WAEE,OAAO,GAGF,YAAAC,WAAP,WAEE,OAAO,GA/FK,EAAA8B,GAAK,OAEI,EAAA6K,SAAW,IAAIoK,EAAkB,IAgG1D,EArGA,CAAuC,GCL1BK,GAAmB,IAAI/S,EAAWnB,EAAGC,OAASD,EAAGiB,WAEjDkT,GAAkB,IAAI9S,EAAUrB,EAAGC,OAASD,EAAGiB,WAEtD,GAAMiT,GAECE,GACb,CAEE3M,YAAa,GAAI3I,IAAI,cAAe,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAE/DvM,IAAK,GAAIuM,IAAI,MAAO,GAAI,CAAC,QAAS,CAAC,SAAU,CAAC,YAAa,CAAC,SAAU,CAAC,SAEvE3H,OAAQ,GAAI2H,IAAI,SAAU,GAAI,CAAC,OAAQ,YAAa,GAAI,GAAI,GAAI,CAAC,SAEjEuV,KAAM,GAAIvV,IAAI,OAAQ,CAAEQ,QAAS,CAAC,aAAe,CAAC,OAAQ,YAAa,GAAI,GAAI,GAAI,CAAC,SAEpF7I,OAAQ,GAAIqI,IAAI,SAAU,CAAEQ,QAAS,CAAC,aAAe,CAAC,OAAQ,YAAa,GAAI,GAAI,GAAI,CAAC,SAExFgV,WAAY,GAAIxV,IAAI,aAAc,CAAES,WAAY,EAAGD,QAAS,CAAC,WAAY,YAAe,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,aAE1JiV,WAAY,GAAIzV,IAAI,aAAc,CAAEQ,QAAS,CAAC,WAAY,YAAc,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,aAE1IkV,cAAe,GAAI1V,IAAI,gBAAiB,CAAEQ,QAAS,CAAC,WAAY,YAAc,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,aAEhJmV,aAAc,GAAI3V,IAAI,eAAgB,CAAES,WAAY,EAAGD,QAAS,CAAC,aAAe,CAAC,OAAQ,WAAY,YAAa,GAAI,GAAI,GAAI,CAAC,OAAQ,aAEvIoV,WAAY,GAAI5V,IAAI,aAAc,CAAES,WAAY,GAAK,CAAC,OAAQ,WAAY,YAAa,GAAI,GAAI,GAAI,CAAC,OAAQ,aAE5GoV,UAAW,GAAI7V,IAAI,YAAa,GAAI,CAAC,OAAQ,WAAY,WAAY,WAAY,GAAI,GAAI,GAAI,CAAC,OAAQ,cC7B3F8V,GAAmB,IAAIzT,EAAWnB,EAAG5N,OAAS4N,EAAGiB,WAEjD4T,GAAkB,IAAIxT,EAAUrB,EAAG5N,OAAS4N,EAAGiB,WAEtD,GAAM2T,GAECE,GACb,CAIE9hB,OAAQ,GAAI8L,IAAI,UAIhByC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7BkT,IAAK,GAAIlT,IAAI,MAAO,GAAI,CAAC,SAAU,QAEnCvM,IAAK,GAAIuM,IAAI,MAAO,GAAI,CAAC,SAAU,QAEnCA,IAAK,GAAIA,IAAI,MAAO,CAAEQ,QAAS,CAAC,WAAa,CAAC,SAAU,MAAO,SAAU,GAAI,CAAC,iBAAkB,GAAI,CAAC,WAErG2S,OAAQ,GAAInT,IAAI,MAAO,CAAEQ,QAAS,CAAC,WAAa,CAAC,SAAU,QAE3DsC,IAAK,GAAI9C,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC4F,KAAM,GAAI5F,IAAI,OAAQ,GAAI,CAAC,UAAW,GAAI,GAAI,GAAI,CAAC,WAEnD4H,MAAO,GAAI5H,IAAI,QAAS,GAAI,CAAC,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,GAAI,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MAItF+C,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BkD,QAAS,GAAIlD,IAAI,IAAK,GAAI,CAAC,QAAS,SAEpCmD,WAAY,GAAInD,IAAI,KAAM,GAAI,CAAC,QAAS,SAExCqK,OAAQ,GAAIrK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCsK,cAAe,GAAItK,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CuK,UAAW,GAAIvK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtCwK,iBAAkB,GAAIxK,IAAI,KAAM,GAAI,CAAC,QAAS,SAI9CoD,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpCygB,GAAgB/V,IAAI,OAAQgW,GAAUpQ,M,wsBCvDtC,4B,+CAgiBA,OAhiByE,QAazD,EAAAqB,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAIoW,EAAW,CAAEhd,MAFVd,EAAU+O,EAtBR,GAsB2B,SAAArT,GAAS,OAAAgM,EAAMb,QAAQnL,QAKtD,EAAAuT,OAAd,SAAqB3J,GAEnB,IAAMxE,EAAQd,EAAUsF,EAAKtB,QAAQlD,MAAO,SAAAvE,GAAK,OAAAA,EAAE0S,WAEnD,MAAO,CAAC9M,KAAKwF,GAAI7G,IAKL,EAAAoO,SAAd,SAAuBH,EAAWI,GAEhC,OAAK7R,EAASyR,IAAkB,OAATA,EAKhB,IAAI+O,EAAW,CACpBhd,MAAOd,EAAU+O,EAAM,SAAAhU,GAAK,OAAAoU,EAAUD,SAASnU,OAJxC,MAUG,EAAAsU,SAAd,WAKER,EAAUV,QAAQ,CAChBS,SAJe,EAKfX,SAAU,SAACC,EAAM6P,GACf,GAAIzgB,EAAS4Q,GACX,OAAOlO,EAAUkO,EAAM6P,IAG3B/P,OAAQ,SAACE,EAAM8P,GACb,GAAI1gB,EAAS4Q,GACX,OAAOlO,EAAUkO,EAAM8P,MAK7BnP,EAAUf,UAAU,CAClBc,SAlBe,EAmBfnB,KAAM,SAAC5P,EAAG4P,EAAMwQ,GACd,GAAI3gB,EAASO,GAAI,CACf,IAAMqgB,EAAiB,GAIvB,IAAK,IAAMnd,KAFXkd,EAAcpgB,EAAGqgB,GAEErgB,EACjBqgB,EAAUzQ,EAAK1M,IAAS0M,EAAK5P,EAAEkD,IAGjC,OAAOmd,MAKbrP,EAAUzB,WAAW,CACnBwB,SAnCe,EAoCftJ,KAnCwB,SAoCxBsH,QAAS,SAACnP,EAAGC,EAAGkP,GACd,GAAU,OAANnP,EAAY,OAAO,EACvB,GAAU,OAANC,EAAY,OAAQ,EAExB,IAAIwP,EAAO,EACPC,EAAO,EAEX,IAAK,IAAMpM,KAAQtD,EACXsD,KAAQrD,GACZwP,IAIJ,IAAK,IAAMnM,KAAQrD,EACXqD,KAAQtD,GACZ0P,IAIJ,IAAK,IAAMpM,KAAQtD,EACjB,GAAIsD,KAAQrD,EACZ,CACE,IAAM5C,EAAI8R,EAAQnP,EAAEsD,GAAOrD,EAAEqD,IAEzBjG,EAAI,GAAGoS,IACPpS,EAAI,GAAGqS,IAIf,OAAO0B,EAAU5B,WAAWC,EAAMC,MAItC0B,EAAUrB,UAAU,CAClBoB,SAvEe,EAwEftJ,KAvEwB,SAwExBgI,OAAQ,SAAC7P,EAAGC,EAAG4P,GACb,GAAW,OAAN7P,IAAuB,OAANC,GAAa,OAAO,EAE1C,IAAK,IAAMqD,KAAQtD,EACjB,KAAMsD,KAAQrD,GACZ,OAAO,EAIX,IAAK,IAAMqD,KAAQrD,EAAG,CACpB,KAAMqD,KAAQtD,GACZ,OAAO,EACF,IAAK6P,EAAO7P,EAAEsD,GAAOrD,EAAEqD,IAC5B,OAAO,EAIX,OAAO,KAIX8N,EAAUN,YAAoB,CAC5BK,SA/Fe,EAgGfhE,QAAS,SAAClP,GAAU,OAAA4B,EAAS5B,IAC7BJ,IAAK,SAACI,EAAOmH,GAAS,OAAAnH,EAAMmH,IAC5BgF,IAAK,SAACnM,EAAOmH,EAAMyL,GAAc,OAAAO,EAAUjD,UAAUlQ,EAAOmH,EAA4ByL,OAIrF,YAAAgB,MAAP,WAEE,OAAOwO,EAAWnW,IAGb,YAAA4H,cAAP,WAEE,OAAOuO,EAAWtO,WAAWxQ,KAGxB,YAAAyQ,MAAP,SAAanK,GAEX,IAAM6Y,EAAKhc,KAAK6B,QAAQlD,MAClBsd,EAAK9Y,EAAKtB,QAAQlD,MAExB,IAAK,IAAMC,KAAQod,EAEbpd,KAAQqd,GAAMA,EAAGrd,GAEnBod,EAAGpd,GAAQ,GAAM0O,MAAM0O,EAAGpd,GAAOqd,EAAGrd,IAE7Bod,EAAGpd,KAEVod,EAAGpd,GAAQ,GAAMkH,SAASkW,EAAGpd,KAIjC,IAAK,IAAMA,KAAQqd,EAEXrd,KAAQod,IAAOC,EAAGrd,KAEtBod,EAAGpd,GAAQ,GAAMkH,SAASmW,EAAGrd,MAK5B,YAAA2O,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAA7D,WAEE,GAAI,GAAmBqT,GAAG/J,IAEpBhT,EAASgT,EAAKjU,OAEhB,OAAOyG,KAAK6B,QAAQlD,MAAM6O,EAAKjU,OAInC,IAAIme,EAAWlK,EAAK9I,QAAQlB,EAAKU,GAEjC,GAAIwT,EACJ,CAGE,IAFAA,EAAWA,EAAS3V,yBAEI,GACxB,CACE,IAAMwD,EAAQlH,EAAa2B,KAAK6B,QAAQlD,OAExC,OAAO,GAAMud,UAAU3W,EAAO,GAAS0H,UAGzC,GAAIyK,aAAoB,GACxB,CAEQnS,EADS7K,MAAMoC,KAAK4a,EAAS7V,QAAQ+V,UAAUD,UAChC9a,IAAI,SAACzC,GAAM,SAAKyH,QAAQlD,MAAMvE,KAAImH,OAAO,SAAA/H,GAAK,QAAEA,IAErE,OAAO,GAAM0iB,UAAU3W,EAAO,GAAS0H,WAI3C,OAAOjN,KAAKmc,mBAGP,YAAA1O,YAAP,SAAmBjK,GAEjB,IAAM7E,EAAQN,EAAa2B,KAAK6B,QAAQlD,OAExC,OAAO,GACFN,EAAa2B,KAAK6B,QAAQlD,MAAO,SAACpF,EAAOM,GAAQ,OAAGA,IAAG,EAAEN,MAAK,KAAI,CACrE,CACEM,IAAK,IAAI,GAAS,CAChBA,IAAK,GAASoT,SACd1T,MAAO,GAAS0T,SAChB2K,UAAW,IAAI9c,IACbuD,EAAa2B,KAAK6B,QAAQlD,MAAO,SAACC,EAAM/E,GAAQ,OAACA,EAAKA,QAG1DN,MAAO,GAAM2iB,UAAUvd,EAAO,GAASsO,WAEzC,CACEpT,IAAK,GAASoT,SACd1T,MAAO,GAAMuM,SAAS,GAAMoW,UAAUvd,EAAO,GAASsO,eAKrD,YAAAS,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGF,YAAAM,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAA9B,EAAW,EAAK2D,QAAQlD,MACtB,SAACwE,EAAMvE,GAAS,OAAA0B,EAASI,KAAK9B,EAAMuE,EAAM,SAACjC,GAAgB,SAAKW,QAAQlD,MAAMC,GAAQsC,GAAa,WAAM,cAAO,EAAKW,QAAQlD,MAAMC,UAKlI,YAAA0E,gBAAP,SAAuB5C,GAErB,OAAOV,KAAK6B,QAAQlD,MAAM+B,IAAS,MAG9B,YAAAkN,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd5D,EAAW8B,KAAK6B,QAAQlD,MAAO,SAAAnF,GAAK,OAAAA,EAAIA,EAAEoU,UAAU,GAAQ,KAGvD,YAAAC,4BAAP,WAEE3P,EAAW8B,KAAK6B,QAAQlD,MAAO,SAAAnF,GAAK,OAAAA,EAAIA,EAAEqU,8BAAgC,KAGlE,YAAAtL,iBAAV,SAA2BL,EAAaL,GAEtC,KAAMK,aAAiByZ,GAErB,OAAO,EAGT,IAAMhd,EAAQqB,KAAK6B,QAAQlD,MAE3B,IAAK,IAAMC,KAAQD,EAEjB,GAAIC,IAAS+c,EAAWS,iBAKnBzd,EAAMC,GAAX,CAKA,IAAKsD,EAAML,QAAQlD,MAAMC,GAEvB,OAAO,EAGT,IAAKD,EAAMC,GAAMqD,aAAaC,EAAML,QAAQlD,MAAMC,GAAOiD,GAEvD,OAAO,EAIX,IAAMwa,EAAWrc,KAAKmc,kBAEtB,GAAIta,EAAQM,OAEV,IAAK,IAAMvD,KAAQsD,EAAML,QAAQlD,MAE/B,IAAKA,EAAMC,IAASsD,EAAML,QAAQlD,MAAMC,GAEtC,OAAO,OAIR,GAAIyd,EAEP,IAAK,IAAMzd,KAAQsD,EAAML,QAAQlD,MAE/B,IAAKA,EAAMC,IAASsD,EAAML,QAAQlD,MAAMC,KAAUyd,EAASpa,aAAaC,EAAML,QAAQlD,MAAMC,GAAOiD,GAEjG,OAAO,EAKb,OAAO,GAGF,YAAAgD,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAAG,oBAAP,WAEE,OAAO,GAAM9T,OACX6D,EAAUmC,KAAK6B,QAAQlD,MAAO,SAACnF,GAAM,OAAAA,EAAIA,EAAEsU,sBAAwB,GAAMwO,WAItE,YAAAvO,sBAAP,WAEE,OAAO,GAAM3F,IAAG,MAAT,GAAK,IACV,GAAM9B,GAAGoV,GAAUjT,QAAS,CAC1BlP,MAAO,GAAMJ,IAAI,YAEhBkF,EAAa2B,KAAK6B,QAAQlD,MAAO,SAACnF,EAAGoF,GACtC,UAAM5G,OAAO,CACXuB,MAAO,GAAMJ,IAAI,QAASyF,KACzB0S,IACD9X,EAAIA,EAAEuU,wBAA0B,GAAMG,aAMvC,YAAAF,qBAAP,WAEE,OAAO,GAAM3F,GAAE,MAAR,GAAK,GACPhK,EAAa2B,KAAK6B,QAAQlD,MAAO,SAACnF,EAAGoF,GACtC,UAAM5G,OAAO,CACXuB,MAAO,GAAMJ,IAAI,QAASyF,GAC1BgG,KAAM,GAAMzL,IAAI,OAAQyF,KACvB0S,IACD9X,EAAIA,EAAEwU,uBAAyB,GAAME,aAMtC,YAAAtL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,IAAMyZ,EAAUzf,QACV0f,EAAQ1Z,QAEd,OAAKyZ,GAAWC,EAEP,GAAMxkB,OAAO,CAAE8J,OAAQ,GAAM3I,IAAI,UACtC,GAAMmN,GAAGoV,GAAUhW,IAAK,CACtB1L,OAAQ,GAAMb,IAAI,SAClBU,IAAKiJ,EACLvJ,MAAOsJ,KAIJ0Z,IAAYC,EAEZ,GAAM9L,KACX,GAAMpK,GAAGoV,GAAU7C,OAAQ,CACzB7e,OAAQ,GAAMb,IAAI,SAClBU,IAAKiD,IAEP,GAAM3D,IAAI,UAGL2D,IAASgG,EAET,GAAM4N,KACX,GAAMpK,GAAGoV,GAAUhW,IAAK,CACtB1L,OAAQ,GAAMb,IAAI,SAClBU,IAAKiJ,EACLvJ,MAAO,GAAMJ,IAAI,QAAS2D,KAE5B,GAAMwJ,GAAGoV,GAAU7C,OAAQ,CACzB7e,OAAQ,GAAMb,IAAI,SAClBU,IAAKiD,IAEP,GAAM3D,IAAI,UAGL2D,IAASgG,GAAMyZ,EAEf,GAAM7L,KACX,GAAMpT,OAAO,QAASR,GACnBgG,GAAGD,EAAU,SAChB,GAAM1J,IAAI,UAIP0J,GAGF,YAAA4F,QAAP,SAAelP,GAEb,IAAK4B,EAAS5B,GAEZ,OAAO,EAGT,IAAMoF,EAAQqB,KAAK6B,QAAQlD,MAE3B,IAAK,IAAMC,KAAQD,EAEjB,GAAIC,IAAS+c,EAAWS,iBAKnBzd,EAAMC,KAKND,EAAMC,GAAM6J,QAAQlP,EAAMqF,IAE7B,OAAO,EAIX,IAAMyd,EAAWrc,KAAKmc,kBAEtB,GAAIE,EAEF,IAAK,IAAMzd,KAAQrF,EAEjB,IAAKoF,EAAMC,KAAUyd,EAAS5T,QAAQlP,EAAMqF,IAE1C,OAAO,EAKb,OAAO,GAGF,YAAAwP,UAAP,SAAiB7U,GAEf,OAAOA,GAGF,YAAA8U,YAAP,WAEE,OAAO,IAAIsN,EAAW,CAAEhd,MAAO,MAG1B,YAAA2P,MAAP,WAEE,OAAO,IAAIqN,EAAc,CACvBhd,MAAOd,EAAUmC,KAAK6B,QAAQlD,MAAO,SAAAvE,GAAK,OAAAA,EAAIA,EAAEkU,QAAUlU,OAIvD,YAAA0S,OAAP,WAEE,OAAO6O,EAAW7O,OAAO9M,OAGpB,YAAApG,OAAP,WAEE,OAAOZ,OAAOY,OAAO,OAGhB,YAAA2U,OAAP,SAAcC,GAEJ,IAAA7P,EAAA,aAAAA,MACFV,EAAWjF,OAAOY,OAAO,MAE/B,IAAK,IAAMgF,KAAQD,EAEbA,EAAMC,KAERX,EAAIW,GAAQD,EAAMC,GAAM2P,OAAOC,IAInC,OAAOvQ,GAGF,YAAA6N,SAAP,SAAgBC,GAAhB,WAEE,OAAOlO,EAAUkO,EAAM,SAACxS,EAAOM,GAC7B,IAAM4iB,EAAW,EAAK5a,QAAQlD,MAAM9E,GAEpC,OAAO4iB,EAAWA,EAAS3Q,SAASvS,GAASA,KAI1C,YAAAsS,OAAP,SAActS,GAAd,WAEE,OAAOsE,EAAUtE,EAAO,SAACmjB,EAAU7iB,GACjC,IAAM4iB,EAAW,EAAK5a,QAAQlD,MAAM9E,GAEpC,OAAO4iB,EAAWA,EAAS5Q,OAAO6Q,GAAYA,KAI3C,YAAAP,gBAAP,WAEE,OAAOnc,KAAK6B,QAAQlD,MAAMgd,EAAWS,kBAAoB,MA1hB7C,EAAAA,gBAAkB,IAElB,EAAA5W,GAAKoB,EAAG5N,OAER,EAAAqU,WAAamO,GAEb,EAAA/M,UAAYgN,GAEZ,EAAAxO,SAAW,IAAI0O,EAAW,CAAEhd,MAAO,KAgBnC,EAAA+P,iBAA2B,EAc3B,EAAAC,YAAsB,EAuftC,EAhiBA,CAAyE,G,4UCXzE,eA8CE,WAAmB9V,EAAc8jB,GAAjC,MAEE,YAAM9jB,IAAK,K,OAEX,EAAK8jB,SAAWA,E,EA8JpB,OAhNgC,QAahB,EAAAhQ,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAIqX,EAFEhQ,EAjBE,GAmBcrH,IAGjB,EAAAuH,OAAd,SAAqB3J,GAEnB,MAAO,CAACnD,KAAKwF,GAAIrC,EAAKtB,UAKV,EAAAkL,SAAd,SAAuBH,EAAWI,GAEhC,OAAO,MAKK,EAAAE,SAAd,aAKc,EAAA2P,IAAd,SAAkBhkB,EAAc8jB,GAE9B,OAAO,IAAIC,EAAW/jB,EAAM8jB,IAYvB,YAAAjY,QAAP,WAEE,OAAO1E,KAAK2c,SACR3c,KAAK2c,SAASjY,QAAQ1E,KAAK6B,QAAS,GAASoL,UAC7C,GAAWA,UAGV,YAAAG,cAAP,WAEE,OAAOpN,KAAK0E,UAAU0I,iBAGjB,YAAAD,MAAP,WAEE,OAAOyP,EAAWpX,IAGb,YAAA8H,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAOlE,KAAK0E,UAAU6I,WAAWC,EAAMhK,EAAKU,IAGvC,YAAAuJ,YAAP,SAAmBjK,GAEjB,OAAOxD,KAAK0E,UAAU+I,YAAYjK,IAG7B,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,KAAK0E,UAAUgJ,aAAanU,IAG9B,YAAA6I,kBAAP,WAEE,OAAOpC,MAIC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,OAAOK,aAAiB0a,EACpB5c,KAAK0E,UAAUzC,aAAaC,EAAMwC,UAAW7C,GAC7C7B,KAAK0E,UAAUzC,aAAaC,EAAOL,IAGlC,YAAAgD,WAAP,WAEE,OAAO7E,KAAK0E,UAAUG,cAGjB,YAAA8I,SAAP,WAEE,OAAO3N,KAAK0E,UAAUiJ,YAGd,YAAArL,kBAAV,WAEE,OAAO,GAGF,YAAAhC,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAAM,EAASI,KAAKkc,EAAWE,YAAa,EAAKpY,UAAW,SAACxD,GAAgB,OAAAA,aAAuB0b,EAAa,EAAK/a,QAAUX,EAAYW,QAAU,OAI7I,YAAAyB,gBAAP,SAAuB5C,GAErB,OAAOA,IAASkc,EAAWE,YACvB9c,KAAK0E,UACL,MAGC,YAAAkJ,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAA+L,4BAAP,aAKO,YAAAC,oBAAP,WAEE,OAAO9N,KAAK0E,UAAUoJ,uBAGjB,YAAAC,sBAAP,WAEE,OAAO/N,KAAK0E,UAAUqJ,yBAGjB,YAAAC,qBAAP,WAEE,OAAOhO,KAAK0E,UAAUsJ,wBAGjB,YAAApL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,OAAOD,GAGF,YAAA4F,QAAP,SAAelP,GAEb,OAAOyG,KAAK0E,UAAU+D,QAAQlP,IAGzB,YAAA6U,UAAP,SAAiB7U,GAEf,OAAOyG,KAAK0E,UAAU0J,UAAU7U,IAG3B,YAAA8U,YAAP,WAEE,OAAO,IAAIuO,EAAW5c,KAAK6B,QAAS7B,KAAK2c,WAGpC,YAAArO,MAAP,WAEE,OAAO,IAAIsO,EAAW5c,KAAK6B,QAAS7B,KAAK2c,WAGpC,YAAA7P,OAAP,WAEE,OAAO8P,EAAW9P,OAAO9M,OAGpB,YAAApG,OAAP,WAEE,OAAOoG,KAAK0E,UAAU9K,UAGjB,YAAA2U,OAAP,SAAcC,GAEZ,OAAOxO,KAAK0E,UAAU6J,OAAOC,IAGxB,YAAA1C,SAAP,SAAgBC,GAEd,OAAO/L,KAAK0E,UAAUoH,SAASC,IAG1B,YAAAF,OAAP,SAActS,GAEZ,OAAOyG,KAAK0E,UAAUmH,OAAOtS,IA1MjB,EAAAujB,YAAc,SAEd,EAAAtX,GAAKoB,EAAGC,OAER,EAAAwG,WAAayN,GAEb,EAAArM,UAAYsM,GAEZ,EAAA9N,SAAW,IAAI2P,EAAW,GAAI,MAc9B,EAAAlO,kBAA4B,EAO5B,EAAAC,YAAsB,EAgLtC,EAhNA,CAAgC,G,4UCFhC,eAqBE,WAAmB9V,GAAnB,MAEE,cAAO,K,OACP,EAAKA,KAAOA,E,EAiEhB,OAzFyC,QAOzB,EAAA8T,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAIkO,EAFEnQ,EAXE,KAgBH,EAAAE,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,GAAIgI,EAAK3U,OAWjB,YAAAsU,MAAP,WAEE,OAAO4P,EAAoBvX,IAGtB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAO,GAGF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOiQ,EAAoBjQ,OAAO9M,OAG7B,YAAAsO,MAAP,WAEE,OAAO,IAAIyO,EAAoB/c,KAAKnH,OAG/B,YAAA6L,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,IAAI,GAAWlE,KAAKnH,KAAM2K,IAG5B,YAAAlD,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,GAEjDvE,KAAKnH,KASA2K,EAAIwZ,UAAUhd,KAAKnH,OAE3B0L,EAAQ,CACNpB,KAAMzD,EAAeud,aACrBlY,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPpC,OAAQ9B,OAbVuE,EAAQ,CACNpB,KAAMzD,EAAewd,kBACrBnY,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPpC,OAAQ9B,QAxEA,EAAAwF,GAAK,SAEI,EAAA6K,SAAW,IAAI0M,EAAoB,IAoF5D,EAzFA,CAAyC,G,4UCCzC,eAqBE,WAAmBlkB,GAAnB,MAEE,cAAO,K,OACP,EAAKA,KAAOA,E,EAuEhB,OA/F2C,QAO3B,EAAA8T,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAIsO,EAFEvQ,EAXE,KAgBH,EAAAE,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,GAAIgI,EAAK3U,OAWjB,YAAAsU,MAAP,WAEE,OAAOgQ,EAAsB3X,IAGxB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAO,GAGF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOqQ,EAAsBrQ,OAAO9M,OAG/B,YAAAsO,MAAP,WAEE,OAAO,IAAI6O,EAAsBnd,KAAKnH,OAGjC,YAAA6L,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,IAAI,GAAS,CAClBrK,IAAK,GAASoT,SACd1T,MAAO,GAAS0T,SAChB2K,UAAW,IAAI9c,IAAI,CACjB,CAAC,WAAYkF,KAAKnH,WAKjB,YAAAyH,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAAqC,SAAP,SAAgBX,EAAyBU,EAAeK,GAEjDvE,KAAKnH,KASA2K,EAAI4Z,YAAYpd,KAAKnH,OAE7B0L,EAAQ,CACNpB,KAAMzD,EAAe2d,iBACrBtY,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPpC,OAAQ9B,OAbVuE,EAAQ,CACNpB,KAAMzD,EAAe4d,sBACrBvY,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPpC,OAAQ9B,QA9EA,EAAAwF,GAAK,WAEI,EAAA6K,SAAW,IAAI8M,EAAsB,IA0F9D,EA/FA,CAA2C,G,umBCK3C,eAiCE,WAAmBI,EAAmCC,GAAtD,MAEE,cAAO,K,OACP,EAAKD,MAAQA,EACb,EAAKC,UAAYA,E,EAyJrB,OA9LkC,QAalB,EAAA7Q,OAAd,SAAqBC,EAAaiC,GAKhC,OAAO,IAAI4O,EAHG7Q,EAlBE,GAkBgB/P,IAAI,SAAC,G,IAAA,UAAC+H,EAAA,KAAMxE,EAAA,KAAwB,OAACyO,EAAME,cAAcnK,GAAOiK,EAAME,cAAc3O,MAClGyO,EAAME,cAAcnC,EAlBlB,MAuBR,EAAAE,OAAd,SAAqBU,GAEnB,IAAM+P,EAAQ/P,EAAK+P,MAAM1gB,IAAI,SAAC,G,IAAA,UAAC+H,EAAA,KAAMxE,EAAA,KAAY,OAACwE,EAAKkI,SAAU1M,EAAO0M,YAExE,OAAO,GAAmB8L,IAAIpL,EAAKgQ,eAAWpf,GAC1C,CAAC4B,KAAKwF,GAAI+X,GACV,CAACvd,KAAKwF,GAAI+X,EAAO/P,EAAKgQ,UAAU1Q,WAa/B,YAAAK,MAAP,WAEE,OAAOsQ,EAAajY,IAGf,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKud,MAAM/e,OAChB,SAAClC,EAAK,G,IAAA,UAACsI,EAAA,KAAMxE,EAAA,KAAY,OAAAxE,KAAKU,IAC5BA,EACAsI,EAAKoK,cAAcxL,EAAKU,GACxB9D,EAAO4O,cAAcxL,EAAKU,KAE5BlE,KAAKwd,UAAUxO,cAAcxL,EAAKU,KAI/B,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO2Q,EAAa3Q,OAAO9M,OAGtB,YAAAsO,MAAP,WAEE,OAAO,IAAImP,EAAazd,KAAKud,MAAM1gB,IAAI,SAAC,G,IAAA,UAAC4U,EAAA,KAAWiM,EAAA,KAAU,OAACjM,EAAUnD,QAASoP,EAAKpP,WAAWtO,KAAKwd,UAAUlP,UAG5G,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,IAAMqB,EAAQvF,KAAKud,MAChB1gB,IAAI,SAAC,G,IAAA,UAAC,KAAiB,OAAX,OACZ8gB,OAAO3d,KAAKwd,WACZjc,OAAO,SAAA8N,GAAK,QAAEA,IACdxS,IAAI,SAAAwS,GAAK,OAAAA,EAAE3K,QAAQlB,EAAKU,KACxB3C,OAAO,SAAA/H,GAAK,QAAEA,IAGjB,OAAO,GAAM0iB,UAAU3W,EAAO,GAAS0H,WAGlC,YAAA3M,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAK+c,EAAaG,WAAY,WACrC,SAAKL,MAAMlX,QAAQ,SAAC,EAAqB0D,G,IAArB,UAAC0H,EAAA,KAAWrR,EAAA,KAC9B,OAAAE,EAASI,KAAKqJ,EAAO,WACnBzJ,EAASI,KAAK+c,EAAaI,QAASpM,EAAW,SAACvQ,GAAgB,SAAKqc,MAAMxT,GAAOC,OAAO,EAAG,EAAG9I,KAC/FZ,EAASI,KAAK+c,EAAaK,UAAW1d,EAAQ,SAACc,GAAgB,SAAKqc,MAAMxT,GAAOC,OAAO,EAAG,EAAG9I,WAIhG,EAAKsc,YAAc,GAAanN,UAClC/P,EAASI,KAAK+c,EAAaM,UAAW,EAAKP,UAAW,SAACtc,GAAgB,SAAKsc,UAAYtc,OAMvF,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAOyZ,EAAaG,WAC7BtjB,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKud,MAAMvhB,OAC1CgI,EAAM,KAAOyZ,EAAaI,QACxB,CAAC,EAAG7d,KAAKud,MAAMvZ,EAAM,IAAI,IACzBA,EAAM,KAAOyZ,EAAaK,UACxB,CAAC,EAAG9d,KAAKud,MAAMvZ,EAAM,IAAI,IACzB,KACJ,KACFA,EAAM,KAAOyZ,EAAaM,UACxB,CAAC,EAAG/d,KAAKwd,WACT,MAID,YAAA5P,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKud,MAAMlX,QAAQ,SAAC,G,IAAA,UAACoL,EAAA,KAAWrR,EAAA,KAC9BqR,EAAU7D,UAAU,GACpBxN,EAAOwN,UAAU,KAGnB5N,KAAKwd,UAAU5P,UAAU5N,OAGpB,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAAxD,WAEQ+K,EAAe,GAAYrC,SAEjCjN,KAAKud,MAAMlX,QAAQ,SAAC,G,IAAA,UAACoL,EAAA,KAAWrR,EAAA,KAE9B,EAAKgE,aAAaZ,EAAKU,EAASoL,EAAcmC,EAAWlN,GAEzDnE,EAAO+D,SAASX,EAAKU,EAASK,KAGhCvE,KAAKwd,UAAUrZ,SAASX,EAAKU,EAASK,IAGjC,YAAAyZ,GAAP,SAAUvM,EAAuBf,GAW/B,OATA1Q,KAAKud,MAAMhf,KAAK,CAACkT,EAAWf,GAAQ,GAAaL,WAEjDoB,EAAU7D,UAAU5N,MAEhB0Q,GAEFA,EAAK9C,UAAU5N,MAGVA,MAGF,YAAAie,KAAP,SAAYvN,GAMV,OAJA1Q,KAAKud,MAAMvd,KAAKud,MAAMvhB,OAAS,GAAG,GAAK0U,EAEvCA,EAAK9C,UAAU5N,MAERA,MAGF,YAAAke,OAAP,SAAczM,EAAuBf,GAWnC,OATA1Q,KAAKud,MAAMhf,KAAK,CAACkT,EAAWf,GAAQ,GAAaL,WAEjDoB,EAAU7D,UAAU5N,MAEhB0Q,GAEFA,EAAK9C,UAAU5N,MAGVA,MAGF,YAAAme,KAAP,SAAYzN,GAKV,OAHA1Q,KAAKwd,UAAY9M,EACjB1Q,KAAKwd,UAAU5P,UAAU5N,MAElBA,MAxLK,EAAA4d,WAAa,QAEb,EAAAC,QAAU,KAEV,EAAAC,UAAY,OAEZ,EAAAC,UAAY,OAEZ,EAAAvY,GAAK,KAmLrB,EA9LA,CAAkC,G,4UCJlC,eAuBE,WAAmB3M,EAAculB,GAAjC,MAEE,cAAO,K,OACP,EAAKvlB,KAAOA,EACZ,EAAKulB,KAAOA,E,EA4IhB,OAvKsC,QAKtB,EAAAzR,OAAd,SAAqBC,EAAaiC,GAKhC,OAAO,IAAIwP,EAHEzR,EAVE,GAWF/O,EAAU+O,EAVR,GAU0B,SAAAyC,GAAK,OAAAR,EAAME,cAAcM,OAKtD,EAAAvC,OAAd,SAAqBU,GAEnB,IAAM4Q,EAAOvgB,EAAU2P,EAAK4Q,KAAM,SAAA9iB,GAAK,OAAAA,EAAEwR,WAEzC,MAAO,CAAC9M,KAAKwF,GAAIgI,EAAK3U,KAAMulB,IAavB,YAAAjR,MAAP,WAEE,OAAOkR,EAAiB7Y,IAGnB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,IAAMoa,EAAO9a,EAAI+a,YAAYve,KAAKnH,MAElC,OAAKylB,EAKEA,EAAK1P,WAAWI,cAAcxL,EAAKU,GAHjC,GAMJ,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOuR,EAAiBvR,OAAO9M,OAG1B,YAAAsO,MAAP,WAEE,OAAO,IAAI+P,EAAiBre,KAAKnH,KAAMgF,EAAUmC,KAAKoe,KAAM,SAAC9iB,GAAM,OAAAA,EAAEgT,YAGhE,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,IAAMoa,EAAO9a,EAAI+a,YAAYve,KAAKnH,MAC5B2lB,EAAW3gB,EAAUmC,KAAKoe,KAAM,SAAC9iB,GAAM,OAAAA,EAAEoJ,QAAQlB,EAAKU,KAE5D,OAAOoa,EACHA,EAAKG,cAAcjb,EAAKgb,GACxB,MAGC,YAAAle,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAA9B,EAAW,EAAKkgB,KAAM,SAAC5Q,EAAMkR,GAC3B,OAAApe,EAASI,KAAKge,EAAKlR,EAAM,SAACtM,GAAgB,SAAKkd,KAAKM,GAAOxd,GAAa,WAAM,cAAO,EAAKkd,KAAKM,UAK9F,YAAA3a,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAMhE,KAAKoe,KACpB,CAAC,EAAGpe,KAAKoe,KAAKpa,EAAM,KACpB,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd5D,EAAW8B,KAAKoe,KAAM,SAAA/O,GAAK,OAAAA,EAAEzB,UAAU,MAGlC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAAxD,WAEQ+Z,EAAO9a,EAAI+a,YAAYve,KAAKnH,MAElC,GAAKylB,EAUL,CACE,IAAM,EAAkB,GAExBpgB,EAAWogB,EAAKzY,OAAOhE,QAAQlD,MAAO,SAACggB,EAAOC,GAE5C,IAAMF,EAAM,EAAKN,KAAKQ,GAEtB,EAAKxa,aAAaZ,EAAKU,EAASya,EAAOD,EAAKna,GAExCma,IAEF,EAAOE,GAAaF,EAAIha,QAAQlB,EAAKU,WAnBzCK,EAAQ,CACNpB,KAAMzD,EAAemf,iBACrB9Z,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,QAuBR,YAAAuD,mBAAP,SAA0BC,GAExB,IAAM8a,EAAO9a,EAAI+a,YAAYve,KAAKnH,MAElC,OAAKylB,EAKEA,EAAK1P,WAHH,aAAa5O,KAAKnH,KAAI,oBAM1B,YAAAimB,MAAP,SAAajmB,GAIX,OAFAmH,KAAKnH,KAAOA,EAELmH,MAKF,YAAA0e,IAAP,SAAWK,EAAsDxlB,G,MAEzD4X,EAAS3W,EAASukB,KACrB,MAAIA,GAAaxlB,EAAK,GACrBwlB,EAEJ,IAAK,IAAMC,KAAW7N,EACtB,CACE,IAAMuN,EAAM,GAAMtN,MAAMD,EAAO6N,IAE/Bhf,KAAKoe,KAAKY,GAAWN,EAErBA,EAAI9Q,UAAU5N,MAGhB,OAAOA,MAjKK,EAAAwF,GAAK,SAoKrB,EAvKA,CAAsC,G,4UCEtC,eAyBE,WAAmByZ,EAAgBpmB,EAAculB,GAAjD,MAEE,cAAO,K,OACP,EAAKa,OAASA,EACd,EAAKpmB,KAAOA,EACZ,EAAKulB,KAAOA,E,EAoMhB,OAlOsC,QAKtB,EAAAzR,OAAd,SAAqBC,EAAaiC,GAMhC,OAAO,IAAIqQ,EAJItS,EAXE,GAYJA,EAXE,GAYF/O,EAAU+O,EAXR,GAW0B,SAAAyC,GAAK,OAAAR,EAAME,cAAcM,OAKtD,EAAAvC,OAAd,SAAqBU,GAEnB,IAAM4Q,EAAOvgB,EAAU2P,EAAK4Q,KAAM,SAAA9iB,GAAK,OAAAA,EAAEwR,WAEzC,MAAO,CAAC9M,KAAKwF,GAAIgI,EAAKyR,OAAQzR,EAAK3U,KAAMulB,IAepC,YAAAjR,MAAP,WAEE,OAAO+R,EAAiB1Z,IAGnB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,IAAM+a,EAASzb,EAAIwZ,UAAUhd,KAAKif,QAElC,OAAKA,GAAWA,EAAOE,QAAQnf,KAAKnH,MAK7BomB,EAAOE,QAAQnf,KAAKnH,MAAM+V,WAAWI,cAAcxL,EAAKU,GAHtD,GAMJ,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOoS,EAAiBpS,OAAO9M,OAG1B,YAAAsO,MAAP,WAEE,OAAO,IAAI4Q,EAAiBlf,KAAKif,OAAQjf,KAAKnH,KAAMgF,EAAUmC,KAAKoe,KAAM,SAAC9iB,GAAM,OAAAA,EAAEgT,YAG7E,YAAA5J,QAAP,SAAelB,EAAyBU,EAAemP,GAErD,KAAKA,GAAcA,aAAoB,IAAeA,EAASxR,UAAY7B,KAAKif,QAE9E,OAAO,KAGT,IAAMA,EAASzb,EAAIwZ,UAAUhd,KAAKif,QAElC,IAAKA,EAEH,OAAO,KAGT,IAAMG,EAASH,EAAOE,QAAQnf,KAAKnH,MAEnC,IAAKumB,EAEH,OAAO,KAGT,IAAMZ,EAAW3gB,EAAUmC,KAAKoe,KAAM,SAAC9iB,GAAM,OAAAA,EAAEoJ,QAAQlB,EAAKU,KAI5D,OAFAsa,EAAS,EAAWpZ,UAAY6Z,EAAO9b,KAEhCic,EAAOX,cAAcjb,EAAKgb,IAG5B,YAAAle,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAA9B,EAAW,EAAKkgB,KAAM,SAAC5Q,EAAMkR,GAC3B,OAAApe,EAASI,KAAKge,EAAKlR,EAAM,SAACtM,GAAgB,SAAKkd,KAAKM,GAAOxd,GAAa,WAAM,cAAO,EAAKkd,KAAKM,UAK9F,YAAA3a,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAMhE,KAAKoe,KACpB,CAAC,EAAGpe,KAAKoe,KAAKpa,EAAM,KACpB,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd5D,EAAW8B,KAAKoe,KAAM,SAAA/O,GAAK,OAAAA,EAAEzB,UAAU,MAGlC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,EAA4B8O,GAApF,WAEE,GAAKA,GAAcA,aAAoB,IAAeA,EAASxR,UAAY7B,KAAKif,OAAhF,CAYA,IAAMA,EAASzb,EAAIwZ,UAAUhd,KAAKif,QAElC,GAAKA,EAAL,CAYA,IAAMG,EAASH,EAAOE,QAAQnf,KAAKnH,MAEnC,GAAKumB,EAAL,CAYA,IAAMvZ,EAAkB,GAExBA,EAAO,EAAWT,UAAY6Z,EAAO9b,KAErCjF,EAAWkhB,EAAOvZ,OAAOhE,QAAQlD,MAAO,SAACggB,EAAOC,GAE9C,IAAMF,EAAM,EAAKN,KAAKQ,GAEtB,EAAKxa,aAAaZ,EAAKU,EAASya,EAAOD,EAAKna,GAExCma,IAEF7Y,EAAO+Y,GAAaF,EAAIha,QAAQlB,EAAKU,WAtBvCK,EAAQ,CACNpB,KAAMzD,EAAe2f,eACrBta,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,YAlBXuE,EAAQ,CACNpB,KAAMzD,EAAeud,aACrBlY,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,YAlBXuE,EAAQ,CACNpB,KAAMzD,EAAe4f,aACrBva,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,QAmDR,YAAAuD,mBAAP,SAA0BC,GAExB,IAAMyb,EAASzb,EAAIwZ,UAAUhd,KAAKif,QAElC,IAAKA,EAEH,MAAO,WAAWjf,KAAKif,OAAM,mBAG/B,IAAMG,EAASH,EAAOE,QAAQnf,KAAKnH,MAEnC,OAAKumB,EAKEA,EAAOxQ,WAHL,WAAW5O,KAAKnH,KAAI,gBAAgBmH,KAAKif,OAAM,oBAMnD,YAAAvb,WAAP,WAEE,OAAO,GAGF,YAAAob,MAAP,SAAajmB,GAIX,OAFAmH,KAAKnH,KAAOA,EAELmH,MAKF,YAAA0e,IAAP,SAAWK,EAAsDxlB,G,MAEzD4X,EAAS3W,EAASukB,KACrB,MAAIA,GAAaxlB,EAAK,GACrBwlB,EAEJ,IAAK,IAAMC,KAAW7N,EACtB,CACE,IAAMuN,EAAM,GAAMtN,MAAMD,EAAO6N,IAE/Bhf,KAAKoe,KAAKY,GAAWN,EAErBA,EAAI9Q,UAAU5N,MAGhB,OAAOA,MA5NK,EAAAwF,GAAK,SA+NrB,EAlOA,CAAsC,G,4UCDtC,eAqBE,WAAmB2J,GAAnB,MAEE,cAAO,K,OACP,EAAKA,YAAcA,E,EAwEvB,OAhGkC,QAKlB,EAAAxC,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAI0Q,EAFS3S,EATE,GASsB/P,IAAI,SAACjE,GAAW,OAAAiW,EAAME,cAAcnW,OAKpE,EAAAkU,OAAd,SAAqBU,GAEnB,IAAM2B,EAAc3B,EAAK2B,YAAYtS,IAAI,SAAAwS,GAAK,OAAAA,EAAEvC,WAEhD,MAAO,CAAC9M,KAAKwF,GAAI2J,IAWZ,YAAAhC,MAAP,WAEE,OAAOoS,EAAa/Z,IAGf,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKmP,YAAY3Q,OAAO,SAAClC,EAAK+S,GAAM,OAAAzT,KAAKU,IAAIA,EAAK+S,EAAEL,cAAcxL,EAAKU,KAAW,IAGpF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOyS,EAAazS,OAAO9M,OAGtB,YAAAsO,MAAP,WAEE,OAAO,IAAIiR,EAAavf,KAAKmP,YAAYtS,IAAI,SAACwS,GAAM,OAAAA,EAAEf,YAGjD,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,IAAMqB,EAAgBvF,KAAKmP,YACxBtS,IAAI,SAAAwS,GAAK,OAAAA,EAAE3K,QAAQlB,EAAKU,KACxByZ,OAAO,GAAY1Q,UACnB1L,OAAO,SAAA/H,GAAK,QAAEA,IAGjB,OAAO,GAAM0iB,UAAU3W,EAAO,GAAS0H,WAGlC,YAAA3M,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAKmP,YAAY9I,QAAQ,SAACmH,EAAMzD,GAC9B,OAAAzJ,EAASI,KAAKqJ,EAAOyD,EAAM,SAACtM,GAAgB,SAAKiO,YAAYnF,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKiO,YAAYnF,OAAOD,EAAO,UAKhI,YAAAhG,sBAAP,SAA6BC,GAE3B,OAAO1J,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKmP,YAAYnT,OACrD,CAAC,EAAGgE,KAAKmP,YAAYnL,EAAM,KAC3B,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKmP,YAAY9I,QAAQ,SAAAgJ,GAAK,OAAAA,EAAEzB,UAAU,MAGrC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAAxD,WAEQ+K,EAAe,GAAYrC,SAEjCjN,KAAKmP,YAAY9I,QAAQ,SAAA/B,GAEvB,EAAKF,aAAaZ,EAAKU,EAASoL,EAAchL,EAASC,MAzF7C,EAAAiB,GAAK,KA6FrB,EAhGA,CAAkC,G,6hBCKlC,eAmCE,WAAmB3M,EAAcgN,EAAuB2Z,QAAA,IAAAA,MAAA,IAAxD,MAEE,cAAO,K,OACP,EAAK3mB,KAAOA,EACZ,EAAKgN,OAASA,EACd,EAAK2Z,WAAaA,E,EA8JtB,OAtMuH,QAKvG,EAAA7S,OAAd,SAAqBC,EAAaiC,GAMhC,OAAO,IAAI4Q,EAJE7S,EAXE,GAYe/O,EAAU+O,EAXvB,GAW2C,SAAArT,GAAS,OAAAsV,EAAME,cAAcxV,KAC9CqT,EAX3B,IAWgD,KAKpD,EAAAE,OAAd,SAAqBU,GAEnB,IAAM3H,EAAShI,EAAU2P,EAAK3H,OAAQ,SAAAwJ,GAAK,OAAAA,EAAEvC,WAE7C,OAAO/Q,EAAQyR,EAAKgS,YAChB,CAACxf,KAAKwF,GAAIgI,EAAK3U,KAAMgN,GACrB,CAAC7F,KAAKwF,GAAIgI,EAAK3U,KAAMgN,EAAQ2H,EAAKgS,aAG1B,EAAA5lB,OAAd,SACE0M,EACAT,EACA2Z,GAEA,YAFA,IAAAA,MAAyCxmB,OAAOY,OAAO,OAEhD,IAAI6lB,EAA6BnZ,EAAGd,GAAIK,EAAQ2Z,IAelD,YAAArS,MAAP,WAEE,OAAOsS,EAAoBja,IAGtB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,IAAMoC,EAAK9C,EAAImQ,aAAa3T,KAAKnH,MAC7BsN,EAAaG,EAAKA,EAAGH,WAAa,EAEtC,IAAK,IAAMvH,KAAQoB,KAAK6F,OAEtBM,EAAavK,KAAKU,IAAI6J,EAAYnG,KAAK6F,OAAOjH,GAAMoQ,cAAcxL,EAAKU,IAGzE,OAAOiC,GAGF,YAAA8I,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO2S,EAAoB3S,OAAO9M,OAG7B,YAAAsO,MAAP,WAEE,OAAO,IAAImR,EAAoBzf,KAAKnH,KAAMgF,EAAUmC,KAAK6F,OAAQ,SAACzL,GAAM,OAAAA,EAAEkU,UAAU,MAAKtO,KAAKwf,cAGzF,YAAA9a,QAAP,SAAelB,EAAyBU,GAEtC,OAAOV,EAAIkc,uBAAuB1f,KAAKnH,KAAMmH,KAAK6F,OAAQ7F,KAAKwf,WAAYtb,IAGtE,YAAA5D,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAA9B,EAAW,EAAK2H,OAAQ,SAAC2H,EAAMmR,GAC7B,OAAAre,EAASI,KAAKie,EAAOnR,EAAM,SAACtM,GAAgB,SAAK2E,OAAO8Y,GAASzd,GAAa,WAAM,cAAO,EAAK2E,OAAO8Y,UAKtG,YAAA5a,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAMhE,KAAK6F,OACpB,CAAC,EAAG7F,KAAK6F,OAAO7B,EAAM,KACtB,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd5D,EAAW8B,KAAK6F,OAAQ,SAAAwJ,GAAK,OAAAA,EAAEzB,UAAU,MAGpC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAEhD,IAAE1L,EAAF,KAAEA,KAAMgN,EAAR,KAAQA,OAAQ2Z,EAAhB,KAAgBA,WAChBG,EAAYnc,EAAImQ,aAAa9a,GAC7B+mB,EAAiBpc,EAAIqc,kBAAkBhnB,GAE7C,GAAK8mB,EAAL,CAYA,IAAMG,EAAgBtc,EAAIuc,0BAA0BlnB,EAAMgN,EAAQ2Z,EAAYtb,GACxE8b,EAAeL,EAAU3Z,SAAShK,OAAS,EAC7CwH,EAAIyc,yBAAyBpnB,EAAMinB,EAAeN,EAAYtb,GAC9DA,EAEJ,IAAK,IAAM0a,KAAakB,EACxB,CACE,IAAMha,GAAsD,IAA3C6Z,EAAU7Z,SAAS8O,QAAQgK,GACtCsB,EAAmBJ,EAAclB,GACjCpa,EAAWsB,EAAW,GAAMA,SAASoa,GAAoBA,EACzD5b,EAAUuB,EAAO+Y,GAEjBuB,GADsD,IAA3CR,EAAU3Z,SAAS4O,QAAQgK,GACZoB,EAAe9b,EAE/ClE,KAAKoE,aAAaZ,EAAK2c,EAAc3b,EAAUF,EAASC,GAG1D,IAAK,IAAMqa,KAAa/Y,EACxB,CACQvB,EAAUuB,EAAO+Y,GAAvB,IACMwB,EAAgBR,EAAe/Z,OAAO+Y,GAE5C,KAAMA,KAAakB,IAAkBM,EACrC,CAEQD,GADsD,IAA3CR,EAAU3Z,SAAS4O,QAAQgK,GACZoB,EAAe9b,EAE/CK,EAAQ,CACNpB,KAAMzD,EAAe2gB,mBACrBtb,SAAUtF,EAAmByF,KAC7BhB,QAASic,EACT7b,QAAO,EACPxC,OAAQ9B,OAGV6F,EAAO+Y,GAAWza,SAASX,EAAK2c,EAAc5b,UA7ChDA,EAAQ,CACNpB,KAAMzD,EAAe4gB,kBACrBvb,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,QA8CR,YAAA2e,MAAP,SAAa9lB,EAAaU,GAExB,IAAMolB,EAAQ,GAAMvN,MAAM7X,GAK1B,OAHAyG,KAAK6F,OAAOhN,GAAQ8lB,EACpBA,EAAM/Q,UAAU5N,MAETA,MAGF,YAAAugB,MAAP,SAAaC,EAAWD,GAItB,OAFAvgB,KAAKwf,WAAWgB,GAAUD,EAEnBvgB,MAGF,YAAAoI,IAAP,SAAWyG,GAET,IAAMsC,EAAS1W,EAAQoU,GAASA,EAAQ,CAACA,GAEzC,OAAO,IAAI,GAAc,CAAC7O,MAAoB2d,OAAOxM,KAGhD,YAAA9I,GAAP,SAAUwG,GAER,IAAMsC,EAAS1W,EAAQoU,GAASA,EAAQ,CAACA,GAEzC,OAAO,IAAI,GAAa,CAAC7O,MAAoB2d,OAAOxM,KAG/C,YAAA5I,IAAP,WAEE,OAAO,IAAI,GAAcvI,OAhMb,EAAAwF,GAAK,KAmMrB,EAtMA,CAAuH,G,4UCTvH,eAyBE,WAAmBjM,GAAnB,MAEE,cAAO,K,OACP,EAAKA,MAAQA,E,EAkEjB,OA9FsC,QAOtB,EAAAoT,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAI4R,EAFG5R,EAAME,cAAcnC,EAXlB,MAgBJ,EAAAE,OAAd,SAAqBU,GAEnB,IAAMkT,EAAclT,EAAKjU,MAAMuT,SAE/B,YAAuB1O,IAAhBsiB,EACH,CAAC1gB,KAAKwF,GAAIkb,GACV,CAAC1gB,KAAKwF,KAWL,YAAA2H,MAAP,WAEE,OAAOsT,EAAiBjb,IAGnB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKzG,MAAMyV,cAAcxL,EAAKU,IAGhC,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO2T,EAAiB3T,OAAO9M,OAG1B,YAAAsO,MAAP,WAEE,OAAO,IAAImS,EAAiBzgB,KAAKzG,MAAMuT,WAGlC,YAAApI,QAAP,SAAelB,EAAyBU,GAEtC,OAAOlE,KAAKzG,MACRyG,KAAKzG,MAAMmL,QAAQlB,EAAKU,GACxB,MAGC,YAAA5D,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAAM,EAASI,KAAK+f,EAAiBlH,WAAY,EAAKhgB,MAAO,SAAC2H,GAAgB,SAAK3H,MAAQ2H,OAIlF,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAOyc,EAAiBlH,WACjC,CAAC,EAAGvZ,KAAKzG,OACT,MAGC,YAAAqU,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKzG,MAAMqU,UAAU5N,OAGhB,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKzG,MAAM4K,SAASX,EAAKU,EAASK,IAG7B,YAAAZ,eAAP,SAAsBC,GAEpB,OAAO,GAxFK,EAAA2V,WAAa,QAEb,EAAA/T,GAAK,SAyFrB,EA9FA,CAAsC,G,4UCItC,eA8BE,WAAmBtF,EAAsB3G,GAAzC,MAEE,cAAO,K,OAEP,EAAK2G,KAAOA,EACZ,EAAK3G,MAAQA,E,EAqGjB,OAxImC,QASnB,EAAAoT,OAAd,SAAqBC,EAAaiC,GAKhC,OAAO,IAAI8R,EAHE,GAAe1N,YAAYrG,EAdzB,GAc2CiC,GAC5CA,EAAME,cAAcnC,EAdlB,MAmBJ,EAAAE,OAAd,SAAqBU,GAEnB,MAAO,CAACxN,KAAKwF,GAAIgI,EAAKtN,KAAK4M,SAAUU,EAAKjU,MAAMuT,WAGpC,EAAAlT,OAAd,SAAqBsG,EAAyB3G,GAE5C,OAAO,IAAIonB,EAAc,GAAMzgB,KAAKA,GAAO,GAAMkR,MAAM7X,KAclD,YAAA4T,MAAP,WAEE,OAAOwT,EAAcnb,IAGhB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOtI,KAAKU,IAAI0D,KAAKE,KAAK8O,cAAcxL,EAAKU,GAAUlE,KAAKzG,MAAMyV,cAAcxL,EAAKU,KAGhF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO6T,EAAc7T,OAAO9M,OAGvB,YAAAsO,MAAP,WAEE,OAAO,IAAIqS,EAAc3gB,KAAKE,KAAKoO,QAAStO,KAAKzG,MAAM+U,UAGlD,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,GAAY+I,UAGd,YAAA3M,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKigB,EAAcC,UAAW,EAAK1gB,KAAM,SAACgB,GAAgB,SAAKhB,KAAO,GAAMA,KAAKgB,KAC1FZ,EAASI,KAAKigB,EAAcpH,WAAY,EAAKhgB,MAAO,SAAC2H,GAAgB,SAAK3H,MAAQ2H,OAK/E,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAO2c,EAAcC,UAC9B,CAAC,EAAG5gB,KAAKE,MACT8D,EAAM,KAAO2c,EAAcpH,WACzB,CAAC,EAAGvZ,KAAKzG,OACT,MAID,YAAAqU,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKE,KAAK0N,UAAU5N,MACpBA,KAAKzG,MAAMqU,UAAU5N,OAGhB,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKE,KAAKiE,SAASX,EAAKU,EAASK,GAEjC,IAAM+K,EAAetP,KAAKE,KAAKwE,QAAQlB,EAAKU,GAEvClE,KAAKE,KAAKsT,WAAWhQ,IAExBe,EAAQ,CACNpB,KAAMzD,EAAemhB,SACrB9b,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,KAAKE,KACd4B,OAAQ9B,OAIRsP,EAEFtP,KAAKoE,aAAaZ,EAAKU,EAASoL,EAActP,KAAKzG,MAAOgL,GAI1DA,EAAQ,CACNpB,KAAMzD,EAAe4T,mBACrBvO,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,KAAKE,KACd4B,OAAQ9B,QAKP,YAAA8C,GAAP,SAAUvJ,GAKR,OAHAyG,KAAKzG,MAAQ,GAAM6X,MAAM7X,GACzByG,KAAKzG,MAAMqU,UAAU5N,MAEdA,MAlIK,EAAA4gB,UAAY,OAEZ,EAAArH,WAAa,QAEb,EAAA/T,GAAK,MAiIrB,EAxIA,CAAmC,G,umBCMnC,eA2CE,WAAmBjM,EAAmB+M,EAAYiX,EAAqCuD,GAAvF,MAEE,cAAO,K,OACP,EAAKvnB,MAAQA,EACb,EAAK+M,GAAKA,EACV,EAAKiX,MAAQA,EACb,EAAKuD,YAAcA,E,EAuKvB,OAxNsC,QAetB,EAAAnU,OAAd,SAAqBC,EAAaiC,GAUhC,OAAO,IAAIkS,EARGlS,EAAME,cAAcnC,EAtBlB,IAuBLA,EAtBE,GAuBCA,EAtBE,GAsBgB/P,IAAI,SAAC,G,IAAA,UAACmkB,EAAA,KAAO5gB,EAAA,KAA0B,OACrE4gB,EAAMnkB,IAAI,SAACrD,GAAW,OAAAqV,EAAME,cAAcvV,KAC1CqV,EAAME,cAAc3O,MAEFyO,EAAME,cAAcnC,EAzBjB,MA8BX,EAAAE,OAAd,SAAqBU,GAEnB,IAAMjU,EAAQiU,EAAKjU,MAAMuT,SACnByQ,EAAQ/P,EAAK+P,MAAM1gB,IAAI,SAAC,G,IAAA,UAACmkB,EAAA,KAAO5gB,EAAA,KAAY,OAAC4gB,EAAMnkB,IAAI,SAAArD,GAAK,OAAAA,EAAEsT,WAAW1M,EAAO0M,YAEtF,OAAO,GAAmB8L,IAAIpL,EAAKsT,iBAAa1iB,GAC5C,CAAC4B,KAAKwF,GAAIjM,EAAOiU,EAAKlH,GAAIiX,GAC1B,CAACvd,KAAKwF,GAAIjM,EAAOiU,EAAKlH,GAAIiX,EAAO/P,EAAKsT,YAAYhU,WAiBjD,YAAAK,MAAP,WAEE,OAAO4T,EAAiBvb,IAGnB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKud,MAAM/e,OAChB,SAAClC,EAAK,G,IAAA,UAAC0kB,EAAA,KAAO5gB,EAAA,KAAY,OAAAxE,KAAKU,IAC7BA,EACA8D,EAAO4O,cAAcxL,EAAKU,GAC1B8c,EAAMxiB,OAAO,SAACyiB,EAAMznB,GAAM,OAAAoC,KAAKU,IAC7B2kB,EACAznB,EAAEwV,cAAcxL,EAAKU,KACpB,KAELtI,KAAKU,IACH0D,KAAKzG,MAAMyV,cAAcxL,EAAKU,GAC9BlE,KAAK8gB,YAAY9R,cAAcxL,EAAKU,MAKnC,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOiU,EAAiBjU,OAAO9M,OAG1B,YAAAsO,MAAP,WAEE,OAAO,IAAIyS,EAAiB/gB,KAAKzG,MAAM+U,QAAStO,KAAKsG,GAAItG,KAAKud,MAAM1gB,IAAI,SAAC,G,IAAA,UAACmkB,EAAA,KAAOtD,EAAA,KAAU,OAACsD,EAAMnkB,IAAI,SAACrD,GAAM,OAAAA,EAAE8U,UAAUoP,EAAKpP,WAAWtO,KAAK8gB,YAAYxS,UAGrJ,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,IAAMqB,EAAQvF,KAAKud,MAChB1gB,IAAI,SAAC,G,IAAA,UAAC,KAAkB,OAAX,OACb8gB,OAAO3d,KAAK8gB,aACZvf,OAAO,SAAA8N,GAAK,QAAEA,IACdxS,IAAI,SAAAwS,GAAK,OAAAA,EAAE3K,QAAQlB,EAAKU,KACxB3C,OAAO,SAAA/H,GAAK,QAAEA,IAGjB,OAAO,GAAM0iB,UAAU3W,EAAO,GAAS0H,WAGlC,YAAA3M,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKqgB,EAAiBxH,WAAY,EAAKhgB,MAAO,SAAC2H,GAAgB,SAAK3H,MAAQ2H,IACrFZ,EAASI,KAAKqgB,EAAiBnD,WAAY,WACzC,SAAKL,MAAMlX,QAAQ,SAAC,EAAiB6a,G,IAAjB,UAACF,EAAA,KAAO5gB,EAAA,KAC1B,OAAAE,EAASI,KAAKwgB,EAAW,WACvB5gB,EAASI,KAAKqgB,EAAiBI,UAAW,WACxC,OAAAH,EAAM3a,QAAQ,SAACzB,EAAMmF,GACnB,OAAAzJ,EAASI,KAAKqJ,EAAOnF,EAAM,SAAC1D,GAAgB,OAAA8f,EAAMhX,OAAOD,EAAO,EAAG7I,IAAc,WAAM,OAAA8f,EAAMhX,OAAOD,EAAO,SAG/GzJ,EAASI,KAAKqgB,EAAiBK,YAAahhB,EAAQ,SAACc,GAAgB,SAAKqc,MAAM2D,GAAWlX,OAAO,EAAG,EAAG9I,WAI9GZ,EAASI,KAAKqgB,EAAiBM,aAAc,EAAKP,YAAa,SAAC5f,GAAgB,SAAK4f,YAAc5f,OAKhG,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAO+c,EAAiBxH,WACjC,CAAC,EAAGvZ,KAAKzG,OACTyK,EAAM,KAAO+c,EAAiBnD,WAC5BtjB,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKud,MAAMvhB,OAC1CgI,EAAM,KAAO+c,EAAiBI,UAC5B7mB,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKud,MAAMvZ,EAAM,IAAI,GAAGhI,OACvD,CAAC,EAAGgE,KAAKud,MAAMvZ,EAAM,IAAI,GAAGA,EAAM,KAClC,KACFA,EAAM,KAAO+c,EAAiBK,YAC5B,CAAC,EAAGphB,KAAKud,MAAMvZ,EAAM,IAAI,IACzB,KACF,KACJA,EAAM,KAAO+c,EAAiBM,aAC5B,CAAC,EAAGrhB,KAAK8gB,aACT,MAIH,YAAAlT,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKzG,MAAMqU,UAAU5N,MACrBA,KAAKud,MAAMlX,QAAQ,SAAC,G,IAAA,UAAC2a,EAAA,KAAO5gB,EAAA,KAC1B4gB,EAAM3a,QAAQ,SAAAgJ,GAAK,OAAAA,EAAEzB,UAAU,KAC/BxN,EAAOwN,UAAU,KAEnB5N,KAAK8gB,YAAYlT,UAAU5N,OAGtB,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKzG,MAAM4K,SAASX,EAAKU,EAASK,GAElCvE,KAAKud,MAAMlX,QAAQ,SAAC,G,IAAA,UAAC2a,EAAA,KAAO5gB,EAAA,KAE1B4gB,EAAM3a,QAAQ,SAAAgJ,GAAK,OAAAA,EAAElL,SAASX,EAAKU,EAASK,KAE5CnE,EAAO+D,SAASX,EAAKU,EAASK,KAGhCvE,KAAK8gB,YAAY3c,SAASX,EAAKU,EAASK,IAGnC,YAAA+c,IAAP,SAAW/nB,EAAwB+M,GAMjC,OAJAtG,KAAKzG,MAAQ,GAAM6X,MAAM7X,GACzByG,KAAKzG,MAAMqU,UAAU5N,MACrBA,KAAKsG,GAAKA,EAAKA,EAAGd,GAAKxF,KAAKsG,GAErBtG,MAGF,YAAAuhB,KAAP,SAAYC,GAEV,IAAMznB,EAAIiG,KAAKud,MAAMvhB,OAAS,EACxB4I,EAAO,GAAMwM,MAAMoQ,GAazB,OAXA5c,EAAKgJ,UAAU5N,MAEXjG,GAAK,GAAKiG,KAAKud,MAAMxjB,GAAG,KAAO,GAAasW,SAE9CrQ,KAAKud,MAAMxjB,GAAG,GAAGwE,KAAKqG,GAItB5E,KAAKud,MAAMhf,KAAK,CAAC,CAACqG,GAAO,GAAayL,WAGjCrQ,MAGF,YAAAie,KAAP,SAAYwD,GAEV,IAAM/Q,EAAO,GAAMU,MAAMqQ,GAKzB,OAHAzhB,KAAKud,MAAMvd,KAAKud,MAAMvhB,OAAS,GAAG,GAAK0U,EACvCA,EAAK9C,UAAU5N,MAERA,MAGF,YAAA0hB,QAAP,SAAehR,GAKb,OAHA1Q,KAAK8gB,YAAc,GAAM1P,MAAMV,GAC/B1Q,KAAK8gB,YAAYlT,UAAU5N,MAEpBA,MAlNK,EAAAuZ,WAAa,QAEb,EAAAqE,WAAa,QAEb,EAAAuD,UAAY,OAEZ,EAAAC,YAAc,SAEd,EAAAC,aAAe,UAEf,EAAA7b,GAAK,SA2MrB,EAxNA,CAAsC,G,4UCNtC,eAuBE,WAAmBmc,EAAkB9b,GAArC,MAEE,cAAO,K,OACP,EAAK8b,SAAWA,EAChB,EAAK9b,OAASA,E,EAyFlB,OApHwC,QAKxB,EAAA8G,OAAd,SAAqBC,EAAaiC,GAKhC,OAAO,IAAI+S,EAHMhV,EAVE,GAWW/O,EAAU+O,EAVvB,GAU2C,SAAArT,GAAS,OAAAsV,EAAME,cAAcxV,OAK7E,EAAAuT,OAAd,SAAqBU,GAEnB,IAAM3H,EAAShI,EAAU2P,EAAK3H,OAAQ,SAAAwJ,GAAK,OAAAA,EAAEvC,WAE7C,MAAO,CAAC9M,KAAKwF,GAAIgI,EAAKmU,SAAU9b,IAa3B,YAAAsH,MAAP,WAEE,OAAOyU,EAAmBpc,IAGrB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,IAAIiC,EAAa,EAEjB,IAAK,IAAMvH,KAAQoB,KAAK6F,OAEtBM,EAAavK,KAAKU,IAAI6J,EAAYnG,KAAK6F,OAAOjH,GAAMoQ,cAAcxL,EAAKU,IAGzE,OAAOiC,GAGF,YAAA8I,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO8U,EAAmB9U,OAAO9M,OAG5B,YAAAsO,MAAP,WAEE,OAAO,IAAIsT,EAAmB5hB,KAAK2hB,SAAU9jB,EAAUmC,KAAK6F,OAAQ,SAACzL,GAAM,OAAAA,EAAEkU,YAGxE,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,GAAS+I,SAASoB,eAGpB,YAAA/N,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAA9B,EAAW,EAAK2H,OAAQ,SAAC2H,EAAMmR,GAC7B,OAAAre,EAASI,KAAKie,EAAOnR,EAAM,SAACtM,GAAgB,SAAK2E,OAAO8Y,GAASzd,GAAa,WAAM,cAAO,EAAK2E,OAAO8Y,UAKtG,YAAA5a,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAMhE,KAAK6F,OACpB,CAAC,EAAG7F,KAAK6F,OAAO7B,EAAM,KACtB,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd5D,EAAW8B,KAAK6F,OAAQ,SAAAwJ,GAAK,OAAAA,EAAEzB,UAAU,MAGpC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAAxD,WAEErG,EAAW8B,KAAK6F,OAAQ,SAAAvB,GAEtB,EAAKF,aAAaZ,EAAKU,EAAS,GAAS+I,SAAU3I,EAASC,MAMzD,YAAAoa,MAAP,SAAakD,EAAwDtoB,G,MAE7D4X,EAAS3W,EAASqnB,KACrB,MAAIA,GAAetoB,EAAK,GACvBsoB,EAEJ,IAAK,IAAMjD,KAAazN,EACxB,CACE,IAAMwN,EAAQ,GAAMvN,MAAMD,EAAOyN,IACjC5e,KAAK6F,OAAO+Y,GAAaD,EACzBA,EAAM/Q,UAAU5N,MAGlB,OAAOA,MA9GK,EAAAwF,GAAK,OAiHrB,EApHA,CAAwC,G,4UCFlCsc,GAAkB,UAKxB,eAqCE,WAAmB5hB,EAAsB3G,EAAmBwoB,QAAA,IAAAA,MAAA,IAA5D,MAEE,cAAO,K,OACP,EAAK7hB,KAAOA,EACZ,EAAK3G,MAAQA,EACb,EAAKwoB,gBAAkBA,E,EAmH3B,OA7JsC,QAStB,EAAApV,OAAd,SAAqBC,EAAaiC,GAMhC,OAAO,IAAImT,EAJE,GAAe/O,YAAYrG,EAfzB,GAe2CiC,GAC5CA,EAAME,cAAcnC,EAflB,IAgBQA,EAfN,IAe6BkV,KAKnC,EAAAhV,OAAd,SAAqBU,GAEnB,IAAMtN,EAAOsN,EAAKtN,KAAK4M,SACjBvT,EAAQiU,EAAKjU,MAAMuT,SAEzB,OAAOU,EAAKuU,kBAAoBD,GAC5B,CAAC9hB,KAAKwF,GAAItF,EAAM3G,GAChB,CAACyG,KAAKwF,GAAItF,EAAM3G,EAAOiU,EAAKuU,kBAGpB,EAAAnoB,OAAd,SAAqBsG,EAAyB3G,EAAwBwoB,GAEpE,YAFoE,IAAAA,MAAA,IAE7D,IAAIC,EAAiB,GAAM9hB,KAAKA,GAAO,GAAMkR,MAAM7X,GAAQwoB,IAe7D,YAAA5U,MAAP,WAEE,OAAO6U,EAAiBxc,IAGnB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOtI,KAAKU,IAAI0D,KAAKE,KAAK8O,cAAcxL,EAAKU,GAAUlE,KAAKzG,MAAMyV,cAAcxL,EAAKU,KAGhF,YAAA+K,SAAP,W,MAEE,OAAO,EAAP,IACGjP,KAAK+hB,iBAAkB,GAAQ9U,S,GAI7B,YAAAH,OAAP,WAEE,OAAOkV,EAAiBlV,OAAO9M,OAG1B,YAAAsO,MAAP,WAEE,OAAO,IAAI0T,EAAiBhiB,KAAKE,KAAKoO,QAAStO,KAAKzG,MAAM+U,QAAStO,KAAK+hB,kBAGnE,YAAArd,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,GAAY+I,UAGd,YAAA3M,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKshB,EAAiBpB,UAAW,EAAK1gB,KAAM,SAACgB,GAAgB,SAAKhB,KAAO,GAAMA,KAAK,CAACgB,MAC9FZ,EAASI,KAAKshB,EAAiBzI,WAAY,EAAKhgB,MAAO,SAAC2H,GAAgB,SAAK3H,MAAQ2H,OAKlF,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAOge,EAAiBpB,UACjC,CAAC,EAAG5gB,KAAKE,MACT8D,EAAM,KAAOge,EAAiBzI,WAC5B,CAAC,EAAGvZ,KAAKzG,OACT,MAID,YAAAqU,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKE,KAAK0N,UAAU5N,MACpBA,KAAKzG,MAAMqU,UAAU5N,OAGhB,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,G,MAEtDvE,KAAKE,KAAKiE,SAASX,EAAKU,EAASK,GAEjC,IAAM+K,EAAetP,KAAKE,KAAKwE,QAAQlB,EAAKU,GAa5C,GAXKlE,KAAKE,KAAKsT,WAAWhQ,IAExBe,EAAQ,CACNpB,KAAMzD,EAAemhB,SACrB9b,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,KAAKE,KACd4B,OAAQ9B,OAIRsP,EACJ,CACE,IAAM2S,EAAeze,EAAI0O,WAAWhO,IAAO,MACxClE,KAAK+hB,iBAAkBzS,E,IAG1BtP,KAAKoE,aAAaZ,EAAKye,EAAc3S,EAActP,KAAKzG,MAAOgL,QAI/DA,EAAQ,CACNpB,KAAMzD,EAAe4T,mBACrBvO,SAAUtF,EAAmByF,KAC7BhB,QAAO,EACPI,QAAStE,KAAKE,KACd4B,OAAQ9B,QAKP,YAAA8C,GAAP,SAAUvJ,EAAwBwoB,GAMhC,OAJA/hB,KAAKzG,MAAQ,GAAM6X,MAAM7X,GACzByG,KAAKzG,MAAMqU,UAAU5N,MACrBA,KAAK+hB,gBAAkBA,GAAmB/hB,KAAK+hB,gBAExC/hB,MAGF,YAAAwa,aAAP,SAAoB3hB,GAIlB,OAFAmH,KAAK+hB,gBAAkBlpB,EAEhBmH,MAvJK,EAAA4gB,UAAY,OAEZ,EAAArH,WAAa,QAEb,EAAA/T,GAAK,KAsJrB,EA7JA,CAAsC,G,4UCPhC,GAAyB,IACzB,GAAgB,QAMtB,eAyCE,WAAmBiM,EAAuBf,EAAkBgB,EAAuCC,QAAvC,IAAAD,MAAA,SAAuC,IAAAC,MAAA,IAAnG,MAEE,cAAO,K,OACP,EAAKF,UAAYA,EACjB,EAAKf,KAAOA,EACZ,EAAKgB,cAAgBA,EACrB,EAAKC,cAAgBA,E,EAuGzB,OAtJqC,QAWrB,EAAAhF,OAAd,SAAqBC,EAAaiC,GAOhC,OAAO,IAAIqT,EALOrT,EAAME,cAAcnC,EAlBlB,IAmBPiC,EAAME,cAAcnC,EAlBlB,IAmBOA,EAlBN,IAkB2B,GAC/BiF,SAASjF,EAlBP,KAkB2B5M,KAAK8R,iBAKlC,EAAAhF,OAAd,SAAqBU,GAEnB,IAAMvP,EAAM,CAAC+B,KAAKwF,GAAIgI,EAAKiE,UAAU3E,SAAUU,EAAKkD,KAAK5D,UACnDiF,EAASvE,EAAKmE,gBAAkB3R,KAAK8R,eAS3C,OAPItE,EAAKkE,gBAAkB,IAAiBK,IAC1C9T,EAAIM,KAAKiP,EAAKkE,eAEZK,GACF9T,EAAIM,KAAKiP,EAAKmE,eAGT1T,GAiBF,YAAAkP,MAAP,WAEE,OAAO+U,EAAgB1c,IAGlB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOtI,KAAKU,IAAI0D,KAAKyR,UAAUzC,cAAcxL,EAAKU,GAAUlE,KAAK0Q,KAAK1B,cAAcxL,EAAKU,IAAY,GAGhG,YAAA+K,SAAP,W,MAEE,OAAO,EAAP,IACGjP,KAAK0R,eAAgB,GAAYzE,S,GAI/B,YAAAH,OAAP,WAEE,OAAOoV,EAAgBpV,OAAO9M,OAGzB,YAAAsO,MAAP,WAEE,OAAO,IAAI4T,EAAgBliB,KAAKyR,UAAUnD,QAAStO,KAAK0Q,KAAKpC,QAAStO,KAAK0R,cAAe1R,KAAK2R,gBAG1F,YAAAjN,QAAP,SAAelB,EAAyBgI,GAE9B,IAAAtH,EAAA,yCAAAA,QAEFwM,EAAO1Q,KAAK0Q,KAAKhM,QAAQlB,EAAKU,GAEpC,OAAOwM,EAAO,GAAM5K,SAAS4K,GAAQ,MAGhC,YAAApQ,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKwhB,EAAgBlQ,eAAgB,EAAKP,UAAW,SAACvQ,GAAgB,SAAKuQ,UAAYvQ,IAChGZ,EAASI,KAAKwhB,EAAgBpR,UAAW,EAAKJ,KAAM,SAACxP,GAAgB,SAAKwP,KAAOxP,OAI9E,YAAA6C,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAOke,EAAgBlQ,eAChC,CAAC,EAAGhS,KAAKyR,WACTzN,EAAM,KAAOke,EAAgBpR,UAC3B,CAAC,EAAG9Q,KAAK0Q,MACT,MAGD,YAAA9C,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKyR,UAAU7D,UAAU5N,MACzBA,KAAK0Q,KAAK9C,UAAU5N,OAGf,YAAAmE,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKoE,aAAaZ,EAAKU,EAAS,GAAY+I,SAAUjN,KAAKyR,UAAWlN,GAEtE,IAAM0N,EAAczO,EAAI0O,WAAWhO,EAASlE,KAAKiP,YAEjDjP,KAAK0Q,KAAKvM,SAASX,EAAKyO,EAAa1N,IAGhC,YAAA6N,MAAP,SAAaX,GAKX,OAHAzR,KAAKyR,UAAYA,EACjBzR,KAAKyR,UAAU7D,UAAU5N,MAElBA,MAGF,YAAAmS,GAAP,SAAUzB,GAKR,OAHA1Q,KAAK0Q,KAAOA,EACZ1Q,KAAK0Q,KAAK9C,UAAU5N,MAEbA,MAGF,YAAAqS,UAAP,SAAiBxZ,GAIf,OAFAmH,KAAK0R,cAAgB7Y,EAEdmH,MAGF,YAAAsS,QAAP,SAAeC,GAIb,OAFAvS,KAAK2R,cAAgBY,EAEdvS,MAhJK,EAAAgS,eAAiB,YAEjB,EAAAlB,UAAY,OAEZ,EAAAgB,eAAiB,GAEjB,EAAAtM,GAAK,QA6IrB,EAtJA,CAAqC,GCXxB2c,GAAkB,IAAIpa,EAAWnB,EAAGgB,MAAQhB,EAAGiB,WAE/Cua,GAAiB,IAAIna,EAAUrB,EAAGgB,MAAQhB,EAAGiB,WAEpD,GAAMsa,GAECE,GACb,CAIEzoB,OAAQ,GAAI8L,IAAI,UAIhByC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7B8C,IAAK,GAAI9C,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC4F,KAAM,GAAI5F,IAAI,OAAQ,GAAI,CAAC,UAE3B4c,MAAO,GAAI5c,IAAI,QAAS,GAAI,CAAC,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,GAAI,GAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MAEtFvM,IAAK,GAAIuM,IAAI,MAAO,GAAI,CAAC,QAAS,UAElCA,IAAK,GAAIA,IAAI,MAAO,CAAEQ,QAAS,CAAC,UAAY,CAAC,QAAS,QAAS,YAI/DuC,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BkD,QAAS,GAAIlD,IAAI,IAAK,GAAI,CAAC,QAAS,SAEpCmD,WAAY,GAAInD,IAAI,KAAM,GAAI,CAAC,QAAS,SAExCqK,OAAQ,GAAIrK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCsK,cAAe,GAAItK,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CuK,UAAW,GAAIvK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtCwK,iBAAkB,GAAIxK,IAAI,KAAM,GAAI,CAAC,QAAS,SAI9CoD,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpConB,GAAe1c,IAAI,OAAQ2c,GAAS/W,MCrE7B,IAAMiX,GAAmB,IAAIxa,EAAWnB,EAAGW,OAASX,EAAGiB,WAEjD2a,GAAkB,IAAIva,EAAUrB,EAAGW,OAASX,EAAGiB,WAEtD,GAAM0a,GAECE,GACb,CAIE7oB,OAAQ,GAAI8L,IAAI,UAEhBgd,GAAI,GAAIhd,IAAI,MAEZid,IAAK,GAAIjd,IAAI,OAEbkd,OAAQ,GAAIld,IAAI,OAEhB2J,EAAG,GAAI3J,IAAI,KAEXmd,MAAO,GAAInd,IAAI,SAEfod,OAAQ,GAAIpd,IAAI,WAEhBqd,IAAK,GAAIrd,IAAI,OAEbsd,KAAM,GAAItd,IAAI,QAEdud,MAAO,GAAIvd,IAAI,SAEfwd,OAAQ,GAAIxd,IAAI,UAIhBtI,IAAK,GAAIsI,IAAI,IAAK,GAAI,CAAC,QAAS,WAEhCiP,IAAK,GAAIjP,IAAI,IAAK,GAAI,CAAC,QAAS,eAEhCyd,IAAK,GAAIzd,IAAI,IAAK,GAAI,CAAC,QAAS,eAEhC0d,IAAK,GAAI1d,IAAI,IAAK,GAAI,CAAC,QAAS,YAEhC2d,IAAK,GAAI3d,IAAI,IAAK,GAAI,CAAC,QAAS,YAEhCrJ,IAAK,GAAIqJ,IAAI,MAAO,GAAI,CAAC,IAAK,MAE9BpJ,IAAK,GAAIoJ,IAAI,MAAO,GAAI,CAAC,IAAK,MAE9B4d,IAAK,GAAI5d,IAAI,KAAM,GAAI,CAAC,QAAS,aAEjC6d,MAAO,GAAI7d,IAAI,QAAS,GAAI,CAAC,IAAK,MAElC8d,MAAO,GAAI9d,IAAI,MAAO,GAAI,CAAC,IAAK,MAEhC+d,OAAQ,GAAI/d,IAAI,SAAU,CAAES,WAAY,GAAK,CAAC,IAAK,MAEnDud,IAAK,GAAIhe,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,IAAK,MAE7Cwd,OAAQ,GAAIje,IAAI,IAAK,GAAI,CAAC,IAAK,MAE/Bke,MAAO,GAAIle,IAAI,IAAK,GAAI,CAAC,IAAK,MAE9Bme,OAAQ,GAAIne,IAAI,IAAK,GAAI,CAAC,IAAK,MAE/B8C,IAAK,GAAI9C,IAAI,MAAO,GAAI,CAAC,QAAS,SAIlCyC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7Boe,KAAM,GAAIpe,IAAI,OAAQ,GAAI,CAAC,UAE3Bqe,GAAI,GAAIre,IAAI,KAAM,GAAI,CAAC,UAEvBse,KAAM,GAAIte,IAAI,OAAQ,GAAI,CAAC,UAE3Bue,MAAO,GAAIve,IAAI,QAAS,GAAI,CAAC,UAE7Bwe,KAAM,GAAIxe,IAAI,OAAQ,GAAI,CAAC,UAE3Bye,GAAI,GAAIze,IAAI,KAAM,GAAI,CAAC,UAEvB0e,KAAM,GAAI1e,IAAI,OAAQ,GAAI,CAAC,UAE3B5J,MAAO,GAAI4J,IAAI,QAAS,GAAI,CAAC,UAE7B7J,IAAK,GAAI6J,IAAI,MAAO,GAAI,CAAC,UAEzB2e,IAAK,GAAI3e,IAAI,MAAO,GAAI,CAAC,UAEzB4e,KAAM,GAAI5e,IAAI,OAAQ,GAAI,CAAC,UAE3B6e,IAAK,GAAI7e,IAAI,MAAO,GAAI,CAAC,UAEzB8e,IAAK,GAAI9e,IAAI,MAAO,GAAI,CAAC,UAEzB+e,IAAK,GAAI/e,IAAI,MAAO,GAAI,CAAC,UAEzBgf,IAAK,GAAIhf,IAAI,MAAO,GAAI,CAAC,UAEzBif,KAAM,GAAIjf,IAAI,OAAQ,GAAI,CAAC,UAE3Bkf,KAAM,GAAIlf,IAAI,OAAQ,GAAI,CAAC,UAE3Bmf,KAAM,GAAInf,IAAI,OAAQ,GAAI,CAAC,UAE3Bof,KAAM,GAAIpf,IAAI,OAAQ,GAAI,CAAC,UAE3Bqf,KAAM,GAAIrf,IAAI,OAAQ,GAAI,CAAC,UAE3Bsf,UAAW,GAAItf,IAAI,IAAK,GAAI,CAAC,UAE7Buf,QAAS,GAAIvf,IAAI,IAAK,GAAI,CAAC,UAI3BtJ,MAAO,GAAIsJ,IAAI,QAAS,GAAI,CAAC,QAAS,MAAO,QAE7Cwf,eAAgB,GAAIxf,IAAI,iBAAkB,GAAI,CAAC,OAAQ,QAAS,UAEhEyf,KAAM,GAAIzf,IAAI,OAAQ,GAAI,CAAC,QAAS,QAAS,QAI7C8I,IAAK,GAAI9I,IAAI,MAAO,GAAI,GAAI,CAAC,MAAO,MAAO,QAAS,eAIpD0f,WAAY,GAAI1f,IAAI,aAAc,GAAI,CAAC,SAAU,CAAC,OAAQ,cAE1D2f,OAAQ,GAAI3f,IAAI,SAAU,GAAI,CAAC,SAAU,CAAC,SAAU,SAAU,YAAa,YAAa,cAAe,sBAEvG4f,UAAW,GAAI5f,IAAI,YAAa,GAAI,CAAC,SAAU,CAAC,YAAa,YAAa,sBAE1E6f,YAAa,GAAI7f,IAAI,cAAe,GAAI,CAAC,UAIzC+C,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3B8f,OAAQ,GAAI9f,IAAI,KAAM,GAAI,CAAC,SAAU,CAAC,YAEtCkD,QAAS,GAAIlD,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,YAE9CmD,WAAY,GAAInD,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,YAElDqK,OAAQ,GAAIrK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCsK,cAAe,GAAItK,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CuK,UAAW,GAAIvK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtCwK,iBAAkB,GAAIxK,IAAI,KAAM,GAAI,CAAC,QAAS,SAE9C+f,UAAW,GAAI/f,IAAI,KAAM,GAAI,CAAC,QAAS,MAAO,OAAQ,CAAC,eAAgB,iBAEvEjK,QAAS,GAAIiK,IAAI,KAAM,GAAI,CAAC,SAAU,CAAC,YAEvCggB,UAAW,GAAIhgB,IAAI,KAAM,GAAI,CAAC,SAAU,CAAC,YAEzCigB,WAAY,GAAIjgB,IAAI,KAAM,GAAI,CAAC,UAE/BkgB,WAAY,GAAIlgB,IAAI,KAAM,GAAI,CAAC,UAE/BmgB,YAAa,GAAIngB,IAAI,KAAM,GAAI,CAAC,QAAS,MAAO,CAAC,YAEjDogB,WAAY,GAAIpgB,IAAI,MAAO,GAAI,CAAC,QAAS,SAAU,SAInDoD,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpCwnB,GAAgB9c,IAAI,QAAS+c,GAAUwB,OACvCzB,GAAgB9c,IAAI,OAAQ+c,GAAUyB,MACtC1B,GAAgB9c,IAAI,KAAM+c,GAAU0B,IACpC3B,GAAgB9c,IAAI,OAAQ+c,GAAU2B,MACtC5B,GAAgB9c,IAAI,QAAS+c,GAAU3mB,OACvC0mB,GAAgB9c,IAAI,MAAO+c,GAAU5mB,KACrC2mB,GAAgB9c,IAAI,SAAU+c,GAAU4B,KACxC7B,GAAgB9c,IAAI,OAAQ+c,GAAU6B,MACtC9B,GAAgB9c,IAAI,SAAU+c,GAAU+C,QACxChD,GAAgB9c,IAAI,UAAW+c,GAAUhnB,SACzC+mB,GAAgB9c,IAAI,YAAa+c,GAAUiD,WAC3ClD,GAAgB9c,IAAI,aAAc+c,GAAUkD,YAC5CnD,GAAgB9c,IAAI,aAAc+c,GAAUmD,YAC5CpD,GAAgB9c,IAAI,SAAU+c,GAAU4C,QChNjC,IAAMU,GAAiB,IAAIhe,EAAWnB,EAAGO,KAAOP,EAAGiB,WAE7Cme,GAAgB,IAAI/d,EAAUrB,EAAGO,KAAOP,EAAGiB,WAElD,GAAMke,GAECE,GACb,CAIErsB,OAAQ,GAAI8L,IAAI,UAEhBgT,WAAY,GAAIhT,IAAI,aAAc,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAE7DiT,UAAW,GAAIjT,IAAI,YAAa,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAI3DyC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7B4c,MAAO,GAAI5c,IAAI,MAAO,GAAI,CAAC,QAAS,QAAS,CAAC,YAAa,CAAC,OAAQ,QAAS,OAAQ,SAAU,CAAC,QAAS,CAAC,SAE1GvM,IAAK,GAAIuM,IAAI,MAAO,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAExDA,IAAK,GAAIA,IAAI,MAAO,GAAI,CAAC,OAAQ,QAAS,SAAU,GAAI,GAAI,GAAI,CAAC,SAEjEtI,IAAK,GAAIsI,IAAI,IAAK,CAAEQ,QAAS,CAAC,SAAW,CAAC,OAAQ,QAAS,GAAI,GAAI,GAAI,CAAC,SAExEggB,SAAU,GAAIxgB,IAAI,KAAM,CAAEQ,QAAS,CAAC,SAAW,CAAC,OAAQ,QAAS,GAAI,GAAI,GAAI,CAAC,SAE9EigB,QAAS,GAAIzgB,IAAI,KAAM,CAAEQ,QAAS,CAAC,SAAW,CAAC,OAAQ,QAAS,GAAI,GAAI,GAAI,CAAC,SAE7EkgB,OAAQ,GAAI1gB,IAAI,KAAM,CAAEQ,QAAS,CAAC,SAAW,CAAC,OAAQ,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAErF7I,OAAQ,GAAIqI,IAAI,IAAK,CAAEQ,QAAS,CAAC,QAASC,WAAY,GAAM,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEtIkgB,YAAa,GAAI3gB,IAAI,KAAM,CAAEQ,QAAS,CAAC,SAAW,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEzEogB,WAAY,GAAI5gB,IAAI,KAAM,CAAEQ,QAAS,CAAC,SAAW,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAExEqgB,SAAU,GAAI7gB,IAAI,KAAM,CAAEQ,QAAS,CAAC,SAAW,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE/EsgB,YAAa,GAAI9gB,IAAI,KAAM,CAAEQ,QAAS,CAAC,SAAW,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,CAAC,SAEhH8S,MAAO,GAAItT,IAAI,QAAS,CAAEQ,QAAS,CAAC,SAAW,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEtEugB,SAAU,GAAI/gB,IAAI,WAAY,CAAES,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAE9GkL,KAAM,GAAI3L,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,CAAC,QAAS,WAAY,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,CAAC,SAEzHmF,KAAM,GAAI5F,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,QAAS,CAAC,YAAa,CAAC,QAAS,CAAC,YAAa,CAAC,SAE1FugB,QAAS,GAAIhhB,IAAI,UAAW,CAAES,WAAY,IAAO,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAExEwgB,QAAS,GAAIjhB,IAAI,UAAW,CAAEQ,QAAS,CAAC,QAASC,WAAY,GAAM,CAAC,OAAQ,UAAW,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEhJygB,QAAS,GAAIlhB,IAAI,UAAW,CAAES,WAAY,GAAK,CAAC,OAAQ,UAAW,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAE5HqG,KAAM,GAAI9G,IAAI,OAAQ,CAAEQ,QAAS,CAAC,QAASC,WAAY,GAAO,CAAC,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEhI0gB,QAAS,GAAInhB,IAAI,UAAW,CAAEQ,QAAS,CAAC,QAASC,WAAY,GAAK,CAAC,QAAS,CAAC,SAAU,GAAI,GAAI,CAAC,SAEhG2gB,OAAQ,GAAIphB,IAAI,SAAU,CAAES,WAAY,GAAK,CAAC,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAE/G4gB,WAAY,GAAIrhB,IAAI,QAAS,CAAES,WAAY,GAAK,CAAC,OAAQ,WAAY,CAAC,QAAS,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAExH6gB,KAAM,GAAIthB,IAAI,OAAQ,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE1DuhB,KAAM,GAAIvhB,IAAI,OAAQ,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE1DwhB,KAAM,GAAIxhB,IAAI,OAAQ,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAE1DyL,OAAQ,GAAIzL,IAAI,SAAU,GAAI,CAAC,OAAQ,UAAW,GAAI,GAAI,GAAI,CAAC,SAE/D0O,QAAS,GAAI1O,IAAI,UAAW,GAAI,CAAC,OAAQ,WAAY,GAAI,GAAI,GAAI,CAAC,SAElEkP,QAAS,GAAIlP,IAAI,UAAW,CAAES,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,CAAC,SAAU,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAEhI0O,YAAa,GAAInP,IAAI,cAAe,CAAES,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,CAAC,SAAU,CAAC,OAAQ,QAAS,QAAS,CAAC,WAAY,CAAC,SAExIzI,UAAW,GAAIgI,IAAI,YAAa,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,CAAC,UAAW,SAAU,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAExHghB,KAAM,GAAIzhB,IAAI,OAAQ,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEjDxG,MAAO,GAAIwG,IAAI,QAAS,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAEnD9D,MAAO,GAAI8D,IAAI,QAAS,GAAI,CAAC,SAE7B0hB,WAAY,GAAI1hB,IAAI,aAAc,GAAI,CAAC,OAAQ,SAAU,GAAI,GAAI,GAAI,CAAC,SAEtE6I,OAAQ,GAAI7I,IAAI,SAAU,GAAI,CAAC,QAAS,GAAI,GAAI,GAAI,CAAC,SAIrD2hB,KAAM,GAAI3hB,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,QAAS,CAAC,YAAa,SAAU,SAAU,UAAW,CAAC,OAAQ,OAAQ,SAAU,CAAC,WAE5HmhB,KAAM,GAAI5hB,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,OAAQ,QAAS,CAAC,WAAY,CAAC,OAAQ,OAAQ,SAAU,CAAC,QAAS,CAAC,SAE9G5E,OAAQ,GAAImE,IAAI,SAAU,CAAES,WAAY,GAAK,CAAC,OAAQ,UAAW,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAAW,CAAC,SAE7GoC,IAAK,GAAI7C,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,OAAQ,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,OAAQ,CAAC,SAEjGtJ,IAAK,GAAI6I,IAAI,MAAO,CAAES,WAAY,GAAI,CAAC,OAAQ,aAAc,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,aAAc,CAAC,SAE5GsO,MAAO,GAAI/O,IAAI,QAAS,CAAES,WAAY,GAAI,CAAC,OAAQ,QAAS,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,QAAS,CAAC,SAEtG3H,OAAQ,GAAIkH,IAAI,SAAU,CAAES,WAAY,GAAI,CAAC,OAAQ,SAAU,WAAY,GAAI,CAAC,OAAQ,OAAQ,QAAS,WAAY,CAAC,UAAW,CAAC,WAElIqC,IAAK,GAAI9C,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAErGohB,MAAO,GAAI7hB,IAAI,QAAS,CAAES,WAAY,GAAK,CAAC,OAAQ,MAAO,CAAC,YAAa,CAAC,OAAQ,OAAQ,SAAU,CAAC,KAAM,YAAa,CAAC,OAAQ,KAAM,aAEvIqhB,UAAW,GAAI9hB,IAAI,YAAa,CAAES,WAAY,GAAK,CAAC,OAAQ,UAAW,CAAC,YAAa,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,YAAa,CAAC,OAAQ,SAAU,aAE3J5J,MAAO,GAAImJ,IAAI,QAAS,CAAES,WAAY,GAAK,CAAC,OAAQ,UAAW,CAAC,YAAa,CAAC,OAAQ,OAAQ,SAAU,CAAC,SAAU,YAAa,CAAC,OAAQ,SAAU,aAInJshB,UAAW,GAAI/hB,IAAI,YAAa,CAAES,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAEpIuhB,SAAU,GAAIhiB,IAAI,WAAY,CAAES,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAElIwhB,UAAW,GAAIjiB,IAAI,YAAa,CAAES,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAEpIyhB,SAAU,GAAIliB,IAAI,WAAY,CAAES,WAAY,GAAK,CAAC,IAAK,IAAK,KAAM,QAAS,GAAI,CAAC,MAAO,MAAO,QAAS,SAAU,CAAC,KAAM,QAAS,CAAC,SAElI0hB,UAAW,GAAIniB,IAAI,YAAa,CAAES,WAAY,GAAK,CAAC,IAAK,IAAK,QAAS,GAAI,CAAC,QAAS,SAAU,CAAC,QAAS,CAAC,SAI1G9J,IAAK,GAAIqJ,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1F7J,IAAK,GAAIoJ,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1F2hB,IAAK,GAAIpiB,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1F4hB,IAAK,GAAIriB,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1F6hB,IAAK,GAAItiB,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE1F8hB,SAAU,GAAIviB,IAAI,WAAY,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAEpG+hB,OAAQ,GAAIxiB,IAAI,SAAU,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAEhGgiB,OAAQ,GAAIziB,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE9FiiB,MAAO,GAAI1iB,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAE5FkiB,OAAQ,GAAI3iB,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,OAAQ,SAAU,GAAI,CAAC,OAAQ,OAAQ,SAAU,CAAC,UAI9FsC,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3B3J,QAAS,GAAI2J,IAAI,KAAM,GAAI,CAAC,SAE5B4Q,WAAY,GAAI5Q,IAAI,KAAM,GAAI,CAAC,SAE/BkD,QAAS,GAAIlD,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAEtG0C,WAAY,GAAInD,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,OAAQ,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAE1G4J,OAAQ,GAAIrK,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAEtG6J,cAAe,GAAItK,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAE9G8J,UAAW,GAAIvK,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAEzG+J,iBAAkB,GAAIxK,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,OAAQ,WAAY,GAAI,CAAC,OAAQ,QAAS,QAAS,CAAC,YAIjH2C,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpCgrB,GAActgB,IAAI,OAAQugB,GAAQ3a,MAClC0a,GAActgB,IAAI,WAAYugB,GAAQS,SACtCV,GAActgB,IAAI,WAAYugB,GAAQY,SACtCb,GAActgB,IAAI,QAASugB,GAAQ/mB,OACnC8mB,GAActgB,IAAI,OAAQugB,GAAQkB,MAClCnB,GAActgB,IAAI,SAAUugB,GAAQ1X,QACpCyX,GAActgB,IAAI,UAAWugB,GAAQlqB,SACrCiqB,GAActgB,IAAI,aAAcugB,GAAQ3P,Y,ssCClLxC,4B,+CAifA,OAjf8B,QAad,EAAA3J,OAAd,SAAqBC,EAAarH,GAEhC,IAAMsE,EAAOtE,EAAMb,QAAQkI,EA5BZ,IA6BT/K,EAAU+K,EA5BE,IA4BqB,GAEvC,OAAO,IAAI0b,EAAS,IAAEze,KAAI,GAAKhI,KAGnB,EAAAiL,OAAd,SAAqB3J,GAEnB,IAAMtB,EAAO,MAAasB,EAAKtB,SACzBgI,EAAOhI,EAAQgI,KAGrB,cAFOhI,EAAQgI,KAER9N,EAAQ8F,GACX,CAAC7B,KAAKwF,GAAIqE,EAAKiD,UACf,CAAC9M,KAAKwF,GAAIqE,EAAKiD,SAAUjL,IAKjB,EAAAkL,SAAd,SAAuBH,EAAWI,GAEhC,IAAKvS,EAAQmS,GAEX,OAAO,KAKT,IAFA,IAAI/C,EAAOmD,EAAUD,SAASH,EAAK,IAE1BtU,EAAI,EAAGA,EAAIsU,EAAK5Q,OAAQ1D,IAE/BuR,EAAOmD,EAAUM,MAAMzD,EAAM+C,EAAKtU,IAGpC,OAAO,IAAIgwB,EAAS,CAClBze,KAAI,EACJxN,IAAKuQ,EAAK5Q,OACVM,IAAKsQ,EAAK5Q,UAMA,EAAAkR,SAAd,WAKER,EAAUV,QAAQ,CAChBS,SAJe,EAKfZ,OAAQ,SAACE,EAAM8P,GACb,GAAIphB,EAAQsR,GACV,OAAOA,EAAKlP,IAAIgf,IAGpB/P,SAAU,SAACC,EAAM6P,GACf,GAAInhB,EAAQsR,GACV,OAAOA,EAAKlP,IAAI+e,MAKtBlP,EAAUzB,WAAW,CACnBwB,SAlBe,EAmBftJ,KAlBwB,SAmBxBsH,QAAS,SAACnP,EAAGC,EAAGkP,GACd,IAAM8d,EAAK9tB,EAAQa,GACbktB,EAAK/tB,EAAQc,GAEnB,GAAIgtB,IAAOC,EAAI,OAAQD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE/C,GAAID,EAAI,CACN,IAAIE,EAAKntB,EAAEU,OAAST,EAAES,OAEtB,GAAW,IAAPysB,EAAU,CAIZ,IAHA,IAAI1d,EAAO,EACPC,EAAO,EAEF1S,EAAI,EAAGA,EAAIgD,EAAEU,OAAQ1D,IAAK,CACjC,IAAMK,EAAI8R,EAAQnP,EAAEhD,GAAIiD,EAAEjD,IAEtBK,EAAI,GAAGoS,IACPpS,EAAI,GAAGqS,IAGbyd,EAAK/b,EAAU5B,WAAWC,EAAMC,GAGlC,OAAOyd,MAKb/b,EAAUrB,UAAU,CAClBoB,SAjDe,EAkDftJ,KAjDwB,SAkDxBgI,OAAQ,SAAC7P,EAAGC,EAAG4P,GACb,IAAMud,EAAKjuB,EAAQa,GAGnB,GAAIotB,IAFOjuB,EAAQc,GAEJ,OAAO,EAEtB,GAAImtB,EACJ,CACE,GAAIptB,EAAEU,SAAWT,EAAES,OAEjB,OAAO,EAGT,IAAK,IAAI1D,EAAI,EAAGA,EAAIgD,EAAEU,OAAQ1D,IAE5B,IAAK6S,EAAO7P,EAAEhD,GAAIiD,EAAEjD,IAElB,OAAO,EAIX,OAAO,MAKboU,EAAUf,UAAU,CAClBc,SA9Ee,EA+EfnB,KAAM,SAAC5P,EAAG4P,EAAMwQ,G,QACd,GAAIrhB,EAAQiB,GAAI,CACd,IAAMitB,EAAkB,GAExB7M,EAAcpgB,EAAGitB,G,IAEjB,IAAmB,SAAAjtB,GAAC,8BAAE,CAAjB,IAAMmO,EAAI,QACb8e,EAASpqB,KAAK+M,EAAKzB,K,iGAGrB,OAAO8e,MAKbjc,EAAUN,YAAmB,CAC3BK,SA/Fe,EAgGfhE,QAAS,SAAClP,GAAU,OAAAkB,EAAQlB,IAC5BJ,IAAK,SAACI,EAAOmH,GAAS,OAAAnH,EAAMmH,IAC5BgF,IAAK,SAACnM,EAAOmH,EAAMyL,GAAc,OAAAO,EAAUzC,SAAS1Q,EAAOmH,EAAMyL,OAIvD,EAAAyc,QAAd,SAAsBC,GAIpB,OAAO,IAAIP,EAAS,CAAEze,KAFT,GAAMuH,MAAMyX,MAKpB,YAAA1b,MAAP,WAEE,OAAOmb,EAAS9iB,IAGX,YAAA4H,cAAP,WAEE,OAAOkb,EAASjb,WAAWxQ,KAGtB,YAAAyQ,MAAP,SAAanK,GAEX,IAAMkU,EAAKrX,KAAK6B,QACVyV,EAAKnU,EAAKtB,QAEhBwV,EAAGxN,KAAO,GAAMyD,MAAM+J,EAAGxN,KAAMyN,EAAGzN,MAClCwN,EAAGhb,IAAMT,KAAKS,IAAIgb,EAAGhb,IAAKib,EAAGjb,KAC7Bgb,EAAG/a,IAAMV,KAAKU,IAAI+a,EAAG/a,IAAKgb,EAAGhb,MAGxB,YAAAiR,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAA7D,WAEE,GAAI,GAAmBqT,GAAG/J,GAC1B,CACE,GAAmB,WAAfA,EAAKjU,MAEP,OAAO,GAAMie,OAGf,GAAIld,EAASkT,EAAKjU,OAEhB,OAAOe,EAAS0F,KAAK6B,QAAQxF,MAAQmR,EAAKjU,MAAQyG,KAAK6B,QAAQxF,IAC3D2D,KAAK6B,QAAQgI,KACb,GAAM/D,SAAS9F,KAAK6B,QAAQgI,MAIpC,IAAI6N,EAAWlK,EAAK9I,QAAQlB,EAAKU,GAEjC,GAAIwT,EACJ,CAGE,IAFAA,EAAWA,EAAS3V,yBAEI,GAEtB,OAAO,GAAM+D,SAAS9F,KAAK6B,QAAQgI,MAGrC,GAAI6N,aAAoB,GACxB,CACE,IAAMC,EAASjd,MAAMoC,KAAK4a,EAAS7V,QAAQ+V,UAAUD,UAErD,GAAID,EAAS7V,QAAQtI,iBAAiB,GAEpC,OAAIe,EAAS0F,KAAK6B,QAAQxF,OAASsb,EAAOmR,KAAK,SAACptB,GAAM,OAAAA,GAAK,EAAKmG,QAAQxF,MAE/D2D,KAAK6B,QAAQgI,KAGf,GAAM/D,SAAS9F,KAAK6B,QAAQgI,MAGrC,GAAI6N,EAAS7V,QAAQtI,iBAAiB,IAEd,IAAlBoe,EAAO3b,QAA8B,WAAd2b,EAAO,GAEhC,OAAO,GAAMH,QAMrB,OAAO,MAGF,YAAA/J,YAAP,SAAmBjK,GAMjB,IAJM,mBAAEnH,EAAA,EAAAA,IAAKwN,EAAA,EAAAA,KACPkf,EAAczuB,EAAS+B,IAAQA,EAAM,GAAKA,GA/P3B,GA+PqDA,EAAM,EAC1E2sB,EAAsB,GAEnB1wB,EAAI,EAAGA,EAAIywB,EAAazwB,IAC/B0wB,EAASzqB,KAAK,CAAE1E,IAAKvB,EAAGiB,MAAOsQ,IAGjC,OAAO,GACFmf,EAAQ,CACX,CAAEnvB,IAAK,SAAUN,MAAO,GAAMie,QAC9B,CAAE3d,IAAK,GAAMge,MAAOte,MAAO,GAAMuM,SAAS+D,OAIvC,YAAA6D,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEhC,mBAAEgI,EAAA,EAAAA,KAAMxN,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IAEnB,IAAKuF,EAAQQ,SACVR,EAAQM,OACTD,aAAiB,KAChBA,EAAML,QAAQinB,KAAK,SAAA/vB,GAAK,OAAC8Q,EAAK5H,aAAalJ,EAAG8I,KAE/C,OAAO,EAGT,KAAMK,aAAiBomB,GAErB,OAAO,EAGT,IAAKze,EAAK5H,aAAaC,EAAML,QAAQgI,KAAMhI,GAEzC,OAAO,EAGT,GAAIA,EAAQtI,MACZ,CACE,IAAMue,EAAW5V,EAAML,QAAQxF,IAE/B,GAAIA,KAASyb,GAAYA,EAAWzb,GAElC,OAAO,EAGT,IAAM0b,EAAW7V,EAAML,QAAQvF,IAE/B,GAAIA,KAASyb,GAAYA,EAAWzb,GAElC,OAAO,EAIX,OAAO,GAGF,YAAAuI,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAAM,EAASI,KAAK4nB,EAASW,UAAW,EAAKpnB,QAAQgI,KAAM,SAAC3I,GAAgB,SAAKW,QAAQgI,KAAO3I,OAIvF,YAAAoC,gBAAP,SAAuB5C,GAErB,OAAOA,IAAS4nB,EAASW,UACrBjpB,KAAK6B,QAAQgI,KACb,MAGC,YAAA+D,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQgI,KAAK+D,UAAU5N,OAGvB,YAAA6N,4BAAP,WAEU,IAAAhE,EAAA,aAAAA,KAERA,EAAKgE,8BAEL7N,KAAK6B,QAAU,CAAEgI,KAAI,IAGhB,YAAAiE,oBAAP,WAEE,OAAO,GAAMxH,GAAG2f,GAAQrsB,OAAQ,KAG3B,YAAAmU,sBAAP,WAEE,OAAO,GAAM3F,IACX,GAAM9B,GAAG2f,GAAQxd,QAAS,CACxBlP,MAAO,GAAMJ,IAAI,WAEnB,GAAMoP,IAAI,GAAMjC,GAAG2f,GAAQQ,SAAU,CACnC/kB,KAAM,GAAMvI,IAAI,SAChB0Q,KAAM,GAAMuG,OACZxH,QAAS,GAAML,IAAIvI,KAAK6B,QAAQgI,KAAKkE,0BACpC,CACDxU,MAAO,SACPqL,KAAM,aAKL,YAAAoJ,qBAAP,WAEE,OAAO,GAAM1H,GAAG2f,GAAQzd,IAAK,CAC3BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,QAChBsR,QAASzK,KAAK6B,QAAQgI,KAAKmE,0BAIxB,YAAApL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,OAAO,GAAMwD,GAAG2f,GAAQppB,IAAK,CAC3B6E,KAAM,GAAMvI,IAAI,SAChBmF,UAAWuE,GACV,CACDgH,KAAM,WAIH,YAAApB,QAAP,SAAelP,G,QAEb,IAAKmB,MAAMD,QAAQlB,GAEjB,OAAO,EAGH,mBAAEsQ,EAAA,EAAAA,KAAMxN,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IAEnB,GAAIhC,EAAS+B,IAAQ9C,EAAMyC,OAASK,EAElC,OAAO,EAGT,GAAI/B,EAASgC,IAAQ/C,EAAMyC,OAASM,EAElC,OAAO,E,IAGT,IAAkB,SAAA/C,GAAK,8BACvB,CADK,IAAM+nB,EAAG,QAEZ,IAAKzX,EAAKpB,QAAQ6Y,GAEhB,OAAO,G,iGAIX,OAAO,GAGF,YAAAlT,UAAP,SAAiB7U,GAEf,GAAIkB,EAAQlB,GAIV,IAFA,IAAMsQ,EAAO7J,KAAK6B,QAAQgI,KAEjBvR,EAAI,EAAGA,EAAIiB,EAAMyC,OAAQ1D,IAEhCiB,EAAMjB,GAAKuR,EAAKuE,UAAU7U,EAAMjB,IAIpC,OAAOiB,GAGF,YAAA8U,YAAP,WAIE,OAAO,IAAIia,EAAS,CAClBze,KAHM,aAAAA,KAGKwE,iBAIR,YAAAC,MAAP,WAEQ,mBAAEzE,EAAA,EAAAA,KAAMxN,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IAEnB,OAAO,IAAIgsB,EAAS,CAClBze,KAAMA,EAAKyE,QACXjS,IAAG,EACHC,IAAG,KAIA,YAAAwQ,OAAP,WAEE,OAAOwb,EAASxb,OAAO9M,OAGlB,YAAApG,OAAP,WAEE,MAAO,IAGF,YAAA2U,OAAP,SAAcC,GAUZ,IARM,mBAAEnS,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IACP4sB,EAAYnqB,EAAS1C,EAneZ,GAoeT8sB,EAAYpqB,EAASzC,EAneZ,GAseTvC,EAAIyU,EAFI5S,KAAKS,IAAI6sB,EAAWC,GACtBvtB,KAAKU,IAAI4sB,EAAWC,GACL,GAAG,GACxBlrB,EAAa,GAEV3F,EAAI,EAAGA,EAAIyB,EAAGzB,IAErB2F,EAAIM,KAAKyB,KAAK6B,QAAQgI,KAAK0E,OAAOC,IAGpC,OAAOvQ,GAGF,YAAA6N,SAAP,SAAgBC,GAAhB,WAEE,OAAOA,EAAOA,EAAKlP,IAAI,SAACwS,GAAW,SAAKxN,QAAQgI,KAAKiC,SAASuD,KAAM,MAG/D,YAAAxD,OAAP,SAActS,GAAd,WAEE,OAAOA,EAAQA,EAAMsD,IAAI,SAACwS,GAAW,SAAKxN,QAAQgI,KAAKgC,OAAOwD,KAAM,MA3exD,EAAA4Z,UAAY,OAEZ,EAAAzjB,GAAKoB,EAAGO,KAER,EAAAkG,WAAa0Y,GAEb,EAAAtX,UAAYuX,GAEZ,EAAA/Y,SAAW,IAAIqb,EAAS,CAAEze,KAAM,GAAQoD,WAqBxC,EAAAyB,iBAA2B,EAuB3B,EAAAC,YAAsB,EA0btC,EAjfA,CAA8B,G,osBCV9B,4B,+CAuWA,OAvW+B,QAWf,EAAAhC,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAI6jB,EAFMxc,EAfE,GAemB/P,IAAI,SAACjE,GAAW,OAAA2M,EAAMb,QAAQ9L,OAKxD,EAAAkU,OAAd,SAAqB3J,GAEnB,IAAMkmB,EAAWlmB,EAAKtB,QAAQhF,IAAI,SAAArD,GAAK,OAAAA,EAAEsT,WAEzC,MAAO,CAAC9M,KAAKwF,GAAI6jB,IAKL,EAAAtc,SAAd,SAAuBH,EAAWI,GAEhC,OAAO,MAKK,EAAAE,SAAd,aAKc,EAAA0b,QAAd,SAAsBrjB,GAEpB,OAAO,IAAI6jB,EAAU7jB,EAAM1I,IAAI,SAACrD,GAAM,UAAM4X,MAAM5X,OAG7C,YAAA2T,MAAP,WAEE,OAAOic,EAAU5jB,IAGZ,YAAA4H,cAAP,WAEE,OAAOgc,EAAU/b,WAAWxQ,KAGvB,YAAAyQ,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAA7D,WAEE,GAAI,GAAmBqT,GAAG/J,GAC1B,CACE,GAAmB,WAAfA,EAAKjU,MAEP,OAAO,GAAMie,OAGf,GAAIld,EAASkT,EAAKjU,OAEhB,OAAOyG,KAAK6B,QAAQ2L,EAAKjU,OAI7B,IAAIme,EAAWlK,EAAK9I,QAAQlB,EAAKU,GAEjC,GAAIwT,EACJ,CAGE,IAFAA,EAAWA,EAAS3V,yBAEI,GAEtB,OAAO,GAAMma,UAAUlc,KAAK6B,QAAS,GAASoL,UAGhD,GAAIyK,aAAoB,GACxB,CACE,GAAIA,EAAS7V,QAAQtI,iBAAiB,GACtC,CACE,IACMgM,GADAoS,EAASjd,MAAMoC,KAAK4a,EAAS7V,QAAQ+V,UAAUD,WAChC9a,IAAI,SAACvE,GAAc,SAAKuJ,QAAQvJ,KAAIiJ,OAAO,SAAA/H,GAAK,QAAEA,IAEvE,OAAO,GAAM0iB,UAAU3W,EAAO,GAAS0H,UAKvC,IAAM0K,EAFR,GAAID,EAAS7V,QAAQtI,iBAAiB,GAIpC,GAAsB,KAFhBoe,EAASjd,MAAMoC,KAAK4a,EAAS7V,QAAQ+V,UAAUD,WAE1C3b,QAA8B,WAAd2b,EAAO,GAEhC,OAAO,GAAMH,UAOhB,YAAA/J,YAAP,SAAmBjK,GAEjB,OAAO,GACFxD,KAAK6B,QAAQhF,IAAI,SAACtD,EAAOM,GAAQ,OAAGA,IAAG,EAAEN,MAAK,KAAI,CACrD,CAAEM,IAAK,SAAUN,MAAO,GAAMie,QAC9B,CACE3d,IAAK,IAAI,GAAS,CAChBA,IAAK,GAAWoT,SAChB1T,MAAO,GAAW0T,SAClB2K,UAAW,IAAI9c,IACbkF,KAAK6B,QAAQhF,IAAI,SAAC+B,EAAM/E,GAAQ,OAACA,EAAKA,QAG1CN,MAAO,GAAM2iB,UAAUlc,KAAK6B,QAAS,GAASoL,WAEhD,CACEpT,IAAK,GAAMge,MACXte,MAAO,GAAMuM,SACX,GAAMoW,UAAUlc,KAAK6B,QAAS,GAASoL,eAMxC,YAAAS,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGF,YAAA8N,oBAAP,WAEE,OAAO,GAAMwb,MAAK,MAAX,GAAK,GACPtpB,KAAK6B,QAAQhF,IAAI,SAACrD,GAAM,OAAAA,EAAEsU,2BAI1B,YAAAC,sBAAP,WAEE,OAAO,GACJzH,GAAG+b,GAAS5Z,QAAS,CACpBlP,MAAO,GAAMJ,IAAI,WAElBiP,IAAIpI,KAAK6B,QAAQhF,IAAI,SAACrD,EAAGlB,GAAM,UAC7BN,OAAO,CAAEuB,MAAO,GAAMJ,IAAI,QAASb,KACnCgZ,IAAI9X,EAAEuU,6BAKN,YAAAC,qBAAP,WAEE,OAAO,GAAM3F,GAAE,MAAR,GAAK,IACV,GAAM/B,GAAGmc,GAAUja,IAAK,CACtBjP,MAAO,GAAMJ,IAAI,QAAS,UAC1ByL,KAAM,GAAMzL,IAAI,OAAQ,aAEvB6G,KAAK6B,QAAQhF,IAAI,SAACrD,EAAGlB,GAAM,UAC3BN,OAAO,CACNuB,MAAO,GAAMJ,IAAI,QAASb,GAC1BsM,KAAM,GAAMzL,IAAI,OAAQb,KAEzBgZ,IAAI9X,EAAEwU,6BAKN,YAAApL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,IAAMyZ,EAAUjiB,EAASwC,GACnB0f,EAAQliB,EAASwI,GAEvB,OAAKyZ,GAAWC,EAEP,GAAMxkB,OAAO,CAAE8J,OAAQ,GAAM3I,IAAI,UACtC,GAAMmN,GAAG2f,GAAQG,OAAQ,CACvB1kB,KAAM,GAAMvI,IAAI,SAChB4Q,MAAOjH,EACP+G,KAAMhH,KAIH0Z,IAAYC,EAEZ,GAAM9L,KACX,GAAMpK,GAAG2f,GAAQM,SAAU,CACzB7kB,KAAM,GAAMvI,IAAI,SAChB4Q,MAAOjN,IAET,GAAM3D,IAAI,UAGL2D,IAASgG,GAAMyZ,EAEf,GAAM7L,KACX,GAAMpT,OAAO,QAASR,GACnBgG,GAAGD,EAAU,SAChB,GAAM1J,IAAI,UAIP0J,GAGC,YAAAN,iBAAV,SAA2BL,EAAaL,GAEtC,IAAKA,EAAQM,QACVN,EAAQQ,QACTH,aAAiB,KAChBlC,KAAK6B,QAAQinB,KAAK,SAAA/vB,GAAK,OAACA,EAAEkJ,aAAaC,EAAML,QAAQgI,KAAMhI,MAC5DvH,EAAS4H,EAAML,QAAQxF,MACvB6F,EAAML,QAAQxF,KAAO2D,KAAK6B,QAAQ7F,OAElC,OAAO,EAGT,KAAMkG,aAAiBknB,GAErB,OAAO,EAGT,IAAM9tB,EAAI0E,KAAK6B,QACTtG,EAAI2G,EAAML,QAEhB,GAAItG,EAAES,OAASV,EAAEU,QAAW6F,EAAQM,OAAS7G,EAAEU,SAAWT,EAAES,OAE1D,OAAO,EAGT,IAAK,IAAI1D,EAAI,EAAGA,EAAIgD,EAAEU,OAAQ1D,IAE5B,IAAKgD,EAAEhD,GAAG2J,aAAa1G,EAAEjD,GAAIuJ,GAE3B,OAAO,EAIX,OAAO,GAGF,YAAAgD,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAK6B,QAAQhF,IAAI,SAACsG,EAAM4G,GAAU,OAAAzJ,EAASI,KAAKqJ,EAAO5G,EAAM,SAACjC,GAAgB,SAAKW,QAAQmI,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKW,QAAQmI,OAAOD,EAAO,UAIxJ,YAAAzG,gBAAP,SAAuB5C,GAErB,OAAOV,KAAK6B,QAAQnB,IAAS,MAGxB,YAAAkN,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQwE,QAAQ,SAAA7M,GAAK,OAAAA,EAAEoU,UAAU,MAGjC,YAAAC,4BAAP,WAEE7N,KAAK6B,QAAQwE,QAAQ,SAAA7M,GAAK,OAAAA,EAAEqU,iCAGvB,YAAApF,QAAP,SAAelP,GAEb,IAAKkB,EAAQlB,GAEX,OAAO,EAKT,IAFA,IAAM8vB,EAAWrpB,KAAK6B,QAEbvJ,EAAI,EAAGA,EAAI+wB,EAASrtB,OAAQ1D,IAEnC,IAAK+wB,EAAS/wB,GAAGmQ,QAAQlP,EAAMjB,IAE7B,OAAO,EAIX,OAAO,GAGF,YAAA8V,UAAP,SAAiB7U,GAEf,IAAKkB,EAAQlB,GAEX,OAAOA,EAKT,IAFA,IAAM8vB,EAAWrpB,KAAK6B,QAEbvJ,EAAI,EAAGA,EAAI+wB,EAASrtB,OAAQ1D,IAEnCiB,EAAMjB,GAAK+wB,EAAS/wB,GAAG8V,UAAU7U,EAAMjB,IAGzC,OAAOiB,GAGF,YAAA8U,YAAP,WAEE,OAAO,IAAI+a,EAAU,KAGhB,YAAA9a,MAAP,WAEE,OAAO,IAAI8a,EAAUppB,KAAK6B,QAAQhF,IAAI,SAAAwS,GAAK,OAAAA,EAAEf,YAGxC,YAAAxB,OAAP,WAEE,OAAOsc,EAAUtc,OAAO9M,OAGnB,YAAApG,OAAP,WAEE,OAAOoG,KAAK6B,QAAQhF,IAAI,SAAAwS,GAAK,OAAAA,EAAEzV,YAG1B,YAAA2U,OAAP,SAAcC,GAEZ,OAAOxO,KAAK6B,QAAQhF,IAAI,SAAAwS,GAAK,OAAAA,EAAEd,OAAOC,MAGjC,YAAA1C,SAAP,SAAgBC,GAEd,OAAO/L,KAAK6B,QAAQhF,IAAI,SAACwS,EAAG/W,GAAM,OAAA+W,EAAEvD,SAASC,EAAKzT,OAG7C,YAAAuT,OAAP,SAActS,GAEZ,OAAOyG,KAAK6B,QAAQhF,IAAI,SAACwS,EAAG/W,GAAM,OAAA+W,EAAExD,OAAOtS,EAAMjB,OAjWrC,EAAAkN,GAAKoB,EAAGgB,MAER,EAAAyF,WAAa8U,GAEb,EAAA1T,UAAY2T,GAEZ,EAAAnV,SAAW,IAAImc,EAAU,IAgBzB,EAAA1a,kBAA4B,EAO5B,EAAAC,YAAsB,EAuUtC,EAvWA,CAA+B,G,4UCT/B,eAqBE,WAAmBQ,GAAnB,MAEE,cAAO,K,OACP,EAAKA,YAAcA,E,EAiEvB,OAzFqC,QAKrB,EAAAxC,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAI0a,EAFS3c,EATE,GASsB/P,IAAI,SAACjE,GAAW,OAAAiW,EAAME,cAAcnW,OAKpE,EAAAkU,OAAd,SAAqBU,GAEnB,IAAM2B,EAAc3B,EAAK2B,YAAYtS,IAAI,SAAAwS,GAAK,OAAAA,EAAEvC,WAEhD,MAAO,CAAC9M,KAAKwF,GAAI2J,IAWZ,YAAAhC,MAAP,WAEE,OAAOoc,EAAgB/jB,IAGlB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlE,KAAKmP,YAAY3Q,OAAO,SAAClC,EAAK+S,GAAM,OAAAzT,KAAKU,IAAIA,EAAK+S,EAAEL,cAAcxL,EAAKU,KAAW,IAGpF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAOyc,EAAgBzc,OAAO9M,OAGzB,YAAAsO,MAAP,WAEE,OAAO,IAAIib,EAAgBvpB,KAAKmP,YAAYtS,IAAI,SAACwS,GAAM,OAAAA,EAAEf,YAGpD,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,IAAI,GAAUlE,KAAKmP,YAAYtS,IAAI,SAACwS,GAAM,UAAMma,SAASna,EAAE3K,QAAQlB,EAAKU,QAG1E,YAAA5D,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAKmP,YAAY9I,QAAQ,SAACmH,EAAMzD,GAC9B,OAAAzJ,EAASI,KAAKqJ,EAAOyD,EAAM,SAACtM,GAAgB,SAAKiO,YAAYnF,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKiO,YAAYnF,OAAOD,EAAO,UAMhI,YAAAhG,sBAAP,SAA6BC,GAE3B,OAAO1J,EAAS0J,EAAM,KAAOA,EAAM,GAAKhE,KAAKmP,YAAYnT,OACrD,CAAC,EAAGgE,KAAKmP,YAAYnL,EAAM,KAC3B,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAKmP,YAAY9I,QAAQ,SAAAgJ,GAAK,OAAAA,EAAEzB,UAAU,MAGrC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDvE,KAAKmP,YAAY9I,QAAQ,SAAA/B,GAEvBA,EAAQH,SAASX,EAAKU,EAASK,MAlFrB,EAAAiB,GAAK,QAsFrB,EAzFA,CAAqC,G,4UCArC,eAqBE,WAAmB7G,GAAnB,MAEE,cAAO,K,OACP,EAAKA,MAAQA,E,EA6DjB,OArFsC,QAKtB,EAAAgO,OAAd,SAAqBC,EAAaiC,GAIhC,OAAO,IAAI4a,EAFG5rB,EAAU+O,EATR,GAS2B,SAAAyC,GAAK,OAAAR,EAAME,cAAcM,OAKxD,EAAAvC,OAAd,SAAqBU,GAEnB,IAAM7O,EAAQd,EAAU2P,EAAK7O,MAAO,SAAA0Q,GAAK,OAAAA,EAAEvC,WAE3C,MAAO,CAAC9M,KAAKwF,GAAI7G,IAWZ,YAAAwO,MAAP,WAEE,OAAOsc,EAAiBjkB,IAGnB,YAAAwJ,cAAP,SAAqBxL,EAAyBU,GAE5C,OAAOlG,EAAagC,KAAKrB,MAAO,SAAC0Q,EAAG1S,EAAGL,GAAQ,OAAAV,KAAKU,IAAIA,EAAK+S,EAAEL,cAAcxL,EAAKU,KAAW,IAGxF,YAAA+K,SAAP,WAEE,OAAO,MAGF,YAAAnC,OAAP,WAEE,OAAO2c,EAAiB3c,OAAO9M,OAG1B,YAAAsO,MAAP,WAEE,OAAO,IAAImb,EAAiB5rB,EAAUmC,KAAKrB,MAAO,SAACvE,GAAM,OAAAA,EAAEkU,YAGtD,YAAA5J,QAAP,SAAelB,EAAyBU,GAEtC,OAAO,IAAI,GAAW,CAAEvF,MAAOd,EAAUmC,KAAKrB,MAAO,SAAA0Q,GAAK,UAAMma,SAASna,EAAE3K,QAAQlB,EAAKU,SAGnF,YAAA5D,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAA9B,EAAW,EAAKS,MAAO,SAAC6O,EAAM5O,GAC5B,OAAA0B,EAASI,KAAK9B,EAAM4O,EAAM,SAACtM,GAAgB,SAAKvC,MAAMC,GAAQsC,GAAa,WAAM,cAAO,EAAKvC,MAAMC,UAKlG,YAAAmF,sBAAP,SAA6BC,GAE3B,OAAOA,EAAM,KAAMhE,KAAKrB,MACpB,CAAC,EAAGqB,KAAKrB,MAAMqF,EAAM,KACrB,MAGC,YAAA4J,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd5D,EAAW8B,KAAKrB,MAAO,SAAA0Q,GAAK,OAAAA,EAAEzB,UAAU,MAGnC,YAAAzJ,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtDrG,EAAW8B,KAAKrB,MAAO,SAAA0Q,GAAK,OAAAA,EAAElL,SAASX,EAAKU,EAASK,MA/EzC,EAAAiB,GAAK,MAkFrB,EArFA,CAAsC,G,wXCqBtC,4BAqPA,OAhPgB,EAAAoI,UAAd,SAA8CJ,EAASkc,GAOrD,YAPqD,IAAAA,OAAA,IAEjD1pB,KAAK2pB,eAAiBD,IAExBlc,EAAKI,YAGAJ,GAMK,EAAA4D,MAAd,SAAoB7X,GAApB,WAEE,OAAOkB,EAAQlB,GACXA,EAAMsD,IAAI,SAACH,GAAM,SAAK0U,MAAM1U,KAC5BnD,aAAiB,EACfA,EACA4B,EAAS5B,GACPsE,EAAuCtE,EAAO,SAACmD,GAAM,SAAK0U,MAAM1U,KAChE,IAAI,GAAmBnD,IAKnB,EAAAqwB,KAAd,SAAmBC,EAAiBC,EAAkBC,QAAA,IAAAA,OAAA,GAEpD,IAAMC,EAAUH,EAAU1c,QAAO,KAAK2c,EAAW3c,QAC3C7G,EAAKujB,EAAUzc,gBAAgB4c,GAErC,OAAO1jB,EACHtG,KAAKsG,GAAGA,EAAI,CAAE/M,MAAOyG,KAAK7G,IAAI,WAC9B4wB,EACE/pB,KAAK4N,UAAUkc,EAAWhc,uBAC1B,MAGM,EAAA1F,IAAd,W,IAAkB,sDAEhB,OAAOpI,KAAK4N,UAAU,IAAI,GAAciB,KAG5B,EAAA6B,KAAd,W,IAAmB,sDAEjB,OAAO1Q,KAAK4N,UAAU,IAAI,GAAgBiB,KAG9B,EAAAob,MAAd,SAAoB1wB,GAElB,OAAO,IAAI,GAAmBA,IAGlB,EAAAvB,OAAd,SAAqBkyB,EAA4CxZ,GAE/D,YAFmB,IAAAwZ,MAAA,SAA4C,IAAAxZ,MAAmB,GAAaL,UAExFrQ,KAAK4N,UAAU,IAAI,GAAiB,GAAI8C,GAAMO,KAAKiZ,KAG9C,EAAA/X,GAAd,SAAiBzB,EAAkBe,EAA+CC,EAAwBC,GAExG,YAFiC,IAAAF,MAAwB,GAAapB,UAE/DrQ,KAAK4N,UAAU,IAAI,GAAa6D,EAAWf,EAAMgB,EAAeC,KAG3D,EAAAkL,IAAd,SAAkB9C,EAAkBC,EAAoDC,EAAkDvJ,EAA0CgB,EAAwBC,GAE1M,YAFkC,IAAAqI,MAAA,IAA6B,GAAmB,SAAI,IAAAC,MAAA,IAA2B,GAAmB,SAAI,IAAAvJ,MAAmB,GAAaL,UAEjKrQ,KAAK4N,UAAU,IAAI,GAAcmM,EAAU/Z,KAAKoR,MAAM4I,GAAQha,KAAKoR,MAAM6I,GAAMvJ,EAAMgB,EAAeC,KAG/F,EAAAxY,IAAd,W,IAAkB,sDAEhB,OAAuB,IAAhB+G,EAAKlE,OACR,IAAI,GACJgE,KAAK4N,UAAU,IAAI,GAAe,IAAC,IAAI,IAAoB5N,KAAKoR,MAAMlR,OAG9D,EAAAyU,IAAd,SAAkBpb,G,IAAwB,wDAExC,OAAOyG,KAAK4N,UAAU,IAAI,GAAe,IAAC5N,KAAKoR,MAAM7X,IAAWyG,KAAKoR,MAAMlR,OAG/D,EAAAiqB,SAAd,SAAuBtxB,GAErB,OAAOmH,KAAK4N,UAAU,IAAI,GAAmB/U,KAGjC,EAAAmlB,GAAd,SAAiBvM,EAAuBf,EAA0C8M,GAEhF,YAFsC,IAAA9M,MAAmB,GAAaL,eAAU,IAAAmN,MAAwB,GAAanN,UAE9GrQ,KAAK4N,UAAU,IAAI,GAAa,CAAC,CAAC6D,EAAWf,IAAQ8M,KAGhD,EAAA4M,OAAd,SAAqBvxB,EAAculB,GAEjC,YAFiC,IAAAA,MAAA,IAE1Bpe,KAAK4N,UAAU,IAAI,GAAiB/U,EAAMmH,KAAKoR,MAAMgN,MAGhD,EAAAgB,OAAd,SAAqBH,EAAgBpmB,EAAculB,GAEjD,YAFiD,IAAAA,MAAA,IAE1Cpe,KAAK4N,UAAU,IAAI,GAAiBqR,EAAQpmB,EAAMmH,KAAKoR,MAAMgN,MAGxD,EAAA9B,KAAd,WAEE,OAAO,GAAajM,UAGR,EAAA9H,IAAd,SAAkBiF,GAEhB,OAAOxN,KAAK4N,UAAU,IAAI,GAAcJ,KAG5B,EAAAxT,OAAd,SAAqB2E,GAEnB,OAAOqB,KAAK4N,UAAU,IAAI,GAAiB5N,KAAKoR,MAAMzS,MAG1C,EAAA2H,GAAd,SACEA,EACAT,EACA2Z,GAEA,YAFA,IAAAA,MAAyCxmB,OAAOY,OAAO,OAEhDoG,KAAK4N,UAAU,IAAI,GAA6BtH,EAAGd,GAAIxF,KAAKoR,MAAMvL,GAAS2Z,KAGtE,EAAAnX,GAAd,W,IAAiB,sDAEf,OAAOrI,KAAK4N,UAAU,IAAI,GAAaiB,KAG3B,EAAA3O,KAAd,W,IAAmB,sDAEjB,OAAOF,KAAK4N,UAA2B,IAAjBiB,EAAM7S,QAAgB6S,EAAM,aAAc,GAC5DA,EAAM,GACN,IAAI,GAAe7O,KAAKoR,MAAMvC,MAGtB,EAAAwb,OAAd,SAAqB9wB,GAEnB,YAFmB,IAAAA,MAAyB,GAAa8W,UAElDrQ,KAAK4N,UAAU,IAAI6S,GAAiBzgB,KAAKoR,MAAM7X,MAG1C,EAAAmM,IAAd,W,IAAkB,sDAEhB,OAAO1F,KAAK4N,UAAU,IAAI,GAAc5N,KAAKE,KAAI,MAATF,KAAI,GAASE,IAAO,GAAamQ,YAG7D,EAAAia,OAAd,SAA2E/wB,EAAmB+M,GAE5F,OAAOtG,KAAK4N,UAAU,IAAI,GAAiBrU,EAAO+M,EAAGd,GAAI,GAAI,GAAa6K,YAG9D,EAAAsR,SAAd,SAAuBA,EAAkB9b,GAEvC,YAFuC,IAAAA,MAAA,IAEhC7F,KAAK4N,UAAU,IAAI,GAAmB+T,EAAU3hB,KAAKoR,MAAMvL,MAGtD,EAAAyjB,MAAd,W,IAAoB,sDAElB,OAAOtpB,KAAK4N,UAAU,IAAI,GAAgB5N,KAAKoR,MAAMiY,MAGzC,EAAA/rB,OAAd,W,IAAqB,sDAEnB,OAAO0C,KAAK4N,UAAU,IAAI,GAAiB5N,KAAKE,KAAI,MAATF,KAAI,GAASE,IAAO,GAAamQ,YAGhE,EAAA+B,MAAd,SAAoBX,EAAuBf,EAA0CgB,EAAwBC,GAE3G,YAFyC,IAAAjB,MAAmB,GAAaL,UAElErQ,KAAK4N,UAAU,IAAI,GAAgB6D,EAAWf,EAAMgB,EAAeC,KAG9D,EAAAvT,UAAd,WAEE,OAAO4B,KAAKiqB,WAAM7rB,IAGN,EAAAgS,KAAd,WAEE,OAAOpQ,KAAKiqB,MAAM,OAGN,EAAA/b,KAAd,WAEE,OAAOlO,KAAKiqB,OAAM,IAGN,EAAA9b,MAAd,WAEE,OAAOnO,KAAKiqB,OAAM,IAGN,EAAAM,KAAd,WAEE,OAAOvqB,KAAKiqB,MAAM,IAGN,EAAAO,IAAd,WAEE,OAAOxqB,KAAKiqB,MAAM,IAGN,EAAAQ,aAAd,WAEE,OAAOzqB,KAAKiqB,MAAM,IAGN,EAAAS,YAAd,WAEE,OAAO1qB,KAAKiqB,OAAO,IAGP,EAAAU,eAAd,WAEE,OAAO3qB,KAAKiqB,MAAM,IAGN,EAAAxZ,OAAd,WAEE,OAAOzQ,KAAKiqB,MAAM,KAGN,EAAAvX,QAAd,SAAsBA,GAEpB,OAAO,IAAI,GAAkBA,IAGjB,EAAAuM,OAAd,SAAqBpmB,GAEnB,OAAO,IAAI,GAAoBA,IAGnB,EAAA+xB,SAAd,SAAuB/xB,GAErB,OAAO,IAAI,GAAsBA,IAGrB,EAAA+T,KAAd,SAAmB/T,GAEjB,OAAO,IAAI,GAAkBA,IA/OjB,EAAA8wB,eAAyB,EAkPzC,EArPA,G,4UCXA,4B,+CAoRA,OApRgC,QAahB,EAAAhd,OAAd,SAAqBC,GAEnB,OAAO,IAAIie,EAAWje,EA1BJ,IA0B2B,KAGjC,EAAAE,OAAd,SAAqB3J,GAEnB,OAAOpH,EAAQoH,EAAKtB,SAChB7B,KAAKwF,GACL,CAACxF,KAAKwF,GAAIrC,EAAKtB,UAKP,EAAAkL,SAAd,SAAuBH,EAAWI,GAEhC,OAAK1S,EAASsS,GAKP,IAAIie,EAAW,CACpBxuB,IAAKuQ,EACLtQ,IAAKsQ,EACLke,MAAOlvB,KAAKC,IAAID,KAAKqoB,MAAMrX,GAAQA,IAASie,EAAWE,gBANhD,MAgBG,EAAA7d,SAAd,sBAKER,EAAUzB,WAAW,CACnBwB,SAJe,EAKftJ,KAJwB,SAKxBsH,QAAS,SAACnP,EAAGC,GACX,OAAOD,EAAIC,EACNA,EAAID,EAAK,EAAK0vB,iBACb,GACC,EACF1vB,EAAIC,EAAK,EAAKyvB,iBACb,EACA,KAIVte,EAAUrB,UAAU,CAClBoB,SAlBe,EAmBftJ,KAlBwB,SAmBxBgI,OAAQ,SAAC7P,EAAGC,GACV,OAAOK,KAAKC,IAAIP,EAAIC,GAAK,EAAK0vB,kBAIlCve,EAAUzB,WAAW,CACnBwB,SA1Be,EA2BftJ,KAAM,SACNsH,QAAS,SAACnP,EAAGC,GACX,OAAOD,EAAIC,KAIfmR,EAAUrB,UAAU,CAClBoB,SAlCe,EAmCftJ,KAAM,SACNgI,OAAQ,SAAC7P,EAAGC,GACV,OAAOD,IAAMC,MAKZ,YAAA4R,MAAP,WAEE,OAAO0d,EAAWrlB,IAGb,YAAA4H,cAAP,WAEE,OAAOyd,EAAWxd,WAAWxQ,KAGxB,YAAAyQ,MAAP,SAAanK,GAEX,IAAMkU,EAAKrX,KAAK6B,QACVyV,EAAKnU,EAAKtB,QAEhBwV,EAAG/a,IAAMV,KAAKU,IAAI+a,EAAG/a,IAAKgb,EAAGhb,KAC7B+a,EAAGhb,IAAMT,KAAKS,IAAIgb,EAAGhb,IAAKib,EAAGjb,KAC7Bgb,EAAGyT,MAAQzT,EAAGyT,OAASxT,EAAGwT,OAGrB,YAAAvd,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAO,MAGF,YAAAuJ,YAAP,SAAmBjK,GAEjB,MAAO,IAGF,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,KAAMK,aAAiB2oB,GAErB,OAAO,EAGT,GAAIhpB,EAAQtI,MACZ,CACE,IAAM8C,EAAM2D,KAAK6B,QAAQxF,IACnByb,EAAW5V,EAAML,QAAQxF,IAE/B,GAAI/B,EAAS+B,MAAU/B,EAASwd,IAAaA,EAAWzb,GAEtD,OAAO,EAGT,IAAMC,EAAM0D,KAAK6B,QAAQvF,IACnByb,EAAW7V,EAAML,QAAQvF,IAE/B,GAAIhC,EAASgC,MAAUhC,EAASyd,IAAaA,EAAWzb,GAEtD,OAAO,EAIX,OAAO,GAGF,YAAAuI,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAA+L,4BAAP,WAEE7N,KAAK6B,QAAU,IAGV,YAAAiM,oBAAP,WAEE,OAAO,GAAMxH,GAAGmc,GAAU7oB,OAAQ,KAG7B,YAAAmU,sBAAP,WAEE,OAAO,GAAMzH,GAAGmc,GAAUha,QAAS,CACjClP,MAAO,GAAMJ,IAAI,YAId,YAAA6U,qBAAP,WAEE,OAAO,GAAM1H,GAAGmc,GAAUja,IAAK,CAC7BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAsP,QAAP,SAAelP,GAEb,IAAKe,EAASf,GAEZ,OAAO,EAGH,mBAAE8C,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IAAKwuB,EAAA,EAAAA,MAElB,QAAIxwB,EAAS+B,IAAQ9C,EAAQ8C,OAKzB/B,EAASgC,IAAQ/C,EAAQ+C,MAKzBwuB,IAAUrvB,EAAQlC,MAQjB,YAAA6U,UAAP,SAAiB7U,GAEf,OAAOA,GAGF,YAAA8U,YAAP,WAEE,OAAO,IAAIwc,EAAW,KAGjB,YAAAvc,MAAP,WAEE,OAAO,IAAIuc,EAAWne,EAAUpB,KAAKtL,KAAK6B,WAGrC,YAAAiL,OAAP,WAEE,OAAO+d,EAAW/d,OAAO9M,OAGpB,YAAApG,OAAP,WAEE,OAAO,GAGF,YAAA2U,OAAP,SAAcC,GAEN,mBAAEnS,EAAA,EAAAA,IAAKC,EAAA,EAAAA,IAAKwuB,EAAA,EAAAA,MAIlB,OAAOtc,EAHWzP,EAAS1C,EA9QZ,GA+QG0C,EAASzC,EA9QZ,IAgRkBwuB,IAG5B,YAAAhf,SAAP,SAAgBC,GAEd,OAAOA,GAGF,YAAAF,OAAP,SAActS,GAEZ,OAAOA,GA9QK,EAAAwxB,cAAgB,KAEhB,EAAAvlB,GAAKoB,EAAGW,OAER,EAAA8F,WAAakV,GAEb,EAAA9T,UAAY+T,GAEZ,EAAAvV,SAAW,IAAI4d,EAAW,IAc1B,EAAAnc,iBAA2B,EAgB3B,EAAAC,YAAsB,EAEtB,EAAAsc,eAAiB,KAEjB,EAAAD,iBAAmB,KAuOnC,EApRA,CAAgC,GClB1BE,GAAgB,CACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MCD7CC,GDMX,CACEC,aAAc,EACdC,sBAAuB,EAEvBC,GAAI,KACJC,GAAI,KAEJC,SAAU,SACVC,UAAW,YACXC,QAAS,UACTC,QAAS,QACTC,SAAU,YACVC,SAAU,WACVC,UAAW,mBACXC,UAAW,kBACXC,WAAY,yBACZC,WAAY,uBAEZC,OAAQ,SAAC3yB,GAMP,OAAOA,GAFQA,GAFQ,IAEmBA,GADnB,GAC6C,KAAO2xB,GAAK3xB,EAAQ2xB,GAAIlvB,UAK9F0F,KAAM,SAACyqB,GAKL,IAHA,IAAMhF,EAAegF,EAAMnwB,OAAS,EAChCiC,EAAckuB,EAAM,GAEf7zB,EAAI,EAAGA,EAAI6uB,EAAM7uB,IAExB2F,GAAO,KAAOkuB,EAAM7zB,GAOtB,OAJI6uB,EAAO,IACTlpB,GAAO,QAAUkuB,EAAMhF,IAGlBlpB,GAGTmuB,OAAQ,CACN,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC/G,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,MAAO,OACjF,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC9E,CAAC,KAAM,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,MAGjEC,SAAU,CACR,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACnE,CAAC,MAAO,MAAO,OAAQ,MAAO,QAAS,MAAO,OAC9C,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC3C,CAAC,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,QE7DzBC,GAA2B,IAe3BC,GAAuB,EAKvBC,GAf4B,GAeDF,GAK3BG,GApB4B,GAoBHD,GAKzBE,GApBuB,GAoBCD,GAKxBE,GAAoB,EAKpBC,GAAyB,GAKzBC,GAAkB,EAKlBC,GAAkB,GAKlBC,GAAmB,GAKnBC,GAAqB,GAKrBC,GAAqB,GAKrBC,GAAqB,IAKrBC,GAAsB,E,qqBCxDtBC,GACb,CACEC,KAAU,SAAC9zB,GAAU,OAAAA,GACrB0qB,MAAU,SAAC1qB,GAAU,OAAAqC,KAAKqoB,MAAM1qB,IAChC2qB,KAAU,SAAC3qB,GAAU,OAAAqC,KAAKsoB,KAAK3qB,IAC/BuC,MAAU,SAACvC,GAAU,OAAAqC,KAAKE,MAAMvC,IAChC+zB,SAAU,SAAC/zB,GAAU,OAAAA,EAAQ,EAAIqC,KAAKsoB,KAAK3qB,GAASqC,KAAKqoB,MAAM1qB,IAC/D6qB,KAAU,SAAC7qB,GAAU,OAAAA,EAAQ,EAAIqC,KAAKsoB,KAAK3qB,GAASqC,KAAKqoB,MAAM1qB,IAC/D4qB,GAAU,SAAC5qB,GAAU,OAAAA,EAAQ,EAAIqC,KAAKqoB,MAAM1qB,GAASqC,KAAKsoB,KAAK3qB,KAKpDg0B,GACb,CACEC,UAAsB,SAAA50B,GAAK,OAAAA,EAAE60B,WAC7BC,iBAAsB,SAAA90B,GAAK,OAAAgD,KAAKqoB,MAAMrrB,EAAE60B,UAAYnB,KACpDqB,OAAsB,SAAA/0B,GAAK,OAAAA,EAAEg1B,mBAC7BC,OAAsB,SAAAj1B,GAAK,OAAAA,EAAEk1B,cAC7BC,OAAsB,SAAAn1B,GAAK,OAAAA,EAAEo1B,cAC7BC,KAAsB,SAAAr1B,GAAK,OAAAA,EAAEs1B,YAC7BC,IAAsB,SAAAv1B,GAAK,OAAAA,EAAEw1B,UAC7BC,WAAsB,SAAAz1B,GAAK,OAAAA,EAAE01B,WAC7BC,eAAsBC,GACtBC,UAAsBC,GACtBC,UAAsBC,GACtBC,KAAsBC,GACtBC,YAAsBC,GACtBC,gBAAsBC,GACtBC,gBAAsBC,GACtBC,oBAAsBC,GACtBC,oBAAsBC,GACtBC,WAAsBC,GACtBC,eAAsBC,GACtBC,eAAsBC,GACtBC,mBAAsBC,GACtBC,mBAAsBC,GACtBC,MAAsB,SAAAv3B,GAAK,OAAAA,EAAEw3B,YAC7BC,QAAsBC,GACtBC,KAAsB,SAAA33B,GAAK,OAAAA,EAAE43B,eAC7BC,eAAsBC,GACtBC,cAAsBC,GACtBC,eAAsBC,GACtBC,gBAAsBC,GACtBC,kBAAsBC,IAKXC,GACb,CACE3D,UAAsB,SAAC50B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAE21B,QAAQ30B,MACzDgxB,iBAAsB,SAAC90B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAE21B,QAAY,IAAJ30B,MACzDixB,OAAsB,SAAC/0B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAE41B,gBAAgB50B,MACjEmxB,OAAsB,SAACj1B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAE61B,WAAW70B,MAC5DqxB,OAAsB,SAACn1B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAE81B,WAAW90B,MAC5DuxB,KAAsB,SAACr1B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAE+1B,SAAS/0B,MAC1DyxB,IAAsB,SAACv1B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAIyyB,IAAIzyB,EAAGgB,EAAIhB,EAAE0yB,aAChEC,WAAsB,SAACz1B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAEg2B,QAAQh1B,MACzD6xB,eAAsB,SAAC31B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAIyyB,IAAIzyB,EAAGgB,EAAI8xB,GAAkB9yB,OAChF+yB,UAAsB,SAAC71B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAIyyB,IAAIzyB,EAAGgB,EAAIgyB,GAAahzB,OAC3EizB,UAAsB,SAAC/1B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAIyyB,IAAIzyB,EAAGgB,EAAIkyB,GAAalzB,OAC3EmzB,KAAsB,SAACj2B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIoyB,GAAcpzB,OAC7EqzB,YAAsB,SAACn2B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIsyB,GAAkBtzB,OACjFuzB,gBAAsB,SAACr2B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIwyB,GAAmBxzB,OAClFyzB,gBAAsB,SAACv2B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAI0yB,GAAmB1zB,OAClF2zB,oBAAsB,SAACz2B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAI4yB,GAAuB5zB,OACtF6zB,oBAAsB,SAAC32B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAI8yB,GAAuB9zB,OACtF+zB,WAAsB,SAAC72B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIgzB,GAAiBh0B,OAChFi0B,eAAsB,SAAC/2B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIkzB,GAAkBl0B,OACjFm0B,eAAsB,SAACj3B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIozB,GAAkBp0B,OACjFq0B,mBAAsB,SAACn3B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIszB,GAAsBt0B,OACrFu0B,mBAAsB,SAACr3B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAImzB,KAAKnzB,EAAGgB,EAAIwzB,GAAsBx0B,OACrFy0B,MAAsB,SAACv3B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAEi2B,SAASj1B,MAC1D2zB,QAAsB,SAACz3B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,UAAI20B,QAAQ30B,EAAGgB,EAAI4zB,GAAW50B,OAC7E60B,KAAsB,SAAC33B,EAAG8D,GAAM,OAAA00B,GAAOx4B,EAAG,SAAA8C,GAAK,OAAAA,EAAEk2B,YAAYl1B,OAKlDm1B,GACb,CACElE,OAAU,SAAAjyB,GAAK,OAAAA,GACfmyB,OAAUiE,GACV/D,OAAUgE,GACV9D,KAAU+D,GACV7D,IAAU8D,GACVpD,KAAUqD,GACV/B,MAAUgC,GACV9B,QAAU+B,GACV7B,KAAU8B,IAKCC,GACb,CACE3E,OAAU,SAAAjyB,GAAK,OAAAA,GACfmyB,OAAU0E,GACVxE,OAAUyE,GACVvE,KAAUwE,GACVtE,IAAUuE,GACV7D,KAAU8D,GACVxC,MAAUyC,GACVvC,QAAUwC,GACVtC,KAAUuC,IAKC,GACb,CACEnF,OAAUoF,GACVlF,OAAUmF,GACVjF,OAAUkF,GACVhF,KAAUiF,GACV/E,IAAUgF,GACVtE,KAAUuE,GACVjD,MAAUkD,GACVhD,QAAUiD,GACV/C,KAAUgD,IAKCC,GACb,CACE7F,OAAU8F,GACV5F,OAAU6F,GACV3F,OAAU4F,GACV1F,KAAU2F,GACVzF,IAAU0F,GACVhF,KAAUiF,GACV3D,MAAU4D,GACV1D,QAAU2D,GACVzD,KAAU0D,IAGL,SAAS7C,GAAO91B,EAAS44B,EAAqDryB,GAEnF,IAAMtG,EAAI,IAAIX,KAAKU,EAAEa,WAIrB,OAFA+3B,EAAQ34B,EAAGsG,GAEJtG,EAGF,SAAS44B,GAAa74B,EAASC,EAAS64B,EAA4BvyB,QAA5B,IAAAuyB,MAAA,eAA4B,IAAAvyB,MAAA,IAEzE,IAAMwyB,EAAUxC,GAAQuC,GAClB14B,EAAI01B,GAAO91B,EAAG+4B,EAASxyB,GACvB7C,EAAIoyB,GAAO71B,EAAG84B,EAASxyB,GAE7B,OAAOnG,EAAES,UAAY6C,EAAE7C,UAKlB,IAAMm4B,GAGR,CACH,CACEC,QAAS,+FACTC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KAE9B,CACED,QAAS,8FACTC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,MAIzB,SAASpjB,GAAM7X,EAAYk7B,G,QAEhC,QAFgC,IAAAA,OAAA,GAE5B95B,EAAOpB,GAET,OAAOA,EAGT,GAAIe,EAASf,IAAUA,EAAQ,EAE7B,OAAO,IAAIqB,KAAKrB,GAGlB,GAAIiB,EAASjB,GACb,C,IACE,IAAqB,SAAA+6B,IAAW,8BAChC,CADK,IAAMI,EAAM,QAEPH,EAAA,EAAAA,QAASC,EAAA,EAAAA,OACXG,EAAQJ,EAAQK,KAAKr7B,GAE3B,GAAIo7B,EACJ,CAGE,IAFA,IAAME,EAAyB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEzCv8B,EAAI,EAAGA,EAAIu8B,EAAM74B,OAAQ1D,IAAK,CACrC,IAAMoD,EAAImW,SAAS8iB,EAAMH,EAAOl8B,KAC5BiC,SAASmB,KACXm5B,EAAMv8B,GAAW,IAANA,EAAUoD,EAAI,EAAIA,GAIjC,OAAO+4B,EACH,IAAI75B,KAAKA,KAAKk6B,IAAG,MAARl6B,KAAI,GAAQi6B,KACrB,IAAIj6B,KAAI,WAAJA,KAAI,YAAIi6B,O,iGAIpB,GAAIJ,EACJ,CACE,IAAMM,EAAUx7B,EAAQ,OAClBy7B,EAAYp6B,KAAKwW,MAAM2jB,GAE7B,GAAIx6B,SAASy6B,GAEX,OAAO,IAAIp6B,KAAKo6B,GAIpB,IAAMC,EAASr6B,KAAKwW,MAAM7X,GAE1B,GAAIgB,SAAS06B,GAEX,OAAO,IAAIr6B,KAAKq6B,GAIpB,OAAO,KAGF,SAASvE,GAAkBh1B,GAEhC,OAAyB,IAAlBA,EAAE80B,cACmB,KAApB90B,EAAE00B,WAAa,GACF,IAAd10B,EAAE4yB,UACa,IAAf5yB,EAAEwyB,WACFxyB,EAAEsyB,aAGJ,SAAS4C,GAAiBl1B,GAE/B,OAAyB,IAAlBA,EAAE80B,cACmB,KAApB90B,EAAE00B,WAAa,GAChB10B,EAAE4yB,UAGJ,SAASwC,GAAkBp1B,GAEhC,OAAyB,IAAlBA,EAAE80B,cACF1B,GAAcpzB,GAGhB,SAASs1B,GAAmBt1B,GAEjC,OAAyB,IAAlBA,EAAE80B,eACD90B,EAAE00B,WAAa,GAGlB,SAASc,GAAqBx1B,GAEnC,OAAyB,GAAlBA,EAAE80B,cACFF,GAAW50B,GAGb,SAAS8yB,GAAkB9yB,GAEhC,OAAOw5B,GAAex5B,GAAKA,EAAE4yB,UAAY,EAGpC,SAAS0B,GAAsBt0B,GAEpC,IAAMy5B,EAAUC,GAAc15B,GAAKgzB,GAAahzB,GAEhD,OAAOE,KAAKqoB,MAAMkR,EAAU5I,IAGvB,SAASmD,GAAiBh0B,EAASmG,GAExC,YAFwC,IAAAA,MAAA,IAEjCwzB,GAAWjE,GAAO11B,EAAG22B,IAAc3D,GAAahzB,GAAImG,GAGtD,SAASitB,GAAcpzB,EAASmG,GAErC,YAFqC,IAAAA,MAAA,IAE9ByzB,GAAQlE,GAAO11B,EAAG22B,IAAc3D,GAAahzB,GAAImG,GAGnD,SAAS+tB,GAAkBl0B,GAEhC,OAAOE,KAAKqoB,OAAOyK,GAAahzB,GAAK,GAAK6wB,IAGrC,SAASuD,GAAkBp0B,EAASmG,GAEzC,YAFyC,IAAAA,MAAA,IAElC0zB,GAAcnE,GAAO11B,EAAG22B,IAAc+C,GAAc15B,GAAImG,GAG1D,SAAS2zB,GAAe95B,EAASmG,GAEtC,YAFsC,IAAAA,MAAA,IAE/B6tB,GAAiB0B,GAAO11B,EAAGo3B,IAAYjxB,GAAW,EAGpD,SAASquB,GAAsBx0B,EAASmG,QAAA,IAAAA,MAAA,IAE7C,IAAM4zB,EAAarE,GAAO11B,EAAGo3B,IACvBjE,EAAOa,GAAiBh0B,EAAGmG,GAE3B6zB,EADUhG,GAAiB+F,EAAY5zB,GAClBgtB,EAE3B,OAAOD,GAAa6G,EAAY5zB,KAAasrB,GACzCuI,EAAW,EACXA,EAGC,SAASxG,GAAmBxzB,GAEjC,OAAOE,KAAKqoB,OAAOvoB,EAAE4yB,UAAY,GAAK/B,IAGjC,SAAS+C,GAAuB5zB,GAErC,IAAMy5B,EAAUD,GAAex5B,GAAKA,EAAE4yB,UAEtC,OAAO1yB,KAAKqoB,MAAMkR,EAAU5I,IAGvB,SAAS6C,GAAmB1zB,EAASmG,GAE1C,YAF0C,IAAAA,MAAA,IAEnC0zB,GAAcnE,GAAO11B,EAAGy2B,IAAez2B,EAAE4yB,UAAWzsB,GAGtD,SAAS2tB,GAAuB9zB,EAASmG,QAAA,IAAAA,MAAA,IAE9C,IAAMszB,EAAUD,GAAex5B,GAAKA,EAAE4yB,UAChCqH,EAAoBxI,GAAcyB,GAAalzB,EAAGmG,GAExD,OAAOjG,KAAKqoB,OAAOkR,EAAUQ,EAAoBpJ,IAAgBA,IAG5D,SAASyC,GAAkBtzB,EAASmG,GAEzC,YAFyC,IAAAA,MAAA,IAElCwzB,GAAWjE,GAAO11B,EAAGy2B,IAAez2B,EAAE4yB,UAAWzsB,GAGnD,SAAS+zB,GAAel6B,EAASmG,GAEtC,YAFsC,IAAAA,MAAA,IAE/ByzB,GAAQlE,GAAO11B,EAAGy2B,IAAez2B,EAAE4yB,UAAWzsB,GAGhD,SAASwzB,GAAWrb,EAAa6b,EAAoBh0B,QAAA,IAAAA,MAAA,IAElD,IAAAwpB,EAAA,EAAAA,sBACFyK,EAAiBlH,GAAa5U,EAAOnY,GAErCk0B,EADcxJ,GAAeuJ,EAAiBzK,EAEhDyK,EAAiB,EACjBA,EAAiB,EAAIvJ,GAEzB,OAAO3wB,KAAKqoB,OAAO4R,EAAaE,GAAUxJ,IAGrC,SAAS+I,GAAQtb,EAAa6b,EAAoBh0B,GAEvD,IACMk0B,EADiBnH,GAAa5U,EAAOnY,GACX,EAAI0qB,GAEpC,OAAO3wB,KAAKqoB,OAAO4R,EAAaE,GAAUxJ,IAGrC,SAASgJ,GAAcvb,EAAa6b,EAAoBh0B,QAAA,IAAAA,MAAA,IAE7D,IAAMi0B,EAAiBlH,GAAa5U,EAAOnY,GAErCk0B,EADiC,IAAnBD,EAEhBA,EAAiB,EACjBA,EAAiB,EAAIvJ,GAEzB,OAAO3wB,KAAKqoB,OAAO4R,EAAaE,GAAUxJ,IAGrC,SAASqC,GAAalzB,EAASmG,QAAA,IAAAA,MAAA,IAE5B,IAAAupB,EAAA,EAAAA,aACF+C,EAAMzyB,EAAE0yB,SAEd,OAAOD,EAAM/C,EACT+C,EAAM/C,EAAemB,GACrB4B,EAAM/C,EAGL,SAASsD,GAAapzB,GAE3B,OAAOM,KAAKE,MAAM+3B,GAASv4B,EAAG81B,GAAO91B,EAAG+2B,MAAiB,EAGpD,SAAS2D,GAAct6B,GAE5B,OAAiD,IAAzCE,KAAKE,MAAMJ,EAAEu6B,oBAAsB,IAGtC,SAASC,GAAqBx6B,GAEnC,IAAMq6B,EAASC,GAAct6B,GAE7B,OACEq6B,EAASC,GAAc5E,GAAO11B,EAAG,SAAA9C,GAAK,OAAAA,EAAE+4B,SAAS,OACjDoE,EAASC,GAAc5E,GAAO11B,EAAG,SAAA9C,GAAK,OAAAA,EAAE+4B,SAAS,MAI9C,SAASwE,GAAWz6B,GAEzB,IAAM60B,EAAO70B,EAAE80B,cAEf,OAAOD,EAAO,KAAQ,GAAMA,EAAO,GAAM,GAAKA,EAAO,KAAQ,EAGxD,SAAS6E,GAAc15B,GAE5B,OAAOy6B,GAAWz6B,GAAK,IAAM,IAGxB,IAAM06B,GAAc,CACzB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7C,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAGxC,SAASlB,GAAex5B,GAE7B,OAAO06B,GAAYD,GAAWz6B,GAAK,EAAI,GAAGA,EAAE00B,YAGvC,SAASiG,GAAqB/6B,GAEnC,OAAOA,EAAEa,UAAYm6B,GAAgCh7B,GAGhD,SAASg7B,GAAgCh7B,GAE9C,IAAMC,EAAI,IAAIX,KAAKU,EAAEa,WACfo6B,EAAgBh7B,EAAE06B,oBAExB16B,EAAEg2B,WAAW,EAAG,GAEhB,IAAMiF,EAAqBj7B,EAAEY,UAAYqwB,GAEzC,OAAO+J,EAAgB/J,GAAmBgK,EAGrC,SAASlG,GAAW50B,GAEzB,OAAOE,KAAKqoB,MAAMvoB,EAAE00B,WAAazD,IAG5B,SAASmF,GAAcp2B,GAE5BA,EAAE41B,gBAAgB,GAGb,SAASS,GAAcr2B,GAE5BA,EAAE61B,WAAW,EAAG,GAGX,SAASS,GAAYt2B,GAE1BA,EAAE81B,WAAW,EAAG,EAAG,GAGd,SAASS,GAAWv2B,GAEzBA,EAAE+1B,SAAS,EAAG,EAAG,EAAG,GAGf,SAASS,GAAYx2B,EAASmG,QAAA,IAAAA,MAAA,IAEnC,IAAM8sB,EAAYC,GAAalzB,EAAGmG,GAElCnG,EAAEg2B,QAAQh2B,EAAE4yB,UAAYK,GACxBjzB,EAAE+1B,SAAS,EAAG,EAAG,EAAG,GAGf,SAASU,GAAaz2B,GAE3BA,EAAEg2B,QAAQ7E,IACVnxB,EAAE+1B,SAAS,EAAG,EAAG,EAAG,GAGf,SAASW,GAAe12B,GAE7B,IAAMy0B,EAAQz0B,EAAE00B,WAEhB10B,EAAEi2B,SAASxB,EAASA,EAAQxD,GAAoBE,IAChDnxB,EAAE+1B,SAAS,EAAG,EAAG,EAAG,GAGf,SAASY,GAAY32B,GAE1B,IAAM60B,EAAO70B,EAAE80B,cAEf90B,EAAE21B,QAAQ,GACV31B,EAAEk2B,YAAYrB,EAAM,EAAG,GACvB70B,EAAE+1B,SAAS,EAAG,EAAG,EAAG,GAGf,SAASc,GAAY72B,GAE1BA,EAAE41B,gBAAgBpE,IAGb,SAASsF,GAAY92B,GAE1BA,EAAE61B,WAAWtE,GAAYC,IAGpB,SAASuF,GAAU/2B,GAExBA,EAAE81B,WAAWxE,GAAYC,GAAYC,IAGhC,SAASwF,GAASh3B,GAEvBA,EAAE+1B,SAAS1E,GAAUC,GAAYC,GAAYC,IAGxC,SAASyF,GAAUj3B,EAASmG,QAAA,IAAAA,MAAA,IAEjC,IAAM8sB,EAAYC,GAAalzB,EAAGmG,GAElCnG,EAAEg2B,QAAQh2B,EAAE4yB,WAAanB,GAAcwB,IACvC+D,GAASh3B,GAGJ,SAASk3B,GAAWl3B,GAEzBA,EAAEk2B,YAAYl2B,EAAE80B,cAAe90B,EAAE00B,WAAa,EAAG,GACjDsC,GAASh3B,GAGJ,SAASm3B,GAAan3B,GAE3B,IAAMy0B,EAAQz0B,EAAE00B,WAEhB10B,EAAEi2B,SAASxB,EAASA,EAAQxD,GAAqBA,GAAmBE,IACpE6F,GAASh3B,GAGJ,SAASo3B,GAAUp3B,GAExBA,EAAEk2B,YAAYl2B,EAAE80B,cAAgB,EAAG,EAAG,GACtCkC,GAASh3B,GAGJ,SAASq3B,GAAgBr3B,EAAS+6B,GAEvC/6B,EAAE21B,QAAQ31B,EAAES,UAAYs6B,GAGnB,SAASzD,GAAWt3B,EAAS+6B,GAElC1D,GAAgBr3B,EAAG+6B,EAASnK,IAGvB,SAAS2G,GAAWv3B,EAAS+6B,GAElC1D,GAAgBr3B,EAAG+6B,EAASjK,IAGvB,SAAS0G,GAASx3B,EAAS+6B,GAEhC1D,GAAgBr3B,EAAG+6B,EAAShK,IAGvB,SAAS0G,GAAQz3B,EAAS+6B,GAE/B/6B,EAAEg2B,QAAQh2B,EAAE4yB,UAAYmI,GAGnB,SAASrD,GAAS13B,EAAS+6B,GAEhCtD,GAAQz3B,EAAG+6B,EAASlK,IAGf,SAAS8G,GAAU33B,EAAS+6B,GAEjC,IAAMtG,EAAQz0B,EAAE00B,WAAaqG,EAEvBz3B,EAAI,IAAIpE,KAAK,GACnBoE,EAAE4yB,YAAY5yB,EAAEwxB,cAAeL,EAAO,GACtCnxB,EAAEyyB,SAAS,EAAG,EAAG,EAAG,GACpB,IAAMiF,EAASxB,GAAel2B,GAE9BtD,EAAEi2B,SAASxB,EAAOv0B,KAAKS,IAAIq6B,EAAQh7B,EAAE4yB,YAGhC,SAASgF,GAAY53B,EAAS+6B,GAEnCpD,GAAU33B,EAAG+6B,EAAS9J,IAGjB,SAAS4G,GAAS73B,EAAS+6B,GAEhCpD,GAAU33B,EAAG+6B,EAAS7J,IAGjB,SAAS6G,GAAiBn4B,EAASC,GAExC,OAAOD,EAAEa,UAAYZ,EAAEY,UAGlB,SAASu3B,GAAYp4B,EAASC,GAEnC,OAAOk4B,GAAiBn4B,EAAGC,GAAK+wB,GAG3B,SAASqH,GAAYr4B,EAASC,GAEnC,OAAOk4B,GAAiBn4B,EAAGC,GAAKixB,GAG3B,SAASoH,GAAUt4B,EAASC,GAEjC,OAAOk4B,GAAiBn4B,EAAGC,GAAKkxB,GAG3B,SAASoH,GAASv4B,EAASC,GAKhC,OAHsB86B,GAAqB/6B,GACpB+6B,GAAqB96B,IAEFmxB,GAGrC,SAASoH,GAAUx4B,EAASC,GAEjC,OAAOs4B,GAASv4B,EAAGC,GAAKgxB,GAGnB,SAASwH,GAAWz4B,EAASC,GAElC,IAAMo7B,EAAQr7B,EAAEk1B,cAAgBj1B,EAAEi1B,cAC5BpE,EAAS9wB,EAAE80B,WAAa70B,EAAE60B,WAC1BwG,GAAQt7B,EAAEgzB,UAAY/yB,EAAE+yB,WAAaxB,GAE3C,OAAO6J,EAAQ/J,GAAiBR,EAASwK,EAGpC,SAAS5C,GAAa14B,EAASC,GAEpC,OAAOw4B,GAAWz4B,EAAGC,GAAKoxB,GAGrB,SAASsH,GAAU34B,EAASC,GAEjC,OAAOw4B,GAAWz4B,EAAGC,GAAKqxB,GC/pBrB,IAAMiK,GAAiB,IAAI9uB,EAAWnB,EAAGhM,KAAOgM,EAAGiB,WAE7CivB,GAAgB,IAAI7uB,EAAUrB,EAAGhM,KAAOgM,EAAGiB,WAElD,GAAMgvB,GAECE,GACb,CAIEn9B,OAAQ,GAAI8L,IAAI,UAEhBxJ,IAAK,GAAIwJ,IAAI,OAEbsxB,MAAO,GAAItxB,IAAI,SAEfuxB,SAAU,GAAIvxB,IAAI,UAElBwxB,UAAW,GAAIxxB,IAAI,UAInByC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7B0L,MAAO,GAAI1L,IAAI,QAAS,GAAI,CAAC,SAAU,CAAC,eAExCyxB,SAAU,GAAIzxB,IAAI,OAAQ,GAAI,CAAC,SAAU,CAAC,eAE1C0xB,cAAe,GAAI1xB,IAAI,OAAQ,GAAI,CAAC,UAEpC2xB,qBAAsB,GAAI3xB,IAAI,QAAS,GAAI,CAAC,UAE5CrJ,IAAK,GAAIqJ,IAAI,MAAO,GAAI,CAAC,QAAS,SAElCpJ,IAAK,GAAIoJ,IAAI,MAAO,GAAI,CAAC,QAAS,SAElCvM,IAAK,GAAIuM,IAAI,MAAO,GAAI,CAAC,QAAS,aAElCA,IAAK,GAAIA,IAAI,MAAO,GAAI,CAAC,QAAS,WAAY,QAE9CtI,IAAK,GAAIsI,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,WAE1CiP,IAAK,GAAIjP,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,WAE1CmsB,QAAS,GAAInsB,IAAI,UAAW,GAAI,CAAC,QAAS,SAE1C4sB,MAAO,GAAI5sB,IAAI,QAAS,GAAI,CAAC,QAAS,QAAS,CAAC,cAEhD0wB,YAAa,GAAI1wB,IAAI,MAAO,GAAI,CAAC,UAEjC4xB,WAAY,GAAI5xB,IAAI,MAAO,GAAI,CAAC,UAEhC6xB,YAAa,GAAI7xB,IAAI,MAAO,GAAI,CAAC,UAEjC4F,KAAM,GAAI5F,IAAI,OAAQ,GAAI,CAAC,UAE3B8C,IAAK,GAAI9C,IAAI,MAAO,GAAI,CAAC,QAAS,QAAS,CAAC,SAE5C8tB,KAAM,GAAI9tB,IAAI,OAAQ,GAAI,CAAC,QAAS,QAAS,CAAC,OAAQ,WAAY,WAElE8xB,eAAgB,GAAI9xB,IAAI,SAAU,GAAI,CAAC,UAIvC2f,OAAQ,GAAI3f,IAAI,SAAU,GAAI,CAAC,QAAS,WAExC+xB,UAAW,GAAI/xB,IAAI,YAAa,GAAI,CAAC,UAIrC+C,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BkD,QAAS,GAAIlD,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,SAE9CgyB,SAAU,GAAIhyB,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,SAE/CiyB,gBAAiB,GAAIjyB,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,SAEvDkyB,QAAS,GAAIlyB,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,SAE9CmyB,eAAgB,GAAInyB,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,SAEtD+f,UAAW,GAAI/f,IAAI,UAAW,GAAI,CAAC,QAAS,QAAS,OAAQ,CAAC,OAAQ,iBAAkB,iBAExFoyB,UAAW,GAAIpyB,IAAI,WAAY,GAAI,CAAC,QAAS,SAE7CqyB,QAAS,GAAIryB,IAAI,SAAU,GAAI,CAAC,QAAS,QAAS,CAAC,cAEnDsyB,MAAO,GAAItyB,IAAI,OAAQ,GAAI,CAAC,UAE5BywB,WAAY,GAAIzwB,IAAI,QAAS,GAAI,CAAC,UAIlCoD,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpC87B,GAAcpxB,IAAI,YAAaqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,cACjE68B,GAAcpwB,YAAY,YAAaqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,cAEhF68B,GAAcpxB,IAAI,mBAAoBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,qBACxE68B,GAAcpwB,YAAY,mBAAoBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,qBAEvF68B,GAAcpxB,IAAI,SAAUqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,WAC9D68B,GAAcpwB,YAAY,SAAUqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,WAE7E68B,GAAcpxB,IAAI,SAAUqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,WAC9D68B,GAAcpwB,YAAY,SAAUqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,WAE7E68B,GAAcpxB,IAAI,SAAUqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,WAC9D68B,GAAcpwB,YAAY,SAAUqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,WAE7E68B,GAAcpxB,IAAI,OAAQqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,SAC5D68B,GAAcpwB,YAAY,OAAQqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,SAE3E68B,GAAcpxB,IAAI,MAAOqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,QAC3D68B,GAAcpwB,YAAY,MAAOqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,QAE1E68B,GAAcpxB,IAAI,aAAcqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,eAClE68B,GAAcpwB,YAAY,aAAcqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,eAEjF68B,GAAcpxB,IAAI,iBAAkBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,mBACtE68B,GAAcpwB,YAAY,iBAAkBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,mBAErF68B,GAAcpxB,IAAI,YAAaqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,cACjE68B,GAAcpwB,YAAY,YAAaqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,cAEhF68B,GAAcpxB,IAAI,YAAaqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,cACjE68B,GAAcpwB,YAAY,YAAaqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,cAEhF68B,GAAcpxB,IAAI,OAAQqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,SAC5D68B,GAAcpwB,YAAY,OAAQqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,SAE3E68B,GAAcpxB,IAAI,cAAeqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,gBACnE68B,GAAcpwB,YAAY,cAAeqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,gBAElF68B,GAAcpxB,IAAI,kBAAmBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,oBACvE68B,GAAcpwB,YAAY,kBAAmBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,oBAEtF68B,GAAcpxB,IAAI,kBAAmBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,oBACvE68B,GAAcpwB,YAAY,kBAAmBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,oBAEtF68B,GAAcpxB,IAAI,sBAAuBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,wBAC3E68B,GAAcpwB,YAAY,sBAAuBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,wBAE1F68B,GAAcpxB,IAAI,sBAAuBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,wBAC3E68B,GAAcpwB,YAAY,sBAAuBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,wBAE1F68B,GAAcpxB,IAAI,aAAcqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,eAClE68B,GAAcpwB,YAAY,aAAcqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,eAEjF68B,GAAcpxB,IAAI,iBAAkBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,mBACtE68B,GAAcpwB,YAAY,iBAAkBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,mBAErF68B,GAAcpxB,IAAI,iBAAkBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,mBACtE68B,GAAcpwB,YAAY,iBAAkBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,mBAErF68B,GAAcpxB,IAAI,qBAAsBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,uBAC1E68B,GAAcpwB,YAAY,qBAAsBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,uBAEzF68B,GAAcpxB,IAAI,qBAAsBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,uBAC1E68B,GAAcpwB,YAAY,qBAAsBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,uBAEzF68B,GAAcpxB,IAAI,QAASqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,UAC7D68B,GAAcpwB,YAAY,QAASqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,UAE5E68B,GAAcpxB,IAAI,UAAWqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,YAC/D68B,GAAcpwB,YAAY,UAAWqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,YAE9E68B,GAAcpxB,IAAI,OAAQqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,SAC5D68B,GAAcpwB,YAAY,OAAQqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,SAE3E68B,GAAcpxB,IAAI,iBAAkBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,mBACtE68B,GAAcpwB,YAAY,iBAAkBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,mBAErF68B,GAAcpxB,IAAI,gBAAiBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,kBACrE68B,GAAcpwB,YAAY,gBAAiBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,kBAEpF68B,GAAcpxB,IAAI,iBAAkBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,mBACtE68B,GAAcpwB,YAAY,iBAAkBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,mBAErF68B,GAAcpxB,IAAI,kBAAmBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,oBACvE68B,GAAcpwB,YAAY,kBAAmBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,oBAEtF68B,GAAcpxB,IAAI,oBAAqBqxB,GAAQ59B,IAAK,QAAS,CAAEc,SAAU,sBACzE68B,GAAcpwB,YAAY,oBAAqBqwB,GAAQrxB,IAAK,QAAS,MAAO,CAAEzL,SAAU,sBAGxF68B,GAAcpxB,IAAI,gBAAiBqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,WACrEnB,GAAcpxB,IAAI,gBAAiBqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,WACrEnB,GAAcpxB,IAAI,cAAeqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,SACnEnB,GAAcpxB,IAAI,aAAcqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,QAClEnB,GAAcpxB,IAAI,cAAeqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,SACnEnB,GAAcpxB,IAAI,eAAgBqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,UACpEnB,GAAcpxB,IAAI,iBAAkBqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,YACtEnB,GAAcpxB,IAAI,cAAeqxB,GAAQlF,QAAS,QAAS,CAAEoG,KAAM,SAEnEnB,GAAcpxB,IAAI,cAAeqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,WACjEnB,GAAcpxB,IAAI,cAAeqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,WACjEnB,GAAcpxB,IAAI,YAAaqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,SAC/DnB,GAAcpxB,IAAI,WAAYqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,QAC9DnB,GAAcpxB,IAAI,YAAaqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,SAC/DnB,GAAcpxB,IAAI,aAAcqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,UAChEnB,GAAcpxB,IAAI,eAAgBqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,YAClEnB,GAAcpxB,IAAI,YAAaqxB,GAAQzE,MAAO,QAAS,CAAE2F,KAAM,SAE/DnB,GAAcpxB,IAAI,cAAeqxB,GAAQX,aACzCU,GAAcpxB,IAAI,aAAcqxB,GAAQO,YACxCR,GAAcpxB,IAAI,cAAeqxB,GAAQQ,aACzCT,GAAcpxB,IAAI,iBAAkBqxB,GAAQS,gBAC5CV,GAAcpxB,IAAI,YAAaqxB,GAAQU,WACvCX,GAAcpxB,IAAI,QAASqxB,GAAQiB,OACnClB,GAAcpxB,IAAI,aAAcqxB,GAAQZ,Y,iiBCrNxC,4B,+CAuXA,OAvX8B,QAWd,EAAAxpB,OAAd,SAAqBC,EAAarH,GAEhC,OAAO,IAAI2yB,EAASl4B,KAAK4W,cAAchK,EA3BrB,IA2B4C,MAGlD,EAAAE,OAAd,SAAqB3J,GAEnB,OAAOpH,EAAQoH,EAAKtB,SAChB7B,KAAKwF,GACL,CAACxF,KAAKwF,GAAIxF,KAAK6W,cAAc1T,EAAKtB,WAGzB,EAAA+U,cAAf,SAA6B/U,GAO3B,OALIA,EAAQs2B,cAAat2B,EAAQs2B,YAAc,IAAIv9B,KAAKiH,EAAQs2B,cAC5Dt2B,EAAQu2B,cAAav2B,EAAQu2B,YAAc,IAAIx9B,KAAKiH,EAAQu2B,cAC5Dv2B,EAAQw2B,WAAUx2B,EAAQw2B,SAAW,IAAIz9B,KAAKiH,EAAQw2B,WACtDx2B,EAAQy2B,WAAUz2B,EAAQy2B,SAAW,IAAI19B,KAAKiH,EAAQy2B,WAEnDz2B,GAGM,EAAAgV,cAAf,SAA6BhV,GAE3B,IAAMkV,EAAO,MAAalV,GAO1B,OALIkV,EAAQohB,cAAaphB,EAAQohB,YAAcphB,EAAQohB,YAAYI,eAC/DxhB,EAAQqhB,cAAarhB,EAAQqhB,YAAcrhB,EAAQqhB,YAAYG,eAC/DxhB,EAAQshB,WAAUthB,EAAQshB,SAAWthB,EAAQshB,SAASE,eACtDxhB,EAAQuhB,WAAUvhB,EAAQuhB,SAAWvhB,EAAQuhB,SAASC,eAEnDxhB,GAKK,EAAAhK,SAAd,SAAuBH,EAAWI,GAEhC,OAAKrS,EAAOiS,GAKL,IAAIsrB,EAAS,CAClBC,YAAa,IAAIv9B,KAAKgS,EAAKzQ,WAC3Bi8B,YAAa,IAAIx9B,KAAKgS,EAAKzQ,aALpB,MAWG,EAAA+Q,SAAd,WAKER,EAAUzB,WAAW,CACnBwB,SAJe,EAKftJ,KAJwB,SAKxBsH,QAAS,SAACnP,EAAGC,GACX,IAAMgtB,EAAK5tB,EAAOW,GACZktB,EAAK7tB,EAAOY,GAElB,OAAIgtB,IAAOC,GAAYD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE3CD,EACKjtB,EAAEa,UAAYZ,EAAEY,eADzB,KAMJuQ,EAAUrB,UAAU,CAClBoB,SAnBe,EAoBftJ,KAnBwB,SAoBxBgI,OAAQ,SAAC7P,EAAGC,GACV,IAAMgtB,EAAK5tB,EAAOW,GAGlB,OAAIitB,IAFO5tB,EAAOY,KAIdgtB,EACKjtB,EAAEa,YAAcZ,EAAEY,eAD3B,MAMJuQ,EAAUV,QAAQ,CAChBS,SAlCe,EAmCfX,SAAU,SAACC,GACT,GAAI5Q,EAAS4Q,IAASvR,EAASuR,EAAKwE,OAAuB,SAAdxE,EAAKwE,KAChD,OAAO,IAAI3V,KAAKmR,EAAKxS,QAGzBsS,OAAQ,SAACE,GACP,GAAIpR,EAAOoR,GACT,MAAO,CAAEwE,KAAM,OAAQhX,MAAOwS,EAAKwsB,kBAKzC7rB,EAAUf,UAAU,CAClBc,SAhDe,EAiDfnB,KAAM,SAAC5P,EAAG0H,EAAG0Y,GACX,GAAInhB,EAAOe,GAAI,CACb,IAAM88B,EAAU,IAAI59B,KAAKc,EAAES,WAI3B,OAFA2f,EAAcpgB,EAAG88B,GAEVA,OAMR,YAAArrB,MAAP,WAEE,OAAO+qB,EAAS1yB,IAGX,YAAA4H,cAAP,WAEE,OAAO8qB,EAAS7qB,WAAWxQ,KAGtB,YAAAyQ,MAAP,SAAanK,GAEX,IAAMkU,EAAKrX,KAAK6B,QACVyV,EAAKnU,EAAKtB,QAEhBwV,EAAGod,WAAapd,EAAGod,YAAcnd,EAAGmd,WAEhCpd,EAAG8gB,aAAe7gB,EAAG6gB,aAEvB9gB,EAAG8gB,YAAY9G,QAAQz1B,KAAKS,IAAIgb,EAAG8gB,YAAYh8B,UAAWmb,EAAG6gB,YAAYh8B,YAGvEkb,EAAG+gB,aAAe9gB,EAAG8gB,aAEvB/gB,EAAG+gB,YAAY/G,QAAQz1B,KAAKU,IAAI+a,EAAG+gB,YAAYj8B,UAAWmb,EAAG8gB,YAAYj8B,aAItE,YAAAoR,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAO,MAGF,YAAAuJ,YAAP,SAAmBjK,GAEjB,MAAO,IAGF,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,QAFsC,IAAAA,MAAA,MAEhCK,aAAiBg2B,GAErB,OAAO,EAGT,GAAIr2B,EAAQtI,MACZ,CACE,GAAI2I,EAAML,QAAQ42B,WAAaz4B,KAAK6B,QAAQ42B,SAE1C,OAAO,EAGT,IAAMp8B,EAAM2D,KAAK04B,SACX5gB,EAAW5V,EAAMw2B,SAEvB,GAAIr8B,KAASyb,GAAYA,EAAS3b,UAAYE,EAAIF,WAEhD,OAAO,EAGT,IAAMG,EAAM0D,KAAK24B,SACX5gB,EAAW7V,EAAMy2B,SAEvB,GAAIr8B,KAASyb,GAAYA,EAAS5b,UAAYG,EAAIH,WAEhD,OAAO,EAGH,mBAAEy8B,EAAA,EAAAA,aAAcC,EAAA,EAAAA,WAEtB,GAAID,GAAgBA,IAAiB12B,EAAML,QAAQ+2B,aAEjD,OAAO,EAGT,GAAIC,GAAcA,IAAe32B,EAAML,QAAQg3B,WAE7C,OAAO,EAIX,OAAO,GAGF,YAAAh0B,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAEjB,OAAOA,EAASC,MAAMP,OAGjB,YAAA4N,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAA+L,4BAAP,WAEQ,mBAAE4mB,EAAA,EAAAA,WAAYgE,EAAA,EAAAA,SAEpBz4B,KAAK6B,QAAU,CAAE4yB,WAAU,EAAEgE,SAAQ,IAGhC,YAAA3qB,oBAAP,WAEE,OAAO,GAAMxH,GAAGywB,GAAQn9B,OAAQ,KAG3B,YAAAmU,sBAAP,WAEE,OAAO,GAAMzH,GAAGywB,GAAQtuB,QAAS,CAC/BlP,MAAO,GAAMJ,IAAI,YAId,YAAA6U,qBAAP,WAEE,OAAO,GAAM1H,GAAGywB,GAAQvuB,IAAK,CAC3BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAsP,QAAP,SAAelP,GAEP,mBAAEk7B,EAAA,EAAAA,WAAY0D,EAAA,EAAAA,YAAaC,EAAA,EAAAA,YAC3BnD,EAAS7jB,GAAM7X,EAAOk7B,GAE5B,QAAKQ,MAKDkD,GAAelD,EAAO94B,UAAYg8B,EAAYh8B,cAK9Ci8B,GAAenD,EAAO94B,UAAYi8B,EAAYj8B,aAQ7C,YAAAiS,UAAP,SAAiB7U,GAET,mBAAEk7B,EAAA,EAAAA,WAAY4D,EAAA,EAAAA,SAAUC,EAAA,EAAAA,SAAUM,EAAA,EAAAA,aAAcC,EAAA,EAAAA,WAChD5D,EAAS7jB,GAAM7X,EAAOk7B,GAE5B,OAAKQ,GAKDoD,GAAYpD,EAAO94B,UAAYk8B,EAASl8B,WAE1C84B,EAAO5D,QAAQgH,EAASl8B,WAGtBm8B,GAAYrD,EAAO94B,UAAYm8B,EAASn8B,WAE1C84B,EAAO5D,QAAQiH,EAASn8B,WAGtBy8B,GAEF/G,GAAQ+G,GAAc3D,GAGpB4D,GAEFvG,GAAMuG,GAAY5D,GAGbA,GAvBE17B,GA0BJ,YAAA8U,YAAP,WAEE,OAAO,IAAI6pB,EAAS,KAGf,YAAA5pB,MAAP,WAEE,OAAO,IAAI4pB,EAASxrB,EAAUpB,KAAKtL,KAAK6B,WAGnC,YAAAiL,OAAP,WAEE,OAAOorB,EAASprB,OAAO9M,OAGlB,YAAApG,OAAP,WAEE,OAAO,IAAIgB,MAGN,YAAA2T,OAAP,SAAcC,GAEZ,IAAMjV,EAAQ,IAAIqB,KAEZyB,EAAM2D,KAAK04B,SACXp8B,EAAM0D,KAAK24B,SAEX3e,EAAQ3d,EAAMA,EAAIF,UAAY5C,EAAM4C,UACpC8d,EAAM3d,EAAMA,EAAIH,UAAY5C,EAAM4C,UAExC,OAAO,IAAIvB,KAAK4T,EAAIwL,EAAOC,GAAK,KAG3B,YAAAye,OAAP,WAEE,OAAO14B,KAAK6B,QAAQs2B,aAAen4B,KAAK6B,QAAQw2B,UAG3C,YAAAM,OAAP,WAEE,OAAO34B,KAAK6B,QAAQu2B,aAAep4B,KAAK6B,QAAQy2B,UAG3C,YAAAxsB,SAAP,SAAgBC,GAEd,OAAO,IAAInR,KAAKmR,IAGX,YAAAF,OAAP,SAActS,GAEZ,OAAOA,EAAQA,EAAMg/B,cAAgB,MAjXzB,EAAA/yB,GAAKoB,EAAGhM,KAER,EAAAyS,WAAawpB,GAEb,EAAApoB,UAAYqoB,GAEZ,EAAA7pB,SAAW,IAAIirB,EAAS,IAoCxB,EAAAxpB,iBAA2B,EAe3B,EAAAC,YAAsB,EA2TtC,EAvXA,CAA8B,G,i/BCX9B,4B,+CAkUA,OAlU8B,QAWd,EAAAhC,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAIuzB,EAFElsB,EAfE,GAee/P,IAAI,SAACjE,GAAW,OAAA2M,EAAMb,QAAQ9L,OAKhD,EAAAkU,OAAd,SAAqB3J,GAEnB,IAAM41B,EAAO51B,EAAKtB,QAAQhF,IAAI,SAAArD,GAAK,OAAAA,EAAEsT,WAErC,MAAO,CAAC9M,KAAKwF,GAAIuzB,IAKL,EAAAhsB,SAAd,SAAuBH,EAAWI,GAEhC,OAAO,MAKK,EAAAE,SAAd,aAOO,YAAAE,cAAP,sBAiBE,OAfKpN,KAAKqN,aAERrN,KAAKqN,WAAa,GAElBrN,KAAK6B,QAAQwE,QAAQ,SAAA0yB,GAEnB,IAAMC,EAAMD,EAAK3rB,gBAEjB,IAAK,IAAMxO,KAAQo6B,EAEjB,EAAK3rB,WAAWzO,GAAQo6B,EAAIp6B,MAK3BoB,KAAKqN,YAGN,YAAA4rB,QAAR,SAAoBzb,EAAcjZ,G,QAE1Bw0B,EAAO/4B,KAAK6B,Q,IAElB,IAAmB,SAAAk3B,GAAI,8BACvB,CADK,IAEG34B,EAASmE,EAFF,SAIb,QAAenG,IAAXgC,EAEF,OAAOA,G,iGAIX,OAAOod,GAGF,YAAArQ,MAAP,WAEE,OAAO2rB,EAAStzB,IAGX,YAAA8H,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,G,YAE3D,IAAkB,SAAAlE,KAAK6B,SAAO,8BAC9B,CADK,IAEGq3B,EAFM,QAEQ3rB,WAAWC,EAAMhK,EAAKU,GAE1C,GAAIg1B,EAEF,OAAOA,G,iGAIX,OAAO,MAGF,YAAAzrB,YAAP,SAAmBjK,GAEjB,IAAM21B,EAAkB,GAyBxB,OAvBAn5B,KAAK6B,QAAQwE,QAAQ,SAAAlD,GACnBA,EAAKsK,YAAYjK,GAAK6C,QAAQ,SAAAsO,GACXwkB,EAAK9nB,KAAK,SAAA5F,GACzB,OAAAA,EAAS5R,MAAQ8a,EAAI9a,KACnB4R,EAAS5R,eAAe,GACxB8a,EAAI9a,eAAe,GACnBwB,EAAYoQ,EAAS5R,IAAK8a,EAAI9a,QAKhCs/B,EAAK56B,KAAKoW,OAKhBwkB,EAAK3sB,KAAK,SAAClR,EAAGC,GAIZ,OAHWD,EAAEzB,eAAe,EAAO,EAAI,IAC5B0B,EAAE1B,eAAe,EAAO,EAAI,KAKlCs/B,GAGF,YAAAzrB,aAAP,SAAoBnU,GAElB,OAAOyG,KAAKi5B,QAAcj5B,KAAM,SAAA+4B,GAAQ,OAACA,EAAKtwB,QAAQlP,GAASw/B,OAAO36B,KAGjE,YAAAgE,kBAAP,WAEE,OAA+B,IAAxBpC,KAAK6B,QAAQ7F,OAChBgE,KAAK6B,QAAQ,GACb7B,MAGC,YAAA+B,YAAP,WAEE,OAAO/B,KAAK6E,aACR,IAAIi0B,EAAS94B,KAAK6B,QAAQhF,IAAI,SAAC9D,GAAM,OAAAA,EAAEgJ,iBACvC/B,MAGI,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,OAAO7B,KAAKi5B,SAAQ,EAAO,SAAAF,GAAQ,QAAAA,EAAK92B,aAAaC,EAAOL,SAAkBzD,KAGzE,YAAAyG,WAAP,WAEE,OAAO7E,KAAKi5B,SAAQ,EAAM,SAAAF,GAAQ,QAACA,EAAKl0B,mBAAuBzG,KAG1D,YAAAuP,SAAP,WAEE,OAAO3N,KAAKi5B,SAAQ,EAAM,SAAAF,GAAQ,QAACA,EAAKprB,iBAAqBvP,KAGrD,YAAAkE,kBAAV,WAEE,OAAO,GAGF,YAAAhC,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAK6B,QAAQhF,IAAI,SAACsG,EAAM4G,GAAU,OAAAzJ,EAASI,KAAKqJ,EAAO5G,EAAM,SAACjC,GAAgB,SAAKW,QAAQmI,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKW,QAAQmI,OAAOD,EAAO,UAIxJ,YAAAzG,gBAAP,SAAuB5C,GAErB,OAAOV,KAAK6B,QAAQnB,IAAS,MAGxB,YAAAkN,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQwE,QAAQ,SAAA7M,GAAK,OAAAA,EAAEoU,UAAU,MAGjC,YAAAC,4BAAP,WAEE7N,KAAK6B,QAAQwE,QAAQ,SAAA7M,GAAK,OAAAA,EAAEqU,iCAGvB,YAAAC,oBAAP,WAEE,OAAO9N,KAAK6B,QAAQ,GAAGiM,uBAGlB,YAAAC,sBAAP,WAEE,OAAO,GAAM1F,GAAE,MAAR,GAAK,GACPrI,KAAK6B,QAAQhF,IAAI,SAACrD,GAAM,OAAAA,EAAEuU,6BAI1B,YAAAC,qBAAP,WAEE,OAAO,GAAM1H,GAAGoJ,GAAOlH,IAAK,CAC1BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAyJ,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,IAAMyZ,EAAUjiB,EAASwC,GACnB0f,EAAQliB,EAASwI,GAEvB,GAAIyZ,IAAYC,EAChB,CACE,IAAMsN,EAAsB,IAAThtB,EAAakD,KAAK6B,QAAQ,GAAK7B,KAAK6B,QAAQ,GACzDgoB,EAAY7pB,KAAK6B,QAAQ/E,GACzBs8B,EAAU,GAAMxP,KAAKC,EAAWC,GAEtC,OAAO,GACJ9L,GAAG8L,EAAW/b,yBACdkQ,KAAK,GAAM9kB,IAAI,UACfglB,KAAKib,GAGL,OAAK7c,GAAWC,EAEZ3Z,EAEAC,IAAOhG,GAAQyf,EAEf,GACJyB,GAAG,GAAMzV,IAAIvI,KAAK+N,0BAClBkQ,KAAKpb,GACLsb,KAAK,GAAMhlB,IAAI,UAIb0J,GAGF,YAAA4F,QAAP,SAAelP,GAEb,OAAOyG,KAAKi5B,SAAQ,EAAO,SAAAF,GAAQ,QAAAA,EAAKtwB,QAAQlP,SAAgB6E,KAG3D,YAAAgQ,UAAP,SAAiB7U,GAEf,OAAOyG,KAAKi5B,QAAQ1/B,EAAO,SAAAw/B,GAAQ,OAAAA,EAAKtwB,QAAQlP,GAASw/B,EAAK3qB,UAAU7U,QAAS6E,KAG5E,YAAAiQ,YAAP,WAEE,OAAO,IAAIyqB,EAAS,KAGf,YAAAxqB,MAAP,WAEE,OAAO,IAAIwqB,EAAS94B,KAAK6B,QAAQhF,IAAI,SAAAwS,GAAK,OAAAA,EAAEf,YAGvC,YAAAxB,OAAP,WAEE,OAAOgsB,EAAShsB,OAAO9M,OAGlB,YAAApG,OAAP,WAEE,OAAOoG,KAAK6B,QAAQ7F,OAAS,EACzBgE,KAAK6B,QAAQ,GAAGjI,SAChB,MAGC,YAAA2U,OAAP,SAAcC,GAEZ,IAAM3M,EAAU7B,KAAK6B,QAGrB,OAAOA,EAFQ2M,EAAI,EAAG3M,EAAQ7F,QAAQ,IAEfuS,OAAOC,IAGzB,YAAA1C,SAAP,SAAgBC,G,QAERlK,EAAU7B,KAAK6B,Q,IAErB,IAAmB,SAAAA,GAAO,8BAC1B,CADK,IAEGozB,EAFO,QAEO7mB,UAAUrC,GAE9B,GAAIkpB,QAEF,OAAOA,G,iGAIX,OAAOlpB,GAGF,YAAAF,OAAP,SAActS,G,QAENsI,EAAU7B,KAAK6B,Q,IAErB,IAAmB,SAAAA,GAAO,8BAC1B,CADK,IAAMk3B,EAAI,QAEb,GAAIA,EAAKtwB,QAAQlP,GAEf,OAAOw/B,EAAKltB,OAAOtS,I,iGAIvB,OAAOA,GA5TK,EAAAiM,GAAKoB,EAAGQ,KAER,EAAAiG,WAAa,IAAItF,EAAWnB,EAAGQ,KAAOR,EAAGiB,WAEzC,EAAA4G,UAAY,IAAIxG,EAAUrB,EAAGQ,KAAOR,EAAGiB,WAEvC,EAAAoF,SAAW,IAAI6rB,EAAS,CAAC,GAAQ7rB,WAgBjC,EAAAyB,kBAA4B,EAO5B,EAAAC,YAAsB,EAkStC,EAlUA,CAA8B,G,o5BCY9B,4B,+CAudA,OAvd6B,QAeb,EAAAhC,OAAd,SAAqBC,EAAarH,GAEhC,IAAMhM,EAAQgM,EAAMb,QAAQkI,EA5BZ,IA+BhB,OAAO,IAAIysB,EAAQ,CAAEx/B,IAFT+S,EA5BE,GA4BgBrH,EAAMb,QAAQkI,EA5B9B,IA4BiD,GAASK,SAE9C1T,MAAK,KAGnB,EAAAuT,OAAd,SAAqB3J,GAEb,gBAAEtJ,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAEb,OAAOM,IAAQ,GAASoT,SACpB,CAACjN,KAAKwF,GAAIjM,EAAMuT,UAChB,CAAC9M,KAAKwF,GAAIjM,EAAMuT,SAAUjT,EAAIiT,WAKtB,EAAAC,SAAd,SAAuBH,EAAWI,G,QAEhC,IAAKnS,EAAM+R,GAET,OAAO,KAGT,IAAI/S,EAAY,IAAI,GAAQ,IACxBN,EAAc,IAAI,GAAQ,I,IAE9B,IAAqC,SAAAqT,EAAK7P,WAAS,8BACnD,CADW,oBAACu8B,EAAA,KAAUC,EAAA,KAEpB1/B,EAAMmT,EAAUM,MAAMzT,EAAKy/B,GAC3B//B,EAAQyT,EAAUM,MAAM/T,EAAOggC,I,iGAGjC,OAAO,IAAIF,EAAQ,CAAEx/B,IAAG,EAAEN,MAAK,KAKnB,EAAA2T,SAAd,WAKER,EAAUV,QAAQ,CAChBS,SAJe,GAKfX,SAAU,SAACC,EAAM6P,GACf,GAAIzgB,EAAS4Q,IAASvR,EAASuR,EAAKwE,OAAuB,QAAdxE,EAAKwE,KAChD,OAAO,IAAIzV,IAAIiR,EAAKxS,MAAMsD,IAAI,SAAC,G,IAAA,UAAChD,EAAA,KAAKN,EAAA,KAAuB,OAACqiB,EAAO/hB,GAAM+hB,EAAOriB,QAGrFsS,OAAQ,SAACE,EAAM8P,GACb,GAAIhhB,EAAMkR,GACR,MAAO,CACLwE,KAAM,MACNhX,MAAOmB,MAAMoC,KAAKiP,EAAKhP,WACpBF,IAAI,SAAC,G,IAAA,UAACF,EAAA,KAAGD,EAAA,KAAmB,OAACmf,EAAOlf,GAAIkf,EAAOnf,UAM1DgQ,EAAUf,UAAU,CAClBc,SAtBe,GAuBfnB,KAAM,SAAC5P,EAAG4P,EAAMwQ,G,QACd,GAAIjhB,EAAMa,GAAI,CACZ,IAAM89B,EAAS,IAAI1+B,IAEnBghB,EAAcpgB,EAAG89B,G,IAEjB,IAA2B,SAAA99B,EAAEqB,WAAS,8BAAE,CAA7B,oBAAClD,EAAA,KAAKN,EAAA,KACfigC,EAAO9zB,IAAI4F,EAAKzR,GAAMyR,EAAK/R,K,iGAG7B,OAAOigC,MAKb9sB,EAAUzB,WAAW,CACnBwB,SAvCe,GAwCftJ,KAvCwB,SAwCxBsH,QAAS,SAACnP,EAAGC,EAAGkP,G,YACR8d,EAAK1tB,EAAMS,GACXktB,EAAK3tB,EAAMU,GAEjB,GAAIgtB,IAAOC,EAAI,OAAQD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE/C,GAAI3tB,EAAMS,IAAMT,EAAMU,GAAI,CACxB,IAAIwP,EAAO,EACPC,EAAO,E,IAEX,IAAkB,SAAA1P,EAAEwd,QAAM,8BAAE,CAAvB,IAAMjf,EAAG,QACP0B,EAAEqd,IAAI/e,IACTkR,K,qGAIJ,IAAkB,SAAAxP,EAAEud,QAAM,8BAAE,CAAjBjf,EAAG,QACZ,GAAKyB,EAAEsd,IAAI/e,GAEJ,CACL,IAAMlB,EAAI8R,EAAQnP,EAAEnC,IAAIU,GAAM0B,EAAEpC,IAAIU,IAEhClB,EAAI,GAAGoS,IACPpS,EAAI,GAAGqS,SALXA,K,iGASJ,OAAO0B,EAAU5B,WAAWC,EAAMC,OAKxC0B,EAAUrB,UAAU,CAClBoB,SA1Ee,GA2EftJ,KA1EwB,SA2ExBgI,OAAQ,SAAC7P,EAAGC,EAAG4P,G,QAIb,GAHWtQ,EAAMS,KACNT,EAAMU,GAEF,OAAO,EAEtB,GAAIV,EAAMS,IAAMT,EAAMU,GAAI,CACxB,GAAID,EAAEm+B,OAASl+B,EAAEk+B,KACf,OAAO,E,IAGT,IAA2B,SAAAn+B,EAAEyB,WAAS,8BAAE,CAA7B,oBAAClD,EAAA,KAAKN,EAAA,KACf,IAAKgC,EAAEqd,IAAI/e,GACT,OAAO,EACF,IAAKsR,EAAO5R,EAAOgC,EAAEpC,IAAIU,IAC9B,OAAO,G,iGAIX,OAAO,MAKb6S,EAAUN,YAA2B,CACnCK,SArGe,GAsGfhE,QAAS,SAAClP,GAAU,OAAAsB,EAAMtB,IAC1BJ,IAAK,SAACI,EAAOmH,GAAS,OAAAnH,EAAMJ,IAAIuH,IAChCgF,IAAK,SAACnM,EAAOmH,EAAMyL,GAAc,OAAA5S,EAAMmM,IAAIhF,EAAMyL,OAIvC,EAAAyc,QAAd,SAAsB8Q,EAAyBC,QAAA,IAAAA,MAAA,IAE7C,IAAMpgC,EAAQ,GAAM6X,MAAMsoB,GAG1B,OAAO,IAAIL,EAAQ,CAAEx/B,IAFT,GAAMuX,MAAMuoB,GAEEpgC,MAAK,KAG1B,YAAA4T,MAAP,WAEE,OAAOksB,EAAQ7zB,IAGV,YAAA4H,cAAP,WAEE,OAAOisB,EAAQhsB,WAAWxQ,KAGrB,YAAAyQ,MAAP,SAAanK,GAEX,IAAMkU,EAAKrX,KAAK6B,QACVyV,EAAKnU,EAAKtB,QAEhBwV,EAAGxd,IAAM,GAAMyT,MAAM+J,EAAGxd,IAAKyd,EAAGzd,KAChCwd,EAAG9d,MAAQ,GAAM+T,MAAM+J,EAAG9d,MAAO+d,EAAG/d,QAG/B,YAAAgU,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,GAAI,GAAmBqT,GAAG/J,IAEpBxN,KAAK6B,QAAQhI,IAAI4O,QAAQ+E,EAAKjU,OAEhC,OAAOyG,KAAK6B,QAAQtI,MAIxB,IAAIme,EAAWlK,EAAK9I,QAAQlB,EAAKU,GAEjC,OAAIwT,GAIErc,EAFJqc,EAAWA,EAAS3V,cAEM/B,KAAK6B,QAAQhI,KAE9BmG,KAAK6B,QAAQtI,MAIjB,MAGF,YAAAkU,YAAP,SAAmBjK,GAEjB,MAAO,CACL,CAAE3J,IAAKmG,KAAK6B,QAAQhI,IAAKN,MAAOyG,KAAK6B,QAAQtI,SAI1C,YAAAmU,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,OAAOK,aAAiBm3B,GACtBr5B,KAAK6B,QAAQhI,IAAIoI,aAAaC,EAAML,QAAQhI,IAAKgI,IACjD7B,KAAK6B,QAAQtI,MAAM0I,aAAaC,EAAML,QAAQtI,MAAOsI,IAGlD,YAAAgD,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAK24B,EAAQ/f,SAAU,EAAKzX,QAAQhI,IAAK,SAACqH,GAAgB,SAAKW,QAAQhI,IAAMqH,IACtFZ,EAASI,KAAK24B,EAAQ9f,WAAY,EAAK1X,QAAQtI,MAAO,SAAC2H,GAAgB,SAAKW,QAAQtI,MAAQ2H,OAIzF,YAAAoC,gBAAP,SAAuB5C,GAErB,OAAOA,IAAS24B,EAAQ/f,SACpBtZ,KAAK6B,QAAQhI,IACb6G,IAAS24B,EAAQ9f,WACfvZ,KAAK6B,QAAQtI,MACb,MAGD,YAAAqU,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQhI,IAAI+T,UAAU5N,MAC3BA,KAAK6B,QAAQtI,MAAMqU,UAAU5N,OAGxB,YAAA6N,4BAAP,WAEE7N,KAAK6B,QAAQhI,IAAIgU,8BACjB7N,KAAK6B,QAAQtI,MAAMsU,+BAGd,YAAAC,oBAAP,WAEE,OAAO,GAAMxH,GAAGmS,GAAO7e,OAAQ,KAG1B,YAAAmU,sBAAP,WAEE,OAAO,GAAM3F,IACX,GAAM9B,GAAGmS,GAAOhQ,QAAS,CACvBlP,MAAO,GAAMJ,IAAI,WAEnB,GAAMoP,IAAI,GAAMjC,GAAG2f,GAAQQ,SAAU,CACnC/kB,KAAM,GAAM4E,GAAGmS,GAAOd,OAAQ,CAAE9a,IAAK,GAAM1D,IAAI,WAC/C0Q,KAAM,GAAMuG,OACZxH,QAAS,GAAML,IAAIvI,KAAK6B,QAAQtI,MAAMwU,0BACrC,CACDxU,MAAO,SACPqL,KAAM,WAER,GAAM2D,IAAI,GAAMjC,GAAG2f,GAAQQ,SAAU,CACnC/kB,KAAM,GAAM4E,GAAGmS,GAAOK,KAAM,CAAEjc,IAAK,GAAM1D,IAAI,WAC7C0Q,KAAM,GAAMuG,OACZxH,QAAS,GAAML,IAAIvI,KAAK6B,QAAQhI,IAAIkU,0BACnC,CACDxU,MAAO,SACPqL,KAAM,aAKL,YAAAoJ,qBAAP,WAEE,OAAO,GAAM1H,GAAGmS,GAAOjQ,IAAK,CAC1BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,QAChBsR,QAASzK,KAAK6B,QAAQtI,MAAMwU,2BAIzB,YAAAnL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,OAAIhG,IAASu8B,EAAQ/f,SAEZ,GAAMhT,GAAGmS,GAAO5b,IAAK,CAC1BA,IAAK,GAAM1D,IAAI,SACfqgB,aAAc3W,GACb,CACDhJ,IAAK,QACLN,MAAO,gBAKF,GAAM+M,GAAGmS,GAAO5b,IAAK,CAC1BA,IAAK,GAAM1D,IAAI,SACfmF,UAAWuE,KAKV,YAAA4F,QAAP,SAAe7D,GAEb,GAAIA,aAAgB9J,KAAOK,EAASyJ,GACpC,CACQ,mBAAE,IAAA/K,IAAK,IAAAN,MAEb,OAAOyG,KAAK45B,QAAQh1B,GAAM,EAAM,SAACjI,EAAGD,GAClC,IAAK,EAAI+L,QAAQ9L,KAAO,EAAM8L,QAAQ/L,GACpC,OAAO,IAKb,OAAO,GAGF,YAAA0R,UAAP,SAAiBxJ,GAET,mBAAE/K,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MACPwD,EAAwB,GAS9B,OAPAiD,KAAK45B,QAAQh1B,OAAMxG,EAAW,SAACzB,EAAGD,GAChCK,EAAQwB,KAAK,CACX1E,EAAIuU,UAAUzR,GACdpD,EAAM6U,UAAU1R,OAIb,IAAI5B,IAAIiC,IAGT,YAAA68B,QAAR,SAAmB/8B,EAAU2gB,EAAcqc,G,YAEzC,GAAIh9B,aAAe/B,I,IAEjB,IAA2B,SAAA+B,EAAIE,WAAS,8BACxC,CADW,oBAIT,QAAeqB,KAFTgC,EAASy5B,EAFL,KAAK,OAMb,OAAOz5B,G,sGAIR,GAAIjF,EAAS0B,G,IAEhB,IAAmB,SAAAA,GAAG,8BACtB,CADK,IAEGuD,EAFGxB,EAAI,QAIb,QAAeR,KAFTgC,EAASy5B,EAAOj7B,EAAM/B,EAAI+B,KAI9B,OAAOwB,G,iGAKb,OAAOod,GAGF,YAAAnP,YAAP,WAEQ,mBAAExU,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAEb,OAAO,IAAI8/B,EAAQ,CACjBx/B,IAAKA,EAAIwU,cACT9U,MAAOA,EAAM8U,iBAIV,YAAAC,MAAP,WAEQ,mBAAEzU,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAEb,OAAO,IAAI8/B,EAAQ,CACjBx/B,IAAKA,EAAIyU,QACT/U,MAAOA,EAAM+U,WAIV,YAAAxB,OAAP,WAEE,OAAOusB,EAAQvsB,OAAO9M,OAGjB,YAAApG,OAAP,WAEE,OAAO,IAAIkB,KAGN,YAAAyT,OAAP,SAAcC,GAMZ,IAJM,mBAAE3U,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MACPQ,EAAIyU,EA9bK,EA8bW,GAAgB,GACpCvQ,EAAM,IAAInD,IAEPxC,EAAI,EAAGA,EAAIyB,EAAGzB,IACvB,CACE,IAAMqE,EAAI9C,EAAI0U,OAAOC,GACf9R,EAAInD,EAAMgV,OAAOC,GAEvBvQ,EAAIyH,IAAI/I,EAAGD,GAGb,OAAOuB,GAGF,YAAA6N,SAAP,SAAgBC,GAER,mBAAElS,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAEb,OAAO,IAAIuB,IAAIiR,EAAKlP,IAAI,SAAC,G,IAAA,UAACF,EAAA,KAAGD,EAAA,KAAO,OAClC7C,EAAIiS,SAASnP,GACbpD,EAAMuS,SAASpP,QAIZ,YAAAmP,OAAP,SAAchP,GAEN,mBAAEhD,EAAA,EAAAA,IAAKN,EAAA,EAAAA,MAEb,OAAOmB,MAAMoC,KAAKD,EAAIE,WAAWF,IAAI,SAAC,G,IAAA,UAACF,EAAA,KAAGD,EAAA,KAAO,OAC/C7C,EAAIgS,OAAOlP,GACXpD,EAAMsS,OAAOnP,OAhdH,EAAA4c,SAAW,MAEX,EAAAC,WAAa,QAEb,EAAA/T,GAAKoB,EAAG9L,IAER,EAAAuS,WAAakL,GAEb,EAAA9J,UAAY+J,GAEZ,EAAAvL,SAAW,IAAIosB,EAAQ,CAAEx/B,IAAK,GAASoT,SAAU1T,MAAO,GAAQ0T,WAmBhE,EAAAyB,iBAA2B,EAqB3B,EAAAC,YAAsB,EAkatC,EAvdA,CAA6B,G,4UCX7B,4B,+CAuOA,OAvOkC,QAalB,EAAAhC,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAIu0B,EAFEv0B,EAAMb,QAAQkI,EAlBZ,MAuBH,EAAAE,OAAd,SAAqB3J,GAEnB,MAAO,CAACnD,KAAKwF,GAAIrC,EAAKtB,QAAQiL,WAKlB,EAAAC,SAAd,SAAuBH,EAAWI,GAEhC,OAAO,MAKK,EAAAE,SAAd,aAKc,EAAA2P,IAAd,SAAkB1Z,GAEhB,OAAO,IAAI22B,EAAa,GAAM1oB,MAAMjO,KAG/B,YAAAiK,cAAP,WAEE,OAAOpN,KAAK6B,QAAQuL,iBAGf,YAAAD,MAAP,WAEE,OAAO2sB,EAAat0B,IAGf,YAAA8H,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAOlE,KAAK6B,QAAQ0L,WAAWC,EAAMhK,EAAKU,IAGrC,YAAAuJ,YAAP,SAAmBjK,GAEjB,OAAOxD,KAAK6B,QAAQ4L,YAAYjK,IAG3B,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,KAAK6B,QAAQ6L,aAAanU,IAG5B,YAAA6I,kBAAP,WAEE,OAAOpC,MAGF,YAAA+B,YAAP,WAEE,OAAO/B,KAAK6B,SAGJ,YAAAU,iBAAV,SAA2BL,EAAaL,GAEtC,OAAOK,aAAiB43B,EACpB95B,KAAK6B,QAAQI,aAAaC,EAAML,QAASA,GACzC7B,KAAK6B,QAAQI,aAAaC,EAAOL,IAGhC,YAAAgD,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO3N,KAAK6B,QAAQ8L,YAGZ,YAAArL,kBAAV,WAEE,OAAO,GAGF,YAAAhC,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAAM,EAASI,KAAKo5B,EAAaC,cAAe,EAAKl4B,QAAS,SAACX,GAAgB,SAAKW,QAAUX,OAIrF,YAAAoC,gBAAP,SAAuB5C,GAErB,OAAOA,IAASo5B,EAAaC,cACzB/5B,KAAK6B,QACL,MAGC,YAAA+L,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQ+L,UAAU5N,OAGlB,YAAA6N,4BAAP,WAEE7N,KAAK6B,QAAQgM,+BAGR,YAAAC,oBAAP,WAEE,OAAO9N,KAAK6B,QAAQiM,uBAGf,YAAAC,sBAAP,WAEE,OAAO,GAAM1F,GACX,GAAM/B,GAAGoJ,GAAO9G,QAAS,CACvBrP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMxG,cAEd4B,KAAK6B,QAAQkM,0BAIV,YAAAC,qBAAP,WAEE,OAAO,GAAMhW,OAAO,CAClBgiC,aAAc,GAAM1zB,GAAGoJ,GAAO9G,QAAS,CACrCrP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMxG,cAEd67B,YAAa,GAAM3zB,GAAGoJ,GAAO9G,QAAS,CACpCrP,MAAO,GAAMJ,IAAI,QACjByL,KAAM,GAAMxG,eAEb,GACA4f,GAAG,GAAM5V,IAAI,GAAMjP,IAAI,gBAAiB,GAAMA,IAAI,iBAClD8kB,KAAK,GAAMwM,gBACXzM,GAAG,GAAM7kB,IAAI,iBACb8kB,KAAK,GAAMyM,eACX1M,GAAG,GAAM7kB,IAAI,gBACb8kB,KAAK,GAAM0M,kBACXxM,KAAKne,KAAK6B,QAAQmM,0BAIhB,YAAApL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,OAAO,GACJkb,GAAGhe,KAAK6B,QAAQkM,yBAChBkQ,KAAKpb,GACLsb,KAAK,GAAMhlB,IAAI,WAIb,YAAAsP,QAAP,SAAelP,GAEb,OAAOA,SAEFyG,KAAK6B,QAAQ4G,QAAQlP,IAGrB,YAAA6U,UAAP,SAAiB7U,GAEf,OAAOA,QACHA,EACAyG,KAAK6B,QAAQuM,UAAU7U,IAGtB,YAAA8U,YAAP,WAEE,OAAO,IAAIyrB,EAAa95B,KAAK6B,QAAQwM,gBAGhC,YAAAC,MAAP,WAEE,OAAO,IAAIwrB,EAAa95B,KAAK6B,QAAQyM,UAGhC,YAAAxB,OAAP,WAEE,OAAOgtB,EAAahtB,OAAO9M,OAGtB,YAAApG,OAAP,WAEE,OAAOoG,KAAK6B,QAAU7B,KAAK6B,QAAQjI,cAAWwE,GAGzC,YAAAmQ,OAAP,SAAcC,GAEZ,OAAOxO,KAAK6B,SAAW2M,EAAI,EAAG,GAAG,GA1Nf,GA2NdxO,KAAK6B,QAAQ0M,OAAOC,QACpBpQ,GAGC,YAAA0N,SAAP,SAAgBC,GAEd,OAAOA,aAAsC3N,EAAY4B,KAAK6B,QAAQiK,SAASC,IAG1E,YAAAF,OAAP,SAActS,GAEZ,OAAOA,aAAwC6E,EAAY4B,KAAK6B,QAAQgK,OAAOtS,IAjOnE,EAAAwgC,cAAgB,WAEhB,EAAAv0B,GAAKoB,EAAGY,SAER,EAAA6F,WAAa,IAAItF,EAAWnB,EAAGY,SAAWZ,EAAGiB,WAE7C,EAAA4G,UAAY,IAAIxG,EAAUrB,EAAGY,SAAWZ,EAAGiB,WAE3C,EAAAoF,SAAW,IAAI6sB,EAAa,GAAQ7sB,UAcpC,EAAAyB,kBAA4B,EAO5B,EAAAC,YAAsB,EAuMtC,EAvOA,CAAkC,G,ynBCHlC,4B,+CAmMA,OAnM6B,QAWb,EAAAhC,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAI20B,EAFCttB,EAfE,GAec/P,IAAI,SAACjE,GAAW,OAAA2M,EAAMb,QAAQ9L,OAK9C,EAAAkU,OAAd,SAAqB3J,GAEnB,IAAMoF,EAAMpF,EAAKtB,QAAQhF,IAAI,SAAArD,GAAK,OAAAA,EAAEsT,WAEpC,MAAO,CAAC9M,KAAKwF,GAAI+C,IAKL,EAAAwE,SAAd,SAAuBH,EAAWI,GAEhC,OAAO,MAKK,EAAAE,SAAd,aAKO,YAAAE,cAAP,WAEE,MAAO,IAGD,YAAA+sB,OAAR,SAAmB3c,EAAcjZ,G,QAEzBgE,EAAMvI,KAAK6B,Q,IAEjB,IAAmB,SAAA0G,GAAG,8BACtB,CADK,IAEGnI,EAASmE,EAFF,SAIb,QAAenG,IAAXgC,EAEF,OAAOA,G,iGAIX,OAAOod,GAGF,YAAArQ,MAAP,WAEE,OAAO+sB,EAAQ10B,IAGV,YAAA8H,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAO,MAGF,YAAAuJ,YAAP,SAAmBjK,GAEjB,MAAO,IAGF,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,OAAO7B,KAAKm6B,QAAO,EAAM,SAAA5xB,GAAO,OAAAA,EAAItG,aAAaC,EAAOL,SAAmBzD,KAGnE,YAAAkE,kBAAV,WAEE,OAAO,GAGF,YAAAuC,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,SAAK6B,QAAQhF,IAAI,SAACsG,EAAM4G,GAAU,OAAAzJ,EAASI,KAAKqJ,EAAO5G,EAAM,SAACjC,GAAgB,SAAKW,QAAQmI,OAAOD,EAAO,EAAG7I,IAAc,WAAM,SAAKW,QAAQmI,OAAOD,EAAO,UAIxJ,YAAAzG,gBAAP,SAAuB5C,GAErB,OAAOV,KAAK6B,QAAQnB,IAAS,MAGxB,YAAAkN,UAAP,SAAiB9L,GAAjB,gBAAiB,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQwE,QAAQ,SAAA7M,GAAK,OAAAA,EAAEoU,UAAU,MAGjC,YAAAC,4BAAP,WAEE7N,KAAK6B,QAAQwE,QAAQ,SAAA7M,GAAK,OAAAA,EAAEqU,iCAGvB,YAAAC,oBAAP,WAEE,OAAO,GAAauC,UAGf,YAAAtC,sBAAP,WAEE,OAAO,GAAasC,UAGf,YAAArC,qBAAP,WAEE,OAAO,GAAaqC,UAGf,YAAA5H,QAAP,SAAelP,GAEb,OAAOyG,KAAKm6B,QAAO,EAAM,SAAApB,GAAQ,OAAAA,EAAKtwB,QAAQlP,SAAiB6E,KAG1D,YAAAgQ,UAAP,SAAiB7U,GAEf,OAAOyG,KAAKm6B,OAAO5gC,EAAO,SAAAw/B,GAAQ,OAAAA,EAAKtwB,QAAQlP,GAAS,UAAO6E,KAG1D,YAAAiQ,YAAP,WAEE,OAAO,IAAI6rB,EAAQ,KAGd,YAAA5rB,MAAP,WAEE,OAAO,IAAI4rB,EAAQl6B,KAAK6B,QAAQhF,IAAI,SAAAwS,GAAK,OAAAA,EAAEf,YAGtC,YAAAxB,OAAP,WAEE,OAAOotB,EAAQptB,OAAO9M,OAGjB,YAAApG,OAAP,WAEE,OAAO,MAGF,YAAA2U,OAAP,SAAcC,GAEZ,OAAO,MAGF,YAAA1C,SAAP,SAAgBC,GAEd,OAAO,GAAQkB,SAASnB,SAASC,IAG5B,YAAAF,OAAP,SAActS,GAEZ,OAAO,GAAQ0T,SAASpB,OAAOtS,IA7LnB,EAAAiM,GAAKoB,EAAGS,IAER,EAAAgG,WAAa,IAAItF,EAAWnB,EAAGS,IAAMT,EAAGiB,WAExC,EAAA4G,UAAY,IAAIxG,EAAUrB,EAAGS,IAAMT,EAAGiB,WAEtC,EAAAoF,SAAW,IAAIitB,EAAQ,CAAC,GAAQjtB,WAgBhC,EAAAyB,kBAA4B,EAO5B,EAAAC,YAAsB,EAmKtC,EAnMA,CAA6B,GCRhByrB,GAAkB,IAAIryB,EAAWnB,EAAGI,MAAQJ,EAAGiB,WAE/CwyB,GAAiB,IAAIpyB,EAAUrB,EAAGI,MAAQJ,EAAGiB,WAEpD,GAAMuyB,GAGCE,GACb,CAIE1gC,OAAQ,GAAI8L,IAAI,SAAU,IAI1ByC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7B8C,IAAK,GAAI9C,IAAI,MAAO,GAAI,CAAC,QAAS,SAElC4F,KAAM,GAAI5F,IAAI,OAAQ,GAAI,CAAC,UAE3B4c,MAAO,GAAI5c,IAAI,QAAS,GAAI,CAAC,IAAK,IAAK,KAAM,CAAC,MAE9C7I,IAAK,GAAI6I,IAAI,MAAO,GAAI,CAAC,QAAS,IAAK,IAAK,KAAM,CAAC,KAAM,CAAC,QAAS,aAAc,CAAC,IAAK,IAAK,IAAK,MAEjGY,GAAI,GAAIZ,IAAI,KAAM,GAAI,CAAC,QAAS,OAAQ,IAAK,IAAK,KAAM,CAAC,KAAM,CAAC,QAAS,OAAQ,aAAc,CAAC,IAAK,IAAK,IAAK,MAE/GtJ,MAAO,GAAIsJ,IAAI,QAAS,GAAI,CAAC,UAE7BtI,IAAK,GAAIsI,IAAI,IAAK,GAAI,CAAC,QAAS,UAAW,CAAC,UAE5C60B,KAAM,GAAI70B,IAAI,KAAM,GAAI,CAAC,QAAS,SAAU,eAAgB,CAAC,UAE7DiP,IAAK,GAAIjP,IAAI,IAAK,GAAI,CAAC,QAAS,cAAe,CAAC,UAEhDyd,IAAK,GAAIzd,IAAI,IAAK,GAAI,CAAC,QAAS,cAAe,CAAC,UAEhD0d,IAAK,GAAI1d,IAAI,IAAK,GAAI,CAAC,QAAS,WAAY,CAAC,UAE7C2d,IAAK,GAAI3d,IAAI,IAAK,GAAI,CAAC,QAAS,WAAY,CAAC,UAE7C80B,OAAQ,GAAI90B,IAAI,SAAU,GAAI,CAAC,QAAS,WAExC0L,MAAO,GAAI1L,IAAI,QAAS,GAAI,CAAC,UAE7Byf,KAAM,GAAIzf,IAAI,OAAQ,GAAI,CAAC,QAAS,MAAO,UAE3C+0B,QAAS,GAAI/0B,IAAI,UAAW,GAAI,CAAC,QAAS,WAE1Cg1B,OAAQ,GAAIh1B,IAAI,SAAU,GAAI,CAAC,QAAS,WAExCi1B,MAAO,GAAIj1B,IAAI,QAAS,GAAI,CAAC,UAE7Bk1B,QAAS,GAAIl1B,IAAI,QAAS,GAAI,CAAC,UAE/Bm1B,UAAW,GAAIn1B,IAAI,YAAa,GAAI,CAAC,UAErCo1B,SAAU,GAAIp1B,IAAI,WAAY,GAAI,CAAC,QAAS,SAE5Cq1B,OAAQ,GAAIr1B,IAAI,SAAU,GAAI,CAAC,SAAU,CAAC,UAE1Cs1B,OAAQ,GAAIt1B,IAAI,SAAU,GAAI,CAAC,UAE/Bu1B,MAAO,GAAIv1B,IAAI,QAAS,GAAI,CAAC,QAAS,UAEtCyP,SAAU,GAAIzP,IAAI,WAAY,GAAI,CAAC,QAAS,SAE5CoZ,MAAO,GAAIpZ,IAAI,QAAS,GAAI,CAAC,SAE7Bw1B,QAAS,GAAIx1B,IAAI,UAAW,GAAI,CAAC,UAEjCy1B,MAAO,GAAIz1B,IAAI,QAAS,GAAI,CAAC,MAAO,SAAU,SAI9C+C,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BkD,QAAS,GAAIlD,IAAI,IAAK,GAAI,CAAC,QAAS,QAAS,CAAC,YAE9CmD,WAAY,GAAInD,IAAI,KAAM,GAAI,CAAC,QAAS,QAAS,CAAC,YAElDqK,OAAQ,GAAIrK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEnCsK,cAAe,GAAItK,IAAI,KAAM,GAAI,CAAC,QAAS,SAE3CuK,UAAW,GAAIvK,IAAI,IAAK,GAAI,CAAC,QAAS,SAEtCwK,iBAAkB,GAAIxK,IAAI,KAAM,GAAI,CAAC,QAAS,SAI9CoD,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpCq/B,GAAe30B,IAAI,QAAS40B,GAASK,OACrCN,GAAe30B,IAAI,YAAa40B,GAASO,WACzCR,GAAe30B,IAAI,WAAY40B,GAASS,QACxCV,GAAe30B,IAAI,SAAU40B,GAASU,QACtCX,GAAe30B,IAAI,OAAQ40B,GAASY,SC1H7B,IAAME,GAAgB,EAChBC,GAAgB,IAUtB,SAASC,GAAQ5/B,GAEtB,OAAOP,EAASO,IAAMpB,EAASoB,EAAEtC,IAAMkB,EAASoB,EAAE6/B,IAAMjhC,EAASoB,EAAEH,GAG9D,SAASigC,GAAe9/B,GAE7B,OAAOU,EAAMR,KAAKE,MAAMJ,GAAI0/B,GAAeC,ICE7C,kBAUE,WAAmBI,EAAc5iC,GAE/BmH,KAAKy7B,KAAOA,EACZz7B,KAAKnH,KAAOA,EACZmH,KAAK07B,UAAY,GACjB17B,KAAK27B,QAAU,GA+BnB,OA5BS,YAAAC,QAAP,SAAez4B,GAIb,OAFAnD,KAAKmD,KAAOA,EAELnD,MAGF,YAAA67B,WAAP,SAAkBC,GAIhB,OAFA97B,KAAK87B,QAAUA,EAER97B,MAGF,YAAA+7B,aAAP,SAAoBC,GAIlB,OAFAh8B,KAAKg8B,UAAYA,EAEVh8B,MAGF,YAAAi8B,UAAP,SAAiBzB,GAKf,OAHAx6B,KAAK07B,UAAUlB,EAAOiB,MAAQjB,EAC9Bx6B,KAAK27B,QAAQp9B,KAAKi8B,GAEXx6B,MAEX,EA9CA,G,2RChBak8B,GAAgB,IAAIC,GAAkB,MAAO,OACvDN,WAAW,SAACO,GAAU,OAAAA,IACtBL,aAAa,SAACK,GAAU,OAAAA,IACxBH,UAAU,CACTR,KAAM,UACN5iC,KAAM,UACN67B,OAAQ,SAAC9nB,GACP,OAAK0uB,GAAQ1uB,GAINA,EAHE,MAKXyvB,UAAW,SAACD,GACV,OAAOA,KAGVH,UAAU,CACTR,KAAM,UACN5iC,KAAM,WACN67B,OAAQ,SAAC9nB,GACP,OAAO,MAETyvB,UAAW,SAACD,GACV,OAAIA,EAAM9gC,IAAM+/B,GAKP,IAJGiB,GAAUF,EAAMhjC,GAChBkjC,GAAUF,EAAMb,GAChBe,GAAUF,EAAM7gC,GASnB,QALGigC,GAAeY,EAAMhjC,GAKV,IAJXoiC,GAAeY,EAAMb,GAIA,IAHrBC,GAAeY,EAAM7gC,GAGU,IAF/BigC,GAAeY,EAAM9gC,GAAK+/B,GAEe,OAIxDY,UAAU,CACTR,KAAM,WACN5iC,KAAM,aACN67B,OAAQ,SAAC9nB,GACP,IAAKpS,EAASoS,GACZ,OAAO,KAGT,IAAMzP,EAAU,qCAAqCy3B,KAAKhoB,GAC1D,IAAKzP,EACH,OAAO,KAGH,cAAG/D,EAAA,KAAGmiC,EAAA,KAAGhgC,EAAA,KAEf,MAAO,CACLnC,EAAGyY,SAASzY,EAAIA,EAAG,IACnBmiC,EAAG1pB,SAAS0pB,EAAIA,EAAG,IACnBhgC,EAAGsW,SAAStW,EAAIA,EAAG,IACnBD,EAAG+/B,KAGPgB,UAAW,SAACD,GAKV,MAAO,IAJGE,GAAUF,EAAMhjC,GAAGgG,UAAU,EAAG,GAChCk9B,GAAUF,EAAMb,GAAGn8B,UAAU,EAAG,GAChCk9B,GAAUF,EAAM7gC,GAAG6D,UAAU,EAAG,MAK7C68B,UAAU,CACTR,KAAM,MACN5iC,KAAM,gBACN67B,OAAQ,SAAC9nB,GACP,IAAKpS,EAASoS,GACZ,OAAO,KAGT,IAAMzP,EAAU,8CAA8Cy3B,KAAKhoB,GACnE,IAAKzP,EACH,OAAO,KAGH,cAAG/D,EAAA,KAAGmiC,EAAA,KAAGhgC,EAAA,KAEf,MAAO,CACLnC,EAAGyY,SAASzY,EAAG,IACfmiC,EAAG1pB,SAAS0pB,EAAG,IACfhgC,EAAGsW,SAAStW,EAAG,IACfD,EAAG+/B,KAGPgB,UAAW,SAACD,GAKV,MAAO,IAJGE,GAAUF,EAAMhjC,GAChBkjC,GAAUF,EAAMb,GAChBe,GAAUF,EAAM7gC,MAK7B0gC,UAAU,CACTR,KAAM,UACN5iC,KAAM,kBACN67B,OAAQ,SAAC9nB,GACP,IAAKpS,EAASoS,GACZ,OAAO,KAGT,IAAMzP,EAAU,2DAA2Dy3B,KAAKhoB,GAChF,IAAKzP,EACH,OAAO,KAGH,cAAG/D,EAAA,KAAGmiC,EAAA,KAAGhgC,EAAA,KAAGD,EAAA,KAElB,MAAO,CACLlC,EAAGyY,SAASzY,EAAG,IACfmiC,EAAG1pB,SAAS0pB,EAAG,IACfhgC,EAAGsW,SAAStW,EAAG,IACfD,EAAGuW,SAASvW,EAAG,MAGnB+gC,UAAW,SAACD,GAMV,MAAO,IALGE,GAAUF,EAAMhjC,GAChBkjC,GAAUF,EAAMb,GAChBe,GAAUF,EAAM7gC,GAChB+gC,GAAUF,EAAM9gC,MAK7B2gC,UAAU,CACTR,KAAM,MACN5iC,KAAM,eACN67B,OAAQ,SAAC9nB,GACP,IAAKpS,EAASoS,GACZ,OAAO,KAGT,IAAMzP,EAAU,kEAAkEy3B,KAAKhoB,GACvF,IAAKzP,EACH,OAAO,KAGH,cAAG/D,EAAA,KAAGmiC,EAAA,KAAGhgC,EAAA,KAEf,MAAO,CACLnC,EAAGmjC,GAAenjC,GAClBmiC,EAAGgB,GAAehB,GAClBhgC,EAAGghC,GAAehhC,GAClBD,EAAG+/B,KAGPgB,UAAW,SAACD,GAKV,MAAO,OAJGZ,GAAeY,EAAMhjC,GAIX,IAHVoiC,GAAeY,EAAMb,GAGD,IAFpBC,GAAeY,EAAM7gC,GAES,OAG3C0gC,UAAU,CACTR,KAAM,OACN5iC,KAAM,mBACN67B,OAAQ,SAAC9nB,GACP,IAAKpS,EAASoS,GACZ,OAAO,KAGT,IAAMzP,EAAU,yFAAyFy3B,KAAKhoB,GAC9G,IAAKzP,EACH,OAAO,KAGH,cAAG/D,EAAA,KAAGmiC,EAAA,KAAGhgC,EAAA,KAAGD,EAAA,KAElB,MAAO,CACLlC,EAAGmjC,GAAenjC,GAClBmiC,EAAGgB,GAAehB,GAClBhgC,EAAGghC,GAAehhC,GAClBD,EAAGkgC,GAAe5/B,KAAKqoB,MAAMuY,WAAWlhC,GAAK+/B,OAGjDgB,UAAW,SAACD,GAMV,MAAO,QALGZ,GAAeY,EAAMhjC,GAKV,IAJXoiC,GAAeY,EAAMb,GAIA,IAHrBC,GAAeY,EAAM7gC,GAGU,IAF/BigC,GAAeY,EAAM9gC,GAAK+/B,GAEe,OAKzD,SAASkB,GAAe7gC,GAEtB,OAA2B,IAApBA,EAAEkZ,QAAQ,KACb4mB,GAAe3pB,SAASnW,EAAG,KAC3B8/B,GAA4D,KAA7C3pB,SAASnW,EAAE0D,UAAU,EAAG1D,EAAEM,OAAS,GAAI,KAG5D,SAASsgC,GAAU5gC,GAEjB,OAAOyD,EAAIq8B,GAAe9/B,GAAG+gC,SAAS,IAAK,EAAG,KAAK,G,+RCtM9C,SAASC,GAAWhhC,GAEzB,OAAOP,EAASO,IAAMpB,EAASoB,EAAEihC,IAAMriC,EAASoB,EAAErB,IAAMC,EAASoB,EAAEnD,GAI9D,IAAMqkC,GAAgB,IAAIT,GAAqB,MAAO,OAC1DP,QAAQ,IAAI,GAAW,CAACj9B,MAAO,CAC9Bg+B,EAAG,IAAI,GAAW,CAAEtgC,IAAK,EAAGC,IAAK,IAAKwuB,OAAO,IAC7CzwB,EAAG,IAAI,GAAW,CAAEgC,IAAK,EAAGC,IAAK,IAAKwuB,OAAO,IAC7CvyB,EAAG,IAAI,GAAW,CAAE8D,IAAK,EAAGC,IAAK,IAAKwuB,OAAO,IAC7CxvB,EAAG,IAAI,GAAW,CAAEe,IAAK,EAAGC,IAAK,IAAKwuB,OAAO,QAE9C+Q,WAAW,SAACO,GACX,IAAMS,EAAIC,GAAaV,EAAMO,GACvBI,EAAIC,GAAaZ,EAAM7jC,GAAK,IAC5B0kC,EAAID,GAAaZ,EAAM/hC,GAAK,IAC5B6iC,GAAK,EAAIthC,KAAKC,IAAI,EAAIkhC,EAAI,IAAME,EAChCE,EAAID,GAAK,EAAIthC,KAAKC,IAAMghC,EAAI,GAAM,EAAK,IACvCnkC,EAAIqkC,EAAIG,EAAI,EAMZE,EAAKP,GAAK,IACZ,EACAA,GAAK,IAAMA,EAAI,IACbK,EACAC,EACAE,EAAKR,GAAK,IACZ,EACAA,GAAK,KAAOA,EAAI,IACdK,EACAC,EAEN,MAAO,CACL/jC,EAAGoiC,KAjBMqB,EAAI,IAAMA,GAAK,IACtBK,EACAL,GAAK,KAAOA,EAAI,IACd,EACAM,GAaoBzkC,GAAK2iC,IAC7BE,EAAGC,IAAgB4B,EAAK1kC,GAAK2iC,IAC7B9/B,EAAGigC,IAAgB6B,EAAK3kC,GAAK2iC,IAC7B//B,EAAG8gC,EAAM9gC,KAGZygC,aAAa,SAACK,GACb,IAAMkB,EAAI9B,GAAeY,EAAMhjC,GACzBmkC,EAAI/B,GAAeY,EAAMb,GACzBiC,EAAIhC,GAAeY,EAAM7gC,GACzBkiC,EAAKH,EAAIjC,GACT+B,EAAKG,EAAIlC,GACTgC,EAAKG,EAAInC,GACTqC,EAAO9hC,KAAKU,IAAImhC,EAAIL,EAAIC,GACxBM,EAAO/hC,KAAKS,IAAIohC,EAAIL,EAAIC,GACxBO,EAAQF,EAAOC,EACfZ,GAAKW,EAAOC,GAAQ,EACpBhB,EAAc,IAAViB,EACN,EACAF,IAASD,GACLL,EAAKC,GAAMO,EAAS,EACtBF,IAASN,GACLC,EAAKI,GAAMG,EAAS,GACpBH,EAAKL,GAAMQ,EAAS,EACxBvjC,EAAc,IAAVujC,EACN,EACAA,GAAS,EAAIhiC,KAAKC,IAAI,EAAIkhC,EAAI,IAElC,MAAO,CACLJ,EAAGG,GAAalhC,KAAKE,MAAU,GAAJ6gC,IAC3BtiC,EAAG2iC,GAAaphC,KAAKE,MAAU,IAAJzB,IAC3B9B,EAAGykC,GAAaphC,KAAKE,MAAU,IAAJihC,IAC3BzhC,EAAG8gC,EAAM9gC,KAGZ2gC,UAAU,CACTR,KAAM,MACN5iC,KAAM,MACN67B,OAAQ,SAAC9nB,GACP,IAAKpS,EAASoS,GACZ,OAAO,KAGT,IAAMzP,EAAU,8DAA8Dy3B,KAAKhoB,GACnF,IAAKzP,EACH,OAAO,KAGH,cAAGw/B,EAAA,KAAGtiC,EAAA,KAAG9B,EAAA,KAEf,MAAO,CACLokC,EAAGG,GAAajrB,SAAS8qB,EAAG,KAC5BtiC,EAAG2iC,GAAanrB,SAASxX,EAAG,KAC5B9B,EAAGykC,GAAanrB,SAAStZ,EAAG,KAC5B+C,EAAG+/B,KAGPgB,UAAW,SAACD,GAKV,MAAO,OAJGU,GAAalhC,KAAKE,MAAMsgC,EAAMO,IAIpB,IAHVK,GAAaphC,KAAKE,MAAMsgC,EAAM/hC,IAGV,KAFpB2iC,GAAaphC,KAAKE,MAAMsgC,EAAM7jC,IAEC,QAG5C0jC,UAAU,CACTR,KAAM,OACN5iC,KAAM,OACN67B,OAAQ,SAAC9nB,GACP,IAAKpS,EAASoS,GACZ,OAAO,KAGT,IAAMzP,EAAU,qFAAqFy3B,KAAKhoB,GAC1G,IAAKzP,EACH,OAAO,KAGH,cAAGw/B,EAAA,KAAGtiC,EAAA,KAAG9B,EAAA,KAAG+C,EAAA,KAElB,MAAO,CACLqhC,EAAGG,GAAajrB,SAAS8qB,EAAG,KAC5BtiC,EAAG2iC,GAAanrB,SAASxX,EAAG,KAC5B9B,EAAGykC,GAAanrB,SAAStZ,EAAG,KAC5B+C,EAAGkgC,GAAe5/B,KAAKqoB,MAAMuY,WAAWlhC,GAAK+/B,OAGjDgB,UAAW,SAACD,GAMV,MAAO,QALGU,GAAalhC,KAAKE,MAAMsgC,EAAMO,IAKnB,IAJXK,GAAaphC,KAAKE,MAAMsgC,EAAM/hC,IAIT,KAHrB2iC,GAAaphC,KAAKE,MAAMsgC,EAAM7jC,IAGE,KAFhCijC,GAAeY,EAAM9gC,GAAK+/B,GAEiB,OAK3D,SAASyB,GAAaH,GAEpB,OAAOA,EAAI,EACP,IAAM/gC,KAAKC,IAAI8gC,EAAI,KACnBA,EAAI,IAGV,SAASK,GAAathC,GAEpB,OAAOU,EAAMV,EAAG,EAAG,K,ymCCtIrB,eA0EE,WAAmBmiC,G,YAAA,IAAAA,MAAA,IAEjB,qBACKA,GAAY,CACfl/B,MAAOm/B,EAAUC,mBACjB,KAqJN,OApO+B,QA6Bf,EAAApxB,OAAd,SAAqBC,GAEnB,OAAO,IAAIkxB,EAAUlxB,EAxCH,IAwC0B,KAGhC,EAAAE,OAAd,SAAqB3J,GAEnB,OAAOA,EAAKtB,QAAQm8B,SAChB,CAACh+B,KAAKwF,GAAI,CAAEw4B,UAAU,IACtBh+B,KAAKwF,IAKG,EAAAuH,SAAd,SAAuBH,GAErB,IAAMqoB,EAAS6I,EAAU7wB,SAASmB,UAAUxB,GAE5C,OAAKqoB,EAKE,IAAI6I,EAAU,CACnBE,SAAU/I,EAAO35B,IAAM+/B,KAJhB,MAUG,EAAAnuB,SAAd,aAKc,EAAA+wB,UAAd,SAAwBz4B,GAEhB,yBAAC04B,EAAA,KAASC,EAAA,KACVC,EAAQp+B,KAAKq+B,OAAOhtB,KAAK,SAAChX,GAAM,OAAAA,EAAEohC,OAASyC,IAEjD,OAAOE,EACHA,EAAM1C,UAAUyC,QAChB//B,GAWC,YAAA+O,MAAP,WAEE,OAAO2wB,EAAUt4B,IAGZ,YAAA4H,cAAP,WAEE,OAAO0wB,EAAUzwB,WAAWxQ,KAGvB,YAAAyQ,MAAP,SAAanK,GAEX,IAAMkU,EAAKrX,KAAK6B,QACVyV,EAAKnU,EAAKtB,QAEhBwV,EAAG2mB,SAAW3mB,EAAG2mB,UAAY1mB,EAAG0mB,UAGxB,YAAAz7B,iBAAV,SAA2BL,EAAaL,GAEtC,OAAIK,aAAiB47B,KAKhBj8B,EAAQQ,QACRR,EAAQM,SACTD,aAAiB,MACjBA,EAAMD,aAAajC,QAQlB,YAAA6E,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAAE,4BAAP,WAEE,YAAMA,4BAA2B,kBAE1B7N,KAAK6B,QAAQm8B,UAGf,YAAAlwB,oBAAP,WAEE,OAAO,GAAMxH,GAAGg0B,GAAS1gC,OAAQ,KAG5B,YAAAmU,sBAAP,WAEE,OAAO,GAAMzH,GAAGg0B,GAAS7xB,QAAS,CAChClP,MAAO,GAAMJ,IAAI,YAId,YAAA6U,qBAAP,WAEE,OAAO,GAAM1H,GAAGg0B,GAAS9xB,IAAK,CAC5BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAsP,QAAP,SAAelP,GAEb,YAAiC6E,IAA1B4B,KAAKoO,UAAU7U,IAGjB,YAAA6U,UAAP,SAAiB7U,G,gBAEf,IAAoB,SAAAukC,EAAUO,QAAM,8BACpC,CADK,IAAMD,EAAK,Q,IAEd,IAAsB,mBAAAA,EAAMzC,UAAO,8BACnC,CADK,IAEG1G,EAFU,QAEOP,OAAOn7B,GAE9B,GAAe,OAAX07B,EAEF,OAAOmJ,EAAMtC,QAAQ7G,I,sMAMtB,YAAA5mB,YAAP,WAEE,OAAO,IAAIyvB,EAAU,KAGhB,YAAAxvB,MAAP,WAEE,OAAO,IAAIwvB,EAAU,CACnBE,SAAUh+B,KAAK6B,QAAQm8B,YAIpB,YAAAlxB,OAAP,WAEE,OAAOgxB,EAAUhxB,OAAO9M,OAGnB,YAAApG,OAAP,WAEE,MAAO,CAAER,EAAG,EAAGmiC,EAAG,EAAGhgC,EAAG,EAAGD,EAAG,IAGzB,YAAAiT,OAAP,SAAcC,GAEZ,MAAO,CACLpV,EAAGoV,EAAI4sB,GAAeC,IAAe,GACrCE,EAAG/sB,EAAI4sB,GAAeC,IAAe,GACrC9/B,EAAGiT,EAAI4sB,GAAeC,IAAe,GACrC//B,EAAG+/B,KAIA,YAAAvvB,SAAP,SAAgBC,GAEd,MAAO,CACL3S,EAAG2S,EAAK3S,EACRmiC,EAAGxvB,EAAKwvB,EACRhgC,EAAGwQ,EAAKxQ,EACRD,EAAGyQ,EAAKzQ,IAIL,YAAAuQ,OAAP,SAActS,GAEZ,OAAOA,EAAQ,CACbH,EAAGG,EAAMH,EACTmiC,EAAGhiC,EAAMgiC,EACThgC,EAAGhC,EAAMgC,EACTD,EAAG/B,EAAM+B,GACP,MA9NiB,EAAAgjC,cAAgB,IAAI,GAAW,CACpDjiC,IAAK++B,GACL9+B,IAAK++B,GACLvQ,OAAO,IAGc,EAAAiT,eAAiB,CACtC3kC,EAAG0kC,EAAUQ,cACb/C,EAAGuC,EAAUQ,cACb/iC,EAAGuiC,EAAUQ,cACbhjC,EAAGwiC,EAAUQ,eAGD,EAAAD,OAA4B,CACxCnC,GACAU,IAGY,EAAAp3B,GAAKoB,EAAGI,MAER,EAAAqG,WAAa+sB,GAEb,EAAA3rB,UAAY4rB,GAEZ,EAAAptB,SAAW,IAAI6wB,EAAU,CAAEE,UAAU,IAcrC,EAAAtvB,iBAA2B,EAgB3B,EAAAC,YAAsB,EA2KtC,EApOA,CAA+B,IAyO/ButB,GAAcN,QAAQ,GAAU3uB,UC1PzB,IAAMsxB,GAAgB,IAAIx2B,EAAWnB,EAAG5L,IAAM4L,EAAGiB,WAE3C22B,GAAe,IAAIv2B,EAAUrB,EAAG5L,IAAM4L,EAAGiB,WAEhD,GAAM02B,GAECE,GACb,CAIE7kC,OAAQ,GAAI8L,IAAI,UAEhBgT,WAAY,GAAIhT,IAAI,aAAc,GAAI,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAE5DiT,UAAW,GAAIjT,IAAI,YAAa,GAAI,CAAC,SAAU,GAAI,GAAI,GAAI,CAAC,UAI5DyC,MAAO,GAAIzC,IAAI,QAAS,GAAI,CAAC,UAE7BtI,IAAK,GAAIsI,IAAI,MAAO,CAAEQ,QAAS,CAAC,QAAU,CAAC,MAAO,SAAU,GAAI,GAAI,GAAI,CAAC,QAEzE0S,IAAK,GAAIlT,IAAI,MAAO,GAAI,CAAC,MAAO,UAEhCmT,OAAQ,GAAInT,IAAI,SAAU,CAAEQ,QAAS,CAAC,QAAU,CAAC,MAAO,UAExDyR,OAAQ,GAAIjS,IAAI,SAAU,CAAES,WAAY,GAAK,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEnE6S,MAAO,GAAItT,IAAI,QAAS,CAAEQ,QAAS,CAAC,QAAU,CAAC,OAAQ,GAAI,GAAI,GAAI,CAAC,QAEpEtE,MAAO,GAAI8D,IAAI,QAAS,GAAK,CAAC,QAE9B8C,IAAK,GAAI9C,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,QAAS,SAEjDmF,KAAM,GAAI5F,IAAI,OAAQ,CAAES,WAAY,GAAK,CAAC,OAAQ,CAAC,YAAa,CAAC,MAAO,SAAU,CAAC,YAAa,CAAC,QAEjGtJ,IAAK,GAAI6I,IAAI,MAAO,CAAES,WAAY,GAAK,CAAC,OAAQ,CAAC,aAAc,CAAC,MAAO,SAAU,CAAC,aAAc,CAAC,QAIjGsC,QAAS,GAAI/C,IAAI,IAAK,GAAI,CAAC,UAE3BkD,QAAS,GAAIlD,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,SAEnD0C,WAAY,GAAInD,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,SAEvD4J,OAAQ,GAAIrK,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,SAElD6J,cAAe,GAAItK,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,SAE1D8J,UAAW,GAAIvK,IAAI,IAAK,CAAES,WAAY,GAAK,CAAC,QAAS,SAErD+J,iBAAkB,GAAIxK,IAAI,KAAM,CAAES,WAAY,GAAK,CAAC,QAAS,SAI7D2C,MAAO,GAAIpD,IAAI,IAAMkB,EAAGE,IAAK,GAAI,CAAC,UAElCiC,UAAW,GAAIrD,IAAI,IAAMkB,EAAGG,QAAS,GAAI,CAAC,UAE1CiC,QAAS,GAAItD,IAAI,IAAMkB,EAAGI,MAAO,GAAI,CAAC,UAEtCiC,OAAQ,GAAIvD,IAAI,IAAMkB,EAAGhM,KAAM,GAAI,CAAC,UAEpCsO,OAAQ,GAAIxD,IAAI,IAAMkB,EAAGO,KAAM,GAAI,CAAC,UAEpCgC,MAAO,GAAIzD,IAAI,IAAMkB,EAAG9L,IAAK,GAAI,CAAC,UAElCsO,SAAU,GAAI1D,IAAI,IAAMkB,EAAGW,OAAQ,GAAI,CAAC,UAExC8B,SAAU,GAAI3D,IAAI,IAAMkB,EAAG5N,OAAQ,GAAI,CAAC,UAExCsQ,OAAQ,GAAI5D,IAAI,IAAMkB,EAAGe,KAAM,GAAI,CAAC,UAEpC4B,QAAS,GAAI7D,IAAI,IAAMkB,EAAGgB,MAAO,GAAI,CAAC,UAEtC4B,MAAO,GAAI9D,IAAI,IAAMkB,EAAG5L,IAAK,GAAI,CAAC,WAIpCwjC,GAAa94B,IAAI,OAAQ+4B,GAAOnzB,MAChCkzB,GAAa94B,IAAI,SAAU+4B,GAAO9mB,QAClC6mB,GAAa94B,IAAI,QAAS+4B,GAAO78B,O,OChBrB88B,GAOAC,G,o5BCxDZ,4B,+CAoWA,OApW6B,QAab,EAAAhyB,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAIq5B,EAAQ,CAAErlC,MAFPgM,EAAMb,QAAQkI,EAxBZ,OA6BJ,EAAAE,OAAd,SAAqB3J,GAEX,IAAA5J,EAAA,UAAAA,MAER,MAAO,CAACyG,KAAKwF,GAAIjM,EAAMuT,WAKX,EAAAC,SAAd,SAAuBH,EAAWI,G,QAEhC,IAAKjS,EAAM6R,GAET,OAAO,KAGT,IAAIrT,EAAc,IAAI,GAAQ,I,IAE9B,IAAyB,SAAAqT,EAAK7P,WAAS,8BACvC,CADW,IAAC8hC,EAAD,cAAC,GAEVtlC,EAAQyT,EAAUM,MAAM/T,EAAOslC,I,iGAGjC,OAAO,IAAID,EAAQ,CAAErlC,MAAK,KAKd,EAAA2T,SAAd,WAKER,EAAUV,QAAQ,CAChBS,SAJe,GAKfX,SAAU,SAACC,EAAM6P,GACf,GAAIzgB,EAAS4Q,IAASvR,EAASuR,EAAKwE,OAAuB,QAAdxE,EAAKwE,KAChD,OAAO,IAAIvV,IAAI+Q,EAAKxS,MAAMsD,IAAI+e,KAGlC/P,OAAQ,SAACE,EAAM8P,GACb,GAAI9gB,EAAMgR,GACR,MAAO,CACLwE,KAAM,MACNhX,MAAOmB,MAAMoC,KAAKiP,EAAKhP,WAAWF,IAAIgf,OAM9CnP,EAAUf,UAAU,CAClBc,SArBe,GAsBfnB,KAAM,SAAC5P,EAAG4P,EAAMwQ,G,QACd,GAAI/gB,EAAMW,GAAI,CACZ,IAAMojC,EAAS,IAAI9jC,IAEnB8gB,EAAcpgB,EAAGojC,G,IAEjB,IAAsB,SAAApjC,EAAEqB,WAAS,8BAAE,CAAxB,IAACxD,EAAD,cAAC,GACVulC,EAAO1hC,IAAIkO,EAAK/R,K,iGAGlB,OAAOulC,MAKbpyB,EAAUzB,WAAW,CACnBwB,SAtCe,GAuCftJ,KAtCwB,SAuCxBsH,QAAS,SAACnP,EAAGC,EAAGkP,GACd,IAAM8d,EAAKxtB,EAAMO,GACXktB,EAAKztB,EAAMQ,GAEjB,GAAIgtB,IAAOC,EAAI,OAAQD,EAAK,EAAI,IAAMC,EAAK,EAAI,GAE/C,GAAIztB,EAAMO,IAAMP,EAAMQ,GAAI,CACxB,IAAIktB,EAAKntB,EAAEm+B,KAAOl+B,EAAEk+B,KAEpB,GAAW,IAAPhR,EAAU,CAOZ,IANA,IAAI1d,EAAO,EACPC,EAAO,EAEL+zB,EAAUrkC,MAAMoC,KAAKxB,GACrB0jC,EAAUtkC,MAAMoC,KAAKvB,GAElBjD,EAAI,EAAGA,EAAIymC,EAAQ/iC,OAAQ1D,IAAK,CACvC,IAAMK,EAAI8R,EAAQs0B,EAAQzmC,GAAI0mC,EAAQ1mC,IAElCK,EAAI,GAAGoS,IACPpS,EAAI,GAAGqS,IAGbyd,EAAK/b,EAAU5B,WAAWC,EAAMC,GAGlC,OAAOyd,MAKb/b,EAAUrB,UAAU,CAClBoB,SAxEe,GAyEftJ,KAxEwB,SAyExBgI,OAAQ,SAAC7P,EAAGC,EAAG4P,G,QAIb,GAHWpQ,EAAMO,KACNP,EAAMQ,GAEF,OAAO,EAEtB,GAAIR,EAAMO,IAAMP,EAAMQ,GACtB,CACE,GAAID,EAAEm+B,OAASl+B,EAAEk+B,KAEf,OAAO,E,IAGT,IAAoB,SAAAn+B,GAAC,8BACrB,CADK,IAAM/B,EAAK,QAEd,IAAKgC,EAAEqd,IAAIrf,GAET,OAAO,G,iGAIX,OAAO,OAMD,EAAAqvB,QAAd,SAAsB8Q,GAIpB,OAAO,IAAIkF,EAAQ,CAAErlC,MAFP,GAAM6X,MAAMsoB,MAKrB,YAAAvsB,MAAP,WAEE,OAAOyxB,EAAQp5B,IAGV,YAAA4H,cAAP,WAEE,OAAOwxB,EAAQvxB,WAAWxQ,KAGrB,YAAAyQ,MAAP,SAAanK,GAEX,IAAMkU,EAAKrX,KAAK6B,QACVyV,EAAKnU,EAAKtB,QAEhBwV,EAAG9d,MAAQ,GAAM+T,MAAM+J,EAAG9d,MAAO+d,EAAG/d,QAG/B,YAAAgU,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAO,MAGF,YAAAuJ,YAAP,SAAmBjK,GAEjB,MAAO,IAGF,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,MAGF,YAAAoC,kBAAP,WAEE,OAAOpC,MAGC,YAAAuC,iBAAV,SAA2BL,EAAaL,GAEtC,OAAOK,aAAiB08B,GACtB5+B,KAAK6B,QAAQtI,MAAM0I,aAAaC,EAAML,QAAQtI,MAAOsI,IAGlD,YAAAgD,WAAP,WAEE,OAAO,GAGF,YAAA8I,SAAP,WAEE,OAAO,GAGF,YAAArN,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1BM,EAASI,KAAKk+B,EAAQrlB,WAAY,EAAK1X,QAAQtI,MAAO,SAAC2H,GAAgB,SAAKW,QAAQtI,MAAQ2H,OAIzF,YAAAoC,gBAAP,SAAuB5C,GAErB,OAAOA,IAASk+B,EAAQrlB,WACpBvZ,KAAK6B,QAAQtI,MACb,MAGC,YAAAqU,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,EAEd9B,KAAK6B,QAAQtI,MAAMqU,UAAU5N,OAGxB,YAAA6N,4BAAP,WAEE7N,KAAK6B,QAAQtI,MAAMsU,+BAGd,YAAAC,oBAAP,WAEE,OAAO,GAAMxH,GAAGm4B,GAAO7kC,OAAQ,KAG1B,YAAAmU,sBAAP,WAEE,OAAO,GAAM3F,IACX,GAAM9B,GAAGm4B,GAAOh2B,QAAS,CACvBlP,MAAO,GAAMJ,IAAI,WAEnB,GAAMoP,IAAI,GAAMjC,GAAG2f,GAAQQ,SAAU,CACnC/kB,KAAM,GAAM4E,GAAGm4B,GAAO9mB,OAAQ,CAAEjS,IAAK,GAAMvM,IAAI,WAC/C0Q,KAAM,GAAMuG,OACZxH,QAAS,GAAML,IAAIvI,KAAK6B,QAAQtI,MAAMwU,0BACrC,CACDxU,MAAO,SACPqL,KAAM,aAKL,YAAAoJ,qBAAP,WAEE,OAAO,GAAM1H,GAAGm4B,GAAOj2B,IAAK,CAC1BjP,MAAO,GAAMJ,IAAI,SACjByL,KAAM,GAAMzL,IAAI,WAIb,YAAAyJ,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,OAAO,GAAMwD,GAAGm4B,GAAO5hC,IAAK,CAC1B6I,IAAK,GAAMvM,IAAI,SACfmF,UAAWuE,GACV,CACDtJ,MAAO,WAIJ,YAAAkP,QAAP,SAAe7D,GAEb,GAAIA,aAAgB5J,KAAOP,EAAQmK,GACnC,CACU,mBAAArL,MAER,OAAQmB,MAAMoC,KAAK8H,GAAMkkB,KAAK,SAACpsB,GAAM,OAAC,EAAM+L,QAAQ/L,KAGtD,OAAO,GAGF,YAAA0R,UAAP,SAAiBxJ,GAEP,IAAArL,EAAA,aAAAA,MAER,OAAO,IAAIyB,IAAIN,MAAMoC,KAAK8H,GAAM/H,IAAI,SAACH,GAAM,OAAAnD,EAAM6U,UAAU1R,OAGtD,YAAA2R,YAAP,WAIE,OAAO,IAAIuwB,EAAQ,CACjBrlC,MAHM,aAAAA,MAGO8U,iBAIV,YAAAC,MAAP,WAIE,OAAO,IAAIswB,EAAQ,CACjBrlC,MAHM,aAAAA,MAGO+U,WAIV,YAAAxB,OAAP,WAEE,OAAO8xB,EAAQ9xB,OAAO9M,OAGjB,YAAApG,OAAP,WAEE,OAAO,IAAIoB,KAGN,YAAAuT,OAAP,SAAcC,GAMZ,IAJQ,IAAAjV,EAAA,aAAAA,MACFQ,EAAIyU,EAjVK,EAiVW,GAAgB,GACpCvQ,EAAM,IAAIjD,IAEP1C,EAAI,EAAGA,EAAIyB,EAAGzB,IACvB,CACE,IAAMoE,EAAInD,EAAMgV,OAAOC,GAEvBvQ,EAAIb,IAAIV,GAGV,OAAOuB,GAGF,YAAA6N,SAAP,SAAgBC,GAEN,IAAAxS,EAAA,aAAAA,MAER,OAAO,IAAIyB,IAAI+Q,EAAKlP,IAAI,SAACH,GAAM,OAAAnD,EAAMuS,SAASpP,OAGzC,YAAAmP,OAAP,SAAcnG,GAEJ,IAAAnM,EAAA,aAAAA,MAER,OAAOmB,MAAMoC,KAAK4I,EAAI3I,WAAWF,IAAI,SAACH,GAAM,OAAAnD,EAAMsS,OAAOnP,MA9V7C,EAAA6c,WAAa,QAEb,EAAA/T,GAAKoB,EAAG5L,IAER,EAAAqS,WAAakxB,GAEb,EAAA9vB,UAAY+vB,GAEZ,EAAAvxB,SAAW,IAAI2xB,EAAQ,CAAErlC,MAAO,GAAQ0T,WAgBxC,EAAAyB,iBAA2B,EAmB3B,EAAAC,YAAsB,EAsTtC,EApWA,CAA6B,G,6SCH7B,4BA2UA,OAhUgB,EAAAf,UAAd,SAAwCzK,EAASumB,GAO/C,YAP+C,IAAAA,OAAA,IAE3C1pB,KAAK2pB,eAAiBD,IAExBvmB,EAAKyK,YAGAzK,GAGK,EAAA87B,IAAd,WAEE,OAAO,IAAI,GAAQ,KAGP,EAAAC,KAAd,SAAmBC,EAA8BC,GAE/C,OAAO,IAAI,GAAY,CAAElxB,KAAMixB,EAAOhxB,MAAOixB,KAGjC,EAAAxI,KAAd,SAAmB/0B,GAEjB,YAFiB,IAAAA,MAAA,IAEV,IAAI,GAASA,IAGR,EAAAw9B,KAAd,SAAmB9lC,EAAkBM,EAA2B+d,GAE9D,YAFmC,IAAA/d,MAAA,SAA2B,IAAA+d,MAAA,IAA0B9c,IAAI,KAErFkF,KAAK4N,UAAU,IAAI,GAAS,CACjCrU,MAAOyG,KAAKoR,MAAM7X,GAClBM,IAAKmG,KAAKoR,MAAMvX,GAChB+d,UAAWrb,EAAMqb,OAIP,EAAA0nB,YAAd,SAA0B1nB,GAExB,OAAO5X,KAAK4N,UAAU,IAAI,GAAS,CACjCrU,MAAOyG,KAAKu/B,OACZ1lC,IAAKmG,KAAKu/B,OACV3nB,UAAW/c,EAAM+c,GACbA,EACAnd,EAAQmd,EAAU,IAChB,IAAI9c,IAAI8c,GACR,IAAI9c,IAAK8c,EAAuB/a,IAAI,SAAClE,GAAM,OAACA,EAAGA,UAI3C,EAAA+I,KAAd,SAAmBmI,EAAiBxN,EAAcC,GAEhD,OAAO0D,KAAK4N,UAAU,IAAI,GAAS,CACjC/D,KAAM7J,KAAKoR,MAAMvH,GACjBxN,IAAG,EACHC,IAAG,MAMO,EAAAy8B,KAAd,W,IAAA,WAAmB,kDAEjB,OAAO/4B,KAAK4N,UAAU,IAAI,GACxBnT,EAAQ8K,EAAM,IACVA,EAAM,GAAG1I,IAAI,SAACrD,GAAM,SAAK4X,MAAM5X,KAC9B+L,EAAsB1I,IAAI,SAACrD,GAAM,SAAK4X,MAAM5X,QAMvC,EAAA+O,IAAd,W,IAAA,WAAkB,kDAEhB,OAAOvI,KAAK4N,UAAU,IAAI,GACxBnT,EAAQ8K,EAAM,IACVA,EAAM,GAAG1I,IAAI,SAACrD,GAAM,SAAK4X,MAAM5X,KAC9B+L,EAAsB1I,IAAI,SAACrD,GAAM,SAAK4X,MAAM5X,QAIvC,EAAAqD,IAAd,SAAkBtD,EAAkBM,GAElC,YAFkC,IAAAA,MAAA,IAE3BmG,KAAK4N,UAAU,IAAI,GAAQ,CAChC/T,IAAKmG,KAAKoR,MAAMvX,GAChBN,MAAOyG,KAAKoR,MAAM7X,OAIR,EAAA6W,KAAd,WAEE,OAAO,GAASnD,UAGJ,EAAAuyB,OAAd,SAAqBnjC,EAAcC,EAAcwuB,GAE/C,OAAO,IAAI,GAAW,CAAEzuB,IAAG,EAAEC,IAAG,EAAEwuB,MAAK,KAG3B,EAAA2U,IAAd,SAAkBpjC,EAAcC,GAE9B,OAAO,IAAI,GAAW,CAAED,IAAG,EAAEC,IAAG,EAAEwuB,OAAO,KAG7B,EAAA/gB,MAAd,SAAoBzN,GAElB,OAAO,IAAI,GAAW,CAAED,IAAK,EAAGC,IAAG,EAAEwuB,OAAO,KAGhC,EAAAvW,KAAd,WAEE,OAAO,IAAI,GAAS,CAAElY,IAAK,EAAGC,IAAK,KAGvB,EAAAtC,OAAd,SAAqB2E,GAEnB,YAFmB,IAAAA,MAAA,IAEZqB,KAAK4N,UAAU,IAAI,GAAW,CACnCjP,MAAOqB,KAAK0/B,QAAQ/gC,OAIV,EAAAmH,SAAd,SAAuB3C,GAErB,IAAMw8B,EAAY3/B,KAAKoR,MAAMjO,GAE7B,OAAOnD,KAAK4N,UAAU+xB,EAAU96B,aAAe86B,EAAY,IAAI,GAAaA,KAGhE,EAAAvD,MAAd,SAAoBv6B,GAElB,YAFkB,IAAAA,MAAA,IAEX7B,KAAK4N,UAAU,IAAI,GAAU/L,KAGxB,EAAA6D,IAAd,SAAkBnM,GAEhB,OAAOyG,KAAK4N,UAAU,IAAI,GAAQ,CAChCrU,MAAOyG,KAAKoR,MAAM7X,OAIR,EAAAgmC,KAAd,SAAmB19B,GAEjB,YAFiB,IAAAA,MAAA,IAEV,IAAI,GAASA,IAKR,EAAAynB,MAAd,W,IAAA,WAAoB,kDAElB,OAAOtpB,KAAK4N,UAAU,IAAI,GACxBnT,EAAQ8K,EAAM,IACVA,EAAM,GAAG1I,IAAI,SAACrD,GAAM,SAAK4X,MAAM5X,KAC9B+L,EAAsB1I,IAAI,SAACrD,GAAM,SAAK4X,MAAM5X,QAIvC,EAAA4X,MAAd,SAAoB5U,GAElB,OAAOA,aAAiB,EACpBA,EACAA,EAAMyQ,SAASoB,eAKP,EAAAmb,SAAd,SAAuBrmB,GAErB,OAAOA,EAAOA,EAAKf,oBAAsB,MAG7B,EAAAs9B,QAAd,SAAyBn6B,GAAzB,IAEMnF,EAFN,OAwBE,OApBKmF,IAGIA,aAAiB,EAExBnF,EAASmF,EAEDA,EAAc0H,oBAAoB,EAE1C7M,EAAUmF,EAAc0H,SAASoB,cAE1B5T,EAAQ8K,GAEfnF,EAASmF,EAAM1I,IAAI,SAAArD,GAAK,SAAKkmC,QAAQlmC,KAE9B2B,EAASoK,KAEhBnF,EAASvC,EAAU0H,EAAc,SAAA/L,GAAK,SAAKkmC,QAAQlmC,OAG9C4G,GAGK,EAAA5B,OAAd,SAAqB2E,GAEnB,OAAuB,IAAhBA,EAAKnH,OAAemH,EAAK,GAAK,IAAI,GAASA,IAGtC,EAAAy8B,QAAd,SAAsBC,GAEpB,OAAOA,aAAqB,GAAWA,EAAUh+B,QAAU,CAACg+B,IAGhD,EAAA13B,MAAd,SAAoChF,EAAYgF,GAE9C,GAAIhF,aAAgBgF,EAElB,OAAOhF,EAGT,GAAIA,aAAgB,IAAgBA,EAAKtB,mBAAmBsG,EAE1D,OAAOhF,EAGT,GAAIA,aAAgB,GACpB,CACE,IAAM28B,EAAQ38B,EAAKtB,QAAQwP,KAAK,SAAC7X,GAAM,OAAAA,aAAa2O,IAEpD,GAAI23B,EAEF,OAAO9/B,KAAK8F,SAASg6B,GAGvB,IAAMC,EAAgB58B,EAAKtB,QAAQwP,KAAK,SAAC7X,GAAM,OAAAA,aAAa,IAAgBA,EAAEqI,mBAAmBsG,IAEjG,GAAI43B,EAEF,OAAOA,EAIX,OAAO//B,KAAK8F,SAASqC,IAKT,EAAA+T,UAAd,SAAwB8jB,EAAuBC,GAA/C,WAEE,YAF6C,IAAAA,MAAA,MAEhB,IAAzBD,EAAchkC,OAETikC,EAGLD,EAAc3uB,KAAK,SAAA7X,GAAK,OAAAA,aAAa,KAEhC,GAAQyT,SAGF+yB,EAAcnjC,IAAI,SAAArD,GAAK,OAAAA,EAAIA,EAAE8U,QAAU,OAExC9P,OAAO,SAAClD,EAAGC,GAAM,OAAAD,GAAKC,EAAI,EAAK+R,MAAMhS,EAAGC,GAAKD,GAAKC,KAGpD,EAAA+R,MAAd,SAAoBhS,EAASC,G,QAE3B,GAAID,aAAa,GAEf,OAAOC,EAGT,IAAMuK,EACJxK,aAAa,IACbC,aAAa,GAET2kC,EAAK5kC,EAAEyG,cACPo+B,EAAK5kC,EAAEwG,cAEb,GAAI1G,EAAY6kC,EAAIC,GAIlB,OAFAD,EAAG5yB,MAAM6yB,GAEFr6B,EAAW9F,KAAK8F,SAASo6B,GAAMA,EAGxC,GAAIA,aAAc,IAAYC,aAAc,GAC5C,CACE,IAAMC,EAASpgC,KAAK4/B,QAAQM,GACtBG,EAASrgC,KAAK4/B,QAAQO,GACtBG,EAAKF,EAAOpkC,O,IAElB,IAAoB,SAAAqkC,GAAM,8BAC1B,CAKE,IANG,IAAME,EAAK,QAEVC,GAAU,EACRC,EAAYF,aAAiB,GAC7BG,EAAkBD,EAAYF,EAAM1+B,QAAU0+B,EAE3CjoC,EAAI,EAAGA,EAAIgoC,EAAIhoC,IACxB,CACE,IAAMqoC,EAAQP,EAAO9nC,GACfsoC,EAAYD,aAAiB,GAC7BE,EAAkBD,EAAYD,EAAM9+B,QAAU8+B,EAEhDtlC,EAAYwlC,EAAWH,KAEzBF,GAAU,EACVK,EAAUvzB,MAAMozB,GAEZD,IAAcG,IAEhBR,EAAO9nC,GAAK0H,KAAK8F,SAAS+6B,KAK3BL,GAEHJ,EAAO7hC,KAAKgiC,I,iGAIhB,OAAOz6B,EACH9F,KAAK8F,SAAS9F,KAAKxB,OAAO4hC,IAC1BpgC,KAAKxB,OAAO4hC,GAGlB,OAAOpgC,KAAK+4B,KAAKz9B,EAAGC,IArUR,EAAAsc,MAAQipB,EAAM/2B,QAEd,EAAAyN,OAASspB,EAAM/2B,QAEf,EAAA0N,KAAOqpB,EAAMvsB,OAEb,EAAAoV,eAAyB,EAkUzC,EA3UA,GCpBA,cAOE,WAAYpwB,GAEVyG,KAAKzG,MAAQA,EACbyG,KAAK2Z,KAAO3Z,KAAK+gC,KAAO/gC,KA0E5B,OArES,YAAAjE,QAAP,WAEE,OAAOiE,KAAK2Z,OAAS3Z,MAGhB,YAAAgZ,MAAP,WAEEhZ,KAAK2Z,KAAO3Z,KAAK+gC,KAAO/gC,MAGnB,YAAAmmB,QAAP,SAAe5sB,GAEb,IAAMyJ,EAAO,IAAIg+B,EAAWznC,GAG5B,OAFAyJ,EAAKi+B,UAAUjhC,KAAK+gC,MAEb/9B,GAGF,YAAAkjB,SAAP,SAAgB3sB,GAEd,IAAMyJ,EAAO,IAAIg+B,EAAWznC,GAG5B,OAFAyJ,EAAKi+B,UAAUjhC,MAERgD,GAGF,YAAAskB,KAAP,SAAYznB,GAMV,IAJA,IACIqhC,EAAOlhC,KAAK2Z,KACZ/X,EAAQ,EAELs/B,IAJMlhC,MAKb,CACE,IAAM2Z,EAAOunB,EAAKvnB,KAClB9Z,EAASqhC,EAAK3nC,MAAOqI,EAAOs/B,GAC5BA,EAAOvnB,EACP/X,IAGF,OAAOA,GAKF,YAAAu/B,UAAP,WAEE,OAAOnhC,KAAK2Z,OAAS3Z,MAGhB,YAAA3C,OAAP,WAEO2C,KAAKmhC,cAERnhC,KAAK2Z,KAAKonB,KAAO/gC,KAAK+gC,KACtB/gC,KAAK+gC,KAAKpnB,KAAO3Z,KAAK2Z,KACtB3Z,KAAK2Z,KAAO3Z,KAAK+gC,KAAO/gC,OAIrB,YAAAihC,UAAP,SAAiBj+B,GAEfhD,KAAK3C,SACL2C,KAAK2Z,KAAO3W,EAAK2W,KACjB3Z,KAAK+gC,KAAO/9B,EACZA,EAAK2W,KAAKonB,KAAO/gC,KACjBgD,EAAK2W,KAAO3Z,MAGhB,EApFA,G,wXC4BA,2BAGU,KAAAohC,UAAiCpoC,OAAOY,OAAO,MA0FzD,OAxFS,YAAAynC,QAAP,SAAkGC,G,IAAU,wDAE1G,IAAMF,EAAYphC,KAAKuhC,aAAaD,GAAO,GACrCE,EAAe,GAOrB,OALIJ,GAEFA,EAAU9Z,KAAK,SAACma,GAAa,OAAAD,EAAQjjC,KAAKkjC,EAAQ,iBAACH,GAAUI,OAGxDF,GAGF,YAAAG,aAAP,SAAuCL,GAErC,OAAoC,OAA7BthC,KAAKuhC,aAAaD,IAKpB,YAAAC,aAAP,SAAuCD,EAAU1nC,QAAA,IAAAA,OAAA,GAE/C,IAAIwnC,EAAyDphC,KAAKohC,UAAUE,GAO5E,OALKF,GAAaxnC,IAEhBwnC,EAAYphC,KAAKohC,UAAUE,GAAS,IAAIN,GAAgC,eAGnEI,GAAa,MAGf,YAAAQ,GAAP,SAA6BN,EAAgB/8B,GAA7C,WAGQs9B,GADSpnC,EAAQ6mC,GAASA,EAAQ,CAACA,IACpBzkC,IAAI,SAACwS,GAAM,SAAKkyB,aAAalyB,GAAG,GAAM8W,QAAQ5hB,KAEnE,OAAO,WAAM,OAAAs9B,EAAMx7B,QAAQ,SAACtM,GAAM,OAAAA,EAAEsD,aAG/B,YAAAykC,KAAP,SAA+BR,EAAgB/8B,GAE7C,IAAMw9B,EAAM/hC,KAAK4hC,GAAGN,EAAO,SAACn+B,G,IAAM,wDAGhC,OAFA4+B,IAEOx9B,EAAO,iBAACpB,GAASu+B,MAG1B,OAAOK,GAGF,YAAAA,IAAP,SAAoCT,EAAiB/8B,GAArD,WAEE,GAAI+8B,EAEF,GAAI5mC,MAAMD,QAAQ6mC,GAEhBA,EAAMj7B,QAAQ,SAACgJ,GAAM,SAAK0yB,IAAI1yB,EAAG9K,SAGnC,CACE,IAAM68B,EAAYphC,KAAKohC,UAAUE,GAE7BF,IAEE78B,EAEF68B,EAAU9Z,KAAK,SAACplB,EAAO6H,EAAO/G,GACxBd,IAAUqC,GACZvB,EAAK3F,WAMT+jC,EAAUpoB,cAOhBhZ,KAAKohC,UAAYpoC,OAAOY,OAAO,MAGjC,OAAOoG,MAGX,EA7FA,G,6hBCiBA,eA4BE,WAAmB6B,EAAsB+B,GAAzC,MAEE,cAAO,K,OAEP,EAAK/K,KAAOgJ,EAAQhJ,KACpB,EAAKmpC,QAAUngC,EAAQmgC,SAAW9lC,IAClC,EAAK+lC,QAAUpgC,EAAQogC,SAAW/lC,IAClC,EAAKgmC,YAAcrgC,EAAQqgC,YAC3B,EAAKC,KAAOtgC,EAAQsgC,KACpB,EAAKt8B,OAASjC,EAAKw+B,YAAYvgC,EAAQgE,OAAQ,GAAY,GAAM7L,UACjE,EAAK4U,WAAahL,EAAKmL,cAAclN,EAAQ+M,YAC7C,EAAKyzB,SAAW,EAAKx8B,OAAOiG,SAASjK,EAAQwgC,UAC7C,EAAKrhB,MAAQnf,EAAQmf,MAAMnkB,IAAI,SAACrD,GAAM,OAAC,SAAKA,GAAC,CAAE4kB,KAAM,EAAKvY,OAAOiG,SAAStS,EAAE4kB,U,EAwNhF,OAhQ0B,QAGV,EAAAxkB,OAAd,SAAqBgK,EAAmBy+B,GACtC,YADsC,IAAAA,MAAA,IAC/B,IAAIC,EAAK,IACdzpC,KAAM,GACNmpC,QAAS9lC,IACT+lC,QAAS/lC,IACTgmC,YAAa,GACbC,KAAM,KACNt8B,OAAQ,GAAM7L,SACd4U,WAAY,GAAM0N,OAClB+lB,SAAU,GACVrhB,MAAO,IACJqhB,GACFz+B,IA4BE,YAAA2+B,KAAP,SAAY1gC,EAAsB+B,GAAlC,WAEM5D,KAAKwiC,WAAW3gC,KAElB7B,KAAKnH,KAAOgJ,EAAQhJ,KACpBmH,KAAKgiC,QAAUngC,EAAQmgC,SAAW9lC,IAClC8D,KAAKiiC,QAAUpgC,EAAQogC,SAAW/lC,IAClC8D,KAAKkiC,YAAcrgC,EAAQqgC,YAC3BliC,KAAKmiC,KAAOtgC,EAAQsgC,KACpBniC,KAAK6F,OAAShE,aAAmBygC,EAC7BzgC,EAAQgE,OACRjC,EAAKw+B,YAAYvgC,EAAQgE,OAAQ,GAAY,GAAM7L,UACvDgG,KAAK4O,WAAa/M,aAAmBygC,EACjCzgC,EAAQ+M,WACRhL,EAAKmL,cAAclN,EAAQ+M,YAC/B5O,KAAKqiC,SAAWxgC,aAAmBygC,EAC/BzgC,EAAQwgC,SACRriC,KAAK6F,OAAOiG,SAASjK,EAAQwgC,UAEjCrlC,EACEgD,KAAKghB,MACLnf,aAAmBygC,EACfzgC,EAAQmf,MACRnf,EAAQmf,MAAMnkB,IAAI,SAACrD,GAAM,OAAC,SAAKA,GAAC,CAAE4kB,KAAM,EAAKvY,OAAOiG,SAAStS,EAAE4kB,UACnE,SAAC9iB,EAAGC,GAAM,OAAAD,EAAEzC,OAAS0C,EAAE1C,MAAQ6T,EAAUvB,OAAO7P,EAAE8iB,KAAM7iB,EAAE6iB,OAC1D,SAACnhB,EAAQ1D,GAAU,SAAKkpC,QAAQlpC,GAAO,IACvC,SAAC0D,EAAQ8M,GAAU,SAAK24B,WAAW34B,GAAO,IAC1C,SAAC9M,EAAQ8M,EAAOxQ,EAAOsJ,GAAa,SAAK8/B,WAAWppC,EAAOsJ,GAAU,KAGvE7C,KAAKqhC,QAAQ,OAAQrhC,KAAM6B,EAAS+B,GACpC5D,KAAK4iC,YAIF,YAAAJ,WAAP,SAAkB3gC,GAEhB,OAAQ6K,EAAUvB,OAAOtJ,aAAmBygC,EAAOzgC,EAAQiL,SAAWjL,EAAS7B,KAAK8M,WAG/E,YAAA81B,QAAP,WAEE5iC,KAAKiiC,QAAU/lC,IAEf8D,KAAKqhC,QAAQ,UAAWrhC,OAGnB,YAAA8M,OAAP,WAEQ,WAAEjU,EAAA,EAAAA,KAAMmpC,EAAA,EAAAA,QAASC,EAAA,EAAAA,QAASC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,KAAMt8B,EAAA,EAAAA,OAAQ+I,EAAA,EAAAA,WAAYyzB,EAAA,EAAAA,SAAUrhB,EAAA,EAAAA,MAEjF,MAAO,CACLnoB,KAAI,EACJmpC,QAAO,EACPC,QAAO,EACPC,YAAW,EACXC,KAAI,EACJt8B,OAAQA,EAAOiH,SACf8B,WAAYA,EAAW9B,SACvBu1B,SAAUx8B,EAAOgG,OAAOw2B,GACxBrhB,MAAOA,EAAMnkB,IAAI,SAACrD,GAAM,OAAC,SAAKA,GAAC,CAAE4kB,KAAMvY,EAAOgG,OAAOrS,EAAE4kB,YAIpD,YAAAykB,gBAAP,SAAuBhqC,EAAciqC,GAEnC,IAAMC,EAAY/iC,KAAK6F,OAAOhE,QAAQlD,MAAM9F,GAiB5C,OAfIkqC,IAEF/iC,KAAK6F,OAAOhE,QAAQlD,MAAMmkC,GAAWC,SAC9B/iC,KAAK6F,OAAOhE,QAAQlD,MAAM9F,GAE7BA,KAAQmH,KAAKqiC,WAEfriC,KAAKqiC,SAASS,GAAW9iC,KAAKqiC,SAASxpC,UAChCmH,KAAKqiC,SAASxpC,IAGvBmH,KAAKqhC,QAAQ,kBAAmBrhC,KAAM8iC,EAASjqC,GAC/CmH,KAAK4iC,aAGEG,GAGJ,YAAAC,gBAAP,SAAuBnqC,GAErB,IAAMoqC,EAASpqC,KAAQmH,KAAK6F,OAAOhE,QAAQlD,MAAM9F,GAWjD,OATIoqC,WAEKjjC,KAAK6F,OAAOhE,QAAQlD,MAAM9F,UAC1BmH,KAAKqiC,SAASxpC,GAErBmH,KAAKqhC,QAAQ,kBAAmBrhC,KAAMnH,GACtCmH,KAAK4iC,WAGAK,GAGF,YAAAR,QAAP,SAAe79B,EAAgBs+B,QAAA,IAAAA,OAAA,GAE7BljC,KAAKghB,MAAMziB,KAAKqG,GAEhB5E,KAAKqhC,QAAQ,UAAWrhC,KAAM4E,GAEzBs+B,GAEHljC,KAAK4iC,WAIF,YAAAD,WAAP,SAAkB/9B,EAAyBu+B,EAAmBD,QAAA,IAAAA,OAAA,GAE5D,IAAMjmC,EAAS3C,EAASsK,GACpB5E,KAAKghB,MAAMpc,GACXA,EACEq+B,IAAWhmC,EAcjB,OAZIgmC,IAEFjqC,OAAOoqC,OAAOnmC,EAAQkmC,GAEtBnjC,KAAKqhC,QAAQ,aAAcrhC,KAAM/C,GAE5BimC,GAEHljC,KAAK4iC,WAIFK,GAGF,YAAAP,WAAP,SAAkB99B,EAAyBs+B,QAAA,IAAAA,OAAA,GAEzC,IAAMn5B,EAAQzP,EAASsK,GACnBA,EACA5E,KAAKghB,MAAMpM,QAAQhQ,GACjBq+B,EAASl5B,GAAS,GAAKA,EAAQ/J,KAAKghB,MAAMhlB,OAEhD,GAAIinC,EACJ,CACE,IAAMI,EAAUrjC,KAAKghB,MAAMjX,GAE3B/J,KAAKqhC,QAAQ,aAAcrhC,KAAMqjC,GAE5BH,GAEHljC,KAAK4iC,UAIT,OAAOK,GAGF,YAAAxkB,cAAP,SAAqB7a,EAA0B0/B,QAAA,IAAAA,MAAA,IAE7C,IAAMp/B,EAAU,GAAMlK,OAAO,SACxBgG,KAAK6F,OAAOhE,QAAQlD,OACpB2kC,IAGL,OAAOtjC,KAAK4O,WAAWlK,QAAQd,EAAMM,IAGhC,YAAAq/B,cAAP,sBAEE,OAAOxnC,EAAQiE,KAAKqiC,UAChBriC,KAAK6F,OACL,GAAM7L,OAAO6D,EAAUmC,KAAK6F,OAAOhE,QAAQlD,MAAO,SAACyE,EAAGxE,GAAS,SAAK4kC,aAAa5kC,OAGhF,YAAA4kC,aAAP,SAAoB7kB,GAElB,IAAMlC,EAAWzc,KAAK6F,OAAOhE,QAAQlD,MAAMggB,GAE3C,OAAOlC,EAAS5X,cAAgB8Z,KAAS3e,KAAKqiC,UAAY5lB,EAAShU,QAAQzI,KAAKqiC,SAAS1jB,IACrFlC,EAAS1a,cACT0a,GAGC,YAAAgnB,aAAP,SAAoBrlB,EAAWslB,QAAA,IAAAA,OAAA,GAE7B,IAAMzmC,EAASymC,EAAY,MAAKtlB,GAASA,EAEzC,IAAK,IAAMxf,KAAQoB,KAAKqiC,SACxB,CACmBriC,KAAK6F,OAAOhE,QAAQlD,MAAMC,GAE7BmD,cAAc0G,QAAQxL,EAAO2B,MAEzC3B,EAAO2B,GAAQ8N,EAAUpB,KAAKtL,KAAKqiC,SAASzjC,KAIhD,OAAO3B,GAGF,YAAA0mC,SAAP,SAAgBrlC,EAAuBslC,GAErC,IAAMC,EAAMD,EAAQE,WAAWxlC,GAE/B0B,KAAKghB,MAAM3a,QAAQ,SAACzB,GAElBA,EAAKwZ,KAAOylB,EAAI,CAAEtqC,MAAOqL,EAAKwZ,SAGhCpe,KAAK4iC,WAGT,EAhQA,CAA0B,I,8hBL2B1B,SAAYlE,GAEV,yBACA,yBACA,mBAJF,CAAYA,QAAa,KAOzB,SAAYC,GAEV,qBACA,uCACA,mBAJF,CAAYA,QAAiB,KAyB7B,IMxDYoF,GAUAC,GN8CZ,eAiDE,WAAmBniC,EAAwB+B,GAA3C,MAEE,cAAO,K,OAEP,EAAK/K,KAAOgJ,EAAQhJ,KACpB,EAAKmpC,QAAUngC,EAAQmgC,SAAW9lC,IAClC,EAAK+lC,QAAUpgC,EAAQogC,SAAW/lC,IAClC,EAAKgmC,YAAcrgC,EAAQqgC,YAC3B,EAAKC,KAAOtgC,EAAQsgC,KACpB,EAAKh/B,KAAOS,EAAKw+B,YAAYvgC,EAAQsB,KAAM,GAAY,GAAMnJ,UAC7D,EAAKiqC,UAAYpiC,EAAQoiC,WAAapiC,EAAQoiC,UAAUjoC,OACpD6F,EAAQoiC,UAAUpnC,IAAI,SAACvE,GAAM,SAAK6K,KAAK2I,SAASxT,KAChD,GACJ,EAAK6mB,QAAU,EAAK+kB,cAActgC,EAAM/B,EAAQsd,SAChD,EAAKglB,YAAc,EAAKC,kBAAkBxgC,EAAM/B,EAAQsiC,aACxD,EAAKE,QAAU,EAAKC,cAAcziC,EAAQwiC,SAC1C,EAAKE,YAAcjqC,EAASuH,EAAQ0iC,aAC9B1iC,EAAQ0iC,YACR5F,GAAkB6F,eACxB,EAAK3qC,IAAMgI,EAAQhI,IACf+J,EAAKmL,cAAclN,EAAQhI,KAC3B,EAAK4qC,0BACT,EAAKC,QAAU,EAAK7qC,IAAI6K,QAAQd,EAAM,EAAK+gC,iBAC3C,EAAK53B,SAAWlL,EAAQkL,SACpBnJ,EAAKmL,cAAclN,EAAQkL,UAC3B,GAAMuP,O,EAguBd,OA1yB4B,QAGZ,EAAA1iB,OAAd,SAAqBgK,EAAmBy+B,GACtC,YADsC,IAAAA,MAAA,IAC/B,IAAIx7B,EAAO,IAChBhO,KAAM,GACNmpC,QAAS9lC,IACT+lC,QAAS/lC,IACTgmC,YAAa,GACbC,KAAM,KACNh/B,KAAM,GAAMnJ,SACZiqC,UAAW,GACX9kB,QAASnmB,OAAOY,OAAO,OACpByoC,GACFz+B,IAGS,EAAAuQ,KAAd,WAEE,MAAO,uCAAuCpU,QAAQ,QAAS,SAACpH,GAC9D,IAAMS,EAAoB,GAAhBwC,KAAK2S,SAAgB,EAG/B,OAFgB,MAAN5V,EAAYS,EAAS,EAAJA,EAAU,GAE5BqjC,SAAS,OAsDf,YAAA8F,KAAP,SAAY1gC,EAAwB+B,GAApC,WAEM5D,KAAKwiC,WAAW3gC,KAElB7B,KAAKnH,KAAOgJ,EAAQhJ,KACpBmH,KAAKgiC,QAAUngC,EAAQmgC,SAAW9lC,IAClC8D,KAAKiiC,QAAUpgC,EAAQogC,SAAW/lC,IAClC8D,KAAKkiC,YAAcrgC,EAAQqgC,YAC3BliC,KAAKmiC,KAAOtgC,EAAQsgC,KACpBniC,KAAKmD,KAAOS,EAAKw+B,YAAYvgC,EAAQsB,KAAM,GAAY,GAAMnJ,UAE7DgG,KAAKikC,UAAYpiC,aAAmBgF,EAChChF,EAAQoiC,UACRpiC,EAAQoiC,WAAapiC,EAAQoiC,UAAUjoC,OACrC6F,EAAQoiC,UAAUpnC,IAAI,SAACvE,GAAM,SAAK6K,KAAK2I,SAASxT,KAChD,GAENsF,EACEoC,KAAKmf,QACLnf,KAAKkkC,cAActgC,EAAM/B,EAAQsd,SACjC,SAACliB,EAAQ2B,EAAMwgB,GAAW,SAAKwlB,UAAUxlB,GAAQ,IACjD,SAACniB,EAAQ2B,GAAS,SAAKimC,aAAajmC,GAAM,IAC1C,SAAC3B,EAAQ2B,EAAM6M,EAAUw2B,GAAY,OAAAx2B,EAAS82B,KAAKN,EAASr+B,KAG9DhG,EACEoC,KAAKmkC,YACLnkC,KAAKokC,kBAAkBxgC,EAAM/B,EAAQsiC,aACrC,SAAClnC,EAAQ2B,EAAMkmC,GAAe,SAAKC,cAAcnhC,EAAMhF,EAAMkmC,GAAY,IACzE,SAAC7nC,EAAQ2B,GAAS,SAAKomC,iBAAiBpmC,GAAM,IAC9C,SAAC3B,EAAQ2B,EAAM6M,EAAUw2B,GAAY,SAAK8C,cAAcnhC,EAAMhF,EAAMqjC,GAAS,KAG/ErkC,EACEoC,KAAKqkC,QACLrkC,KAAKskC,cAAcziC,EAAQwiC,SAC3B,SAACpnC,EAAQpE,EAAMkR,GAAU,SAAKk7B,SAASpsC,EAAMkR,GAAO,IACpD,SAAC9M,EAAQpE,GAAS,SAAKqsC,YAAYrsC,GAAM,IACzC,SAACoE,EAAQpE,EAAM4S,EAAUw2B,GAAY,SAAKgD,SAASpsC,EAAMopC,GAAS,KAGpEjiC,KAAKukC,YAAcjqC,EAASuH,EAAQ0iC,aAC9B1iC,EAAQ0iC,YACR5F,GAAkB6F,eACxBxkC,KAAKnG,IAAMgI,EAAQhI,IACf+J,EAAKmL,cAAclN,EAAQhI,KAC3BmG,KAAKykC,0BACTzkC,KAAK0kC,QAAU1kC,KAAKnG,IAAI6K,QAAQd,EAAM5D,KAAK2kC,iBAC3C3kC,KAAK+M,SAAWlL,EAAQkL,SACpBnJ,EAAKmL,cAAclN,EAAQkL,UAC3B,GAAMuP,OAEVtc,KAAKqhC,QAAQ,OAAQrhC,KAAM6B,EAAS+B,GACpC5D,KAAKqhC,QAAQ,SAAUrhC,QAIpB,YAAAwiC,WAAP,SAAkB3gC,GAEhB,OAAQ6K,EAAUvB,OAAOtJ,aAAmBgF,EAAShF,EAAQiL,SAAWjL,EAAS7B,KAAK8M,WAGjF,YAAA81B,QAAP,WAEE5iC,KAAKiiC,QAAU/lC,IAEf8D,KAAKqhC,QAAQ,SAAUrhC,OAGjB,YAAAkkC,cAAR,SAAsBtgC,EAAmBub,GAAzC,WAEE,OAAOA,EACHthB,EAAUshB,EAAS,SAACC,GAAW,SAAK+lB,aAAavhC,EAAMwb,KACvD,IAGE,YAAA+lB,aAAR,SAAqBvhC,EAAmBwb,GAEtC,OAAOA,aAAkB,GACrBA,EACA,GAAKxlB,OAAOgK,EAAMwb,IAGhB,YAAAglB,kBAAR,SAA0BxgC,EAAmBugC,GAA7C,WAEE,OAAOA,EACHtmC,EAAUsmC,EAAa,SAAC3qC,GAAM,SAAK4rC,iBAAiBxhC,EAAMpK,KAC1D,IAGE,YAAA4rC,iBAAR,SAAyBxhC,EAAmB/B,GAE1C,OAAOA,EAAQiL,kBAAkB,EAC7BjL,EACA,CACEiL,OAAQlJ,EAAKmL,cAAclN,EAAQiL,QACnCH,OAAQ/I,EAAKmL,cAAclN,EAAQ8K,QACnC04B,YAAazhC,EAAKc,QAAQ7C,EAAQwjC,eAIlC,YAAAf,cAAR,SAAsBD,GAEpB,OAAOA,EACHxmC,EAAUwmC,EAAS,SAAC,EAA4BxrC,G,IAA1BiuB,EAAA,EAAAA,OAAQwe,EAAA,EAAAA,QAA2B,OACvDzsC,KAAI,EACJ8F,MAFqC,EAAAA,MAGrCmoB,OAAM,EACNwe,QAAO,KAET,IAGC,YAAAx4B,OAAP,WAEQ,WAAEjU,EAAA,EAAAA,KAAMmpC,EAAA,EAAAA,QAASC,EAAA,EAAAA,QAASC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,KAAMh/B,EAAA,EAAAA,KAAM8gC,EAAA,EAAAA,UAAW9kB,EAAA,EAAAA,QAAStlB,EAAA,EAAAA,IAAKkT,EAAA,EAAAA,SAAUo3B,EAAA,EAAAA,YAAaE,EAAA,EAAAA,QAEzG,MAAO,CACLxrC,KAAI,EACJmpC,QAAO,EACPC,QAAO,EACPC,YAAW,EACXC,KAAI,EACJh/B,KAAMA,EAAK2J,SACXm3B,UAAWA,EAAUpnC,IAAI,SAACvE,GAAM,OAAA6K,EAAK0I,OAAOvT,KAC5C6mB,QAASthB,EAAUshB,EAAS,SAACzmB,GAAM,OAAAA,EAAEoU,WACrCjT,IAAKA,EAAIiT,SACTC,SAAUA,EAASD,SACnBq3B,YAAatmC,EAAUsmC,EAAa,SAAC,G,IAAEr3B,EAAA,EAAAA,OAAQH,EAAA,EAAAA,OAAQ04B,EAAA,EAAAA,YAAkB,OACvEv4B,OAAQA,EAAOA,SACfH,OAAQA,EAAOG,SACfu4B,YAAaA,EAAYv4B,YAE3Bu3B,QAASxmC,EAAUwmC,EAAS,SAAC,GAA+B,OAC1D1lC,MAD6B,EAAAA,MAE7BmoB,OAFoC,EAAAA,OAGpCwe,QAH4C,EAAAA,aAQ3C,YAAAC,SAAP,SAAgB3hC,GAEd,KAAI5D,KAAKukC,cAAgB5F,GAAkB6G,OAEpCxlC,KAAK0kC,SAAY9gC,EAAK6hC,gBAAgBjjC,YAAYxC,KAAK0kC,UAE1D,OAAO,EAIX,IAAMgB,EAAe1lC,KAAK+M,SAASrI,QAAQd,EAAM5D,KAAK2lC,sBAEtD,SAAKD,IAAiB9hC,EAAKgiC,qBAAqBpjC,YAAYkjC,KAQvD,YAAAG,cAAP,SAAqBjiC,GAEnB,IAAM8gC,EAAU1kC,KAAKnG,IAAI6K,QAAQd,EAAM5D,KAAK2kC,iBAExCD,IAEF1kC,KAAK0kC,QAAUA,IAIZ,YAAAoB,WAAP,SAAkBlnC,EAAcmnC,GAAhC,WAEMnD,GAAU,EACRkC,EAAa9kC,KAAKmkC,YAAYvlC,GAEhCkmC,WAEK9kC,KAAKmkC,YAAYvlC,GAExBoB,KAAKmkC,YAAY4B,GAAWjB,EAE5BlC,GAAU,GAGZ1kC,EAAW8B,KAAKqkC,QAAS,SAACt6B,GAExB,IAAMzR,EAAIyR,EAAMpL,MAAMiW,QAAQhW,IAEnB,IAAPtG,IAEFyR,EAAMpL,MAAMrG,GAAKytC,EAEjB,EAAKC,YAAYj8B,EAAMlR,MAAM,GAC7B+pC,GAAU,KAId5iC,KAAKqhC,QAAQ,aAAcrhC,KAAM+lC,EAASnnC,GAEtCgkC,GAEF5iC,KAAK4iC,WAIF,YAAAqD,WAAP,SAAkBrnC,GAAlB,WAEMgkC,GAAU,EAEVhkC,KAAQoB,KAAKmkC,cAEfnkC,KAAKglC,iBAAiBpmC,GAAM,GAE5BgkC,GAAU,GAGZ1kC,EAAW8B,KAAKqkC,QAAS,SAACt6B,EAAOm8B,GAE/B,IAAM5tC,EAAIyR,EAAMpL,MAAMiW,QAAQhW,IAEnB,IAAPtG,IAEFyR,EAAMpL,MAAMqL,OAAO1R,EAAG,GACtBsqC,GAAU,EAEiB,IAAvB74B,EAAMpL,MAAM3C,OAEd,EAAKkpC,YAAYgB,GAAW,GAI5B,EAAKF,YAAYE,GAAW,MAKlClmC,KAAKqhC,QAAQ,aAAcrhC,KAAMpB,GAE7BgkC,GAEF5iC,KAAK4iC,WAIF,YAAAuD,eAAP,sBAEQb,EAAUtlC,KAAKomC,aACfznC,EAA+B2mC,EAAQ3mC,MAAM9B,IAAI,SAAC+B,EAAMtG,GAAM,OAClEsG,EACA0mC,EAAQ//B,OAAS+/B,EAAQ//B,MAAMjN,GAC3BgtC,EAAQ//B,MAAMjN,GACd,EAAK6K,KAAKtB,QAAQlD,MAAMC,MAG9B,MAAO,CACLuE,KAAMu7B,GAAc2H,QACpB1nC,MAAK,IAIF,YAAAZ,OAAP,SAAcuT,EAAcjB,GAEpB,IAAElN,EAAF,KAAEA,KAAMtJ,EAAR,KAAQA,IAEd,OAAOyX,EAAIA,IAAIzX,EAAK,CAAEwW,SAAQ,EAAElN,KAAI,KAG/B,YAAAmjC,OAAP,SAAcj2B,GAEZ,GAAIrQ,KAAKukC,cAAgB5F,GAAkB6G,MAA3C,CAKA,IAAM5mC,EAAOoB,KAAKumC,uBAElB,IAAIl2B,EAASzR,GAKb,OAAQoB,KAAKukC,aAEX,KAAK5F,GAAkB6F,eACrBn0B,EAASzR,GAAQoB,KAAKikC,UAAUzlC,OAAO,SAAClD,EAAGC,GAAM,OAAAK,KAAKU,IAAIhB,EAAGC,EAAEqD,KAAQ,GAAK,EAC5E,MACF,KAAK+/B,GAAkB6H,KACrBn2B,EAASzR,GAAQiI,EAAOsN,UAKvB,YAAAsyB,YAAP,SAAmBn1B,EAAcjB,GAEzB,IAAElN,EAAF,KAAEA,KAAM4J,EAAR,KAAQA,SAEd,OAAOuE,EAAIA,IAAIvE,EAAU,CAAEsD,SAAQ,EAAElN,KAAI,KAGpC,YAAAujC,wBAAP,WAEE,OAAO1mC,KAAKmD,KAAKtB,QAAQlD,OAGpB,YAAAgoC,mBAAP,SAA0BC,GAExB,OAAOA,EACL,GAAMtH,YAAY,CAACsH,IACnB5mC,KAAK6mC,mBAGF,YAAAC,wBAAP,sBAEE,OAAOjpC,EAAUmC,KAAKmD,KAAKtB,QAAQlD,MACjC,SAACwE,EAAMvE,GAAS,OAAAA,KAAQ,EAAKulC,YACzB,EAAKA,YAAYvlC,GAAMymC,YACvBliC,KAID,YAAA4jC,eAAP,WAEE,OAAO,GAAM/sC,OAAOgG,KAAK8mC,4BAGpB,YAAAE,eAAP,WAEE,OAAOhnC,KAAKmD,MAGP,YAAA8jC,cAAP,WAEE,OAAOjuC,OAAO8f,KAAK9Y,KAAK0mC,4BAGnB,YAAAG,gBAAP,WAEE,OAAO,GAAMvH,YAAYt/B,KAAKinC,kBAGzB,YAAAC,iBAAP,WAEE,OAAOlnC,KAAK0kC,SAGP,YAAAC,cAAP,WAEE,OAAO,GAAM3qC,OAAO,CAClBqW,SAAUrQ,KAAKmD,KACfA,KAAM,GAAMo8B,UAIT,YAAAoG,mBAAP,WAEE,OAAO,GAAM3rC,OAAO,CAClBqW,SAAUrQ,KAAKmD,KACfA,KAAM,GAAMo8B,UAIT,YAAA4H,WAAP,SAAkB71B,EAAcjB,GAE9B,IAAM0G,EAAe,GAErB,IAAK,IAAMnY,KAAQoB,KAAK0mC,0BAEtB3vB,EAAQnY,GAAQoB,KAAKonC,gBAAgB91B,EAAKjB,EAAUzR,GAGtD,OAAOmY,GAGF,YAAAqwB,gBAAP,SAAuB91B,EAAcjB,EAAepW,GAE5C,IAAEpB,EAAF,KAAEA,KAAMsrC,EAAR,KAAQA,YACRkD,EAAUptC,KAAYkqC,EACxBA,EAAYlqC,GAAU6S,OACtB,KACEvT,EAAQ8W,EAASpW,GAEvB,OAAOotC,EACH/1B,EAAIA,IAAI+1B,EAAS,CAAExuC,KAAI,EAAEwX,SAAQ,EAAEpW,SAAQ,EAAEV,MAAK,IAClDA,GAGC,YAAA+tC,iBAAP,SAAwBV,GAEtB,IAAM/tC,EAAO,GAAMymC,YAAY,CAACt/B,KAAKnH,OAC/BwX,EAAWrQ,KAAKgnC,iBAChB/sC,EAAW+F,KAAK2mC,mBAAmBC,GACnCrtC,EAAQyG,KAAKunC,kBAAkBX,GAErC,OAAO,GAAM5sC,OAAO,CAAEnB,KAAI,EAAEwX,SAAQ,EAAEpW,SAAQ,EAAEV,MAAK,KAGhD,YAAAiuC,kBAAP,SAAyBZ,EAAsBa,GAE7C,YAF6C,IAAAA,MAAoB,GAAMxI,OAEhE2H,GAAeA,KAAe5mC,KAAKmkC,YACtCnkC,KAAKmkC,YAAYyC,GAAavB,YAC9BoC,GAGC,YAAAC,WAAP,SAAkBp2B,EAAcyF,GAE9B,IAAM1G,EAAgB,GAEtB,IAAK,IAAMzR,KAAQoB,KAAK0mC,0BAEtBr2B,EAASzR,GAAQoB,KAAK2nC,gBAAgBr2B,EAAKyF,EAASnY,GAGtD,OAAOyR,GAGF,YAAAs3B,gBAAP,SAAuBr2B,EAAcjB,EAAepW,GAE5C,IAAEpB,EAAF,KAAEA,KAAMsrC,EAAR,KAAQA,YACRyD,EAAU3tC,KAAYkqC,EACxBA,EAAYlqC,GAAU0S,OACtB,KACEpT,EAAQ8W,EAASpW,GAEvB,OAAO2tC,EACHt2B,EAAIA,IAAIs2B,EAAS,CAAE/uC,KAAI,EAAEwX,SAAQ,EAAEpW,SAAQ,EAAEV,MAAK,IAClDA,GAGC,YAAAsuC,iBAAP,SAAwBjB,EAAsBkB,GAE5C,IAAMjvC,EAAO,GAAMymC,YAAY,CAACt/B,KAAKnH,OAC/BwX,EAAWrQ,KAAK+mC,iBAChB9sC,EAAW+F,KAAK2mC,mBAAmBC,GACnCrtC,EAAQyG,KAAKwnC,kBAAkBZ,EAAakB,GAElD,OAAO,GAAM9tC,OAAO,CAAEnB,KAAI,EAAEwX,SAAQ,EAAEpW,SAAQ,EAAEV,MAAK,KAGhD,YAAAguC,kBAAP,SAAyBX,GAEvB,OAAOA,GACH5mC,KAAKmD,KAAKtB,QAAQlD,MAAMioC,IACxB,GAAM3H,OAGL,YAAA8I,qBAAP,WAEE,OAAO,GAAMriC,IAAI1F,KAAK6mC,oBAGjB,YAAAN,qBAAP,WAEE,IAAM96B,EAAWzL,KAAKmD,KAAKtB,QAAQlD,MAEnC,MAAS,OAAQ8M,EAEX,QAASA,EAET,OADA,MAFF,MAMC,YAAAg5B,wBAAP,SAA+BuD,EAAyBnvC,QAAzB,IAAAmvC,MAAA,UAAyB,IAAAnvC,MAAA,WAEtD,IAAMysC,EAAUtlC,KAAKomC,WAAWvtC,GAEhC,OAAOysC,EAAQ3mC,MAAM3C,OAAS,EAC1B,GAAMsK,GAAG2f,GAAQoB,KAAM,CACrB3lB,KAAM4jC,EAAQ3mC,MAAM9B,IAAI,SAAC+B,GACvB,UAAMzF,IAAI,WAAYyF,KAExBqpC,UAAW,GAAMhe,MAAM+d,GACvB3iB,OAAQ,GAAM/e,GAAGoJ,GAAOpG,OAAQ,CAC9B/P,MAAO,GAAMJ,IAAI,YAGrB,GAAMA,IAAI,WAAYmsC,EAAQ3mC,MAAM,KAGnC,YAAAynC,WAAP,SAAkBvtC,EAA0BqvC,QAA1B,IAAArvC,MAAA,gBAA0B,IAAAqvC,OAAA,GAE1C,IAAMt3B,EAAU/X,KAAQmH,KAAKqkC,QACzBrkC,KAAKqkC,QAAQxrC,GACbmF,EAAagC,KAAKqkC,QAChB,SAACt6B,EAAOm8B,EAAWhnC,GAAU,OAAAA,IAAgB6K,EAAMu7B,QAAUv7B,EAAQ7K,IACvE,MAEJ,OAAI0R,IAKAs3B,EAKK,CACLrvC,KAAI,EACJ8F,MAAO,CALEqB,KAAKumC,wBAMdhhC,MAAO,CALIsB,EAAOshC,cAAcnoC,KAAKukC,cAMrCzd,QAAQ,EACRwe,SAAS,GAIN,OAGF,YAAA8C,iBAAP,WAEE,OAAOpqC,EAAagC,KAAKqkC,QAAS,SAACt6B,EAAOm8B,EAAWpf,GAKnD,OAJI/c,EAAM+c,QACRA,EAAOvoB,KAAKwL,GAGP+c,GACN,KAGE,YAAAuhB,WAAP,SAAkB1pC,GAUhB,OARAqB,KAAKilC,SAAS,UAAW,CACvBtmC,MAAOlE,EAAQkE,GAASA,EAAQ,CAACA,GACjCmoB,QAAQ,EACRwe,SAAS,IAGXtlC,KAAKukC,YAAc5F,GAAkB6G,MAE9BxlC,MAGF,YAAAilC,SAAP,SAAgBpsC,EAAcgJ,EAA6BqhC,QAAA,IAAAA,OAAA,GAEzD,IAAMoF,EAAWtoC,KAAKqkC,QAAQxrC,GACxBkR,EAAK,SAAqBlI,GAAO,CAAEhJ,KAAI,IAkB7C,OAhBAmH,KAAKqkC,QAAQxrC,GAAQkR,EAEjBu+B,EAEFtoC,KAAKqhC,QAAQ,cAAerhC,KAAM+J,EAAOu+B,GAIzCtoC,KAAKqhC,QAAQ,WAAYrhC,KAAM+J,GAG5Bm5B,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAgmC,YAAP,SAAmBntC,EAAcqqC,QAAA,IAAAA,OAAA,GAE/B,IAAMn5B,EAAQ/J,KAAKqkC,QAAQxrC,GAS3B,OAPAmH,KAAKqhC,QAAQ,cAAerhC,KAAM+J,EAAOA,GAEpCm5B,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAklC,YAAP,SAAmBrsC,EAAcqqC,QAAA,IAAAA,OAAA,GAE/B,IAAMn5B,EAAQ/J,KAAKqkC,QAAQxrC,GAW3B,cATOmH,KAAKqkC,QAAQxrC,GAEpBmH,KAAKqhC,QAAQ,cAAerhC,KAAM+J,GAE7Bm5B,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAuoC,YAAP,SAAmB1vC,EAAciqC,GAE/B,IAAM/4B,EAAQ/J,KAAKqkC,QAAQxrC,GAE3B,GAAIkR,GAASlR,IAASiqC,EACtB,CACE,IAAMwF,EAAW,SAAKv+B,GAAK,CAAEpL,MAAOoL,EAAMpL,MAAMgD,UAEhDoI,EAAMlR,KAAOiqC,SAEN9iC,KAAKqkC,QAAQxrC,GAEpBmH,KAAKqkC,QAAQvB,GAAW/4B,EAExB/J,KAAKqhC,QAAQ,cAAerhC,KAAM+J,EAAOu+B,GACzCtoC,KAAK4iC,UAGP,OAAO5iC,MAGF,YAAA+kC,cAAP,SAAqBnhC,EAAmBhF,EAAciD,EAAqDqhC,QAAA,IAAAA,OAAA,GAEzG,IAAMoF,EAAWtoC,KAAKmkC,YAAYvlC,GAC5BkmC,EAAsC9kC,KAAKolC,iBAAiBxhC,EAAM/B,GAkBxE,OAhBA7B,KAAKmkC,YAAYvlC,GAAQkmC,EAErBwD,EAEFtoC,KAAKqhC,QAAQ,mBAAoBrhC,KAAMnH,KAAMisC,EAAYwD,GAIzDtoC,KAAKqhC,QAAQ,gBAAiBrhC,KAAMnH,KAAMisC,GAGvC5B,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAglC,iBAAP,SAAwBnsC,EAAcqqC,QAAA,IAAAA,OAAA,GAEpC,IAAM4B,EAAa9kC,KAAKmkC,YAAYtrC,GAcpC,OAZIisC,WAEK9kC,KAAKmkC,YAAYtrC,GAExBmH,KAAKqhC,QAAQ,mBAAoBrhC,KAAMnH,EAAMisC,GAExC5B,GAEHljC,KAAK4iC,WAIF5iC,MAGF,YAAAwoC,iBAAP,SAAwB3vC,EAAcqqC,QAAA,IAAAA,OAAA,GAEpC,IAAM4B,EAAa9kC,KAAKmkC,YAAYtrC,GAYpC,OAVIisC,IAEF9kC,KAAKqhC,QAAQ,mBAAoBrhC,KAAMnH,EAAMisC,EAAYA,GAEpD5B,GAEHljC,KAAK4iC,WAIF5iC,MAGF,YAAA4kC,UAAP,SAAiBxlB,EAAc8jB,QAAA,IAAAA,OAAA,GAE7B,IAAMz3B,EAAWzL,KAAKmf,QAAQC,EAAOvmB,MAkBrC,OAhBAmH,KAAKmf,QAAQC,EAAOvmB,MAAQumB,EAExB3T,EAEFzL,KAAKqhC,QAAQ,eAAgBrhC,KAAMof,EAAQ3T,GAI3CzL,KAAKqhC,QAAQ,YAAarhC,KAAMof,GAG7B8jB,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAyoC,aAAP,SAAoB5vC,EAAciqC,EAAiBI,QAAA,IAAAA,OAAA,GAEjD,IAAM9jB,EAASpf,KAAKmf,QAAQtmB,GAkB5B,OAhBIumB,GAAUvmB,IAASiqC,IAErB1jB,EAAOvmB,KAAOiqC,SAEP9iC,KAAKmf,QAAQtmB,GAEpBmH,KAAKmf,QAAQ2jB,GAAW1jB,EAExBpf,KAAKqhC,QAAQ,eAAgBrhC,KAAMof,EAAQA,GAEtC8jB,GAEHljC,KAAK4iC,WAIF5iC,MAGF,YAAA6kC,aAAP,SAAoBhsC,EAAcqqC,QAAA,IAAAA,OAAA,GAEhC,IAAM9jB,EAASpf,KAAKmf,QAAQtmB,GAc5B,OAZIumB,WAEKpf,KAAKmf,QAAQtmB,GAEpBmH,KAAKqhC,QAAQ,eAAgBrhC,KAAMof,GAE9B8jB,GAEHljC,KAAK4iC,WAIF5iC,MA3wBK,EAAAmoC,gBAAa,OACxBxJ,GAAkB6G,OAAQ,KAC3B,GAAC7G,GAAkB6F,gBAAiB,GAAM/E,IAAI,GAC9C,GAACd,GAAkB6H,MAAO,GAAMjH,KAAK,CAAEljC,IAAK,GAAIC,IAAK,GAAI0b,YAAY,EAAM7a,QAAS,mE,IA2wBxF,EA1yBA,CAA4B,I,wmBMxD5B,SAAY4mC,GAEV,2BACA,+BACA,yBACA,iBACA,iDACA,yCAPF,CAAYA,QAAY,KAUxB,SAAYC,GAEV,mBACA,yBACA,2BACA,2BALF,CAAYA,QAAe,KAe3B,mBA0FE,WAAmBpgC,EAAmB/B,GAAtC,MAEE,cAAO,K,OAEP,EAAK+B,KAAOA,EACZ,EAAK/K,KAAOgJ,EAAQhJ,KACpB,EAAKopC,QAAUpgC,EAAQogC,SAAW/lC,IAClC,EAAK8lC,QAAUngC,EAAQmgC,SAAW9lC,IAClC,EAAKwsC,KAAO7mC,EAAQ6mC,KACpB,EAAKpkC,QAAUzC,EAAQyC,QACvB,EAAKqkC,oBAAsB9mC,EAAQ8mC,qBAAuB9mC,EAAQ+mC,QAAQ,GAAG/vC,KAC7E,EAAKgwC,OAAShnC,EAAQgnC,OAClB,EAAKC,eAAejnC,EAAQgnC,QAC5B,KACJ,EAAKE,gBAAkBxsC,EAAMsF,EAAQknC,iBACrC,EAAKH,QAAU/mC,EAAQ+mC,QACvB,EAAKI,oBAAsBnnC,EAAQmnC,qBAAuBnnC,EAAQyC,QAAQzL,KAC1E,EAAKowC,gBAAkBrsC,EAAW,EAAKmsC,iBACvC,EAAKG,WAAarnC,EAAQqnC,SAC1B,EAAKlgB,WAAannB,EAAQmnB,SAC1B,EAAKmgB,OAAStnC,EAAQsnC,KACtB,EAAKC,YAAcvnC,EAAQunC,U,EA6f/B,OA5mB8B,QAkHrB,YAAA7G,KAAP,SAAY1gC,EAAqC+B,GAE3C5D,KAAKwiC,WAAW3gC,KAElB7B,KAAKnH,KAAOgJ,EAAQhJ,KACpBmH,KAAKiiC,QAAUpgC,EAAQogC,SAAW/lC,IAClC8D,KAAKgiC,QAAUngC,EAAQmgC,SAAW9lC,IAClC8D,KAAK0oC,KAAO7mC,EAAQ6mC,KACpB1oC,KAAKsE,QAAUzC,EAAQyC,QACvBtE,KAAK2oC,oBAAsB9mC,EAAQ8mC,qBAAuB9mC,EAAQ+mC,QAAQ,GAAG/vC,KAC7EmH,KAAK6oC,OAAShnC,EAAQgnC,OAClB7oC,KAAK8oC,eAAejnC,EAAQgnC,QAC5B,KACJ7oC,KAAK+oC,gBAAkBxsC,EAAMsF,EAAQknC,iBACrC/oC,KAAK4oC,QAAU/mC,EAAQ+mC,QACvB5oC,KAAKgpC,oBAAsBnnC,EAAQmnC,qBAAuBnnC,EAAQyC,QAAQzL,KAC1EmH,KAAKipC,gBAAkBrsC,EAAWoD,KAAK+oC,iBACvC/oC,KAAKkpC,WAAarnC,EAAQqnC,SAC1BlpC,KAAKgpB,WAAannB,EAAQmnB,SAC1BhpB,KAAKmpC,OAAStnC,EAAQsnC,KACtBnpC,KAAKopC,YAAcvnC,EAAQunC,UAE3BppC,KAAKqhC,QAAQ,OAAQrhC,KAAM6B,EAAS+B,GACpC5D,KAAK4iC,YAIF,YAAAJ,WAAP,SAAkB3gC,GAEhB,OAAQ6K,EAAUvB,OAAOtJ,aAAmB6F,EAAW7F,EAAQiL,SAAWjL,EAAS7B,KAAK8M,WAGnF,YAAA81B,QAAP,WAEE5iC,KAAKiiC,QAAU/lC,IAEf8D,KAAKqhC,QAAQ,UAAWrhC,OAGlB,YAAA8oC,eAAR,SAAuB,G,IAAA,UAAClqC,EAAA,KAAM6d,EAAA,KAE5B,MAAO,CAAC7d,EAAMoB,KAAK4D,KAAKc,QAAQ+X,KAG1B,YAAA4sB,eAAR,SAAuBC,GAErB,OAAOA,EACH,CAACA,EAAK,GAAIA,EAAK,GAAGx8B,UAClB,MAGC,YAAAA,OAAP,WAEQ,WACJjU,EAAA,EAAAA,KAAMmpC,EAAA,EAAAA,QAASC,EAAA,EAAAA,QACfyG,EAAA,EAAAA,KAAMpkC,EAAA,EAAAA,QAASqkC,EAAA,EAAAA,oBACfE,EAAA,EAAAA,OAAQE,EAAA,EAAAA,gBACRH,EAAA,EAAAA,QAASI,EAAA,EAAAA,oBACTE,EAAA,EAAAA,SAAUlgB,EAAA,EAAAA,SAAUmgB,EAAA,EAAAA,KAAMC,EAAA,EAAAA,UAG5B,MAAO,CACLvwC,KAAI,EACJopC,QAAO,EACPD,QAAO,EACP0G,KAAI,EACJpkC,QAAO,EACPqkC,oBAAmB,EACnBE,OAAQ7oC,KAAKqpC,eAAeR,GAC5BE,gBAAiBruC,MAAMoC,KAAKisC,EAAgBhsC,WAC5C6rC,QAAO,EACPI,oBAAmB,EACnBE,SAAQ,EAAElgB,SAAQ,EAAEmgB,KAAI,EAAEC,UAAS,IAI/B,YAAAG,mBAAR,SAA2B1wC,EAAc+vC,GAEvC,OAAOA,EAAQv3B,KAAK,SAACjY,GAAM,OAAAA,EAAEP,OAASA,KAGjC,YAAA2wC,OAAP,SAAc3wC,EAAciqC,GAE1B9iC,KAAKypC,gBAAgB5wC,EAAMiqC,EAAS,CAAC9iC,KAAKsE,UAC1CtE,KAAKypC,gBAAgB5wC,EAAMiqC,EAAS9iC,KAAK4oC,SAEzC5oC,KAAK4iC,WAGC,YAAA6G,gBAAR,SAAwB5wC,EAAciqC,EAAiB8F,GAErD,IAAMc,EAAW1pC,KAAKupC,mBAAmB1wC,EAAM+vC,GAE3Cc,IAEFA,EAAS7wC,KAAOiqC,IAIb,YAAAzlC,OAAP,SAAcxE,GAEZmH,KAAK2pC,gBAAgB9wC,EAAM,CAACmH,KAAKsE,UACjCtE,KAAK2pC,gBAAgB9wC,EAAMmH,KAAK4oC,SAEhC5oC,KAAK4iC,WAGC,YAAA+G,gBAAR,SAAwB9wC,EAAc+vC,GAEpC,IAAMtwC,EAAIswC,EAAQlrC,UAAU,SAACtE,GAAM,OAAAA,EAAEP,OAASA,KAEnC,IAAPP,IAEFswC,EAAQ5+B,OAAO1R,EAAG,GAClBswC,EAAQtwC,GAAGqG,MAAQ,KAIhB,YAAAmnC,WAAP,SAAkBjtC,EAAc+F,EAAcmnC,GAE5C/lC,KAAK4pC,oBAAoB/wC,EAAM+F,EAAMmnC,EAAS,CAAC/lC,KAAKsE,UACpDtE,KAAK4pC,oBAAoB/wC,EAAM+F,EAAMmnC,EAAS/lC,KAAK4oC,SAEnD5oC,KAAK4iC,WAGC,YAAAgH,oBAAR,SAA4B/wC,EAAc+F,EAAcmnC,EAAiB6C,GAEvE,IAAMc,EAAW1pC,KAAKupC,mBAAmB1wC,EAAM+vC,GAE/C,GAAIc,EACJ,CACE,IAAMpxC,EAAIoxC,EAAS/qC,MAAMiW,QAAQhW,IAEtB,IAAPtG,IAEFoxC,EAAS/qC,MAAMrG,GAAKytC,KAKnB,YAAAE,WAAP,SAAkBptC,EAAc+F,GAE9BoB,KAAK6pC,oBAAoBhxC,EAAM+F,EAAM,CAACoB,KAAKsE,UAC3CtE,KAAK6pC,oBAAoBhxC,EAAM+F,EAAMoB,KAAK4oC,SAE1C5oC,KAAK4iC,WAGC,YAAAiH,oBAAR,SAA4BhxC,EAAc+F,EAAcgqC,GAEtD,IAAMtwC,EAAIswC,EAAQlrC,UAAU,SAACtE,GAAM,OAAAA,EAAEP,OAASA,IAE9C,IAAW,IAAPP,EACJ,CACE,IAAMoxC,EAAWd,EAAQtwC,GACnBqE,EAAI+sC,EAAS/qC,MAAMiW,QAAQhW,GAEjC,IAAW,IAAPjC,IAEF+sC,EAAS/qC,MAAMqL,OAAOrN,EAAG,GAEK,IAA1B+sC,EAAS/qC,MAAM3C,QAIjB,OAFA4sC,EAAQ5+B,OAAO1R,EAAG,IAEX,EAKb,OAAO,GAGF,YAAAwxC,aAAP,SAAoBlB,GAApB,WAEQrjC,EAAgB,GAiBtB,OAfAqjC,EAAQviC,QAAQ,SAAC,G,IAAExN,EAAA,EAAAA,KAAM8F,EAAA,EAAAA,MAGjB2mC,EADS,EAAK1hC,KAAKoZ,UAAUnkB,GACZstC,iBAEvBxnC,EAAM0H,QAAQ,SAACjD,EAAG9K,GAEhB,IAAMmkB,EAAW6oB,EAAQ3mC,MAAMrG,GAAG,GAElCiN,EAAMjN,GAAKiN,EAAMjN,GACb,GAAMgV,MAAM/H,EAAMjN,GAAImkB,GACtBA,EAASnO,YAIV/I,GAGF,YAAAxJ,QAAP,WAEE,OAAqC,IAA9BiE,KAAKsE,QAAQ3F,MAAM3C,QACK,IAAxBgE,KAAK4oC,QAAQ5sC,QAGd,YAAA+tC,YAAR,SAAoBnB,GAApB,WAEQoB,EAAgBpB,EAAQ/rC,IAAI,SAACzD,GAAM,SAAKwK,KAAKc,QAAQtL,EAAEP,QAK7D,OAJiBmxC,EAAchuC,OAAS,EACpC,GAAM+8B,KAAKiR,GACXA,EAAc,IAKb,YAAAC,mBAAP,SAA0BC,GAExB,GAAIlqC,KAAKsE,QAAQzL,OAASqxC,EAExB,OAAO,KAGT,IAAMrxC,EAAOmH,KAAK2oC,oBACZwB,EAAQnqC,KAAKsE,QAAQ3F,MACrBiqC,EAAU5oC,KAAK4oC,QACfwB,EAAWpqC,KAAK+pC,YAAYnB,GAC5ByB,EAAUrqC,KAAKmpC,MAAQnpC,KAAKkpC,SAC9BlF,GAAgBsG,QAChBtqC,KAAKgpB,SACHgb,GAAgBuG,SAChBvG,GAAgBwG,SAChBC,EAAezqC,KAAKgpB,SACtBohB,EACA,GAAMtkC,SAASskC,GAKbxf,EAA2B,CAC/BA,SAAU5qB,KACVnH,KAAI,EACJ6vC,KAPW1oC,KAAK0oC,OAAS3E,GAAa2G,SACpC3G,GAAa4G,WACb3qC,KAAK0oC,KAMPyB,MAAK,EACLE,QAAO,EACPzB,QAAO,EACPwB,SAAQ,EACRK,aAAY,GASd,OANIzqC,KAAK6oC,SACPje,EAASie,OAAS7oC,KAAK6oC,OACvBje,EAASme,gBAAkB/oC,KAAK+oC,gBAChCne,EAASqe,gBAAkBjpC,KAAKipC,iBAG3Bre,GAGF,YAAAggB,mBAAP,SAA0BC,GAExB,IAAMnB,EAAW1pC,KAAKupC,mBAAmBsB,EAAa7qC,KAAK4oC,SAE3D,IAAKc,EAEH,OAAO,KAGT,IAAM7wC,EAAOmH,KAAKgpC,oBACZmB,EAAQT,EAAS/qC,MACjBiqC,EAAU,CAAC5oC,KAAKsE,SAChB8lC,EAAWpqC,KAAK+pC,YAAYnB,GAC5ByB,EAAUrG,GAAgB8G,KAC1BL,EAAezqC,KAAKkpC,SACtB,GAAMxnC,KAAK0oC,GACXpqC,KAAKgpB,SACHohB,EACA,GAAMtkC,SAASskC,GAOfxf,EAA2B,CAC/BA,SAAU5qB,KACVnH,KAAI,EACJ6vC,KATW1oC,KAAK0oC,OAAS3E,GAAa2G,SACpC3G,GAAa2G,SACb1qC,KAAK6oC,OACH9E,GAAagH,gBACbhH,GAAaiH,IAMjBb,MAAK,EACLE,QAAO,EACPzB,QAAO,EACPwB,SAAQ,EACRK,aAAY,GAUd,OAPIzqC,KAAK6oC,SACPje,EAASqgB,MAAQ,CACfjrC,KAAK6oC,OAAO,GACZ7oC,KAAKipC,gBAAgB9vC,IAAI0xC,KAItBjgB,GAGF,YAAAsgB,aAAP,SAAoBryC,GAElB,IAAMsyC,EAA2B,GAEjC,GAAInrC,KAAKsE,QAAQzL,OAASA,EAC1B,CACE,IAAM,EAAgBmH,KAAK8pC,aAAa9pC,KAAK4oC,SACvCjqC,EAA0BqB,KAAKsE,QAAQ3F,MAAM9B,IAAI,SAAC+B,EAAMtG,GAAM,OAACsG,EAAM,EAActG,MAEzF6yC,EAAU5sC,KAAK,CACb4E,KAAMu7B,GAAc0M,QACpBzsC,MAAK,EACLisB,SAAU5qB,OAGRA,KAAK6oC,QAEPsC,EAAU5sC,KAAK,CACb4E,KAAMu7B,GAAcoM,KACpBnsC,MAAO,CAACqB,KAAK6oC,QACbje,SAAU5qB,OAKhB,OAAOmrC,GAIK,EAAAE,QAAd,SAAsBznC,EAAmB/B,GAYvC,IAAMmnC,EAAsBnnC,EAAQypC,iBAAmBzpC,EAAQk3B,KACzD4P,EAAsB9mC,EAAQ0pC,kBAAoB1pC,EAAQ2oB,IAC1DghB,EAAmB3pC,EAAQ2pC,kBAAqB7C,EAAsB,IACtE9vC,EAAOgJ,EAAQhJ,MAAS8vC,EAAsB,YAAcK,EAC5DyC,EAAe7nC,EAAKoZ,UAAUnb,EAAQ2oB,KAAK4b,aAAaznC,MACxD+sC,EAAeD,EAAa5uC,IAAI,SAACzC,GAAM,OAAAoxC,EAAmBpxC,IAEhE,OAAO,IAAIsN,EAAS9D,EAAM,CACxB/K,KAAI,EACJmpC,QAASngC,EAAQmgC,SAAW9lC,IAC5B+lC,QAASpgC,EAAQogC,SAAW/lC,IAC5BwsC,KAAM3E,GAAa2G,SACnBpmC,QAAS,CACPzL,KAAMgJ,EAAQk3B,KACdp6B,MAAO+sC,GAET/C,oBAAmB,EACnBC,QAAS,CAAC,CACR/vC,KAAMgJ,EAAQ2oB,IACd7rB,MAAO8sC,IAETzC,oBAAmB,EACnBE,UAAU,EACVC,MAAuB,IAAjBtnC,EAAQsnC,KACdngB,UAA2B,IAAjBnnB,EAAQsnC,QAKR,EAAAwC,UAAd,SAAwB/nC,EAAmB/B,GAYzC,OAAO7B,KAAKqrC,QAAQznC,EAAM,CACxB/K,KAAMgJ,EAAQhJ,KACd2xB,IAAK3oB,EAAQ8pC,UACb5S,KAAMl3B,EAAQ+pC,UACdN,gBAAiBzpC,EAAQgqC,sBACzBN,iBAAkB1pC,EAAQiqC,sBAC1BN,iBAAkB3pC,EAAQ2pC,iBAC1BrC,KAAMtnC,EAAQsnC,QAKJ,EAAA4C,OAAd,SAAqBnoC,EAAmB/B,GAatC,IAAMmnC,EAAsBnnC,EAAQypC,iBAAmBzpC,EAAQkqC,OACzDpD,EAAsB9mC,EAAQmqC,oBAAsBnqC,EAAQ2oB,IAC5DghB,EAAmB3pC,EAAQ2pC,kBAAqB7C,EAAsB,IACtE9vC,EAAOgJ,EAAQhJ,MAAS8vC,EAAsB,WAAaK,EAC3DyC,EAAe7nC,EAAKoZ,UAAUnb,EAAQ2oB,KAAK4b,aAAaznC,MACxD+sC,EAAeD,EAAa5uC,IAAI,SAACzC,GAAM,OAAAoxC,EAAmBpxC,IAEhE,OAAO,IAAIsN,EAAS9D,EAAM,CACxB/K,KAAI,EACJmpC,QAASngC,EAAQmgC,SAAW9lC,IAC5B+lC,QAASpgC,EAAQogC,SAAW/lC,IAC5BwsC,KAAM3E,GAAakI,QACnB3nC,QAAS,CACPzL,KAAMgJ,EAAQkqC,OACdptC,MAAO+sC,GAET/C,oBAAmB,EACnBC,QAAS,CAAC,CACR/vC,KAAMgJ,EAAQ2oB,IACd7rB,MAAO8sC,IAETzC,oBAAmB,EACnBhgB,SAAUnnB,EAAQmnB,SAClBmgB,KAAMtnC,EAAQsnC,QAKJ,EAAA+C,aAAd,SAA2BtoC,EAAmB/B,GAa5C,OAAO7B,KAAK+rC,OAAOnoC,EAAM,CACvB/K,KAAMgJ,EAAQhJ,KACdkzC,OAAQlqC,EAAQ8pC,UAChBnhB,IAAK3oB,EAAQ2oB,IACbxB,SAAUnnB,EAAQmnB,SAClBmgB,KAAMtnC,EAAQsnC,KACd6C,mBAAoBnqC,EAAQgqC,sBAC5BP,gBAAiBzpC,EAAQypC,gBACzBE,iBAAkB3pC,EAAQ2pC,oBAKhB,EAAAW,kBAAd,SAAgCvoC,EAAmB/B,GAejD,IAAM8mC,EAAsB9mC,EAAQmqC,mBAC9BhD,EAAsBnnC,EAAQuqC,kBAAoBvqC,EAAQkqC,OAC1DlzC,EAAOgJ,EAAQhJ,MAAS8vC,EAAsB,sBAAwBK,EACtEwC,EAAmB3pC,EAAQ2pC,kBAAqB7C,EAAsB,IACtEC,EAAU/mC,EAAQwqC,KAAKxvC,IAAI,SAACyvC,GAAa,OAC7CzzC,KAAMyzC,EACN3tC,MAAOiF,EAAKoZ,UAAUsvB,GAAUlG,aAAaznC,SAEzC+sC,EAAe9C,EAAQ,GAAGjqC,MAAM9B,IAAI,SAACzC,GAAM,OAAAoxC,EAAmBpxC,IAEpE,OAAO,IAAIsN,EAAS9D,EAAM,CACxB/K,KAAI,EACJmpC,QAASngC,EAAQmgC,SAAW9lC,IAC5B+lC,QAASpgC,EAAQogC,SAAW/lC,IAC5BwsC,KAAM3E,GAAawI,oBACnBjoC,QAAS,CACPzL,KAAMgJ,EAAQkqC,OACdptC,MAAO+sC,GAET/C,oBAAmB,EACnBC,QAAO,EACPI,oBAAmB,EACnBH,OAAQhnC,EAAQgnC,OAChBE,gBAAiBlnC,EAAQknC,gBACzB/f,SAAUnnB,EAAQmnB,SAClBmgB,KAAMtnC,EAAQsnC,QAIpB,EA5mBA,CAA8B,I,6hBC/B9B,eAkCE,WAAmBtnC,EAAyB+B,GAA5C,MAEE,cAAO,K,OAEP,EAAK/K,KAAOgJ,EAAQhJ,KACpB,EAAK2zC,OAAS3qC,EAAQ2qC,OACtB,EAAKtK,YAAcrgC,EAAQqgC,YAC3B,EAAKC,KAAOtgC,EAAQsgC,KACpB,EAAKH,QAAUngC,EAAQmgC,QACvB,EAAKC,QAAUpgC,EAAQogC,QACvB,EAAKtnB,SAAW/W,EAAKc,QAAQ7C,EAAQ8Y,UACrC,EAAK/L,WAAahL,EAAKmL,cAAclN,EAAQ+M,YAC7C,EAAK69B,SAAW5qC,EAAQ4qC,SAAS5vC,IAAI,SAACjE,GAAM,OAAC,SAAKA,GAAC,CAAEgU,KAAM,EAAK+N,SAAS7O,SAASlT,EAAEgU,U,EAuIxF,OArL6B,QAGb,EAAAhT,OAAd,SAAqBgK,EAAmBy+B,GACtC,YADsC,IAAAA,MAAA,IAC/B,IAAIqK,EAAQ,IACjB7zC,KAAI,KACJ2zC,OAAQ,GACRtK,YAAa,GACbC,KAAM,KACNH,QAAS9lC,IACT+lC,QAAS/lC,IACTye,SAAU,GAAM3gB,SAChByyC,SAAU,CAAC,CACT5zC,KAAM,cACN+T,KAAM5T,OAAOY,OAAO,MACpBooC,QAAS9lC,IACT+lC,QAAS/lC,IACTimC,KAAM,OAERvzB,WAAY,GAAayB,UACtBgyB,GACFz+B,IA4BE,YAAA2+B,KAAP,SAAY1gC,EAAyB+B,GAArC,WAEM5D,KAAKwiC,WAAW3gC,KAElB7B,KAAKnH,KAAOgJ,EAAQhJ,KACpBmH,KAAKgiC,QAAUngC,EAAQmgC,SAAW9lC,IAClC8D,KAAKiiC,QAAUpgC,EAAQogC,SAAW/lC,IAClC8D,KAAKwsC,OAAS3qC,EAAQ2qC,OACtBxsC,KAAKkiC,YAAcrgC,EAAQqgC,YAC3BliC,KAAKmiC,KAAOtgC,EAAQsgC,KACpBniC,KAAKgiC,QAAUngC,EAAQmgC,QACvBhiC,KAAKiiC,QAAUpgC,EAAQogC,QACvBjiC,KAAK2a,SAAW9Y,aAAmB6qC,EAC/B7qC,EAAQ8Y,SACR/W,EAAKc,QAAQ7C,EAAQ8Y,UACzB3a,KAAK4O,WAAa/M,aAAmB6qC,EACjC7qC,EAAQ+M,WACRhL,EAAKmL,cAAclN,EAAQ+M,YAE/B5R,EACEgD,KAAKysC,SACL5qC,aAAmB6qC,EACf7qC,EAAQ4qC,SACR5qC,EAAQ4qC,SAAS5vC,IAAI,SAACjE,GAAM,OAAC,SAAKA,GAAC,CAAEgU,KAAM,EAAK+N,SAAS7O,SAASlT,EAAEgU,UACxE,SAACtR,EAAGC,GAAM,OAAAD,EAAEzC,OAAS0C,EAAE1C,MAAQyC,EAAE0mC,UAAYzmC,EAAEymC,SAC/C,SAAC/kC,EAAQ1D,GAAU,SAAKozC,WAAWpzC,GAAO,IAC1C,SAAC0D,EAAQ8M,EAAOxQ,GAAU,SAAKqzC,cAAc7iC,GAAO,IACpD,SAAC9M,EAAQ8M,EAAOxQ,EAAOsJ,GAAa,SAAKgqC,cAActzC,EAAOsJ,GAAU,KAG1E7C,KAAKqhC,QAAQ,OAAQrhC,KAAM6B,EAAS+B,GACpC5D,KAAK4iC,YAIF,YAAAJ,WAAP,SAAkB3gC,GAEhB,OAAQ6K,EAAUvB,OAAOtJ,aAAmB6qC,EAAU7qC,EAAQiL,SAAWjL,EAAS7B,KAAK8M,WAGlF,YAAA81B,QAAP,WAEE5iC,KAAKiiC,QAAU/lC,IAEf8D,KAAKqhC,QAAQ,UAAWrhC,OAGnB,YAAA8M,OAAP,WAEQ,WAAEjU,EAAA,EAAAA,KAAM2zC,EAAA,EAAAA,OAAQtK,EAAA,EAAAA,YAAaC,EAAA,EAAAA,KAAMH,EAAA,EAAAA,QAASC,EAAA,EAAAA,QAAStnB,EAAA,EAAAA,SAAU8xB,EAAA,EAAAA,SAAU79B,EAAA,EAAAA,WAE/E,MAAO,CACL/V,KAAI,EACJ2zC,OAAM,EACNtK,YAAW,EACXC,KAAI,EACJH,QAAO,EACPC,QAAO,EACPtnB,SAAUA,EAAS7N,SACnB2/B,SAAUA,EAAS5vC,IAAI,SAACjE,GAAM,OAAC,SAAKA,GAAC,CAAEgU,KAAM+N,EAAS9O,OAAOjT,EAAEgU,UAC/DgC,WAAYA,EAAW9B,WAIpB,YAAA6/B,WAAP,SAAkBG,EAAyB5J,QAAA,IAAAA,OAAA,GAEzCljC,KAAKysC,SAASluC,KAAKuuC,GAEnB9sC,KAAKqhC,QAAQ,aAAcrhC,KAAM8sC,GAE5B5J,GAEHljC,KAAK4iC,WAIF,YAAAiK,cAAP,SAAqBC,EAAkCC,EAA4B7J,QAAA,IAAAA,OAAA,GAEjF,IAAMjmC,EAAS3C,EAASwyC,GACpB9sC,KAAKysC,SAASK,GACdA,EACE7J,IAAWhmC,EAcjB,OAZIgmC,IAEFjqC,OAAOoqC,OAAOnmC,EAAQ8vC,GAEtB/sC,KAAKqhC,QAAQ,gBAAiBrhC,KAAM/C,GAE/BimC,GAEHljC,KAAK4iC,WAIFK,GAGF,YAAA2J,cAAP,SAAqBE,EAAkC5J,QAAA,IAAAA,OAAA,GAErD,IAAMn5B,EAAQzP,EAASwyC,GACnBA,EACA9sC,KAAKysC,SAAS73B,QAAQk4B,GACpB7J,EAASl5B,GAAS,GAAKA,EAAQ/J,KAAKysC,SAASzwC,OAEnD,GAAIinC,EACJ,CACE,IAAMI,EAAUrjC,KAAKysC,SAAS1iC,GAE9B/J,KAAKqhC,QAAQ,gBAAiBrhC,KAAMqjC,GAE/BH,GAEHljC,KAAK4iC,UAIT,OAAOK,GAGF,YAAAU,SAAP,SAAgBrlC,EAAuBslC,GAErC,IAAMC,EAAMD,EAAQE,WAAWxlC,GAE/B0B,KAAKysC,SAASpmC,QAAQ,SAACymC,GAErBA,EAAQlgC,KAAOi3B,EAAI,CAAEtqC,MAAOuzC,EAAQlgC,SAGtC5M,KAAK4iC,WAGT,EArLA,CAA6B,I,6hBChB7B,eAsBE,WAAmB/gC,EAA+B+B,GAAlD,MAEE,cAAO,K,OAEP,EAAK/K,KAAOgJ,EAAQhJ,KACpB,EAAKmpC,QAAUngC,EAAQmgC,SAAW9lC,IAClC,EAAK+lC,QAAUpgC,EAAQogC,SAAW/lC,IAClC,EAAKimC,KAAOtgC,EAAQsgC,KACpB,EAAKxnB,SAAW/W,EAAKc,QAAQ7C,EAAQ8Y,UACrC,EAAK/N,KAAO,EAAK+N,SAAS7O,SAASjK,EAAQ+K,M,EAwD/C,OAvFmC,QAGnB,EAAAhT,OAAd,SAAqBgK,EAAmBy+B,GACtC,YADsC,IAAAA,MAAA,IAC/B,IAAI2K,EAAc,IACvBn0C,KAAM,GACNmpC,QAAS9lC,IACT+lC,QAAS/lC,IACTye,SAAU,GAAM3gB,SAChB4S,KAAM5T,OAAOY,OAAO,MACpBuoC,KAAM,MACHE,GACFz+B,IAsBE,YAAA2+B,KAAP,SAAY1gC,EAA+B+B,GAErC5D,KAAKwiC,WAAW3gC,KAElB7B,KAAKnH,KAAOgJ,EAAQhJ,KACpBmH,KAAKgiC,QAAUngC,EAAQmgC,SAAW9lC,IAClC8D,KAAKiiC,QAAUpgC,EAAQogC,SAAW/lC,IAClC8D,KAAKmiC,KAAOtgC,EAAQsgC,KACpBniC,KAAK2a,SAAW9Y,aAAmBmrC,EAC/BnrC,EAAQ8Y,SACR/W,EAAKc,QAAQ7C,EAAQ8Y,UACzB3a,KAAK4M,KAAO/K,aAAmBmrC,EAC3BnrC,EAAQ+K,KACR5M,KAAK2a,SAAS7O,SAASjK,EAAQ+K,MAEnC5M,KAAKqhC,QAAQ,OAAQrhC,KAAM6B,EAAS+B,GACpC5D,KAAK4iC,YAIF,YAAAJ,WAAP,SAAkB3gC,GAEhB,OAAQ6K,EAAUvB,OAAOtJ,aAAmBmrC,EAAgBnrC,EAAQiL,SAAWjL,EAAS7B,KAAK8M,WAGxF,YAAA81B,QAAP,WAEE5iC,KAAKiiC,QAAU/lC,IAEf8D,KAAKqhC,QAAQ,UAAWrhC,OAGnB,YAAA8M,OAAP,WAEQ,WAAEjU,EAAA,EAAAA,KAAMmpC,EAAA,EAAAA,QAASC,EAAA,EAAAA,QAASE,EAAA,EAAAA,KAAMxnB,EAAA,EAAAA,SAAU/N,EAAA,EAAAA,KAEhD,MAAO,CACL/T,KAAI,EACJmpC,QAAO,EACPC,QAAO,EACPE,KAAI,EACJxnB,SAAUA,EAAS7N,SACnBF,KAAM+N,EAAS9O,OAAOe,KAInB,YAAA+2B,SAAP,SAAgBrlC,EAAuBslC,GAErC5jC,KAAK4M,KAAOg3B,EAAQtyB,IAAIhT,EAAW,CAAE/E,MAAOyG,KAAK4M,OAEjD5M,KAAK4iC,WAGT,EAvFA,CAAmC,I,4UCdnC,eAyCE,WAAmB/pC,EAAc8jB,GAAjC,MAEE,YAAM9jB,IAAK,K,OAEX,EAAK8jB,SAAWA,E,EAkKpB,OA/MmC,QAanB,EAAAhQ,OAAd,SAAqBC,EAAarH,GAIhC,OAAO,IAAI0nC,EAFErgC,EAjBE,GAmBiBrH,IAGpB,EAAAuH,OAAd,SAAqB3J,GAEnB,MAAO,CAACnD,KAAKwF,GAAIrC,EAAKtB,UAKV,EAAAkL,SAAd,SAAuBH,EAAWI,GAEhC,OAAO,MAKK,EAAAE,SAAd,aAcO,YAAAxI,QAAP,WAEE,IAAK1E,KAAK2c,SAER,OAAO,GAAS1P,SAGlB,IAAML,EAAO5M,KAAK2c,SAASjC,QAAQ1a,KAAK6B,SAExC,OAAO+K,EAAOA,EAAK+N,SAAW,GAAS1N,UAGlC,YAAAG,cAAP,WAEE,OAAOpN,KAAK0E,UAAU0I,iBAGjB,YAAAD,MAAP,WAEE,OAAO8/B,EAAcznC,IAGhB,YAAA8H,MAAP,SAAanK,KAKN,YAAAoK,WAAP,SAAkBC,EAAkBhK,EAAyBU,GAE3D,OAAOlE,KAAK0E,UAAU6I,WAAWC,EAAMhK,EAAKU,IAGvC,YAAAuJ,YAAP,SAAmBjK,GAEjB,OAAOxD,KAAK0E,UAAU+I,YAAYjK,IAG7B,YAAAkK,aAAP,SAAoBnU,GAElB,OAAOyG,KAAK0E,UAAUgJ,aAAanU,IAG9B,YAAA6I,kBAAP,WAEE,OAAOpC,KAAK0E,UAAUtC,qBAGd,YAAAG,iBAAV,SAA2BL,EAAaL,GAEtC,OAAOK,aAAiB+qC,EACpBjtC,KAAK0E,UAAUzC,aAAaC,EAAMwC,UAAW7C,GAC7C7B,KAAK0E,UAAUzC,aAAaC,EAAOL,IAGlC,YAAAgD,WAAP,WAEE,OAAO7E,KAAK0E,UAAUG,cAGjB,YAAA8I,SAAP,WAEE,OAAO3N,KAAK0E,UAAUiJ,YAGd,YAAArL,kBAAV,WAEE,OAAO,GAGF,YAAAhC,SAAP,SAAmBA,GAAnB,WAEE,OAAOA,EAASC,MAAMP,KAAM,WAC1B,OAAAM,EAASI,KAAKusC,EAAcC,gBAAiB,EAAKxoC,UAAW,SAACxD,GAAgB,OAAAA,aAAuB+rC,EAAgB,EAAKprC,QAAUX,EAAYW,QAAU,OAIvJ,YAAAyB,gBAAP,SAAuB5C,GAErB,OAAOA,IAASusC,EAAcC,gBAC1BltC,KAAK0E,UACL,MAGC,YAAAkJ,UAAP,SAAiB9L,QAAA,IAAAA,MAAA,MAEf9B,KAAK8B,OAASA,GAGT,YAAA+L,4BAAP,aAKO,YAAAC,oBAAP,WAEE,OAAO9N,KAAK0E,UAAUoJ,uBAGjB,YAAAC,sBAAP,WAEE,OAAO/N,KAAK0E,UAAUqJ,yBAGjB,YAAAC,qBAAP,WAEE,OAAOhO,KAAK0E,UAAUsJ,wBAGjB,YAAApL,yBAAP,SAAgCC,EAAsB/F,EAAqBgG,GAGzE,OAAOD,GAGF,YAAA4F,QAAP,SAAelP,GAEb,OAAOyG,KAAK0E,UAAU+D,QAAQlP,IAGzB,YAAA6U,UAAP,SAAiB7U,GAEf,OAAOyG,KAAK0E,UAAU0J,UAAU7U,IAG3B,YAAA8U,YAAP,WAEE,OAAO,IAAI4+B,EAAcjtC,KAAK6B,QAAS7B,KAAK2c,WAGvC,YAAArO,MAAP,WAEE,OAAO,IAAI2+B,EAAcjtC,KAAK6B,QAAS7B,KAAK2c,WAGvC,YAAA7P,OAAP,WAEE,OAAOmgC,EAAcngC,OAAO9M,OAGvB,YAAApG,OAAP,WAEE,OAAOoG,KAAK0E,UAAU9K,UAGjB,YAAA2U,OAAP,SAAcC,GAEZ,OAAOxO,KAAK0E,UAAU6J,OAAOC,IAGxB,YAAA1C,SAAP,SAAgBC,GAEd,OAAO/L,KAAK0E,UAAUoH,SAASC,IAG1B,YAAAF,OAAP,SAActS,GAEZ,OAAOyG,KAAK0E,UAAUmH,OAAOtS,IAzMjB,EAAA2zC,gBAAkB,aAElB,EAAA1nC,GAAKoB,EAAGa,UAER,EAAA4F,WAAa,IAAItF,EAAWnB,EAAGa,UAAYb,EAAGiB,WAE9C,EAAA4G,UAAY,IAAIxG,EAAUrB,EAAGa,UAAYb,EAAGiB,WAE5C,EAAAoF,SAAW,IAAIggC,EAAc,GAAI,MAcjC,EAAAv+B,kBAA4B,EAO5B,EAAAC,YAAsB,EA+KtC,EA/MA,CAAmC,G,wkBCPnC,cAOE,WAAmB9M,GAEjB7B,KAAKgZ,QAEDnX,GAEF7B,KAAKsN,MAAMzL,GA8WjB,OA1WS,YAAAsrC,MAAP,SAAatrC,GAEX7B,KAAKgZ,QACLhZ,KAAKsN,MAAMzL,IAGN,YAAAyL,MAAP,SAAazL,G,YAEX,GAAIA,aAAmB/G,I,IAErB,IAA2B,SAAA+G,EAAQ9E,WAAS,8BAC5C,CADW,oBAAClD,EAAA,KAAKN,EAAA,KAEfyG,KAAK0F,IAAI7L,EAAKN,I,sGAGb,GAAIsI,aAAmBurC,EAE1B,IAAK,IAAI90C,EAAI,EAAGA,EAAIuJ,EAAQ7F,SAAU1D,IAEpC0H,KAAK0F,IAAI7D,EAAQwrC,MAAM/0C,GAAIuJ,EAAQyrC,QAAQh1C,SAG1C,GAAImC,EAAQoH,G,IAEf,IAA2B,SAAAA,GAAO,8BAClC,CADW,oBAAChI,EAAA,KAAKN,EAAA,KAEfyG,KAAK0F,IAAI7L,EAAKN,I,sGAGb,GAAI4B,EAAS0G,GAEhB,IAAK,IAAMhI,KAAOgI,EAEhB7B,KAAK0F,IAAI7L,EAAKgI,EAAQhI,KAKrB,YAAA0oC,KAAP,SAAY1gC,EAA4B0rC,GAAxC,WAEQC,EAAM,IAAIJ,EAAQvrC,GAExB7B,KAAKuB,OAAO,SAAC6B,EAAGvJ,GAAQ,OAAA2zC,EAAI50B,IAAI/e,KAEhC2zC,EAAInnC,QAAQ,SAAC9M,EAAOM,GACd,EAAK+e,IAAI/e,IAAQ0zC,EACnBA,EAAQ,EAAKp0C,IAAIU,GAAMN,GAEvB,EAAKmM,IAAI7L,EAAKN,MAKb,YAAAyf,MAAP,WAEEhZ,KAAKqkC,QAAUrrC,OAAOY,OAAO,MAC7BoG,KAAK8Y,KAAO,GACZ9Y,KAAK2X,OAAS,IAGT,YAAA3b,OAAP,WAEE,OAAOgE,KAAK8Y,KAAK9c,QAGZ,YAAAsxC,QAAP,SAAeh1C,GAEb,OAAO0H,KAAK2X,OAAOrf,IAGd,YAAA+0C,MAAP,SAAa/0C,GAEX,OAAO0H,KAAK8Y,KAAKxgB,IAGZ,YAAAm1C,OAAP,SAAcn1C,GAEZ,MAAO,CAAC0H,KAAK8Y,KAAKxgB,GAAI0H,KAAK2X,OAAOrf,KAG7B,YAAAsgB,IAAP,SAAW/e,GAET,OAAOW,EAASX,GAAOA,KAAOmG,KAAKqkC,QAAUrkC,KAAK2X,OAAO+1B,SAAS7zC,IAG7D,YAAA6L,IAAP,SAAW7L,EAAaN,GAEtB,IAAMjB,EAAI0H,KAAKqkC,QAAQxqC,GAEnBS,EAAShC,GAEX0H,KAAK2X,OAAO3N,OAAO1R,EAAG,EAAGiB,IAIzByG,KAAKqkC,QAAQxqC,GAAOmG,KAAK2X,OAAO3b,OAChCgE,KAAK2X,OAAOpZ,KAAKhF,GACjByG,KAAK8Y,KAAKva,KAAK1E,KAIZ,YAAA8zC,MAAP,SAAaC,EAAiBC,GAE5B,IAAMv1C,EAAI0H,KAAK4U,QAAQg5B,GACjB3K,GAAgB,IAAP3qC,EASf,OAPI2qC,WAEKjjC,KAAKqkC,QAAQrkC,KAAK8Y,KAAKxgB,IAC9B0H,KAAKqkC,QAAQwJ,GAAUv1C,EACvB0H,KAAK8Y,KAAK9O,OAAO1R,EAAG,EAAGu1C,IAGlB5K,GAGF,YAAAz2B,KAAP,SAAYhE,GAEVxI,KAAKmtC,MAAMntC,KAAK8tC,UAAUthC,KAAK,SAAC,EAAU,G,IAAV,UAAKuhC,GAAJ,KAAI,MAAK,UAAKC,GAAJ,KAAI,MAAQ,OAAAxlC,EAAIulC,EAAIC,OAG1D,YAAAC,UAAP,SAAiBzlC,QAAA,IAAAA,MAAA,SAAyClN,EAAGC,GAAM,OAAAD,EAAE8b,cAAc7b,KAEjFyE,KAAKmtC,MAAMntC,KAAK8tC,UAAUthC,KAAK,SAAC,EAAU,G,IAAV,UAAC0hC,EAAA,KAAS,GAAL,KAAK,SAACC,EAAA,KAAI,KAAQ,OAAA3lC,EAAI0lC,EAAIC,OAG1D,YAAAC,QAAP,WAKE,IAHA,IAAMt1B,EAAO9Y,KAAK8Y,KACZurB,EAAUrrC,OAAOY,OAAO,MAErBtB,EAAI,EAAGA,EAAIwgB,EAAK9c,OAAQ1D,IAE/B+rC,EAAQvrB,EAAKxgB,IAAMA,EAGrB0H,KAAKqkC,QAAUA,GAGV,YAAAgK,KAAP,SAAY/1C,EAAWqE,GAErB,GAAIrE,IAAMqE,GAAKrE,EAAI,GAAKqE,EAAI,GAAKrE,GAAK0H,KAAK8Y,KAAK9c,QAAUW,GAAKqD,KAAK8Y,KAAK9c,OAEvE,OAAO,EAGT,IAAMsyC,EAAOtuC,KAAK8Y,KAAKxgB,GACjBi2C,EAASvuC,KAAK2X,OAAOrf,GACrBk2C,EAAOxuC,KAAK8Y,KAAKnc,GACjB8xC,EAASzuC,KAAK2X,OAAOhb,GAW3B,OATAqD,KAAKqkC,QAAQiK,GAAQ3xC,EACrBqD,KAAKqkC,QAAQmK,GAAQl2C,EAErB0H,KAAK8Y,KAAK9O,OAAO1R,EAAG,EAAGk2C,GACvBxuC,KAAK8Y,KAAK9O,OAAOrN,EAAG,EAAG2xC,GAEvBtuC,KAAK2X,OAAO3N,OAAO1R,EAAG,EAAGm2C,GACzBzuC,KAAK2X,OAAO3N,OAAOrN,EAAG,EAAG4xC,IAElB,GAGF,YAAAp1C,IAAP,SAA0BU,EAAiB2jB,GAEzC,OAAOhjB,EAASX,GAAOmG,KAAK2X,OAAO3X,KAAKqkC,QAAQxqC,KAAS2jB,EAAY3jB,GAGhE,YAAAwD,OAAP,SAAcxD,EAAiB60C,QAAA,IAAAA,OAAA,GAE7B,IAAMp2C,EAAI0H,KAAK4U,QAAQ/a,GAEvB,IAAW,IAAPvB,EACJ,CACQ,IAAEwgB,EAAF,KAAEA,KAAMnB,EAAR,KAAQA,OACRg3B,EAAWh3B,EAAOrf,GAExB,GAAIo2C,EAEF1uC,KAAKumB,SAASjuB,OAGhB,QACS0H,KAAKqkC,QAAQvrB,EAAKxgB,IACzB,IAAMs2C,EAAU91B,EAAKrY,MACfouC,EAAYl3B,EAAOlX,MAErBnI,IAAMwgB,EAAK9c,SAEb8c,EAAK9O,OAAO1R,EAAG,EAAGs2C,GAClBj3B,EAAO3N,OAAO1R,EAAG,EAAGu2C,GACpB7uC,KAAKqkC,QAAQuK,GAAWt2C,GAI5B,OAAOq2C,IAIJ,YAAApoB,SAAP,SAAgBjuB,GAER,IAAEwgB,EAAF,KAAEA,KAAMnB,EAAR,KAAQA,OAEd,GAAIrf,EAAI,GAAKA,GAAKwgB,EAAK9c,OAErB,OAAO,EAOT,WAJOgE,KAAKqkC,QAAQvrB,EAAKxgB,IACzBwgB,EAAK9O,OAAO1R,EAAG,GACfqf,EAAO3N,OAAO1R,EAAG,KAERA,EAAIwgB,EAAK9c,QAEhBgE,KAAKqkC,QAAQvrB,EAAKxgB,MAGpB,OAAO,GAGF,YAAAw2C,KAAP,SAAYhyC,EAAcgG,GAElB,IAAEgW,EAAF,KAAEA,KAAMnB,EAAR,KAAQA,OAEd,GAAI7a,EAAO,GAAKgG,EAAK,GAAKhG,GAAQgc,EAAK9c,QAAU8G,GAAMgW,EAAK9c,OAE1D,OAAO,EAGT,GAAIc,IAASgG,EACb,CACE,IAAMvJ,EAAQoe,EAAO7a,GACfjD,EAAMif,EAAKhc,GAEjB6a,EAAO3N,OAAOlN,EAAM,GACpBgc,EAAK9O,OAAOlN,EAAM,GAElB6a,EAAO3N,OAAOlH,EAAI,EAAGvJ,GACrBuf,EAAK9O,OAAOlH,EAAI,EAAGjJ,GAEnBmG,KAAKouC,UAGP,OAAO,GAGF,YAAAW,YAAP,SAAmBl1C,GAEjB,IAAMvB,EAAI0H,KAAK4U,QAAQ/a,GAEvB,OAAW,IAAPvB,GAKG0H,KAAK8uC,KAAKx2C,EAAG,IAGf,YAAA02C,WAAP,SAAkBn1C,GAEhB,IAAMvB,EAAI0H,KAAK4U,QAAQ/a,GAEvB,OAAW,IAAPvB,GAKG0H,KAAK8uC,KAAKx2C,EAAG0H,KAAK8Y,KAAK9c,OAAS,IAGlC,YAAA4Y,QAAP,SAAe/a,GAEb,OAAOW,EAASX,GACZA,KAAOmG,KAAKqkC,QACVrkC,KAAKqkC,QAAQxqC,IACZ,EACHmG,KAAK2X,OAAO/C,QAAQ/a,IAGnB,YAAAo1C,MAAP,SAAa11C,GAEX,IAAMjB,EAAI0H,KAAK2X,OAAO/C,QAAQrb,GAE9B,OAAc,IAAPjB,OAAW8F,EAAY4B,KAAK8Y,KAAKxgB,IAGnC,YAAAw1C,QAAP,sBAEE,OAAO9tC,KAAK2X,OAAO9a,IAAI,SAACtD,EAAOjB,GAAM,OAAC,EAAKwgB,KAAKxgB,GAAIiB,MAG/C,YAAAgD,MAAP,WAEE,OAAO,IAAIzB,IAAIkF,KAAK8tC,YAGf,YAAAoB,SAAP,WAIE,IAFA,IAAMxlC,EAAM1Q,OAAOY,OAAO,MAEjBtB,EAAI,EAAGA,EAAI0H,KAAK8Y,KAAK9c,OAAQ1D,IAEpCoR,EAAI1J,KAAK8Y,KAAKxgB,IAAM0H,KAAK2X,OAAOrf,GAGlC,OAAOoR,GAGF,YAAA4E,MAAP,WAEE,OAAO,IAAI8+B,EAAQptC,OAGd,YAAAqG,QAAP,SAAe8oC,GAKb,IAHM,IAAEr2B,EAAF,KAAEA,KAAMnB,EAAR,KAAQA,OACVrf,EAAI,EAEDA,EAAIwgB,EAAK9c,QAChB,CACE,IAAMnC,EAAMif,EAAKxgB,GAGjB62C,EAFcx3B,EAAOrf,GAELuB,GAEZif,EAAKxgB,KAAOuB,GAEdvB,MAKC,YAAAiJ,OAAP,SAAcC,GAKZ,IAHM,IAAEmW,EAAF,KAAEA,OAAQmB,EAAV,KAAUA,KAAMurB,EAAhB,KAAgBA,QAClB+K,EAAS,EAEJ92C,EAAI,EAAGA,EAAIqf,EAAO3b,OAAQ1D,IACnC,CACE,IAAMiB,EAAQoe,EAAOrf,GACfuB,EAAMif,EAAKxgB,GAEbkJ,EAAKjI,EAAOM,IAEd8d,EAAOy3B,GAAU71C,EACjBuf,EAAKs2B,GAAUv1C,EACfwqC,EAAQxqC,GAAOu1C,EACfA,YAIO/K,EAAQxqC,GAIfu1C,EAASz3B,EAAO3b,SAElB2b,EAAO3N,OAAOolC,EAAQz3B,EAAO3b,OAASozC,GACtCt2B,EAAK9O,OAAOolC,EAAQt2B,EAAK9c,OAASozC,KAIxC,EA3XA,G,ynBCKA,eAQE,WAAmBvtC,GAAnB,MAEE,cAAO,K,OAEHA,GAEF,EAAKyL,MAAMzL,G,EAwHjB,OAtI+C,QAG/B,EAAAwtC,aAAd,SAA4C3zC,GAE1C,OAAOjB,EAAQiB,IAAMA,EAAEM,OAAS,GAAKxB,EAASkB,EAAE,GAAG7C,OAa9C,YAAAs0C,MAAP,SAAatrC,GAEX7B,KAAKgZ,QACLhZ,KAAKsN,MAAMzL,IAGN,YAAAyL,MAAP,SAAazL,G,QAEX,GAAIytC,EAASD,aAAaxtC,G,IAExB,IAAoB,SAAAA,GAAO,8BAC3B,CADK,IAAMid,EAAK,QAEd9e,KAAK5C,IAAI0hB,I,sGAKX,YAAMxR,MAAK,UAACzL,IAIT,YAAA0gC,KAAP,SAAY1gC,EAA6B0rC,GAEvC,YAAMhL,KAAI,UAAC,IAAI+M,EAASztC,GAAU0rC,IAG7B,YAAAgC,WAAP,SACEC,EACApyC,EACAC,EACAC,EACAH,GALF,WAOQD,EAAS,IAAIoyC,EAAYE,GA4B/B,OA1BIryC,EACFH,EACEgD,KAAK2X,OACLza,EAAOya,OACPxa,EACA,SAACF,EAAQ1D,GAAU,OAAA6D,EAAI,EAAM7D,EAAOA,EAAMV,OAC1C,SAACoE,EAAQ8M,EAAOxQ,GAAU,OAAA8D,EAAO,EAAM9D,EAAOA,EAAMV,OACpD,SAACoE,EAAQ8M,EAAOxQ,EAAOsJ,GAAa,OAAAvF,EAAO,EAAM/D,EAAOsJ,EAAUtJ,EAAMV,SAG1EmH,KAAKqG,QAAQ,SAAC7I,EAAaiyC,GACzB,IAAMhkC,EAAWvO,EAAO/D,IAAIs2C,QACXrxC,IAAbqN,EACFpO,EAAO,EAAMG,EAAaiyC,GAE1BnyC,EAAO,EAAME,EAAaiO,EAAUgkC,KAIxCvyC,EAAOmJ,QAAQ,SAAC1I,EAAa+xC,GACtB,EAAK92B,IAAI82B,IACZtyC,EAAI,EAAMO,EAAa+xC,MAKtB1vC,MAGF,YAAAwpC,OAAP,SAAcmG,EAAwB7M,GAEpC,IAAMhkB,EAAQ9e,KAAK7G,IAAIw2C,GACjBC,IAAU9wB,GAASA,EAAMjmB,OAASiqC,EASxC,OAPI8M,IAEF5vC,KAAK2tC,MAAM7uB,EAAOgkB,GAElBhkB,EAAMjmB,KAAOiqC,GAGR8M,GAGF,YAAAh3B,IAAP,SAAWkG,GAET,OAAO9e,KAAK6vC,OAAO/wB,KAAU9e,KAAKqkC,SAG7B,YAAAjnC,IAAP,SAAW0hB,GAET9e,KAAK0F,IAAIoZ,EAAMjmB,KAAMimB,IAGhB,YAAA+wB,OAAP,SAAc/wB,GAEZ,OAAOtkB,EAASskB,GAASA,EAAQA,EAAMjmB,MAGlC,YAAA40B,QAAP,SAAe3O,GAEb,OAAOtkB,EAASskB,GAAS9e,KAAK7G,IAAI2lB,GAASA,GAGtC,YAAAlK,QAAP,SAAekK,GAEb,IAAMxmB,EAAI0H,KAAKqkC,QAAQrkC,KAAK6vC,OAAO/wB,IAEnC,OAAOxkB,EAAShC,GAAKA,GAAK,GAGrB,YAAA22C,MAAP,SAAanwB,GAEX,OAAOA,EAAMjmB,MAGR,YAAAyV,MAAP,WAEE,OAAO,IAAIghC,EAAStvC,OAGxB,EAtIA,CAA+C,I,ksCCwK/C,eAsBE,WAAmBvB,GAAnB,MAEE,cAAO,K,OAJD,EAAAqxC,QAAkB,EAMxB,EAAKvqC,MAAQvM,OAAOY,OAAO,MAC3B,EAAKm2C,SAAW,GAChB,EAAKC,WAAa,GAClB,EAAK7gC,YAAcnW,OAAOY,OAAO,MACjC,EAAKyT,WAAa,IAAItF,EAAW,IACjC,EAAK0G,UAAY,IAAIxG,EAAU,IAC/B,EAAKgoC,QAAUj3C,OAAOY,OAAO,MAE7B,EAAKs2C,SAAW,IAAI,GACpB,EAAKC,UAAY,IAAI,GACrB,EAAKC,UAAY,IAAI,GACrB,EAAKC,SAAW,IAAI,GACpB,EAAKzjC,KAAO,IAAI,GAEhB,EAAK64B,gBAAkB,GAAM1M,KAAK,GAAMwG,OAAQ,GAAMC,UACtD,EAAKoG,qBAAuB,GAAMrG,OAE9B9gC,GAEF,EAAKrB,IAAIqB,G,EA8iEf,OA3lEiC,QAiDxB,YAAA6xC,SAAP,WAEE,OAAOtwC,KAAK8vC,QAGP,YAAAj9B,UAAP,WAEE7S,KAAK8vC,QAAS,GAMR,YAAAS,UAAR,SAAgD1zC,EAAiBiQ,GAE/D,YAF+D,IAAAA,OAAA,GAExDjP,EAAUhB,EAAIqyC,WAAY,SAACxyC,GAAM,OAAAoQ,EAASpQ,EAAEoQ,SAAWpQ,KAGzD,YAAA8zC,OAAP,SAAcC,EAA2BhyC,QAA3B,IAAAgyC,OAAA,GAEZ,IAAMnlC,EAAO,IAAIolC,EAAY,CAC3BnrC,MAAOlH,EAAa2B,KAAKuF,OACzB4J,YAAa9Q,EAAa2B,KAAKmP,aAC/B+gC,SAAUlwC,KAAKuwC,UAAUvwC,KAAKkwC,SAAUO,GACxCN,UAAWnwC,KAAKuwC,UAAUvwC,KAAKmwC,UAAWM,GAC1CL,UAAWpwC,KAAKuwC,UAAUvwC,KAAKowC,UAAWK,GAC1CJ,SAAUrwC,KAAKuwC,UAAUvwC,KAAKqwC,SAAUI,GACxC7jC,KAAM5M,KAAKuwC,UAAUvwC,KAAK4M,KAAM6jC,KAQlC,OALIhyC,GAEF6M,EAAKlO,IAAIqB,GAGJ6M,GAGF,YAAAs3B,QAAP,WAEE5iC,KAAKqhC,QAAQ,UAAWrhC,OAGnB,YAAA5C,IAAP,SAAWyE,GAAX,WAEMA,EAAQ0D,OAEV1D,EAAQ0D,MAAMc,QAAQ,SAAAlD,GAAQ,SAAKwtC,QAAQxtC,GAAM,KAGnDnD,KAAK4wC,iBAED/uC,EAAQsN,aAEVtN,EAAQsN,YAAY9I,QAAQ,SAAAmH,GAAQ,SAAKqjC,cAAcrjC,KAGzDxN,KAAK8wC,OAAOjvC,IAGP,YAAAkL,SAAP,SAAgBH,G,YAEd,IAAwB,SAAA5M,KAAKgwC,YAAU,8BACvC,CADK,IAEG7sC,EAFY,QAEK4J,SAASH,EAAM5M,MAEtC,GAAImD,EAEF,OAAOA,G,iGAIX,OAAO,GAAQ8J,UAGV,YAAAK,MAAP,SAAanK,EAAYyJ,GAEvB,OAAO,GAAMU,MAAMnK,EAAMnD,KAAK+M,SAASH,KAGlC,YAAAgkC,eAAP,WAEE5wC,KAAKgwC,WAAWxjC,KAAK,SAAClR,EAAGC,GAAM,OAAAA,EAAEmT,iBAAmBpT,EAAEoT,oBAGjD,YAAAiiC,QAAP,SAA+BxtC,EAAoB4tC,QAAA,IAAAA,OAAA,GAEjD/wC,KAAKuF,MAAMpC,EAAKqC,IAAMrC,EACtBnD,KAAK+vC,SAASxxC,KAAK4E,GACnBnD,KAAKiwC,QAAQ9sC,EAAKqC,IAAM,SAACoH,EAAMrH,GAAU,OAAApC,EAAKwJ,OAAOC,EAAMrH,IAC3DvF,KAAKgwC,WAAWzxC,KAAK4E,GAEhB4tC,GAEH/wC,KAAK4wC,iBAGFztC,EAAKwL,aAERxL,EAAKwL,YAAa,EAClBxL,EAAK+J,aAIF,YAAA8jC,WAAP,SAAkB7tC,EAAYtB,QAAA,IAAAA,MAAA,CAAmCQ,QAAQ,EAAM9I,OAAO,EAAO4I,OAAO,IAElG,IAAM8uC,EAAQjxC,KAAKkwC,SAASv4B,OAAOtG,KAAK,SAAC4N,GAAW,OAAAA,EAAO9b,KAAKlB,aAAakB,EAAMtB,KAEnF,QAAOovC,GAAQA,EAAMp4C,MAGhB,YAAAq4C,QAAP,SAAeC,EAA4D5O,EAAsBW,QAAtB,IAAAX,OAAA,QAAsB,IAAAW,OAAA,GAE/F,IAAMt2B,EAAOukC,aAAuB,GAChCA,EACA,GAAcv3C,OAAOoG,KAAMmxC,GAEzB1lC,EAAWzL,KAAK4M,KAAKzT,IAAIyT,EAAK/T,MA6BpC,OA3BI4S,GAEE82B,EAEF92B,EAAS82B,KAAK31B,EAAM5M,MAIpBA,KAAK4M,KAAKxP,IAAIwP,GAGhB5M,KAAKqhC,QAAQ,aAAcrhC,KAAM4M,KAIjC5M,KAAK4M,KAAKxP,IAAIwP,GAEd5M,KAAKqhC,QAAQ,UAAWrhC,KAAM4M,IAGhC5M,KAAKqhC,QAAQ,cAAerhC,MAEvBkjC,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAA0a,QAAP,SAAe7hB,GAEb,OAAOmH,KAAK4M,KAAKzT,IAAIN,EAAM,OAGtB,YAAAu4C,SAAP,WAEE,OAAOpxC,KAAK4M,MAGP,YAAAykC,WAAP,SAAkBC,EAAmCC,EAAoC7C,EAA+BxL,QAAnE,IAAAqO,OAAA,QAAoC,IAAA7C,OAAA,QAA+B,IAAAxL,OAAA,GAEtH,IAAMt2B,EAAO5M,KAAK4M,KAAK6gB,QAAQ6jB,GAE/B,OAAK1kC,KAKD2kC,GAAsBvxC,KAAKwxC,kBAAkB5kC,GAAM5Q,OAAS,KAKhEgE,KAAK4M,KAAKvP,OAAOuP,EAAM8hC,GAEvB1uC,KAAKqhC,QAAQ,aAAcrhC,KAAM4M,GACjC5M,KAAKqhC,QAAQ,cAAerhC,MAEvBkjC,GAEHljC,KAAK4iC,WAGA,IAGF,YAAA6O,UAAP,SAAiBvO,QAAA,IAAAA,OAAA,GAEf,IAAMt2B,EAAO5M,KAAK4M,KAAK+K,OAAOhW,QAE9B3B,KAAK4M,KAAKoM,QAEVhZ,KAAKqhC,QAAQ,YAAarhC,KAAM4M,GAChC5M,KAAKqhC,QAAQ,cAAerhC,MAEvBkjC,GAEHljC,KAAK4iC,WAIF,YAAA8O,WAAP,SAAkBJ,EAAmCxO,EAAiBI,QAAA,IAAAA,OAAA,GAEpE,IAAMt2B,EAAO5M,KAAK4M,KAAK6gB,QAAQ6jB,GACzBK,EAAU/kC,EAAK/T,KAErB,IAAKmH,KAAK4M,KAAK48B,OAAO58B,EAAMk2B,GAE1B,OAAO,EAGT,IAAM8O,EAAO5xC,KAAKwxC,kBAAkB5kC,GAyBpC,OAvBAglC,EAAKvrC,QAAQ,SAACwrC,GAERA,EAAIt4C,iBAAiB,GAEvBs4C,EAAIt4C,MAAMsI,QAAUihC,EAIpB+O,EAAIt4C,MAAMV,KAAOiqC,IAIrBl2B,EAAKy0B,QAAQ,UAAWz0B,EAAM+kC,GAC9B/kC,EAAKg2B,UAEL5iC,KAAKqhC,QAAQ,aAAcrhC,KAAM4M,EAAM+kC,GACvC3xC,KAAKqhC,QAAQ,cAAerhC,MAEvBkjC,GAEHljC,KAAK4iC,UAGAgP,GAGF,YAAAE,YAAP,SAAmBC,EAA0CxP,EAAsBW,QAAtB,IAAAX,OAAA,QAAsB,IAAAW,OAAA,GAEjF,IAAM5kB,EAAOyzB,aAAuB,GAChCA,EACA,GAAKn4C,OAAOoG,KAAM+xC,GAEhBtmC,EAAWzL,KAAKmwC,UAAUh3C,IAAImlB,EAAKzlB,MA6BzC,OA3BI4S,GAEE82B,EAEF92B,EAAS82B,KAAKjkB,EAAMte,MAIpBA,KAAKmwC,UAAU/yC,IAAIkhB,GAGrBte,KAAKqhC,QAAQ,iBAAkBrhC,KAAMse,KAIrCte,KAAKmwC,UAAU/yC,IAAIkhB,GAEnBte,KAAKqhC,QAAQ,cAAerhC,KAAMse,IAGpCte,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAue,YAAP,SAAmB1lB,GAEjB,OAAOmH,KAAKmwC,UAAUh3C,IAAIN,EAAM,OAG3B,YAAAm5C,aAAP,WAEE,OAAOhyC,KAAKmwC,WAGP,YAAA8B,WAAP,SAAkBC,EAAmD3P,EAAsBW,QAAtB,IAAAX,OAAA,QAAsB,IAAAW,OAAA,GAEzF,IAAMiP,EAAUD,aAA0B,GACtCA,EACA,GAAQt4C,OAAOoG,KAAMkyC,GAEnBzmC,EAAWzL,KAAKqwC,SAASl3C,IAAIg5C,EAAQt5C,MA6B3C,OA3BI4S,GAEE82B,EAEF92B,EAAS82B,KAAK4P,EAASnyC,MAIvBA,KAAKqwC,SAASjzC,IAAI+0C,GAGpBnyC,KAAKqhC,QAAQ,gBAAiBrhC,KAAMmyC,KAIpCnyC,KAAKqwC,SAASjzC,IAAI+0C,GAElBnyC,KAAKqhC,QAAQ,aAAcrhC,KAAMmyC,IAGnCnyC,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAoyC,WAAP,SAAkBv5C,GAEhB,OAAOmH,KAAKqwC,SAASl3C,IAAIN,EAAM,OAG1B,YAAAw5C,YAAP,WAEE,OAAOryC,KAAKqwC,UAGP,YAAAiC,cAAP,SAAqBC,EAAgC7D,EAA+BxL,QAA/B,IAAAwL,OAAA,QAA+B,IAAAxL,OAAA,GAElF,IAAMiP,EAAUnyC,KAAKqwC,SAAS5iB,QAAQ8kB,GAEtC,OAAKJ,IAKLnyC,KAAKqwC,SAAShzC,OAAO80C,EAASzD,GAE9B1uC,KAAKqhC,QAAQ,gBAAiBrhC,KAAMmyC,GACpCnyC,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,WAGA,IAGF,YAAA4P,cAAP,SAAqBtP,QAAA,IAAAA,OAAA,GAEnB,IAAMmN,EAAWrwC,KAAKqwC,SAAS14B,OAAOhW,QAEtC3B,KAAKqwC,SAASr3B,QAEdhZ,KAAKqhC,QAAQ,gBAAiBrhC,KAAMqwC,GACpCrwC,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,WAIF,YAAA6P,UAAP,SAAiBC,EAAgDnQ,EAAsBW,QAAtB,IAAAX,OAAA,QAAsB,IAAAW,OAAA,GAErF,IAAMjkB,EAASyzB,aAAyB,GACpCA,EACA,GAAO94C,OAAOoG,KAAM0yC,GAElBjnC,EAAWzL,KAAKkwC,SAAS/2C,IAAI8lB,EAAOpmB,MA6B1C,OA3BI4S,GAEE82B,EAEF92B,EAAS82B,KAAKtjB,EAAQjf,MAItBA,KAAKkwC,SAAS9yC,IAAI6hB,GAGpBjf,KAAKqhC,QAAQ,eAAgBrhC,KAAMif,KAInCjf,KAAKkwC,SAAS9yC,IAAI6hB,GAElBjf,KAAKqhC,QAAQ,YAAarhC,KAAMif,IAGlCjf,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAgd,UAAP,SAAiBnkB,GAEf,OAAOmH,KAAKkwC,SAAS/2C,IAAIN,EAAM,OAG1B,YAAA85C,YAAP,WAEE,OAAO3yC,KAAKkwC,UAGP,YAAA0C,YAAP,SAAmBC,EAA6CtQ,EAAsBW,QAAtB,IAAAX,OAAA,QAAsB,IAAAW,OAAA,GAEpF,IAAMtY,EAAWioB,aAA2B,GACxCA,EACA,IAAI,GAAS7yC,KAAM6yC,GAEjBpnC,EAAWzL,KAAKowC,UAAUj3C,IAAIyxB,EAAS/xB,MA6B7C,OA3BI4S,GAEE82B,EAEF92B,EAAS82B,KAAK3X,EAAU5qB,MAIxBA,KAAKowC,UAAUhzC,IAAIwtB,GAGrB5qB,KAAKqhC,QAAQ,iBAAkBrhC,KAAM4qB,KAIrC5qB,KAAKowC,UAAUhzC,IAAIwtB,GAEnB5qB,KAAKqhC,QAAQ,cAAerhC,KAAM4qB,IAGpC5qB,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,UAGA5iC,MAGF,YAAAod,YAAP,SAAmBvkB,GAEjB,OAAOmH,KAAKowC,UAAUj3C,IAAIN,EAAM,OAG3B,YAAAi6C,aAAP,SAAoBC,GAElB,IAAM3C,EAA8B,GAmBpC,OAjBApwC,KAAKowC,UAAU/pC,QAAQ,SAACukB,GAEtB,IAAMooB,EAAkBpoB,EAASqf,mBAAmB8I,GAEhDC,GAEF5C,EAAU7xC,KAAKy0C,GAGjB,IAAMC,EAAkBroB,EAASggB,mBAAmBmI,GAEhDE,GAEF7C,EAAU7xC,KAAK00C,KAIZ7C,GAGF,YAAAjK,eAAP,SAAsBttC,GAEpB,IAAMigB,EAAsB,GACtBmG,EAASjf,KAAKkwC,SAAS/2C,IAAIN,GAYjC,OAVIomB,IAEFnG,EAAKva,KAAK0gB,EAAOknB,kBAEjBnmC,KAAKowC,UAAU/pC,QAAQ,SAACukB,GAEtB9R,EAAKva,KAAI,MAATua,EAAI,GAAS8R,EAASsgB,aAAaryC,QAIhCigB,GAGF,YAAAo6B,eAAP,SAAsBC,EAAkC5B,EAAoC7C,EAA+BxL,QAAnE,IAAAqO,OAAA,QAAoC,IAAA7C,OAAA,QAA+B,IAAAxL,OAAA,GAEzH,IAAMtY,EAAW5qB,KAAKowC,UAAU3iB,QAAQ0lB,GAExC,OAAKvoB,KAKD2mB,GAAsBvxC,KAAKozC,sBAAsBxoB,GAAU5uB,OAAS,KAKxEgE,KAAKowC,UAAU/yC,OAAOutB,EAAU8jB,GAEhC1uC,KAAKqhC,QAAQ,iBAAkBrhC,KAAM4qB,GACrC5qB,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,WAGA,IAGF,YAAAyQ,eAAP,SAAsBnQ,QAAA,IAAAA,OAAA,GAEpB,IAAMkN,EAAYpwC,KAAKowC,UAAUz4B,OAAOhW,QAExC3B,KAAKowC,UAAUp3B,QAEfhZ,KAAKqhC,QAAQ,iBAAkBrhC,KAAMowC,GACrCpwC,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,WAIF,YAAA0Q,cAAP,SAAqBf,EAAgCzP,EAAiBI,QAAA,IAAAA,OAAA,GAEpE,IAAMiP,EAAUnyC,KAAKqwC,SAAS5iB,QAAQ8kB,GAChCZ,EAAUQ,EAAQt5C,KAExB,QAAKmH,KAAKqwC,SAAS7G,OAAO2I,EAASrP,KAKnCqP,EAAQ9Q,QAAQ,UAAW8Q,EAASR,GACpCQ,EAAQvP,UAER5iC,KAAKqhC,QAAQ,gBAAiBrhC,KAAMmyC,EAASR,GAC7C3xC,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,WAGA,IAGF,YAAA2Q,aAAP,SAAoBC,EAA8B1Q,EAAiBI,QAAA,IAAAA,OAAA,GAEjE,IAAMjkB,EAASjf,KAAKkwC,SAASziB,QAAQ+lB,GAC/B7B,EAAU1yB,EAAOpmB,KAEvB,IAAKmH,KAAKkwC,SAAS1G,OAAOvqB,EAAQ6jB,GAEhC,OAAO,EAGT9iC,KAAKowC,UAAU/pC,QAAQ,SAACukB,GAEtBA,EAAS4e,OAAO3wC,KAAMiqC,KAGxB,IAAM8O,EAAO5xC,KAAKyzC,oBAAoB56C,MAgCtC,OA9BA+4C,EAAKvrC,QAAQ,SAACwrC,GAERA,EAAIt4C,iBAAiB,GAEvBs4C,EAAIt4C,MAAMsI,QAAUihC,EAIpB+O,EAAIt4C,MAAMV,KAAOiqC,IAIL9iC,KAAK0zC,oBAAoB76C,MAEjCwN,QAAQ,SAACwrC,GAEfA,EAAIt4C,MAAMV,KAAOiqC,IAGnB7jB,EAAOoiB,QAAQ,UAAWpiB,EAAQ0yB,GAClC1yB,EAAO2jB,UAEP5iC,KAAKqhC,QAAQ,eAAgBrhC,KAAMif,EAAQ0yB,GAC3C3xC,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,UAGAgP,GAGF,YAAA+B,iBAAP,SAAwB96C,EAAuB+F,EAAcmnC,GAE3D,IAAM9mB,EAASjf,KAAKkwC,SAAS/2C,IAAIN,GAE7BomB,IAEFA,EAAO6mB,WAAWlnC,EAAMmnC,GAExB/lC,KAAKowC,UAAU/pC,QAAQ,SAACukB,GAEtBA,EAASkb,WAAW7mB,EAAOpmB,KAAM+F,EAAMmnC,OAKtC,YAAA6N,iBAAP,SAAwB/6C,EAAuB+F,GAA/C,WAEQqgB,EAASjf,KAAKkwC,SAAS/2C,IAAIN,GAE7BomB,IAEFA,EAAOgnB,WAAWrnC,GAElBoB,KAAKowC,UAAU/pC,QAAQ,SAACukB,GAEtBA,EAASqb,WAAWhnB,EAAOpmB,KAAM+F,GAE7BgsB,EAAS7uB,WAEX,EAAKq0C,UAAU/yC,OAAOutB,OAMvB,YAAAipB,aAAP,SAAoBL,EAA8BjC,EAAoC7C,EAA+BxL,GAArH,gBAAkD,IAAAqO,OAAA,QAAoC,IAAA7C,OAAA,QAA+B,IAAAxL,OAAA,GAEnH,IAAMjkB,EAASjf,KAAKkwC,SAASziB,QAAQ+lB,GAErC,OAAKv0B,KAKDsyB,GAAsBvxC,KAAKyzC,oBAAoBx0B,GAAQjjB,OAAS,KAKpEgE,KAAKkwC,SAAS7yC,OAAO4hB,EAAQyvB,GAE7B1uC,KAAKowC,UAAU/pC,QAAQ,SAACukB,GAEtBA,EAASvtB,OAAOxE,MAEZ+xB,EAAS7uB,WAEX,EAAKq0C,UAAU/yC,OAAOutB,EAAU8jB,KAIpC1uC,KAAKqhC,QAAQ,eAAgBrhC,KAAMif,GACnCjf,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,WAIA,IAGF,YAAAkR,cAAP,SAAqB5Q,QAAA,IAAAA,OAAA,GAEnB,IAAMgN,EAAWlwC,KAAKkwC,SAASv4B,OAAOhW,QAEtC3B,KAAKkwC,SAASl3B,QAEdhZ,KAAKqhC,QAAQ,gBAAiBrhC,KAAMkwC,GACpClwC,KAAKqhC,QAAQ,kBAAmBrhC,MAE3BkjC,GAEHljC,KAAK4iC,WAIF,YAAAmR,eAAP,SAAsB90B,EAAyB3gB,EAAuBslC,GAEpE,IAAMgO,EAAO5xC,KAAKg0C,wBAAwB/0B,GAW1C,OATA2yB,EAAKvrC,QAAQ,SAACwrC,GAEZA,EAAIj6C,KAAKgW,YAET,IAAMqmC,EAAgBpC,EAAI1uC,KAAKJ,iBAAiBzE,GAEhDuzC,EAAIjlC,KAAOg3B,EAAQtyB,IAAI2iC,EAAe,CAAE16C,MAAOs4C,EAAIjlC,SAG9CglC,GAGF,YAAAsC,eAAP,SAAsBf,EAAkCrQ,EAAiBI,QAAA,IAAAA,OAAA,GAEvE,IAAMtY,EAAW5qB,KAAKowC,UAAU3iB,QAAQ0lB,GAClCxB,EAAU/mB,EAAS/xB,KAEzB,IAAKmH,KAAKowC,UAAU5G,OAAO5e,EAAUkY,GAEnC,OAAO,EAGT,IAAM8O,EAAO5xC,KAAKozC,sBAAsBxoB,GAkBxC,OAhBAgnB,EAAKvrC,QAAQ,SAACwrC,GAEZA,EAAIt4C,MAAMV,KAAOiqC,IAGnBlY,EAASyW,QAAQ,UAAWzW,EAAU+mB,GACtC/mB,EAASgY,UAET5iC,KAAKqhC,QAAQ,iBAAkBrhC,KAAM4qB,EAAU+mB,GAC/C3xC,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,UAGAgP,GAGF,YAAAuC,eAAP,SAAsBC,EAA0BtR,EAAiBI,QAAA,IAAAA,OAAA,GAE/D,IAAM5kB,EAAOte,KAAKmwC,UAAU1iB,QAAQ2mB,GAC9BzC,EAAUrzB,EAAKzlB,KAErB,IAAKmH,KAAKmwC,UAAU3G,OAAOlrB,EAAMwkB,GAE/B,OAAO,EAGT,IAAM8O,EAAO5xC,KAAKq0C,sBAAsB/1B,GAkBxC,OAhBAszB,EAAKvrC,QAAQ,SAACwrC,GAEZA,EAAIt4C,MAAMV,KAAOiqC,IAGnBxkB,EAAK+iB,QAAQ,UAAW/iB,EAAMqzB,GAC9BrzB,EAAKskB,UAEL5iC,KAAKqhC,QAAQ,iBAAkBrhC,KAAMse,EAAMqzB,GAC3C3xC,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,UAGAgP,GAGF,YAAA0C,wBAAP,SAA+BF,EAA0BzC,EAAiB7O,GAExE,IAAMxkB,EAAOte,KAAKmwC,UAAUh3C,IAAIi7C,GAEhC,IAAK91B,EAEH,OAAO,EAGT,IAAKA,EAAKukB,gBAAgB8O,EAAS7O,GAEjC,OAAO,EAGT,IAAM8O,EAAO5xC,KAAKq0C,sBAAsBD,EAAWzC,GAQnD,OANAC,EAAKvrC,QAAQ,SAACwrC,GAEZA,EAAIt4C,MAAM6kB,KAAK0kB,GAAW+O,EAAIt4C,MAAM6kB,KAAKuzB,UAClCE,EAAIt4C,MAAM6kB,KAAKuzB,KAGjBC,GAGF,YAAA2C,wBAAP,SAA+BH,EAA0Bv7C,GAEvD,IAAMylB,EAAOte,KAAKmwC,UAAUh3C,IAAIi7C,GAEhC,IAAK91B,EAEH,OAAO,EAGT,IAAKA,EAAK0kB,gBAAgBnqC,GAExB,OAAO,EAGT,IAAM+4C,EAAO5xC,KAAKq0C,sBAAsBD,EAAWv7C,GAOnD,OALA+4C,EAAKvrC,QAAQ,SAACwrC,UAELA,EAAIt4C,MAAM6kB,KAAKvlB,KAGjB+4C,GAGF,YAAA4C,eAAP,SAAsBJ,EAA0B7C,EAAoC7C,EAA+BxL,QAAnE,IAAAqO,OAAA,QAAoC,IAAA7C,OAAA,QAA+B,IAAAxL,OAAA,GAEjH,IAAM5kB,EAAOte,KAAKmwC,UAAU1iB,QAAQ2mB,GAEpC,OAAK91B,KAKDizB,GAAsBvxC,KAAKq0C,sBAAsB/1B,GAAMtiB,OAAS,KAKpEgE,KAAKmwC,UAAU9yC,OAAOihB,EAAMowB,GAE5B1uC,KAAKqhC,QAAQ,iBAAkBrhC,KAAMse,GACrCte,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,WAGA,IAGF,YAAA6R,eAAP,SAAsBvR,QAAA,IAAAA,OAAA,GAEpB,IAAMiN,EAAYnwC,KAAKmwC,UAAUx4B,OAAOhW,QAExC3B,KAAKmwC,UAAUn3B,QAEfhZ,KAAKqhC,QAAQ,iBAAkBrhC,KAAMmwC,GACrCnwC,KAAKqhC,QAAQ,mBAAoBrhC,MAE5BkjC,GAEHljC,KAAK4iC,WAIF,YAAAgC,UAAP,SAAiB4O,EAA8BkB,EAA4CnS,EAAsBW,QAAtB,IAAAX,OAAA,QAAsB,IAAAW,OAAA,GAE/G,IAAMjkB,EAASjf,KAAKkwC,SAASziB,QAAQ+lB,GAErC,IAAKv0B,EAEH,OAAO,EAGT,IAAMG,EAASs1B,aAAyB,GACpCA,EACA,GAAK96C,OAAOoG,KAAM00C,GAEhBjpC,EAAWwT,EAAOE,QAAQC,EAAOvmB,MA6BvC,OA3BI4S,GAEE82B,EAEF92B,EAAS82B,KAAKnjB,EAAQpf,MAItBif,EAAO2lB,UAAUxlB,GAGnBpf,KAAKqhC,QAAQ,eAAgBrhC,KAAMof,EAAQH,KAI3CA,EAAO2lB,UAAUxlB,GAEjBpf,KAAKqhC,QAAQ,YAAarhC,KAAMof,EAAQH,IAG1Cjf,KAAKqhC,QAAQ,iBAAkBrhC,MAE1BkjC,GAEHljC,KAAK4iC,WAGA,GAGF,YAAA6F,aAAP,SAAoB+K,EAA8BmB,EAA4B7R,EAAiBI,QAAA,IAAAA,OAAA,GAE7F,IAAMjkB,EAASjf,KAAKkwC,SAASziB,QAAQ+lB,GAErC,IAAKv0B,EAEH,OAAO,EAGT,IAAMG,EAASH,EAAOE,QAAQnf,KAAKmwC,UAAUN,OAAO8E,IAEpD,IAAKv1B,EAEH,OAAO,EAGT,IAAMuyB,EAAUvyB,EAAOvmB,KAEvBomB,EAAOwpB,aAAakJ,EAAS7O,GAE7B,IAAM8O,EAAO5xC,KAAK0zC,oBAAoBz0B,EAAQG,GAkB9C,OAhBAwyB,EAAKvrC,QAAQ,SAACwrC,GAEZA,EAAIt4C,MAAMV,KAAOiqC,IAGnB1jB,EAAOiiB,QAAQ,UAAWjiB,EAAQuyB,GAClCvyB,EAAOwjB,UAEP5iC,KAAKqhC,QAAQ,eAAgBrhC,KAAMof,EAAQH,EAAQ0yB,GACnD3xC,KAAKqhC,QAAQ,iBAAkBrhC,MAE1BkjC,GAEHljC,KAAK4iC,UAGAgP,GAGF,YAAAgD,sBAAP,SAA6BpB,EAA8BmB,EAA4BhD,EAAiB7O,GAEtG,IAAM7jB,EAASjf,KAAKkwC,SAASziB,QAAQ+lB,GAErC,IAAKv0B,EAEH,OAAO,EAGT,IAAMG,EAASH,EAAOE,QAAQnf,KAAKmwC,UAAUN,OAAO8E,IAEpD,IAAKv1B,EAEH,OAAO,EAGT,IAAKA,EAAOyjB,gBAAgB8O,EAAS7O,GAEnC,OAAO,EAGT,IAAM8O,EAAO5xC,KAAK0zC,oBAAoBF,EAAamB,EAAahD,GAQhE,OANAC,EAAKvrC,QAAQ,SAACwrC,GAEZA,EAAIt4C,MAAM6kB,KAAK0kB,GAAW+O,EAAIt4C,MAAM6kB,KAAKuzB,UAClCE,EAAIt4C,MAAM6kB,KAAKuzB,KAGjBC,GAGF,YAAAiD,sBAAP,SAA6BrB,EAA8BmB,EAA4B97C,GAErF,IAAMomB,EAASjf,KAAKkwC,SAASziB,QAAQ+lB,GAErC,IAAKv0B,EAEH,OAAO,EAGT,IAAMG,EAASH,EAAOE,QAAQnf,KAAKmwC,UAAUN,OAAO8E,IAEpD,IAAKv1B,EAEH,OAAO,EAGT,IAAKA,EAAO4jB,gBAAgBnqC,GAE1B,OAAO,EAGT,IAAM+4C,EAAO5xC,KAAK0zC,oBAAoBF,EAAamB,EAAa97C,GAOhE,OALA+4C,EAAKvrC,QAAQ,SAACwrC,UAELA,EAAIt4C,MAAM6kB,KAAKvlB,KAGjB+4C,GAGF,YAAA/M,aAAP,SAAoB2O,EAA8BmB,EAA4BpD,EAAoC7C,EAA+BxL,QAAnE,IAAAqO,OAAA,QAAoC,IAAA7C,OAAA,QAA+B,IAAAxL,OAAA,GAE/I,IAAMjkB,EAASjf,KAAKkwC,SAASziB,QAAQ+lB,GAErC,IAAKv0B,EAEH,OAAO,EAGT,IAAMG,EAASH,EAAOE,QAAQnf,KAAKmwC,UAAUN,OAAO8E,IAEpD,QAAKv1B,MAKDmyB,GAAsBvxC,KAAK0zC,oBAAoBF,EAAamB,GAAa34C,OAAS,KAKtFijB,EAAO4lB,aAAazlB,EAAOvmB,MAG3BmH,KAAKqhC,QAAQ,eAAgBrhC,KAAMof,EAAQH,GAC3Cjf,KAAKqhC,QAAQ,iBAAkBrhC,MAE1BkjC,GAEHljC,KAAK4iC,WAGA,KAKF,YAAAR,YAAP,SAAmC7oC,EAAYmvC,EAAoBlrB,QAAA,IAAAA,MAAA,MAEjE,IAAMyX,EAASj1B,KAAK0E,QAAQnL,GAE5B,OAAO07B,aAAkByT,EAAOzT,EAASzX,GAGpC,YAAA9Y,QAAP,SAAenL,EAAYikB,GAEzB,GAAIjkB,aAAiB,EAEnB,OAAOA,EAGT,IAAMiM,EAAK/K,EAAQlB,GAASA,EAAM,GAAKA,EACjCqT,EAAOnS,EAAQlB,GAASA,EAAQ,GAChCm7B,EAAS10B,KAAKiwC,QAAQzqC,GAE5B,IAAKkvB,EACL,CACE,GAAI10B,KAAKkwC,SAASt3B,IAAIpT,GAEpB,OAAOxF,KAAKkwC,SAAS/2C,IAAIqM,GAAIrC,KAG/B,GAAIqa,EAEF,OAAOA,EAGT,MAAM,IAAIs3B,MAAM,uBAAuBtvC,EAAE,iBAAiBjG,KAAKC,UAAUoN,IAG3E,OAAO8nB,EAAO9nB,EAAM5M,OAGf,YAAA+0C,aAAP,WAEE,OAAO/0C,KAAK+vC,SAASlzC,IAAI,SAACrD,GAAM,OAAAA,EAAEyT,YAG7B,YAAA+nC,eAAP,WAEE,OAAOh1C,KAAK+0C,eAAexzC,OAAO,SAAC/H,GAAM,OAAAA,EAAEmU,cAGtC,YAAAsnC,gBAAP,WAEE,OAAOj1C,KAAK+0C,eAAexzC,OAAO,SAAC/H,GAAM,OAACA,EAAEmU,cAGvC,YAAAunC,qBAAP,WAEE,OAAOl1C,KAAK+vC,SAASxuC,OAAO,SAAC/H,GAAM,OAAAA,EAAEyT,SAASU,cAGzC,YAAAwnC,sBAAP,WAEE,OAAOn1C,KAAK+vC,SAASxuC,OAAO,SAAC/H,GAAM,OAACA,EAAEyT,SAASU,cAG1C,YAAA+F,YAAP,SAAmBlO,GAEjB,IAAMiB,EAAOzG,KAAKyO,UAAUtV,IAAIqM,GAEhC,GAAIiB,EAEF,OAAOA,EAGH,IAAC2uC,EAAD,2BAAC,GACDjyC,EAAOnD,KAAKuF,MAAM6vC,GAExB,OAAOjyC,EAAOA,EAAKsL,UAAUtV,IAAIqM,GAAM,MAGlC,YAAAoO,sBAAP,SAA6BpO,EAAYqkB,G,WAAA,IAAAA,MAAA,MAEvC,IAAMpjB,EAAOzG,KAAK0T,YAAYlO,GAE9B,IAAKiB,EAEH,OAAO,KAGT,IAAMH,EAAKtG,KAAK2T,aAAalN,EAAKH,IAC5Bf,EAAQvF,KAAK6f,kBAAkBpZ,EAAKH,IAE1C,OAAKA,GAAOf,EAKLvF,KAAKq1C,sBAAsB9vC,EAAMiB,aAAU,MAAKC,EAAKlN,OAAQswB,EAAS,IAHpE,MAMJ,YAAAyrB,gBAAP,SAAuBzrB,GAErB,IAAM0rB,EAAYv1C,KAAKuF,MAAMskB,EAAU1c,SAEvC,OAAOooC,EAAYA,EAAU9mC,UAAU/M,KAAO,IAGzC,YAAAmS,YAAP,SAAmBgW,EAAiBrkB,GAElC,IAAM+vC,EAAYv1C,KAAKuF,MAAMskB,EAAU1c,SAEvC,QAAOooC,KAAcA,EAAU9mC,UAAUtV,IAAIqM,IAGxC,YAAAmO,aAAP,SAAoBnO,GAElB,IAAMc,EAAKtG,KAAKqN,WAAWlU,IAAIqM,GAE/B,GAAIc,EAEF,OAAOA,EAGH,IAAC8uC,EAAD,2BAAC,GACDjyC,EAAOnD,KAAKuF,MAAM6vC,GAExB,OAAOjyC,EAAOA,EAAKkK,WAAWlU,IAAIqM,GAAM,MAGnC,YAAAqa,kBAAP,SAAyBra,GAEvB,IAAMc,EAAKtG,KAAKqN,WAAW5H,SAASD,GAEpC,GAAIc,EAEF,OAAOA,EAGH,IAAC8uC,EAAD,2BAAC,GACDjyC,EAAOnD,KAAKuF,MAAM6vC,GAExB,OAAOjyC,EAAOA,EAAKkK,WAAW5H,SAASD,GAAM,MAGxC,YAAAka,uBAAP,SAA8Bla,EAAYK,EAAuB2Z,EAAoCtb,GAEnG,IAAMoC,EAAKtG,KAAK2T,aAAanO,GACvBD,EAAQvF,KAAK6f,kBAAkBra,GAErC,IAAKc,IAAOf,EAEV,OAAO,KAGT,IAAMiB,EAAajB,EAAMiB,WAEzB,GAAIA,aAAsB,EAExB,OAAOA,EAGT,IAAKnB,EAAwBmB,GAE3B,OAAOA,EAAWyG,SAASoB,cAG7B,IAAMmnC,EAAalvC,EAAGL,iBAAiBjK,OAAS,EAC5CgE,KAAKy1C,uBAAuBjwC,EAAIK,EAAQ2Z,EAAYtb,EAASqB,EAAMmwC,UACnE,GAEJ,OAAO11C,KAAKq1C,sBAAsB9vC,EAAMiB,WAAYgvC,IAG/C,YAAAz1B,0BAAP,SAAiCva,EAAYK,EAAuB2Z,EAAoCtb,EAAewxC,GAAvH,gBAAuH,IAAAA,OAAA,GAErH,IAAMC,EAAU31C,KAAK6f,kBAAkBra,GAEvC,IAAKmwC,EAEH,MAAO,GAGT,IAAMH,EAAax1C,KAAKy1C,uBAAuBjwC,EAAIK,EAAQ2Z,EAAYtb,EAASwxC,GAEhF,OAAO73C,EAAU23C,EAAY,SAACzS,EAAWlqC,GAAS,SAAKw8C,sBAAsBM,EAAQ9vC,OAAOhN,IAAS88C,EAAQ7vC,SAASjN,IAASkqC,EAAWyS,MAGrI,YAAAC,uBAAP,SAA8BjwC,EAAYK,EAAuB2Z,EAAoCtb,EAAewxC,G,qBAAA,IAAAA,OAAA,GAElH,IAAMnwC,EAAiB,GACjBe,EAAKtG,KAAK2T,aAAanO,GACvBmwC,EAAU31C,KAAK6f,kBAAkBra,GAEvC,IAAKc,IAAOqvC,EAEV,OAAOpwC,EAGT,IAAK,IAAMoZ,KAAS9Y,EACpB,CACE,IAAoC,IAAhCS,EAAGN,SAAS4O,QAAQ+J,IAEhBokB,EAAYl9B,EAAO8Y,GAAOja,QAAQ1E,KAAMkE,MAI5CqB,EAAMoZ,GAAS+2B,EAAW3S,EAAYA,EAAU3gC,qBAKhD,kCAAE,IAAA8B,QAAuB,IAAA6B,M,IAE/B,IAAyB,SAAAO,EAAGP,OAAK,8BACjC,CADK,IAAM6vC,EAAU,QAEbC,EAAY71C,KAAKq1C,sBAAsBM,EAAQ5vC,MAAM6vC,GAAarwC,GAExE,GAAIswC,EAIFC,EAFct2B,EAAWo2B,IAAeA,GAEnBF,EAAWG,EAAYA,EAAUzzC,qB,iGAI1D,IAAK,IAAMuc,KAAS9Y,EACpB,CAGI,IAAMk9B,EAFR,IAAoC,IAAhCz8B,EAAGN,SAAS4O,QAAQ+J,IAEhBokB,EAAYl9B,EAAO8Y,GAAOja,QAAQ1E,KAAMmgB,MAI5C5a,EAAMoZ,GAAS+2B,EAAW3S,EAAYA,EAAU3gC,qB,IAKtD,IAAoB,SAAAkE,EAAGT,QAAM,8BAC7B,CACON,EAFIoZ,EAAK,WAIZpZ,EAAMoZ,GAAS3e,KAAKq1C,sBAAsBM,EAAQ9vC,OAAO8Y,GAAQpZ,K,qGAIrE,IAAoB,SAAAe,EAAGR,UAAQ,8BAC/B,CACOP,EAFIoZ,EAAK,WAIZpZ,EAAMoZ,GAAS3e,KAAKq1C,sBAAsBM,EAAQ7vC,SAAS6Y,GAAQpZ,K,iGAIvE,OAAOA,GAGF,YAAA0a,yBAAP,SAAgCza,EAAYD,EAAgBia,EAAoCtb,G,QAExFoC,EAAKtG,KAAK2T,aAAanO,GACvBmwC,EAAU31C,KAAK6f,kBAAkBra,GACjC,8BAAE,IAAAtB,QAAwB,IAAA6B,M,IAEhC,IAAyB,SAAAO,EAAGP,OAAK,8BACjC,CADK,IAAM6vC,EAAU,QAEbC,EAAY71C,KAAKq1C,sBAAsBM,EAAQ5vC,MAAM6vC,GAAarwC,GAExE,GAAIswC,EAIFC,EAFct2B,EAAWo2B,IAAeA,GAEnBC,EAAUzzC,qB,iGAInC,OAAO2zC,GAGF,YAAA/kC,oBAAP,SAA2BxF,EAAgBzF,GAMzC,YANyC,IAAAA,MAAA,IAMlC,CAAE7B,QAJOsH,aAAoB,GAChC,IAAI,GAAW,CAAE7M,MAAOoH,EAAQ,SAAKyF,EAAS3J,QAAQlD,OAAUoH,KAChE,IAAI,GAAS,CAAE,IAAI,GAAW,CAAEpH,MAAOoH,IAAUyF,IAEnCzF,MAAK,IAGlB,YAAAmM,WAAP,SAAkB1G,EAAgBzF,GAEhC,OAAO/F,KAAKgR,oBAAoBxF,EAAUzF,GAAO7B,SAG5C,YAAA8xC,oBAAP,SAA2BC,EAAgBC,EAAyBC,G,YAApE,OAIQr5C,EAAOkD,KAAK2T,aAAasiC,GACzBG,EAAYp2C,KAAK6f,kBAAkBs2B,GACnCE,EAAWv5C,EAAK+I,OAAO8X,OAAO7gB,EAAKgJ,UACnChD,EAAK9C,KAAK2T,aAAawiC,GACvBG,EAAUt2C,KAAK6f,kBAAkBs2B,GACjCI,EAAkCv9C,OAAOY,OAAO,MAChD48C,EAAkBx9C,OAAOY,OAAO,MAGhC47C,EAAan3C,EAAa63C,EAFN,SAAC38C,EAAaM,GACtC,OAACA,EAAKN,EAAO88C,EAASzhC,QAAQ/a,MAE7B0H,OAAO,SAAC,GAAe,OAAf,QAAI,IAAoB,IAChCiL,KAAK,SAAC,EAAQ,GAAW,OAAnB,QAAI,GAAI,QAAI,KAEfiqC,EAAgB,SAAC93B,EAAe+3B,GAEpC,GAA0B,IAAtBlB,EAAWx5C,OAEb,OAAO,KAGT,IAAI26C,GAAe,EAEnB,GAAItxC,EAAwBqxC,IAKL,KAHrBC,EAAcnB,EAAW93C,UAAU,SAAC,G,MAAGyF,EAAH,QAAG,GACrC,OAAAA,EAAKX,YAAY,GAAM4O,MAAMslC,EAAU,SAAKF,KAAM,MAAG73B,GAAQxb,EAAI,IAAI,UAIrEwzC,EAAcnB,EAAW93C,UAAU,SAAC,G,MAAGyF,EAAH,QAAG,GACrC,UAAMiO,MAAMslC,EAAU,SAAKF,IAAM,OAAG73B,GAAQxb,EAAI,IAAG,IAAOX,YAAYW,UAI5E,CACE,IAAM,EAAY,GAAMiO,MAAMslC,GAE9BC,EAAcnB,EAAW93C,UAAU,SAAC,G,IAAGyF,EAAH,QAAG,GAAU,SAAUX,YAAYW,KAGzE,IAAqB,IAAjBwzC,EAEF,OAAO,KAGT,IAAMC,EAASpB,EAAWmB,GAC1BnB,EAAWxrC,OAAO2sC,EAAa,GAC/BJ,EAAQK,EAAO,IAAMj4B,EACrB63B,EAAO73B,GAASi4B,EAAO,I,IAGzB,IAAoB,SAAA9zC,EAAG+C,QAAM,8BAC7B,CADK,IAAM8Y,EAAK,QAId,GAAc,OAFA83B,EAAc93B,EAAO23B,EAAQzwC,OAAO8Y,IAIhD,OAAO,M,qGAIX,IAAuB,SAAA7b,EAAGgD,UAAQ,8BAClC,CADK,IAAMA,EAAQ,QAEjB2wC,EAAc3wC,EAAUwwC,EAAQxwC,SAASA,K,iGAG3C,IAAM+wC,EAAWrB,EAAW34C,IAAI,SAAC,GAAU,OAAV,QAAC,KAElC,MAAO,CAAEC,KAAI,EAAEs5C,UAAS,EAAEtzC,GAAE,EAAEwzC,QAAO,EAAEC,QAAO,EAAEM,SAAQ,IAKnD,YAAAxB,sBAAP,SAA6B74C,EAAgCqJ,GAE3D,OAAOrJ,aAAiB,EACpBA,EACA,aAAcA,EACZA,EAAMyQ,SAASqB,QACfzI,EACE,GAAMuL,MAAM5U,EAAMqJ,EAAQ7F,OAC1B,MAGH,YAAA82C,2BAAP,SAAkCtpC,EAAkBtJ,GAElD,IAAMf,EAAOqK,EAAK9I,QAAQ1E,KAAMkE,GAEhC,OAAOf,EAAOnD,KAAK+2C,qBAAqB5zC,EAAKf,qBAAuB,IAG/D,YAAA40C,yBAAP,SAAgCf,EAAgBC,GAAhD,WAEE,OAAOl2C,KAAKoN,gBACTvQ,IAAI,SAAC,G,IAAEyJ,EAAA,EAAAA,GAAS,SAAK0vC,oBAAoBC,EAAQC,EAAgB5vC,EAAGd,MACpEjE,OAAO,SAACg1C,GAAY,QAAEA,KAGpB,YAAAQ,qBAAP,SAA4B5zC,EAAY8zC,GAAxC,WAEE,YAFsC,IAAAA,OAAA,GAE/Bj3C,KAAKoN,cAAc,SAAC,G,MAAE9G,EAAA,EAAAA,GAAIf,EAAA,EAAAA,MAEzBqZ,EAAYtY,EAAGT,OAAO,GACtBqxC,EAAc3xC,EAAMM,OAAO+Y,GAEjC,GAAIs4B,EACJ,CACE,IAAMC,EAAS,EAAK9B,sBAAsB6B,IAAW,MAAKt4B,GAAYzb,EAAI,IAE1E,GAAIg0C,EACJ,CACE,GAAIh0C,EAAKX,YAAY20C,GAEnB,OAAO,EAGT,GAAIF,GACF3wC,EAAGL,iBAAiBjK,OAAS,GAC7BqJ,EAAwBE,EAAMiB,cAC7B2wC,aAAkB,IAAWA,aAAkB,IAEhD,OAAO,GAKb,OAAO,KAIJ,YAAAC,kCAAP,SAAyC5pC,EAAkBtJ,EAAesxC,EAA0ByB,QAA1B,IAAAzB,MAAA,SAA0B,IAAAyB,OAAA,GAElG,IAAM9zC,EAAOqK,EAAK9I,QAAQ1E,KAAMkE,GAEhC,OAAOf,EAAOnD,KAAKq3C,4BAA4Bl0C,EAAKf,oBAAqBozC,EAAYyB,GAAkB,IAGlG,YAAAI,4BAAP,SAAmCl0C,EAAYqyC,EAA0ByB,GAAzE,WAEE,YAF6C,IAAAzB,MAAA,SAA0B,IAAAyB,OAAA,GAEhEj3C,KAAKoN,cAAc,SAAC,G,IAAE9G,EAAA,EAAAA,GAAIf,EAAA,EAAAA,MAEzBiB,EAAa,EAAK6uC,sBAAsB9vC,EAAMiB,WAAYgvC,GAEhE,GAAIhvC,EACJ,CACE,GAAIrD,EAAKX,YAAYgE,GAEnB,OAAO,EAGT,GAAIywC,GACF3wC,EAAGL,iBAAiBjK,OAAS,GAC7BqJ,EAAwBE,EAAMiB,cAC7BA,aAAsB,IAAWA,aAAsB,IAExD,OAAO,EAIX,OAAO,KAIJ,YAAA8wC,iCAAP,SAAwCzxC,EAAuB3B,GAA/D,WAEE,OAAOlE,KAAKu3C,2BAA2B15C,EAAUgI,EAAQ,SAAA2H,GAEvD,IAAMrK,EAAOqK,EAAK9I,QAAQ,EAAMR,GAEhC,OAAOf,EAAOA,EAAKf,yBAAsBhE,MAItC,YAAAm5C,2BAAP,SAAkC/B,GAAlC,WAEQgC,EAAax+C,OAAO8f,KAAK08B,GAE/B,OAAOx1C,KAAKoN,cAAc,SAAC,G,QAAE7H,EAAA,EAAAA,M,IAE3B,IAAoB,SAAAiyC,GAAU,8BAC9B,CADK,IAAM74B,EAAK,QAERu4B,EAAc3xC,EAAMM,OAAO8Y,IAAUpZ,EAAMO,SAAS6Y,GAE1D,IAAKu4B,EAEH,OAAO,EAGT,IAAMC,EAAS,EAAK9B,sBAAsB6B,EAAa1B,GAEvD,IAAK2B,IAAW3B,EAAW72B,GAAOnc,YAAY20C,GAE5C,OAAO,G,iGAIX,OAAO,KAIJ,YAAA/pC,cAAP,SAAqBqqC,QAAA,IAAAA,MAAA,WAAqH,WAExI,IAAMze,EAAuB,GAEvB0e,EAAoB,SAACrqC,GAEzB,IAAMxQ,EAAMwQ,EAAWxQ,IAEvB,IAAK,IAAM2I,KAAM3I,EACjB,CACE,IAEMysC,EAAO,CAAEhjC,GAFJzJ,EAAI2I,GAEID,MADL8H,EAAW9H,MAAMC,IAG3BiyC,EAAYnO,IAEdtQ,EAAIz6B,KAAK+qC,KASf,OAJAoO,EAAkB13C,KAAKqN,YAEvBnP,EAAW8B,KAAKuF,MAAO,SAAA/L,GAAK,OAAAk+C,EAAkBl+C,EAAE6T,cAEzC2rB,GAGF,YAAA5lB,YAAP,SAAmBlT,EAAoBgE,EAAeyzC,QAAA,IAAAA,MAAqBz3C,EAAKlE,QAE9E,IAAIqX,EAAWnT,EAAK,GAAGwE,QAAQ1E,KAAMkE,GAErC,IAAKmP,EAEH,OAAO,KAKT,IAFA,IAAIvN,EAAWuN,EAASxO,aAEfvM,EAAI,EAAGA,EAAIq/C,EAAYr/C,IAChC,CACE,IAAM0K,EAAO9C,EAAK5H,GAMlB,KAJA+a,EAAWrQ,EAAKU,aACZV,EAAK0B,QAAQ1E,KAAMkE,EAASmP,GAC5BA,EAAS9F,WAAWvK,EAAMhD,KAAMkE,IAIlC,OAAO,KAGT4B,EAAWA,GAAYuN,EAASxO,aAGlC,OAAOiB,IAAauN,EAASxO,aAAe,GAAMiB,SAASuN,GAAYA,GAGlE,YAAAw9B,cAAP,SAA2CrjC,GAEzCxN,KAAKmP,YAAY3B,EAAKhI,IAAMgI,GAGvB,YAAAuB,cAAP,SAAqBxV,GAEnB,GAAIA,aAAiB,EAEnB,OAAOA,EAEJ,GAAIkB,EAAQlB,GACjB,CACE,IAAMq+C,EAAY53C,KAAKmP,YAAY5V,EAAM,IAEzC,IAAKq+C,EAEH,MAAM,IAAI9C,MAAM,oCAAsCv1C,KAAKC,UAAUjG,IAGvE,OAAOq+C,EAAUjrC,OAAOpT,EAAOyG,MAGjC,OAAO,IAAI,GAAmBzG,IAGzB,YAAAk6C,oBAAP,SAA2Bx0B,GAEzB,IAAMpmB,EAAOomB,EAASjf,KAAKkwC,SAASL,OAAO5wB,QAAU7gB,EAE/CmH,EAAQvF,KAAK63C,uBAAuB,IAAYt2C,OAAO,SAACozB,GAC5D,OAAS97B,GAAQA,IAAS87B,EAAMp7B,MAAMsI,UAGlCgN,EAAQ7O,KAAK83C,6BAA6B,IAAqBv2C,OAAO,SAACozB,GAC3E,OAAS97B,GAAQA,IAAS87B,EAAMp7B,MAAMV,OAGxC,OAAQ0M,EAAuCoY,OAAO9O,IAGjD,YAAA2iC,kBAAP,SAAyB5kC,GAEvB,IAAM/T,EAAO+T,EAAO5M,KAAK4M,KAAKijC,OAAOjjC,QAAQxO,EAEvCmH,EAAQvF,KAAK63C,uBAAuB,IAAet2C,OAAO,SAACozB,GAC/D,OAAS97B,GAAQA,IAAS87B,EAAMp7B,MAAMsI,UAGlCgN,EAAQ7O,KAAK83C,6BAA6B,IAAmBv2C,OAAO,SAACozB,GACzE,OAAS97B,GAAQA,IAAS87B,EAAMp7B,MAAMV,OAGxC,OAAQ0M,EAAqCoY,OAAO9O,IAG/C,YAAAmlC,wBAAP,SAA+B/0B,GAE7B,IAAMpmB,EAAOomB,EAASjf,KAAKkwC,SAASL,OAAO5wB,QAAU7gB,EAErD,OAAO4B,KAAK+3C,2BAA2B,IAAYx2C,OAAO,SAACozB,GACzD,OAAS97B,GAAQA,IAAS87B,EAAMxxB,KAAKtB,WAIlC,YAAAuxC,sBAAP,SAA6BxoB,GAE3B,IAAM/xB,EAAO+xB,EAAW5qB,KAAKowC,UAAUP,OAAOjlB,QAAYxsB,EAE1D,OAAO4B,KAAK83C,6BAA6B,IAAuBv2C,OAAO,SAACozB,GACtE,OAAS97B,GAAQA,IAAS87B,EAAMp7B,MAAMV,QAInC,YAAAw7C,sBAAP,SAA6B/1B,EAAsBK,GAEjD,IAAM9lB,EAAOylB,EAAOte,KAAKmwC,UAAUN,OAAOvxB,QAAQlgB,EAElD,OAAO4B,KAAK83C,6BAA6B,IAAkBv2C,OAAO,SAACozB,GACjE,QAAS97B,GAAQA,IAAS87B,EAAMp7B,MAAMV,SAAW8lB,GAASA,KAASgW,EAAMp7B,MAAM6kB,SAI5E,YAAAs1B,oBAAP,SAA2Bz0B,EAA0BX,EAAsBK,GAEzE,IAAMo0B,EAAa9zB,EAASjf,KAAKkwC,SAASL,OAAO5wB,QAAU7gB,EACrD45C,EAAa15B,EAAOte,KAAKmwC,UAAUN,OAAOvxB,QAAQlgB,EAExD,OAAO4B,KAAK83C,6BAA6B,IAAkBv2C,OAAO,SAACozB,GACjE,QAASoe,GAAcA,IAAepe,EAAMp7B,MAAM0lB,QAAa+4B,GAAcA,IAAerjB,EAAMp7B,MAAMV,MAAW8lB,KAASA,KAASgW,EAAMp7B,MAAM6kB,UAI9I,YAAAy5B,uBAAP,SAA8CtC,GAE5C,IAAM3D,EAAsC,GAc5C,OAZA5xC,KAAKi4C,mBAAmB5xC,QAAQ,SAACgK,GAC/BA,EAASlN,KAAK7C,SAAS,IAAI,EAAU,SAACuxC,GAChCA,aAAe0D,GACjB3D,EAAKrzC,KAAK,CACRhF,MAAOs4C,EACPj6C,KAAMyY,EAASlN,KACfjG,OAAQmT,EAASnT,cAMlB00C,GAGF,YAAAmG,2BAAP,SAAkDxC,GAEhD,IAAM3D,EAA0C,GAehD,OAbA5xC,KAAKk4C,mBAAmB7xC,QAAQ,SAACgK,GAC/BA,EAASlN,KAAK7C,SAAS,IAAI,EAAU,SAAC6C,GAChCA,aAAgBoyC,GAClB3D,EAAKrzC,KAAK,CACR4E,KAAI,EACJyJ,KAAMyD,EAASzD,KACfhV,KAAMyY,EAASlN,KACfjG,OAAQmT,EAASnT,cAMlB00C,GAGF,YAAAkG,6BAAP,SAA0DF,GAExD,IAAMhG,EAA4C,GAclD,OAZA5xC,KAAKm4C,yBAAyB9xC,QAAQ,SAACgK,GACrCA,EAAS7C,KAAKlN,SAAS,IAAI,EAAU,SAACuxC,GAChCA,aAAe+F,GACjBhG,EAAKrzC,KAAK,CACRhF,MAAOs4C,EACPj6C,KAAMyY,EAAS7C,KACftQ,OAAQmT,EAASnT,cAMlB00C,GAGF,YAAAsG,iBAAP,sBAEQjU,EAAuC,GAmE7C,OAhEAjkC,KAAKqwC,SAAShqC,QAAQ,SAAC8rC,GACrBA,EAAQ1F,SAASpmC,QAAQ,SAACymC,GACxB7I,EAAU1lC,KAAK,CACbqO,KAAMkgC,EAAQlgC,KACdzJ,KAAMgvC,EAAQx3B,SACdzd,OAAQ,CAACi1C,EAASrF,SAKxB9sC,KAAKmwC,UAAU9pC,QAAQ,SAACiY,GACtB,IAAM9X,EAAa8X,EAAKG,cAAc,GAEtCH,EAAK0C,MAAM3a,QAAQ,SAACzB,GAClBq/B,EAAU1lC,KAAK,CACbqO,KAAMhI,EAAKwZ,KACXjb,KAAMmb,EAAKzY,OACX3I,OAAQ,CAACohB,EAAM1Z,EAAM,UAGvBq/B,EAAU1lC,KAAK,CACbqO,KAAMhI,EAAKJ,SACXrB,KAAMqD,EACNtJ,OAAQ,CAACohB,EAAM1Z,EAAM,kBAK3B5E,KAAK4M,KAAKvG,QAAQ,SAACuG,GACjBq3B,EAAU1lC,KAAK,CACbqO,KAAMA,EAAKA,KACXzJ,KAAMyJ,EAAK+N,SACXzd,OAAQ0P,MAIZ5M,KAAKkwC,SAAS7pC,QAAQ,SAAC4Y,GACjBA,EAAOglB,WAAahlB,EAAOglB,UAAUjoC,OAAS,GAChDioC,EAAU1lC,KAAK,CACbqO,KAAMqS,EAAOglB,UACb9gC,KAAM,GAAMzB,KAAKud,EAAO9b,MACxBjG,OAAQ+hB,IAIZ/gB,EAAW+gB,EAAOE,QAAS,SAACC,GAC1B,IAAM5Y,EAAa4Y,EAAOX,cAAc,GAExCW,EAAO4B,MAAM3a,QAAQ,SAACzB,GACpBq/B,EAAU1lC,KAAK,CACbqO,KAAMhI,EAAKwZ,KACXjb,KAAMic,EAAOvZ,OACb3I,OAAQ,CAAC+hB,EAAQG,EAAQxa,EAAM,UAGjCq/B,EAAU1lC,KAAK,CACbqO,KAAMhI,EAAKJ,SACXrB,KAAMqD,EACNtJ,OAAQ,CAAC+hB,EAAQG,EAAQxa,EAAM,oBAMhCq/B,GAGF,YAAAgU,iBAAP,SAAwBG,GAAxB,gBAAwB,IAAAA,OAAA,GAEtB,IAAMnU,EAAuC,GAqF7C,OAnFAjkC,KAAKqwC,SAAShqC,QAAQ,SAAC8rC,GACrBlO,EAAU1lC,KAAK,CACb4E,KAAMgvC,EAAQx3B,SACdzd,OAAQi1C,MAIZnyC,KAAKmwC,UAAU9pC,QAAQ,SAACiY,GACtB2lB,EAAU1lC,KAAK,CACb4E,KAAMmb,EAAKzY,OACX3I,OAAQ,CAACohB,EAAM,YAGb85B,GACFnU,EAAU1lC,KAAK,CACb4E,KAAMmb,EAAKG,cAAc,GACzBvhB,OAAQ,CAACohB,EAAM,kBAKrBte,KAAK4M,KAAKvG,QAAQ,SAACuG,GACjBq3B,EAAU1lC,KAAK,CACb4E,KAAMyJ,EAAK+N,SACXzd,OAAQ0P,MAIZ5M,KAAKkwC,SAAS7pC,QAAQ,SAAC4Y,GACrBglB,EAAU1lC,KAAK,CACb4E,KAAM8b,EAAO9b,KACbjG,OAAQ+hB,IAGV/gB,EAAW+gB,EAAOE,QAAS,SAACC,GAC1B6kB,EAAU1lC,KAAK,CACb4E,KAAMic,EAAOvZ,OACb3I,OAAQ,CAAC+hB,EAAQG,EAAQ,YAGvBg5B,GACFnU,EAAU1lC,KAAK,CACb4E,KAAMic,EAAOX,cAAc,GAC3BvhB,OAAQ,CAAC+hB,EAAQG,EAAQ,kBAK3Bg5B,IACEn5B,EAAOplB,MAAQ,GAAawW,UAC9B4zB,EAAU1lC,KAAK,CACb4E,KAAM8b,EAAO0lB,gBACbznC,OAAQ,CAAC+hB,EAAQ,SAIjBA,EAAOlS,WAAa,GAAasD,UACnC4zB,EAAU1lC,KAAK,CACb4E,KAAM8b,EAAO0mB,qBACbzoC,OAAQ,CAAC+hB,EAAQ,eAKvB/gB,EAAW+gB,EAAOklB,YAAa,SAACW,EAAYlmC,GAC1CqlC,EAAU1lC,KAAK,CACb4E,KAAM2hC,EAAWO,YACjBnoC,OAAQ,CAAC+hB,EAAQrgB,EAAMkmC,SAKzBsT,GACFp4C,KAAKowC,UAAU/pC,QAAQ,SAACukB,GAClBA,EAASie,QACX5E,EAAU1lC,KAAK,CACb4E,KAAMynB,EAASie,OAAO,GACtB3rC,OAAQ0tB,MAMTqZ,GAGF,YAAAkU,uBAAP,sBAEQlU,EAA6C,GAwDnD,OAtDAjkC,KAAKqwC,SAAShqC,QAAQ,SAAC8rC,GACrBlO,EAAU1lC,KAAK,CACb2F,QAASiuC,EAAQx3B,SACjBnN,KAAM2kC,EAAQvjC,WACd1R,OAAQi1C,MAIZnyC,KAAKmwC,UAAU9pC,QAAQ,SAACiY,GACtB2lB,EAAU1lC,KAAK,CACb2F,QAASoa,EAAKzY,OACd2H,KAAM8Q,EAAK1P,WACX1R,OAAQohB,MAIZte,KAAKkwC,SAAS7pC,QAAQ,SAAC4Y,GACrB/gB,EAAW+gB,EAAOE,QAAS,SAACC,GAC1B6kB,EAAU1lC,KAAK,CACb2F,QAASkb,EAAOmkB,gBAChB/1B,KAAM4R,EAAOxQ,WACb1R,OAAQ,CAAC+hB,EAAQG,OAIjBH,EAAOsmB,SAAS,KAClBtB,EAAU1lC,KAAK,CACb2F,QAAS+a,EAAO0lB,gBAChBn3B,KAAMyR,EAAOplB,IACbqD,OAAQ,CAAC+hB,EAAQ,SAGnBglB,EAAU1lC,KAAK,CACb2F,QAAS+a,EAAO0mB,qBAChBn4B,KAAMyR,EAAOlS,SACb7P,OAAQ,CAAC+hB,EAAQ,cAGnB/gB,EAAW+gB,EAAOklB,YAAa,SAACW,EAAYlmC,GAC1CqlC,EAAU1lC,KAAK,CACb2F,QAAS+a,EAAOqoB,iBAAiB1oC,GACjC4O,KAAMs3B,EAAWh4B,OACjB5P,OAAQ,CAAC+hB,EAAQrgB,EAAMkmC,EAAY,YAGrCb,EAAU1lC,KAAK,CACb2F,QAAS+a,EAAO4oB,iBAAiBjpC,GACjC4O,KAAMs3B,EAAWn4B,OACjBzP,OAAQ,CAAC+hB,EAAQrgB,EAAMkmC,EAAY,iBAMpCb,GAGF,YAAAoU,OAAP,WAEE,MAAO,CACLnI,SAAUlwC,KAAKuwC,UAAUvwC,KAAKkwC,UAC9BC,UAAWnwC,KAAKuwC,UAAUvwC,KAAKmwC,WAC/BC,UAAWpwC,KAAKuwC,UAAUvwC,KAAKowC,WAC/BC,SAAUrwC,KAAKuwC,UAAUvwC,KAAKqwC,UAC9BzjC,KAAM5M,KAAKuwC,UAAUvwC,KAAK4M,QAIvB,YAAA21B,KAAP,SAAY+V,GAAZ,WAEMA,EAAS1rC,MAEX5M,KAAK4M,KAAK2iC,WACR+I,EAAS1rC,KACT,SAAC/P,EAAKtD,GAAU,SAAK23C,QAAQ33C,GAAO,GAAO,IAC3C,SAACsD,EAAKtD,GAAU,SAAK83C,WAAW93C,GAAO,GAAO,GAAM,IACpD,SAACsD,EAAKtD,EAAOsJ,GAAa,SAAKquC,QAAQruC,GAAU,GAAM,KAIvDy1C,EAASnI,WAEXnwC,KAAKmwC,UAAUZ,WACb+I,EAASnI,UACT,SAACtzC,EAAKtD,GAAU,SAAKu4C,YAAYv4C,GAAO,GAAO,IAC/C,SAACsD,EAAKtD,GAAU,SAAKi7C,eAAej7C,GAAO,GAAO,GAAM,IACxD,SAACsD,EAAKtD,EAAOsJ,GAAa,SAAKivC,YAAYjvC,GAAU,GAAM,KAI3Dy1C,EAASpI,UAEXlwC,KAAKkwC,SAASX,WACZ+I,EAASpI,SACT,SAACrzC,EAAKtD,GAAU,SAAKk5C,UAAUl5C,GAAO,GAAO,IAC7C,SAACsD,EAAKtD,GAAU,SAAKs6C,aAAat6C,GAAO,GAAO,GAAM,IACtD,SAACsD,EAAKtD,EAAOsJ,GAAa,SAAK4vC,UAAU5vC,GAAU,GAAM,KAIzDy1C,EAASlI,WAEXpwC,KAAKowC,UAAUb,WACb+I,EAASlI,UACT,SAACvzC,EAAKtD,GAAU,SAAKq5C,YAAYr5C,GAAO,GAAO,IAC/C,SAACsD,EAAKtD,GAAU,SAAK25C,eAAe35C,GAAO,GAAO,GAAM,IACxD,SAACsD,EAAKtD,EAAOsJ,GAAa,SAAK+vC,YAAY/vC,GAAU,GAAM,KAI3Dy1C,EAASjI,UAEXrwC,KAAKqwC,SAASd,WACZ+I,EAASjI,SACT,SAACxzC,EAAKtD,GAAU,SAAK04C,WAAW14C,GAAO,GAAO,IAC9C,SAACsD,EAAKtD,GAAU,SAAK+4C,cAAc/4C,GAAO,GAAM,IAChD,SAACsD,EAAKtD,EAAOsJ,GAAa,SAAKovC,WAAWpvC,GAAU,GAAM,MAKzD,YAAAiuC,OAAP,SAAcwH,GAAd,WAEMA,EAAS1rC,MAEX1O,EAAWo6C,EAAS1rC,KAAM,SAACA,GACzB,SAAKskC,QAAQtkC,KAIb0rC,EAASnI,WAEXjyC,EAAWo6C,EAASnI,UAAW,SAAC7xB,GAC9B,SAAKwzB,YAAYxzB,KAIjBg6B,EAASpI,UAEXhyC,EAAWo6C,EAASpI,SAAU,SAAC7/B,GAC7B,SAAKoiC,UAAUpiC,KAIfioC,EAASlI,WAEXlyC,EAAWo6C,EAASlI,UAAW,SAACvuC,GAC9B,SAAK+wC,YAAY/wC,KAIjBy2C,EAASjI,UAEXnyC,EAAWo6C,EAASjI,SAAU,SAACxuC,GAC7B,SAAKowC,WAAWpwC,MAKxB,EA3lEA,CAAiC,ICxKjC,cAUE,WAAoB+B,GAElB5D,KAAK4D,KAAOA,EACZ5D,KAAKg5B,IAAMhgC,OAAOY,OAAO,MACzBoG,KAAK6O,MAAQ7V,OAAOY,OAAO,MAC3BoG,KAAKu4C,eAAiBC,EAAQC,wBA2ElC,OAxES,YAAAjI,OAAP,SAAc5sC,GAEZ,IAAM0H,EAAO,IAAIktC,EAAQ50C,GAAQ5D,KAAK4D,MAMtC,OAJA5K,OAAOoqC,OAAO93B,EAAK0tB,IAAKh5B,KAAKg5B,KAC7BhgC,OAAOoqC,OAAO93B,EAAKuD,MAAO7O,KAAK6O,OAC/BvD,EAAKitC,eAAiBv4C,KAAKu4C,eAEpBjtC,GAGF,YAAAotC,aAAP,SACE/4B,EACAg5B,GAKA,OAFA34C,KAAKg5B,IAAIrZ,EAAUna,IAAMmzC,EAElB34C,MAGF,YAAA44C,cAAP,SAA2Cz1C,EAA0BrK,GAInE,OAFAkH,KAAK6O,MAAM1L,EAAKqC,IAAM1M,EAEfkH,MAGF,YAAAue,YAAP,SAAoB1lB,GAElB,OAAOmH,KAAK4D,KAAK2a,YAAY1lB,IAGxB,YAAA8a,aAAP,SAAqBnO,GAEnB,OAAOxF,KAAKg5B,IAAIxzB,IAGX,YAAAkO,YAAP,SAAoBlO,GAElB,OAAOxF,KAAK4D,KAAK8P,YAAYlO,IAGxB,YAAAqzC,0BAAP,SAAkCrzC,GAEhC,IAAMc,EAAKtG,KAAK4D,KAAK+P,aAAanO,GAElC,OAAOc,EAAKA,EAAGF,cAAgB,IAG1B,YAAA2I,cAAP,SAAsBvJ,GAEpB,OAAOxF,KAAK6O,MAAMrJ,IAGb,YAAAs+B,WAAP,SAAkBt2B,EAAkBmP,GAElC,YAFkC,IAAAA,MAAA,MAE3B3c,KAAK6O,MAAMrB,EAAKL,SAASK,EAAMmP,IAGjC,YAAArL,IAAP,SAAW9D,EAAWtJ,EAAkByY,GAEtC,YAFsC,IAAAA,MAAA,MAE/B3c,KAAK84C,KAAKtrC,EAAMmP,EAAhB3c,CAA0BkE,IAG5B,YAAA40C,KAAP,SAAav/C,EAAYojB,GAEvB,YAFuB,IAAAA,MAAA,MAEhBliB,EAAQlB,GACXyG,KAAK8jC,WAAW9jC,KAAK4D,KAAKmL,cAAcxV,GAAQojB,GAChD,WAAM,OAAApjB,IApFE,EAAAk/C,wBAA0B,WAuF1C,EA1FA,G,osBCCA,4B,+CAsEA,OAtEmC,QAKnB,EAAA9rC,OAAd,SAAqBC,EAAaiC,GAEhC,IAAMtV,EAAoBsV,EAAME,cAAcnC,EAV9B,IAWV1M,EAAqB0M,EAVZ,GAU6B/P,IAAI,SAAC+V,GAAc,OAAA/D,EAAME,cAAc6D,KAInF,OAFA/D,EAAMgE,YAEC,GAAeC,gBAAgB,IAACvZ,GAAU2G,KAGrC,EAAA4M,OAAd,SAAqBU,GAEnB,MAAM,IAAIsnC,MAAM,2CAGX,YAAA3nC,MAAP,WAEE,MAAM,IAAI2nC,MAAM,2CAGX,YAAA9lC,cAAP,SAAqBxL,EAAyBU,GAE5C,MAAM,IAAI4wC,MAAM,2CAGX,YAAA7lC,SAAP,WAEE,MAAM,IAAI6lC,MAAM,2CAGX,YAAAhoC,OAAP,WAEE,MAAM,IAAIgoC,MAAM,2CAGX,YAAAxmC,MAAP,WAEE,MAAM,IAAIwmC,MAAM,2CAGX,YAAApwC,QAAP,SAAelB,EAAyBU,GAEtC,MAAM,IAAI4wC,MAAM,2CAGX,YAAAx0C,SAAP,SAAmBA,GAEjB,MAAM,IAAIw0C,MAAM,2CAGX,YAAA/wC,sBAAP,SAA6BC,GAE3B,MAAM,IAAI8wC,MAAM,2CAGX,YAAAlnC,UAAP,SAAiB9L,GAEf,WAFe,IAAAA,MAAA,MAET,IAAIgzC,MAAM,2CAGX,YAAA3wC,SAAP,SAAgBX,EAAyBU,EAAeK,GAEtD,MAAM,IAAIuwC,MAAM,2CAhEJ,EAAAtvC,GAAK,MAmErB,EAtEA,CAAmC,GC0CtB,GAAO,IAAI,GAAY,CAClCD,MAAO,CACL,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAEF4J,YAAa,CACX,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAsR,GACA,GACA,GACA,GACA,GACA,GACA,GACA,MCxFE,GAAM,GAAWpT,WAEjB0rC,GAA2C,SAACzgD,EAAGsL,GACnD,OAAAtL,EAAEO,gBAAgB,GACdP,EAAEO,KACF,GAAWoU,UAEX+rC,GAAsC,SAAC1gD,EAAGsL,GAC9C,GAAItL,EAAEO,gBAAgB,GACpB,OAAOP,EAAEO,KAEX,IAAMq3C,EAAWtsC,EAAK+uC,cAAch7B,OAAO9a,IAAI,SAACoiB,GAAW,WAAI,GAAWA,EAAOpmB,KAAM+K,KAEvF,OAA2B,IAApBssC,EAASl0C,OACZ,GAASiR,SACW,IAApBijC,EAASl0C,OACPk0C,EAAS,GACT,GAAMnX,KAAKmX,IAGb+I,GAAkB,SAAC3gD,EAAmCqkB,GAC1D,KAAMrkB,EAAEO,gBAAgB,IACtB,OAAO,KAGT,IAAMu3C,EAAYzzB,EAASm2B,aAAax6C,EAAEO,KAAKgJ,SAE/C,GAAIvJ,EAAEsyB,oBAAoB,GAAU,CAClC,IAAM,EAAetyB,EAAEsyB,SAAS/oB,QAAQ+V,UAAUze,IAAI,YAEtD,GAAI,EAAc,CAChB,IAAMw7B,EAAQyb,EAAU/+B,KAAK,SAACjY,GAAM,OAAAA,EAAEP,OAAS,IAE/C,GAAI87B,EACF,OAAOA,GAKb,OAAOyb,GAGH8I,GAAuD,SAAC5gD,EAAGqkB,GAC/D,IAAMw8B,EAAeF,GAAgB3gD,EAAGqkB,GAExC,OAAqB,OAAjBw8B,EACK,GAASlsC,SACPxS,EAAQ0+C,GACV,GAAMpgB,KACXogB,EAAat8C,IAAI,SAAC+tB,GAAa,UAAMyU,KACnC,GACA,GACA,CAAC,CAAC,WAAYzU,EAAS/xB,WAIpBP,EAAEsyB,UAIPwuB,GAA8E,SAAC9gD,EAAGsL,GACtF,IAAMu1C,EAAeF,GAAgB3gD,EAAGsL,GAExC,OAAqB,OAAjBu1C,GAA0B1+C,EAAQ0+C,GAQ/B,GAASlsC,SAPV3U,EAAEswC,SAAWuQ,EAAa1O,aAAajoC,YAAYlK,EAAEswC,SAChDtwC,EAAEswC,QAGJuQ,EAAa1O,cAMlB4O,GAA0E,SAAC/gD,EAAGqkB,GAClF,IAAMw8B,EAAeF,GAAgB3gD,EAAGqkB,GAExC,OAAqB,OAAjBw8B,GAA0B1+C,EAAQ0+C,GAQ/B,GAASlsC,SAPV3U,EAAEswC,SAAWuQ,EAAa/O,SAAS5nC,YAAYlK,EAAEswC,SAC5CtwC,EAAEswC,QAGJuQ,EAAa/O,UAOXkP,GACb,CAEEjrC,YAAa,GAAI9H,SAASyU,GAAU3M,YAClC0qC,GACA,CAAElgD,KAAMmgD,KAGV7/C,IAAK,GAAIoN,SAASyU,GAAU7hB,IAC1B,SAACb,EAAGqkB,GACF,KAAMrkB,EAAEO,gBAAgB,IACtB,OAAO,GAET,IAAMomB,EAAStC,EAASK,UAAU1kB,EAAEO,KAAKgJ,SACzC,OAAKod,EAIE,GAAMvd,KAAKud,EAAO9b,MAHhB,IAKX,CAAEtK,KAAMmgD,IACR,CAAE/N,MAAO,IACT,CAAE56B,SAAU0oC,KAGdh7C,OAAQ,GAAIwI,SAASyU,GAAUjd,OAC7B,SAACzF,EAAGqkB,GACF,KAAMrkB,EAAEO,gBAAgB,IACtB,OAAO,GAET,IAAMomB,EAAStC,EAASK,UAAU1kB,EAAEO,KAAKgJ,SACzC,OAAKod,GAAWA,EAAOplB,IAIhBolB,EAAOylB,QAHL,IAKX,CAAE7rC,KAAMmgD,GAAS3oC,SAAU0oC,KAG7B99B,KAAM,GAAI1U,SAASyU,GAAUC,KAC3B,GACA,CAAEpiB,KAAMmgD,GAAS3oC,SAAU0oC,KAG7B17C,OAAQ,GAAIkJ,SAASyU,GAAU3d,OAC7B,GACA,CAAExE,KAAMmgD,GAAS3oC,SAAU0oC,KAG7B79B,WAAY,GAAI3U,SAASyU,GAAUE,WACjC,GACA,CAAEriB,KAAMmgD,GAAS3oC,SAAU0oC,GAAcnuB,SAAUsuB,GAAatQ,QAASwQ,KAG3Ej+B,WAAY,GAAI5U,SAASyU,GAAUG,WACjC,GACA,CAAEtiB,KAAMmgD,GAAS3oC,SAAU0oC,GAAcnuB,SAAUsuB,GAAatQ,QAASyQ,KAG3Ej+B,cAAe,GAAI7U,SAASyU,GAAUI,cACpC,GACA,CAAEviB,KAAMmgD,GAAS3oC,SAAU0oC,GAAcnuB,SAAUsuB,GAAatQ,QAASyQ,KAG3Eh+B,aAAc,GAAI9U,SAASyU,GAAUK,aACnC,GACA,CAAExiB,KAAMmgD,GAAS3oC,SAAU0oC,GAAcnuB,SAAUsuB,KAGrD59B,WAAY,GAAI/U,SAASyU,GAAUM,WACjC,SAAChjB,EAAGsL,GAAS,OAAAw1C,GAAuB9gD,EAAGsL,IACvC,CAAE/K,KAAMmgD,GAAS3oC,SAAU0oC,GAAcnuB,SAAUsuB,KAGrD39B,UAAW,GAAIhV,SAASyU,GAAUO,UAChC,GACA,CAAE1iB,KAAMmgD,GAAS3oC,SAAU0oC,GAAcnuB,SAAUsuB,GAAatQ,QAASyQ,MAK7EC,GAAejrC,YAAYqnC,UAAW,EACtC4D,GAAengD,IAAIu8C,UAAW,EAC9B4D,GAAev7C,OAAO23C,UAAW,EACjC4D,GAAer+B,KAAKy6B,UAAW,EAC/B4D,GAAej8C,OAAOq4C,UAAW,EACjC4D,GAAep+B,WAAWw6B,UAAW,EACrC4D,GAAen+B,WAAWu6B,UAAW,EACrC4D,GAAel+B,cAAcs6B,UAAW,EACxC4D,GAAej+B,aAAaq6B,UAAW,EACvC4D,GAAeh+B,WAAWo6B,UAAW,EACrC4D,GAAe/9B,UAAUm6B,UAAW,EChLpC,IAAM,GAAM,GAAQroC,WAEPksC,GACb,CAIE/wC,IAAK,GAAIjC,SAASmJ,GAAOlH,IAAK,GAAY,CAAEjP,MAAO,GAASqL,KAAM,KAElE0G,KAAM,GAAI/E,SAASmJ,GAAOpE,KAAM,GAAS,CAAE/R,MAAO,KAElDoW,UAAW,GAAIpJ,SAASmJ,GAAOC,UAC7B,GACA,CAAEpW,MAAO,KAGXqW,WAAY,GAAIrJ,SAASmJ,GAAOE,WAC9B,GACA,CAAErW,MAAO,GAASqX,QAAS,IAC3B,GACA,CAAEA,QAAS,SAAAtY,GAAK,OAAAA,EAAEiB,iBAAiB,GAAejB,EAAEiB,MAAMsI,QAAUvJ,EAAEiB,SAGxEwF,SAAU,GAAIwH,SAASmJ,GAAO3Q,SAC5B,SAAAzG,GACE,IAAIwN,GAAW,EACTP,EAAgB,GAChBi0C,EAAY,SAAC99C,GACjB,GAAKoK,GAEDpK,EAAG,CACL,IAAI,EAAYA,aAAa,GACvB,EAAS,EAAYA,EAAEmG,QAAkBnG,EAE3C,aAAkB,IACpB,EAAOmG,QAAQwE,QAAQ,SAACrH,GACtB,IAAMy6C,EAAYz6C,aAAa,GACzB06C,EAASD,EAAYz6C,EAAE6C,QAAkB7C,EAE/C,EAAY,GAAay6C,EAEpBl0C,EAAMujB,KAAK,SAAAtvB,GAAK,OAAAA,EAAEkJ,UAAUg3C,MAC/Bn0C,EAAMhH,KAAKm7C,KAKjB5zC,EAAWA,GAAY,EAElBP,EAAMujB,KAAK,SAAAtvB,GAAK,OAAAA,EAAEkJ,UAAU,MAC/B6C,EAAMhH,KAAK,KAWjB,OANAi7C,EAAUlhD,EAAEgD,GACZk+C,EAAUlhD,EAAEiD,GACZi+C,EAAUlhD,EAAEK,GACZ6gD,EAAUlhD,EAAEM,GACZ4gD,EAAUlhD,EAAE+W,GAEL9J,EAAMvJ,OAAS,EAClB8J,EACE,GAAMA,SAAS,IAAI,GAASP,IAC5B,IAAI,GAASA,GACE,IAAjBA,EAAMvJ,OACJ8J,EACE,GAAMA,SAASP,EAAM,IACrBA,EAAM,GACR,IAER,CAAEjK,EAAG,GAASC,EAAG,IACjB,CAAE5C,EAAG,GAASC,EAAG,GAASyW,EAAG,KAG/BQ,QAAS,GAAItJ,SAASmJ,GAAOG,QAC3B,SAAAvX,GAAK,OAAAA,EAAEiB,iBAAiB,GACpBjB,EAAEiB,MAAMsI,QACRvJ,EAAEiB,OAAS,IACf,CAAEA,MAAO,SAAAjB,GAAK,OAAAA,EAAEiB,OAAS,MAG3BuW,QAAS,GAAIvJ,SAASmJ,GAAOI,QAC3B,SAACxX,GACC,OAAIA,EAAEqhD,QAAUrhD,EAAEshD,MACT,GAAM19B,UAAU,CAAC5jB,EAAEqhD,OAAQrhD,EAAEshD,QAC3BthD,EAAEqhD,OACJrhD,EAAEqhD,OACArhD,EAAEshD,MACJthD,EAAEshD,MAEF,IAGX,CAAEnoC,UAAW,GAAakoC,OAAQ,SAAArhD,GAAK,OAAAA,EAAEqhD,QAAU,IAASC,MAAO,SAAAthD,GAAK,OAAAA,EAAEshD,OAAS,MAKrFnxC,QAAS,GAAIlC,SAASmJ,GAAOjH,QAAS,GAAa,CAAElP,MAAO,KAE5DqP,QAAS,GAAIrC,SAASmJ,GAAO9G,QAAS,GAAa,CAAErP,MAAO,GAASqL,KAAM,KAE3EiE,WAAY,GAAItC,SAASmJ,GAAO7G,WAAY,GAAa,CAAEtP,MAAO,GAASqL,KAAM,KAEjFmL,OAAQ,GAAIxJ,SAASmJ,GAAOK,OAAQ,GAAa,CAAExW,MAAO,GAASqL,KAAM,KAEzEoL,cAAe,GAAIzJ,SAASmJ,GAAOM,cAAe,GAAa,CAAEzW,MAAO,GAASqL,KAAM,KAEvFqL,UAAW,GAAI1J,SAASmJ,GAAOO,UAAW,GAAa,CAAE1W,MAAO,GAASqL,KAAM,KAE/EsL,iBAAkB,GAAI3J,SAASmJ,GAAOQ,iBAAkB,GAAa,CAAE3W,MAAO,GAASqL,KAAM,KAI7FkE,MAAO,GAAIvC,SAASmJ,GAAO5G,MAAO,SAAAxQ,GAAK,OAAAA,EAAEiB,OAAS,IAAS,CAAEA,MAAO,KAEpEwP,UAAW,GAAIxC,SAASmJ,GAAO3G,UAAW,GAAa,CAAExP,MAAO,KAEhEyP,QAAS,GAAIzC,SAASmJ,GAAO1G,QAAS,GAAW,CAAEzP,MAAO,KAE1D0P,OAAQ,GAAI1C,SAASmJ,GAAOzG,OAAQ,GAAU,CAAE1P,MAAO,KAEvD2P,OAAQ,GAAI3C,SAASmJ,GAAOxG,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAU,CAAEA,MAAO,KAExF4P,MAAO,GAAI5C,SAASmJ,GAAOvG,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAU,CAAEA,MAAO,KAErF6P,SAAU,GAAI7C,SAASmJ,GAAOtG,SAAU,GAAY,CAAE7P,MAAO,KAE7D8P,SAAU,GAAI9C,SAASmJ,GAAOrG,SAAU,GAAY,CAAE9P,MAAO,KAE7D+P,OAAQ,GAAI/C,SAASmJ,GAAOpG,OAAQ,GAAU,CAAE/P,MAAO,KAEvDgQ,QAAS,GAAIhD,SAASmJ,GAAOnG,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAW,CAAEA,MAAO,KAE7FiQ,MAAO,GAAIjD,SAASmJ,GAAOlG,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAU,CAAEA,MAAO,MC3IjF,GAAM,GAAY8T,WAGXwsC,GACb,CAIEjgD,OAAQ,GAAI2M,SAAS2B,EAAWtO,OAAQ,IAIxCuO,MAAO,GAAI5B,SAAS2B,EAAWC,MAC7B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGX6O,IAAK,GAAI7B,SAAS2B,EAAWE,IAAK,GAAa,CAAE9M,EAAG,GAAaC,EAAG,KAEpE8M,GAAI,GAAI9B,SAAS2B,EAAWG,GAAI,GAAa,CAAE/M,EAAG,GAAaC,EAAG,KAElE+M,IAAK,GAAI/B,SAAS2B,EAAWI,IAAK,GAAa,CAAEhN,EAAG,GAAaC,EAAG,KAEpEgN,IAAK,GAAIhC,SAAS2B,EAAWK,IAAK,GAAa,CAAEjN,EAAG,KAEpDkN,IAAK,GAAIjC,SAAS2B,EAAWM,IAAK,GAAY,CAAEjP,MAAO,GAAaqL,KAAM,KAI1E6D,QAAS,GAAIlC,SAAS2B,EAAWO,QAAS,GAAa,CAAElP,MAAO,KAEhEmP,OAAQ,GAAInC,SAAS2B,EAAWQ,OAAQ,GAAa,CAAEnP,MAAO,KAE9DoP,QAAS,GAAIpC,SAAS2B,EAAWS,QAAS,GAAa,CAAEpP,MAAO,KAEhEqP,QAAS,GAAIrC,SAAS2B,EAAWU,QAAS,GAAa,CAAErP,MAAO,GAAaqL,KAAM,KAEnFiE,WAAY,GAAItC,SAAS2B,EAAWW,WAAY,GAAa,CAAEtP,MAAO,GAAaqL,KAAM,KAIzFkE,MAAO,GAAIvC,SAAS2B,EAAWY,MAAO,GAAS,CAAEvP,MAAO,KAExDwP,UAAW,GAAIxC,SAAS2B,EAAWa,UAAW,SAAAzQ,GAAK,OAAAA,EAAEiB,OAAS,IAAa,CAAEA,MAAO,KAEpFyP,QAAS,GAAIzC,SAAS2B,EAAWc,QAAS,GAAW,CAAEzP,MAAO,KAE9D0P,OAAQ,GAAI1C,SAAS2B,EAAWe,OAAQ,GAAU,CAAE1P,MAAO,KAE3D2P,OAAQ,GAAI3C,SAAS2B,EAAWgB,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAc,CAAEA,MAAO,KAEhG4P,MAAO,GAAI5C,SAAS2B,EAAWiB,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAc,CAAEA,MAAO,KAE7F6P,SAAU,GAAI7C,SAAS2B,EAAWkB,SAAU,GAAY,CAAE7P,MAAO,KAEjE8P,SAAU,GAAI9C,SAAS2B,EAAWmB,SAAU,GAAY,CAAE9P,MAAO,KAEjE+P,OAAQ,GAAI/C,SAAS2B,EAAWoB,OAAQ,GAAU,CAAE/P,MAAO,KAE3DgQ,QAAS,GAAIhD,SAAS2B,EAAWqB,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAe,CAAEA,MAAO,KAErGiQ,MAAO,GAAIjD,SAAS2B,EAAWsB,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAU,CAAEA,MAAO,MC1DrF,GAAM,GAAU8T,WAETysC,GAAqB,IAAI,GAAS,CAC7CjgD,IAAK,GAASoT,SACd1T,MAAO,GAAS0T,SAChB2K,UAAW,IAAI9c,IAAI,CACjB,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,SAIGi/C,GAAgB,IAAI,GAAS,CACxC,GAAU9sC,SACV,IAAI,GAAW,MAGJ+sC,GAAe,IAAI,GAAS,CACvCngD,IAAK,GAASoT,SACd1T,MAAO,GAAS0T,SAChB2K,UAAW,IAAI9c,IAAI,CACjB,CAAC,6BAA8B,eAC/B,CAAC,OAAQ,gBACT,CAAC,UAAW,WACZ,CAAC,YAAa,eACd,CAAC,eAAgB,WACjB,CAAC,mBAAoB,YACrB,CAAC,eAAgB,WACjB,CAAC,mBAAoB,gBAIZm/C,GAAa,IAAI,GAAS,CACrCpgD,IAAK,GAASoT,SACd1T,MAAO,GAAU0T,SACjB2K,UAAW,IAAI9c,IAAmB,CAChC,CAAC,cAAe,CAAE1B,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,IAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,gBAAiB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC/C,CAAC,OAAQ,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACpC,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACxC,CAAC,QAAS,CAAElC,EAAG,EAAGmiC,EAAG,EAAGhgC,EAAG,EAAGD,EAAG,MACjC,CAAC,kBAAmB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACjD,CAAC,OAAQ,CAAElC,EAAG,EAAGmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MAClC,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MACrC,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MAC1C,CAAC,YAAa,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAC1C,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MACtC,CAAC,kBAAmB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACjD,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,UAAW,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MACvC,CAAC,OAAQ,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACpC,CAAC,YAAa,CAAElC,EAAG,EAAGmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,YAAa,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACzC,CAAC,iBAAkB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAC/C,CAAC,YAAa,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,aAAc,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MACxC,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,mBAAoB,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAChD,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MAC3C,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,EAAGD,EAAG,MACtC,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,iBAAkB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAChD,CAAC,kBAAmB,CAAElC,EAAG,GAAImiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MAC/C,CAAC,kBAAmB,CAAElC,EAAG,GAAImiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MAC9C,CAAC,iBAAkB,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC9C,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,YAAa,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,gBAAiB,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,cAAe,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,YAAa,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MACzC,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC9C,CAAC,eAAgB,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAC5C,CAAC,UAAW,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,YAAa,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,OAAQ,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MACpC,CAAC,YAAa,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAC1C,CAAC,OAAQ,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACtC,CAAC,QAAS,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MACnC,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAC7C,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MAC1C,CAAC,SAAU,CAAElC,EAAG,GAAImiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MACrC,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,iBAAkB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAChD,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MAC1C,CAAC,gBAAiB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC/C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,yBAA0B,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACxD,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC9C,CAAC,kBAAmB,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAChD,CAAC,iBAAkB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAChD,CAAC,mBAAoB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAClD,CAAC,mBAAoB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAClD,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC9C,CAAC,OAAQ,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MAClC,CAAC,YAAa,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MACzC,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,UAAW,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,EAAGD,EAAG,MACpC,CAAC,oBAAqB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACnD,CAAC,cAAe,CAAElC,EAAG,EAAGmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MACzC,CAAC,gBAAiB,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MAC9C,CAAC,gBAAiB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC/C,CAAC,mBAAoB,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACjD,CAAC,oBAAqB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACnD,CAAC,sBAAuB,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACnD,CAAC,mBAAoB,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACjD,CAAC,mBAAoB,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MACjD,CAAC,gBAAiB,CAAElC,EAAG,GAAImiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC9C,CAAC,OAAQ,CAAElC,EAAG,EAAGmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MAClC,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MACrC,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAC3C,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MACtC,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,EAAGD,EAAG,MACzC,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACxC,CAAC,iBAAkB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAChD,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,iBAAkB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAChD,CAAC,kBAAmB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACjD,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,OAAQ,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MACrC,CAAC,OAAQ,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACtC,CAAC,OAAQ,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACtC,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,IAAKD,EAAG,MACtC,CAAC,MAAO,CAAElC,EAAG,IAAKmiC,EAAG,EAAGhgC,EAAG,EAAGD,EAAG,MACjC,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MAC5C,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACxC,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MAC5C,CAAC,YAAa,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,MACzC,CAAC,YAAa,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MACtC,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACxC,CAAC,WAAY,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,aAAc,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,OAAQ,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACtC,CAAC,eAAgB,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC5C,CAAC,aAAc,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC3C,CAAC,MAAO,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACrC,CAAC,OAAQ,CAAElC,EAAG,EAAGmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACpC,CAAC,UAAW,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACzC,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,GAAIhgC,EAAG,GAAID,EAAG,MACtC,CAAC,YAAa,CAAElC,EAAG,GAAImiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC1C,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACxC,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,QAAS,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MACvC,CAAC,cAAe,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,IAAKD,EAAG,MAC7C,CAAC,SAAU,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,EAAGD,EAAG,MACtC,CAAC,eAAgB,CAAElC,EAAG,IAAKmiC,EAAG,IAAKhgC,EAAG,GAAID,EAAG,UAOpC4+C,GAAkB,IAAI,GAAS,CAC1CrgD,IAAK,GAASoT,SACd1T,MAAO,GAAS0T,SAChB2K,UAAW,IAAI9c,IAAI,CACjB,CAAC,WAAY,YACb,CAAC,SAAU,UACX,CAAC,UAAW,WACZ,CAAC,aAAc,QACf,CAAC,aAAc,QACf,CAAC,QAAS,SACV,CAAC,OAAQ,QACT,CAAC,SAAU,UACX,CAAC,WAAY,OACb,CAAC,WAAY,OACb,CAAC,aAAc,QACf,CAAC,cAAe,UAChB,CAAC,eAAgB,eAKRq/C,GACb,CAIEvgD,OAAQ,GAAI2M,SAAS+zB,GAAS1gC,OAAQ,IAItCuO,MAAO,GAAI5B,SAAS+zB,GAASnyB,MAC3B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGXiP,IAAK,GAAIjC,SAAS+zB,GAAS9xB,IACzB,GACA,CAAEjP,MAAO,GAAWqL,KAAM,KAG5B0G,KAAM,GAAI/E,SAAS+zB,GAAShvB,KAC1B,GACA,CAAE/R,MAAO,KAGX+oB,MAAO,GAAI/b,SAAS+zB,GAAShY,MAC3B,GACA,CAAElpB,EAAG,GAAYmiC,EAAG,GAAYhgC,EAAG,IACnC,CAAED,EAAG,KAGPuB,IAAK,GAAI0J,SAAS+zB,GAASz9B,IACzB,GACA,CAAEtD,MAAO,GAAWH,EAAG,GAAYmiC,EAAG,GAAYhgC,EAAG,IACrD,CAAED,EAAG,IACL,CAAE/B,MAAO,GAAY6gD,UAAWN,KAGlCxzC,GAAI,GAAIC,SAAS+zB,GAASh0B,GACxB,GACA,CAAE/M,MAAO,GAAWqL,KAAM,GAAWxL,EAAG,GAAYmiC,EAAG,GAAYhgC,EAAG,IACtE,CAAED,EAAG,IACL,CAAE/B,MAAO,GAAYqL,KAAM,GAAYw1C,UAAWN,KAGpD19C,MAAO,GAAImK,SAAS+zB,GAASl+B,MAC3B,GACA,CAAE7C,MAAO,KAGX6D,IAAK,GAAImJ,SAAS+zB,GAASl9B,IACzB,GACA,CAAE7D,MAAO,GAAW8gD,OAAQN,IAC5B,CAAE9e,MAAO,KAGXV,KAAM,GAAIh0B,SAAS+zB,GAASC,KAC1B,GACA,CAAEhhC,MAAO,GAAW8gD,OAAQN,GAAeO,YAAaP,IACxD,CAAE9e,MAAO,KAGXtmB,IAAK,GAAIpO,SAAS+zB,GAAS3lB,IACzB,GACA,CAAEpb,MAAO,GAAWghD,WAAYR,IAChC,CAAE9e,MAAO,KAGX9X,IAAK,GAAI5c,SAAS+zB,GAASnX,IACzB,GACA,CAAE5pB,MAAO,GAAWihD,WAAYT,IAChC,CAAE9e,MAAO,KAGX7X,IAAK,GAAI7c,SAAS+zB,GAASlX,IACzB,GACA,CAAE7pB,MAAO,GAAWkhD,QAASV,IAC7B,CAAE9e,MAAO,KAGX5X,IAAK,GAAI9c,SAAS+zB,GAASjX,IACzB,GACA,CAAE9pB,MAAO,GAAWkhD,QAASV,IAC7B,CAAE9e,MAAO,KAGXT,OAAQ,GAAIj0B,SAAS+zB,GAASE,OAC5B,GACA,CAAEjhC,MAAO,GAAWihC,OAAQwf,KAG9B5oC,MAAO,GAAI7K,SAAS+zB,GAASlpB,MAC3B,GAAMtL,SAAS,IACf,CAAEvM,MAAO,KAGX4rB,KAAM,GAAI5e,SAAS+zB,GAASnV,KAC1B,GACA,CAAEnL,MAAO,GAAWC,IAAK,GAAW2jB,MAAO,KAG7CnD,QAAS,GAAIl0B,SAAS+zB,GAASG,QAC7B,GACA,CAAElhC,MAAO,GAAWk9B,OAAQ,KAG9BiE,OAAQ,GAAIn0B,SAAS+zB,GAASI,OAC5B,GACA,CAAEnhC,MAAO,GAAWk9B,OAAQ,KAG9BkE,MAAO,GAAIp0B,SAAS+zB,GAASK,MAC3BiC,GAAcz5B,KACd,CAAE5J,MAAO,KAGXqhC,QAAS,GAAIr0B,SAAS+zB,GAASM,QAC7B,GACA,CAAErhC,MAAOqjC,GAAcz5B,OAGzB03B,UAAW,GAAIt0B,SAAS+zB,GAASO,UAC/B,GACA,CAAEthC,MAAO,KAGXuhC,SAAU,GAAIv0B,SAAS+zB,GAASQ,SAC9B,GACA,CAAEvhC,MAAO,GAAWqL,KAAM,KAG5Bm2B,OAAQ,GAAIx0B,SAAS+zB,GAASS,OAC5B,GACA,CAAExhC,MAAO,IACT,CAAE0hC,MAAO,KAGXD,OAAQ,GAAIz0B,SAAS+zB,GAASU,OAC5B,GACA,CAAEzhC,MAAO,KAGX0hC,MAAO,GAAI10B,SAAS+zB,GAASW,MAC3B,GACA,CAAE1hC,MAAO,GAAW0hC,MAAO,KAG7B9lB,SAAU,GAAI5O,SAAS+zB,GAASnlB,SAC9B,GACA,CAAE5b,MAAO,GAAWqL,KAAM,KAG5Bka,MAAO,GAAIvY,SAAS+zB,GAASxb,MAC3B,GACA,CAAEjmB,KAAMohD,KAGV/e,QAAS,GAAI30B,SAAS+zB,GAASY,QAC7B,GACA,CAAE3hC,MAAO,KAGX4hC,MAAO,GAAI50B,SAAS+zB,GAASa,MAC3B,GACA,CAAEuf,IAAK,GAAWC,OAAQ,GAAWlhD,KAAMygD,KAK7CzxC,QAAS,GAAIlC,SAAS+zB,GAAS7xB,QAC7B,GACA,CAAElP,MAAO,KAGXqP,QAAS,GAAIrC,SAAS+zB,GAAS1xB,QAC7B,GACA,CAAErP,MAAO,GAAWqL,KAAM,IAC1B,CAAEjJ,QAAS,KAGbkN,WAAY,GAAItC,SAAS+zB,GAASzxB,WAChC,GACA,CAAEtP,MAAO,GAAWqL,KAAM,IAC1B,CAAEjJ,QAAS,KAGboU,OAAQ,GAAIxJ,SAAS+zB,GAASvqB,OAC5B,GACA,CAAExW,MAAO,GAAWqL,KAAM,KAG5BoL,cAAe,GAAIzJ,SAAS+zB,GAAStqB,cACnC,GACA,CAAEzW,MAAO,GAAWqL,KAAM,KAG5BqL,UAAW,GAAI1J,SAAS+zB,GAASrqB,UAC/B,GACA,CAAE1W,MAAO,GAAWqL,KAAM,KAG5BsL,iBAAkB,GAAI3J,SAAS+zB,GAASpqB,iBACtC,GACA,CAAE3W,MAAO,GAAWqL,KAAM,KAK5BkE,MAAO,GAAIvC,SAAS+zB,GAASxxB,MAAO,GAAS,CAAEvP,MAAO,KAEtDwP,UAAW,GAAIxC,SAAS+zB,GAASvxB,UAAW,GAAa,CAAExP,MAAO,KAElEyP,QAAS,GAAIzC,SAAS+zB,GAAStxB,QAAS,GAAW,CAAEzP,MAAO,KAE5D0P,OAAQ,GAAI1C,SAAS+zB,GAASrxB,OAAQ,GAAU,CAAE1P,MAAO,KAEzD2P,OAAQ,GAAI3C,SAAS+zB,GAASpxB,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAY,CAAEA,MAAO,KAE5F4P,MAAO,GAAI5C,SAAS+zB,GAASnxB,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAY,CAAEA,MAAO,KAEzF6P,SAAU,GAAI7C,SAAS+zB,GAASlxB,SAAU,GAAY,CAAE7P,MAAO,KAE/D8P,SAAU,GAAI9C,SAAS+zB,GAASjxB,SAAU,SAAA/Q,GAAK,OAAAA,EAAEiB,OAAS,IAAW,CAAEA,MAAO,KAE9E+P,OAAQ,GAAI/C,SAAS+zB,GAAShxB,OAAQ,GAAU,CAAE/P,MAAO,KAEzDgQ,QAAS,GAAIhD,SAAS+zB,GAAS/wB,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAa,CAAEA,MAAO,KAEjGiQ,MAAO,GAAIjD,SAAS+zB,GAAS9wB,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAU,CAAEA,MAAO,MClbnF,GAAM,GAAS8T,WAEfutC,GAAe,IAAI,GAAS,CAChC/gD,IAAK,GAASoT,SAASoB,cACvB9U,MAAO,GAAS0T,SAASoB,cACzBuJ,UAAW,IAAI9c,IAAI,CACjB,CAAC,YAAa,aACd,CAAC,sBAAuB,oBACxB,CAAC,cAAe,UAChB,CAAC,SAAU,UACX,CAAC,SAAU,UACX,CAAC,OAAQ,QACT,CAAC,MAAO,OACR,CAAC,eAAgB,cACjB,CAAC,oBAAqB,kBACtB,CAAC,cAAe,aAChB,CAAC,cAAe,aAChB,CAAC,OAAQ,QACT,CAAC,gBAAiB,eAClB,CAAC,oBAAqB,mBACtB,CAAC,qBAAsB,mBACvB,CAAC,yBAA0B,uBAC3B,CAAC,0BAA2B,uBAC5B,CAAC,eAAgB,cACjB,CAAC,mBAAoB,kBACrB,CAAC,oBAAqB,kBACtB,CAAC,wBAAyB,sBAC1B,CAAC,yBAA0B,sBAC3B,CAAC,QAAS,SACV,CAAC,UAAW,WACZ,CAAC,OAAQ,QACT,CAAC,kBAAmB,kBACpB,CAAC,iBAAkB,iBACnB,CAAC,kBAAmB,kBACpB,CAAC,mBAAoB,mBACrB,CAAC,qBAAsB,yBAIrB+/C,GAAY,IAAI,GAAS,CAC7BhhD,IAAK,GAASoT,SAASoB,cACvB9U,MAAO,GAAS0T,SAASoB,cACzBuJ,UAAW,IAAI9c,IAAI,CACjB,CAAC,cAAe,UAChB,CAAC,SAAU,UACX,CAAC,SAAU,UACX,CAAC,OAAQ,QACT,CAAC,MAAO,OACR,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,UAAW,WACZ,CAAC,OAAQ,YAIPggD,GAAa,IAAI,GAAS,CAC9BjhD,IAAK,GAASoT,SAASoB,cACvB9U,MAAO,GAAS0T,SAASoB,cACzBuJ,UAAW,IAAI9c,IAAI,CACjB,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,OAAQ,QACT,CAAC,QAAS,SACV,CAAC,WAAY,YACb,CAAC,KAAM,MACP,CAAC,OAAQ,YAKAigD,GACb,CAIEnhD,OAAQ,GAAI2M,SAASwwB,GAAQn9B,OAAQ,IAErCsC,IAAK,GAAIqK,SAASwwB,GAAQ76B,IAAK,IAE/B86B,MAAO,GAAIzwB,SAASwwB,GAAQC,MAAO,IAEnCC,SAAU,GAAI1wB,SAASwwB,GAAQE,SAAU,IAEzCC,UAAW,GAAI3wB,SAASwwB,GAAQG,UAAW,IAI3C/uB,MAAO,GAAI5B,SAASwwB,GAAQ5uB,MAC1B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGX6X,MAAO,GAAI7K,SAASwwB,GAAQ3lB,MAAO,GAAMtL,SAAS,IAAW,CAAEvM,MAAO,IAAI,GAAS,CAAC,GAAS0T,SAAU,GAAWA,SAAU,GAASA,YAAc,CAAEwnB,WAAY,KAEjK0C,SAAU,GAAI5wB,SAASwwB,GAAQI,SAAU,GAAMrxB,SAAS,IAAW,CAAEvM,MAAO,IAAY,CAAEk7B,WAAY,KAEtG2C,cAAe,GAAI7wB,SAASwwB,GAAQK,cAAe,GAAU,CAAE79B,MAAO,KAEtE89B,qBAAsB,GAAI9wB,SAASwwB,GAAQM,qBAAsB,GAAU,CAAE99B,MAAO,KAEpF8C,IAAK,GAAIkK,SAASwwB,GAAQ16B,IAAK,GAAU,CAAE9C,MAAO,GAAUqL,KAAM,KAElEtI,IAAK,GAAIiK,SAASwwB,GAAQz6B,IAAK,GAAU,CAAE/C,MAAO,GAAUqL,KAAM,KAElEzL,IAAK,GAAIoN,SAASwwB,GAAQ59B,IAAK,GAAY,CAAEI,MAAO,GAAUU,SAAU2gD,KAExEl1C,IAAK,GAAIa,SAASwwB,GAAQrxB,IAAK,GAAU,CAAEnM,MAAO,GAAUU,SAAU2gD,GAAcl1C,IAAK,KAEzFtI,IAAK,GAAImJ,SAASwwB,GAAQ35B,IAAK,GAAU,CAAE7D,MAAO,GAAU0+B,KAAM4iB,IAAa,CAAEpkB,OAAQ,KAEzF9hB,IAAK,GAAIpO,SAASwwB,GAAQpiB,IAAK,GAAU,CAAEpb,MAAO,GAAU0+B,KAAM4iB,IAAa,CAAEpkB,OAAQ,KAEzF5E,QAAS,GAAItrB,SAASwwB,GAAQlF,QAAS,GAAU,CAAEt4B,MAAO,GAAU0+B,KAAM4iB,KAE1EvoB,MAAO,GAAI/rB,SAASwwB,GAAQzE,MAAO,GAAU,CAAE/4B,MAAO,GAAU0+B,KAAM4iB,IAAa,CAAEG,UAAW,KAEhG5kB,YAAa,GAAI7vB,SAASwwB,GAAQX,YAAa,GAAY,CAAE78B,MAAO,KAEpE+9B,WAAY,GAAI/wB,SAASwwB,GAAQO,WAAY,GAAY,CAAE/9B,MAAO,KAElEg+B,YAAa,GAAIhxB,SAASwwB,GAAQQ,YAAa,GAAY,CAAEh+B,MAAO,KAEpE+R,KAAM,GAAI/E,SAASwwB,GAAQzrB,KAAM,GAAU,CAAE/R,MAAO,KAEpDiP,IAAK,GAAIjC,SAASwwB,GAAQvuB,IAAK,GAAY,CAAEjP,MAAO,GAAUqL,KAAM,IAAY,CAAEqzB,KAAM4iB,KAExFrnB,KAAM,GAAIjtB,SAASwwB,GAAQvD,KAAM,GAAY,CAAEj6B,MAAO,GAAUqL,KAAM,IAAY,CAAEqzB,KAAM4iB,GAAWI,SAAU,GAAaC,OAAQJ,KAEpItjB,eAAgB,GAAIjxB,SAASwwB,GAAQS,eAAgB,GAAY,CAAEj+B,MAAO,KAI1E8rB,OAAQ,GAAI9e,SAASwwB,GAAQ1R,OAAQ,GAAU,CAAE9rB,MAAO,GAAUihC,OAAQ,KAE1E/C,UAAW,GAAIlxB,SAASwwB,GAAQU,UAAW,GAAU,CAAEl+B,MAAO,KAI9DkP,QAAS,GAAIlC,SAASwwB,GAAQtuB,QAAS,GAAa,CAAElP,MAAO,KAE7DqP,QAAS,GAAIrC,SAASwwB,GAAQnuB,QAAS,GAAa,CAAErP,MAAO,GAAUqL,KAAM,IAAY,CAAEqzB,KAAM4iB,KAEjGnjB,SAAU,GAAInxB,SAASwwB,GAAQW,SAAU,GAAa,CAAEn+B,MAAO,GAAUqL,KAAM,IAAY,CAAEqzB,KAAM4iB,KAEnGljB,gBAAiB,GAAIpxB,SAASwwB,GAAQY,gBAAiB,GAAa,CAAEp+B,MAAO,GAAUqL,KAAM,IAAY,CAAEqzB,KAAM4iB,KAEjHjjB,QAAS,GAAIrxB,SAASwwB,GAAQa,QAAS,GAAa,CAAEr+B,MAAO,GAAUqL,KAAM,IAAY,CAAEqzB,KAAM4iB,KAEjGhjB,eAAgB,GAAItxB,SAASwwB,GAAQc,eAAgB,GAAa,CAAEt+B,MAAO,GAAUqL,KAAM,IAAY,CAAEqzB,KAAM4iB,KAE/Gp1B,UAAW,GAAIlf,SAASwwB,GAAQtR,UAAW,GAAa,CAAElsB,MAAO,GAAUygB,MAAO,GAAUC,IAAK,IAAY,CAAEge,KAAM4iB,GAAWM,eAAgB,GAAaC,aAAc,KAE3KtjB,UAAW,GAAIvxB,SAASwwB,GAAQe,UAAW,GAAa,CAAEv+B,MAAO,GAAU0+B,KAAM4iB,KAEjF9iB,QAAS,GAAIxxB,SAASwwB,GAAQgB,QAAS,GAAa,CAAEx+B,MAAO,GAAU0+B,KAAM4iB,IAAa,CAAEG,UAAW,KAEvGhjB,MAAO,GAAIzxB,SAASwwB,GAAQiB,MAAO,GAAa,CAAEz+B,MAAO,KAEzD48B,WAAY,GAAI5vB,SAASwwB,GAAQZ,WAAY,GAAa,CAAE58B,MAAO,KAInEuP,MAAO,GAAIvC,SAASwwB,GAAQjuB,MAAO,GAAS,CAAEvP,MAAO,KAErDwP,UAAW,GAAIxC,SAASwwB,GAAQhuB,UAAW,GAAa,CAAExP,MAAO,KAEjEyP,QAAS,GAAIzC,SAASwwB,GAAQ/tB,QAAS,GAAW,CAAEzP,MAAO,KAE3D0P,OAAQ,GAAI1C,SAASwwB,GAAQ9tB,OAAQ,SAAA3Q,GAAK,OAAAA,EAAEiB,OAAS,IAAU,CAAEA,MAAO,KAExE2P,OAAQ,GAAI3C,SAASwwB,GAAQ7tB,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAW,CAAEA,MAAO,KAE1F4P,MAAO,GAAI5C,SAASwwB,GAAQ5tB,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAW,CAAEA,MAAO,KAEvF6P,SAAU,GAAI7C,SAASwwB,GAAQ3tB,SAAU,GAAY,CAAE7P,MAAO,KAE9D8P,SAAU,GAAI9C,SAASwwB,GAAQ1tB,SAAU,GAAY,CAAE9P,MAAO,KAE9D+P,OAAQ,GAAI/C,SAASwwB,GAAQztB,OAAQ,GAAU,CAAE/P,MAAO,KAExDgQ,QAAS,GAAIhD,SAASwwB,GAAQxtB,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAY,CAAEA,MAAO,KAE/FiQ,MAAO,GAAIjD,SAASwwB,GAAQvtB,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAU,CAAEA,MAAO,MCtLlF,GAAM,GAAS8T,WAEfguC,GAAc,SAAC35C,EAAa8b,GAA0B,OAAA9b,aAAgB,GAAWA,EAAO8b,GACxF89B,GAAW,SAAC55C,EAAa8b,GAA0B,OAAA9b,aAAgB,GAAWA,EAAKG,QAAQgI,KAAO2T,GAClG+9B,GAAY,SAACjjD,GAAqB,OAAA+iD,GAAY/iD,EAAEoJ,OAAS,IACzD85C,GAAiB,SAACljD,GAAsB,OAAA+iD,GAAY/iD,EAAEiB,QAAU,IAChEkiD,GAAgB,SAACnjD,GAAqB,OAAA+iD,GAAY/iD,EAAEoJ,MAAQpJ,EAAEoJ,KAAKG,QAAQgI,KAAO,IAClF6xC,GAAwB,SAACpjD,GAAqB,UAAMwN,SAAS21C,GAAcnjD,KAC3EqjD,GAAqB,SAACrjD,GAAsB,OAAA+iD,GAAY/iD,EAAEiB,OAASjB,EAAEiB,MAAMsI,QAAQgI,KAAO,IAC1F+xC,GAAe,SAACtjD,GAAuC,OAAAA,EAAEkG,QAAUlG,EAAEmG,SAAW,IAChFo9C,GAAwB,CAAEn6C,KAAM65C,GAAWhiD,MAAOkiD,GAAe72C,KAAM62C,IACvEK,GAA6B,CAAEp6C,KAAM85C,GAAgBjiD,MAAOoiD,GAAoB/2C,KAAM+2C,IACtFI,GAA0B,CAAEr6C,KAAM65C,GAAW1xC,KAAM4xC,GAAe1xC,MAAO,IAElEiyC,GACb,CAIEpiD,OAAQ,GAAI2M,SAAS0f,GAAQrsB,OAAQ,IAErC8e,WAAY,GAAInS,SAAS0f,GAAQvN,WAC/B6iC,GACA,CAAE75C,KAAM65C,KAGV5iC,UAAW,GAAIpS,SAAS0f,GAAQtN,UAC9B,SAAArgB,GAAK,UAASswB,QAAQtwB,EAAEuR,MAAQ,KAChC,CAAEA,KAAM,SAAAvR,GAAK,OAAAA,EAAEuR,MAAQ,MAKzB1B,MAAO,GAAI5B,SAAS0f,GAAQ9d,MAC1B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGX+oB,MAAO,GAAI/b,SAAS0f,GAAQ3D,MAC1B,SAAAhqB,GAAK,UAASswB,QAAQtwB,EAAEuR,MAAQ,KAChC,CAAEjI,MAAO,GAAYiI,KAAM,SAAAvR,GAAK,OAAAA,EAAEuR,MAAQ,KAC1C,CAAEoyC,SAAU,IACZ,CAAEv6C,KAAM,SAAApJ,GAAK,UAASswB,QAAQtwB,EAAEuR,MAAQ,KAAUE,MAAO,GAAYod,KAAM,SAAA7uB,GAAK,OAAAA,EAAEuR,MAAQ,IAASjI,MAAO,KAG5GzI,IAAK,GAAIoN,SAAS0f,GAAQ9sB,IACxBuiD,GACA,CAAEh6C,KAAM65C,GAAWxxC,MAAO,KAG5BrE,IAAK,GAAIa,SAAS0f,GAAQvgB,IACxBg2C,GACA,CAAEh6C,KAAM65C,GAAWxxC,MAAO,GAAYxQ,MAAOkiD,KAG/Cr+C,IAAK,GAAImJ,SAAS0f,GAAQ7oB,IACxBm+C,GACA,CAAE75C,KAAM65C,GAAW1xC,KAAM4xC,KAG3Bv1B,SAAU,GAAI3f,SAAS0f,GAAQC,SAC7Bq1B,GACA,CAAE75C,KAAM65C,GAAW1xC,KAAM4xC,KAG3Bt1B,QAAS,GAAI5f,SAAS0f,GAAQE,QAC5Bo1B,GACA,CAAE75C,KAAM65C,GAAW1xC,KAAM4xC,KAG3Br1B,OAAQ,GAAI7f,SAAS0f,GAAQG,OAC3Bm1B,GACA,CAAE75C,KAAM65C,GAAW1xC,KAAM4xC,GAAe1xC,MAAO,KAGjD1M,OAAQ,GAAIkJ,SAAS0f,GAAQ5oB,OAC3B,GACA,CAAEqE,KAAM65C,GAAW1xC,KAAM4xC,GAAe7yC,QAAS,IACjD,GACAizC,IAGFx1B,YAAa,GAAI9f,SAAS0f,GAAQI,YAChCq1B,GACA,CAAEh6C,KAAM65C,KAGVj1B,WAAY,GAAI/f,SAAS0f,GAAQK,WAC/Bo1B,GACA,CAAEh6C,KAAM65C,KAGVh1B,SAAU,GAAIhgB,SAAS0f,GAAQM,SAC7Bm1B,GACA,CAAEh6C,KAAM65C,GAAWxxC,MAAO,KAG5Byc,YAAa,GAAIjgB,SAAS0f,GAAQO,YAChC+0B,GACA,CAAE75C,KAAM65C,GAAWtQ,MAAO,IAC1B,GACA8Q,IAGF/iC,MAAO,GAAIzS,SAAS0f,GAAQjN,MAC1BuiC,GACA,CAAE75C,KAAM65C,KAGV90B,SAAU,GAAIlgB,SAAS0f,GAAQQ,SAC7B,GACA,CAAE/kB,KAAM65C,GAAW1xC,KAAM4xC,GAAe7yC,QAAS,IACjD,GACAizC,IAGFxqC,KAAM,GAAI9K,SAAS0f,GAAQ5U,KACzBqqC,GACA,CAAEh6C,KAAM65C,GAAWtQ,MAAO,IAC1B,CAAEvkB,QAAS,GAAa1M,MAAO,IAC/B+hC,IAGFzwC,KAAM,GAAI/E,SAAS0f,GAAQ3a,KACzBiwC,GACA,CAAE75C,KAAM65C,IACR,CAAE9K,SAAUgL,IACZ,CAAEnwC,KAAMmwC,KAGV/0B,QAAS,GAAIngB,SAAS0f,GAAQS,QAC5B60B,GACA,CAAE75C,KAAM65C,KAGV50B,QAAS,GAAIpgB,SAAS0f,GAAQU,QAC5B40B,GACA,CAAE75C,KAAM65C,GAAW50B,QAAS40B,GAAW3yC,QAAS,IAChD,GACAizC,IAGFj1B,QAAS,GAAIrgB,SAAS0f,GAAQW,QAC5B20B,GACA,CAAE75C,KAAM65C,GAAW30B,QAAS20B,GAAW3yC,QAAS,IAChD,GACAizC,IAGFrvC,KAAM,GAAIjG,SAAS0f,GAAQzZ,KACzB+uC,GACA,CAAE75C,KAAM65C,GAAW9wC,QAAS,IAC5B,GACAoxC,IAGFh1B,QAAS,GAAItgB,SAAS0f,GAAQY,QAC5B00B,GACA,CAAE75C,KAAM65C,IACR,CAAE1mB,MAAO,KAGX/N,OAAQ,GAAIvgB,SAAS0f,GAAQa,OAC3By0B,GACA,CAAE75C,KAAM65C,GAAW3yC,QAAS,IAC5B,GACAizC,IAGF90B,WAAY,GAAIxgB,SAAS0f,GAAQc,WAC/Bw0B,GACA,CAAE75C,KAAM65C,GAAW3yC,QAAS,IAC5B,CAAEk5B,KAAM,IACR+Z,IAGF70B,KAAM,GAAIzgB,SAAS0f,GAAQe,KACzBu0B,GACA,CAAE75C,KAAM65C,GAAW35C,MAAO,KAG5BqlB,KAAM,GAAI1gB,SAAS0f,GAAQgB,KACzBs0B,GACA,CAAE75C,KAAM65C,GAAW35C,MAAO,KAG5BslB,KAAM,GAAI3gB,SAAS0f,GAAQiB,KACzBq0B,GACA,CAAE75C,KAAM65C,GAAW35C,MAAO,KAG5BuP,OAAQ,GAAI5K,SAAS0f,GAAQ9U,OAC3BoqC,GACA,CAAE75C,KAAM65C,GAAWpqC,OAAQoqC,KAG7BnnC,QAAS,GAAI7N,SAAS0f,GAAQ7R,QAC5BmnC,GACA,CAAE75C,KAAM65C,GAAWnnC,QAASmnC,KAG9B3mC,QAAS,GAAIrO,SAAS0f,GAAQrR,QAC5B,GACA,CAAElT,KAAM65C,GAAW1xC,KAAM4xC,GAAe7yC,QAAS,IACjD,CAAEoR,MAAO,IACT6hC,IAGFhnC,YAAa,GAAItO,SAAS0f,GAAQpR,YAChC,GACA,CAAEnT,KAAM65C,GAAW1xC,KAAM4xC,GAAe7yC,QAAS,IACjD,CAAEoR,MAAO,IACT6hC,IAGFn+C,UAAW,GAAI6I,SAAS0f,GAAQvoB,UAC9B,GACA,CAAEgE,KAAM65C,GAAWtQ,MAAO,IAC1B,CAAEvkB,QAAS,GAAa1M,MAAO,IAC/B+hC,IAGF50B,KAAM,GAAI5gB,SAAS0f,GAAQkB,KACzBu0B,GACA,CAAEh6C,KAAM65C,KAGVr8C,MAAO,GAAIqH,SAAS0f,GAAQ/mB,MAC1Bw8C,GACA,CAAEh6C,KAAM65C,KAGV35C,MAAO,GAAI2E,SAAS0f,GAAQrkB,MAC1B,GACA,CAAEF,KAAM65C,KAGVn0B,WAAY,GAAI7gB,SAAS0f,GAAQmB,WAC/Bm0B,GACA,CAAE75C,KAAM65C,GAAW35C,MAAO,KAG5B2M,OAAQ,GAAIhI,SAAS0f,GAAQ1X,OAC3BmtC,GACA,CAAEh6C,KAAM65C,KAKVl0B,KAAM,GAAI9gB,SAAS0f,GAAQoB,KACzB,GACA,CAAE3lB,KAAM65C,IACR,CAAEtT,UAAW,GAAU5iB,OAAQ,GAAU/f,OAAQ,GAAU4mB,OAAQ,IACnE6vB,IAGFz0B,KAAM,GAAI/gB,SAAS0f,GAAQqB,KACzBi0B,GACA,CAAE75C,KAAM65C,GAAWj0B,KAAM,IACzB,CAAEZ,QAAS,IACXq1B,IAGFx6C,OAAQ,GAAIgF,SAAS0f,GAAQ1kB,OAC3Bg6C,GACA,CAAE75C,KAAM65C,GAAWh6C,OAAQ,IAC3B,GACAw6C,IAGFxzC,IAAK,GAAIhC,SAAS0f,GAAQ1d,IACxBgzC,GACA,CAAE75C,KAAM65C,GAAWhzC,IAAK,IACxB,GACAwzC,IAGFl/C,IAAK,GAAI0J,SAAS0f,GAAQppB,IACxB,SAAAvE,GAAK,UAASswB,QAAQtwB,EAAEgG,WAAa,KACrC,CAAEoD,KAAM65C,GAAWj9C,UAAW,SAAAhG,GAAK,OAAAA,EAAEgG,WAAa,KAClD,GACAy9C,IAGFtnC,MAAO,GAAIlO,SAAS0f,GAAQxR,MAC1B,SAAAnc,GAAK,UAAM0B,OAAO,CAAEwH,KAAM+5C,GAAUjjD,GAAI4jD,KAAMX,GAAUjjD,MACxD,CAAEoJ,KAAM65C,GAAW/5C,KAAM,IACzB,GACAu6C,IAGFv9C,OAAQ,GAAI+H,SAAS0f,GAAQznB,OAC3Bo9C,GACA,CAAEl6C,KAAM65C,GAAW/8C,OAAQo9C,GAAcn9C,QAASm9C,IAClD,GACA,CAAEl6C,KAAM65C,GAAW1xC,KAAM4xC,GAAeU,QAASP,GAAc7xC,MAAO,KAGxEvB,IAAK,GAAIjC,SAAS0f,GAAQzd,IACxB,GACA,CAAEjP,MAAOiiD,GAAgB52C,KAAM42C,GAAgB/wC,QAAS,IACxD,GACAqxC,IAGFv0B,MAAO,GAAIhhB,SAAS0f,GAAQsB,MAC1B,SAAAjvB,GAAK,UAASswB,QAAQ,GAAM5uB,OAAO,CACjCoiD,GAAI9jD,EAAE8jD,IAAM,GACZ70B,MAAO,GAASqB,QAAQtwB,EAAEwF,UAAY29C,GAAcnjD,QAEtD,CAAEoJ,KAAM65C,GAAWa,GAAI,SAAA9jD,GAAK,OAAAA,EAAE8jD,IAAM,KACpC,CAAEt+C,SAAU,SAAAxF,GAAK,OAAAA,EAAEwF,UAAY29C,GAAcnjD,KAC7CyjD,IAGFv0B,UAAW,GAAIjhB,SAAS0f,GAAQuB,UAC9B,SAAAlvB,GAAK,UAAQswB,QACX,GAASA,QAAQtwB,EAAEwF,UAAY29C,GAAcnjD,IAC7CA,EAAEyF,QAAU,KAEd,CAAE2D,KAAM65C,GAAWx9C,OAAQ,SAAAzF,GAAK,OAAAA,EAAEyF,QAAU,KAC5C,CAAED,SAAU,SAAAxF,GAAK,OAAAA,EAAEwF,UAAY29C,GAAcnjD,KAC7CyjD,IAGFx/C,MAAO,GAAIgK,SAAS0f,GAAQ1pB,MAC1B,SAAAjE,GAAK,UAAQswB,QACXtwB,EAAEwF,UAAY29C,GAAcnjD,GAC5BA,EAAEyF,QAAU,KAEd,CAAE2D,KAAM65C,GAAWx9C,OAAQ,SAAAzF,GAAK,OAAAA,EAAEyF,QAAU,KAC5C,CAAED,SAAU,SAAAxF,GAAK,OAAAA,EAAEwF,UAAY29C,GAAcnjD,KAC7CyjD,IAKFt0B,UAAW,GAAIlhB,SAAS0f,GAAQwB,UAC9B,SAAAnvB,GAAK,UAASswB,QAAQtwB,EAAE+uB,MAAQ,KAChC,CAAE/rB,EAAG,SAAAhD,GAAK,OAAA+iD,GAAY/iD,EAAEgD,EAAG,KAAWC,EAAG,SAAAjD,GAAK,OAAA+iD,GAAY/iD,EAAEiD,EAAG,KAAWqmC,GAAI,GAAava,KAAM,IACjG,GACA,CAAEg1B,IAAK,SAAA/jD,GAAK,OAAAgjD,GAAShjD,EAAEgD,EAAG,KAAUghD,IAAK,SAAAhkD,GAAK,OAAAgjD,GAAShjD,EAAEiD,EAAG,KAAUghD,MAAO,SAAAjkD,GAAK,OAAAgjD,GAAShjD,EAAEgD,EAAG,KAAUkhD,MAAO,SAAAlkD,GAAK,OAAAgjD,GAAShjD,EAAEiD,EAAG,OAGtImsB,SAAU,GAAInhB,SAAS0f,GAAQyB,SAC7B,SAAApvB,GAAK,UAASswB,QAAQtwB,EAAE+uB,MAAQ,KAChC,CAAE/rB,EAAG,SAAAhD,GAAK,OAAA+iD,GAAY/iD,EAAEgD,EAAG,KAAWC,EAAG,SAAAjD,GAAK,OAAA+iD,GAAY/iD,EAAEiD,EAAG,KAAWqmC,GAAI,GAAava,KAAM,IACjG,GACA,CAAEg1B,IAAK,SAAA/jD,GAAK,OAAAgjD,GAAShjD,EAAEgD,EAAG,KAAUghD,IAAK,SAAAhkD,GAAK,OAAAgjD,GAAShjD,EAAEiD,EAAG,KAAUghD,MAAO,SAAAjkD,GAAK,OAAAgjD,GAAShjD,EAAEgD,EAAG,KAAUkhD,MAAO,SAAAlkD,GAAK,UAAMwN,SAASw1C,GAAShjD,EAAEiD,EAAG,QAGrJosB,UAAW,GAAIphB,SAAS0f,GAAQ0B,UAC9B,SAAArvB,GAAK,UAASswB,QAAQtwB,EAAE+uB,MAAQ,KAChC,CAAE/rB,EAAG,SAAAhD,GAAK,OAAA+iD,GAAY/iD,EAAEgD,EAAG,KAAWC,EAAG,SAAAjD,GAAK,OAAA+iD,GAAY/iD,EAAEiD,EAAG,KAAWqmC,GAAI,GAAava,KAAM,IACjG,GACA,CAAEg1B,IAAK,SAAA/jD,GAAK,OAAAgjD,GAAShjD,EAAEgD,EAAG,KAAUghD,IAAK,SAAAhkD,GAAK,OAAAgjD,GAAShjD,EAAEiD,EAAG,KAAUghD,MAAO,SAAAjkD,GAAK,UAAMwN,SAASw1C,GAAShjD,EAAEgD,EAAG,MAAWkhD,MAAO,SAAAlkD,GAAK,OAAAgjD,GAAShjD,EAAEiD,EAAG,OAGtJqsB,SAAU,GAAIrhB,SAAS0f,GAAQ2B,SAC7B,SAAAtvB,GAAK,UAASswB,QAAQtwB,EAAE+uB,MAAQ,KAChC,CAAE/rB,EAAG,SAAAhD,GAAK,OAAA+iD,GAAY/iD,EAAEgD,EAAG,KAAWC,EAAG,SAAAjD,GAAK,OAAA+iD,GAAY/iD,EAAEiD,EAAG,KAAWqmC,GAAI,GAAava,KAAM,IACjG,GACA,CAAEg1B,IAAK,SAAA/jD,GAAK,OAAAgjD,GAAShjD,EAAEgD,EAAG,KAAUghD,IAAK,SAAAhkD,GAAK,OAAAgjD,GAAShjD,EAAEiD,EAAG,KAAUghD,MAAO,SAAAjkD,GAAK,UAAMwN,SAASw1C,GAAShjD,EAAEgD,EAAG,MAAWkhD,MAAO,SAAAlkD,GAAK,UAAMwN,SAASw1C,GAAShjD,EAAEiD,EAAG,QAGrKssB,UAAW,GAAIthB,SAAS0f,GAAQ4B,UAC9B,SAAAvvB,GAAK,UAASswB,QAAQtwB,EAAE+uB,MAAQ,KAChC,CAAE/rB,EAAG,SAAAhD,GAAK,OAAA+iD,GAAY/iD,EAAEgD,EAAG,KAAWC,EAAG,SAAAjD,GAAK,OAAA+iD,GAAY/iD,EAAEiD,EAAG,KAAW8rB,KAAM,IAChF,GACA,CAAEk1B,MAAO,SAAAjkD,GAAK,OAAAgjD,GAAShjD,EAAEgD,EAAG,KAAUkhD,MAAO,SAAAlkD,GAAK,OAAAgjD,GAAShjD,EAAEiD,EAAG,OAKlEc,IAAK,GAAIkK,SAAS0f,GAAQ5pB,IACxB,GAAMyJ,SAAS,IACf,CAAEpE,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGFz/C,IAAK,GAAIiK,SAAS0f,GAAQ3pB,IACxB,GAAMwJ,SAAS,IACf,CAAEpE,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGFj0B,IAAK,GAAIvhB,SAAS0f,GAAQ6B,IACxB,GAAMhiB,SAAS,IACf,CAAEpE,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGFh0B,IAAK,GAAIxhB,SAAS0f,GAAQ8B,IACxB,GAAMjiB,SAAS,IACf,CAAEpE,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGF/zB,IAAK,GAAIzhB,SAAS0f,GAAQ+B,IACxB,GAAMliB,SAAS,IACf,CAAEpE,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGF9zB,SAAU,GAAI1hB,SAAS0f,GAAQgC,SAC7B,GAAMniB,SAAS,IACf,CAAEpE,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGF7zB,OAAQ,GAAI3hB,SAAS0f,GAAQiC,OAC3B,GAAMpiB,SAAS,IACf,CAAEpE,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGF5zB,OAAQ,GAAI5hB,SAAS0f,GAAQkC,OAC3B,GACA,CAAEzmB,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGF3zB,MAAO,GAAI7hB,SAAS0f,GAAQmC,MAC1B,GACA,CAAE1mB,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAGF1zB,OAAQ,GAAI9hB,SAAS0f,GAAQoC,OAC3B,GACA,CAAE3mB,KAAM65C,GAAWhiD,MAAO,IAC1B,GACAwiD,IAKFtzC,QAAS,GAAIlC,SAAS0f,GAAQxd,QAC5B,GACA,CAAElP,MAAO,KAGXwC,QAAS,GAAIwK,SAAS0f,GAAQlqB,QAC5B,GACA,CAAE2F,KAAM65C,KAGVjlC,WAAY,GAAI/P,SAAS0f,GAAQ3P,WAC/B,GACA,CAAE5U,KAAM65C,KAGV3yC,QAAS,GAAIrC,SAAS0f,GAAQrd,QAC5B,GACA,CAAElH,KAAM65C,GAAW32C,KAAM22C,GAAW3yC,QAAS,IAC7C,GACAizC,IAGFhzC,WAAY,GAAItC,SAAS0f,GAAQpd,WAC/B,GACA,CAAEnH,KAAM65C,GAAW32C,KAAM22C,GAAW3yC,QAAS,IAC7C,GACAizC,IAGF9rC,OAAQ,GAAIxJ,SAAS0f,GAAQlW,OAC3B,GACA,CAAExW,MAAOiiD,GAAgB52C,KAAM42C,GAAgB/wC,QAAS,IACxD,GACAqxC,IAGF9rC,cAAe,GAAIzJ,SAAS0f,GAAQjW,cAClC,GACA,CAAEzW,MAAOiiD,GAAgB52C,KAAM42C,GAAgB/wC,QAAS,IACxD,GACAqxC,IAGF7rC,UAAW,GAAI1J,SAAS0f,GAAQhW,UAC9B,GACA,CAAE1W,MAAOiiD,GAAgB52C,KAAM42C,GAAgB/wC,QAAS,IACxD,GACAqxC,IAGF5rC,iBAAkB,GAAI3J,SAAS0f,GAAQ/V,iBACrC,GACA,CAAE3W,MAAOiiD,GAAgB52C,KAAM42C,GAAgB/wC,QAAS,IACxD,GACAqxC,IAMFhzC,MAAO,GAAIvC,SAAS0f,GAAQnd,MAC1B,GACA,CAAEvP,MAAOiiD,KAGXzyC,UAAW,GAAIxC,SAAS0f,GAAQld,UAC9B,GACA,CAAExP,MAAOiiD,KAGXxyC,QAAS,GAAIzC,SAAS0f,GAAQjd,QAC5B,GACA,CAAEzP,MAAOiiD,KAGXvyC,OAAQ,GAAI1C,SAAS0f,GAAQhd,OAC3B,GACA,CAAE1P,MAAOiiD,KAGXtyC,OAAQ,GAAI3C,SAAS0f,GAAQ/c,OAC3BsyC,GACA,CAAEjiD,MAAOiiD,KAGXryC,MAAO,GAAI5C,SAAS0f,GAAQ9c,MAC1B,SAAA7Q,GAAK,UAAQswB,QAAQ+yB,GAAmBrjD,KACxC,CAAEiB,MAAOiiD,KAGXpyC,SAAU,GAAI7C,SAAS0f,GAAQ7c,SAC7B,GACA,CAAE7P,MAAOiiD,KAGXnyC,SAAU,GAAI9C,SAAS0f,GAAQ5c,SAC7B,GACA,CAAE9P,MAAOiiD,KAGXlyC,OAAQ,GAAI/C,SAAS0f,GAAQ3c,OAC3B,GACA,CAAE/P,MAAOiiD,KAGXjyC,QAAS,GAAIhD,SAAS0f,GAAQ1c,QAC5B,GACA,CAAEhQ,MAAOiiD,KAGXhyC,MAAO,GAAIjD,SAAS0f,GAAQzc,MAC1B,SAAAlR,GAAK,UAAQswB,QAAQ+yB,GAAmBrjD,KACxC,CAAEiB,MAAOiiD,MC7iBP,GAAM,GAAQnuC,WAEdovC,GAAa,SAAC5/C,GAAe,OAAAA,aAAe,GAAUA,OAAMuB,GAC5Ds+C,GAAW,SAACpkD,GAAoB,OAAAmkD,GAAWnkD,EAAEuE,MAAQ,IACrD8/C,GAAgB,SAACrkD,GAAoB,OAAAmkD,GAAWnkD,EAAEuE,KAAOvE,EAAEuE,IAAIgF,QAAQtI,MAAQ,IAC/EqjD,GAAwB,SAACtkD,GAAoB,UAAMwN,SAAS62C,GAAcrkD,KAC1EukD,GAAc,SAACvkD,GAAoB,OAAAmkD,GAAWnkD,EAAEuE,KAAOvE,EAAEuE,IAAIgF,QAAQhI,IAAM,IAC3EijD,GAAyB,CAAEjgD,IAAK6/C,GAAU7iD,IAAKgjD,GAAatjD,MAAOojD,IAEnEI,GAAgB,SAACzkD,GAAsB,OAAAmkD,GAAWnkD,EAAEiB,QAAU,IAC9DyjD,GAAqB,SAAC1kD,GAAsB,OAAAmkD,GAAWnkD,EAAEiB,OAASjB,EAAEiB,MAAMsI,QAAQtI,MAAQ,IAE1F0jD,GAAyB,CAAEpjD,IADR,SAACvB,GAAsB,OAAAmkD,GAAWnkD,EAAEiB,OAASjB,EAAEiB,MAAMsI,QAAQhI,IAAM,IACpCN,MAAOyjD,GAAoBp4C,KAAMo4C,IAE5EE,GACb,CAIEtjD,OAAQ,GAAI2M,SAASkS,GAAO7e,OAAQ,IAEpC8e,WAAY,GAAInS,SAASkS,GAAOC,WAC9BgkC,GACA,CAAE7/C,IAAK6/C,KAGT/jC,UAAW,GAAIpS,SAASkS,GAAOE,UAC7B,SAAArgB,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,GAASjB,EAAEuB,KAAO,KAClD,CAAEN,MAAO,SAAAjB,GAAK,OAAAA,EAAEiB,OAAS,KACzB,CAAEM,IAAK,SAAAvB,GAAK,OAAAA,EAAEuB,KAAO,MAKvBsO,MAAO,GAAI5B,SAASkS,GAAOtQ,MACzB,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGXJ,IAAK,GAAIoN,SAASkS,GAAOtf,IACvByjD,GACA,CAAE//C,IAAK6/C,GAAU7iD,IAAKgjD,KAGxBn3C,IAAK,GAAIa,SAASkS,GAAO/S,IACvBk3C,GACA,CAAE//C,IAAK6/C,GAAU7iD,IAAKgjD,GAAatjD,MAAOojD,IAC1C,GACA,CAAEQ,cAAeR,KAGnB/jC,IAAK,GAAIrS,SAASkS,GAAOG,IACvB,GACA,CAAE/b,IAAK6/C,GAAU7iD,IAAKgjD,KAGxBhkC,OAAQ,GAAItS,SAASkS,GAAOI,OAC1B,GACA,CAAEhc,IAAK6/C,GAAU7iD,IAAKgjD,KAGxB/jC,KAAM,GAAIvS,SAASkS,GAAOK,KACxB,SAAAxgB,GAAK,UAASswB,QAAQi0B,GAAYvkD,KAClC,CAAEuE,IAAK6/C,KAGT/kC,OAAQ,GAAIpR,SAASkS,GAAOd,OAC1B,SAAArf,GAAK,UAASswB,QAAQ+zB,GAAcrkD,KACpC,CAAEuE,IAAK6/C,KAGT3/C,QAAS,GAAIwJ,SAASkS,GAAO1b,QAC3B,SAAAzE,GAAK,UAAM0B,OAAO,CAChB8e,KAAM,GAAS8P,QAAQi0B,GAAYvkD,IACnCqf,OAAQ,GAASiR,QAAQ+zB,GAAcrkD,OAEzC,CAAEuE,IAAK6/C,KAGT3jC,MAAO,GAAIxS,SAASkS,GAAOM,MACzB,SAAAzgB,GAAK,UAASswB,QAAQ,GAAM5uB,OAAO,CACjCH,IAAKgjD,GAAYvkD,GACjBiB,MAAOojD,GAAcrkD,OAEvB,CAAEuE,IAAK6/C,KAGT1jC,MAAO,GAAIzS,SAASkS,GAAOO,MACzB0jC,GACA,CAAE7/C,IAAK6/C,KAGT96C,MAAO,GAAI2E,SAASkS,GAAO7W,MACzB,GACA,CAAE/E,IAAK6/C,KAGTl0C,IAAK,GAAIjC,SAASkS,GAAOjQ,IACvB,GACA,CAAEjP,MAAOwjD,GAAen4C,KAAMm4C,GAAetyC,QAAS,IACtD,GACAwyC,IAGF3xC,KAAM,GAAI/E,SAASkS,GAAOnN,KACxBoxC,GACA,CAAE7/C,IAAK6/C,IACP,CAAEjM,SAAUkM,GAAeS,YAAaP,IACxCC,IAGFjgD,IAAK,GAAI0J,SAASkS,GAAO5b,IACvB,SAAAvE,GAAK,UAAQswB,QAAQtwB,EAAEgG,WAAaq+C,GAAcrkD,GAAIA,EAAEkhB,cAAgBqjC,GAAYvkD,KACpF,CAAEuE,IAAK6/C,IACP,CAAEp+C,UAAW,SAAAhG,GAAK,OAAAA,EAAEgG,WAAaq+C,GAAcrkD,IAAIkhB,aAAc,SAAAlhB,GAAK,OAAAA,EAAEkhB,cAAgBqjC,GAAYvkD,KACpGwkD,IAGF7jC,cAAe,GAAI1S,SAASkS,GAAOQ,cACjC,GACA,CAAEpc,IAAK6/C,KAGTxjC,gBAAiB,GAAI3S,SAASkS,GAAOS,gBACnC,SAAC5gB,GACC,KAAMA,EAAE0B,kBAAkB,IACxB,OAAO,GAGT,IAAMqjD,EAAYh/C,EAAc/F,EAAE0B,OAAsB6H,QAAQlD,OAEhE,OAAO,GAAQiqB,QAAQ,GAAM1M,UAAUmhC,EAAW,GAASpwC,YAE7D,CAAEjT,OAAQ,SAAA1B,GAAK,OAAAA,EAAE0B,QAAU,MAK7ByO,QAAS,GAAIlC,SAASkS,GAAOhQ,QAC3B,GACA,CAAElP,MAAO,KAGXqP,QAAS,GAAIrC,SAASkS,GAAO7P,QAC3B,GACA,CAAErP,MAAOwjD,GAAen4C,KAAMm4C,GAAen0C,QAAS,IACtD,GACAq0C,IAGFp0C,WAAY,GAAItC,SAASkS,GAAO5P,WAC9B,GACA,CAAEtP,MAAOwjD,GAAen4C,KAAMm4C,GAAen0C,QAAS,IACtD,GACAq0C,IAGFltC,OAAQ,GAAIxJ,SAASkS,GAAO1I,OAC1B,GACA,CAAExW,MAAOwjD,GAAen4C,KAAMm4C,GAAetyC,QAAS,IACtD,GACAwyC,IAGFjtC,cAAe,GAAIzJ,SAASkS,GAAOzI,cACjC,GACA,CAAEzW,MAAOwjD,GAAen4C,KAAMm4C,GAAetyC,QAAS,IACtD,GACAwyC,IAGFhtC,UAAW,GAAI1J,SAASkS,GAAOxI,UAC7B,GACA,CAAE1W,MAAOwjD,GAAen4C,KAAMm4C,GAAetyC,QAAS,IACtD,GACAwyC,IAGF/sC,iBAAkB,GAAI3J,SAASkS,GAAOvI,iBACpC,GACA,CAAE3W,MAAOwjD,GAAen4C,KAAMm4C,GAAetyC,QAAS,IACtD,GACAwyC,IAKFn0C,MAAO,GAAIvC,SAASkS,GAAO3P,MAAO,GAAS,CAAEvP,MAAO,KAEpDwP,UAAW,GAAIxC,SAASkS,GAAO1P,UAAW,GAAa,CAAExP,MAAO,KAEhEyP,QAAS,GAAIzC,SAASkS,GAAOzP,QAAS,GAAW,CAAEzP,MAAO,KAE1D0P,OAAQ,GAAI1C,SAASkS,GAAOxP,OAAQ,GAAU,CAAE1P,MAAO,KAEvD2P,OAAQ,GAAI3C,SAASkS,GAAOvP,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQo0B,GAAmB1kD,KAAK,CAAEiB,MAAO,KAE3F4P,MAAO,GAAI5C,SAASkS,GAAOtP,MAAO,SAAA7Q,GAAK,OAAAA,EAAEiB,OAAS,IAAS,CAAEA,MAAO,KAEpE6P,SAAU,GAAI7C,SAASkS,GAAOrP,SAAU,SAAA9Q,GAAK,WAAY,CAAEiB,MAAO,KAElE8P,SAAU,GAAI9C,SAASkS,GAAOpP,SAAU,GAAY,CAAE9P,MAAO,KAE7D+P,OAAQ,GAAI/C,SAASkS,GAAOnP,OAAQ,GAAU,CAAE/P,MAAO,KAEvDgQ,QAAS,GAAIhD,SAASkS,GAAOlP,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAW,CAAEA,MAAO,KAE7FiQ,MAAO,GAAIjD,SAASkS,GAAOjP,MAAO,SAAAlR,GAAK,UAAQswB,QAAQo0B,GAAmB1kD,KAAK,CAAEiB,MAAO,MChNpF,GAAM,GAAW8T,WAGjBiwC,GAAY,IAAI,GAAS,CAC7BzjD,IAAK,GAASoT,SAASoB,cACvB9U,MAAO,GAAS0T,SAASoB,cACzBuJ,UAAW,IAAI9c,IAAI,CACjB,CAAC,eAAgB,WACjB,CAAC,yBAA0B,cAC3B,CAAC,uBAAwB,WACzB,CAAC,uBAAwB,QACzB,CAAC,oBAAqB,SACtB,CAAC,8BAA+B,OAChC,CAAC,kBAAmB,cAKXyiD,GACb,CAIE3jD,OAAQ,GAAI2M,SAASkc,GAAU7oB,OAAQ,IAEvC8oB,GAAI,GAAInc,SAASkc,GAAUC,GAAI,IAE/BC,IAAK,GAAIpc,SAASkc,GAAUE,IAAK,IAEjCC,OAAQ,GAAIrc,SAASkc,GAAUG,OAAQ,IAEvCvT,EAAG,GAAI9I,SAASkc,GAAUpT,EAAG,IAE7BwT,MAAO,GAAItc,SAASkc,GAAUI,MAAO,IAErCC,OAAQ,GAAIvc,SAASkc,GAAUK,OAAQ,IAEvCC,IAAK,GAAIxc,SAASkc,GAAUM,IAAK,IAEjCC,KAAM,GAAIzc,SAASkc,GAAUO,KAAM,IAEnCC,MAAO,GAAI1c,SAASkc,GAAUQ,MAAO,IAErCC,OAAQ,GAAI3c,SAASkc,GAAUS,OAAQ,IAIvC9lB,IAAK,GAAImJ,SAASkc,GAAUrlB,IAAK,GAAY,CAAE7D,MAAO,GAAY8gD,OAAQ,KAE1E1lC,IAAK,GAAIpO,SAASkc,GAAU9N,IAAK,GAAY,CAAEpb,MAAO,GAAYghD,WAAY,KAE9Ep3B,IAAK,GAAI5c,SAASkc,GAAUU,IAAK,GAAY,CAAE5pB,MAAO,GAAYihD,WAAY,KAE9Ep3B,IAAK,GAAI7c,SAASkc,GAAUW,IAAK,GAAY,CAAE7pB,MAAO,GAAYkhD,QAAS,KAE3Ep3B,IAAK,GAAI9c,SAASkc,GAAUY,IAAK,GAAY,CAAE9pB,MAAO,GAAYkhD,QAAS,KAE3Ep+C,IAAK,GAAIkK,SAASkc,GAAUpmB,IAAK,GAAY,CAAEf,EAAG,GAAYC,EAAG,KAEjEe,IAAK,GAAIiK,SAASkc,GAAUnmB,IAAK,GAAY,CAAEhB,EAAG,GAAYC,EAAG,KAEjE+nB,IAAK,GAAI/c,SAASkc,GAAUa,IAAK,GAAY,CAAE/pB,MAAO,GAAYikD,SAAU,KAE5Ej6B,MAAO,GAAIhd,SAASkc,GAAUc,MAAO,GAAY,CAAE7nB,EAAG,GAAYsD,EAAG,KAErEwkB,MAAO,GAAIjd,SAASkc,GAAUe,MAAO,GAAY,CAAEloB,EAAG,GAAYC,EAAG,KAErEkoB,OAAQ,GAAIld,SAASkc,GAAUgB,OAAQ,GAAY,CAAE1pB,EAAG,GAAY4C,EAAG,KAEvE+mB,IAAK,GAAInd,SAASkc,GAAUiB,IAAK,GAAY,CAAEpoB,EAAG,GAAYC,EAAG,KAEjEooB,OAAQ,GAAIpd,SAASkc,GAAUkB,OAAQ,GAAY,CAAEroB,EAAG,GAAYC,EAAG,KAEvEqoB,MAAO,GAAIrd,SAASkc,GAAUmB,MAAO,GAAY,CAAEtoB,EAAG,GAAYC,EAAG,KAErEsoB,OAAQ,GAAItd,SAASkc,GAAUoB,OAAQ,GAAY,CAAEvoB,EAAG,GAAYC,EAAG,KAEvEiN,IAAK,GAAIjC,SAASkc,GAAUja,IAAK,GAAY,CAAEjP,MAAO,GAAYqL,KAAM,KAIxEuD,MAAO,GAAI5B,SAASkc,GAAUta,MAC5B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGXuqB,KAAM,GAAIvd,SAASkc,GAAUqB,KAAM,GAAY,CAAEvqB,MAAO,KAExDwqB,GAAI,GAAIxd,SAASkc,GAAUsB,GAAI,GAAY,CAAExqB,MAAO,KAEpDyqB,KAAM,GAAIzd,SAASkc,GAAUuB,KAAM,GAAY,CAAEzqB,MAAO,KAExD0qB,MAAO,GAAI1d,SAASkc,GAAUwB,MAAO,GAAY,CAAE1qB,MAAO,KAE1D2qB,KAAM,GAAI3d,SAASkc,GAAUyB,KAAM,GAAY,CAAE3qB,MAAO,KAExD4qB,GAAI,GAAI5d,SAASkc,GAAU0B,GAAI,GAAY,CAAE5qB,MAAO,KAEpD6qB,KAAM,GAAI7d,SAASkc,GAAU2B,KAAM,GAAY,CAAE7qB,MAAO,KAExDuC,MAAO,GAAIyK,SAASkc,GAAU3mB,MAAO,GAAY,CAAEvC,MAAO,KAE1DsC,IAAK,GAAI0K,SAASkc,GAAU5mB,IAAK,GAAY,CAAEtC,MAAO,KAEtD8qB,IAAK,GAAI9d,SAASkc,GAAU4B,IAAK,GAAY,CAAE9qB,MAAO,KAEtD+qB,KAAM,GAAI/d,SAASkc,GAAU6B,KAAM,GAAY,CAAE/qB,MAAO,KAExDgrB,IAAK,GAAIhe,SAASkc,GAAU8B,IAAK,GAAY,CAAEhrB,MAAO,KAEtDirB,IAAK,GAAIje,SAASkc,GAAU+B,IAAK,GAAY,CAAEjrB,MAAO,KAEtDkrB,IAAK,GAAIle,SAASkc,GAAUgC,IAAK,GAAY,CAAElrB,MAAO,KAEtDmrB,IAAK,GAAIne,SAASkc,GAAUiC,IAAK,GAAY,CAAEnrB,MAAO,KAEtDorB,KAAM,GAAIpe,SAASkc,GAAUkC,KAAM,GAAY,CAAEprB,MAAO,KAExDqrB,KAAM,GAAIre,SAASkc,GAAUmC,KAAM,GAAY,CAAErrB,MAAO,KAExDsrB,KAAM,GAAIte,SAASkc,GAAUoC,KAAM,GAAY,CAAEtrB,MAAO,KAExDurB,KAAM,GAAIve,SAASkc,GAAUqC,KAAM,GAAY,CAAEvrB,MAAO,KAExDwrB,KAAM,GAAIxe,SAASkc,GAAUsC,KAAM,GAAY,CAAExrB,MAAO,KAExDyrB,UAAW,GAAIze,SAASkc,GAAUuC,UAAW,GAAY,CAAEzrB,MAAO,KAElE0rB,QAAS,GAAI1e,SAASkc,GAAUwC,QAAS,GAAY,CAAE1rB,MAAO,KAI9D6C,MAAO,GAAImK,SAASkc,GAAUrmB,MAAO,GAAY,CAAE7C,MAAO,GAAY8C,IAAK,GAAYC,IAAK,KAE5F4oB,eAAgB,GAAI3e,SAASkc,GAAUyC,eAAgB,GAAY,CAAEu4B,KAAM,GAAYC,MAAO,GAAYC,MAAO,KAEjHx4B,KAAM,GAAI5e,SAASkc,GAAU0C,KAAM,GAAY,CAAEyY,MAAO,GAAY5jB,MAAO,GAAYC,IAAK,KAI5FzL,IAAK,GAAIjI,SAASkc,GAAUjU,IAAK,GAAY,GAAI,CAAEnS,IAAK,GAAYC,IAAK,GAAYwuB,MAAO,GAAa8yB,WAAY,KAIrHx4B,WAAY,GAAI7e,SAASkc,GAAU2C,WAAY,GAAU,CAAE7rB,MAAO,IAAc,CAAEkkD,KAAM,GAAYI,UAAW,KAE/Gx4B,OAAQ,GAAI9e,SAASkc,GAAU4C,OAAQ,GAAU,CAAE9rB,MAAO,IAAc,CAAE+L,OAAQ,GAAU4mB,OAAQ,GAAU4xB,UAAW,GAAYC,UAAW,GAAYC,YAAa,GAAaC,kBAAmB,KAEzM34B,UAAW,GAAI/e,SAASkc,GAAU6C,UAAW,GAAU,CAAE/rB,MAAO,IAAc,CAAEukD,UAAW,GAAYC,UAAW,GAAYE,kBAAmB,KAEjJ14B,YAAa,GAAIhf,SAASkc,GAAU8C,YAAa,GAAMzf,SAAS,IAAa,CAAEvM,MAAO,KAItFkP,QAAS,GAAIlC,SAASkc,GAAUha,QAAS,GAAa,CAAElP,MAAO,KAE/DisB,OAAQ,GAAIjf,SAASkc,GAAU+C,OAAQ,GAAa,CAAEjsB,MAAO,IAAc,CAAEoC,QAAS,KAEtFiN,QAAS,GAAIrC,SAASkc,GAAU7Z,QAAS,GAAa,CAAErP,MAAO,GAAYqL,KAAM,IAAc,CAAEjJ,QAAS,KAE1GkN,WAAY,GAAItC,SAASkc,GAAU5Z,WAAY,GAAa,CAAEtP,MAAO,GAAYqL,KAAM,IAAc,CAAEjJ,QAAS,KAEhHoU,OAAQ,GAAIxJ,SAASkc,GAAU1S,OAAQ,GAAa,CAAExW,MAAO,GAAYqL,KAAM,KAE/EoL,cAAe,GAAIzJ,SAASkc,GAAUzS,cAAe,GAAa,CAAEzW,MAAO,GAAYqL,KAAM,KAE7FqL,UAAW,GAAI1J,SAASkc,GAAUxS,UAAW,GAAa,CAAE1W,MAAO,GAAYqL,KAAM,KAErFsL,iBAAkB,GAAI3J,SAASkc,GAAUvS,iBAAkB,GAAa,CAAE3W,MAAO,GAAYqL,KAAM,KAEnG6gB,UAAW,GAAIlf,SAASkc,GAAUgD,UAAW,GAAa,CAAElsB,MAAO,GAAY8C,IAAK,GAAYC,IAAK,IAAc,CAAE4hD,aAAc,GAAaC,aAAc,KAE9J1iD,QAAS,GAAI8K,SAASkc,GAAUhnB,QAAS,GAAa,CAAElC,MAAO,IAAc,CAAEoC,QAAS,KAExF+pB,UAAW,GAAInf,SAASkc,GAAUiD,UAAW,GAAa,CAAEnsB,MAAO,IAAc,CAAEoC,QAAS,KAE5FgqB,WAAY,GAAIpf,SAASkc,GAAUkD,WAAY,GAAa,CAAEpsB,MAAO,KAErEqsB,WAAY,GAAIrf,SAASkc,GAAUmD,WAAY,GAAa,CAAErsB,MAAO,KAErEssB,YAAa,GAAItf,SAASkc,GAAUoD,YAAa,GAAa,CAAEtsB,MAAO,GAAY6iD,GAAI,IAAc,CAAEzgD,QAAS,KAEhHmqB,WAAY,GAAIvf,SAASkc,GAAUqD,WACjC,GACA,CAAEvsB,MAAO,GAAY6lB,OAAQk+B,GAAW14C,KAAM,KAKhDkE,MAAO,GAAIvC,SAASkc,GAAU3Z,MAAO,GAAS,CAAEvP,MAAO,KAEvDwP,UAAW,GAAIxC,SAASkc,GAAU1Z,UAAW,GAAa,CAAExP,MAAO,KAEnEyP,QAAS,GAAIzC,SAASkc,GAAUzZ,QAAS,GAAW,CAAEzP,MAAO,KAE7D0P,OAAQ,GAAI1C,SAASkc,GAAUxZ,OAAQ,GAAU,CAAE1P,MAAO,KAE1D2P,OAAQ,GAAI3C,SAASkc,GAAUvZ,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAa,CAAEA,MAAO,KAE9F4P,MAAO,GAAI5C,SAASkc,GAAUtZ,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAa,CAAEA,MAAO,KAE3F6P,SAAU,GAAI7C,SAASkc,GAAUrZ,SAAU,SAAA9Q,GAAK,OAAAA,EAAEiB,OAAS,IAAY,CAAEA,MAAO,KAEhF8P,SAAU,GAAI9C,SAASkc,GAAUpZ,SAAU,GAAY,CAAE9P,MAAO,KAEhE+P,OAAQ,GAAI/C,SAASkc,GAAUnZ,OAAQ,GAAU,CAAE/P,MAAO,KAE1DgQ,QAAS,GAAIhD,SAASkc,GAAUlZ,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAc,CAAEA,MAAO,KAEnGiQ,MAAO,GAAIjD,SAASkc,GAAUjZ,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAa,CAAEA,MAAO,M,6SC/MvF,GAAM,GAAW8T,WACjB+wC,GAAc,SAAC9lD,GAAuB,OAAAA,EAAE0B,QAAU,IAE3CqkD,GACb,CAIEzkD,OAAQ,GAAI2M,SAASmV,GAAU9hB,OAC7BwkD,IAKFj2C,MAAO,GAAI5B,SAASmV,GAAUvT,MAC5B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGXqf,IAAK,GAAIrS,SAASmV,GAAU9C,IAC1B,GACA,CAAE5e,OAAQokD,GAAavkD,IAAK,KAG9BV,IAAK,GAAIoN,SAASmV,GAAUviB,IAC1B,GACA,CAAEa,OAAQokD,GAAavkD,IAAK,KAG9B6L,IAAK,GAAIa,SAASmV,GAAUhW,IAC1B04C,GACA,CAAEpkD,OAAQokD,GAAavkD,IAAK,GAAUN,MAAO,IAC7C,GACA,CAAE4jD,cAAe,KAGnBtkC,OAAQ,GAAItS,SAASmV,GAAU7C,OAC7B,GACA,CAAE7e,OAAQokD,GAAavkD,IAAK,KAG9B2O,IAAK,GAAIjC,SAASmV,GAAUlT,IAC1B,GACA,CAAEjP,MAAO,GAAYqL,KAAM,KAG7B0G,KAAM,GAAI/E,SAASmV,GAAUpQ,KAC3B8yC,GACA,CAAEpkD,OAAQokD,KAGZ9wC,MAAO,GAAI/G,SAASmV,GAAUpO,MAC5B,SAAChV,G,QACOqG,EAAiB,G,IAGvB,IAAoB,SAFkB,CAAC,IAAK,IAAK,IAAK,IAAK,MAEjC,8BAC1B,CADK,IAECokC,EAAYzqC,EAFF,SASd,GALIyqC,aAAqB,KAEvBA,EAAYA,EAAUr+B,WAGpBq+B,aAAqB,GACzB,CACE,IAAMub,EAAavb,EAAUlhC,QAAQlD,MAErC,IAAK,IAAMC,KAAQ0/C,EACnB,CACE,IAAMC,EAAYD,EAAW1/C,GAI3BD,EAAMC,GAFJA,KAAQD,GAAS4/C,aAAqB,GAE1B,GAAMriC,UAAU,CAACqiC,EAAW5/C,EAAMC,KAIlC2/C,K,iGAMtB,OAAO,IAAI,GAAW,CAAE5/C,MAAK,KAE/B,CAAErD,EAAG,GAAYC,EAAG,IACpB,CAAE5C,EAAG,GAAYC,EAAG,GAAYyW,EAAG,KAKrC5G,QAAS,GAAIlC,SAASmV,GAAUjT,QAC9B,GACA,CAAElP,MAAO,KAGXqP,QAAS,GAAIrC,SAASmV,GAAU9S,QAC9B,GACA,CAAErP,MAAO,GAAYqL,KAAM,KAG7BiE,WAAY,GAAItC,SAASmV,GAAU7S,WACjC,GACA,CAAEtP,MAAO,GAAYqL,KAAM,KAG7BmL,OAAQ,GAAIxJ,SAASmV,GAAU3L,OAC7B,GACA,CAAExW,MAAO,GAAYqL,KAAM,KAG7BoL,cAAe,GAAIzJ,SAASmV,GAAU1L,cACpC,GACA,CAAEzW,MAAO,GAAYqL,KAAM,KAG7BqL,UAAW,GAAI1J,SAASmV,GAAUzL,UAChC,GACA,CAAE1W,MAAO,GAAYqL,KAAM,KAG7BsL,iBAAkB,GAAI3J,SAASmV,GAAUxL,iBACvC,GACA,CAAE3W,MAAO,GAAYqL,KAAM,KAK7BkE,MAAO,GAAIvC,SAASmV,GAAU5S,MAAO,GAAS,CAAEvP,MAAO,KAEvDwP,UAAW,GAAIxC,SAASmV,GAAU3S,UAAW,GAAa,CAAExP,MAAO,KAEnEyP,QAAS,GAAIzC,SAASmV,GAAU1S,QAAS,GAAW,CAAEzP,MAAO,KAE7D0P,OAAQ,GAAI1C,SAASmV,GAAUzS,OAAQ,GAAU,CAAE1P,MAAO,KAE1D2P,OAAQ,GAAI3C,SAASmV,GAAUxS,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAa,CAAEA,MAAO,KAE9F4P,MAAO,GAAI5C,SAASmV,GAAUvS,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAa,CAAEA,MAAO,KAE3F6P,SAAU,GAAI7C,SAASmV,GAAUtS,SAAU,GAAY,CAAE7P,MAAO,KAEhE8P,SAAU,GAAI9C,SAASmV,GAAUrS,SAAU,SAAA/Q,GAAK,OAAAA,EAAEiB,OAAS,IAAY,CAAEA,MAAO,KAEhF+P,OAAQ,GAAI/C,SAASmV,GAAUpS,OAAQ,GAAU,CAAE/P,MAAO,KAE1DgQ,QAAS,GAAIhD,SAASmV,GAAUnS,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAc,CAAEA,MAAO,KAEnGiQ,MAAO,GAAIjD,SAASmV,GAAUlS,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAa,CAAEA,MAAO,MCxJvF,GAAM,GAAQ8T,WAEdmxC,GAAa,SAAC94C,GAAe,OAAAA,aAAe,GAAUA,OAAMtH,GAC5DqgD,GAAW,SAACnmD,GAAoB,OAAAkmD,GAAWlmD,EAAEoN,MAAQ,IACrDg5C,GAAgB,SAACpmD,GAAoB,OAAAkmD,GAAWlmD,EAAEoN,KAAOpN,EAAEoN,IAAI7D,QAAQtI,MAAQ,IAC/EolD,GAAyB,CAAEj5C,IAAK+4C,GAAUllD,MAAOmlD,IAEjDE,GAAgB,SAACtmD,GAAsB,OAAAkmD,GAAWlmD,EAAEiB,QAAU,IAC9DslD,GAAqB,SAACvmD,GAAsB,OAAAkmD,GAAWlmD,EAAEiB,OAASjB,EAAEiB,MAAMsI,QAAQtI,MAAQ,IAEnFulD,GACb,CAIEllD,OAAQ,GAAI2M,SAASk4B,GAAO7kC,OAAQ,IAEpC8e,WAAY,GAAInS,SAASk4B,GAAO/lB,WAC9B+lC,GACA,CAAE/4C,IAAK+4C,KAGT9lC,UAAW,GAAIpS,SAASk4B,GAAO9lB,UAC7B,SAAArgB,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KACjC,CAAEA,MAAO,SAAAjB,GAAK,OAAAA,EAAEiB,OAAS,MAK3B4O,MAAO,GAAI5B,SAASk4B,GAAOt2B,MACzB,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGX6D,IAAK,GAAImJ,SAASk4B,GAAOrhC,IACvBqhD,GACA,CAAE/4C,IAAK+4C,GAAUllD,MAAOmlD,KAG1B9lC,IAAK,GAAIrS,SAASk4B,GAAO7lB,IACvB,GACA,CAAElT,IAAK+4C,GAAUllD,MAAOmlD,KAG1B7lC,OAAQ,GAAItS,SAASk4B,GAAO5lB,OAC1B,GACA,CAAEnT,IAAK+4C,GAAUllD,MAAOmlD,KAG1B/mC,OAAQ,GAAIpR,SAASk4B,GAAO9mB,OAC1B,SAAArf,GAAK,UAASswB,QAAQ81B,GAAcpmD,KACpC,CAAEoN,IAAK+4C,KAGTzlC,MAAO,GAAIzS,SAASk4B,GAAOzlB,MACzBylC,GACA,CAAE/4C,IAAK+4C,KAGT78C,MAAO,GAAI2E,SAASk4B,GAAO78B,MACzB,GACA,CAAE8D,IAAK+4C,KAGTj2C,IAAK,GAAIjC,SAASk4B,GAAOj2B,IACvB,GACA,CAAEjP,MAAOqlD,GAAeh6C,KAAMg6C,KAGhCtzC,KAAM,GAAI/E,SAASk4B,GAAOnzB,KACxBmzC,GACA,CAAE/4C,IAAK+4C,IACP,CAAEhO,SAAUiO,IACZC,IAGF9hD,IAAK,GAAI0J,SAASk4B,GAAO5hC,IACvB,SAAAvE,GAAK,UAAQswB,QAAQtwB,EAAEgG,WAAaogD,GAAcpmD,KAClD,CAAEoN,IAAK+4C,IACP,CAAEngD,UAAW,SAAAhG,GAAK,OAAAA,EAAEgG,WAAaogD,GAAcpmD,KAC/CqmD,IAKFl2C,QAAS,GAAIlC,SAASk4B,GAAOh2B,QAC3B,GACA,CAAElP,MAAO,KAGXqP,QAAS,GAAIrC,SAASk4B,GAAO71B,QAC3B,GACA,CAAErP,MAAOqlD,GAAeh6C,KAAMg6C,KAGhC/1C,WAAY,GAAItC,SAASk4B,GAAO51B,WAC9B,GACA,CAAEtP,MAAOqlD,GAAeh6C,KAAMg6C,KAGhC7uC,OAAQ,GAAIxJ,SAASk4B,GAAO1uB,OAC1B,GACA,CAAExW,MAAOqlD,GAAeh6C,KAAMg6C,KAGhC5uC,cAAe,GAAIzJ,SAASk4B,GAAOzuB,cACjC,GACA,CAAEzW,MAAOqlD,GAAeh6C,KAAMg6C,KAGhC3uC,UAAW,GAAI1J,SAASk4B,GAAOxuB,UAC7B,GACA,CAAE1W,MAAOqlD,GAAeh6C,KAAMg6C,KAGhC1uC,iBAAkB,GAAI3J,SAASk4B,GAAOvuB,iBACpC,GACA,CAAE3W,MAAOqlD,GAAeh6C,KAAMg6C,KAKhC91C,MAAO,GAAIvC,SAASk4B,GAAO31B,MAAO,GAAS,CAAEvP,MAAO,KAEpDwP,UAAW,GAAIxC,SAASk4B,GAAO11B,UAAW,GAAa,CAAExP,MAAO,KAEhEyP,QAAS,GAAIzC,SAASk4B,GAAOz1B,QAAS,GAAW,CAAEzP,MAAO,KAE1D0P,OAAQ,GAAI1C,SAASk4B,GAAOx1B,OAAQ,GAAU,CAAE1P,MAAO,KAEvD2P,OAAQ,GAAI3C,SAASk4B,GAAOv1B,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQi2B,GAAmBvmD,KAAK,CAAEiB,MAAO,KAE3F4P,MAAO,GAAI5C,SAASk4B,GAAOt1B,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQi2B,GAAmBvmD,GAAIumD,GAAmBvmD,KAAK,CAAEiB,MAAO,KAE/G6P,SAAU,GAAI7C,SAASk4B,GAAOr1B,SAAU,SAAA9Q,GAAK,WAAY,CAAEiB,MAAO,KAElE8P,SAAU,GAAI9C,SAASk4B,GAAOp1B,SAAU,GAAY,CAAE9P,MAAO,KAE7D+P,OAAQ,GAAI/C,SAASk4B,GAAOn1B,OAAQ,GAAU,CAAE/P,MAAO,KAEvDgQ,QAAS,GAAIhD,SAASk4B,GAAOl1B,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAW,CAAEA,MAAO,KAE7FiQ,MAAO,GAAIjD,SAASk4B,GAAOj1B,MAAO,SAAAlR,GAAK,OAAAA,EAAEiB,OAAS,IAAS,CAAEA,MAAO,MC/IhE,GAAM,GAAS8T,WACf0xC,GAAe,GAASn2B,QAAQ,IAChCo2B,GAAiB,GAAMhlD,OAAO,CAClC+P,MAAO,GACPk1C,UAAW,GACXziD,MAAO,GACPg4B,OAAQuqB,KAIGG,GACb,CAIEtlD,OAAQ,GAAI2M,SAAS2N,GAAQta,OAAQ,IAErCua,KAAM,GAAI5N,SAAS2N,GAAQC,KAAM,IAIjChM,MAAO,GAAI5B,SAAS2N,GAAQ/L,MAC1B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGX4X,OAAQ,GAAI5K,SAAS2N,GAAQ/C,OAAQ,GAAU,CAAE5X,MAAO,GAAU4X,OAAQ,KAE1EiD,QAAS,GAAI7N,SAAS2N,GAAQE,QAAS,GAAU,CAAE7a,MAAO,GAAU6a,QAAS,KAE7EC,MAAO,GAAI9N,SAAS2N,GAAQG,MAAO,GAAU,CAAE9a,MAAO,KAEtD+a,MAAO,GAAI/N,SAAS2N,GAAQI,MAAO,GAAU,CAAE/a,MAAO,KAEtDgb,KAAM,GAAIhO,SAAS2N,GAAQK,KAAM,GAAU,CAAEhb,MAAO,GAAUwQ,MAAO,IAAc,CAAEo1C,QAAS,KAE9Fp/C,QAAS,GAAIwG,SAAS2N,GAAQnU,QAAS,GAAU,CAAExG,MAAO,GAAU8X,KAAM,GAAUtR,QAAS,KAE7FyU,OAAQ,GAAIjO,SAAS2N,GAAQM,OAAQ,GAAU,CAAEjb,MAAO,GAAUs7B,MAAO,KAEzEpgB,MAAO,GAAIlO,SAAS2N,GAAQO,MAAOsqC,GAAc,CAAExlD,MAAO,GAAU6iD,GAAI,IAAY,CAAEgD,MAAO,KAE7F1qC,MAAO,GAAInO,SAAS2N,GAAQQ,MAAOqqC,GAAc,CAAExlD,MAAO,KAE1Dob,IAAK,GAAIpO,SAAS2N,GAAQS,IAAK,GAAU,CAAEpb,MAAO,IAAY,CAAEygB,MAAO,GAAYC,IAAK,KAExFrF,QAAS,GAAIrO,SAAS2N,GAAQU,QAAS,GAAY,CAAErb,MAAO,GAAU8lD,OAAQ,IAAY,CAAErlC,MAAO,KAEnGnF,YAAa,GAAItO,SAAS2N,GAAQW,YAAa,GAAY,CAAEtb,MAAO,GAAU8lD,OAAQ,IAAY,CAAErlC,MAAO,KAE3GlF,KAAM,GAAIvO,SAAS2N,GAAQY,KAAM,GAAU,CAAEvb,MAAO,IAAY,CAAEygB,MAAO,GAAaC,IAAK,KAE3FlF,WAAY,GAAIxO,SAAS2N,GAAQa,WAAY,GAAa,CAAExb,MAAO,GAAUqL,KAAM,KAEnFoQ,SAAU,GAAIzO,SAAS2N,GAAQc,SAAU,GAAa,CAAEzb,MAAO,GAAUqL,KAAM,KAE/EqQ,QAAS,GAAI1O,SAAS2N,GAAQe,QAAS,GAAU,CAAE1b,MAAO,IAAY,CAAE+C,IAAK,GAAYD,IAAK,KAE9F6Y,UAAW,GAAI3O,SAAS2N,GAAQgB,UAAW,GAAU,CAAE3b,MAAO,KAE9D4b,SAAU,GAAI5O,SAAS2N,GAAQiB,SAAU,GAAY,CAAE5b,MAAO,GAAUqL,KAAM,KAE9E5I,OAAQ,GAAIuK,SAAS2N,GAAQlY,OAAQ,GAAY,CAAEzC,MAAO,KAE1DkR,QAAS,GAAIlE,SAAS2N,GAAQzJ,QAAS,GAAY,CAAElR,MAAO,GAAUqL,KAAM,IAAY,CAAEyT,WAAY,KAEtGjD,KAAM,GAAI7O,SAAS2N,GAAQkB,KAAM,GAAa,CAAE7b,MAAO,GAAUg7B,QAAS,IAAY,CAAElc,WAAY,KAEpGlZ,IAAK,GAAIoH,SAAS2N,GAAQ/U,IAAK,GAAU,CAAE5F,MAAO,GAAU8F,QAAS,GAAUhD,IAAK,IAAc,CAAEC,IAAK,GAAY6U,OAAQ,KAE7HkE,UAAW,GAAI9O,SAAS2N,GAAQmB,UAAW,GAAa,CAAE9b,MAAO,GAAU+lD,MAAO,IAAY,CAAEjnC,WAAY,GAAaknC,UAAW,KAEpIjqC,WAAY,GAAI/O,SAAS2N,GAAQoB,WAAYypC,GAAc,CAAExlD,MAAO,GAAU+lD,MAAO,IAAY,CAAEF,MAAO,GAAY/mC,WAAY,GAAaknC,UAAW,KAE1JhqC,WAAY,GAAIhP,SAAS2N,GAAQqB,WAAYwpC,GAAc,CAAExlD,MAAO,GAAU+lD,MAAO,IAAY,CAAEjnC,WAAY,GAAaknC,UAAW,KAEvI/pC,cAAe,GAAIjP,SAAS2N,GAAQsB,cAClC,GAASoT,QAAQo2B,IACjB,CAAEzlD,MAAO,GAAU+lD,MAAO,IAC1B,CAAEjnC,WAAY,GAAaknC,UAAW,KAGxC9pC,aAAc,GAAIlP,SAAS2N,GAAQuB,aACjC,GACA,CAAElc,MAAO,GAAU+lD,MAAO,GAAUE,YAAa,IACjD,CAAEhS,IAAK,GAAan1B,WAAY,GAAaknC,UAAW,KAG1D7pC,oBAAqB,GAAInP,SAAS2N,GAAQwB,oBACxC,GACA,CAAEnc,MAAO,GAAU+lD,MAAO,GAAUv/C,QAAS,IAC7C,CAAEytC,IAAK,GAAan1B,WAAY,GAAaknC,UAAW,IACxD,CAAE5qB,MAAOqqB,KAGXrpC,aAAc,GAAIpP,SAAS2N,GAAQyB,aAAc,GAAY,CAAEpc,MAAO,GAAU+lD,MAAO,IAAY,CAAEjnC,WAAY,GAAaknC,UAAW,KAQzI3pC,OAAQ,GAAIrP,SAAS2N,GAAQ0B,OAAQ,GAAU,CAAErc,MAAO,KAExDsc,SAAU,GAAItP,SAAS2N,GAAQ2B,SAAU,GAAU,CAAEtc,MAAO,KAE5Duc,UAAW,GAAIvP,SAAS2N,GAAQ4B,UAAW,GAAU,CAAEvc,MAAO,KAE9Dwc,UAAW,GAAIxP,SAAS2N,GAAQ6B,UAAW,GAAU,CAAExc,MAAO,KAE9Dyc,mBAAoB,GAAIzP,SAAS2N,GAAQ8B,mBAAoB,GAAU,CAAEzc,MAAO,KAEhF0c,mBAAoB,GAAI1P,SAAS2N,GAAQ+B,mBAAoB,GAAU,CAAE1c,MAAO,KAEhF2c,IAAK,GAAI3P,SAAS2N,GAAQgC,IAAK,GAAU,CAAE3c,MAAO,KAElD4c,QAAS,GAAI5P,SAAS2N,GAAQiC,QAAS,GAAU,CAAE5c,MAAO,GAAUkmD,OAAQ,KAE5ErpC,QAAS,GAAI7P,SAAS2N,GAAQkC,QAAS,GAAU,CAAE7c,MAAO,GAAUkmD,OAAQ,KAE5EppC,SAAU,GAAI9P,SAAS2N,GAAQmC,SAAU,GAAY,CAAE9c,MAAO,IAAY,CAAEmmD,aAAc,KAI1Fj3C,QAAS,GAAIlC,SAAS2N,GAAQzL,QAAS,GAAa,CAAElP,MAAO,KAE7DwC,QAAS,GAAIwK,SAAS2N,GAAQnY,QAAS,GAAa,CAAExC,MAAO,KAE7D+c,WAAY,GAAI/P,SAAS2N,GAAQoC,WAAY,GAAa,CAAE/c,MAAO,KAEnEqP,QAAS,GAAIrC,SAAS2N,GAAQtL,QAAS,GAAa,CAAEtN,EAAG,GAAUC,EAAG,IAAY,CAAE8c,WAAY,KAEhGxP,WAAY,GAAItC,SAAS2N,GAAQrL,WAAY,GAAa,CAAEvN,EAAG,GAAUC,EAAG,IAAY,CAAE8c,WAAY,KAEtGtI,OAAQ,GAAIxJ,SAAS2N,GAAQnE,OAAQ,GAAa,CAAExW,MAAO,GAAUqL,KAAM,IAAY,CAAEyT,WAAY,KAErGrI,cAAe,GAAIzJ,SAAS2N,GAAQlE,cAAe,GAAa,CAAEzW,MAAO,GAAUqL,KAAM,IAAY,CAAEyT,WAAY,KAEnHpI,UAAW,GAAI1J,SAAS2N,GAAQjE,UAAW,GAAa,CAAE1W,MAAO,GAAUqL,KAAM,IAAY,CAAEyT,WAAY,KAE3GnI,iBAAkB,GAAI3J,SAAS2N,GAAQhE,iBAAkB,GAAa,CAAE3W,MAAO,GAAUqL,KAAM,IAAY,CAAEyT,WAAY,KAEzH9B,QAAS,GAAIhQ,SAAS2N,GAAQqC,QAAS,GAAa,CAAEhd,MAAO,KAE7Did,QAAS,GAAIjQ,SAAS2N,GAAQsC,QAAS,GAAa,CAAEjd,MAAO,KAE7Dkd,OAAQ,GAAIlQ,SAAS2N,GAAQuC,OAAQ,GAAa,CAAEld,MAAO,KAI3DuP,MAAO,GAAIvC,SAAS2N,GAAQpL,MAAO,GAAS,CAAEvP,MAAO,KAErDwP,UAAW,GAAIxC,SAAS2N,GAAQnL,UAAW,GAAa,CAAExP,MAAO,KAEjEyP,QAAS,GAAIzC,SAAS2N,GAAQlL,QAAS,GAAW,CAAEzP,MAAO,KAE3D0P,OAAQ,GAAI1C,SAAS2N,GAAQjL,OAAQ,GAAU,CAAE1P,MAAO,KAExD2P,OAAQ,GAAI3C,SAAS2N,GAAQhL,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAW,CAAEA,MAAO,KAE1F4P,MAAO,GAAI5C,SAAS2N,GAAQ/K,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAW,CAAEA,MAAO,KAEvF6P,SAAU,GAAI7C,SAAS2N,GAAQ9K,SAAU,GAAY,CAAE7P,MAAO,KAE9D8P,SAAU,GAAI9C,SAAS2N,GAAQ7K,SAAU,GAAY,CAAE9P,MAAO,KAE9D+P,OAAQ,GAAI/C,SAAS2N,GAAQ5K,OAAQ,SAAAhR,GAAK,OAAAA,EAAEiB,OAAS,IAAU,CAAEA,MAAO,KAExEgQ,QAAS,GAAIhD,SAAS2N,GAAQ3K,QAAS,SAAAjR,GAAK,UAAUswB,QAAQ,CAACtwB,EAAEiB,OAAS,MAAY,CAAEA,MAAO,KAE/FiQ,MAAO,GAAIjD,SAAS2N,GAAQ1K,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAW,CAAEA,MAAO,M,6SCzKnF,GAAM,GAAU8T,WAGTsyC,GACb,CAIE/lD,OAAQ,GAAI2M,SAAS8b,GAASzoB,OAAQ,IAItCuO,MAAO,GAAI5B,SAAS8b,GAASla,MAC3B,SAAC7P,GAAM,UAAM6P,MAAM7P,EAAEiB,MAAO,KAC5B,CAAEA,MAAO,KAGXiP,IAAK,GAAIjC,SAAS8b,GAAS7Z,IAAK,GAAY,CAAEjP,MAAO,GAAWqL,KAAM,KAEtE0G,KAAM,GAAI/E,SAAS8b,GAAS/W,KAAM,GAAW,CAAE/R,MAAO,KAEtD+oB,MAAO,GAAI/b,SAAS8b,GAASC,MAC3B,SAAChqB,G,QAEK+wB,EAAmB,GACnB3nB,GAAO,E,IAEX,IAAoB,SAJkB,CAAC,IAAK,IAAK,IAAK,IAAK,MAIjC,8BAC1B,CADK,IAEGqhC,EAAYzqC,EAFJ,SAIVyqC,IAEEA,aAAqB,GAEvB1Z,EAAWA,EAAS1L,OAAOolB,EAAUlhC,SAE9BkhC,aAAqB,IAE5BrhC,GAAO,EACP2nB,EAAS9qB,KAAKwkC,EAAUlhC,QAAQgI,OAIhCwf,EAAS9qB,KAAKwkC,K,iGAKpB,OAAOrhC,EACH,GAASknB,QAAQ,GAAM1M,UAAUmN,EAAU,GAASpc,WACpD,IAAI,GAAUoc,IAEpB,CAAE/tB,EAAG,GAASC,EAAG,IACjB,CAAE5C,EAAG,GAASC,EAAG,GAASyW,EAAG,KAG/BlW,IAAK,GAAIoN,SAAS8b,GAASlpB,IAAK,GAAS,CAAEI,MAAO,GAAWwQ,MAAO,KAEpErE,IAAK,GAAIa,SAAS8b,GAAS3c,IAAK,GAAS,CAAEnM,MAAO,GAAWwQ,MAAO,GAAY61C,QAAS,KAIzFn3C,QAAS,GAAIlC,SAAS8b,GAAS5Z,QAAS,GAAa,CAAElP,MAAO,KAE9DqP,QAAS,GAAIrC,SAAS8b,GAASzZ,QAAS,GAAa,CAAErP,MAAO,GAAWqL,KAAM,KAE/EiE,WAAY,GAAItC,SAAS8b,GAASxZ,WAAY,GAAa,CAAEtP,MAAO,GAAWqL,KAAM,KAErFmL,OAAQ,GAAIxJ,SAAS8b,GAAStS,OAAQ,GAAa,CAAExW,MAAO,GAAWqL,KAAM,KAE7EoL,cAAe,GAAIzJ,SAAS8b,GAASrS,cAAe,GAAa,CAAEzW,MAAO,GAAWqL,KAAM,KAE3FqL,UAAW,GAAI1J,SAAS8b,GAASpS,UAAW,GAAa,CAAE1W,MAAO,GAAWqL,KAAM,KAEnFsL,iBAAkB,GAAI3J,SAAS8b,GAASnS,iBAAkB,GAAa,CAAE3W,MAAO,GAAWqL,KAAM,KAIjGkE,MAAO,GAAIvC,SAAS8b,GAASvZ,MAAO,GAAS,CAAEvP,MAAO,KAEtDwP,UAAW,GAAIxC,SAAS8b,GAAStZ,UAAW,GAAa,CAAExP,MAAO,KAElEyP,QAAS,GAAIzC,SAAS8b,GAASrZ,QAAS,GAAW,CAAEzP,MAAO,KAE5D0P,OAAQ,GAAI1C,SAAS8b,GAASpZ,OAAQ,GAAU,CAAE1P,MAAO,KAEzD2P,OAAQ,GAAI3C,SAAS8b,GAASnZ,OAAQ,SAAA5Q,GAAK,UAASswB,QAAQtwB,EAAEiB,OAAS,KAAY,CAAEA,MAAO,KAE5F4P,MAAO,GAAI5C,SAAS8b,GAASlZ,MAAO,SAAA7Q,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAY,CAAEA,MAAO,KAEzF6P,SAAU,GAAI7C,SAAS8b,GAASjZ,SAAU,GAAY,CAAE7P,MAAO,KAE/D8P,SAAU,GAAI9C,SAAS8b,GAAShZ,SAAU,GAAY,CAAE9P,MAAO,KAE/D+P,OAAQ,GAAI/C,SAAS8b,GAAS/Y,OAAQ,GAAU,CAAE/P,MAAO,KAEzDgQ,QAAS,GAAIhD,SAAS8b,GAAS9Y,QAAS,SAAAjR,GAAK,OAAAA,EAAEiB,OAAS,IAAW,CAAEA,MAAO,KAE5EiQ,MAAO,GAAIjD,SAAS8b,GAAS7Y,MAAO,SAAAlR,GAAK,UAAQswB,QAAQtwB,EAAEiB,OAAS,KAAY,CAAEA,MAAO,M,wkBC5F3F,cASE,WAAmBoiC,EAA0BkkB,QAAA,IAAAA,MAAA,IANrC,KAAAC,OAA0B,GAE1B,KAAAC,SAA+B,GAMrC//C,KAAK5C,IAAIu+B,GACT37B,KAAK6/C,QAAUA,EAqMnB,OAhMS,YAAAziD,IAAP,SAAW4iD,EAAoC3jB,GAE7C,GAAI7hC,EAASwlD,GAEXhgD,KAAKigD,WAAWD,EAAShkD,QAAQ2/B,QAAQqkB,GAAY3jB,OAIrD,IAAK,IAAMxiC,KAAOmmD,EAEhBhgD,KAAKigD,WAAWpmD,EAAImC,QAAQ2/B,QAAQ9hC,GAAOmmD,EAASnmD,GAIxD,OAAOmG,MAGF,YAAAigD,WAAP,SAAkBxmB,G,QAEVymB,EAAQlgD,KAAK+/C,SAAS/jD,OAASy9B,EAC/B0mB,EAAengD,KAAK+/C,SAASG,GAEnC,GAAIC,GAAgBA,EAAa1mB,OAASA,EAExC,OAAO0mB,E,IAGT,IAAsB,SAAAngD,KAAK+/C,UAAQ,8BACnC,CADK,IAAMK,EAAO,QAEhB,GAAIA,EAAQ3mB,OAASA,EAEnB,OAAO2mB,G,iGAIX,IAAMC,EAAa,CAAE5mB,KAAI,EAAEkC,QAAS,IAKpC,OAHA37B,KAAK+/C,SAASxhD,KAAK8hD,GACnBrgD,KAAKsgD,aAEED,GAGD,YAAAC,WAAR,WAEEtgD,KAAK+/C,SAASvzC,KAAK,SAAClR,EAAGC,GAAM,OAAAA,EAAEk+B,KAAOn+B,EAAEm+B,QAGlC,YAAA8mB,WAAR,SAAoB7kD,EAAWpD,GAE7B,IAAMK,EAAI+C,EAAE4c,OAAOhgB,GACbkoD,EAAUxgD,KAAK6/C,QAAQlnD,GAE7B,IAAK6nD,EAEH,OAAO,EAGD,IAAAxmC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,IAAKwmC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,UAIjC,GAFsBhlD,EAAE0D,UAAU9G,EAAGA,EAAI0hB,EAAMhe,UAEzBge,EAEpB,OAAO,EAGT,IAAM2mC,EAAsBroD,EAAImoD,EAAY7rC,QAAQoF,GAGpD,GAFuBte,EAAE0D,UAAUuhD,EAAqBA,EAAsBF,EAAYzkD,UAEnEykD,EAErB,OAAO,EAGTnoD,GAAK0hB,EAAMhe,OAEX,IAAM4kD,EAAYF,EAAU9rC,QAAQqF,GAChCkN,EAAOzrB,EAAEkZ,QAAQqF,EAAK3hB,GACtBuoD,EAAkBnlD,EAAE0D,UAAU9G,EAAG6uB,GAIrC,IAFA7uB,EAAI6uB,EAAOy5B,GAEM,IAAVz5B,GAAezrB,EAAE0D,UAAU9G,EAAGA,EAAIooD,EAAU1kD,UAAY0kD,GAE7DG,EAAUA,EAAQzhD,UAAU,EAAGyhD,EAAQ7kD,OAAS4kD,GAChDC,GAAW5mC,EACX3hB,GAAKooD,EAAU1kD,OACfmrB,EAAOzrB,EAAEkZ,QAAQqF,EAAK3hB,GACtBuoD,GAAWnlD,EAAE0D,UAAU9G,EAAG6uB,GAC1B7uB,EAAI6uB,EAAOy5B,EAGb,OAAc,IAAVz5B,GAKG,CAAC05B,EAAS15B,EAAOlN,EAAIje,SAGvB,YAAA8kD,aAAP,SAAqBtmB,EAAgBumB,GAEnC,QAFmC,IAAAA,OAAA,GAE/BvmB,KAAUx6B,KAAK8/C,OAEjB,OAAO9/C,KAAK8/C,OAAOtlB,GAOrB,IAJA,I,EAAMulB,EAAW//C,KAAK+/C,SAChBpkB,EAA0B,GAC5B/hB,EAAmB,G,WAEdthB,GAEP,IAAMkoD,EAAU,EAAKD,WAAW/lB,EAAQliC,GAExC,IAAgB,IAAZkoD,EACJ,CACQ,cAAEK,EAAA,KAAS5mC,EAAA,K,OAEjBL,GAAYinC,E,EACZvoD,EAAI2hB,EAAM,EATJ,WAgBR,IAFA,IAAI+mC,GAAmB,EAEdrkD,EAAI,EAAGA,EAAIojD,EAAS/jD,SAAWglD,EAASrkD,IACjD,CACE,IAAMyjD,EAAUL,EAAUpjD,GACpBiW,EAAe4nB,EAAOp7B,UAAW9G,EAAGA,EAAI8nD,EAAQ3mB,MAEtD,GAAI7mB,EAAK5W,SAAWokD,EAAQ3mB,KAC5B,CACE,IAAM4C,EAAY+jB,EAAQzkB,QAAS/oB,GAE/BypB,IAEFV,EAAQp9B,KAAK89B,GACb/jC,GAAK8nD,EAAQ3mB,KAAO,EACpBunB,GAAU,IAKhB,GAAIA,GAEF,GAAIpnC,EACJ,CACE,IAAM,EAAOA,EAEb+hB,EAAQ3xB,OAAO2xB,EAAQ3/B,OAAS,EAAG,EAAG,WAAM,WAC5C4d,EAAW,SAKbA,GAAY4gB,EAAOliB,OAAOhgB,G,EA9CrBA,G,OAAAA,EAAI,EAAGA,EAAIkiC,EAAOx+B,OAAQ1D,I,EAA1BA,KAAI,EAkDTshB,GAEF+hB,EAAQp9B,KAAK,WAAM,OAAAqb,IAGrB,IAAMqnC,EAAiB,SAACp3C,G,QAElBq3C,EAAoB,G,IAExB,IAAwB,SAAAvlB,GAAO,8BAC/B,CACEulB,IAAa7kB,EAFK,SAEKxyB,I,iGAGzB,OAAOq3C,GAQT,OALIH,IAEF/gD,KAAK8/C,OAAOtlB,GAAUymB,GAGjBA,GAGF,YAAAzmB,OAAP,SAAeA,EAAgB3wB,EAASk3C,GAEtC,YAFsC,IAAAA,OAAA,GAE/B/gD,KAAK8gD,aAAatmB,EAAQumB,EAA1B/gD,CAAiC6J,IAG5C,EAjNA,G,2RChBas3C,GAAa,IAAI,GAA8B,CAC1DC,EAAY,SAAC,GAAU,OAAV,QAAC,GAAchxB,WAAa,EAAK,IAC9CixB,GAAY,SAAC,G,IAAA,UAAClzB,EAAA,KAAiB,OAAZ,KAAmBjC,OAAOiC,EAAIiC,WAAa,IAC9DkxB,GAAY,SAAC,GAAU,OAAAriD,EAAV,QAAC,GAAuBmxB,WAAa,EAAG,IACrDmxB,IAAY,SAAC,G,IAAA,UAACpzB,EAAA,KAAiB,OAAZ,KAAmB/B,OAAO,GAAG+B,EAAIiC,aACpDoxB,IAAY,SAAC,G,IAAA,UAACrzB,EAAA,KAAiB,OAAZ,KAAmB/B,OAAO,GAAG+B,EAAIiC,aACpDqxB,KAAY,SAAC,G,IAAA,UAACtzB,EAAA,KAAiB,OAAZ,KAAmB/B,OAAO,GAAG+B,EAAIiC,aACpDsxB,KAAY,SAAC,G,IAAA,UAACvzB,EAAA,KAAiB,OAAZ,KAAmB/B,OAAO,GAAG+B,EAAIiC,aACpDuxB,EAAY,SAAC,GAAU,OAACrxB,GAAX,QAAC,IAA4B,EAAK,IAC/CsxB,GAAY,SAAC,G,IAAA,UAACzzB,EAAA,KAAiB,OAAZ,KAAmBjC,OAAOoE,GAAWnC,GAAO,IAC/D0zB,EAAY,SAAC,GAAU,OAAV,QAAC,GAAavzB,UAAY,IACvCwzB,GAAY,SAAC,G,IAAA,UAAC3zB,EAAA,KAAiB,OAAZ,KAAmBjC,OAAOiC,EAAIG,YACjDyzB,GAAY,SAAC,GAAU,OAAA9iD,EAAV,QAAC,GAAuBqvB,UAAW,IAChD0zB,IAAY,SAAC,GAAU,OAAAtzB,GAAV,QAAC,IAA6B,IAC3CuzB,KAAY,SAAC,G,IAAA,UAAC9zB,EAAA,KAAiB,OAAZ,KAAmBjC,OAAOwC,GAAaP,KAC1D+zB,KAAY,SAAC,GAAU,OAAAjjD,EAAUyvB,GAApB,QAAC,IAAsC,IACpD91B,EAAY,SAAC,GAAU,OAAV,QAAC,GAAaw1B,SAAW,IACtCjc,GAAY,SAAC,G,IAAA,UAACgc,EAAA,KAAiB,OAAZ,KAAmBjC,OAAOiC,EAAIC,WACjD+zB,GAAY,SAAC,G,IAAA,UAACh0B,EAAA,KAAiB,OAAZ,KAAmB9B,SAAS,GAAG8B,EAAIC,WACtDg0B,IAAY,SAAC,G,IAAA,UAACj0B,EAAA,KAAiB,OAAZ,KAAmB9B,SAAS,GAAG8B,EAAIC,WACtDi0B,KAAY,SAAC,G,IAAA,UAACl0B,EAAA,KAAiB,OAAZ,KAAmB9B,SAAS,GAAG8B,EAAIC,WACtD/e,EAAY,SAAC,GAAU,OAAAuf,GAAV,QAAC,IAA6B,IAC3C0zB,EAAY,SAAC,GAAU,OAAC1zB,GAAX,QAAC,IAA8B,EAAK,IACjD2zB,GAAY,SAAC,G,IAAA,UAACp0B,EAAA,KAAiB,OAAZ,KAAmBjC,OAAO0C,GAAaT,KAC1Dq0B,GAAY,SAAC,G,IAAA,UAACr0B,EAAA,KAAiB,OAAZ,KAAmBjC,OAAO0C,GAAaT,GAAO,IACjEs0B,EAAY,SAAC,GAAU,OAAA3zB,GAAV,QAAC,IAA8B,IAC5C4zB,GAAY,SAAC,G,IAAA,UAACv0B,EAAA,KAAiB,OAAZ,KAAmBjC,OAAO4C,GAAcX,KAC3Dw0B,GAAY,SAAC,GAAU,OAAA1jD,EAAU6vB,GAApB,QAAC,IAAuC,IACrD8zB,EAAY,SAAC,GAAU,OAAAlzB,GAAV,QAAC,IAAiC,IAC/CmzB,GAAY,SAAC,G,IAAA,UAAC10B,EAAA,KAAiB,OAAZ,KAAmBjC,OAAOwD,GAAiBvB,KAC9D20B,GAAY,SAAC,GAAU,OAAA7jD,EAAUywB,GAApB,QAAC,IAA0C,IACxDqzB,EAAY,SAAC,GAAU,OAAV,QAAC,GAAavyB,cAAgB,IAC3CwyB,GAAY,SAAC,GAAU,OAAA/jD,EAAV,QAAC,GAAuBuxB,cAAgB,IAAK,IAC1DyyB,KAAY,SAAC,GAAU,OAAAhkD,EAAV,QAAC,GAAuBuxB,cAAe,EAAG,KACvD0yB,GAAY,SAAC,GAAU,OAAAjkD,EAAV,QAAC,GAAuBuxB,cAAgB,IAAK,IAC1D2yB,KAAY,SAAC,GAAU,OAAAlkD,EAAV,QAAC,GAAuBuxB,cAAe,EAAG,KACvD4yB,GAAY,SAAC,GAAU,OAAAnkD,EAAV,QAAC,GAAuBuxB,cAAgB,IAAK,IAC1D6yB,KAAY,SAAC,GAAU,OAAApkD,EAAV,QAAC,GAAuBuxB,cAAe,EAAG,KACvDl1B,EAAY,SAAC,G,IAAA,UAAC6yB,EAAA,KAAKm1B,EAAA,KAAY,OAAAn1B,EAAID,WAAa,GAAKo1B,EAAOh4B,GAAKg4B,EAAO/3B,IACxEg4B,EAAY,SAAC,G,IAAA,UAACp1B,EAAA,KAAKm1B,EAAA,KAAY,OAAAn1B,EAAID,WAAa,GAAKo1B,EAAOh4B,GAAGnU,cAAgBmsC,EAAO/3B,GAAGpU,eACzF0lB,EAAY,SAAC,GAAU,OAAV,QAAC,GAAa3O,WAAa,IACxCs1B,GAAY,SAAC,GAAU,OAAAvkD,EAAV,QAAC,GAAuBivB,WAAY,IACjDyO,EAAY,SAAC,GAAU,OAAV,QAAC,GAAezO,WAAa,IAAO,IAAM,IACvDu1B,GAAY,SAAC,GAAU,OAAAxkD,EAAV,QAAC,GAAwBivB,WAAa,IAAO,GAAI,IAC9DvxB,EAAY,SAAC,GAAU,OAAV,QAAC,GAAcuxB,WAAa,EAAK,IAC9Cw1B,GAAY,SAAC,GAAU,OAAAzkD,EAAV,QAAC,GAAuBivB,WAAa,EAAG,IACrDx1B,EAAY,SAAC,GAAU,OAAV,QAAC,GAAas1B,aAAe,IAC1C21B,GAAY,SAAC,GAAU,OAAA1kD,EAAV,QAAC,GAAuB+uB,aAAc,IACnD3zB,EAAY,SAAC,GAAU,OAAV,QAAC,GAAayzB,aAAe,IAC1C81B,GAAY,SAAC,GAAU,OAAA3kD,EAAV,QAAC,GAAuB6uB,aAAc,IACnDmP,EAAY,SAAC,GAAU,OAAAh+B,EAAV,QAAC,GAAuB2uB,kBAAmB,EAAG,IAC3Di2B,GAAY,SAAC,GAAU,OAAA5kD,EAAV,QAAC,GAAuB2uB,kBAAmB,EAAG,IAC3Dk2B,IAAY,SAAC,GAAU,OAAA7kD,EAAV,QAAC,GAAuB2uB,kBAAmB,IACxDm2B,KAAY,SAAC,GAAU,OAAA9kD,EAAV,QAAC,GAAuB2uB,kBAAmB,GAAK,KAC7Do2B,MAAY,SAAC,GAAU,OAAA/kD,EAAV,QAAC,GAAuB2uB,kBAAmB,GAAK,MAC7Dq2B,OAAY,SAAC,GAAU,OAAAhlD,EAAV,QAAC,GAAuB2uB,kBAAmB,GAAK,OAC7Ds2B,QAAY,SAAC,GAAU,OAAAjlD,EAAV,QAAC,GAAuB2uB,kBAAmB,GAAK,QAC7Du2B,SAAY,SAAC,GAAU,OAAAllD,EAAV,QAAC,GAAuB2uB,kBAAmB,GAAK,SAC7Dw2B,UAAY,SAAC,GAAU,OAAAnlD,EAAV,QAAC,GAAuB2uB,kBAAmB,GAAK,UAC7Dy2B,EAAY,SAAC,GAAU,OAAV,QAAC,GAAaC,mBAAmB,QAAS,CAACC,aAAa,UAAU9vC,MAAM,KAAK,IAC1F+vC,GAAY,SAAC,GAAU,OAAV,QAAC,GAAaF,mBAAmB,QAAS,CAACC,aAAa,SAAS9vC,MAAM,KAAK,IACzFgwC,EAAY,SAAC,GAAU,OAAAC,GAAV,QAAC,GAA2B,MACzCC,GAAY,SAAC,GAAU,OAAAD,GAAV,QAAC,GAA2B,KACzCvnB,EAAY,SAAC,G,IAAChP,EAAD,QAAC,GAAS,OAAAvyB,KAAKqoB,MAAMkK,EAAIV,UAAY,KAAQ,IAC1D/xB,EAAY,SAAC,GAAU,OAAV,QAAC,GAAa+xB,UAAY,IACvCm3B,GAAY,SAAC,G,IAAA,UAACz2B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAO93B,SAAU,CAAC2C,EAAKm1B,KAC3EwB,IAAY,SAAC,G,IAAA,UAAC32B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAO73B,UAAW,CAAC0C,EAAKm1B,KAC5EvmB,EAAY,SAAC,G,IAAA,UAAC5O,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAO53B,QAAS,CAACyC,EAAKm1B,KAC1E/qD,EAAY,SAAC,G,IAAA,UAAC41B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAO33B,QAAS,CAACwC,EAAKm1B,KAC1EyB,GAAY,SAAC,G,IAAA,UAAC52B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAO13B,SAAU,CAACuC,EAAKm1B,KAC3E0B,GAAY,SAAC,G,IAAA,UAAC72B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAOz3B,SAAU,CAACsC,EAAKm1B,KAC3E2B,IAAY,SAAC,G,IAAA,UAAC92B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAOx3B,UAAW,CAACqC,EAAKm1B,KAC5E4B,IAAY,SAAC,G,IAAA,UAAC/2B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAOv3B,UAAW,CAACoC,EAAKm1B,KAC5E6B,KAAY,SAAC,G,IAAA,UAACh3B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAOt3B,WAAY,CAACmC,EAAKm1B,KAC7E8B,KAAY,SAAC,G,IAAA,UAACj3B,EAAA,KAAKm1B,EAAA,KAAY,OAAAuB,GAAcrqB,OAAO8oB,EAAOr3B,WAAY,CAACkC,EAAKm1B,MAC5E,CACD,IAAK,CACHtpC,MAAO,IACPymC,YAAa,MACbxmC,IAAK,IACLymC,UAAW,OAEb,IAAK,CACH1mC,MAAO,IACPymC,YAAa,KACbxmC,IAAK,IACLymC,UAAW,QAITmE,GAA+C1D,GAErD,SAASuD,GAAav2B,EAAWk3B,GAE/B,IAAMtjB,EAAM/L,GAAc7H,GACpBm3B,EAAK1pD,KAAKqoB,MAAMroB,KAAKC,IAAIkmC,GAAO,KAChCwjB,EAAK3pD,KAAKC,IAAIkmC,GAAO,IAE3B,OAAQA,EAAM,EAAI,IAAM,KAAO9iC,EAAUqmD,EAAI,GAAKD,EAAWpmD,EAAUsmD,EAAI,GC3G7E,yqO7CSyC,K6CTzC,uC7CcoC,K6CdpC","file":"expangine-runtime.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"expangine-runtime\"] = factory();\n\telse\n\t\troot[\"expangine-runtime\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\r\nexport type RecordKey = string | number | symbol;\r\n\r\nexport type MapInput<K = any, V = any> = \r\n  Map<K, V> | \r\n  Array<[K, V]> | \r\n  (K extends string | number | symbol ? Record<K, V> : never);\r\n\r\nexport function isNumber(value: any): value is number \r\n{\r\n  return typeof value === 'number' && isFinite(value);\r\n}\r\n\r\nexport function isString(value: any): value is string \r\n{\r\n  return typeof value === 'string';\r\n}\r\n\r\nexport function isArray<T = any>(value: any): value is T[] \r\n{\r\n  return Array.isArray(value);\r\n}\r\n\r\nexport function isDate(value: any): value is Date\r\n{\r\n  return value instanceof Date;\r\n}\r\n\r\nexport function isMap<K, V>(value: any): value is Map<K, V>\r\n{\r\n  return value instanceof Map;\r\n}\r\n\r\nexport function isSet<V>(value: any): value is Set<V>\r\n{\r\n  return value instanceof Set;\r\n}\r\n\r\nexport function isBoolean(value: any): value is boolean \r\n{\r\n  return typeof value === 'boolean';\r\n}\r\n\r\nexport function isFunction(value: any): value is ((...args: any[]) => any) \r\n{\r\n  return typeof value === 'function';\r\n}\r\n\r\nexport function isObject(value: any): value is any \r\n{\r\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\r\n}\r\n\r\nexport function isUndefined(value: any): value is undefined \r\n{\r\n  return typeof value === 'undefined';\r\n}\r\n\r\nexport function isSameClass(a: any, b: any): boolean\r\n{\r\n  return a.constructor === b.constructor;\r\n}\r\n\r\nexport function isWhole(x: number, epsilon: number = 0.000001): boolean\r\n{\r\n  return Math.abs(x - Math.round(x)) <= epsilon;\r\n}\r\n\r\nexport function isEmpty(value: any): boolean \r\n{\r\n  if (isArray(value)) \r\n  {\r\n    return value.length === 0;\r\n  }\r\n  else if (isObject(value)) \r\n  {\r\n    for (const _prop in value) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return value === null || value === undefined;\r\n}\r\n\r\nexport function now(): number\r\n{\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function clamp(x: number, min: number, max: number): number\r\n{\r\n  return x < min ? min : x > max ? max : x;\r\n}\r\n\r\nexport function toMap<K = any, V = any>(input?: MapInput<K, V>): Map<K, V>\r\n{\r\n  if (isArray(input))\r\n  {\r\n    return new Map(input);\r\n  }\r\n  else if (isMap(input))\r\n  {\r\n    return input;\r\n  }\r\n  else if (isObject(input))\r\n  {\r\n    return new Map(objectToArray(input, (v, k) => [k, v]));\r\n  }\r\n  \r\n  return new Map();\r\n}\r\n\r\nexport function reverseMap<K, V>(map: Map<K, V>): Map<V, K>\r\n{\r\n  return new Map(Array.from(map.entries()).map(([k, v]) => [v, k]));\r\n}\r\n\r\nexport function arraySync<V, W = V>(\r\n  target: V[],\r\n  source: W[],\r\n  matches: (target: V, source: W) => boolean,\r\n  add: (target: V[], value: W) => void,\r\n  remove: (target: V[], index: number, value: V) => void,\r\n  update: (target: V[], index: number, value: V, newValue: W) => void,\r\n): V[]\r\n{\r\n  const taken = source.map(() => false);\r\n\r\n  for (let i = target.length - 1; i >= 0; i--)\r\n  {\r\n    const targetValue = target[i];\r\n    const matchIndex = source.findIndex((sourceValue) => matches(targetValue, sourceValue));\r\n\r\n    if (matchIndex !== -1)\r\n    {\r\n      update(target, i, targetValue, source[matchIndex]);\r\n\r\n      taken[matchIndex] = true;\r\n    }\r\n    else\r\n    {\r\n      remove(target, i, targetValue);\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < source.length; i++)\r\n  {\r\n    if (!taken[i])\r\n    {\r\n      add(target, source[i]);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectSync<V, K extends RecordKey = string>(\r\n  target: Record<K, V>,\r\n  source: Record<K, V>,\r\n  add: (target: Record<K, V>, key: K, value: V) => void,\r\n  remove: (target: Record<K, V>, key: K, value: V) => void,\r\n  update: (target: Record<K, V>, key: K, value: V, withValue: V) => void,\r\n): Record<K, V> \r\n{\r\n for (const key in target)\r\n {\r\n   if (!(key in source))\r\n   {\r\n     remove(target, key, target[key]);\r\n   }\r\n }\r\n\r\n for (const key in source)\r\n {\r\n   if (key in target)\r\n   {\r\n     update(target, key, target[key], source[key]);\r\n   }\r\n   else\r\n   {\r\n     add(target, key, source[key]);\r\n   }\r\n }\r\n\r\n  return target;\r\n}\r\n\r\nexport function objectMap<R, V, K extends RecordKey = string, J extends RecordKey = K>(\r\n  map: Record<K, V>, \r\n  getValue: (value: V, key: K) => R, \r\n  getKey: (key: K, value: V) => J = ((key) => key as unknown as J) ): Record<J, R> \r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out[getKey(key, value)] = getValue(value, key), out)\r\n  , Object.create(null));\r\n}\r\n\r\nexport function objectEach<V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  onEach: (value: V, key: K, map: Record<K, V>) => any): void\r\n{\r\n  return objectReduce(map, (value, key) => \r\n    onEach(value, key, map)\r\n  , undefined);\r\n}\r\n\r\nexport function objectValues<V, M = V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  transform: (value: V, key: K) => M = ((v) => v as unknown as M)): M[]\r\n{\r\n  return objectReduce(map, (value, key, out) => \r\n    (out.push(transform(value, key)), out)\r\n  , []);\r\n}\r\n\r\nexport function objectReduce<R, V, K extends RecordKey = string>(\r\n  map: Record<K, V>, \r\n  reduce: (value: V, key: K, reduced: R) => R, \r\n  initial: R): R\r\n{\r\n  for (const key in map)\r\n  {\r\n    initial = reduce(map[key], key, initial);\r\n  }\r\n\r\n  return initial;\r\n}\r\n\r\nexport function objectFromProps<P extends string, V>(props: P[], getValue: (prop: P, index: number) => V): Record<P, V>\r\n{\r\n  const out = Object.create(null) as Record<P, V>;\r\n\r\n  for (let i = 0; i < props.length; i++)\r\n  {\r\n    const prop = props[i];\r\n\r\n    out[prop] = getValue(prop, i);\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nexport function objectToArray<K extends RecordKey, V, T>(map: Record<K, V>, getItem: (value: V, key: K) => T): T[]\r\n{\r\n  const arr: T[] = [];\r\n\r\n  for (const key in map)\r\n  {\r\n    arr.push(getItem(map[key], key));\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\n\r\nexport function coalesce<T>(x?: T, y?: T): T\r\n{\r\n  return x === undefined ? y : x;\r\n}\r\n\r\nexport function padNumber(x: number, length: number, first: number = length)\r\n{\r\n  return pad(x + '', length, '0', true).substring( 0, first );\r\n}\r\n\r\nexport function pad(x: string, length: number, padding: string, before: boolean): string\r\n{\r\n  while (x.length < length)\r\n  {\r\n    before ? x = padding + x : x = x + padding;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\nexport function toString(x: any)\r\n{\r\n  return isArray(x) || isObject(x)\r\n    ? JSON.stringify(x)\r\n    : x + '';\r\n}","import { isFunction } from './fns';\r\n\r\n\r\nexport type TraverseStep = string | number;\r\n\r\nexport type TraverseCallback<T, R> = (value: T, stack: T[], path: TraverseStep[], traverser: Traverser<T, R>) => any;\r\n\r\nexport type TraverseRemove = () => void;\r\n\r\nexport const TraverseRemoveNoop: TraverseRemove = () => {};\r\n\r\nexport type TraverseReplace<T> = (replaceWith: T) => void;\r\n\r\nexport const TraverseReplaceNoop: TraverseReplace<any> = () => {};\r\n\r\nexport interface Traversable<T>\r\n{\r\n  traverse<R>(traverse: Traverser<T, R>): R;\r\n}\r\n\r\nexport interface TraverseResult<T>\r\n{\r\n  value: T;\r\n  stack: T[];\r\n  path: TraverseStep[];\r\n}\r\n\r\nexport class Traverser<T, R = any>\r\n{\r\n\r\n  public static isTraversable<T>(x: any): x is Traversable<T>\r\n  {\r\n    return x && isFunction(x.traverse);\r\n  }\r\n\r\n  public callback: TraverseCallback<T, R>;\r\n  public stack: T[];\r\n  public path: TraverseStep[];\r\n  public result: R;\r\n  public stopped: boolean;\r\n  public remove: TraverseRemove = TraverseRemoveNoop;\r\n  public replace: TraverseReplace<T> = TraverseReplaceNoop;\r\n\r\n  public constructor(callback: TraverseCallback<T, R>, initialResult?: R)\r\n  {\r\n    this.callback = callback;\r\n    this.stack = [];\r\n    this.path = [];\r\n    this.stopped = false;\r\n    this.result = initialResult;\r\n  }\r\n\r\n  public enter(value: T, getInner?: () => any): R\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this.result;\r\n    }\r\n    \r\n    this.callback(value, this.stack, this.path, this);\r\n\r\n    this.remove = TraverseRemoveNoop;\r\n    this.replace = TraverseReplaceNoop;\r\n\r\n    if (getInner && !this.stopped)\r\n    {\r\n      this.stack.push(value);\r\n\r\n      getInner();\r\n\r\n      this.stack.pop();\r\n    }\r\n\r\n    return this.result;\r\n  }\r\n\r\n  public step(step: TraverseStep, getStep: Traversable<T> | (() => any), replace: TraverseReplace<T> = TraverseReplaceNoop, remove: TraverseRemove = TraverseRemoveNoop): this\r\n  {\r\n    if (this.stopped)\r\n    {\r\n      return this;\r\n    }\r\n\r\n    this.path.push(step);\r\n\r\n    this.remove = remove;\r\n    this.replace = replace;\r\n\r\n    if (Traverser.isTraversable<T>(getStep))\r\n    {\r\n      getStep.traverse(this);\r\n    }\r\n    else\r\n    {\r\n      getStep();\r\n    }\r\n\r\n    this.path.pop();\r\n\r\n    return this;\r\n  }\r\n\r\n  public modify(getResult: (result: R) => R | undefined): this\r\n  {\r\n    const newResult = getResult(this.result);\r\n\r\n    if (newResult !== undefined)\r\n    {\r\n      this.result = newResult;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public stop(result?: R): this\r\n  {\r\n    this.result = result;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getResult(): R\r\n  {\r\n    return this.result;\r\n  }\r\n\r\n  public removeOrReplace(replaceWith: T | (() => T)): boolean\r\n  {\r\n    const remove = this.canRemove();\r\n    const replace = this.canReplace();\r\n\r\n    if (!remove && !replace) {\r\n      return false;\r\n    }\r\n\r\n    remove\r\n      ? this.remove()\r\n      : this.replace(isFunction(replaceWith) ? replaceWith() : replaceWith);\r\n\r\n    return true;\r\n  }\r\n\r\n  public canRemove(): boolean\r\n  {\r\n    return this.remove !== TraverseRemoveNoop;\r\n  }\r\n\r\n  public canReplace(): boolean\r\n  {\r\n    return this.replace !== TraverseReplaceNoop;\r\n  }\r\n\r\n  public filterClass(construct: { new (...args: any[]): T }, initialResult: R = this.result): Traverser<T, R>\r\n  {\r\n    return this.filter((value: T) => value.constructor === construct, initialResult);\r\n  }\r\n\r\n  public filter(pass: (value: T, stack: T[], path: TraverseStep[]) => any, initialResult: R = this.result)\r\n  {\r\n    const callback: TraverseCallback<T, R> = (value, stack, path, traverser) => {\r\n      if (pass(value, stack, path)) {\r\n        this.callback(value, stack, path, traverser);\r\n      }\r\n    };\r\n\r\n    return new Traverser<T, R>(callback, initialResult);\r\n  }\r\n\r\n  public static list<T>(): Traverser<T, TraverseResult<T>[]>\r\n  {\r\n    const list: TraverseResult<T>[] = [];\r\n\r\n    return new Traverser((value, stack, path) => {\r\n      list.push({\r\n        value,\r\n        stack: stack.slice(),\r\n        path: path.slice(),\r\n      });\r\n    }, list);\r\n  }\r\n\r\n  public static count<T>(): Traverser<T, number>\r\n  {\r\n    return new Traverser((value, stack, path, traverser) => traverser.result++, 0);\r\n  }\r\n\r\n}","import { Expression } from './Expression';\r\nimport { Type } from './Type';\r\n\r\n\r\n\r\nexport enum ValidationSeverity \r\n{\r\n  LOW = 1,\r\n  MEDIUM = 2,\r\n  HIGH = 3,\r\n}\r\n\r\nexport enum ValidationType \r\n{\r\n  UNSAFE_OPERATION = 1,       // LOW\r\n  POSSIBLY_NULL = 2,          // MEDIUM\r\n  INCOMPATIBLE_TYPES = 3,     // HIGH\r\n  INVALID_EXPRESSION = 4,     // HIGH\r\n  MISSING_FUNCTION = 5,       // HiGH\r\n  MISSING_EXPRESSION = 6,     // HiGH\r\n  MISSING_OPERATION = 7,      // HiGH\r\n  MISSING_TYPE_NAME = 8,      // HIGH\r\n  MISSING_TYPE = 9,           // HIGH\r\n  MISSING_RELATION_NAME = 10, // HIGH\r\n  MISSING_RELATION = 11,      // HIGH\r\n  MISSING_DATA_NAME = 12,     // HIGH\r\n  MISSING_DATA = 13,          // HIGH\r\n  OUTSIDE_PATH = 14,          // HIGH\r\n  READONLY = 15,              // HIGH\r\n  EMPTY_PATH = 16,            // HIGH\r\n  INVALID_THIS = 17,          // HIGH\r\n  MISSING_METHOD = 18,        // HIGH\r\n}\r\n\r\nexport interface Validation \r\n{\r\n  type: ValidationType;\r\n  severity: ValidationSeverity;\r\n  context: Type;\r\n  subject?: Expression;\r\n  parent?: Expression;\r\n  expected?: Type;\r\n  actual?: Type;\r\n}\r\n\r\nexport type ValidationHandler = (validation: Validation) => void;","\r\nimport { isSameClass } from './fns';\r\nimport { Operations, OperationGeneric } from './Operation';\r\nimport { Expression } from './Expression';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traverser, Traversable, TraverseStep } from './Traverser';\r\nimport { Computeds } from './Computed';\r\nimport { ReferenceData } from './ReferenceData';\r\n\r\n\r\n\r\nexport type TypeInput = TypeClass | Type;\r\n\r\nexport type TypeInputMap = Record<string, TypeInput>;\r\n\r\nexport type TypeMap = Record<string, Type>;\r\n\r\nexport interface TypeSub \r\n{ \r\n  key: string | number | Type;\r\n  value: Type;\r\n}\r\n\r\nexport type TypeResolved<T> = T extends (null | undefined)\r\n  ? undefined\r\n  : T extends TypeInput\r\n    ? Type\r\n    : T extends TypeInput[]\r\n      ? Type[]\r\n      : T extends TypeInputMap\r\n        ? Record<keyof T, Type>\r\n        : {\r\n          [K in keyof T]: TypeResolved<T[K]>\r\n        };\r\n\r\nexport interface TypeProvider \r\n{\r\n  getType(data: any, otherwise?: Type): Type;\r\n  getExpression(data: any): Expression;\r\n  getData(name: string): ReferenceData | null;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface TypeDescribeProvider\r\n{\r\n  describe(data: any): Type;\r\n  merge(type: Type, data: any): Type;\r\n}\r\n\r\nexport interface TypeCompatibleOptions\r\n{\r\n  strict?: boolean;\r\n  value?: boolean;\r\n  exact?: boolean;\r\n}\r\n\r\nexport interface TypeParser \r\n{\r\n  (data: any, types: TypeProvider): Type;\r\n}\r\n\r\nexport interface TypeClass<T extends Type<O> = any, O = any> \r\n{\r\n  id: string;\r\n  operations: Operations;\r\n  computeds: Computeds;\r\n  baseType: T;\r\n  decode(this: TypeClass<T>, data: any[], types: TypeProvider): T;\r\n  encode(this: TypeClass<T>, type: T): any;\r\n  describePriority: number;\r\n  describe(this: TypeClass<T>, data: any, describer: TypeDescribeProvider): Type | null;\r\n  register(this: TypeClass<T>): void;\r\n  registered: boolean;\r\n  new(options: O, ...args: any[]): T;\r\n}\r\n\r\nexport abstract class Type<O = any> implements Traversable<Type>\r\n{\r\n\r\n  public options: O;\r\n  public parent: Type = null;\r\n\r\n  public constructor(options: O) \r\n  {\r\n    this.options = options;\r\n  }\r\n\r\n  public abstract getOperations(): Record<string, OperationGeneric>;\r\n\r\n  public abstract getId(): string;\r\n\r\n  public abstract merge(type: Type<O>): void;\r\n\r\n  public abstract getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null;\r\n\r\n  public abstract getSubTypes(def: DefinitionProvider): TypeSub[];\r\n\r\n  public abstract getExactType(value: any): Type<O>;\r\n\r\n  public abstract getSimplifiedType(): Type;\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  protected abstract isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;\r\n\r\n  public isCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean\r\n  {\r\n    if (other === this)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.exact && other.isWrapper() && this.isCompatible(other.getSimplifiedType(), options))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (options.strict && !isSameClass(this, other) && !this.acceptsOtherTypes())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.isDeepCompatible(other, options);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public acceptsType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true });\r\n  }\r\n\r\n  public acceptsData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { strict: true, value: true });\r\n  }\r\n\r\n  public exactType(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true });\r\n  }\r\n\r\n  public exactData(other: Type): boolean\r\n  {\r\n    return this.isCompatible(other, { exact: true, strict: true, value: true });\r\n  }\r\n\r\n  public abstract isOptional(): boolean;\r\n\r\n  public abstract isSimple(): boolean;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Type, R>): R;\r\n\r\n  public abstract setParent(parent?: Type): void;\r\n\r\n  public abstract removeDescribedRestrictions(): void;\r\n\r\n  public abstract getCreateExpression(): Expression;\r\n\r\n  public abstract getValidateExpression(): Expression;\r\n\r\n  public abstract getCompareExpression(): Expression;\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    return newValue;\r\n  }\r\n\r\n  public getValueChangeAt(newValue: Expression): Expression\r\n  {\r\n    let node: Type = this.parent;\r\n    const path = this.getPath();\r\n\r\n    while(node)\r\n    {\r\n      const step = path.pop();\r\n\r\n      newValue = node.getValueChangeExpression(newValue, step, step);\r\n      node = node.parent;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootType().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getTypeFromPath(path: TraverseStep[]): Type | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const type = this.getTypeFromStep(path[0]);\r\n\r\n    if (!type)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return type.getTypeFromPath(path.slice(1));\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootType(): Type\r\n  {\r\n    let node: Type = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public abstract isValid(value: any): boolean;\r\n\r\n  public abstract normalize(value: any): any;\r\n\r\n  public abstract newInstance(): Type<O>;\r\n\r\n  public abstract clone(): Type<O>;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract create(): any;\r\n\r\n  public abstract random(rnd: (a: number, b: number, whole: boolean) => number): any;\r\n\r\n  public abstract fromJson(json: any): any;\r\n\r\n  public abstract toJson(value: any): any;\r\n  \r\n}","import { Type, TypeMap } from './Type';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { Traversable, Traverser, TraverseStep } from './Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity, Validation } from './Validate';\r\n\r\n\r\nexport interface ExpressionProvider \r\n{ \r\n  getExpression(value: any): Expression;\r\n  setLegacy(): void;\r\n}\r\n\r\nexport interface ExpressionClass<T extends Expression = any> \r\n{\r\n  id: string;\r\n  decode(this: ExpressionClass<T>, data: any[], exprs: ExpressionProvider): Expression;\r\n  encode(this: ExpressionClass<T>, expr: T): any;\r\n  new(...args: any[]): T;\r\n}\r\n\r\nexport type ExpressionValue = any | Expression;\r\n\r\nexport type ExpressionMap = Record<string, Expression>;\r\n\r\nexport abstract class Expression implements Traversable<Expression>\r\n{\r\n\r\n  public static THIS = 'this';\r\n\r\n  public static INSTANCE = 'instance';\r\n\r\n  public parent: Expression = null;\r\n  \r\n  public abstract getId(): string;\r\n\r\n  public abstract getScope(): TypeMap | null;\r\n\r\n  public abstract getComplexity(def: DefinitionProvider, context: Type): number;\r\n\r\n  public abstract encode(): any;\r\n\r\n  public abstract clone(): Expression;\r\n\r\n  public abstract getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null;\r\n\r\n  public abstract traverse<R>(traverse: Traverser<Expression, R>): R;\r\n\r\n  public abstract setParent(parent?: Expression): void;\r\n\r\n  public abstract validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void;\r\n  \r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public getPath(): TraverseStep[]\r\n  {\r\n    return this.getRootExpression().traverse(new Traverser((type, _, path, traverser) =>\r\n    {\r\n      if (type === this)\r\n      {\r\n        traverser.stop(path.slice());\r\n      }\r\n    }));\r\n  }\r\n\r\n  public getExpressionFromPath(path: TraverseStep[]): Expression | null\r\n  {\r\n    if (path.length === 0)\r\n    {\r\n      return this;\r\n    }\r\n    \r\n    const step = this.getExpressionFromStep(path);\r\n\r\n    if (!step || !step[1])\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const [steps, expr] = step;\r\n\r\n    return expr.getExpressionFromPath(path.slice(steps));\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getRootExpression(): Expression\r\n  {\r\n    let node: Expression = this;\r\n\r\n    while (node.parent)\r\n    {\r\n      node = node.parent;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public validations(def: DefinitionProvider, context: Type): Validation[]\r\n  {\r\n    const validations: Validation[] = [];\r\n\r\n    this.validate(def, context, x => validations.push(x));\r\n\r\n    return validations;\r\n  }\r\n\r\n  protected validateType(def: DefinitionProvider, context: Type, expectedComplex: Type, subject: Expression | null, handler: ValidationHandler, parent: Expression = this): void\r\n  {\r\n    const expected = expectedComplex ? expectedComplex.getSimplifiedType() : null;\r\n    const actualComplete = subject ? subject.getType(def, context) : null;\r\n    const actual = actualComplete ? actualComplete.getSimplifiedType() : null;\r\n    let test = actual;\r\n\r\n    if (!actual)\r\n    {\r\n      if (expected && !expected.isOptional())\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n        });\r\n      }\r\n    }\r\n    else\r\n    {\r\n      if (actual.isOptional() && !expected.isOptional())\r\n      {\r\n        test = test.getRequired();\r\n      }\r\n\r\n      if (!expected.acceptsType(test))\r\n      {\r\n        handler({\r\n          type: ValidationType.INCOMPATIBLE_TYPES,\r\n          severity: expected.isCompatible(actual)\r\n            ? ValidationSeverity.MEDIUM\r\n            : ValidationSeverity.HIGH,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n      else if (test !== actual)\r\n      {\r\n        handler({\r\n          type: ValidationType.POSSIBLY_NULL,\r\n          severity: ValidationSeverity.MEDIUM,\r\n          context,\r\n          subject,\r\n          parent,\r\n          expected,\r\n          actual,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (subject)\r\n    {\r\n      subject.validate(def, context, handler);\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeProvider } from './Type';\r\nimport { isFunction } from './fns';\r\nimport { Entity } from './Entity';\r\nimport { Relation, EntityRelation } from './Relation';\r\nimport { NamedMap } from './maps/NamedMap';\r\n\r\n\r\nexport interface OperationFlags\r\n{\r\n  complexity: number;\r\n  mutates: string[];\r\n}\r\n\r\nexport interface Operation<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never,\r\n  H extends (P | O) = never,\r\n  R extends (P | O) = never\r\n> extends OperationFlags {\r\n  id: string;\r\n  params: P[];\r\n  optional: O[];\r\n  scope: S[];\r\n  scopeDefaults: Record<S, string>;\r\n  hasScope: H[];\r\n  resultDependency: R[];\r\n}\r\n\r\nexport type OperationResolved<\r\n  P extends string, \r\n  O extends string, \r\n  S extends string, \r\n  H extends (P | O), \r\n  R extends (P | O)\r\n> = Operation<\r\n  string extends P ? never : P, \r\n  string extends O ? never : O, \r\n  string extends S ? never : S, \r\n  string extends H ? never : H extends ((string extends P ? never : P) | (string extends O ? never : O)) ? H : never, \r\n  string extends R ? never : R extends ((string extends P ? never : P) | (string extends O ? never : O)) ? R : never\r\n>;\r\n\r\nexport interface OperationTypeProvider extends TypeProvider\r\n{\r\n  getEntity(name: string): Entity | null;\r\n  getEntities(): NamedMap<Entity>;\r\n  getRelation(name: string): Relation | null;\r\n  getRelations(entityName: string): EntityRelation[];\r\n}\r\n\r\nexport type OperationTypeDynamic<I extends string> = (inputs: Partial<Record<I, Type>>, provider: OperationTypeProvider) => TypeInput;\r\n\r\nexport type OperationTypeInput<I extends string> = TypeInput | OperationTypeDynamic<I>;\r\n\r\nexport interface OperationTypes<\r\n  P extends string = never, \r\n  O extends string = never,\r\n  S extends string = never\r\n> {\r\n  returnType: OperationTypeInput<P | O>,\r\n  params: Record<P, OperationTypeInput<P | O>>;\r\n  optional: Record<O, OperationTypeInput<P | O>>;\r\n  scope: Record<S, OperationTypeInput<P | O>>;\r\n  rawTypes?: boolean;\r\n}\r\n\r\nexport type OperationGeneric = Operation<any, any, any, any, any>;\r\n\r\nexport interface OperationPair<\r\n  P extends string = any, \r\n  O extends string = any,\r\n  S extends string = any\r\n> {\r\n  op: Operation<P, O, S, any, any>;\r\n  types: OperationTypes<P, O, S>;\r\n}\r\n\r\nexport interface OperationMapping\r\n{\r\n  from: Operation<any, any, any, any, any>;\r\n  fromTypes: OperationTypes<any, any, any>;\r\n  to: Operation<any, any, any, any, any>;\r\n  toTypes: OperationTypes<any, any, any>;\r\n  mapping: Record<string, string>;\r\n  unmapped: string[];\r\n}\r\n\r\nexport function isOperationTypeFunction<I extends string>(x: OperationTypeInput<I>): x is OperationTypeDynamic<I>\r\n{\r\n  return !('baseType' in x) && isFunction(x);\r\n}\r\n\r\nexport class Operations\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, OperationGeneric>;\r\n  public types: Record<string, OperationTypes<any, any, any>>;\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.types = Object.create(null);\r\n  }\r\n\r\n  public get (id: string): OperationGeneric\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n  public getTypes (id: string): OperationTypes<any, any, any>\r\n  {\r\n    return this.types[id] || this.types[this.prefix + id];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, S extends string = never, H extends (P | O) = never, R extends (P | O) = never>(\r\n    localId: string, \r\n    flags: Partial<OperationFlags> = {},\r\n    params: P[] = [], \r\n    optional: O[] = [], \r\n    scope: S[] = [],\r\n    hasScope: H[] = [],\r\n    resultDependency: R[] = []\r\n  ) : OperationResolved<P, O, S, H, R> \r\n  {\r\n    const id = this.prefix + localId;\r\n    const mutates = flags.mutates || [];\r\n    const complexity = flags.complexity || 0;\r\n    const scopeDefaults: Record<S, string> = Object.create(null);\r\n    scope.forEach((s) => scopeDefaults[s] = s);\r\n\r\n    const op = { \r\n      id, \r\n      mutates, \r\n      complexity, \r\n      params,\r\n      optional,\r\n      scope,\r\n      scopeDefaults,\r\n      hasScope,\r\n      resultDependency\r\n    };\r\n    \r\n    this.map[id] = op;\r\n\r\n    return op as unknown as OperationResolved<P, O, S, H, R>;\r\n  }\r\n\r\n  public setTypes(\r\n    op: Operation<never, never, never, never, never>,\r\n    returnType: OperationTypeInput<never>\r\n  ) : OperationTypes<never, never, never>\r\n  public setTypes<P extends string>(\r\n    op: Operation<P, never, never, any, any>,\r\n    returnType: OperationTypeInput<P>,\r\n    params: Record<P, OperationTypeInput<P>>\r\n  ) : OperationTypes<P, never, never>\r\n  public setTypes<P extends string, O extends string>(\r\n    op: Operation<P, O, never, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, never>\r\n  public setTypes<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>,\r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>>,\r\n    optional: Record<O, OperationTypeInput<P | O>>,\r\n    scope: Record<S, OperationTypeInput<P | O>>\r\n  ) : OperationTypes<P, O, S>\r\n  public setTypes<P extends string = never, O extends string = never, S extends string = never>(\r\n    op: Operation<P, O, S, any, any>, \r\n    returnType: OperationTypeInput<P | O>,\r\n    params: Record<P, OperationTypeInput<P | O>> = Object.create(null),\r\n    optional: Record<O, OperationTypeInput<P | O>> = Object.create(null),\r\n    scope: Record<S, OperationTypeInput<P | O>> = Object.create(null)\r\n  ): OperationTypes<P, O, S> {\r\n\r\n    const types = { returnType, params, optional, scope };\r\n\r\n    this.types[op.id] = types;\r\n\r\n    return types;\r\n  }\r\n\r\n}","\r\nimport { Operation } from './Operation';\r\n\r\n\r\n\r\nexport interface Computed \r\n{\r\n  id: string;\r\n  op: string;\r\n  value: string;\r\n  params: Record<string, any>;\r\n  writeable?: {\r\n    op: string;\r\n    value: string;\r\n    newValue: string;\r\n    params: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport class Computeds\r\n{\r\n\r\n  public prefix: string;\r\n\r\n  public map: Record<string, Computed>;\r\n  public list: Computed[];\r\n\r\n  public constructor(prefix: string)\r\n  { \r\n    this.prefix = prefix;\r\n    this.map = Object.create(null);\r\n    this.list = [];\r\n  }\r\n\r\n  public set<P extends string = never, O extends string = never, V extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value?: V, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp: Computed = {\r\n      id,\r\n      op: op.id,\r\n      value: value || op.params[0],\r\n      params: params || {},\r\n    };\r\n\r\n    this.map[id] = comp;\r\n    this.list.push(comp);\r\n\r\n    return comp;\r\n  }\r\n\r\n  public setWritable<P extends string = never, O extends string = never, V extends P = never, N extends P = never>(localId: string, op: Operation<P, O, any, any, any>, value: V, newValue: N, params?: Partial<Record<P | O, any>>): Computed \r\n  {\r\n    const id = this.prefix + localId;\r\n    const comp = this.map[id];\r\n\r\n    comp.writeable = { \r\n      op: op.id,\r\n      value,\r\n      newValue,\r\n      params: params || {},\r\n    };\r\n\r\n    return comp;\r\n  }\r\n\r\n  public get (id: string): Computed\r\n  {\r\n    return this.map[id] || this.map[this.prefix + id];\r\n  }\r\n\r\n}","\r\nexport const ID = {\r\n  Entity: '@',\r\n  Any: 'any',\r\n  Boolean: 'bool',\r\n  Color: 'color',\r\n  Date: 'date',\r\n  Enum: 'enum',\r\n  Function: 'func',\r\n  List: 'list',\r\n  Many: 'many',\r\n  Not: 'not',\r\n  Map: 'map',\r\n  Null: 'null',\r\n  Number: 'num',\r\n  Object: 'obj',\r\n  Optional: '?',\r\n  Reference: 'ref',\r\n  Relation: 'rel',\r\n  Set: 'set',\r\n  Text: 'text',\r\n  Tuple: 'tuple',\r\n  Delimiter: ':',\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const BooleanOperations = new Operations(ID.Boolean + ID.Delimiter);\r\n\r\nexport const BooleanComputeds = new Computeds(ID.Boolean + ID.Delimiter);\r\n\r\nconst ops = BooleanOperations;\r\n\r\nexport const BooleanOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  and: ops.set('&', {}, ['a', 'b']),\r\n\r\n  or: ops.set('|', {}, ['a', 'b']),\r\n\r\n  xor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  not: ops.set('!', {}, ['a']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isTrue: ops.set('t?', {}, ['value']),\r\n\r\n  isFalse: ops.set('f?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\n\r\nexport type DataTypeRaw = \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\";\r\n\r\nexport interface DataTypeComparator\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  compare(a: any, b: any, compare: (a: any, b: any) => number): number | undefined;\r\n}\r\n\r\nexport interface DataTypeEquality\r\n{\r\n  priority: number;\r\n  type: DataTypeRaw;\r\n  equals(a: any, b: any, equals: (a: any, b: any) => boolean): boolean | undefined;\r\n}\r\n\r\nexport interface DataTypeCopier\r\n{\r\n  priority: number;\r\n  copy(a: any, copier: (b: any) => any, setObjectCopy: (original: any, copy: any) => void): any | undefined;\r\n}\r\n\r\nexport interface DataTypeJson<T = any>\r\n{\r\n  priority: number;\r\n  toJson(value: T, toJson: (value: any) => any): any | undefined;\r\n  fromJson(json: any, fromJson: (json: any) => any): T;\r\n}\r\n\r\nexport interface DataTypeAccessor<T = any>\r\n{\r\n  priority: number;\r\n  isValid(value: any, step: any): boolean;\r\n  set(value: T, step: any, stepValue: any): void;\r\n  get(value: T, step: any): any;\r\n}\r\n\r\nexport class DataTypeRegistry\r\n{\r\n\r\n  public static TYPES: DataTypeRaw[] = [\r\n    'boolean', 'number', 'bigint', 'string', 'symbol', 'object', 'undefined', 'function',\r\n  ];\r\n\r\n  private compareTypes: Record<DataTypeRaw, number>;\r\n  private compareMap: Record<DataTypeRaw, DataTypeComparator[]>;\r\n  private equalsMap: Record<DataTypeRaw, DataTypeEquality[]>;\r\n  private copyList: DataTypeCopier[];\r\n  private jsonList: DataTypeJson[];\r\n  private accessorList: DataTypeAccessor[];\r\n\r\n  public objectSet: <O extends object, K extends keyof O>(obj: O, prop: K, value: O[K]) => void \r\n    = (obj, prop, value) => obj[prop] = value;\r\n  public objectRemove: <O extends object, K extends keyof O>(obj: O, prop: K) => void\r\n    = (obj, prop) => delete obj[prop];\r\n  public arrayAdd: <T>(arr: T[], item: T) => void\r\n    = (arr, item) => arr.push(item);\r\n  public arrayRemove: <T>(arr: T[], index: number) => T\r\n    = (arr, index) => arr.splice(index, 1)[0];\r\n  public arraySet: <T>(arr: T[], index: number, item: T) => T\r\n    = (arr, index, item) => arr.splice(index, 1, item)[0];\r\n\r\n  public constructor()\r\n  {\r\n    this.compareTypes = this.createTypeMap((_, index) => index);\r\n    this.compareMap = this.createTypeMap(() => []);\r\n    this.equalsMap = this.createTypeMap(() => []);\r\n    this.copyList = [];\r\n    this.jsonList = [];\r\n    this.accessorList = [];\r\n  }\r\n\r\n  public compare(a: any, b: any): number\r\n  {\r\n    const comparator = (x: any, y: any): number =>\r\n    {\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return this.compareTypes[xtype] - this.compareTypes[ytype];\r\n      }\r\n\r\n      const compares = this.compareMap[xtype];\r\n\r\n      for (const compare of compares)\r\n      {\r\n        const result = compare.compare(x, y, comparator);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return x === y ? 0 : x < y ? -1 : 1;\r\n    };\r\n\r\n    return comparator(a, b);\r\n  }\r\n\r\n  public getCompare(less: number, more: number): number\r\n  {\r\n    return less === 0 && more === 0\r\n      ? 0\r\n      : less < more ? 1 : -1;\r\n  }\r\n\r\n  public addCompare(compare: DataTypeComparator): this\r\n  {\r\n    return this.addToPriorityList(this.compareMap[compare.type], compare);\r\n  }\r\n\r\n  public equals(a: any, b: any): boolean\r\n  {\r\n    const equalitor = (x: any, y: any): boolean =>\r\n    {\r\n      if (x === y)\r\n      {\r\n        return true;\r\n      }\r\n\r\n      const xtype = typeof x;\r\n      const ytype = typeof y;\r\n\r\n      if (xtype !== ytype)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const equals = this.equalsMap[xtype];\r\n\r\n      for (const equality of equals)\r\n      {\r\n        const result = equality.equals(x, y, equalitor);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    return equalitor(a, b);\r\n  }\r\n\r\n  public addEquals(equals: DataTypeEquality): this\r\n  {\r\n    return this.addToPriorityList(this.equalsMap[equals.type], equals);\r\n  }\r\n\r\n  public copy<T>(x: T, containsCycles: boolean = false): T\r\n  {\r\n    if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof x === 'object')\r\n    {\r\n      const copiers = this.copyList;\r\n\r\n      if (containsCycles)\r\n      {\r\n        const copied = new Map();\r\n  \r\n        const setObjectCopy = (original: any, copy: any) => \r\n        {\r\n          copied.set(original, copy);\r\n        };\r\n  \r\n        const copyObject = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            const existing = copied.get(a);\r\n  \r\n            if (existing !== undefined)\r\n            {\r\n              return existing;\r\n            }\r\n  \r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyObject, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyObject(x);\r\n      }\r\n      else\r\n      {\r\n        const setObjectCopy = (original: any, copy: any) => {};\r\n\r\n        const copyValue = (a: any): any =>\r\n        {\r\n          if (!a) return a;\r\n  \r\n          if (typeof a === 'object')\r\n          {\r\n            for (const copier of copiers)\r\n            {\r\n              const copierCopy = copier.copy(a, copyValue, setObjectCopy);\r\n    \r\n              if (copierCopy !== undefined)\r\n              {\r\n                return copierCopy;\r\n              }\r\n            }\r\n          }\r\n  \r\n          return a;\r\n        };\r\n  \r\n        return copyValue(x);\r\n      }\r\n\r\n      \r\n    }\r\n  \r\n    return x;\r\n  }\r\n\r\n  public addCopier(copier: DataTypeCopier): this\r\n  {\r\n    return this.addToPriorityList(this.copyList, copier);\r\n  }\r\n\r\n  public toJson<T>(value: T): any\r\n  {\r\n    if (!value) return value; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof value === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: T): any =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.toJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n\r\n        return x;\r\n      };\r\n      \r\n      return jsonObject(value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public fromJson<T>(json: any): T\r\n  {\r\n    if (!json) return json; // null, undefined, 0, '', NaN, false\r\n\r\n    if (typeof json === 'object')\r\n    {\r\n      const parsers = this.jsonList;\r\n\r\n      const jsonObject = (x: any): T =>\r\n      {\r\n        if (!x) return x; // null, undefined, 0, '', NaN, false\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n          for (const parser of parsers)\r\n          {\r\n            const result = parser.fromJson(x, jsonObject);\r\n\r\n            if (result !== undefined)\r\n            {\r\n              return result;\r\n            }\r\n          }\r\n        }\r\n        \r\n        return x;\r\n      };\r\n\r\n      return jsonObject(json);\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public addJson<T>(json: DataTypeJson<T>): this\r\n  {\r\n    return this.addToPriorityList(this.jsonList, json);\r\n  }\r\n\r\n  public get(value: any, step: any): any\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        return access.get(value, step);\r\n      }\r\n    }\r\n  }\r\n\r\n  public set(value: any, step: any, stepValue: any): boolean\r\n  {\r\n    const accessors = this.accessorList;\r\n\r\n    for (const access of accessors)\r\n    {\r\n      if (access.isValid(value, step))\r\n      {\r\n        access.set(value, step, stepValue);\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public addAccessor<T>(accessor: DataTypeAccessor<T>): this\r\n  {\r\n    return this.addToPriorityList(this.accessorList, accessor);\r\n  }\r\n\r\n  private createTypeMap<V>(create: (type: DataTypeRaw, index: number) => V): Record<DataTypeRaw, V>\r\n  {\r\n    const map: Record<DataTypeRaw, V> = Object.create(null);\r\n    \r\n    DataTypeRegistry.TYPES.forEach((type, index) => \r\n    {\r\n      map[type] = create(type, index);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  private addToPriorityList<V extends { priority: number }>(list: V[], value: V): this\r\n  {\r\n    list.push(value);\r\n    list.sort((a, b) => b.priority - a.priority);\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nexport const DataTypes = new DataTypeRegistry();","\r\nimport { isBoolean, isEmpty } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { BooleanOps, BooleanOperations, BooleanComputeds } from '../ops/BooleanOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_TRUE_PROBABILITY = 0.5;\r\n\r\nexport interface BooleanOptions \r\n{\r\n  true?: Record<string, true>;\r\n  false?: Record<string, true>;\r\n}\r\n\r\nexport class BooleanType extends Type<BooleanOptions> \r\n{\r\n\r\n  public static id = ID.Boolean;\r\n\r\n  public static operations = BooleanOperations;\r\n\r\n  public static computeds = BooleanComputeds;\r\n\r\n  public static baseType = new BooleanType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): BooleanType \r\n  {\r\n    return new BooleanType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: BooleanType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    return isBoolean(data) ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'boolean';\r\n\r\n    DataTypes.addCompare({\r\n      priority, \r\n      type,\r\n      compare: (a, b) => {\r\n        return (a ? 1 : 0) - (b ? 1 : 0);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => a === b,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return BooleanType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return BooleanType.operations.map;\r\n  }\r\n\r\n  public merge(type: BooleanType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (options.exact || options.strict)\r\n    {\r\n      return other instanceof BooleanType;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(BooleanOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (isBoolean(value))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    const asKey = value + '';\r\n\r\n    if (this.options.true && this.options.true[asKey])\r\n    {\r\n      return true;\r\n    }\r\n    \r\n    if (this.options.false && this.options.false[asKey])\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isBoolean(value))\r\n    {\r\n      const asKey = value + '';\r\n\r\n      if (this.options.true && this.options.true[asKey])\r\n      {\r\n        return true;\r\n      }\r\n      \r\n      if (this.options.false && this.options.false[asKey])\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): BooleanType\r\n  {\r\n    return new BooleanType({});\r\n  }\r\n\r\n  public clone(): BooleanType\r\n  {\r\n    return new BooleanType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return BooleanType.encode(this);\r\n  }\r\n\r\n  public create(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return rnd(0, 1, false) < RANDOM_TRUE_PROBABILITY;\r\n  }\r\n\r\n  public fromJson(json: boolean): boolean\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: boolean): boolean\r\n  {\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPR = 1;\r\n\r\nexport class NotExpression extends Expression \r\n{\r\n\r\n  public static STEP_NOT = 'not';\r\n\r\n  public static id = 'not';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NotExpression \r\n  {\r\n    const expression = exprs.getExpression(data[INDEX_EXPR]);\r\n    \r\n    return new NotExpression(expression);\r\n  }\r\n\r\n  public static encode(expr: NotExpression): any \r\n  {\r\n    const expression = expr.expression.encode();\r\n\r\n    return [this.id, expression];\r\n  }\r\n\r\n  public expression: Expression;\r\n\r\n  public constructor(expression: Expression) \r\n  {\r\n    super();\r\n    this.expression = expression;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new NotExpression(this.expression.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      traverse.step(NotExpression.STEP_NOT, this.expression, (replaceWith) => this.expression = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === NotExpression.STEP_NOT\r\n      ? [1, this.expression]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expression.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.expression, handler);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class AndExpression extends Expression \r\n{\r\n\r\n  public static id = 'and';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): AndExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new AndExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: AndExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AndExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AndExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new AndExpression(this.expressions.map(e => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n}","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const AnyOperations = new Operations(ID.Any + ID.Delimiter);\r\n\r\nexport const AnyComputeds = new Computeds(ID.Any + ID.Delimiter);\r\n\r\nconst ops = AnyOperations;\r\nconst ANY_COMPLEXITY = {\r\n  complexity: 2\r\n};\r\n\r\nexport const AnyOps = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.set('cmp', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', ANY_COMPLEXITY, ['value']),\r\n\r\n  isDefined: ops.set('isDefined', {}, ['value']),\r\n\r\n  getDefined: ops.set('getDefined', {}, ['value', 'defined'], [], ['defined'], ['defined'], ['value']),\r\n\r\n  coalesce: ops.set('coalesce', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  require: ops.set('require', {}, ['value'], [], [], [], ['value']),\r\n\r\n  ternary: ops.set('ternary', {}, ['condition', 'truthy', 'falsy'], [], [], [], ['truthy', 'falsy']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', ANY_COMPLEXITY, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n","\r\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport class NullType extends Type<null> \r\n{\r\n\r\n  public static id = ID.Null;\r\n\r\n  public static operations = new Operations(ID.Null + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Null + ID.Delimiter);\r\n\r\n  public static baseType = new NullType(null);\r\n\r\n  public static decode(data: any[]): NullType \r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public static encode(type: NullType): any \r\n  {\r\n    return this.id;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any): Type | null\r\n  {\r\n    return data === null ? this.baseType : null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NullType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NullType.operations.map;\r\n  }\r\n\r\n  public merge(type: NullType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof NullType;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.null();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.isEqual, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.null(),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null || value === undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public clone(): NullType\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NullType.encode(this);\r\n  }\r\n\r\n  public create(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public toJson(value: null): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nexport class NoExpression extends Expression \r\n{\r\n\r\n  public static id = 'noop';\r\n\r\n  public static readonly instance = new NoExpression();\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): NoExpression \r\n  {\r\n    return this.instance\r\n  }\r\n\r\n  public static encode(expr: NoExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    \r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isObject, isString } from '../fns';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyOps, AnyOperations, AnyComputeds } from '../ops/AnyOps';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nexport class AnyType extends Type \r\n{\r\n\r\n  public static id = ID.Any;\r\n\r\n  public static operations = AnyOperations;\r\n\r\n  public static computeds = AnyComputeds;\r\n\r\n  public static baseType = new AnyType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): AnyType \r\n  {\r\n    return this.baseType;\r\n  }\r\n\r\n  public static encode(type: AnyType): any \r\n  {\r\n    return this.id\r\n  }\r\n\r\n  public static describePriority: number = 8;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    if (isObject(data) && isString(data.$any))\r\n    {\r\n      return new AnyType({});\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return AnyType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return AnyType.operations.map;\r\n  }\r\n\r\n  public merge(type: AnyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public isCompatible(other: Type): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions)\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.string();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.true();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public clone(): AnyType\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return AnyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return DataTypes.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return DataTypes.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { isString } from '../fns';\r\nimport { AnyType } from '../types/Any';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_DEFINE = 1;\r\nconst INDEX_BODY = 2;\r\n\r\nexport class DefineExpression extends Expression \r\n{\r\n\r\n  public static STEP_DEFINE = 'define';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static id = 'def';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DefineExpression \r\n  {\r\n    const define = data[INDEX_DEFINE].map(([name, d]: [string, any]) => [name, exprs.getExpression(d)]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    \r\n    return new DefineExpression(define, body);\r\n  }\r\n\r\n  public static encode(expr: DefineExpression): any \r\n  {\r\n    const define = expr.define.map(([name, defined]) => [name, defined.encode()]);\r\n\r\n    return [this.id, define, expr.body.encode()];\r\n  }\r\n\r\n  public define: [string, Expression][];\r\n  public body: Expression;\r\n\r\n  public constructor(define: [string, Expression][], body: Expression) \r\n  {\r\n    super();\r\n    this.define = define;\r\n    this.body = body;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DefineExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.define.reduce((max, [name, e]) => Math.max(max, e.getComplexity(def, context)), this.body.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    const scope = {};\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = AnyType.baseType);\r\n\r\n    return scope;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DefineExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DefineExpression(this.define.map(([name, variable]) => [name, variable.clone()]), this.body.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { scope, context } = def.getContextWithScope(original);\r\n\r\n    this.define.forEach(([name, defined]) => scope[name] = defined.getType(def, context));\r\n\r\n    return this.body.getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DefineExpression.STEP_DEFINE, () =>\r\n        this.define.forEach(([name, defined], index) => \r\n          traverse.step(name, defined, (replaceWith) => this.define[index].splice(1, 1, replaceWith), () => this.define.splice(index, 1))\r\n        )\r\n      );\r\n      traverse.step(DefineExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DefineExpression.STEP_BODY\r\n      ? [1, this.body]\r\n      : steps[0] === DefineExpression.STEP_DEFINE\r\n        ? [2, this.define.filter(([name]) => name === steps[1]).map(([_, expr]) => expr)[0]]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.define.forEach(([name, defined]) => defined.setParent(this));\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const defineContext = def.getContextWithScope(context);\r\n\r\n    this.define.forEach(([name, defined]) => \r\n    {\r\n      defined.validate(def, defineContext.context, handler);\r\n\r\n      defineContext.scope[name] = defined.getType(def, defineContext.context);\r\n    });\r\n    \r\n    this.body.validate(def, defineContext.context, handler);\r\n  }\r\n\r\n  public with(name: string, value: ExpressionValue): DefineExpression\r\n  public with(defines: Record<string, ExpressionValue>): DefineExpression\r\n  public with(nameOrDefines: string | Record<string, ExpressionValue>, value?: Expression): DefineExpression\r\n  {\r\n    const append = isString(nameOrDefines)\r\n      ? { [nameOrDefines]: value }\r\n      : nameOrDefines;\r\n\r\n    for (const name in append)\r\n    {\r\n      const expr = Exprs.parse(append[name]);\r\n      const existing = this.define.find(([varName]) => varName === name);\r\n\r\n      if (existing) {\r\n        existing[1] = expr;\r\n      } else {\r\n        this.define.push([name, expr]);\r\n      }\r\n\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): DefineExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class DoExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'do';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): DoExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new DoExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: DoExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DoExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DoExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new DoExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(DoExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(DoExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === DoExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === DoExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public do(body: Expression, condition?: Expression): DoExpression\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    if (condition)\r\n    {\r\n      this.condition = condition;\r\n      this.condition.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public while(condition: Expression): DoExpression\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_CHAIN = 1;\r\n\r\nexport class ChainExpression extends Expression \r\n{\r\n\r\n  public static id = 'chain';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ChainExpression \r\n  {\r\n    const chain = data[INDEX_CHAIN].map((d: any) => exprs.getExpression(d));\r\n\r\n    return new ChainExpression(chain);\r\n  }\r\n\r\n  public static encode(expr: ChainExpression): any \r\n  {\r\n    const chain = expr.chain.map(e => e.encode());\r\n\r\n    return [this.id, chain];\r\n  }\r\n\r\n  public chain: Expression[];\r\n\r\n  public constructor(chain: Expression[]) \r\n  {\r\n    super();\r\n    this.chain = chain;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ChainExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.chain.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ChainExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ChainExpression(this.chain.map(c => c.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.chain[this.chain.length - 1].getType(def, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.chain.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.chain.splice(index, 1, replaceWith), () => this.chain.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.chain.length\r\n      ? [1, this.chain[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.chain.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.chain.forEach(subject => \r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n  public add(exprs: Expression | Expression[]): ChainExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    for (const expr of append)\r\n    {\r\n      this.chain.push(expr);\r\n      expr.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_COMMENT = 1;\r\n\r\nexport class CommentExpression extends Expression \r\n{\r\n\r\n  public static id = 'comment';\r\n\r\n  public static readonly instance = new CommentExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): CommentExpression \r\n  {\r\n    const comment = data[INDEX_COMMENT];\r\n\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static encode(expr: CommentExpression): any \r\n  {\r\n    return [this.id, expr.comment];\r\n  }\r\n\r\n  public comment: string;\r\n\r\n  public constructor(comment: string)\r\n  {\r\n    super();\r\n    this.comment = comment;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return CommentExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return CommentExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new CommentExpression(this.comment);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class GetExpression extends Expression \r\n{\r\n\r\n  public static id = 'get';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetExpression \r\n  {\r\n    if (data[INDEX_PATH])\r\n    {\r\n      const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([new GetExpression(), ...path]);\r\n    }\r\n    \r\n    return new GetExpression();\r\n  }\r\n\r\n  public static encode(expr: GetExpression): any \r\n  {\r\n    return [this.id];\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetExpression();\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return context;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { GetExpression } from './Get';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\n\r\nexport class PathExpression extends Expression \r\n{\r\n\r\n  public static id = 'path';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): PathExpression \r\n  {\r\n    const expressions = data[INDEX_PATH].map((e: any) => exprs.getExpression(e));\r\n    \r\n    return new PathExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: PathExpression): any \r\n  {\r\n    return [this.id, expr.expressions.map((e) => e.encode())];\r\n  }\r\n\r\n  public static createForLegacy(path: Expression[])\r\n  {\r\n    for (let i = path.length - 1; i >= 0; i--)\r\n    {\r\n      const node = path[i];\r\n\r\n      if (node instanceof PathExpression)\r\n      {\r\n        if (node.expressions.length === 0 || !node.expressions[0].isPathStart())\r\n        {\r\n          path.splice(i, 1, ...node.expressions);\r\n        }\r\n      }\r\n    }\r\n\r\n    return new PathExpression(path);\r\n  }\r\n\r\n  public static fromPartial(pathData: any[], exprs: ExpressionProvider)\r\n  {\r\n    const isPath = pathData[0] === PathExpression.id;\r\n    const path = isPath\r\n      ? PathExpression.decode(pathData, exprs)\r\n      : PathExpression.decode(['path', [new GetExpression(), ...pathData]], exprs);\r\n\r\n    if (isPath) {\r\n      exprs.setLegacy();\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return PathExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, node) => Math.max(max, node.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return PathExpression.encode(this);\r\n  }\r\n\r\n  public clone(): PathExpression\r\n  {\r\n    return new PathExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getPathType(this.expressions, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n    \r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const path = this.expressions;\r\n\r\n    if (path.length === 0)\r\n    {\r\n      handler({\r\n        type: ValidationType.EMPTY_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    let thisType = path[0].getType(def, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: path[0],\r\n        parent: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      path[0].validate(def, context, handler);\r\n\r\n      for (let i = 1; i < path.length; i++)\r\n      {\r\n        const node = path[i];\r\n\r\n        node.validate(def, context, handler, thisType);\r\n\r\n        thisType = node.isPathNode()\r\n          ? node.getType(def, context, thisType)\r\n          : thisType.getSubType(node, def, context);\r\n\r\n        if (!thisType)\r\n        {\r\n          handler({\r\n            type: ValidationType.INVALID_EXPRESSION,\r\n            severity: ValidationSeverity.HIGH,\r\n            context,\r\n            subject: node,\r\n            parent: this,\r\n          });\r\n          \r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isWritable(defs: DefinitionProvider)\r\n  {\r\n    return this.expressions.length > 0\r\n      ? this.expressions[this.expressions.length - 1].isPathWritable(defs)\r\n      : false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_EXPRESSION = 2;\r\n\r\nexport class ComputedExpression extends Expression \r\n{\r\n\r\n  public static STEP_EXPRESSION = 'expression';\r\n\r\n  public static id = 'comp';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider) \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    if (data[INDEX_EXPRESSION]) \r\n    {\r\n      const expression = exprs.getExpression(data[INDEX_EXPRESSION]);\r\n\r\n      exprs.setLegacy();\r\n\r\n      return PathExpression.createForLegacy([expression, new ComputedExpression(name)]);\r\n    }\r\n    \r\n    return new ComputedExpression(name);\r\n  }\r\n\r\n  public static encode(expr: ComputedExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string) \r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ComputedExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const comp = def.getComputed(this.name);\r\n\r\n    if (!comp)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    const op = def.getOperation(comp.op);    \r\n    \r\n    return op ? op.complexity : 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ComputedExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ComputedExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    return thisType ? def.getComputedReturnType(this.name, thisType) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType)\r\n    {\r\n      handler({\r\n        type: ValidationType.OUTSIDE_PATH,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      if (!def.hasComputed(thisType, this.name))\r\n      {\r\n        handler({\r\n          type: ValidationType.INVALID_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context,\r\n          subject: this,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    const comp = defs.getComputed(this.name);\r\n\r\n    return !comp || !!comp.writeable;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TextOperations = new Operations(ID.Text + ID.Delimiter);\r\n\r\nexport const TextComputeds = new Computeds(ID.Text + ID.Delimiter);\r\n\r\nconst ops = TextOperations;\r\n\r\nexport const TextOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  uuid: ops.set('uuid'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  append: ops.set('+', {}, ['value', 'append']),\r\n\r\n  prepend: ops.set('pre', {}, ['value', 'prepend']),\r\n\r\n  lower: ops.set('lo', {}, ['value']),\r\n\r\n  upper: ops.set('up', {}, ['value']),\r\n\r\n  char: ops.set('@', {}, ['value', 'index'], ['outside']),\r\n\r\n  replace: ops.set('replace', {}, ['value', 'find', 'replace']),\r\n\r\n  repeat: ops.set('repeat', {}, ['value', 'times']),\r\n\r\n  split: ops.set('split', {}, ['value', 'by'], ['limit']),\r\n\r\n  chars: ops.set('chars', {}, ['value']),\r\n\r\n  sub: ops.set('sub', {}, ['value'], ['start', 'end']),\r\n\r\n  indexOf: ops.set('i?', {}, ['value', 'search'], ['start']),\r\n\r\n  lastIndexOf: ops.set('li?', {}, ['value', 'search'], ['start']),\r\n\r\n  trim: ops.set('trim', {}, ['value'], ['start', 'end']),\r\n\r\n  startsWith: ops.set('starts', {}, ['value', 'test']),\r\n\r\n  endsWith: ops.set('ends', {}, ['value', 'test']),\r\n\r\n  soundex: ops.set('soundex', { complexity: 1 }, ['value'], ['max', 'min']),\r\n\r\n  metaphone: ops.set('metaphone', { complexity: 1 }, ['value']),\r\n\r\n  distance: ops.set('dist', { complexity: 1 }, ['value', 'test']),\r\n\r\n  length: ops.set('len', {}, ['value']),\r\n\r\n  compare: ops.set('cmp', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  like: ops.set('like', {}, ['value', 'pattern'], ['ignoreCase']),\r\n\r\n  pad: ops.set('pad', {}, ['value', 'padding', 'min'], ['max', 'append']),\r\n\r\n  regexTest: ops.set('regexTest', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexSplit: ops.set('regexSplit', {}, ['value', 'regex'], ['limit', 'ignoreCase', 'multiline']),\r\n\r\n  regexMatch: ops.set('regexMatch', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexMatchAll: ops.set('regexMatchAll', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  regexReplace: ops.set('regexReplace', {}, ['value', 'regex', 'replacement'], ['all', 'ignoreCase', 'multiline']),\r\n\r\n  regexReplaceDynamic: ops.set('regexReplaceDynamic', {}, ['value', 'regex', 'replace'], ['all', 'ignoreCase', 'multiline'], ['match'], ['replace']),\r\n\r\n  regexIndexOf: ops.set('regexIndexOf', {}, ['value', 'regex'], ['ignoreCase', 'multiline']),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.set('base64', {}, ['value']),\r\n\r\n  unbase64: ops.set('unbase64', {}, ['value']),\r\n\r\n  encodeURI: ops.set('encodeURI', {}, ['value']),\r\n\r\n  decodeURI: ops.set('decodeURI', {}, ['value']),\r\n\r\n  encodeURIComponent: ops.set('encodeURIComponent', {}, ['value']),\r\n\r\n  decodeURIComponent: ops.set('decodeURIComponent', {}, ['value']),\r\n\r\n  md5: ops.set('md5', {}, ['value']),\r\n\r\n  encrypt: ops.set('encrypt', {}, ['value', 'secret']),\r\n\r\n  decrypt: ops.set('decrypt', {}, ['value', 'secret']),\r\n\r\n  toNumber: ops.set('toNumber', {}, ['value'], ['invalidValue']),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['value']),\r\n\r\n  isNotEmpty: ops.set('n?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['a', 'b'], ['ignoreCase']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test'], ['ignoreCase']),\r\n\r\n  isLower: ops.set('lo?', {}, ['value']),\r\n\r\n  isUpper: ops.set('up?', {}, ['value']),\r\n\r\n  isUuid: ops.set('uuid?', {}, ['value']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTextComputeds.set('toUpper', TextOps.upper);\r\nTextComputeds.set('toLower', TextOps.lower);\r\nTextComputeds.set('chars', TextOps.chars);\r\nTextComputeds.set('trim', TextOps.trim);\r\nTextComputeds.set('soundex', TextOps.soundex);\r\nTextComputeds.set('metaphone', TextOps.metaphone);\r\nTextComputeds.set('base64', TextOps.base64);\r\nTextComputeds.set('unbase64', TextOps.unbase64);\r\nTextComputeds.set('encodeURI', TextOps.encodeURI);\r\nTextComputeds.set('decodeURI', TextOps.decodeURI);\r\nTextComputeds.set('encodeURIComponent', TextOps.encodeURIComponent);\r\nTextComputeds.set('decodeURIComponent', TextOps.decodeURIComponent);\r\nTextComputeds.set('md5', TextOps.md5);\r\nTextComputeds.set('toNumber', TextOps.toNumber);\r\nTextComputeds.set('isEmpty', TextOps.isEmpty);\r\nTextComputeds.set('isNotEmpty', TextOps.isNotEmpty);\r\nTextComputeds.set('isLower', TextOps.isLower);\r\nTextComputeds.set('isUpper', TextOps.isUpper);","\r\nimport { isString, isNumber, isEmpty, coalesce } from '../fns';\r\nimport { Type, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TextOps, TextOperations, TextComputeds } from '../ops/TextOps';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from './Enum';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 1;\r\nconst RANDOM_MAX = 16;\r\nconst RANDOM_CHARACTERS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-+=:.';\r\n\r\nexport interface TextOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  requireUpper?: boolean;\r\n  requireLower?: boolean;\r\n  forceUpper?: boolean;\r\n  forceLower?: boolean;\r\n  matches?: RegExp;\r\n}\r\n\r\nexport class TextType extends Type<TextOptions> \r\n{\r\n\r\n  public static id = ID.Text;\r\n\r\n  public static operations = TextOperations;\r\n\r\n  public static computeds = TextComputeds;\r\n  \r\n  public static baseType = new TextType({});\r\n\r\n  public static decode(data: any[]): TextType \r\n  {\r\n    return new TextType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: TextType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): TextOptions\r\n  {\r\n    const matches = options.matches;\r\n\r\n    if (matches) options.matches = new RegExp(matches[0], matches[1]);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: TextOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n    const matches = encoded.matches;\r\n\r\n    if (matches) encoded.matches = [matches.source, matches.flags];\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 3;\r\n  \r\n  public static describe(data: any): Type | null\r\n  {\r\n    if (!isString(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new TextType({\r\n      min: data.length,\r\n      max: data.length,\r\n      requireLower: data.toLowerCase() === data,\r\n      requireUpper: data.toUpperCase() === data\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 4;\r\n    const type: DataTypeRaw = 'string';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a.localeCompare(b);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor({\r\n      priority,\r\n      isValid: isString,\r\n      get: (x, step) => x[step],\r\n      set: (x, step, value) => x[step] = value,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TextType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TextType.operations.map;\r\n  }\r\n\r\n  public merge(type: TextType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.requireLower = o1.requireLower && o2.requireLower;\r\n    o1.requireUpper = o1.requireUpper && o2.requireUpper;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.CHAR;\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          return Types.CHAR;\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(Types.CHAR) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof TextType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax > max))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const lower = this.options.forceLower || this.options.requireUpper;\r\n      const otherLower = other.options.forceLower || other.options.requireLower;\r\n\r\n      if (lower && !otherLower)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const upper = this.options.forceUpper || this.options.requireUpper;\r\n      const otherUpper = other.options.forceUpper || other.options.requireUpper;\r\n\r\n      if (upper && !otherUpper)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const matches = this.options.matches;\r\n      const otherMatches = other.options.matches;\r\n\r\n      if (matches && (!otherMatches || otherMatches.source !== matches.source))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(TextOps.compare, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      ignoreCase: Exprs.true(),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isString(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, requireLower, requireUpper, matches, forceLower, forceUpper } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireLower && value !== value.toLowerCase() && !forceLower)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (requireUpper && value !== value.toUpperCase() && !forceUpper)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (matches && matches instanceof RegExp && !matches.test(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isString(value))\r\n    {\r\n      if (this.options.forceLower)\r\n      {\r\n        value = value.toLowerCase();\r\n      }\r\n\r\n      if (this.options.forceUpper)\r\n      {\r\n        value = value.toUpperCase();\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TextType\r\n  {\r\n    return new TextType({});\r\n  }\r\n\r\n  public clone(): TextType\r\n  {\r\n    return new TextType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TextType.encode(this);\r\n  }\r\n\r\n  public create(): string\r\n  {\r\n    return '';\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, requireLower, forceLower, requireUpper, forceUpper } = this.options;\r\n    const lower = requireLower || forceLower;\r\n    const upper = requireUpper || forceUpper;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const n = rnd(chosenMin, chosenMax + 1, true);\r\n    let out = '';\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out += RANDOM_CHARACTERS.charAt(rnd(0, RANDOM_CHARACTERS.length, true));\r\n    }\r\n\r\n    if (lower) out = out.toLowerCase();\r\n    if (upper) out = out.toUpperCase();\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: string): string\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: string): string\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const MapOperations = new Operations(ID.Map + ID.Delimiter);\r\n\r\nexport const MapComputeds = new Computeds(ID.Map + ID.Delimiter);\r\n\r\nconst ops = MapOperations;\r\n\r\nexport const MapOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['map'], [], [], [], ['map']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], ['key'],  [], [], ['value', 'key']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  get: ops.set('get', {}, ['map', 'key'], [], [], [], ['map']),\r\n\r\n  set: ops.set('set', { mutates: ['map'] }, ['map', 'key', 'value'], [], ['existingValue'], ['value'], ['map']),\r\n\r\n  has: ops.set('has', {}, ['map', 'key']),\r\n\r\n  delete: ops.set('delete', { mutates: ['map'] }, ['map', 'key']),\r\n\r\n  keys: ops.set('keys', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  entries: ops.set('entries', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  pairs: ops.set('pairs', { complexity: 1 }, ['map'], [], [], [], ['map']),\r\n\r\n  clear: ops.set('clear', { mutates: ['map'] }, ['map'], [], [], [], ['map']),\r\n\r\n  count: ops.set('count', { }, ['map']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['map'], ['deepCopy', 'deepCopyKey'], ['map', 'key', 'value'], ['deepCopy', 'deepCopyKey'], ['map']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['map'], ['transform', 'transformKey'], ['map', 'key', 'value'], ['transform', 'transformKey'], ['map']),\r\n\r\n  toPlainObject: ops.set('plain', { complexity: 1 }, ['map']),\r\n\r\n  fromPlainObject: ops.set('fromPlain', { complexity: 1 }, ['object'], [], [], [], ['object']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test', 'isEqual'], [], ['key', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['key', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nMapComputeds.set('copy', MapOps.copy);\r\nMapComputeds.set('keys', MapOps.keys);\r\nMapComputeds.set('values', MapOps.values);\r\nMapComputeds.set('entries', MapOps.entries);\r\nMapComputeds.set('pairs', MapOps.pairs);\r\nMapComputeds.set('count', MapOps.count);","\r\nimport { Type, TypeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { TextType } from './Text';\r\nimport { Expression } from '../Expression';\r\nimport { Exprs } from '../Exprs';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { MapOps } from '../ops/MapOps';\r\nimport { Types } from '../Types';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_KEY = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CONSTANTS = 3;\r\n\r\nexport interface EnumOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n  constants: Map<any, any>;\r\n}\r\n\r\nexport class EnumType extends Type<EnumOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n  \r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Enum;\r\n\r\n  public static operations = new Operations(ID.Enum + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Enum + ID.Delimiter);\r\n  \r\n  public static baseType = new EnumType({ key: TextType.baseType, value: TextType.baseType, constants: new Map() });\r\n\r\n  public static decode(data: any[], types: TypeProvider): EnumType \r\n  {\r\n    const key = types.getType(data[INDEX_KEY]);\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const constants = new Map(data[INDEX_CONSTANTS].map(([k, v]: [any, any]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n\r\n    return new EnumType({ key, value, constants });\r\n  }\r\n\r\n  public static encode(type: EnumType): any \r\n  {\r\n    const { key, value, constants } = type.options;\r\n\r\n    return [\r\n      this.id,\r\n      key.encode(),\r\n      value.encode(),\r\n      Array.from(constants.entries()).map(([k, v]) => [\r\n        key.toJson(k),\r\n        value.toJson(v)\r\n      ])\r\n    ];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EnumType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.value.getOperations();\r\n  }\r\n\r\n  public merge(type: EnumType): void\r\n  {\r\n    const c1 = this.options.constants;\r\n    const c2 = type.options.constants;\r\n\r\n    this.options.key = Types.merge(this.options.key, type.options.key);\r\n    this.options.value = Types.merge(this.options.value, type.options.value);\r\n\r\n    for (const [key, value] of c2.entries())\r\n    {\r\n      c1.set(key, value);\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.value.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.value.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.value;\r\n  }\r\n\r\n  public isWrapper(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof EnumType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { key, value } = this.options;\r\n\r\n    if (options.exact)\r\n    {\r\n      if (!key.isCompatible(other.options.key, options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return value.isCompatible(other.options.value);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.options.value.isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.value.isSimple();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(EnumType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(EnumType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EnumType.STEP_KEY\r\n      ? this.options.key\r\n      : step === EnumType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.value.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.options.value.getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.options.value.getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === EnumType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    const { constants, value } = this.options;\r\n\r\n    if (!value.isValid(test))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const constantValue of constants.values())\r\n    {\r\n      if (DataTypes.compare(constantValue, test) === 0)\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.options.value.normalize(value);\r\n  }\r\n\r\n  public newInstance(): EnumType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n      constants: new Map(),\r\n    });\r\n  }\r\n\r\n  public clone(): EnumType\r\n  {\r\n    const { key, value, constants } = this.options;\r\n\r\n    return new EnumType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n      constants: new Map(constants.entries()),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EnumType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    const { value, constants } = this.options;\r\n    const firstKey = constants.keys().next();\r\n\r\n    return firstKey ? constants.get(firstKey) : value.create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const values = Array.from(this.options.constants.values());\r\n\r\n    return values[rnd(0, values.length, true)];\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.options.value.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.options.value.toJson(value);\r\n  }\r\n\r\n}","\r\nimport { isArray, isString, isNumber } from '../fns';\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { Type } from '../Type';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\nimport { NumberType } from '../types/Number';\r\nimport { Traverser } from '../Traverser';\r\nimport { AnyType } from '../types/Any';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_CONSTANT = 1;\r\n\r\nexport class ConstantExpression extends Expression \r\n{\r\n\r\n  public static has(e: Expression, constant: any): boolean\r\n  {\r\n    return e instanceof ConstantExpression && e.value === constant;\r\n  }\r\n\r\n  public static is(e: Expression): e is ConstantExpression\r\n  {\r\n    return e instanceof ConstantExpression;\r\n  }\r\n\r\n  public static id = 'constant';\r\n\r\n  public static decode(data: any[], expr: ExpressionProvider): ConstantExpression \r\n  {\r\n    const value = AnyType.baseType.fromJson(data[INDEX_CONSTANT])\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ConstantExpression): any \r\n  {\r\n    const value = AnyType.baseType.toJson(expr.value);\r\n\r\n    return isArray(value)\r\n      ? [this.id, value]\r\n      : value;\r\n  }\r\n\r\n  public value: any;\r\n\r\n  public constructor(value: any) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ConstantExpression.id;\r\n  }\r\n\r\n  public getComplexity(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ConstantExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ConstantExpression(DataTypes.copy(this.value));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const value = this.value;\r\n\r\n    if (isString(value)) \r\n    {\r\n      return new EnumType({\r\n        key: TextType.baseType.newInstance(),\r\n        value: TextType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    if (isNumber(value)) \r\n    {\r\n      return new EnumType({\r\n        key: NumberType.baseType.newInstance(),\r\n        value: NumberType.baseType.newInstance(),\r\n        constants: new Map([[value, value]]),\r\n      });\r\n    }\r\n\r\n    const described = def.describe(this.value);\r\n\r\n    if (described)\r\n    {\r\n      described.removeDescribedRestrictions();\r\n    }\r\n\r\n    return described;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    \r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { NumberType } from '../types/Number';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { isNumber } from '../fns';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_VARIABLE = 1;\r\nconst INDEX_START = 2;\r\nconst INDEX_END = 3;\r\nconst INDEX_BODY = 4;\r\nconst INDEX_BREAK = 5;\r\nconst INDEX_MAX = 6;\r\n\r\nexport class ForExpression extends Expression \r\n{\r\n\r\n  public static STEP_START = 'start';\r\n\r\n  public static STEP_END = 'end';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'for';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ForExpression \r\n  {\r\n    const variable = data[INDEX_VARIABLE];\r\n    const start = exprs.getExpression(data[INDEX_START]);\r\n    const end = exprs.getExpression(data[INDEX_END]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new ForExpression(variable, start, end, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: ForExpression): any \r\n  {\r\n    const out = [this.id, expr.variable, expr.start.encode(), expr.end.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public variable: string;\r\n  public start: Expression;\r\n  public end: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(variable: string, start: Expression, end: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.variable = variable;\r\n    this.start = start;\r\n    this.end = end;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ForExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.start.getComplexity(def, context), this.end.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.variable]: NumberType.baseType.newInstance(),\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ForExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ForExpression(this.variable, this.start.clone(), this.end.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(ForExpression.STEP_START, this.start, (replaceWith) => this.start = replaceWith);\r\n      traverse.step(ForExpression.STEP_END, this.end, (replaceWith) => this.end = replaceWith);\r\n      traverse.step(ForExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ForExpression.STEP_START\r\n      ? [1, this.start]\r\n      : steps[0] === ForExpression.STEP_END\r\n        ? [1, this.end]\r\n        : steps[0] === ForExpression.STEP_BODY\r\n          ? [1, this.body]\r\n          : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.start.setParent(this);\r\n    this.end.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, NumberType.baseType, this.start, handler);\r\n    this.validateType(def, context, NumberType.baseType, this.end, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public loop(variable: string, start: ExpressionValue, end: ExpressionValue, body?: Expression, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    this.variable = variable;\r\n\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      this.body = body;\r\n      this.body.setParent(this);\r\n    }\r\n\r\n    if (breakVariable)\r\n    {\r\n      this.breakVariable = breakVariable;\r\n    }\r\n\r\n    if (isNumber(maxIterations))\r\n    {\r\n      this.maxIterations = maxIterations;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public startAt(start: ExpressionValue): ForExpression\r\n  {\r\n    this.start = Exprs.parse(start);\r\n    this.start.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public endAt(end: ExpressionValue): ForExpression\r\n  {\r\n    this.end = Exprs.parse(end);\r\n    this.end.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public run(expr: Expression): ForExpression\r\n  {\r\n    this.body = expr;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string)\r\n  {\r\n    this.variable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetDataExpression extends Expression \r\n{\r\n\r\n  public static id = 'data';\r\n\r\n  public static readonly instance = new GetDataExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetDataExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetDataExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetDataExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetDataExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetDataExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const data = def.getData(this.name);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getData(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_DATA,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }  \r\n\r\n  public isPathStart(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const EntityOperations = new Operations(ID.Entity + ID.Delimiter);\r\n\r\nexport const EntityComputeds = new Computeds(ID.Entity + ID.Delimiter);\r\n\r\nconst ops = EntityOperations;\r\n\r\nexport const EntityOps = \r\n{\r\n\r\n  newInstance: ops.set('newInstance', {}, ['name'], [], [], [], ['name']),\r\n\r\n  get: ops.set('get', {}, ['name'], ['where'], ['instance'], ['where'], ['name']),\r\n\r\n  getKey: ops.set('getKey', {}, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  save: ops.set('save', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  remove: ops.set('remove', { mutates: ['instance'] }, ['name', 'instance'], [], [], [], ['name']),\r\n\r\n  setRelated: ops.set('setRelated', { complexity: 1, mutates: ['instance', 'related']  }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  addRelated: ops.set('addRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  removeRelated: ops.set('removeRelated', { mutates: ['instance', 'related'] }, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n  clearRelated: ops.set('clearRelated', { complexity: 1, mutates: ['instance'] }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  getRelated: ops.set('getRelated', { complexity: 1 }, ['name', 'instance', 'relation'], [], [], [], ['name', 'relation']),\r\n\r\n  isRelated: ops.set('isRelated', {}, ['name', 'instance', 'relation', 'related'], [], [], [], ['name', 'relation']),\r\n\r\n};\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ObjectOperations = new Operations(ID.Object + ID.Delimiter);\r\n\r\nexport const ObjectComputeds = new Computeds(ID.Object + ID.Delimiter);\r\n\r\nconst ops = ObjectOperations;\r\n\r\nexport const ObjectOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  has: ops.set('has', {}, ['object', 'key']),\r\n\r\n  get: ops.set('get', {}, ['object', 'key']),\r\n\r\n  set: ops.set('set', { mutates: ['object'] }, ['object', 'key', 'value'], [], ['existingValue'], [], ['object']),\r\n\r\n  delete: ops.set('del', { mutates: ['object'] }, ['object', 'key']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['object'], [], [], [], ['object']),\r\n\r\n  merge: ops.set('merge', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nObjectComputeds.set('copy', ObjectOps.copy);","\r\nimport { objectMap, isObject, objectValues, isString, objectEach } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeMap, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ObjectOps, ObjectOperations, ObjectComputeds } from '../ops/ObjectOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport interface ObjectOptions \r\n{\r\n  props: TypeMap;\r\n}\r\n\r\nexport class ObjectType<O extends ObjectOptions = ObjectOptions> extends Type<O> \r\n{\r\n\r\n  public static wilcardProperty = '*';\r\n\r\n  public static id = ID.Object;\r\n\r\n  public static operations = ObjectOperations;\r\n\r\n  public static computeds = ObjectComputeds;\r\n\r\n  public static baseType = new ObjectType({ props: {} });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ObjectType \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], value => types.getType(value));\r\n    \r\n    return new ObjectType({ props });\r\n  }\r\n\r\n  public static encode(type: ObjectType): any \r\n  {\r\n    const props = objectMap(type.options.props, p => p.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public static describePriority: number = 5;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    if (!isObject(data) || data === null)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new ObjectType({\r\n      props: objectMap(data, d => describer.describe(d))\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 7;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, reader);\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isObject(json)) {\r\n          return objectMap(json, writer);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isObject(x)) {\r\n          const newObject: any = {};\r\n\r\n          setObjectCopy(x, newObject);\r\n  \r\n          for (const prop in x) {\r\n            newObject[copy(prop)] = copy(x[prop]);\r\n          }\r\n  \r\n          return newObject;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        if (a === null) return 1;\r\n        if (b === null) return -1;\r\n\r\n        let less = 0;\r\n        let more = 0;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            less++;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            more++;\r\n          }\r\n        }\r\n\r\n        for (const prop in a) {\r\n          if (prop in b)\r\n          {\r\n            const c = compare(a[prop], b[prop]);\r\n\r\n            if (c < 0) less++;\r\n            if (c > 0) more++;\r\n          }\r\n        }\r\n\r\n        return DataTypes.getCompare(less, more);\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        if ((a === null) !== (b === null)) return false;\r\n\r\n        for (const prop in a) {\r\n          if (!(prop in b)) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        for (const prop in b) {\r\n          if (!(prop in a)) {\r\n            return false;\r\n          } else if (!equals(a[prop], b[prop])) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<object>({\r\n      priority,\r\n      isValid: (value) => isObject(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.objectSet(value, step as keyof typeof value, stepValue as never),\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ObjectType.operations.map;\r\n  }\r\n\r\n  public merge(type: Type<O>): void\r\n  {\r\n    const p1 = this.options.props;\r\n    const p2 = type.options.props;\r\n\r\n    for (const prop in p1)\r\n    {\r\n      if (prop in p2 && p2[prop])\r\n      {\r\n        p1[prop] = Types.merge(p1[prop], p2[prop]);\r\n      }\r\n      else if (p1[prop])\r\n      {\r\n        p1[prop] = Types.optional(p1[prop]);\r\n      }\r\n    }\r\n\r\n    for (const prop in p2)\r\n    {\r\n      if (!(prop in p1) && p2[prop])\r\n      {\r\n        p1[prop] = Types.optional(p2[prop]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (isString(expr.value))\r\n      {\r\n        return this.options.props[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof TextType)\r\n      {\r\n        const types = objectValues(this.options.props);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n        const types = values.map((p) => this.options.props[p]).filter(t => !!t);\r\n\r\n        return Types.mergeMany(types, NullType.baseType);\r\n      }\r\n    }\r\n\r\n    return this.getWildcardType();\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const props = objectValues(this.options.props);\r\n\r\n    return [\r\n      ...objectValues(this.options.props, (value, key) => ({ key, value })),\r\n      {\r\n        key: new EnumType({\r\n          key: TextType.baseType,\r\n          value: TextType.baseType,\r\n          constants: new Map(\r\n            objectValues(this.options.props, (prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(props, NullType.baseType),\r\n      },\r\n      { \r\n        key: TextType.baseType, \r\n        value: Types.optional(Types.mergeMany(props, NullType.baseType)),\r\n      }\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.options.props, \r\n        (type, prop) => traverse.step(prop, type, (replaceWith) => this.options.props[prop] = replaceWith, () => delete this.options.props[prop])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options.props[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.options.props, t => t ? t.setParent(this) : 0);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    objectEach(this.options.props, t => t ? t.removeDescribedRestrictions() : 0);\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof ObjectType)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!other.options.props[prop]) \r\n      {\r\n        return false;\r\n      }\r\n\r\n      if (!props[prop].isCompatible(other.options.props[prop], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (options.exact)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop])\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    else if (wildcard)\r\n    {\r\n      for (const prop in other.options.props)\r\n      {\r\n        if (!props[prop] && other.options.props[prop] && !wildcard.isCompatible(other.options.props[prop], options))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.object(\r\n      objectMap(this.options.props, (t) => t ? t.getCreateExpression() : Exprs.noop())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ObjectOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop) \r\n        }).run(\r\n          t ? t.getValidateExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...objectValues(this.options.props, (t, prop) =>\r\n        Exprs.define({ \r\n          value: Exprs.get('value', prop),\r\n          test: Exprs.get('test', prop) \r\n        }).run(\r\n          t ? t.getCompareExpression() : Exprs.true(),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = property\r\n    const hasFrom = from !== null && from !== undefined;\r\n    const hasTo = to !== null && to !== undefined;\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from !== to) // rename\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ObjectOps.set, {\r\n          object: Exprs.get('value'),\r\n          key: to,\r\n          value: Exprs.get('value', from),\r\n        }),\r\n        Exprs.op(ObjectOps.delete, {\r\n          object: Exprs.get('value'),\r\n          key: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    } \r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isObject(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const props = this.options.props;\r\n\r\n    for (const prop in props) \r\n    {\r\n      if (prop === ObjectType.wilcardProperty)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop])\r\n      {\r\n        continue;\r\n      }\r\n\r\n      if (!props[prop].isValid(value[prop])) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const wildcard = this.getWildcardType();\r\n\r\n    if (wildcard)\r\n    {\r\n      for (const prop in value)\r\n      {\r\n        if (!props[prop] && !wildcard.isValid(value[prop]))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ObjectType<O>\r\n  {\r\n    return new ObjectType({ props: {} } as O);\r\n  }\r\n\r\n  public clone(): ObjectType<O>\r\n  {\r\n    return new ObjectType<O>({\r\n      props: objectMap(this.options.props, p => p ? p.clone() : p),\r\n    } as O);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return Object.create(null);\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { props } = this.options;\r\n    const out: any = Object.create(null);\r\n\r\n    for (const prop in props)\r\n    {\r\n      if (props[prop])\r\n      {\r\n        out[prop] = props[prop].random(rnd);\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return objectMap(json, (value, key) => {\r\n      const propType = this.options.props[key];\r\n\r\n      return propType ? propType.fromJson(value) : value;\r\n    });\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return objectMap(value, (subvalue, key) => {\r\n      const propType = this.options.props[key];\r\n      \r\n      return propType ? propType.toJson(subvalue) : subvalue;\r\n    });\r\n  }\r\n\r\n  public getWildcardType(): Type | null\r\n  {\r\n    return this.options.props[ObjectType.wilcardProperty] || null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { EntityOperations, EntityComputeds } from '../ops/EntityOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { ObjectType } from './Object';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class EntityType extends Type<string>\r\n{\r\n\r\n  public static STEP_ENTITY = 'entity';\r\n\r\n  public static id = ID.Entity;\r\n\r\n  public static operations = EntityOperations;\r\n\r\n  public static computeds = EntityComputeds;\r\n\r\n  public static baseType = new EntityType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): EntityType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new EntityType( type, types );\r\n  }\r\n\r\n  public static encode(type: EntityType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(name: string, provider: TypeProvider): EntityType\r\n  {\r\n    return new EntityType(name, provider);\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    return this.provider\r\n      ? this.provider.getType(this.options, NullType.baseType)\r\n      : ObjectType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return EntityType.id;\r\n  }\r\n\r\n  public merge(type: EntityType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n    // return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof EntityType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(EntityType.STEP_ENTITY, this.getType(), (replaceWith) => replaceWith instanceof EntityType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === EntityType.STEP_ENTITY\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === aliased\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): EntityType\r\n  {\r\n    return new EntityType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return EntityType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EntityType } from '../types/Entity';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetEntityExpression extends Expression \r\n{\r\n\r\n  public static id = 'entity';\r\n\r\n  public static readonly instance = new GetEntityExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetEntityExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetEntityExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetEntityExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetEntityExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetEntityExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EntityType(this.name, def);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getEntity(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser } from '../Traverser';\r\nimport { ValidationHandler, ValidationSeverity, ValidationType } from '../Validate';\r\nimport { EnumType } from '../types/Enum';\r\nimport { TextType } from '../types/Text';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class GetRelationExpression extends Expression \r\n{\r\n\r\n  public static id = 'relation';\r\n\r\n  public static readonly instance = new GetRelationExpression('');\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): GetRelationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static encode(expr: GetRelationExpression): any \r\n  {\r\n    return [this.id, expr.name];\r\n  }\r\n\r\n  public name: string;\r\n\r\n  public constructor(name: string)\r\n  {\r\n    super();\r\n    this.name = name;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return GetRelationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return GetRelationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new GetRelationExpression(this.name);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new EnumType({\r\n      key: TextType.baseType,\r\n      value: TextType.baseType,\r\n      constants: new Map([\r\n        ['relation', this.name],\r\n      ])\r\n    });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    if (!this.name)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION_NAME,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n    else if (!def.getRelation(this.name))\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_RELATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { NoExpression } from './No';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_CASES = 1;\r\nconst INDEX_OTHERWISE = 2;\r\n\r\nexport class IfExpression extends Expression \r\n{\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_IF = 'if';\r\n\r\n  public static STEP_THEN = 'then';\r\n\r\n  public static STEP_ELSE = 'else';\r\n\r\n  public static id = 'if';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): IfExpression \r\n  {\r\n    const cases = data[INDEX_CASES].map(([test, result]: [any, any]) => [exprs.getExpression(test), exprs.getExpression(result)]);\r\n    const otherwise = exprs.getExpression(data[INDEX_OTHERWISE]);\r\n\r\n    return new IfExpression(cases, otherwise);\r\n  }\r\n\r\n  public static encode(expr: IfExpression): any \r\n  {\r\n    const cases = expr.cases.map(([test, result]) => [test.encode(), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.otherwise, undefined)\r\n      ? [this.id, cases]\r\n      : [this.id, cases, expr.otherwise.encode()];\r\n  }\r\n\r\n  public cases: [Expression, Expression][];\r\n  public otherwise: Expression;\r\n\r\n  public constructor(cases: [Expression, Expression][], otherwise: Expression) \r\n  {\r\n    super();\r\n    this.cases = cases;\r\n    this.otherwise = otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return IfExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [test, result]) => Math.max(\r\n        max, \r\n        test.getComplexity(def, context),\r\n        result.getComplexity(def, context)\r\n      ), \r\n      this.otherwise.getComplexity(def, context)\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return IfExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new IfExpression(this.cases.map(([condition, then]) => [condition.clone(), then.clone()]), this.otherwise.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([test, value]) => value)\r\n      .concat(this.otherwise)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(IfExpression.STEP_CASES, () => \r\n        this.cases.forEach(([condition, result], index) => \r\n          traverse.step(index, () => {\r\n            traverse.step(IfExpression.STEP_IF, condition, (replaceWith) => this.cases[index].splice(0, 1, replaceWith));\r\n            traverse.step(IfExpression.STEP_THEN, result, (replaceWith) => this.cases[index].splice(1, 1, replaceWith));\r\n          })\r\n        )\r\n      );\r\n      if (this.otherwise !== NoExpression.instance) {\r\n        traverse.step(IfExpression.STEP_ELSE, this.otherwise, (replaceWith) => this.otherwise = replaceWith);\r\n      }\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === IfExpression.STEP_CASES\r\n      ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n        ? steps[2] === IfExpression.STEP_IF\r\n          ? [3, this.cases[steps[1]][0]]\r\n          : steps[2] === IfExpression.STEP_THEN\r\n            ? [3, this.cases[steps[1]][1]]\r\n            : null\r\n        : null\r\n      : steps[0] === IfExpression.STEP_ELSE\r\n        ? [1, this.otherwise]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.cases.forEach(([condition, result]) => {\r\n      condition.setParent(this);\r\n      result.setParent(this);\r\n    });\r\n\r\n    this.otherwise.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.cases.forEach(([condition, result]) => \r\n    {\r\n      this.validateType(def, context, expectedType, condition, handler);\r\n      \r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.otherwise.validate(def, context, handler);\r\n  }\r\n\r\n  public if(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(body: Expression)\r\n  {\r\n    this.cases[this.cases.length - 1][1] = body;\r\n\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public elseif(condition: Expression, body?: Expression)\r\n  {\r\n    this.cases.push([condition, body || NoExpression.instance]);\r\n\r\n    condition.setParent(this);\r\n\r\n    if (body)\r\n    {\r\n      body.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public else(body: Expression)\r\n  {\r\n    this.otherwise = body;\r\n    this.otherwise.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_ARGS = 2;\r\n\r\nexport class InvokeExpression extends Expression \r\n{\r\n\r\n  public static id = 'invoke';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): InvokeExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new InvokeExpression(name, args);\r\n  }\r\n\r\n  public static encode(expr: InvokeExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.name, args];\r\n  }\r\n\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return InvokeExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return func.expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return InvokeExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new InvokeExpression(this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    return func\r\n      ? func.getReturnType(def, argTypes)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const func = def.getFunction(this.name);\r\n    \r\n    if (!func) \r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_FUNCTION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n    }\r\n    else\r\n    {\r\n      const params: TypeMap = {};\r\n\r\n      objectEach(func.params.options.props, (param, paramName) =>\r\n      {\r\n        const arg = this.args[paramName];\r\n\r\n        this.validateType(def, context, param, arg, handler);\r\n\r\n        if (arg)\r\n        {\r\n          params[paramName] = arg.getType(def, context);\r\n        }\r\n      });\r\n\r\n      // func.options.expression.validate(def, Types.object(params), handler);\r\n    }\r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const func = def.getFunction(this.name);\r\n\r\n    if (!func)\r\n    {\r\n      return `Function \"${this.name}\" does not exist`;\r\n    }\r\n\r\n    return func.expression;\r\n  }\r\n\r\n  public named(name: string): InvokeExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): InvokeExpression\r\n  public arg(args: Record<string, ExpressionValue>): InvokeExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): InvokeExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Type, TypeMap } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { EntityType } from '../types/Entity';\r\n\r\n\r\nconst INDEX_ENTITY = 1;\r\nconst INDEX_NAME = 2;\r\nconst INDEX_ARGS = 3;\r\n\r\nexport class MethodExpression extends Expression \r\n{\r\n\r\n  public static id = 'method';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): MethodExpression \r\n  {\r\n    const entity = data[INDEX_ENTITY];\r\n    const name = data[INDEX_NAME];\r\n    const args = objectMap(data[INDEX_ARGS], e => exprs.getExpression(e));\r\n    \r\n    return new MethodExpression(entity, name, args);\r\n  }\r\n\r\n  public static encode(expr: MethodExpression): any \r\n  {\r\n    const args = objectMap(expr.args, a => a.encode());\r\n\r\n    return [this.id, expr.entity, expr.name, args];\r\n  }\r\n\r\n  public entity: string;\r\n  public name: string;\r\n  public args: ExpressionMap;\r\n\r\n  public constructor(entity: string, name: string, args: ExpressionMap) \r\n  {\r\n    super();\r\n    this.entity = entity;\r\n    this.name = name;\r\n    this.args = args;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MethodExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity || !entity.methods[this.name])\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return entity.methods[this.name].expression.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MethodExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new MethodExpression(this.entity, this.name, objectMap(this.args, (a) => a.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type, thisType?: Type): Type | null\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return null;\r\n    }\r\n    \r\n    const argTypes = objectMap(this.args, (a) => a.getType(def, context));\r\n\r\n    argTypes[Expression.INSTANCE] = entity.type;\r\n    \r\n    return method.getReturnType(def, argTypes);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.args, (expr, arg) =>\r\n        traverse.step(arg, expr, (replaceWith) => this.args[arg] = replaceWith, () => delete this.args[arg])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.args\r\n      ? [1, this.args[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.args, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler, thisType?: Type): void\r\n  {\r\n    if (!thisType || !(thisType instanceof EntityType) || thisType.options !== this.entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_THIS,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_TYPE,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_METHOD,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const params: TypeMap = {};\r\n\r\n    params[Expression.INSTANCE] = entity.type;\r\n\r\n    objectEach(method.params.options.props, (param, paramName) =>\r\n    {\r\n      const arg = this.args[paramName];\r\n\r\n      this.validateType(def, context, param, arg, handler);\r\n\r\n      if (arg)\r\n      {\r\n        params[paramName] = arg.getType(def, context);\r\n      }\r\n    });\r\n  }\r\n\r\n  public getInnerExpression(def: DefinitionProvider): Expression | string | false\r\n  {\r\n    const entity = def.getEntity(this.entity);\r\n\r\n    if (!entity)\r\n    {\r\n      return `Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    const method = entity.methods[this.name];\r\n\r\n    if (!method)\r\n    {\r\n      return `Method \"${this.name}\" on Entity \"${this.entity}\" does not exist`;\r\n    }\r\n\r\n    return method.expression;\r\n  }\r\n\r\n  public isPathNode(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public named(name: string): MethodExpression\r\n  {\r\n    this.name = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public arg(name: string, value: ExpressionValue): MethodExpression\r\n  public arg(args: Record<string, ExpressionValue>): MethodExpression\r\n  public arg(nameOrArgs: string | Record<string, ExpressionValue>, value?: Expression): MethodExpression\r\n  {\r\n    const append = isString(nameOrArgs)\r\n      ? { [nameOrArgs]: value }\r\n      : nameOrArgs;\r\n\r\n    for (const argName in append)\r\n    {\r\n      const arg = Exprs.parse(append[argName]);\r\n\r\n      this.args[argName] = arg;\r\n\r\n      arg.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class OrExpression extends Expression \r\n{\r\n\r\n  public static id = 'or';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OrExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new OrExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: OrExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OrExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OrExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OrExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types: Type[] = this.expressions\r\n      .map(e => e.getType(def, context))\r\n      .concat(BooleanType.baseType)\r\n      .filter(t => !!t)\r\n    ;\r\n    \r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const expectedType = BooleanType.baseType;\r\n\r\n    this.expressions.forEach(subject => \r\n    {\r\n      this.validateType(def, context, expectedType, subject, handler);\r\n    });\r\n  }\r\n\r\n}","\r\nimport { objectMap, isEmpty, objectEach, isArray } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Operation } from '../Operation';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { AndExpression } from './And';\r\nimport { OrExpression } from './Or';\r\nimport { NotExpression } from './Not';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\nconst INDEX_PARAMS = 2;\r\nconst INDEX_SCOPE = 3;\r\n\r\nexport class OperationExpression<P extends string = never, O extends string = never, S extends string = never> extends Expression \r\n{\r\n\r\n  public static id = 'op';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): OperationExpression \r\n  {\r\n    const name = data[INDEX_NAME];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    const scopeAlias: Record<string, string> = data[INDEX_SCOPE] || {};\r\n    \r\n    return new OperationExpression(name, params, scopeAlias);\r\n  }\r\n\r\n  public static encode(expr: OperationExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return isEmpty(expr.scopeAlias)\r\n      ? [this.id, expr.name, params]\r\n      : [this.id, expr.name, params, expr.scopeAlias]\r\n  }\r\n\r\n  public static create<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, Expression> & Partial<Record<O, Expression>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return new OperationExpression<P, O, S>(op.id, params, scopeAlias);\r\n  }\r\n\r\n  public name: string;\r\n  public params: ExpressionMap;\r\n  public scopeAlias: Record<string, string>;\r\n\r\n  public constructor(name: string, params: ExpressionMap, scopeAlias: Record<string, string> = {}) \r\n  {\r\n    super();\r\n    this.name = name;\r\n    this.params = params;\r\n    this.scopeAlias = scopeAlias;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OperationExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    const op = def.getOperation(this.name);\r\n    let complexity = op ? op.complexity : 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OperationExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new OperationExpression(this.name, objectMap(this.params, (p) => p.clone()), { ...this.scopeAlias });\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return def.getOperationReturnType(this.name, this.params, this.scopeAlias, context);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    const { name, params, scopeAlias } = this;\r\n    const operation = def.getOperation(name);\r\n    const operationTypes = def.getOperationTypes(name);\r\n\r\n    if (!operation)\r\n    {\r\n      handler({\r\n        type: ValidationType.MISSING_OPERATION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    const expectedTypes = def.getOperationExpectedTypes(name, params, scopeAlias, context);\r\n    const scopeContext = operation.hasScope.length > 0\r\n      ? def.getOperationScopeContext(name, expectedTypes, scopeAlias, context)\r\n      : context;\r\n\r\n    for (const paramName in expectedTypes)\r\n    {\r\n      const optional = operation.optional.indexOf(paramName) !== -1;\r\n      const expectedRequired = expectedTypes[paramName];\r\n      const expected = optional ? Types.optional(expectedRequired) : expectedRequired;\r\n      const subject = params[paramName];\r\n      const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n      const paramContext = hasScope ? scopeContext : context;\r\n      \r\n      this.validateType(def, paramContext, expected, subject, handler);\r\n    }\r\n\r\n    for (const paramName in params)\r\n    {\r\n      const subject = params[paramName];\r\n      const operationType = operationTypes.params[paramName];\r\n\r\n      if (!(paramName in expectedTypes) && operationType)\r\n      {\r\n        const hasScope = operation.hasScope.indexOf(paramName) !== -1;\r\n        const paramContext = hasScope ? scopeContext : context;\r\n\r\n        handler({\r\n          type: ValidationType.MISSING_EXPRESSION,\r\n          severity: ValidationSeverity.HIGH,\r\n          context: paramContext,\r\n          subject,\r\n          parent: this,\r\n        });\r\n\r\n        params[paramName].validate(def, paramContext, handler);\r\n      }\r\n    }\r\n  }\r\n\r\n  public param(name: P | O, value: ExpressionValue): OperationExpression<P, O, S>\r\n  {\r\n    const param = Exprs.parse(value);\r\n\r\n    this.params[name] = param;\r\n    param.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public alias(scoped: S, alias: string): OperationExpression<P, O, S>\r\n  {\r\n    this.scopeAlias[scoped] = alias;\r\n\r\n    return this;\r\n  }\r\n\r\n  public and(exprs: Expression | Expression[]): AndExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new AndExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public or(exprs: Expression | Expression[]): OrExpression\r\n  {\r\n    const append = isArray(exprs) ? exprs : [exprs];\r\n\r\n    return new OrExpression([this as Expression].concat(append));\r\n  }\r\n\r\n  public not(): NotExpression\r\n  {\r\n    return new NotExpression(this);\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\n\r\nexport class ReturnExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'return';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ReturnExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    \r\n    return new ReturnExpression(value);\r\n  }\r\n\r\n  public static encode(expr: ReturnExpression): any \r\n  {\r\n    const returnValue = expr.value.encode();\r\n\r\n    return returnValue !== undefined\r\n      ? [this.id, returnValue]\r\n      : [this.id];\r\n  }\r\n\r\n  public value: Expression;\r\n\r\n  public constructor(value: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReturnExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.value.getComplexity(def, context);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReturnExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ReturnExpression(this.value.encode());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.value \r\n      ? this.value.getType(def, context)\r\n      : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReturnExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === ReturnExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n  }\r\n\r\n  public isPathWritable(defs: DefinitionProvider): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\n\r\nexport class SetExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'set';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SetExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n\r\n    return new SetExpression(path, value);\r\n  }\r\n\r\n  public static encode(expr: SetExpression): any \r\n  {\r\n    return [this.id, expr.path.encode(), expr.value.encode()];\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue)\r\n  {\r\n    return new SetExpression(Exprs.path(path), Exprs.parse(value));\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n\r\n  public constructor(path: PathExpression, value: Expression) \r\n  {\r\n    super();\r\n\r\n    this.path = path;\r\n    this.value = value;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SetExpression(this.path.clone(), this.value.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path(replaceWith));\r\n      traverse.step(SetExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SetExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === SetExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      this.validateType(def, context, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public to(value: ExpressionValue): SetExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from './Constant';\r\nimport { Operation } from '../Operation';\r\nimport { NoExpression } from './No';\r\nimport { isNumber } from '../fns';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\nimport { Exprs } from '../Exprs';\r\nimport { NullType } from '../types/Null';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_OP = 2;\r\nconst INDEX_CASES = 3;\r\nconst INDEX_DEFAULT_CASE = 4;\r\n\r\nexport class SwitchExpression extends Expression \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static STEP_CASES = 'cases';\r\n\r\n  public static STEP_CASE = 'case';\r\n\r\n  public static STEP_RESULT = 'result';\r\n\r\n  public static STEP_DEFAULT = 'default';\r\n\r\n  public static id = 'switch';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SwitchExpression \r\n  {\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const op = data[INDEX_OP];\r\n    const cases = data[INDEX_CASES].map(([tests, result]: [any[], any]) => [\r\n      tests.map((t: any) => exprs.getExpression(t)), \r\n      exprs.getExpression(result)\r\n    ]);\r\n    const defaultCase = exprs.getExpression(data[INDEX_DEFAULT_CASE]);\r\n\r\n    return new SwitchExpression(value, op, cases, defaultCase);\r\n  }\r\n\r\n  public static encode(expr: SwitchExpression): any \r\n  {\r\n    const value = expr.value.encode();\r\n    const cases = expr.cases.map(([tests, result]) => [tests.map(t => t.encode()), result.encode()]);\r\n\r\n    return ConstantExpression.has(expr.defaultCase, undefined)\r\n      ? [this.id, value, expr.op, cases]\r\n      : [this.id, value, expr.op, cases, expr.defaultCase.encode()];\r\n  }\r\n\r\n  public value: Expression;\r\n  public op: string;\r\n  public cases: [Expression[], Expression][];\r\n  public defaultCase: Expression;\r\n\r\n  public constructor(value: Expression, op: string, cases: [Expression[], Expression][], defaultCase: Expression) \r\n  {\r\n    super();\r\n    this.value = value;\r\n    this.op = op;\r\n    this.cases = cases;\r\n    this.defaultCase = defaultCase;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SwitchExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.cases.reduce(\r\n      (max, [tests, result]) => Math.max(\r\n        max, \r\n        result.getComplexity(def, context), \r\n        tests.reduce((tmax, t) => Math.max(\r\n          tmax, \r\n          t.getComplexity(def, context)\r\n        ), 0)\r\n      ), \r\n      Math.max(\r\n        this.value.getComplexity(def, context), \r\n        this.defaultCase.getComplexity(def, context)\r\n      )\r\n    );\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SwitchExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new SwitchExpression(this.value.clone(), this.op, this.cases.map(([tests, then]) => [tests.map((t) => t.clone()), then.clone()]), this.defaultCase.clone());\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    const types = this.cases\r\n      .map(([tests, value]) => value)\r\n      .concat(this.defaultCase)\r\n      .filter(e => !!e)\r\n      .map(e => e.getType(def, context))\r\n      .filter(t => !!t)\r\n    ;\r\n\r\n    return Types.mergeMany(types, NullType.baseType);\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SwitchExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n      traverse.step(SwitchExpression.STEP_CASES, () => \r\n        this.cases.forEach(([tests, result], caseIndex) =>\r\n          traverse.step(caseIndex, () => {\r\n            traverse.step(SwitchExpression.STEP_CASE, () => \r\n              tests.forEach((test, index) => \r\n                traverse.step(index, test, (replaceWith) => tests.splice(index, 1, replaceWith), () => tests.splice(index, 1))\r\n              )\r\n            );\r\n            traverse.step(SwitchExpression.STEP_RESULT, result, (replaceWith) => this.cases[caseIndex].splice(1, 1, replaceWith));\r\n          })  \r\n        )\r\n      );\r\n      traverse.step(SwitchExpression.STEP_DEFAULT, this.defaultCase, (replaceWith) => this.defaultCase = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === SwitchExpression.STEP_VALUE\r\n      ? [1, this.value]\r\n      : steps[0] === SwitchExpression.STEP_CASES\r\n        ? isNumber(steps[1]) && steps[1] < this.cases.length\r\n          ? steps[2] === SwitchExpression.STEP_CASE\r\n            ? isNumber(steps[3]) && steps[3] < this.cases[steps[1]][0].length\r\n              ? [4, this.cases[steps[1]][0][steps[3]]]\r\n              : null\r\n            : steps[2] === SwitchExpression.STEP_RESULT\r\n              ? [3, this.cases[steps[1]][1]]\r\n              : null\r\n            : null\r\n        : steps[0] === SwitchExpression.STEP_DEFAULT\r\n          ? [1, this.defaultCase]\r\n          : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.value.setParent(this);\r\n    this.cases.forEach(([tests, result]) => {\r\n      tests.forEach(e => e.setParent(this));\r\n      result.setParent(this);\r\n    });\r\n    this.defaultCase.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.value.validate(def, context, handler);\r\n\r\n    this.cases.forEach(([tests, result]) => \r\n    {\r\n      tests.forEach(e => e.validate(def, context, handler));\r\n\r\n      result.validate(def, context, handler);\r\n    });\r\n\r\n    this.defaultCase.validate(def, context, handler);\r\n  }\r\n\r\n  public val(value: ExpressionValue, op?: Operation): SwitchExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.op = op ? op.id : this.op;\r\n\r\n    return this;\r\n  }\r\n\r\n  public case(testValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const n = this.cases.length - 1;\r\n    const test = Exprs.parse(testValue);\r\n\r\n    test.setParent(this);\r\n\r\n    if (n >= 0 && this.cases[n][1] === NoExpression.instance)\r\n    {\r\n      this.cases[n][0].push(test);\r\n    }\r\n    else\r\n    {\r\n      this.cases.push([[test], NoExpression.instance]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public than(bodyValue: ExpressionValue): SwitchExpression\r\n  {\r\n    const body = Exprs.parse(bodyValue);\r\n\r\n    this.cases[this.cases.length - 1][1] = body;\r\n    body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public default(body: ExpressionValue)\r\n  {\r\n    this.defaultCase = Exprs.parse(body);\r\n    this.defaultCase.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { objectMap, isString, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionValue, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { TextType } from '../types/Text';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_TEMPLATE = 1;\r\nconst INDEX_PARAMS = 2;\r\n\r\nexport class TemplateExpression extends Expression \r\n{\r\n\r\n  public static id = 'tmpl';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TemplateExpression \r\n  {\r\n    const template = data[INDEX_TEMPLATE];\r\n    const params: ExpressionMap = objectMap(data[INDEX_PARAMS], value => exprs.getExpression(value));\r\n    \r\n    return new TemplateExpression(template, params);\r\n  }\r\n\r\n  public static encode(expr: TemplateExpression): any \r\n  {\r\n    const params = objectMap(expr.params, e => e.encode());\r\n\r\n    return [this.id, expr.template, params];\r\n  }\r\n\r\n  public template: string;\r\n  public params: ExpressionMap;\r\n\r\n  public constructor(template: string, params: ExpressionMap) \r\n  {\r\n    super();\r\n    this.template = template;\r\n    this.params = params;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TemplateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    let complexity = 0;\r\n\r\n    for (const prop in this.params)\r\n    {\r\n      complexity = Math.max(complexity, this.params[prop].getComplexity(def, context));\r\n    }\r\n\r\n    return complexity;\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TemplateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TemplateExpression(this.template, objectMap(this.params, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return TextType.baseType.newInstance();\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.params, (expr, param) =>\r\n        traverse.step(param, expr, (replaceWith) => this.params[param] = replaceWith, () => delete this.params[param])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.params\r\n      ? [1, this.params[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.params, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.params, subject =>\r\n    {\r\n      this.validateType(def, context, TextType.baseType, subject, handler);\r\n    });\r\n  }\r\n\r\n  public param(name: string, value: ExpressionValue): TemplateExpression\r\n  public param(params: Record<string, ExpressionValue>): TemplateExpression\r\n  public param(nameOrParams: string | Record<string, ExpressionValue>, value?: Expression): TemplateExpression\r\n  {\r\n    const append = isString(nameOrParams)\r\n      ? { [nameOrParams]: value }\r\n      : nameOrParams;\r\n\r\n    for (const paramName in append)\r\n    {\r\n      const param = Exprs.parse(append[paramName]);\r\n      this.params[paramName] = param;\r\n      param.setParent(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider, ExpressionValue } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { AnyType } from '../types/Any';\r\nimport { Type } from '../Type';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler, ValidationType, ValidationSeverity } from '../Validate';\r\nimport { Exprs } from '../Exprs';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\nconst DEFAULT_CURRENT = 'current';\r\nconst INDEX_PATH = 1;\r\nconst INDEX_VALUE = 2;\r\nconst INDEX_CURRENT = 3;\r\n\r\nexport class UpdateExpression extends Expression \r\n{\r\n\r\n  public static STEP_PATH = 'path';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = 'up';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): UpdateExpression \r\n  {\r\n    const path = PathExpression.fromPartial(data[INDEX_PATH], exprs);\r\n    const value = exprs.getExpression(data[INDEX_VALUE]);\r\n    const currentVariable = data[INDEX_CURRENT] || DEFAULT_CURRENT; \r\n\r\n    return new UpdateExpression(path, value, currentVariable);\r\n  }\r\n\r\n  public static encode(expr: UpdateExpression): any \r\n  {\r\n    const path = expr.path.encode();\r\n    const value = expr.value.encode();\r\n\r\n    return expr.currentVariable === DEFAULT_CURRENT\r\n      ? [this.id, path, value]\r\n      : [this.id, path, value, expr.currentVariable]\r\n  }\r\n\r\n  public static create(path: ExpressionValue[], value: ExpressionValue, currentVariable: string = DEFAULT_CURRENT)\r\n  {\r\n    return new UpdateExpression(Exprs.path(path), Exprs.parse(value), currentVariable);\r\n  }\r\n\r\n  public path: PathExpression;\r\n  public value: Expression;\r\n  public currentVariable: string;\r\n\r\n  public constructor(path: PathExpression, value: Expression, currentVariable: string = DEFAULT_CURRENT) \r\n  {\r\n    super();\r\n    this.path = path;\r\n    this.value = value;\r\n    this.currentVariable = currentVariable;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return UpdateExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.path.getComplexity(def, context), this.value.getComplexity(def, context));\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.currentVariable]: AnyType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return UpdateExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new UpdateExpression(this.path.clone(), this.value.clone(), this.currentVariable);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return BooleanType.baseType;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(UpdateExpression.STEP_PATH, this.path, (replaceWith) => this.path = Exprs.path([replaceWith]));\r\n      traverse.step(UpdateExpression.STEP_VALUE, this.value, (replaceWith) => this.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  // tslint:disable: no-magic-numbers\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === UpdateExpression.STEP_PATH\r\n      ? [1, this.path]\r\n      : steps[0] === UpdateExpression.STEP_VALUE\r\n        ? [1, this.value]\r\n        : null;\r\n  }\r\n  // tslint:enable: no-magic-numbers\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.path.setParent(this);\r\n    this.value.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.path.validate(def, context, handler);\r\n\r\n    const expectedType = this.path.getType(def, context);\r\n\r\n    if (!this.path.isWritable(def))\r\n    {\r\n      handler({\r\n        type: ValidationType.READONLY,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n\r\n    if (expectedType)\r\n    {\r\n      const valueContext = def.getContext(context, {\r\n        [this.currentVariable]: expectedType,\r\n      });\r\n\r\n      this.validateType(def, valueContext, expectedType, this.value, handler);\r\n    }\r\n    else\r\n    {\r\n      handler({\r\n        type: ValidationType.INVALID_EXPRESSION,\r\n        severity: ValidationSeverity.HIGH,\r\n        context,\r\n        subject: this.path,\r\n        parent: this,\r\n      });\r\n    }\r\n  }\r\n\r\n  public to(value: ExpressionValue, currentVariable?: string): UpdateExpression\r\n  {\r\n    this.value = Exprs.parse(value);\r\n    this.value.setParent(this);\r\n    this.currentVariable = currentVariable || this.currentVariable;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withVariable(name: string): UpdateExpression\r\n  {\r\n    this.currentVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst DEFAULT_MAX_ITERATIONS = 100000;\r\nconst DEFAULT_BREAK = 'break';\r\nconst INDEX_CONDITION = 1;\r\nconst INDEX_BODY = 2;\r\nconst INDEX_BREAK = 3;\r\nconst INDEX_MAX = 4;\r\n\r\nexport class WhileExpression extends Expression \r\n{\r\n\r\n  public static STEP_CONDITION = 'condition';\r\n\r\n  public static STEP_BODY = 'body';\r\n\r\n  public static MAX_ITERATIONS = DEFAULT_MAX_ITERATIONS;\r\n\r\n  public static id = 'while';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): WhileExpression \r\n  {\r\n    const condition = exprs.getExpression(data[INDEX_CONDITION]);\r\n    const body = exprs.getExpression(data[INDEX_BODY]);\r\n    const breakVariable = data[INDEX_BREAK] || DEFAULT_BREAK;\r\n    const max = parseInt(data[INDEX_MAX]) || this.MAX_ITERATIONS;\r\n    \r\n    return new WhileExpression(condition, body, breakVariable, max);\r\n  }\r\n\r\n  public static encode(expr: WhileExpression): any \r\n  {\r\n    const out = [this.id, expr.condition.encode(), expr.body.encode()];\r\n    const hasMax = expr.maxIterations !== this.MAX_ITERATIONS;\r\n\r\n    if (expr.breakVariable !== DEFAULT_BREAK || hasMax) {\r\n      out.push(expr.breakVariable);\r\n    }\r\n    if (hasMax) {\r\n      out.push(expr.maxIterations);\r\n    }\r\n    \r\n    return out;\r\n  }\r\n  \r\n  public condition: Expression;\r\n  public body: Expression;\r\n  public breakVariable: string;\r\n  public maxIterations: number;\r\n\r\n  public constructor(condition: Expression, body: Expression, breakVariable: string = DEFAULT_BREAK, maxIterations: number = DEFAULT_MAX_ITERATIONS) \r\n  {\r\n    super();\r\n    this.condition = condition;\r\n    this.body = body;\r\n    this.breakVariable = breakVariable;\r\n    this.maxIterations = maxIterations;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return WhileExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return Math.max(this.condition.getComplexity(def, context), this.body.getComplexity(def, context)) + 1;\r\n  }\r\n\r\n  public getScope()\r\n  {\r\n    return {\r\n      [this.breakVariable]: BooleanType.baseType\r\n    };\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return WhileExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new WhileExpression(this.condition.clone(), this.body.clone(), this.breakVariable, this.maxIterations);\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, original: Type): Type | null\r\n  {\r\n    const { context } = def.getContextWithScope(original, this.getScope());\r\n\r\n    const body = this.body.getType(def, context);\r\n\r\n    return body ? Types.optional(body) : null;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(WhileExpression.STEP_CONDITION, this.condition, (replaceWith) => this.condition = replaceWith);\r\n      traverse.step(WhileExpression.STEP_BODY, this.body, (replaceWith) => this.body = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] === WhileExpression.STEP_CONDITION\r\n      ? [1, this.condition]\r\n      : steps[0] === WhileExpression.STEP_BODY\r\n        ? [1, this.body]\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.condition.setParent(this);\r\n    this.body.setParent(this);\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.validateType(def, context, BooleanType.baseType, this.condition, handler);\r\n\r\n    const bodyContext = def.getContext(context, this.getScope());\r\n\r\n    this.body.validate(def, bodyContext, handler);\r\n  }\r\n\r\n  public while(condition: Expression)\r\n  {\r\n    this.condition = condition;\r\n    this.condition.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public do(body: Expression)\r\n  {\r\n    this.body = body;\r\n    this.body.setParent(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  public withBreak(name: string)\r\n  {\r\n    this.breakVariable = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  public withMax(iterations: number)\r\n  {\r\n    this.maxIterations = iterations;\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const TupleOperations = new Operations(ID.Tuple + ID.Delimiter);\r\n\r\nexport const TupleComputeds = new Computeds(ID.Tuple + ID.Delimiter);\r\n\r\nconst ops = TupleOperations;\r\n\r\nexport const TupleOps = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.set('create'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['a', 'b'], ['c', 'd', 'e'], [], [], ['a', 'b', 'c', 'd', 'e']),\r\n\r\n  get: ops.set('get', {}, ['value', 'index']),\r\n\r\n  set: ops.set('set', { mutates: ['value'] }, ['value', 'index', 'element']),\r\n\r\n  // Comparisons\r\n  \r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nTupleComputeds.set('copy', TupleOps.copy);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const NumberOperations = new Operations(ID.Number + ID.Delimiter);\r\n\r\nexport const NumberComputeds = new Computeds(ID.Number + ID.Delimiter);\r\n\r\nconst ops = NumberOperations;\r\n\r\nexport const NumberOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  pi: ops.set('pi'),\r\n\r\n  pi2: ops.set('2pi'),\r\n\r\n  piHalf: ops.set('hpi'),\r\n\r\n  e: ops.set('e'),\r\n\r\n  sqrt2: ops.set('sqrt2'),\r\n\r\n  sqrt12: ops.set('sqrt1/2'),\r\n\r\n  ln2: ops.set('ln2'),\r\n\r\n  ln10: ops.set('ln10'),\r\n\r\n  log2e: ops.set('log2e'),\r\n\r\n  log10e: ops.set('log10e'),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.set('+', {}, ['value', 'addend']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor']),\r\n\r\n  min: ops.set('min', {}, ['a', 'b']),\r\n\r\n  max: ops.set('max', {}, ['a', 'b']),\r\n  \r\n  pow: ops.set('^^', {}, ['value', 'exponent']),\r\n  \r\n  atan2: ops.set('atan2', {}, ['x', 'y']),\r\n  \r\n  hypot: ops.set('hyp', {}, ['a', 'b']),\r\n  \r\n  choose: ops.set('choose', { complexity: 1 }, ['n', 'k']),\r\n  \r\n  gcd: ops.set('gcd', { complexity: 1 }, ['a', 'b']),\r\n\r\n  bitAnd: ops.set('&', {}, ['a', 'b']),\r\n\r\n  bitOr: ops.set('|', {}, ['a', 'b']),\r\n\r\n  bitXor: ops.set('^', {}, ['a', 'b']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  sqrt: ops.set('sqrt', {}, ['value']),\r\n\r\n  sq: ops.set('^2', {}, ['value']),\r\n  \r\n  cbrt: ops.set('cbrt', {}, ['value']),\r\n  \r\n  floor: ops.set('floor', {}, ['value']),\r\n  \r\n  ceil: ops.set('ceil', {}, ['value']),\r\n  \r\n  up: ops.set('up', {}, ['value']),\r\n  \r\n  down: ops.set('down', {}, ['value']),\r\n  \r\n  round: ops.set('round', {}, ['value']),\r\n  \r\n  abs: ops.set('abs', {}, ['value']),\r\n  \r\n  neg: ops.set('neg', {}, ['value']),\r\n  \r\n  sign: ops.set('sign', {}, ['value']),\r\n  \r\n  log: ops.set('log', {}, ['value']),\r\n  \r\n  sin: ops.set('sin', {}, ['value']),\r\n  \r\n  cos: ops.set('cos', {}, ['value']),\r\n  \r\n  tan: ops.set('tan', {}, ['value']),\r\n  \r\n  sinh: ops.set('sinh', {}, ['value']),\r\n  \r\n  cosh: ops.set('cosh', {}, ['value']),\r\n\r\n  asin: ops.set('asin', {}, ['value']),\r\n  \r\n  acos: ops.set('acos', {}, ['value']),\r\n  \r\n  atan: ops.set('atan', {}, ['value']),\r\n  \r\n  factorial: ops.set('!', {}, ['value']),\r\n\r\n  bitFlip: ops.set('~', {}, ['value']),\r\n\r\n  // Other\r\n\r\n  clamp: ops.set('clamp', {}, ['value', 'min', 'max']),\r\n\r\n  triangleHeight: ops.set('triangleHeight', {}, ['base', 'side1', 'side2']),\r\n\r\n  lerp: ops.set('lerp', {}, ['delta', 'start', 'end']),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.set('rnd', {}, [], ['min', 'max', 'whole', 'includeMax']),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.set('toBaseText', {}, ['value'], ['base', 'minDigits']),\r\n\r\n  toText: ops.set('toText', {}, ['value'], ['prefix', 'suffix', 'minPlaces', 'maxPlaces', 'useExponent', 'thousandSeparator']),\r\n\r\n  toPercent: ops.set('toPercent', {}, ['value'], ['minPlaces', 'maxPlaces', 'thousandSeparator']),\r\n\r\n  fromPercent: ops.set('fromPercent', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isZero: ops.set('0?', {}, ['value'], ['epsilon']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  isBetween: ops.set('><', {}, ['value', 'min', 'max'], ['minInclusive', 'maxInclusive']),\r\n\r\n  isWhole: ops.set('w?', {}, ['value'], ['epsilon']),\r\n\r\n  isDecimal: ops.set('d?', {}, ['value'], ['epsilon']),\r\n\r\n  isPositive: ops.set('+?', {}, ['value']),\r\n\r\n  isNegative: ops.set('-?', {}, ['value']),\r\n\r\n  isDivisible: ops.set('%?', {}, ['value', 'by'], ['epsilon']),\r\n\r\n  bitCompare: ops.set('bit', {}, ['value', 'method', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nNumberComputeds.set('floor', NumberOps.floor);\r\nNumberComputeds.set('ceil', NumberOps.ceil);\r\nNumberComputeds.set('up', NumberOps.up);\r\nNumberComputeds.set('down', NumberOps.down);\r\nNumberComputeds.set('round', NumberOps.round);\r\nNumberComputeds.set('abs', NumberOps.abs);\r\nNumberComputeds.set('negate', NumberOps.neg);\r\nNumberComputeds.set('sign', NumberOps.sign);\r\nNumberComputeds.set('isZero', NumberOps.isZero);\r\nNumberComputeds.set('isWhole', NumberOps.isWhole);\r\nNumberComputeds.set('isDecimal', NumberOps.isDecimal);\r\nNumberComputeds.set('isPositive', NumberOps.isPositive);\r\nNumberComputeds.set('isNegative', NumberOps.isNegative);\r\nNumberComputeds.set('toText', NumberOps.toText);","\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\nimport { ID } from '../types/ID';\r\n\r\n\r\nexport const ListOperations = new Operations(ID.List + ID.Delimiter);\r\n\r\nexport const ListComputeds = new Computeds(ID.List + ID.Delimiter);\r\n\r\nconst ops = ListOperations;\r\n\r\nexport const ListOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['list'], [], [], [], ['list']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['item'], [], [], [], ['item']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  build: ops.set('new', {}, ['count', 'item'], ['sameItem'], ['list', 'index', 'last', 'count'], ['item'], ['item']),\r\n\r\n  get: ops.set('get', {}, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  set: ops.set('set', {}, ['list', 'index', 'value'], [], [], [], ['list']),\r\n\r\n  add: ops.set('+', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addFirst: ops.set('+f', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  addLast: ops.set('+l', { mutates: ['list'] }, ['list', 'item'], [], [], [], ['list']),\r\n\r\n  insert: ops.set('+@', { mutates: ['list'] }, ['list', 'item', 'index'], [], [], [], ['list']),\r\n\r\n  remove: ops.set('-', { mutates: ['list'], complexity: 1 },  ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  removeFirst: ops.set('-f', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeLast: ops.set('-l', { mutates: ['list'] }, ['list'], [], [], [], ['list']),\r\n\r\n  removeAt: ops.set('-@', { mutates: ['list'] }, ['list', 'index'], [], [], [], ['list']),\r\n\r\n  removeWhere: ops.set('-?', { mutates: ['list'] }, ['list', 'where'], [], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  clear: ops.set('clear', { mutates: ['list'] }, ['list'], [], [], [], ['list'] ),\r\n\r\n  contains: ops.set('contains', { complexity: 1 }, ['list', 'item', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  find: ops.set('find', { complexity: 1 }, ['list', 'where'], ['start', 'reverse'], ['list', 'item', 'index'], ['where'], ['list']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['list'], ['deepCopy'], ['copy'], ['deepCopy'], ['list']),\r\n\r\n  reverse: ops.set('reverse', { complexity: 0.5 }, ['list'], [], [], [], ['list']),\r\n\r\n  exclude: ops.set('exclude', { mutates: ['list'], complexity: 2 },  ['list', 'exclude', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  overlap: ops.set('overlap', { complexity: 2 }, ['list', 'overlap', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  sort: ops.set('sort', { mutates: ['list'], complexity: 1 },   ['list', 'compare'], [], ['list', 'value', 'test'], ['compare'], ['list']),\r\n\r\n  shuffle: ops.set('shuffle', { mutates: ['list'], complexity: 1 }, ['list'], ['times'], [], [], ['list']),\r\n\r\n  unique: ops.set('unique', { complexity: 2 }, ['list', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  duplicates: ops.set('dupes', { complexity: 2 }, ['list', 'isEqual'], ['once'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  take: ops.set('take', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  skip: ops.set('skip', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  drop: ops.set('drop', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  append: ops.set('append', {}, ['list', 'append'], [], [], [], ['list']),\r\n\r\n  prepend: ops.set('prepend', {}, ['list', 'prepend'], [], [], [], ['list']),\r\n\r\n  indexOf: ops.set('indexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  lastIndexOf: ops.set('lastIndexOf', { complexity: 1 }, ['list', 'item', 'isEqual'], ['start'], ['list', 'value', 'test'], ['isEqual'], ['list']),\r\n\r\n  findIndex: ops.set('findIndex', { complexity: 1 }, ['list', 'where'], ['reverse', 'start'], ['list', 'item', 'index'], ['where']),\r\n\r\n  last: ops.set('last', {}, ['list'], [], [], [], ['list']),\r\n\r\n  first: ops.set('first', {}, ['list'], [], [], [], ['list']),\r\n\r\n  count: ops.set('count', {}, ['list']),\r\n\r\n  randomList: ops.set('randomList', {}, ['list', 'count'], [], [], [], ['list']),\r\n\r\n  random: ops.set('random', {}, ['list'], [], [], [], ['list']),\r\n\r\n  // Iteration\r\n\r\n  join: ops.set('join', { complexity: 1 }, ['list'], ['delimiter', 'toText', 'prefix', 'suffix'], ['list', 'item', 'index'], ['toText']),\r\n\r\n  each: ops.set('each', { complexity: 1 }, ['list', 'each'], ['reverse'], ['list', 'item', 'index'], ['each'], ['list']),\r\n\r\n  filter: ops.set('filter', { complexity: 1 }, ['list', 'filter'], [], ['list', 'item', 'index'], ['filter'], ['list']),\r\n\r\n  not: ops.set('not', { complexity: 1 }, ['list', 'not'], [], ['list', 'item', 'index'], ['not'], ['list']),\r\n\r\n  map: ops.set('map', { complexity: 1}, ['list', 'transform'], [], ['list', 'item', 'index'], ['transform'], ['list']),\r\n\r\n  split: ops.set('split', { complexity: 1}, ['list', 'pass'], [], ['list', 'item', 'index'], ['pass'], ['list']),\r\n\r\n  reduce: ops.set('reduce', { complexity: 1}, ['list', 'reduce', 'initial'], [], ['list', 'item', 'index', 'reduced'], ['reduce'], ['reduce']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  group: ops.set('group', { complexity: 1 }, ['list', 'by'], ['getValue'], ['list', 'item', 'index'], ['by', 'getValue'], ['list', 'by', 'getValue']),\r\n\r\n  toListMap: ops.set('toListMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  toMap: ops.set('toMap', { complexity: 1 }, ['list', 'getKey'], ['getValue'], ['list', 'item', 'index'], ['getKey', 'getValue'], ['list', 'getKey', 'getValue']),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.set('joinInner', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinLeft: ops.set('joinLeft', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinRight: ops.set('joinRight', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinFull: ops.set('joinFull', { complexity: 2 }, ['a', 'b', 'on', 'join'], [], ['onA', 'onB', 'joinA', 'joinB'], ['on', 'join'], ['join']),\r\n\r\n  joinCross: ops.set('joinCross', { complexity: 2 }, ['a', 'b', 'join'], [], ['joinA', 'joinB'], ['join'], ['join']),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.set('min', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  max: ops.set('max', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  sum: ops.set('sum', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  avg: ops.set('avg', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  std: ops.set('std', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  variance: ops.set('variance', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  median: ops.set('median', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitand: ops.set('band', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitor: ops.set('bor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  bitxor: ops.set('bxor', { complexity: 1 }, ['list', 'value'], [], ['list', 'item', 'index'], ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEmpty: ops.set('0?', {}, ['list']),\r\n\r\n  isNotEmpty: ops.set('!0', {}, ['list']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['list', 'test', 'isEqual'], [], ['list', 'value', 'test'], ['isEqual']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test', 'compare'], [], ['list', 'value', 'test'], ['compare']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n  \r\n};\r\n\r\nListComputeds.set('copy', ListOps.copy);\r\nListComputeds.set('reversed', ListOps.reverse);\r\nListComputeds.set('shuffled', ListOps.shuffle);\r\nListComputeds.set('first', ListOps.first);\r\nListComputeds.set('last', ListOps.last);\r\nListComputeds.set('random', ListOps.random);\r\nListComputeds.set('isEmpty', ListOps.isEmpty);\r\nListComputeds.set('isNotEmpty', ListOps.isNotEmpty);","\r\nimport { isNumber, isEmpty, isArray, coalesce } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { NumberType } from './Number';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { ListOps, ListOperations, ListComputeds } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from './Tuple';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_ITEM = 1;\r\nconst INDEX_OPTIONS = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\nconst REQUIRED_SUB_MIN = 10;\r\n\r\nexport interface ListOptions \r\n{\r\n  item: Type;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport class ListType extends Type<ListOptions> \r\n{\r\n\r\n  public static STEP_ITEM = 'item';\r\n\r\n  public static id = ID.List;\r\n\r\n  public static operations = ListOperations;\r\n\r\n  public static computeds = ListComputeds;\r\n\r\n  public static baseType = new ListType({ item: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): ListType \r\n  {\r\n    const item = types.getType(data[INDEX_ITEM]);\r\n    const options = data[INDEX_OPTIONS] || {};\r\n\r\n    return new ListType({ item, ...options });\r\n  }\r\n\r\n  public static encode(type: ListType): any \r\n  {\r\n    const options: any = { ...type.options };\r\n    const item = options.item;\r\n    delete options.item;\r\n\r\n    return isEmpty(options)\r\n      ? [this.id, item.encode()]\r\n      : [this.id, item.encode(), options];\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    if (!isArray(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let item = describer.describe(data[0]);\r\n\r\n    for (let i = 1; i < data.length; i++)\r\n    {\r\n      item = describer.merge(item, data[i]);\r\n    }\r\n\r\n    return new ListType({ \r\n      item,\r\n      min: data.length,\r\n      max: data.length\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 8;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      toJson: (json, writer) => {\r\n        if (isArray(json)) {\r\n          return json.map(writer);\r\n        }\r\n      },\r\n      fromJson: (json, reader) => {\r\n        if (isArray(json)) {\r\n          return json.map(reader);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isArray(a);\r\n        const bt = isArray(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (at) {\r\n          let dl = a.length - b.length;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            for (let i = 0; i < a.length; i++) {\r\n              const c = compare(a[i], b[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isArray(a);\r\n        const bl = isArray(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (al)\r\n        {\r\n          if (a.length !== b.length)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (let i = 0; i < a.length; i++)\r\n          {\r\n            if (!equals(a[i], b[i]))\r\n            {\r\n              return false\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isArray(x)) {\r\n          const newArray: any[] = [];\r\n\r\n          setObjectCopy(x, newArray);\r\n\r\n          for (const item of x) {\r\n            newArray.push(copy(item));\r\n          }\r\n\r\n          return newArray;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<any[]>({\r\n      priority,\r\n      isValid: (value) => isArray(value),\r\n      get: (value, step) => value[step],\r\n      set: (value, step, stepValue) => DataTypes.arraySet(value, step, stepValue),\r\n    });\r\n  }\r\n\r\n  public static forItem(itemOrClass: TypeInput)\r\n  {\r\n    const item = Types.parse(itemOrClass);\r\n    \r\n    return new ListType({ item });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ListType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ListType.operations.map;\r\n  }\r\n\r\n  public merge(type: ListType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.item = Types.merge(o1.item, o2.item);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.max = Math.max(o1.max, o2.max);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return isNumber(this.options.min) && expr.value < this.options.min\r\n          ? this.options.item\r\n          : Types.optional(this.options.item);\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.optional(this.options.item);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        const values = Array.from(exprType.options.constants.values());\r\n\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          if (isNumber(this.options.min) && !values.some((x) => x >= this.options.min))\r\n          {\r\n            return this.options.item;\r\n          }\r\n\r\n          return Types.optional(this.options.item);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const { min, item } = this.options;\r\n    const requiredMin = isNumber(min) && min > 0 && min <= REQUIRED_SUB_MIN ? min : 0;\r\n    const required: TypeSub[] = [];\r\n\r\n    for (let i = 0; i < requiredMin; i++) {\r\n      required.push({ key: i, value: item });\r\n    }\r\n\r\n    return [\r\n      ...required,\r\n      { key: 'length', value: Types.LENGTH },\r\n      { key: Types.INDEX, value: Types.optional(item) },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    if (!options.strict &&\r\n      !options.exact &&\r\n      other instanceof TupleType &&\r\n      !other.options.some(o => !item.isCompatible(o, options)))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof ListType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!item.isCompatible(other.options.item, options))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const otherMin = other.options.min;\r\n\r\n      if (min && (!otherMin || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const otherMax = other.options.max;\r\n\r\n      if (max && (!otherMax || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ListType.STEP_ITEM, this.options.item, (replaceWith) => this.options.item = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ListType.STEP_ITEM \r\n      ? this.options.item \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.item.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { item } = this.options;\r\n\r\n    item.removeDescribedRestrictions();\r\n\r\n    this.options = { item };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(ListOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.get('value'),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.item.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ListOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.item.getCompareExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = item\r\n    return Exprs.op(ListOps.map, {\r\n      list: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      item: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!Array.isArray(value)) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { item, min, max } = this.options;\r\n\r\n    if (isNumber(min) && value.length < min) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value.length > max) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (const val of value)\r\n    {\r\n      if (!item.isValid(val)) \r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (isArray(value))\r\n    {\r\n      const item = this.options.item; \r\n\r\n      for (let i = 0; i < value.length; i++)\r\n      {\r\n        value[i] = item.normalize(value[i]);\r\n      }\r\n    }\r\n    \r\n    return value;\r\n  }\r\n\r\n  public newInstance(): ListType\r\n  {\r\n    const { item } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): ListType\r\n  {\r\n    const { item, min, max } = this.options;\r\n\r\n    return new ListType({\r\n      item: item.clone(),\r\n      min,\r\n      max,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ListType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n    const start = Math.min(chosenMin, chosenMax);\r\n    const end = Math.max(chosenMin, chosenMax);\r\n    const n = rnd(start, end + 1, true);\r\n    const out: any[] = [];\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      out.push(this.options.item.random(rnd));\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return json ? json.map((e: any) => this.options.item.fromJson(e)) : null;\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return value ? value.map((e: any) => this.options.item.toJson(e)) : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeInput, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { isArray, isNumber } from '../fns';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { TupleOps, TupleOperations, TupleComputeds } from '../ops/TupleOps';\r\nimport { NumberOps } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { NumberType } from './Number';\r\nimport { EnumType } from './Enum';\r\nimport { TextType } from './Text';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ListType } from './List';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { Types } from '../Types';\r\nimport { NullType } from './Null';\r\n\r\n\r\nconst INDEX_ELEMENTS = 1;\r\n\r\nexport class TupleType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Tuple;\r\n\r\n  public static operations = TupleOperations;\r\n\r\n  public static computeds = TupleComputeds;\r\n\r\n  public static baseType = new TupleType([]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): TupleType \r\n  {\r\n    const elements = data[INDEX_ELEMENTS].map((d: any) => types.getType(d));\r\n\r\n    return new TupleType(elements);\r\n  }\r\n\r\n  public static encode(type: TupleType): any \r\n  {\r\n    const elements = type.options.map(t => t.encode());\r\n\r\n    return [this.id, elements];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static forItem(types: TypeInput[])\r\n  {\r\n    return new TupleType(types.map((t) => Types.parse(t)));\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return TupleType.operations.map;\r\n  }\r\n\r\n  public merge(type: TupleType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (expr.value === 'length')\r\n      {\r\n        return Types.LENGTH;\r\n      }\r\n\r\n      if (isNumber(expr.value))\r\n      {\r\n        return this.options[expr.value];\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (exprType instanceof NumberType)\r\n      {\r\n        return Types.mergeMany(this.options, NullType.baseType);\r\n      }\r\n\r\n      if (exprType instanceof EnumType)\r\n      {\r\n        if (exprType.options.value instanceof NumberType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n          const types = values.map((i: number) => this.options[i]).filter(t => !!t);\r\n          \r\n          return Types.mergeMany(types, NullType.baseType);\r\n        }\r\n\r\n        if (exprType.options.value instanceof TextType)\r\n        {\r\n          const values = Array.from(exprType.options.constants.values());\r\n\r\n          if (values.length === 1 && values[0] === 'length')\r\n          {\r\n            return Types.LENGTH;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      ...this.options.map((value, key) => ({ key, value })),\r\n      { key: 'length', value: Types.LENGTH },\r\n      {\r\n        key: new EnumType({\r\n          key: NumberType.baseType,\r\n          value: NumberType.baseType,\r\n          constants: new Map(\r\n            this.options.map((prop, key) => [key, key]),\r\n          ),\r\n        }),\r\n        value: Types.mergeMany(this.options, NullType.baseType),\r\n      },\r\n      { \r\n        key: Types.INDEX, \r\n        value: Types.optional(\r\n          Types.mergeMany(this.options, NullType.baseType)\r\n        ),\r\n      },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.tuple(\r\n      ...this.options.map((t) => t.getCreateExpression())\r\n    );\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs\r\n      .op(TupleOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      })\r\n      .and(this.options.map((t, i) => Exprs\r\n        .define({ value: Exprs.get('value', i) })\r\n        .run(t.getValidateExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(NumberOps.cmp, {\r\n        value: Exprs.get('value', 'length'),\r\n        test: Exprs.get('test', 'length'),\r\n      }),\r\n      ...this.options.map((t, i) => Exprs\r\n        .define({\r\n          value: Exprs.get('value', i),\r\n          test: Exprs.get('test', i),\r\n        })\r\n        .run(t.getCompareExpression()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = element index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (!hasFrom && hasTo) // add\r\n    {\r\n      return Exprs.define({ parent: Exprs.get('value') },\r\n        Exprs.op(ListOps.insert, {\r\n          list: Exprs.get('value'),\r\n          index: to,\r\n          item: newValue,\r\n        }),\r\n      );\r\n    } \r\n    else if (hasFrom && !hasTo) // remove\r\n    {\r\n      return Exprs.body(\r\n        Exprs.op(ListOps.removeAt, {\r\n          list: Exprs.get('value'),\r\n          index: from,\r\n        }),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n    else if (from === to && hasFrom) // change\r\n    { \r\n      return Exprs.body(\r\n        Exprs.update('value', from)\r\n          .to(newValue, 'value'),\r\n        Exprs.get('value'),\r\n      );\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!options.exact && \r\n      !options.strict && \r\n      other instanceof ListType && \r\n      !this.options.some(o => !o.isCompatible(other.options.item, options)) &&\r\n      isNumber(other.options.min) &&\r\n      other.options.min >= this.options.length)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!(other instanceof TupleType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const a = this.options;\r\n    const b = other.options;\r\n\r\n    if (b.length < a.length || (options.exact && a.length !== b.length))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; i++)\r\n    {\r\n      if (!a[i].isCompatible(b[i], options))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      if (!elements[i].isValid(value[i]))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    if (!isArray(value))\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const elements = this.options;\r\n\r\n    for (let i = 0; i < elements.length; i++)\r\n    {\r\n      value[i] = elements[i].normalize(value[i]);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): TupleType\r\n  {\r\n    return new TupleType([]);\r\n  }\r\n\r\n  public clone(): TupleType\r\n  {\r\n    return new TupleType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleType.encode(this);\r\n  }\r\n\r\n  public create(): any[]\r\n  {\r\n    return this.options.map(e => e.create());\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options.map(e => e.random(rnd));\r\n  }\r\n\r\n  public fromJson(json: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.fromJson(json[i]));\r\n  }\r\n\r\n  public toJson(value: any[]): any[]\r\n  {\r\n    return this.options.map((e, i) => e.toJson(value[i]));\r\n  }\r\n\r\n}\r\n","\r\nimport { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { TupleType } from '../types/Tuple';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { isNumber } from '../fns';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst INDEX_EXPRESSIONS = 1;\r\n\r\nexport class TupleExpression extends Expression \r\n{\r\n\r\n  public static id = 'tuple';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): TupleExpression \r\n  {\r\n    const expressions = data[INDEX_EXPRESSIONS].map((d: any) => exprs.getExpression(d));\r\n    \r\n    return new TupleExpression(expressions);\r\n  }\r\n\r\n  public static encode(expr: TupleExpression): any \r\n  {\r\n    const expressions = expr.expressions.map(e => e.encode());\r\n\r\n    return [this.id, expressions];\r\n  }\r\n\r\n  public expressions: Expression[];\r\n\r\n  public constructor(expressions: Expression[]) \r\n  {\r\n    super();\r\n    this.expressions = expressions;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return TupleExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return this.expressions.reduce((max, e) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return TupleExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new TupleExpression(this.expressions.map((e) => e.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new TupleType(this.expressions.map((e) => Types.simplify(e.getType(def, context))));\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      this.expressions.forEach((expr, index) => \r\n        traverse.step(index, expr, (replaceWith) => this.expressions.splice(index, 1, replaceWith), () => this.expressions.splice(index, 1))\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return isNumber(steps[0]) && steps[0] < this.expressions.length\r\n      ? [1, this.expressions[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.expressions.forEach(e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    this.expressions.forEach(subject =>\r\n    {\r\n      subject.validate(def, context, handler);\r\n    });\r\n  }\r\n\r\n}","\r\nimport { objectMap, objectReduce, objectEach } from '../fns';\r\nimport { Expression, ExpressionProvider, ExpressionMap } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ObjectType } from '../types/Object';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { Types } from '../Types';\r\n\r\n\r\nconst INDEX_PROPS = 1;\r\n\r\nexport class ObjectExpression extends Expression \r\n{\r\n\r\n  public static id = 'obj';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): ObjectExpression \r\n  {\r\n    const props = objectMap(data[INDEX_PROPS], e => exprs.getExpression(e));\r\n    \r\n    return new ObjectExpression(props);\r\n  }\r\n\r\n  public static encode(expr: ObjectExpression): any \r\n  {\r\n    const props = objectMap(expr.props, e => e.encode());\r\n\r\n    return [this.id, props];\r\n  }\r\n\r\n  public props: ExpressionMap;\r\n\r\n  public constructor(props: ExpressionMap) \r\n  {\r\n    super();\r\n    this.props = props;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ObjectExpression.id;\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    return objectReduce(this.props, (e, k, max) => Math.max(max, e.getComplexity(def, context)), 0);\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ObjectExpression.encode(this);\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    return new ObjectExpression(objectMap(this.props, (p) => p.clone()));\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return new ObjectType({ props: objectMap(this.props, e => Types.simplify(e.getType(def, context))) });\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      objectEach(this.props, (expr, prop) =>\r\n        traverse.step(prop, expr, (replaceWith) => this.props[prop] = replaceWith, () => delete this.props[prop])\r\n      )\r\n    );\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    return steps[0] in this.props\r\n      ? [1, this.props[steps[0]]]\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    objectEach(this.props, e => e.setParent(this));\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    objectEach(this.props, e => e.validate(def, context, handler));\r\n  }\r\n\r\n}","import { Expression, ExpressionValue, ExpressionMap } from './Expression'\r\nimport { NotExpression } from './exprs/Not';\r\nimport { AndExpression } from './exprs/And';\r\nimport { NoExpression } from './exprs/No';\r\nimport { DefineExpression } from './exprs/Define';\r\nimport { DoExpression } from './exprs/Do';\r\nimport { ChainExpression } from './exprs/Chain';\r\nimport { CommentExpression } from './exprs/Comment';\r\nimport { ComputedExpression } from './exprs/Computed';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { ForExpression } from './exprs/For';\r\nimport { GetExpression } from './exprs/Get';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { IfExpression } from './exprs/If';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { OperationExpression } from './exprs/Operation';\r\nimport { Operation } from './Operation';\r\nimport { OrExpression } from './exprs/Or';\r\nimport { PathExpression } from './exprs/Path';\r\nimport { ReturnExpression } from './exprs/Return';\r\nimport { SetExpression } from './exprs/Set';\r\nimport { SwitchExpression } from './exprs/Switch';\r\nimport { TemplateExpression } from './exprs/Template';\r\nimport { UpdateExpression } from './exprs/Update';\r\nimport { WhileExpression } from './exprs/While';\r\nimport { TupleExpression } from './exprs/Tuple';\r\nimport { ObjectExpression } from './exprs/Object';\r\nimport { isArray, isObject, objectMap } from './fns';\r\nimport { Type } from './Type';\r\n\r\n\r\nexport class Exprs\r\n{\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<E extends Expression>(expr: E, force: boolean = false): E\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      expr.setParent();\r\n    }\r\n\r\n    return expr;\r\n  }\r\n\r\n  public static parse(values: ExpressionValue[]): Expression[]\r\n  public static parse(values: Record<string, ExpressionValue>): ExpressionMap\r\n  public static parse(value: ExpressionValue): Expression\r\n  public static parse(value: ExpressionValue | ExpressionValue[] | Record<string, ExpressionValue>): Expression | Expression[] | ExpressionMap\r\n  {\r\n    return isArray(value)\r\n      ? value.map((v) => this.parse(v))\r\n      : value instanceof Expression \r\n        ? value\r\n        : isObject(value)\r\n          ? objectMap<Expression, ExpressionValue>(value, (v) => this.parse(v))\r\n          : new ConstantExpression(value);\r\n  }\r\n\r\n  public static cast(valueType: Type, targetType: Type): Expression;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: false): Expression | null;\r\n  public static cast(valueType: Type, targetType: Type, createOnMissing: boolean = true): Expression\r\n  {\r\n    const opId = `${valueType.getId()}:~${targetType.getId()}`;\r\n    const op = valueType.getOperations()[opId];\r\n\r\n    return op\r\n      ? this.op(op, { value: this.get('value') })\r\n      : createOnMissing\r\n        ? this.setParent(targetType.getCreateExpression())\r\n        : null as unknown as Expression;\r\n  }\r\n\r\n  public static and(...exprs: Expression[]): AndExpression\r\n  {\r\n    return this.setParent(new AndExpression(exprs));\r\n  }\r\n\r\n  public static body(...exprs: Expression[]): ChainExpression\r\n  {\r\n    return this.setParent(new ChainExpression(exprs));\r\n  }\r\n\r\n  public static const(value: any): ConstantExpression\r\n  {\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public static define(vars: Record<string, ExpressionValue> = {}, body: Expression = NoExpression.instance): DefineExpression\r\n  {\r\n    return this.setParent(new DefineExpression([], body).with(vars));\r\n  }\r\n\r\n  public static do(body: Expression, condition: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): DoExpression\r\n  {\r\n    return this.setParent(new DoExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static for(variable: string, start: ExpressionValue = new ConstantExpression(0), end: ExpressionValue = new ConstantExpression(0), body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): ForExpression\r\n  {\r\n    return this.setParent(new ForExpression(variable, this.parse(start), this.parse(end), body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static get(...path: ExpressionValue[]): PathExpression | GetExpression\r\n  {\r\n    return path.length === 0\r\n      ? new GetExpression()\r\n      : this.setParent(new PathExpression([new GetExpression(), ...this.parse(path)]));\r\n  }\r\n\r\n  public static sub(value: ExpressionValue, ...path: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(new PathExpression([this.parse(value), ...this.parse(path)]));\r\n  }\r\n\r\n  public static computed(name: string): ComputedExpression\r\n  {\r\n    return this.setParent(new ComputedExpression(name));\r\n  }\r\n\r\n  public static if(condition: Expression, body: Expression = NoExpression.instance, otherwise: Expression = NoExpression.instance): IfExpression\r\n  {\r\n    return this.setParent(new IfExpression([[condition, body]], otherwise));\r\n  }\r\n\r\n  public static invoke(name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new InvokeExpression(name, this.parse(args)));\r\n  }\r\n\r\n  public static method(entity: string, name: string, args: Record<string, ExpressionValue> = {}): InvokeExpression\r\n  {\r\n    return this.setParent(new MethodExpression(entity, name, this.parse(args)));\r\n  }\r\n\r\n  public static noop(): NoExpression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public static not(expr: Expression): NotExpression\r\n  {\r\n    return this.setParent(new NotExpression(expr));\r\n  }\r\n\r\n  public static object(props: Record<string, ExpressionValue>): ObjectExpression\r\n  {\r\n    return this.setParent(new ObjectExpression(this.parse(props)));\r\n  }\r\n\r\n  public static op<P extends string, O extends string, S extends string>(\r\n    op: Operation<P, O, S, any, any>, \r\n    params: Record<P, ExpressionValue> & Partial<Record<O, ExpressionValue>>,\r\n    scopeAlias: Partial<Record<S, string>> = Object.create(null)\r\n  ): OperationExpression<P, O, S> {\r\n    return this.setParent(new OperationExpression<P, O, S>(op.id, this.parse(params), scopeAlias));\r\n  }\r\n\r\n  public static or(...exprs: Expression[]): OrExpression\r\n  {\r\n    return this.setParent(new OrExpression(exprs));\r\n  }\r\n\r\n  public static path(...exprs: ExpressionValue[]): PathExpression\r\n  {\r\n    return this.setParent(exprs.length === 1 && exprs[0] instanceof PathExpression\r\n      ? exprs[0]\r\n      : new PathExpression(this.parse(exprs)));\r\n  }\r\n\r\n  public static return(value: ExpressionValue = NoExpression.instance): ReturnExpression\r\n  {\r\n    return this.setParent(new ReturnExpression(this.parse(value)));\r\n  }\r\n\r\n  public static set(...path: ExpressionValue[]): SetExpression\r\n  {\r\n    return this.setParent(new SetExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static switch<P extends string, O extends string, S extends string>(value: Expression, op: Operation<P, O, S, any, any>): SwitchExpression\r\n  {\r\n    return this.setParent(new SwitchExpression(value, op.id, [], NoExpression.instance));\r\n  }\r\n\r\n  public static template(template: string, params: Record<string, ExpressionValue> = {}): TemplateExpression\r\n  {\r\n    return this.setParent(new TemplateExpression(template, this.parse(params)));\r\n  }\r\n\r\n  public static tuple(...elements: ExpressionValue[]): TupleExpression\r\n  {\r\n    return this.setParent(new TupleExpression(this.parse(elements)));\r\n  }\r\n\r\n  public static update(...path: ExpressionValue[]): UpdateExpression\r\n  {\r\n    return this.setParent(new UpdateExpression(this.path(...path), NoExpression.instance));\r\n  }\r\n\r\n  public static while(condition: Expression, body: Expression = NoExpression.instance, breakVariable?: string, maxIterations?: number): WhileExpression\r\n  {\r\n    return this.setParent(new WhileExpression(condition, body, breakVariable, maxIterations));\r\n  }\r\n\r\n  public static undefined()\r\n  {\r\n    return this.const(undefined);\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return this.const(null);\r\n  }\r\n\r\n  public static true()\r\n  {\r\n    return this.const(true);\r\n  }\r\n\r\n  public static false()\r\n  {\r\n    return this.const(false);\r\n  }\r\n\r\n  public static zero()\r\n  {\r\n    return this.const(0);\r\n  }\r\n\r\n  public static one()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareEqual()\r\n  {\r\n    return this.const(1);\r\n  }\r\n\r\n  public static compareLess()\r\n  {\r\n    return this.const(-1);\r\n  }\r\n\r\n  public static compareGreater()\r\n  {\r\n    return this.const(+1);\r\n  }\r\n\r\n  public static string()\r\n  {\r\n    return this.const('');\r\n  }\r\n\r\n  public static comment(comment: string)\r\n  {\r\n    return new CommentExpression(comment);\r\n  }\r\n\r\n  public static entity(name: string)\r\n  {\r\n    return new GetEntityExpression(name);\r\n  }\r\n\r\n  public static relation(name: string)\r\n  {\r\n    return new GetRelationExpression(name);\r\n  }\r\n\r\n  public static data(name: string)\r\n  {\r\n    return new GetDataExpression(name);\r\n  }\r\n\r\n}","\r\nimport { isNumber, isEmpty, isWhole, coalesce } from '../fns';\r\nimport { Type, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { NumberOps, NumberOperations, NumberComputeds } from '../ops/NumberOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\nconst RANDOM_MIN = 0;\r\nconst RANDOM_MAX = 10;\r\n\r\nexport interface NumberOptions \r\n{\r\n  min?: number;\r\n  max?: number;\r\n  whole?: boolean;\r\n}\r\n\r\nexport class NumberType extends Type<NumberOptions> \r\n{\r\n\r\n  public static WHOLE_EPSILON = 0.000001;\r\n\r\n  public static id = ID.Number;\r\n\r\n  public static operations = NumberOperations;\r\n\r\n  public static computeds = NumberComputeds;\r\n\r\n  public static baseType = new NumberType({});\r\n\r\n  public static decode(data: any[]): NumberType \r\n  {\r\n    return new NumberType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: NumberType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = 4;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    if (!isNumber(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new NumberType({\r\n      min: data,\r\n      max: data,\r\n      whole: Math.abs(Math.floor(data) - data) <= NumberType.WHOLE_EPSILON\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static EQUALS_EPSILON = 0.000001;\r\n\r\n  public static COMPARES_EPSILON = 0.000001;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 0;\r\n    const type: DataTypeRaw = 'number';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        return a < b\r\n          ? (b - a) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : -1\r\n          : (a - b) < this.COMPARES_EPSILON\r\n            ? 0\r\n            : 1;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        return Math.abs(a - b) < this.EQUALS_EPSILON;\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type: 'bigint',\r\n      compare: (a, b) => {\r\n        return a - b;\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type: 'bigint',\r\n      equals: (a, b) => {\r\n        return a === b;\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NumberType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return NumberType.operations.map;\r\n  }\r\n\r\n  public merge(type: NumberType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.max = Math.max(o1.max, o2.max);\r\n    o1.min = Math.min(o1.min, o2.min);\r\n    o1.whole = o1.whole && o2.whole;\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (!(other instanceof NumberType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      const min = this.options.min;\r\n      const otherMin = other.options.min;\r\n\r\n      if (isNumber(min) && (!isNumber(otherMin) || otherMin < min))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.options.max;\r\n      const otherMax = other.options.max;\r\n\r\n      if (isNumber(max) && (!isNumber(otherMax) || otherMax < max))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options = {};\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(NumberOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    if (!isNumber(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { min, max, whole } = this.options;\r\n\r\n    if (isNumber(min) && value < min)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (isNumber(max) && value > max)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (whole && !isWhole(value))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value;\r\n  }\r\n\r\n  public newInstance(): NumberType\r\n  {\r\n    return new NumberType({});\r\n  }\r\n\r\n  public clone(): NumberType\r\n  {\r\n    return new NumberType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NumberType.encode(this);\r\n  }\r\n\r\n  public create(): number\r\n  {\r\n    return 0;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { min, max, whole } = this.options;\r\n    const chosenMin = coalesce(min, RANDOM_MIN);\r\n    const chosenMax = coalesce(max, RANDOM_MAX);\r\n\r\n    return rnd(chosenMin, chosenMax, whole);\r\n  }\r\n\r\n  public fromJson(json: number): number\r\n  {\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: number): number\r\n  {\r\n    return value;\r\n  }\r\n\r\n}","\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\n\r\nconst MAP: string[] = [\r\n  'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'\r\n];\r\n\r\n\r\nexport const en: LocaleOptions = \r\n{\r\n  weekStartsOn: 0,\r\n  firstWeekContainsDate: 4,\r\n\r\n  am: 'am',\r\n  pm: 'pm',\r\n\r\n  formatLT: 'h:mm A',\r\n  formatLTS: 'h:mm:ss A',\r\n  formatL: 'MM/DD/Y',\r\n  formatl: 'M/D/Y',\r\n  formatLL: 'MMMM D, Y',\r\n  formatll: 'MMM D, Y',\r\n  formatLLL: 'MMMM D, Y h:mm A',\r\n  formatlll: 'MMM D, Y h:mm A',\r\n  formatLLLL: 'dddd, MMMM D, Y h:mm A',\r\n  formatllll: 'ddd, MMM D, Y h:mm A',\r\n\r\n  suffix: (value: number) => \r\n  {\r\n    const TH_SPECIAL_MIN = 11;\r\n    const TH_SPECIAL_MAX = 13;\r\n    const suffix = value >= TH_SPECIAL_MIN && value <= TH_SPECIAL_MAX ? 'th' : MAP[ value % MAP.length ];\r\n\r\n    return value + suffix;\r\n  },\r\n\r\n  list: (items) => \r\n  {\r\n    const last: number = items.length - 1;\r\n    let out: string = items[0];\r\n\r\n    for (let i = 1; i < last; i++) \r\n    {\r\n      out += ', ' + items[i];\r\n    }\r\n\r\n    if (last > 0) {\r\n      out += ' and ' + items[last];\r\n    }\r\n\r\n    return out;\r\n  },\r\n\r\n  months: [\r\n    ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    ['Ja', 'F', 'Mr', 'Ap', 'My', 'Je', 'Jl', 'Ag', 'S', 'O', 'N', 'D']\r\n  ],\r\n\r\n  weekdays: [\r\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    ['Sun', 'Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat'],\r\n    ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa'],\r\n  ],\r\n\r\n};\r\n","\r\nimport { en } from './en';\r\nimport { LocaleOptions } from '../Locale';\r\n\r\n\r\nexport let currentLocale: LocaleOptions = en;","\r\n\r\n/**\r\n * The number of milliseconds in a second.\r\n */\r\nexport const MILLIS_IN_SECOND: number = 1000;\r\n\r\n/**\r\n * The number of seconds in a minute.\r\n */\r\nexport const SECONDS_IN_MINUTE: number = 60;\r\n\r\n/**\r\n * The number of hours in a day (not including DST days).\r\n */\r\nexport const HOURS_IN_DAY: number = 24;\r\n\r\n/**\r\n * The number of days in a week.\r\n */\r\nexport const DAYS_IN_WEEK: number = 7;\r\n\r\n/**\r\n * The number of milliseconds in a minute.\r\n */\r\nexport const MILLIS_IN_MINUTE: number = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in an hour.\r\n */\r\nexport const MILLIS_IN_HOUR: number = MILLIS_IN_MINUTE * SECONDS_IN_MINUTE;\r\n\r\n/**\r\n * The number of milliseconds in a day (not including DST days).\r\n */\r\nexport const MILLIS_IN_DAY: number = MILLIS_IN_HOUR * HOURS_IN_DAY;\r\n\r\n/**\r\n * The number of months in a quarter.\r\n */\r\nexport const MONTHS_IN_QUARTER = 3;\r\n\r\n/**\r\n * The number of months in a year.\r\n */\r\nexport const MONTHS_IN_YEAR: number = 12;\r\n\r\n/**\r\n * The first day of a month.\r\n */\r\nexport const DAY_MIN: number = 1;\r\n\r\n/**\r\n * The last day of the longest month.\r\n */\r\nexport const DAY_MAX: number = 31;\r\n\r\n/**\r\n * The last hour of the day.\r\n */\r\nexport const HOUR_MAX: number = 23;\r\n\r\n/**\r\n * The last minute of the hour.\r\n */\r\nexport const MINUTE_MAX: number = 59;\r\n\r\n/**\r\n * The last second of the minute.\r\n */\r\nexport const SECOND_MAX: number = 59;\r\n\r\n/**\r\n * The last millisecond of the second.\r\n */\r\nexport const MILLIS_MAX: number = 999;\r\n\r\n/**\r\n * The last day of the week.\r\n */\r\nexport const WEEKDAY_MAX: number = 6;","import { LocaleOptions } from '../../Locale';\r\nimport { currentLocale } from '../../locales';\r\nimport { MILLIS_IN_SECOND, DAYS_IN_WEEK, WEEKDAY_MAX, MILLIS_IN_MINUTE, MONTHS_IN_QUARTER, DAY_MIN, MILLIS_MAX, SECOND_MAX, MINUTE_MAX, HOUR_MAX, MILLIS_IN_HOUR, MONTHS_IN_YEAR, MILLIS_IN_DAY, DAY_MAX } from './DateConstants';\r\nimport { isDate, isNumber, isString } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport type Unit = \r\n  'millis' | \r\n  'second' | \r\n  'minute' | \r\n  'hour' | \r\n  'day' | \r\n  'week' | \r\n  'month' |\r\n  'quarter' |\r\n  'year';\r\n\r\nexport type UnitRecord<T> = Record<Unit, T>;\r\n\r\nexport type Adjuster = (value: number) => number;\r\n\r\nexport const adjusters: Record<string, Adjuster> = \r\n{\r\n  none:     (value) => value,\r\n  floor:    (value) => Math.floor(value),\r\n  ceil:     (value) => Math.ceil(value),\r\n  round:    (value) => Math.round(value),\r\n  truncate: (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  down:     (value) => value < 0 ? Math.ceil(value) : Math.floor(value),\r\n  up:       (value) => value < 0 ? Math.floor(value) : Math.ceil(value),\r\n};\r\n\r\nexport type Getter = (x: Date) => number;\r\n\r\nexport const getters: Record<string, Getter> = \r\n{\r\n  timestamp:            d => d.valueOf(),\r\n  timestampSeconds:     d => Math.floor(d.valueOf() / MILLIS_IN_SECOND),\r\n  millis:               d => d.getMilliseconds(),\r\n  second:               d => d.getSeconds(),\r\n  minute:               d => d.getMinutes(),\r\n  hour:                 d => d.getHours(),\r\n  day:                  d => d.getDay(),\r\n  dayOfMonth:           d => d.getDate(),\r\n  lastDayOfMonth:       getLastDayOfMonth,\r\n  dayOfYear:            getDayOfYear,\r\n  dayOfWeek:            getDayOfWeek,\r\n  week:                 getWeekOfYear,\r\n  weekOfMonth:          getWeekOfMonthISO,\r\n  weekspanOfMonth:      getWeekspanOfMonth,\r\n  fullWeekOfMonth:      getFullWeekOfMonth,\r\n  lastWeekspanOfMonth:  getLastWeekspanOfMonth,\r\n  lastFullWeekOfMonth:  getLastFullWeekOfMonth,\r\n  weekOfYear:           getWeekOfYearISO,\r\n  weekspanOfYear:       getWeekspanOfYear,\r\n  fullWeekOfYear:       getFullWeekOfYear,\r\n  lastWeekspanOfYear:   getLastWeekspanOfYear,\r\n  lastFullWeekOfYear:   getLastFullWeekOfYear,\r\n  month:                d => d.getMonth(),\r\n  quarter:              getQuarter,\r\n  year:                 d => d.getFullYear(),\r\n  timeIdentifier:       getTimeIdentifier,\r\n  dayIdentifier:        getDayIdentifier,\r\n  weekIdentifier:       getWeekIdentifier,\r\n  monthIdentifier:      getMonthIdentifier,\r\n  quarterIdentifier:    getQuarterIdentifier,\r\n};\r\n\r\nexport type Setter = (x: Date, value: number) => void;\r\n\r\nexport const setters: Record<string, Setter> = \r\n{\r\n  timestamp:            (d, v) => mutate(d, x => x.setTime(v)),\r\n  timestampSeconds:     (d, v) => mutate(d, x => x.setTime(v * 1000)),\r\n  millis:               (d, v) => mutate(d, x => x.setMilliseconds(v)),\r\n  second:               (d, v) => mutate(d, x => x.setSeconds(v)),\r\n  minute:               (d, v) => mutate(d, x => x.setMinutes(v)),\r\n  hour:                 (d, v) => mutate(d, x => x.setHours(v)),\r\n  day:                  (d, v) => mutate(d, x => add.day(x, v - x.getDay())),\r\n  dayOfMonth:           (d, v) => mutate(d, x => x.setDate(v)),\r\n  lastDayOfMonth:       (d, v) => mutate(d, x => add.day(x, v - getLastDayOfMonth(x))),\r\n  dayOfYear:            (d, v) => mutate(d, x => add.day(x, v - getDayOfYear(x))),\r\n  dayOfWeek:            (d, v) => mutate(d, x => add.day(x, v - getDayOfWeek(x))),\r\n  week:                 (d, v) => mutate(d, x => add.week(x, v - getWeekOfYear(x))),\r\n  weekOfMonth:          (d, v) => mutate(d, x => add.week(x, v - getWeekOfMonthISO(x))),\r\n  weekspanOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfMonth(x))),\r\n  fullWeekOfMonth:      (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfMonth(x))),\r\n  lastWeekspanOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfMonth(x))),\r\n  lastFullWeekOfMonth:  (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfMonth(x))),\r\n  weekOfYear:           (d, v) => mutate(d, x => add.week(x, v - getWeekOfYearISO(x))),\r\n  weekspanOfYear:       (d, v) => mutate(d, x => add.week(x, v - getWeekspanOfYear(x))),\r\n  fullWeekOfYear:       (d, v) => mutate(d, x => add.week(x, v - getFullWeekOfYear(x))),\r\n  lastWeekspanOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastWeekspanOfYear(x))),\r\n  lastFullWeekOfYear:   (d, v) => mutate(d, x => add.week(x, v - getLastFullWeekOfYear(x))),\r\n  month:                (d, v) => mutate(d, x => x.setMonth(v)),\r\n  quarter:              (d, v) => mutate(d, x => add.quarter(x, v - getQuarter(x))),\r\n  year:                 (d, v) => mutate(d, x => x.setFullYear(v)),\r\n};\r\n\r\nexport type Starter = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const startOf: UnitRecord<Starter> = \r\n{\r\n  millis:   x => x,\r\n  second:   startOfSecond,\r\n  minute:   startOfMinute,\r\n  hour:     startOfHour,\r\n  day:      startOfDay,\r\n  week:     startOfWeek,\r\n  month:    startOfMonth,\r\n  quarter:  startOfQuarter,\r\n  year:     startOfYear,\r\n};\r\n\r\nexport type Ender = (x: Date, options?: LocaleOptions) => void;\r\n\r\nexport const endOf: UnitRecord<Ender> = \r\n{\r\n  millis:   x => x,\r\n  second:   endOfSecond,\r\n  minute:   endOfMinute,\r\n  hour:     endOfHour,\r\n  day:      endOfDay,\r\n  week:     endOfWeek,\r\n  month:    endOfMonth,\r\n  quarter:  endOfQuarter,\r\n  year:     endOfYear,\r\n};\r\n\r\nexport type Adder = (x: Date, amount: number) => void;\r\n\r\nexport const add: UnitRecord<Adder> = \r\n{\r\n  millis:   addMilliseconds,\r\n  second:   addSeconds,\r\n  minute:   addMinutes,\r\n  hour:     addHours,\r\n  day:      addDays,\r\n  week:     addWeeks,\r\n  month:    addMonths,\r\n  quarter:  addQuarters,\r\n  year:     addYears,\r\n};\r\n\r\nexport type Differ = (a: Date, b: Date) => number;\r\n\r\nexport const diff: UnitRecord<Differ> = \r\n{\r\n  millis:   diffMilliseconds,\r\n  second:   diffSeconds,\r\n  minute:   diffMinutes,\r\n  hour:     diffHours,\r\n  day:      diffDays,\r\n  week:     diffWeeks,\r\n  month:    diffMonths,\r\n  quarter:  diffQuarters,\r\n  year:     diffYears,\r\n};\r\n\r\nexport function mutate(a: Date, mutator: (a: Date, options?: LocaleOptions) => void, options?: LocaleOptions): Date\r\n{\r\n  const b = new Date(a.getTime());\r\n\r\n  mutator(b, options);\r\n\r\n  return b;\r\n}\r\n\r\nexport function compareDates(a: Date, b: Date, precision: Unit = 'millis', options: LocaleOptions = currentLocale): number\r\n{\r\n  const starter = startOf[precision];\r\n  const x = mutate(a, starter, options);\r\n  const y = mutate(b, starter, options);\r\n\r\n  return x.getTime() - y.getTime();\r\n}\r\n\r\nexport type DateParserGroup = [number, number, number, number, number, number, number];\r\n\r\nexport const DateParsers: Array<{\r\n  pattern: RegExp;\r\n  groups: DateParserGroup;\r\n}> = [\r\n  { \r\n    pattern: /^(\\d{4})[-/](\\d{1,22})[-/](\\d{1,2})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [1, 2, 3, 5, 8, 10, 12 ],\r\n  },\r\n  { \r\n    pattern: /^(\\d{1,2})[-/](\\d{1,2})[-/](\\d{4})(|[T ](\\d{1,2})((|:(\\d{1,2})(|:(\\d{1,2})(|\\.(\\d+)Z?)))))$/, \r\n    groups: [3, 1, 2, 5, 8, 10, 12 ],\r\n  }\r\n];\r\n\r\nexport function parse(value: any, parseAsUTC: boolean = false): Date | null\r\n{\r\n  if (isDate(value))\r\n  {\r\n    return value;\r\n  }\r\n\r\n  if (isNumber(value) && value > 0)\r\n  {\r\n    return new Date(value);\r\n  }\r\n\r\n  if (isString(value))\r\n  {\r\n    for (const parser of DateParsers)\r\n    {\r\n      const { pattern, groups } = parser;\r\n      const match = pattern.exec(value);\r\n\r\n      if (match) \r\n      {\r\n        const times: DateParserGroup = [0, 0, 1, 0, 0, 0, 0];\r\n\r\n        for (let i = 0; i < times.length; i++) {\r\n          const x = parseInt(match[groups[i]]);\r\n          if (isFinite(x)) {\r\n            times[i] = i === 1 ? x - 1 : x;\r\n          }\r\n        }\r\n\r\n        return parseAsUTC\r\n          ? new Date(Date.UTC(...times))\r\n          : new Date(...times);\r\n      }\r\n    }\r\n\r\n    if (parseAsUTC)\r\n    {\r\n      const withUTC = value + ' UTC';\r\n      const parsedUTC = Date.parse(withUTC);\r\n\r\n      if (isFinite(parsedUTC))\r\n      {\r\n        return new Date(parsedUTC);\r\n      }\r\n    }\r\n\r\n    const parsed = Date.parse(value);\r\n\r\n    if (isFinite(parsed))\r\n    {\r\n      return new Date(parsed);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getTimeIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100000000\r\n       + (x.getMonth() + 1) * 1000000\r\n       + x.getDate() * 10000\r\n       + x.getHours() * 100\r\n       + x.getMinutes();\r\n}\r\n\r\nexport function getDayIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10000\r\n       + (x.getMonth() + 1) * 100\r\n       + x.getDate();\r\n}\r\n\r\nexport function getWeekIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 1000\r\n       + getWeekOfYear(x);\r\n}\r\n\r\nexport function getMonthIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 100\r\n       + (x.getMonth() + 1);\r\n}\r\n\r\nexport function getQuarterIdentifier(x: Date): number\r\n{\r\n  return x.getFullYear() * 10\r\n       + getQuarter(x);\r\n}\r\n\r\nexport function getLastDayOfMonth(x: Date): number\r\n{\r\n  return getDaysInMonth(x) - x.getDate() + 1;\r\n}\r\n\r\nexport function getLastWeekspanOfYear(x: Date): number\r\n{\r\n  const fromEnd = getDaysInYear(x) - getDayOfYear(x);\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfYearISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfYear), getDayOfYear(x), options);\r\n}\r\n\r\nexport function getWeekspanOfYear(x: Date): number\r\n{\r\n  return Math.floor((getDayOfYear(x) - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfYear), getDaysInYear(x), options);\r\n}\r\n\r\nexport function getWeeksInYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekOfYearISO(mutate(x, endOfYear), options) + 1;\r\n}\r\n\r\nexport function getLastFullWeekOfYear(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const lastOfYear = mutate(x, endOfYear);\r\n  const week = getWeekOfYearISO(x, options);\r\n  const weekMax = getWeekOfYearISO(lastOfYear, options);\r\n  const lastWeek = weekMax - week;\r\n\r\n  return getDayOfWeek(lastOfYear, options) === WEEKDAY_MAX \r\n    ? lastWeek + 1\r\n    : lastWeek;\r\n}\r\n\r\nexport function getWeekspanOfMonth(x: Date): number\r\n{\r\n  return Math.floor((x.getDate() - 1) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getLastWeekspanOfMonth(x: Date): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n\r\n  return Math.floor(fromEnd / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getFullWeekOf(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getLastFullWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const fromEnd = getDaysInMonth(x) - x.getDate();\r\n  const invertedDayOfWeek = WEEKDAY_MAX - getDayOfWeek(x, options);\r\n  \r\n  return Math.floor((fromEnd - invertedDayOfWeek + DAYS_IN_WEEK) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeekOfMonthISO(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeekISO(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekOfMonth(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  return getWeek(mutate(x, startOfMonth), x.getDate(), options);\r\n}\r\n\r\nexport function getWeekISO(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { firstWeekContainsDate } = options;\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = DAYS_IN_WEEK - dayOfWeekFirst < firstWeekContainsDate;\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getWeek(start: Date, dayOfStart: number, options: LocaleOptions): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const offset = dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getFullWeekOf(start: Date, dayOfStart: number, options: LocaleOptions = currentLocale): number\r\n{\r\n  const dayOfWeekFirst = getDayOfWeek(start, options);\r\n  const hasWeekZero = dayOfWeekFirst !== 0; // Sunday\r\n  const offset = hasWeekZero\r\n    ? dayOfWeekFirst - 1\r\n    : dayOfWeekFirst - 1 + DAYS_IN_WEEK;\r\n\r\n  return Math.floor((dayOfStart + offset) / DAYS_IN_WEEK);\r\n}\r\n\r\nexport function getDayOfWeek(x: Date, options: LocaleOptions = currentLocale): number\r\n{\r\n  const { weekStartsOn } = options;\r\n  const day = x.getDay();\r\n\r\n  return day < weekStartsOn \r\n    ? day - weekStartsOn + DAYS_IN_WEEK\r\n    : day - weekStartsOn;\r\n}\r\n\r\nexport function getDayOfYear(a: Date): number\r\n{\r\n  return Math.round(diffDays(a, mutate(a, startOfYear))) + 1;\r\n}\r\n\r\nexport function getDateOffset(x: Date): number\r\n{\r\n  return -Math.round(x.getTimezoneOffset() / 15) * 15;\r\n}\r\n\r\nexport function isDaylightSavingTime(x: Date): boolean\r\n{\r\n  const offset = getDateOffset(x);\r\n\r\n  return (\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(0))) ||\r\n    offset > getDateOffset(mutate(x, d => d.setMonth(5)))\r\n  );\r\n}\r\n\r\nexport function isLeapYear(x: Date): boolean\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\n\r\nexport function getDaysInYear(x: Date): number\r\n{\r\n  return isLeapYear(x) ? 366 : 365;\r\n}\r\n\r\nexport const daysInMonth = [\r\n  [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n  [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\r\n];\r\n\r\nexport function getDaysInMonth(x: Date): number\r\n{\r\n  return daysInMonth[isLeapYear(x) ? 1 : 0][x.getMonth()];\r\n}\r\n\r\nexport function getAbsoluteTimestamp(a: Date): number\r\n{\r\n  return a.getTime() - getTimezoneOffsetInMilliseconds(a);\r\n}\r\n\r\nexport function getTimezoneOffsetInMilliseconds(a: Date): number\r\n{\r\n  const b = new Date(a.getTime());\r\n  const offsetMinutes = b.getTimezoneOffset();\r\n\r\n  b.setSeconds(0, 0);\r\n\r\n  const offsetMilliseconds = b.getTime() % MILLIS_IN_MINUTE;\r\n\r\n  return offsetMinutes * MILLIS_IN_MINUTE + offsetMilliseconds;\r\n}\r\n\r\nexport function getQuarter(x: Date): number\r\n{\r\n  return Math.floor(x.getMonth() / MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function startOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(0);\r\n}\r\n\r\nexport function startOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(0, 0);\r\n}\r\n\r\nexport function startOfHour(x: Date): void\r\n{\r\n  x.setMinutes(0, 0, 0);\r\n}\r\n\r\nexport function startOfDay(x: Date): void\r\n{\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() - dayOfWeek);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfMonth(x: Date): void\r\n{\r\n  x.setDate(DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER), DAY_MIN);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function startOfYear(x: Date): void\r\n{\r\n  const year = x.getFullYear();\r\n\r\n  x.setTime(0);\r\n  x.setFullYear(year, 0, 1);\r\n  x.setHours(0, 0, 0, 0);\r\n}\r\n\r\nexport function endOfSecond(x: Date): void\r\n{\r\n  x.setMilliseconds(MILLIS_MAX);\r\n}\r\n\r\nexport function endOfMinute(x: Date): void\r\n{\r\n  x.setSeconds(SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfHour(x: Date): void\r\n{\r\n  x.setMinutes(MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfDay(x: Date): void\r\n{\r\n  x.setHours(HOUR_MAX, MINUTE_MAX, SECOND_MAX, MILLIS_MAX);\r\n}\r\n\r\nexport function endOfWeek(x: Date, options: LocaleOptions = currentLocale): void\r\n{\r\n  const dayOfWeek = getDayOfWeek(x, options);\r\n\r\n  x.setDate(x.getDate() + (WEEKDAY_MAX - dayOfWeek));\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfMonth(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear(), x.getMonth() + 1, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfQuarter(x: Date): void\r\n{\r\n  const month = x.getMonth();\r\n\r\n  x.setMonth(month - (month % MONTHS_IN_QUARTER) + MONTHS_IN_QUARTER, DAY_MIN);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function endOfYear(x: Date): void\r\n{\r\n  x.setFullYear(x.getFullYear() + 1, 0, 0);\r\n  endOfDay(x);\r\n}\r\n\r\nexport function addMilliseconds(x: Date, amount: number): void\r\n{\r\n  x.setTime(x.getTime() + amount);\r\n}\r\n\r\nexport function addSeconds(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_SECOND);\r\n}\r\n\r\nexport function addMinutes(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_MINUTE);\r\n}\r\n\r\nexport function addHours(x: Date, amount: number): void\r\n{\r\n  addMilliseconds(x, amount * MILLIS_IN_HOUR);\r\n}\r\n\r\nexport function addDays(x: Date, amount: number): void\r\n{\r\n  x.setDate(x.getDate() + amount);\r\n}\r\n\r\nexport function addWeeks(x: Date, amount: number): void\r\n{\r\n  addDays(x, amount * DAYS_IN_WEEK);\r\n}\r\n\r\nexport function addMonths(x: Date, amount: number): void\r\n{\r\n  const month = x.getMonth() + amount;\r\n\r\n  const y = new Date(0)\r\n  y.setFullYear(y.getFullYear(), month, 1)\r\n  y.setHours(0, 0, 0, 0)\r\n  const dayMax = getDaysInMonth(y);\r\n\r\n  x.setMonth(month, Math.min(dayMax, x.getDate()));\r\n}\r\n\r\nexport function addQuarters(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_QUARTER);\r\n}\r\n\r\nexport function addYears(x: Date, amount: number): void\r\n{\r\n  addMonths(x, amount * MONTHS_IN_YEAR);\r\n}\r\n\r\nexport function diffMilliseconds(a: Date, b: Date): number\r\n{\r\n  return a.getTime() - b.getTime();\r\n}\r\n\r\nexport function diffSeconds(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_SECOND;\r\n}\r\n\r\nexport function diffMinutes(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_MINUTE;\r\n}\r\n\r\nexport function diffHours(a: Date, b: Date): number\r\n{\r\n  return diffMilliseconds(a, b) / MILLIS_IN_HOUR;\r\n}\r\n\r\nexport function diffDays(a: Date, b: Date): number \r\n{\r\n  const leftTimestamp = getAbsoluteTimestamp(a);\r\n  const rightTimestamp = getAbsoluteTimestamp(b);\r\n\r\n  return (leftTimestamp - rightTimestamp) / MILLIS_IN_DAY;\r\n}\r\n\r\nexport function diffWeeks(a: Date, b: Date): number\r\n{\r\n  return diffDays(a, b) / DAYS_IN_WEEK;\r\n}\r\n\r\nexport function diffMonths(a: Date, b: Date): number\r\n{\r\n  const years = a.getFullYear() - b.getFullYear();\r\n  const months = a.getMonth() - b.getMonth();\r\n  const date = (a.getDate() - b.getDate()) / DAY_MAX;\r\n\r\n  return years * MONTHS_IN_YEAR + months + date;\r\n}\r\n\r\nexport function diffQuarters(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_QUARTER;\r\n}\r\n\r\nexport function diffYears(a: Date, b: Date): number\r\n{\r\n  return diffMonths(a, b) / MONTHS_IN_YEAR;\r\n}\r\n","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const DateOperations = new Operations(ID.Date + ID.Delimiter);\r\n\r\nexport const DateComputeds = new Computeds(ID.Date + ID.Delimiter);\r\n\r\nconst ops = DateOperations;\r\n\r\nexport const DateOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  now: ops.set('now'),\r\n\r\n  today: ops.set('today'),\r\n\r\n  tomorrow: ops.set('today+'),\r\n\r\n  yesterday: ops.set('today-'),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  parse: ops.set('parse', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromText: ops.set('>txt', {}, ['value'], ['parseAsUTC']),\r\n\r\n  fromTimestamp: ops.set('>tms', {}, ['value']),\r\n\r\n  fromTimestampSeconds: ops.set('>tmss', {}, ['value']),\r\n\r\n  min: ops.set('min', {}, ['value', 'test']),\r\n\r\n  max: ops.set('max', {}, ['value', 'test']),\r\n\r\n  get: ops.set('get', {}, ['value', 'property']),\r\n\r\n  set: ops.set('set', {}, ['value', 'property', 'set']),\r\n\r\n  add: ops.set('+', {}, ['value', 'unit'], ['amount']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'unit'], ['amount']),\r\n\r\n  startOf: ops.set('startOf', {}, ['value', 'unit']),\r\n\r\n  endOf: ops.set('endOf', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  daysInMonth: ops.set('dim', {}, ['value']),\r\n\r\n  daysInYear: ops.set('diy', {}, ['value']),\r\n\r\n  weeksInYear: ops.set('wiy', {}, ['value']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test'], ['unit']),\r\n\r\n  diff: ops.set('diff', {}, ['value', 'test'], ['unit', 'absolute', 'adjust']),\r\n\r\n  timezoneOffset: ops.set('offset', {}, ['value']),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.set('toText', {}, ['value', 'format']),\r\n\r\n  toISOText: ops.set('toISOText', {}, ['value']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n \r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBefore: ops.set('<', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBeforeOrEqual: ops.set('<=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfter: ops.set('>', {}, ['value', 'test'], ['unit']),\r\n\r\n  isAfterOrEqual: ops.set('>=', {}, ['value', 'test'], ['unit']),\r\n\r\n  isBetween: ops.set('between', {}, ['value', 'start', 'end'], ['unit', 'startInclusive', 'endInclusive']),\r\n\r\n  isStartOf: ops.set('startOf?', {}, ['value', 'unit']),\r\n\r\n  isEndOf: ops.set('endOf?', {}, ['value', 'unit'], ['inclusive']),\r\n\r\n  isDST: ops.set('dst?', {}, ['value']),\r\n\r\n  isLeapYear: ops.set('leap?', {}, ['value']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nDateComputeds.set('timestamp', DateOps.get, 'value', { property: 'timestamp' });\r\nDateComputeds.setWritable('timestamp', DateOps.set, 'value', 'set', { property: 'timestamp' });\r\n\r\nDateComputeds.set('timestampSeconds', DateOps.get, 'value', { property: 'timestampSeconds' });\r\nDateComputeds.setWritable('timestampSeconds', DateOps.set, 'value', 'set', { property: 'timestampSeconds' });\r\n\r\nDateComputeds.set('millis', DateOps.get, 'value', { property: 'millis' });\r\nDateComputeds.setWritable('millis', DateOps.set, 'value', 'set', { property: 'millis' });\r\n\r\nDateComputeds.set('second', DateOps.get, 'value', { property: 'second' });\r\nDateComputeds.setWritable('second', DateOps.set, 'value', 'set', { property: 'second' });\r\n\r\nDateComputeds.set('minute', DateOps.get, 'value', { property: 'minute' });\r\nDateComputeds.setWritable('minute', DateOps.set, 'value', 'set', { property: 'minute' });\r\n\r\nDateComputeds.set('hour', DateOps.get, 'value', { property: 'hour' });\r\nDateComputeds.setWritable('hour', DateOps.set, 'value', 'set', { property: 'hour' });\r\n\r\nDateComputeds.set('day', DateOps.get, 'value', { property: 'day' });\r\nDateComputeds.setWritable('day', DateOps.set, 'value', 'set', { property: 'day' });\r\n\r\nDateComputeds.set('dayOfMonth', DateOps.get, 'value', { property: 'dayOfMonth' });\r\nDateComputeds.setWritable('dayOfMonth', DateOps.set, 'value', 'set', { property: 'dayOfMonth' });\r\n\r\nDateComputeds.set('lastDayOfMonth', DateOps.get, 'value', { property: 'lastDayOfMonth' });\r\nDateComputeds.setWritable('lastDayOfMonth', DateOps.set, 'value', 'set', { property: 'lastDayOfMonth' });\r\n\r\nDateComputeds.set('dayOfYear', DateOps.get, 'value', { property: 'dayOfYear' });\r\nDateComputeds.setWritable('dayOfYear', DateOps.set, 'value', 'set', { property: 'dayOfYear' });\r\n\r\nDateComputeds.set('dayOfWeek', DateOps.get, 'value', { property: 'dayOfWeek' });\r\nDateComputeds.setWritable('dayOfWeek', DateOps.set, 'value', 'set', { property: 'dayOfWeek' });\r\n\r\nDateComputeds.set('week', DateOps.get, 'value', { property: 'week' });\r\nDateComputeds.setWritable('week', DateOps.set, 'value', 'set', { property: 'week' });\r\n\r\nDateComputeds.set('weekOfMonth', DateOps.get, 'value', { property: 'weekOfMonth' });\r\nDateComputeds.setWritable('weekOfMonth', DateOps.set, 'value', 'set', { property: 'weekOfMonth' });\r\n\r\nDateComputeds.set('weekspanOfMonth', DateOps.get, 'value', { property: 'weekspanOfMonth' });\r\nDateComputeds.setWritable('weekspanOfMonth', DateOps.set, 'value', 'set', { property: 'weekspanOfMonth' });\r\n\r\nDateComputeds.set('fullWeekOfMonth', DateOps.get, 'value', { property: 'fullWeekOfMonth' });\r\nDateComputeds.setWritable('fullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'fullWeekOfMonth' });\r\n\r\nDateComputeds.set('lastWeekspanOfMonth', DateOps.get, 'value', { property: 'lastWeekspanOfMonth' });\r\nDateComputeds.setWritable('lastWeekspanOfMonth', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfMonth' });\r\n\r\nDateComputeds.set('lastFullWeekOfMonth', DateOps.get, 'value', { property: 'lastFullWeekOfMonth' });\r\nDateComputeds.setWritable('lastFullWeekOfMonth', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfMonth' });\r\n\r\nDateComputeds.set('weekOfYear', DateOps.get, 'value', { property: 'weekOfYear' });\r\nDateComputeds.setWritable('weekOfYear', DateOps.set, 'value', 'set', { property: 'weekOfYear' });\r\n\r\nDateComputeds.set('weekspanOfYear', DateOps.get, 'value', { property: 'weekspanOfYear' });\r\nDateComputeds.setWritable('weekspanOfYear', DateOps.set, 'value', 'set', { property: 'weekspanOfYear' });\r\n\r\nDateComputeds.set('fullWeekOfYear', DateOps.get, 'value', { property: 'fullWeekOfYear' });\r\nDateComputeds.setWritable('fullWeekOfYear', DateOps.set, 'value', 'set', { property: 'fullWeekOfYear' });\r\n\r\nDateComputeds.set('lastWeekspanOfYear', DateOps.get, 'value', { property: 'lastWeekspanOfYear' });\r\nDateComputeds.setWritable('lastWeekspanOfYear', DateOps.set, 'value', 'set', { property: 'lastWeekspanOfYear' });\r\n\r\nDateComputeds.set('lastFullWeekOfYear', DateOps.get, 'value', { property: 'lastFullWeekOfYear' });\r\nDateComputeds.setWritable('lastFullWeekOfYear', DateOps.set, 'value', 'set', { property: 'lastFullWeekOfYear' });\r\n\r\nDateComputeds.set('month', DateOps.get, 'value', { property: 'month' });\r\nDateComputeds.setWritable('month', DateOps.set, 'value', 'set', { property: 'month' });\r\n\r\nDateComputeds.set('quarter', DateOps.get, 'value', { property: 'quarter' });\r\nDateComputeds.setWritable('quarter', DateOps.set, 'value', 'set', { property: 'quarter' });\r\n\r\nDateComputeds.set('year', DateOps.get, 'value', { property: 'year' });\r\nDateComputeds.setWritable('year', DateOps.set, 'value', 'set', { property: 'year' });\r\n\r\nDateComputeds.set('timeIdentifier', DateOps.get, 'value', { property: 'timeIdentifier' });\r\nDateComputeds.setWritable('timeIdentifier', DateOps.set, 'value', 'set', { property: 'timeIdentifier' });\r\n\r\nDateComputeds.set('dayIdentifier', DateOps.get, 'value', { property: 'dayIdentifier' });\r\nDateComputeds.setWritable('dayIdentifier', DateOps.set, 'value', 'set', { property: 'dayIdentifier' });\r\n\r\nDateComputeds.set('weekIdentifier', DateOps.get, 'value', { property: 'weekIdentifier' });\r\nDateComputeds.setWritable('weekIdentifier', DateOps.set, 'value', 'set', { property: 'weekIdentifier' });\r\n\r\nDateComputeds.set('monthIdentifier', DateOps.get, 'value', { property: 'monthIdentifier' });\r\nDateComputeds.setWritable('monthIdentifier', DateOps.set, 'value', 'set', { property: 'monthIdentifier' });\r\n\r\nDateComputeds.set('quarterIdentifier', DateOps.get, 'value', { property: 'quarterIdentifier' });\r\nDateComputeds.setWritable('quarterIdentifier', DateOps.set, 'value', 'set', { property: 'quarterIdentifier' });\r\n\r\n\r\nDateComputeds.set('startOfSecond', DateOps.startOf, 'value', { unit: 'second' });\r\nDateComputeds.set('startOfMinute', DateOps.startOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('startOfHour', DateOps.startOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('startOfDay', DateOps.startOf, 'value', { unit: 'day' });\r\nDateComputeds.set('startOfWeek', DateOps.startOf, 'value', { unit: 'week' });\r\nDateComputeds.set('startOfMonth', DateOps.startOf, 'value', { unit: 'month' });\r\nDateComputeds.set('startOfQuarter', DateOps.startOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('startOfYear', DateOps.startOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('endOfSecond', DateOps.endOf, 'value', { unit: 'second' });\r\nDateComputeds.set('endOfMinute', DateOps.endOf, 'value', { unit: 'minute' });\r\nDateComputeds.set('endOfHour', DateOps.endOf, 'value', { unit: 'hour' });\r\nDateComputeds.set('endOfDay', DateOps.endOf, 'value', { unit: 'day' });\r\nDateComputeds.set('endOfWeek', DateOps.endOf, 'value', { unit: 'week' });\r\nDateComputeds.set('endOfMonth', DateOps.endOf, 'value', { unit: 'month' });\r\nDateComputeds.set('endOfQuarter', DateOps.endOf, 'value', { unit: 'quarter' });\r\nDateComputeds.set('endOfYear', DateOps.endOf, 'value', { unit: 'year' });\r\n\r\nDateComputeds.set('daysInMonth', DateOps.daysInMonth);\r\nDateComputeds.set('daysInYear', DateOps.daysInYear);\r\nDateComputeds.set('weeksInYear', DateOps.weeksInYear);\r\nDateComputeds.set('timezoneOffset', DateOps.timezoneOffset);\r\nDateComputeds.set('toISOText', DateOps.toISOText);\r\nDateComputeds.set('isDST', DateOps.isDST);\r\nDateComputeds.set('isLeapYear', DateOps.isLeapYear);\r\n","\r\nimport { isDate, isEmpty, isObject, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Unit, parse, startOf, endOf } from '../util/date/DateFunctions';\r\nimport { Expression } from '../Expression';\r\nimport { DateOps, DateOperations, DateComputeds } from '../ops/DateOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser } from '../Traverser';\r\nimport { Exprs } from '../Exprs';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\nexport interface DateOptions \r\n{\r\n  parseAsUTC?: boolean;\r\n  validateMin?: Date;\r\n  validateMax?: Date;\r\n  forceMin?: Date;\r\n  forceMax?: Date;\r\n  forceStartOf?: Unit;\r\n  forceEndOf?: Unit;\r\n  withTime?: boolean;\r\n}\r\n\r\nexport class DateType extends Type<DateOptions> \r\n{\r\n\r\n  public static id = ID.Date;\r\n\r\n  public static operations = DateOperations;\r\n\r\n  public static computeds = DateComputeds;\r\n\r\n  public static baseType = new DateType({});\r\n\r\n  public static decode(data: any[], types: TypeProvider): DateType \r\n  {\r\n    return new DateType(this.decodeOptions(data[INDEX_OPTIONS] || {}));\r\n  }\r\n\r\n  public static encode(type: DateType): any \r\n  {\r\n    return isEmpty(type.options)\r\n      ? this.id\r\n      : [this.id, this.encodeOptions(type.options)];\r\n  }\r\n\r\n  private static decodeOptions(options: any): DateOptions\r\n  {\r\n    if (options.validateMin) options.validateMin = new Date(options.validateMin);\r\n    if (options.validateMax) options.validateMax = new Date(options.validateMax);\r\n    if (options.forceMin) options.forceMin = new Date(options.forceMin);\r\n    if (options.forceMax) options.forceMax = new Date(options.forceMax);\r\n\r\n    return options;\r\n  }\r\n\r\n  private static encodeOptions(options: DateOptions): any\r\n  {\r\n    const encoded: any = { ...options };\r\n\r\n    if (encoded.validateMin) encoded.validateMin = encoded.validateMin.toISOString();\r\n    if (encoded.validateMax) encoded.validateMax = encoded.validateMax.toISOString();\r\n    if (encoded.forceMin) encoded.forceMin = encoded.forceMin.toISOString();\r\n    if (encoded.forceMax) encoded.forceMax = encoded.forceMax.toISOString();\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public static describePriority: number = 6;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    if (!isDate(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new DateType({\r\n      validateMin: new Date(data.getTime()),\r\n      validateMax: new Date(data.getTime())\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 9;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n\r\n        if (at) {\r\n          return a.getTime() - b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b) => {\r\n        const at = isDate(a);\r\n        const bt = isDate(b);\r\n\r\n        if (at !== bt) return false;\r\n\r\n        if (at) {\r\n          return a.getTime() === b.getTime();\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'date') {\r\n          return new Date(json.value);\r\n        }\r\n      },\r\n      toJson: (json: Date) => {\r\n        if (isDate(json)) {\r\n          return { $any: 'date', value: json.toISOString() };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, _, setObjectCopy) => {\r\n        if (isDate(x)) {\r\n          const newDate = new Date(x.getTime());\r\n\r\n          setObjectCopy(x, newDate);\r\n  \r\n          return newDate;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return DateType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return DateType.operations.map;\r\n  }\r\n\r\n  public merge(type: DateType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.parseAsUTC = o1.parseAsUTC && o2.parseAsUTC;\r\n    \r\n    if (o1.validateMin && o2.validateMin)\r\n    {\r\n      o1.validateMin.setTime(Math.min(o1.validateMin.getTime(), o2.validateMin.getTime()));\r\n    }\r\n\r\n    if (o1.validateMax && o2.validateMax)\r\n    {\r\n      o1.validateMax.setTime(Math.max(o1.validateMax.getTime(), o2.validateMax.getTime()));\r\n    }\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions = {}): boolean \r\n  {\r\n    if (!(other instanceof DateType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (options.value)\r\n    {\r\n      if (other.options.withTime && !this.options.withTime)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const min = this.getMin();\r\n      const otherMin = other.getMin();\r\n\r\n      if (min && (!otherMin || otherMin.getTime() < min.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const max = this.getMax();\r\n      const otherMax = other.getMax();\r\n\r\n      if (max && (!otherMax || otherMax.getTime() > max.getTime()))\r\n      {\r\n        return false;\r\n      }\r\n\r\n      const { forceStartOf, forceEndOf } = this.options;\r\n\r\n      if (forceStartOf && forceStartOf !== other.options.forceStartOf)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      if (forceEndOf && forceEndOf !== other.options.forceEndOf)\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this);\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    const { parseAsUTC, withTime } = this.options;\r\n\r\n    this.options = { parseAsUTC, withTime };\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(DateOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    const { parseAsUTC, validateMin, validateMax } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMin && parsed.getTime() < validateMin.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (validateMax && parsed.getTime() > validateMax.getTime())\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    const { parseAsUTC, forceMin, forceMax, forceStartOf, forceEndOf } = this.options;\r\n    const parsed = parse(value, parseAsUTC);\r\n\r\n    if (!parsed)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    if (forceMin && parsed.getTime() < forceMin.getTime())\r\n    {\r\n      parsed.setTime(forceMin.getTime());\r\n    }\r\n    \r\n    if (forceMax && parsed.getTime() > forceMax.getTime())\r\n    {\r\n      parsed.setTime(forceMax.getTime());\r\n    }\r\n\r\n    if (forceStartOf)\r\n    {\r\n      startOf[forceStartOf](parsed);\r\n    }\r\n\r\n    if (forceEndOf)\r\n    {\r\n      endOf[forceEndOf](parsed);\r\n    }\r\n\r\n    return parsed;\r\n  }\r\n\r\n  public newInstance(): DateType\r\n  {\r\n    return new DateType({});\r\n  }\r\n\r\n  public clone(): DateType\r\n  {\r\n    return new DateType(DataTypes.copy(this.options));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return DateType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return new Date();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const value = new Date();\r\n\r\n    const min = this.getMin();\r\n    const max = this.getMax();\r\n\r\n    const start = min ? min.getTime() : value.getTime();\r\n    const end = max ? max.getTime() : value.getTime();\r\n\r\n    return new Date(rnd(start, end, true));\r\n  }\r\n\r\n  public getMin(): Date | undefined\r\n  {\r\n    return this.options.validateMin || this.options.forceMin;\r\n  }\r\n\r\n  public getMax(): Date | undefined\r\n  {\r\n    return this.options.validateMax || this.options.forceMax;\r\n  }\r\n\r\n  public fromJson(json: string): Date\r\n  {\r\n    return new Date(json);\r\n  }\r\n\r\n  public toJson(value: Date): string\r\n  {\r\n    return value ? value.toISOString() : null;\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations, OperationGeneric } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { isSameClass, isNumber } from '../fns';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_MANY = 1;\r\n\r\nexport class ManyType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Many;\r\n\r\n  public static operations = new Operations(ID.Many + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Many + ID.Delimiter);\r\n\r\n  public static baseType = new ManyType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ManyType \r\n  {\r\n    const many = data[INDEX_MANY].map((d: any) => types.getType(d));\r\n\r\n    return new ManyType(many);\r\n  }\r\n\r\n  public static encode(type: ManyType): any \r\n  {\r\n    const many = type.options.map(t => t.encode());\r\n\r\n    return [this.id, many];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public operations?: Record<string, OperationGeneric>;\r\n\r\n  public getOperations()\r\n  {\r\n    if (!this.operations)\r\n    {\r\n      this.operations = {};\r\n\r\n      this.options.forEach(many => \r\n      {\r\n        const ops = many.getOperations();\r\n        \r\n        for (const prop in ops) \r\n        {\r\n          this.operations[prop] = ops[prop];\r\n        }\r\n      });\r\n    }\r\n\r\n    return this.operations;\r\n  }\r\n\r\n  private forMany<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const many = this.options;\r\n\r\n    for (const type of many)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ManyType.id;\r\n  }\r\n\r\n  public merge(type: ManyType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    for (const sub of this.options)\r\n    {\r\n      const subType = sub.getSubType(expr, def, context);\r\n\r\n      if (subType)\r\n      {\r\n        return subType;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    const subs: TypeSub[] = [];\r\n\r\n    this.options.forEach(type => {\r\n      type.getSubTypes(def).forEach(sub => {\r\n        const matching = subs.find(existing => \r\n          existing.key === sub.key || (\r\n            existing.key instanceof Type && \r\n            sub.key instanceof Type && \r\n            isSameClass(existing.key, sub.key)\r\n          )\r\n        );\r\n\r\n        if (!matching) {\r\n          subs.push(sub);\r\n        }\r\n      });\r\n    });\r\n\r\n    subs.sort((a, b) => {\r\n      const ad = a.key instanceof Type ? 1 : 0;\r\n      const bd = b.key instanceof Type ? 1 : 0;\r\n\r\n      return ad - bd;\r\n    });\r\n\r\n    return subs;\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.forMany<Type>(this, many => (many.isValid(value) ? many : undefined));\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.options.length === 1\r\n      ? this.options[0]\r\n      : this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.isOptional()\r\n      ? new ManyType(this.options.map((o) => o.getRequired()))\r\n      : this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forMany(false, many => many.isCompatible(other, options) ? true : undefined);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isOptional() ? false : undefined);\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.forMany(true, many => !many.isSimple() ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options[0].getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      ...this.options.map((t) => t.getValidateExpression())\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(AnyOps.cmp, {\r\n      value: Exprs.get('value'), \r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = sub type index\r\n    const hasFrom = isNumber(from);\r\n    const hasTo = isNumber(to);\r\n\r\n    if (hasFrom && !hasTo) // removed\r\n    {\r\n      const targetType = from === 0 ? this.options[1] : this.options[0];\r\n      const valueType = this.options[from];\r\n      const casting = Exprs.cast(valueType, targetType);\r\n\r\n      return Exprs\r\n        .if(targetType.getValidateExpression())\r\n        .than(Exprs.get('value'))\r\n        .else(casting)\r\n      ;\r\n    }\r\n    else if (!hasFrom && hasTo) // added\r\n    {\r\n      return newValue;\r\n    }\r\n    else if (to === from && hasFrom) // change\r\n    {\r\n      return Exprs\r\n        .if(Exprs.not(this.getValidateExpression()))\r\n        .than(newValue)\r\n        .else(Exprs.get('value'))\r\n      ;\r\n    }\r\n\r\n    return newValue;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forMany(false, many => many.isValid(value) ? true : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forMany(value, many => many.isValid(value) ? many.normalize(value) : undefined);\r\n  }\r\n\r\n  public newInstance(): ManyType\r\n  {\r\n    return new ManyType([]);\r\n  }\r\n\r\n  public clone(): ManyType\r\n  {\r\n    return new ManyType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ManyType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options.length > 0\r\n      ? this.options[0].create()\r\n      : null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const options = this.options;\r\n    const chosen = rnd(0, options.length, true);\r\n\r\n    return options[chosen].random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      const parsed = many.normalize(json);\r\n\r\n      if (parsed !== null && parsed !== undefined)\r\n      {\r\n        return parsed;\r\n      }\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    const options = this.options;\r\n\r\n    for (const many of options)\r\n    {\r\n      if (many.isValid(value))\r\n      {\r\n        return many.toJson(value);\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n}\r\n","\r\nimport { isObject, isMap, isSameClass, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { TextType } from './Text';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { MapOps, MapOperations, MapComputeds } from '../ops/MapOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypes, DataTypeRaw } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_KEY = 2;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface MapOptions \r\n{\r\n  key: Type;\r\n  value: Type;\r\n}\r\n\r\nexport class MapType extends Type<MapOptions> \r\n{\r\n\r\n  public static STEP_KEY = 'key';\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Map;\r\n\r\n  public static operations = MapOperations;\r\n\r\n  public static computeds = MapComputeds;\r\n\r\n  public static baseType = new MapType({ key: TextType.baseType, value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): MapType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    const key = data[INDEX_KEY] ? types.getType(data[INDEX_KEY]) : TextType.baseType;\r\n\r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public static encode(type: MapType): any \r\n  {\r\n    const { key, value } = type.options;\r\n\r\n    return key !== TextType.baseType\r\n      ? [this.id, value.encode()]\r\n      : [this.id, value.encode(), key.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    if (!isMap(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let key: Type = new AnyType({});\r\n    let value: Type = new AnyType({});\r\n\r\n    for (const [entryKey, entryValue] of data.entries())\r\n    {\r\n      key = describer.merge(key, entryKey);\r\n      value = describer.merge(value, entryValue);\r\n    }\r\n\r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 10;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'map') {\r\n          return new Map(json.value.map(([key, value]: [any, any]) => [reader(key), reader(value)]));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isMap(json)) {\r\n          return {\r\n            $any: 'map',\r\n            value: Array.from(json.entries())\r\n              .map(([k, v]: [any, any]) => [writer(k), writer(v)])\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isMap(x)) {\r\n          const newMap = new Map();\r\n\r\n          setObjectCopy(x, newMap);\r\n  \r\n          for (const [key, value] of x.entries()) {\r\n            newMap.set(copy(key), copy(value));\r\n          }\r\n  \r\n          return newMap;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          let less = 0;\r\n          let more = 0;\r\n\r\n          for (const key of a.keys()) {\r\n            if (!b.has(key)) {\r\n              less++;\r\n            }\r\n          }\r\n\r\n          for (const key of b.keys()) {\r\n            if (!a.has(key)) {\r\n              more++;\r\n            } else {\r\n              const c = compare(a.get(key), b.get(key));\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n          }\r\n\r\n          return DataTypes.getCompare(less, more);\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const at = isMap(a);\r\n        const bt = isMap(b);\r\n\r\n        if (at !== bt) return false;\r\n        \r\n        if (isMap(a) && isMap(b)) {\r\n          if (a.size !== b.size) {\r\n            return false;\r\n          }\r\n\r\n          for (const [key, value] of a.entries()) {\r\n            if (!b.has(key)) {\r\n              return false;\r\n            } else if (!equals(value, b.get(key))) {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addAccessor<Map<any, any>>({\r\n      priority,\r\n      isValid: (value) => isMap(value),\r\n      get: (value, step) => value.get(step),\r\n      set: (value, step, stepValue) => value.set(step, stepValue),\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput, keyOrClass: TypeInput = TextType)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    const key = Types.parse(keyOrClass);\r\n    \r\n    return new MapType({ key, value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return MapType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return MapType.operations.map;\r\n  }\r\n\r\n  public merge(type: MapType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.key = Types.merge(o1.key, o2.key);\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    if (ConstantExpression.is(expr))\r\n    {\r\n      if (this.options.key.isValid(expr.value))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    let exprType = expr.getType(def, context);\r\n\r\n    if (exprType)\r\n    {\r\n      exprType = exprType.getRequired();\r\n\r\n      if (isSameClass(exprType, this.options.key))\r\n      {\r\n        return this.options.value;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [\r\n      { key: this.options.key, value: this.options.value },\r\n    ];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof MapType && \r\n      this.options.key.isCompatible(other.options.key, options) && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(MapType.STEP_KEY, this.options.key, (replaceWith) => this.options.key = replaceWith);\r\n      traverse.step(MapType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === MapType.STEP_KEY\r\n      ? this.options.key\r\n      : step === MapType.STEP_VALUE\r\n        ? this.options.value\r\n        : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.key.setParent(this);\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.key.removeDescribedRestrictions();\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(MapOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.values, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(MapOps.keys, { map: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.key.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(MapOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n      compare: this.options.value.getValidateExpression(),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = key or value\r\n    if (from === MapType.STEP_KEY) \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transformKey: newValue,\r\n      }, {\r\n        key: 'value',\r\n        value: 'actualValue',\r\n      });\r\n    } \r\n    else \r\n    {\r\n      return Exprs.op(MapOps.map, {\r\n        map: Exprs.get('value'),\r\n        transform: newValue,\r\n      });\r\n    }\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Map || isObject(test))\r\n    {\r\n      const { key, value } = this.options;\r\n\r\n      return this.iterate(test, true, (k, v) => {\r\n        if (!key.isValid(k) || !value.isValid(v)) {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const entries: [any, any][] = [];\r\n\r\n    this.iterate(test, undefined, (k, v) => {\r\n      entries.push([\r\n        key.normalize(k),\r\n        value.normalize(v)\r\n      ]);\r\n    });\r\n\r\n    return new Map(entries);\r\n  }\r\n\r\n  private iterate<R>(map: any, otherwise: R, onItem: (key: any, value: any) => R): R\r\n  {\r\n    if (map instanceof Map)\r\n    {\r\n      for (const [key, value] of map.entries())\r\n      {\r\n        const result = onItem(key, value);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    else if (isObject(map))\r\n    {\r\n      for (const prop of map)\r\n      {\r\n        const result = onItem(prop, map[prop]);\r\n\r\n        if (result !== undefined)\r\n        {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n    \r\n    return otherwise;\r\n  }\r\n\r\n  public newInstance(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.newInstance(),\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): MapType\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new MapType({\r\n      key: key.clone(),\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return MapType.encode(this);\r\n  }\r\n\r\n  public create(): Map<any, any>\r\n  {\r\n    return new Map();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { key, value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Map<any, any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const k = key.random(rnd);\r\n      const v = value.random(rnd);\r\n\r\n      out.set(k, v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<[any, any]>): Map<any, any>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return new Map(json.map(([k, v]) => [\r\n      key.fromJson(k),\r\n      value.fromJson(v)\r\n    ]));\r\n  }\r\n\r\n  public toJson(map: Map<any, any>): Array<[any, any]>\r\n  {\r\n    const { key, value } = this.options;\r\n\r\n    return Array.from(map.entries()).map(([k, v]) => [\r\n      key.toJson(k),\r\n      value.toJson(v)\r\n    ]);\r\n  }\r\n\r\n}","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeInput, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { AnyOps } from '../ops/AnyOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Computeds } from '../Computed';\r\nimport { Types } from '../Types';\r\nimport { AnyType } from './Any';\r\n\r\n\r\nconst INDEX_TYPE = 1;\r\nconst RANDOM_CHANCE = 0.3;\r\n\r\nexport class OptionalType extends Type<Type>\r\n{\r\n\r\n  public static STEP_OPTIONAL = 'optional';\r\n\r\n  public static id = ID.Optional;\r\n\r\n  public static operations = new Operations(ID.Optional + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Optional + ID.Delimiter);\r\n\r\n  public static baseType = new OptionalType(AnyType.baseType);\r\n\r\n  public static decode(data: any[], types: TypeProvider): OptionalType \r\n  {\r\n    const type = types.getType(data[INDEX_TYPE]);\r\n\r\n    return new OptionalType( type );\r\n  }\r\n\r\n  public static encode(type: OptionalType): any \r\n  {\r\n    return [this.id, type.options.encode()];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static for(type: TypeInput): OptionalType\r\n  {\r\n    return new OptionalType(Types.parse(type));\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.options.getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return OptionalType.id;\r\n  }\r\n\r\n  public merge(type: OptionalType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.options.getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.options.getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.options.getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getRequired(): Type\r\n  {\r\n    return this.options;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof OptionalType\r\n      ? this.options.isCompatible(other.options, options)\r\n      : this.options.isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.options.isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(OptionalType.STEP_OPTIONAL, this.options, (replaceWith) => this.options = replaceWith)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === OptionalType.STEP_OPTIONAL\r\n      ? this.options\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.options.getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.or(\r\n      Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'),\r\n        test: Exprs.undefined(),\r\n      }),\r\n      this.options.getValidateExpression(),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.define({\r\n      valueMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('value'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n      testMissing: Exprs.op(AnyOps.isEqual, {\r\n        value: Exprs.get('test'), \r\n        test: Exprs.undefined(),\r\n      }),\r\n    }, Exprs\r\n      .if(Exprs.and(Exprs.get('valueMissing'), Exprs.get('testMissing')))\r\n      .than(Exprs.compareEqual())\r\n      .if(Exprs.get('valueMissing'))\r\n      .than(Exprs.compareLess())\r\n      .if(Exprs.get('testMissing'))\r\n      .than(Exprs.compareGreater())\r\n      .else(this.options.getCompareExpression()),\r\n    );\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = optional\r\n    return Exprs\r\n      .if(this.options.getValidateExpression())\r\n      .than(newValue)\r\n      .else(Exprs.get('value'))\r\n    ;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return value === null \r\n      || value === undefined\r\n      || this.options.isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return value === null || value === undefined\r\n      ? value\r\n      : this.options.normalize(value);\r\n  }\r\n\r\n  public newInstance(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.newInstance());\r\n  }\r\n\r\n  public clone(): OptionalType\r\n  {\r\n    return new OptionalType(this.options.clone());\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return OptionalType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.options ? this.options.create() : undefined;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.options && rnd(0, 1, false) > RANDOM_CHANCE\r\n      ? this.options.random(rnd)\r\n      : undefined;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return json === undefined || json === null ? undefined : this.options.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return value === undefined || value === null ? undefined : this.options.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Operations } from '../Operation';\r\nimport { AnyType } from './Any';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NOT = 1;\r\n\r\nexport class NotType extends Type<Type[]>\r\n{\r\n\r\n  public static id = ID.Not;\r\n\r\n  public static operations = new Operations(ID.Not + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Not + ID.Delimiter);\r\n\r\n  public static baseType = new NotType([AnyType.baseType]);\r\n\r\n  public static decode(data: any[], types: TypeProvider): NotType \r\n  {\r\n    const not = data[INDEX_NOT].map((d: any) => types.getType(d));\r\n\r\n    return new NotType(not);\r\n  }\r\n\r\n  public static encode(type: NotType): any \r\n  {\r\n    const not = type.options.map(t => t.encode());\r\n\r\n    return [this.id, not];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public getOperations()\r\n  { \r\n    return {};\r\n  }\r\n\r\n  private forNot<T> (otherwise: T, handler: (type: Type) => T | undefined): T\r\n  {\r\n    const not = this.options;\r\n\r\n    for (const type of not)\r\n    {\r\n      const result = handler(type);\r\n\r\n      if (result !== undefined)\r\n      {\r\n        return result;\r\n      } \r\n    }\r\n\r\n    return otherwise;\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return NotType.id;\r\n  }\r\n\r\n  public merge(type: NotType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return this.forNot(true, not => not.isCompatible(other, options) ? false : undefined);\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return true;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () =>\r\n      this.options.map((type, index) => traverse.step(index, type, (replaceWith) => this.options.splice(index, 1, replaceWith), () => this.options.splice(index, 1)))\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return this.options[step] || null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.forEach(t => t.setParent(this));\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.forEach(t => t.removeDescribedRestrictions());\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return NoExpression.instance;\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.forNot(true, many => many.isValid(value) ? false : undefined);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.forNot(value, many => many.isValid(value) ? null : undefined);\r\n  }\r\n\r\n  public newInstance(): NotType\r\n  {\r\n    return new NotType([]);\r\n  }\r\n\r\n  public clone(): NotType\r\n  {\r\n    return new NotType(this.options.map(e => e.clone()));\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return NotType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return AnyType.baseType.fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return AnyType.baseType.toJson(value);\r\n  }\r\n\r\n}\r\n","\r\nimport { ID } from '../types/ID';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const ColorOperations = new Operations(ID.Color + ID.Delimiter);\r\n\r\nexport const ColorComputeds = new Computeds(ID.Color + ID.Delimiter);\r\n\r\nconst ops = ColorOperations;\r\n\r\n\r\nexport const ColorOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create', {}),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  cmp: ops.set('cmp', {}, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', {}, ['value']),\r\n\r\n  build: ops.set('build', {}, ['r', 'g', 'b'], ['a']),\r\n\r\n  map: ops.set('map', {}, ['value', 'r', 'g', 'b'], ['a'], ['value', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  op: ops.set('op', {}, ['value', 'test', 'r', 'g', 'b'], ['a'], ['value', 'test', 'component'], ['r', 'g', 'b', 'a']),\r\n\r\n  clamp: ops.set('clamp', {}, ['value']),\r\n\r\n  add: ops.set('+', {}, ['value', 'addend'], ['alpha']),\r\n\r\n  adds: ops.set('+*', {}, ['value', 'addend', 'addendScale'], ['alpha']),\r\n\r\n  sub: ops.set('-', {}, ['value', 'subtrahend'], ['alpha']),\r\n\r\n  mul: ops.set('*', {}, ['value', 'multiplier'], ['alpha']),\r\n\r\n  div: ops.set('/', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  mod: ops.set('%', {}, ['value', 'divisor'], ['alpha']),\r\n\r\n  format: ops.set('format', {}, ['value', 'format']),\r\n\r\n  parse: ops.set('parse', {}, ['value']),\r\n\r\n  lerp: ops.set('lerp', {}, ['start', 'end', 'delta']),\r\n\r\n  lighten: ops.set('lighten', {}, ['value', 'amount']),\r\n\r\n  darken: ops.set('darken', {}, ['value', 'amount']),\r\n\r\n  toHSL: ops.set('->hsl', {}, ['value']),\r\n\r\n  fromHSL: ops.set('<-hsl', {}, ['value']),\r\n\r\n  luminance: ops.set('luminance', {}, ['value']),\r\n\r\n  contrast: ops.set('contrast', {}, ['value', 'test']),\r\n\r\n  invert: ops.set('invert', {}, ['value'], ['alpha']),\r\n\r\n  opaque: ops.set('opaque', {}, ['value']),\r\n\r\n  alpha: ops.set('alpha', {}, ['value', 'alpha']),\r\n\r\n  distance: ops.set('distance', {}, ['value', 'test']),\r\n\r\n  named: ops.set('named', {}, ['name']),\r\n\r\n  getName: ops.set('getName', {}, ['value']),\r\n\r\n  blend: ops.set('blend', {}, ['top', 'bottom', 'mode']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isNotEqual: ops.set('!=', {}, ['value', 'test'], ['epsilon']),\r\n\r\n  isLess: ops.set('<', {}, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', {}, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', {}, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', {}, ['value', 'test']),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nColorComputeds.set('toHSL', ColorOps.toHSL);\r\nColorComputeds.set('luminance', ColorOps.luminance);\r\nColorComputeds.set('inverted', ColorOps.invert);\r\nColorComputeds.set('opaque', ColorOps.opaque);\r\nColorComputeds.set('name', ColorOps.getName);","\r\nimport { isObject, isNumber, clamp } from '../../fns';\r\n\r\n\r\nexport const COMPONENT_MIN = 0;\r\nexport const COMPONENT_MAX = 255;\r\n\r\nexport interface Color\r\n{\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n}\r\n\r\nexport function isColor(x: any): x is Color\r\n{\r\n  return isObject(x) && isNumber(x.r) && isNumber(x.g) && isNumber(x.b);\r\n}\r\n\r\nexport function clampComponent(x: number): number\r\n{\r\n  return clamp(Math.round(x), COMPONENT_MIN, COMPONENT_MAX);\r\n}","\r\nimport { Color } from './Color';\r\nimport { Type } from '../../Type';\r\n\r\n\r\n\r\nexport type ColorSpaceToColor<T> = (color: T) => Color;\r\n\r\nexport type ColorSpaceFromColor<T> = (color: Color) => T;\r\n\r\nexport type ColorFormatParser<T> = (value: any) => T | null;\r\n\r\nexport type ColorFormatFormatter<T> = (color: T) => any;\r\n\r\n\r\nexport interface ColorFormat<T>\r\n{\r\n  code: string;\r\n  name: string;\r\n  parser: ColorFormatParser<T>;\r\n  formatter: ColorFormatFormatter<T>;\r\n}\r\n\r\n\r\nexport class ColorSpace<T>\r\n{\r\n  public code: string;\r\n  public name: string;\r\n  public type: Type;\r\n  public toColor: ColorSpaceToColor<T>;\r\n  public fromColor: ColorSpaceFromColor<T>;\r\n  public formatMap: Record<string, ColorFormat<T>>;\r\n  public formats: ColorFormat<T>[];\r\n\r\n  public constructor(code: string, name: string)\r\n  {\r\n    this.code = code;\r\n    this.name = name;\r\n    this.formatMap = {};\r\n    this.formats = [];\r\n  }\r\n\r\n  public setType(type: Type): this\r\n  {\r\n    this.type = type;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setToColor(toColor: ColorSpaceToColor<T>): this\r\n  {\r\n    this.toColor = toColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setFromColor(fromColor: ColorSpaceFromColor<T>): this\r\n  {\r\n    this.fromColor = fromColor;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addFormat(format: ColorFormat<T>): this\r\n  {\r\n    this.formatMap[format.code] = format;\r\n    this.formats.push(format);\r\n\r\n    return this;\r\n  }\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { Color, COMPONENT_MAX, clampComponent, isColor } from './Color';\r\nimport { isString, pad } from '../../fns';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport const ColorSpaceRGB = new ColorSpace<Color>('rgb', 'RGB')\r\n  .setToColor((color) => color)\r\n  .setFromColor((color) => color)\r\n  .addFormat({\r\n    code: 'default',\r\n    name: 'Default',\r\n    parser: (data) => {\r\n      if (!isColor(data)) {\r\n        return null;\r\n      }\r\n\r\n      return data;\r\n    },\r\n    formatter: (color) => {\r\n      return color;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'bestfit',\r\n    name: 'Best Fit',\r\n    parser: (data) => {\r\n      return null;\r\n    },\r\n    formatter: (color) => {\r\n      if (color.a === COMPONENT_MAX) {\r\n        const r = formatHex(color.r);\r\n        const g = formatHex(color.g);\r\n        const b = formatHex(color.b);\r\n\r\n        return '#' + r + g + b;\r\n      } else {\r\n        const r = clampComponent(color.r);\r\n        const g = clampComponent(color.g);\r\n        const b = clampComponent(color.b);\r\n        const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n      }\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexShort',\r\n    name: 'Hex (#rgb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r + r, 16),\r\n        g: parseInt(g + g, 16),\r\n        b: parseInt(b + b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r).substring(0, 1);\r\n      const g = formatHex(color.g).substring(0, 1);\r\n      const b = formatHex(color.b).substring(0, 1);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hex',\r\n    name: 'Hex (#rrggbb)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n\r\n      return '#' + r + g + b;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hexLong',\r\n    name: 'Hex (#rrggbbaa)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n    \r\n      return {\r\n        r: parseInt(r, 16),\r\n        g: parseInt(g, 16),\r\n        b: parseInt(b, 16),\r\n        a: parseInt(a, 16),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = formatHex(color.r);\r\n      const g = formatHex(color.g);\r\n      const b = formatHex(color.b);\r\n      const a = formatHex(color.a);\r\n\r\n      return '#' + r + g + b + a;\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgb',\r\n    name: 'rgb(r, g, b)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n\r\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'rgba',\r\n    name: 'rgba(r, g, b, a)',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^rgb\\(\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*(\\d{1,3}%?)\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, r, g, b, a] = matches;\r\n\r\n      return {\r\n        r: parseComponent(r),\r\n        g: parseComponent(g),\r\n        b: parseComponent(b),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const r = clampComponent(color.r);\r\n      const g = clampComponent(color.g);\r\n      const b = clampComponent(color.b);\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction parseComponent(x: string): number\r\n{\r\n  return x.indexOf('%') === -1\r\n    ? clampComponent(parseInt(x, 10))\r\n    : clampComponent(parseInt(x.substring(0, x.length - 1), 10) * 2.55);\r\n}\r\n\r\nfunction formatHex(x: number)\r\n{\r\n  return pad(clampComponent(x).toString(16), 2, '0', true);\r\n}","\r\nimport { ColorSpace } from './ColorSpace';\r\nimport { COMPONENT_MAX, clampComponent } from './Color';\r\nimport { isString, clamp, isObject, isNumber } from '../../fns';\r\nimport { NumberType } from '../../types/Number';\r\nimport { ObjectType } from '../../types/Object';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\nexport type ColorHSL = { h: number; s: number; l: number, a: number };\r\n\r\n\r\nexport function isColorHSL(x: any): x is ColorHSL\r\n{\r\n  return isObject(x) && isNumber(x.h) && isNumber(x.s) && isNumber(x.l);\r\n}\r\n\r\n\r\nexport const ColorSpaceHSL = new ColorSpace<ColorHSL>('hsl', 'HSL')\r\n  .setType(new ObjectType({props: {\r\n    h: new NumberType({ min: 0, max: 360, whole: true }),\r\n    s: new NumberType({ min: 0, max: 100, whole: true }),\r\n    l: new NumberType({ min: 0, max: 100, whole: true }),\r\n    a: new NumberType({ min: 0, max: 255, whole: true }),\r\n  }}))\r\n  .setToColor((color) => {\r\n    const H = normalizeHue(color.h);\r\n    const L = clampPercent(color.l) / 100;\r\n    const S = clampPercent(color.s) / 100;\r\n    const C = (1 - Math.abs(2 * L - 1)) * S;\r\n    const X = C * (1 - Math.abs(((H / 60) % 2) - 1));\r\n    const m = L - C / 2;\r\n    const r1 = H < 60 || H >= 300\r\n      ? C\r\n      : H >= 120 && H < 240\r\n        ? 0\r\n        : X;\r\n    const g1 = H >= 240\r\n      ? 0\r\n      : H >= 60 && H < 180\r\n        ? C\r\n        : X;\r\n    const b1 = H <= 120\r\n      ? 0\r\n      : H >= 180 && H < 300\r\n        ? C\r\n        : X;\r\n\r\n    return {\r\n      r: clampComponent((r1 + m) * COMPONENT_MAX),\r\n      g: clampComponent((g1 + m) * COMPONENT_MAX),\r\n      b: clampComponent((b1 + m) * COMPONENT_MAX),\r\n      a: color.a\r\n    };\r\n  })\r\n  .setFromColor((color) => {\r\n    const R = clampComponent(color.r);\r\n    const G = clampComponent(color.g);\r\n    const B = clampComponent(color.b);\r\n    const r1 = R / COMPONENT_MAX;\r\n    const g1 = G / COMPONENT_MAX;\r\n    const b1 = B / COMPONENT_MAX;\r\n    const Cmax = Math.max(r1, g1, b1);\r\n    const Cmin = Math.min(r1, g1, b1);\r\n    const delta = Cmax - Cmin;\r\n    const L = (Cmax + Cmin) / 2;\r\n    const h = delta === 0\r\n      ? 0\r\n      : Cmax === r1\r\n        ? ((g1 - b1) / delta) % 6\r\n        : Cmax === g1\r\n          ? ((b1 - r1) / delta) + 2\r\n          : ((r1 - g1) / delta) + 4;\r\n    const s = delta === 0\r\n      ? 0\r\n      : delta / (1 - Math.abs(2 * L - 1));\r\n\r\n    return {\r\n      h: normalizeHue(Math.round(h * 60)),\r\n      s: clampPercent(Math.round(s * 100)),\r\n      l: clampPercent(Math.round(L * 100)),\r\n      a: color.a,\r\n    };\r\n  })\r\n  .addFormat({\r\n    code: 'hsl',\r\n    name: 'HSL',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: COMPONENT_MAX,\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n\r\n      return 'hsl(' + h + ',' + s + '%,' + l + '%)';\r\n    },\r\n  })\r\n  .addFormat({\r\n    code: 'hsla',\r\n    name: 'HSLA',\r\n    parser: (data) => {\r\n      if (!isString(data)) {\r\n        return null;\r\n      }\r\n    \r\n      const matches = /^hsl\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})%\\s*,\\s*(\\d{1,3})%\\s*,\\s*([01]?\\.?[0-9]*)\\s*\\)$/i.exec(data);\r\n      if (!matches) {\r\n        return null;\r\n      }\r\n    \r\n      const [, h, s, l, a] = matches;\r\n    \r\n      return {\r\n        h: normalizeHue(parseInt(h, 10)),\r\n        s: clampPercent(parseInt(s, 10)),\r\n        l: clampPercent(parseInt(l, 10)),\r\n        a: clampComponent(Math.floor(parseFloat(a) * COMPONENT_MAX)),\r\n      };\r\n    },\r\n    formatter: (color) => {\r\n      const h = normalizeHue(Math.round(color.h));\r\n      const s = clampPercent(Math.round(color.s));\r\n      const l = clampPercent(Math.round(color.l));\r\n      const a = clampComponent(color.a) / COMPONENT_MAX;\r\n\r\n      return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';\r\n    },\r\n  })\r\n;\r\n\r\nfunction normalizeHue(h: number): number\r\n{\r\n  return h < 0 \r\n    ? 360 - Math.abs(h % 360)\r\n    : h % 360;\r\n}\r\n\r\nfunction clampPercent(x: number)\r\n{\r\n  return clamp(x, 0, 100);\r\n}","\r\nimport { Type, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { ColorOps, ColorOperations, ColorComputeds } from '../ops/ColorOps';\r\nimport { ID } from './ID';\r\nimport { NumberType } from './Number';\r\nimport { Color, COMPONENT_MIN, COMPONENT_MAX } from '../util/color/Color';\r\nimport { ColorSpaceRGB } from '../util/color/ColorSpaceRGB';\r\nimport { ColorSpace, ColorFormat } from '../util/color/ColorSpace';\r\nimport { ColorSpaceHSL } from '../util/color/ColorSpaceHSL';\r\nimport { ObjectType, ObjectOptions } from './Object';\r\nimport { Exprs } from '../Exprs';\r\n\r\n\r\nconst INDEX_OPTIONS = 1;\r\n\r\n\r\nexport interface ColorOptions extends ObjectOptions\r\n{\r\n  hasAlpha?: boolean;\r\n}\r\n\r\n\r\nexport class ColorType extends ObjectType<ColorOptions>\r\n{\r\n\r\n  public static readonly componentType = new NumberType({ \r\n    min: COMPONENT_MIN, \r\n    max: COMPONENT_MAX, \r\n    whole: true \r\n  });\r\n\r\n  public static readonly componentProps = {\r\n    r: ColorType.componentType,\r\n    g: ColorType.componentType,\r\n    b: ColorType.componentType,\r\n    a: ColorType.componentType,\r\n  };\r\n\r\n  public static spaces: ColorSpace<any>[] = [\r\n    ColorSpaceRGB,\r\n    ColorSpaceHSL,\r\n  ];\r\n\r\n  public static id = ID.Color;\r\n\r\n  public static operations = ColorOperations;\r\n\r\n  public static computeds = ColorComputeds;\r\n\r\n  public static baseType = new ColorType({ hasAlpha: true });\r\n\r\n  public static decode(data: any[]): ColorType \r\n  {\r\n    return new ColorType(data[INDEX_OPTIONS] || {});\r\n  }\r\n\r\n  public static encode(type: ColorType): any \r\n  {\r\n    return type.options.hasAlpha\r\n      ? [this.id, { hasAlpha: true }]\r\n      : this.id;\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any): Type | null\r\n  {\r\n    const parsed = ColorType.baseType.normalize(data);\r\n\r\n    if (!parsed)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new ColorType({\r\n      hasAlpha: parsed.a !== COMPONENT_MAX,\r\n    });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  public static getFormat(id: string): ColorFormat<any> | undefined\r\n  {\r\n    const [spaceId, formatId] = id.split(':');\r\n    const space = this.spaces.find((s) => s.code === spaceId);\r\n\r\n    return space\r\n      ? space.formatMap[formatId]\r\n      : undefined;\r\n  }\r\n\r\n  public constructor(colorOptions: { hasAlpha?: boolean } = {})\r\n  {\r\n    super({\r\n      ...colorOptions,\r\n      props: ColorType.componentProps,\r\n    });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ColorType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return ColorType.operations.map;\r\n  }\r\n\r\n  public merge(type: ColorType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.hasAlpha = o1.hasAlpha || o2.hasAlpha;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    if (other instanceof ColorType)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (!options.strict && \r\n        !options.exact &&\r\n        other instanceof ObjectType &&\r\n        other.isCompatible(this)) \r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    super.removeDescribedRestrictions();\r\n\r\n    delete this.options.hasAlpha;\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.isValid, {\r\n      value: Exprs.get('value'),\r\n    });\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(ColorOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.normalize(value) !== undefined;\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    for (const space of ColorType.spaces)\r\n    {\r\n      for (const formats of space.formats)\r\n      {\r\n        const parsed = formats.parser(value);\r\n\r\n        if (parsed !== null)\r\n        {\r\n          return space.toColor(parsed);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public newInstance(): ColorType\r\n  {\r\n    return new ColorType({});\r\n  }\r\n\r\n  public clone(): ColorType\r\n  {\r\n    return new ColorType({\r\n      hasAlpha: this.options.hasAlpha,\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ColorType.encode(this);\r\n  }\r\n\r\n  public create(): Color\r\n  {\r\n    return { r: 0, g: 0, b: 0, a: 0 };\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): Color\r\n  {\r\n    return {\r\n      r: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      g: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      b: rnd(COMPONENT_MIN, COMPONENT_MAX, true),\r\n      a: COMPONENT_MAX,\r\n    };\r\n  }\r\n\r\n  public fromJson(json: Color): Color\r\n  {\r\n    return {\r\n      r: json.r,\r\n      g: json.g,\r\n      b: json.b,\r\n      a: json.a,\r\n    };\r\n  }\r\n\r\n  public toJson(value: Color): Color\r\n  {\r\n    return value ? {\r\n      r: value.r,\r\n      g: value.g,\r\n      b: value.b,\r\n      a: value.a,\r\n    } : null;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Set RGB color space type.\r\n */\r\nColorSpaceRGB.setType(ColorType.baseType);","\r\nimport { Operations } from '../Operation';\r\nimport { ID } from '../types/ID';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nexport const SetOperations = new Operations(ID.Set + ID.Delimiter);\r\n\r\nexport const SetComputeds = new Computeds(ID.Set + ID.Delimiter);\r\n\r\nconst ops = SetOperations;\r\n\r\nexport const SetOps = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.set('create'),\r\n\r\n  createLike: ops.set('createLike', {}, ['set'], [], [], [], ['set']),\r\n  \r\n  createFor: ops.set('createFor', {}, ['value'], [], [], [], ['value']),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.set('maybe', {}, ['value']),\r\n\r\n  add: ops.set('add', { mutates: ['set'] }, ['set', 'value'], [], [], [], ['set']),\r\n\r\n  has: ops.set('has', {}, ['set', 'value']),\r\n\r\n  delete: ops.set('delete', { mutates: ['set'] }, ['set', 'value']),\r\n\r\n  values: ops.set('values', { complexity: 1 }, ['set'], [], [], [], ['set']),\r\n\r\n  clear: ops.set('clear', { mutates: ['set'] }, ['set'], [], [], [], ['set']),\r\n\r\n  count: ops.set('count', { }, ['set']),\r\n\r\n  cmp: ops.set('cmp', { complexity: 1 }, ['value', 'test']),\r\n\r\n  copy: ops.set('copy', { complexity: 1 }, ['set'], ['deepCopy'], ['set', 'value'], ['deepCopy'], ['set']),\r\n\r\n  map: ops.set('map', { complexity: 1 }, ['set'], ['transform'], ['set', 'value'], ['transform'], ['set']),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.set('?', {}, ['value']),\r\n\r\n  isEqual: ops.set('=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isNotEqual: ops.set('!=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLess: ops.set('<', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isLessOrEqual: ops.set('<=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreater: ops.set('>', { complexity: 1 }, ['value', 'test']),\r\n\r\n  isGreaterOrEqual: ops.set('>=', { complexity: 1 }, ['value', 'test']),\r\n\r\n  // Casts\r\n  \r\n  asAny: ops.set('~' + ID.Any, {}, ['value']),\r\n\r\n  asBoolean: ops.set('~' + ID.Boolean, {}, ['value']),\r\n\r\n  asColor: ops.set('~' + ID.Color, {}, ['value']),\r\n\r\n  asDate: ops.set('~' + ID.Date, {}, ['value']),\r\n\r\n  asList: ops.set('~' + ID.List, {}, ['value']),\r\n\r\n  asMap: ops.set('~' + ID.Map, {}, ['value']),\r\n\r\n  asNumber: ops.set('~' + ID.Number, {}, ['value']),\r\n\r\n  asObject: ops.set('~' + ID.Object, {}, ['value']),\r\n\r\n  asText: ops.set('~' + ID.Text, {}, ['value']),\r\n\r\n  asTuple: ops.set('~' + ID.Tuple, {}, ['value']),\r\n\r\n  asSet: ops.set('~' + ID.Set, {}, ['value']),\r\n\r\n};\r\n\r\nSetComputeds.set('copy', SetOps.copy);\r\nSetComputeds.set('values', SetOps.values);\r\nSetComputeds.set('count', SetOps.count);","import { ObjectType } from './types/Object';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { FuncOptions, Func } from './Func';\r\nimport { objectMap, objectReduce, isArray, objectEach, isNumber, objectSync, now } from './fns';\r\nimport { Type, TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Exprs } from './Exprs';\r\nimport { Runtime } from './Runtime';\r\nimport { EnumType } from './types/Enum';\r\nimport { Relation } from './Relation';\r\nimport { ListOps } from './ops/ListOps';\r\nimport { AnyOps } from './ops/AnyOps';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface EntityOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  type: any;\r\n  instances: any[];\r\n  primaryType?: EntityPrimaryType,\r\n  key?: any;\r\n  describe?: any;\r\n  transcoders?: Record<string, EntityTranscoderOptions>;\r\n  indexes?: Record<string, EntityIndexOptions>;\r\n  methods?: Record<string, Func | FuncOptions>;\r\n}\r\n\r\nexport interface EntityIndex\r\n{\r\n  name: string;\r\n  props: string[];\r\n  types?: Type[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityIndexOptions\r\n{\r\n  props: string[];\r\n  unique?: boolean;\r\n  primary?: boolean;\r\n}\r\n\r\nexport interface EntityTranscoder\r\n{\r\n  encode: Expression;\r\n  decode: Expression;\r\n  encodedType: Type;\r\n}\r\n\r\nexport interface EntityTranscoderOptions\r\n{\r\n  encode: any;\r\n  decode: any;\r\n  encodedType: any;\r\n}\r\n\r\nexport type EntityPropPair = [string, Type];\r\n\r\nexport interface EntityProps\r\n{\r\n  type: EntityKeyType;\r\n  props: EntityPropPair[];\r\n  relation?: Relation;\r\n}\r\n\r\nexport enum EntityKeyType\r\n{\r\n  PRIMARY,\r\n  FOREIGN,\r\n  NONE\r\n}\r\n\r\nexport enum EntityPrimaryType\r\n{\r\n  GIVEN,\r\n  AUTO_INCREMENT,\r\n  UUID\r\n}\r\n\r\nexport interface EntityEvents\r\n{\r\n  change(entity: Entity): void;\r\n  renamed(entity: Entity, oldName: string): void;\r\n  renameProp(entity: Entity, prop: string, oldProp: string): void;\r\n  removeProp(entity: Entity, prop: string): void;\r\n  sync(entity: Entity, options: EntityOptions, defs: Definitions): void;  \r\n  addTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  removeTranscoder(entity: Entity, prop: string, transcoder: EntityTranscoder): void;\r\n  updateTranscoder(enitty: Entity, prop: string, transcoder: EntityTranscoder, oldTranscoder: EntityTranscoder): void;\r\n  addIndex(entity: Entity, index: EntityIndex): void;\r\n  removeIndex(entity: Entity, index: EntityIndex): void;\r\n  updateIndex(entity: Entity, index: EntityIndex, oldIndex: EntityIndex): void;\r\n  addMethod(entity: Entity, method: Func): void;\r\n  removeMethod(entity: Entity, method: Func): void;\r\n  updateMethod(entity: Entity, method: Func, oldMethod: Func): void;\r\n}\r\n\r\nexport class Entity extends EventBase<EntityEvents> implements EntityOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<EntityOptions> = {}) {\r\n    return new Entity({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      type: Types.object(),\r\n      instances: [],\r\n      methods: Object.create(null),\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public static uuid(): string {\r\n    // tslint:disable: no-magic-numbers no-bitwise\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n      const r = Math.random() * 16 | 0\r\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n\r\n      return v.toString(16);\r\n    });\r\n    // tslint:enable: no-magic-numbers no-bitwise\r\n  }\r\n\r\n  public static PRIMARY_TYPES: Record<EntityPrimaryType, Type> = {\r\n    [EntityPrimaryType.GIVEN]: null,\r\n    [EntityPrimaryType.AUTO_INCREMENT]: Types.int(1),\r\n    [EntityPrimaryType.UUID]: Types.text({ min: 36, max: 36, forceLower: true, matches: /^[\\da-f]{8}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{4}\\-[\\da-f]{12}$/i }),\r\n  };\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public type: ObjectType;\r\n  public instances: any[];\r\n  public methods: Record<string, Func>;\r\n  public key: Expression;\r\n  public keyType: Type;\r\n  public describe: Expression;\r\n  public transcoders: Record<string, EntityTranscoder>;\r\n  public indexes: Record<string, EntityIndex>;\r\n  public primaryType: EntityPrimaryType;\r\n\r\n  public constructor(options: EntityOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n    this.instances = options.instances && options.instances.length\r\n      ? options.instances.map((i) => this.type.fromJson(i))\r\n      : [];\r\n    this.methods = this.decodeMethods(defs, options.methods);\r\n    this.transcoders = this.decodeTranscoders(defs, options.transcoders);\r\n    this.indexes = this.decodeIndexes(options.indexes);\r\n    this.primaryType = isNumber(options.primaryType)\r\n        ? options.primaryType\r\n        : EntityPrimaryType.AUTO_INCREMENT;\r\n    this.key = options.key \r\n      ? defs.getExpression(options.key)\r\n      : this.getPrimaryKeyExpression();\r\n    this.keyType = this.key.getType(defs, this.getKeyContext());\r\n    this.describe = options.describe\r\n      ? defs.getExpression(options.describe)\r\n      : Exprs.noop();\r\n  }\r\n\r\n  public sync(options: EntityOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.type = defs.getTypeKind(options.type, ObjectType, Types.object());\r\n\r\n      this.instances = options instanceof Entity\r\n        ? options.instances\r\n        : options.instances && options.instances.length\r\n          ? options.instances.map((i) => this.type.fromJson(i))\r\n          : [];\r\n\r\n      objectSync(\r\n        this.methods, \r\n        this.decodeMethods(defs, options.methods),\r\n        (target, prop, method) => this.addMethod(method, true),\r\n        (target, prop) => this.removeMethod(prop, true),\r\n        (target, prop, existing, updated) => existing.sync(updated, defs),\r\n      ),\r\n      \r\n      objectSync(\r\n        this.transcoders,\r\n        this.decodeTranscoders(defs, options.transcoders),\r\n        (target, prop, transcoder) => this.addTranscoder(defs, prop, transcoder, true),\r\n        (target, prop) => this.removeTranscoder(prop, true),\r\n        (target, prop, existing, updated) => this.addTranscoder(defs, prop, updated, true),\r\n      );\r\n\r\n      objectSync(\r\n        this.indexes,\r\n        this.decodeIndexes(options.indexes),\r\n        (target, name, index) => this.addIndex(name, index, true),\r\n        (target, name) => this.removeIndex(name, true),\r\n        (target, name, existing, updated) => this.addIndex(name, updated, true),\r\n      );\r\n\r\n      this.primaryType = isNumber(options.primaryType)\r\n          ? options.primaryType\r\n          : EntityPrimaryType.AUTO_INCREMENT;\r\n      this.key = options.key \r\n        ? defs.getExpression(options.key)\r\n        : this.getPrimaryKeyExpression();\r\n      this.keyType = this.key.getType(defs, this.getKeyContext());\r\n      this.describe = options.describe\r\n        ? defs.getExpression(options.describe)\r\n        : Exprs.noop();\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.trigger('change', this);\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: EntityOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Entity ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('change', this);\r\n  }\r\n\r\n  private decodeMethods(defs: Definitions, methods?: Record<string, FuncOptions | Func>)\r\n  {\r\n    return methods\r\n      ? objectMap(methods, (method) => this.decodeMethod(defs, method))\r\n      : {};\r\n  }\r\n\r\n  private decodeMethod(defs: Definitions, method: FuncOptions | Func): Func\r\n  {\r\n    return method instanceof Func\r\n      ? method\r\n      : Func.create(defs, method);\r\n  }\r\n\r\n  private decodeTranscoders(defs: Definitions, transcoders?: Record<string, EntityTranscoderOptions>)\r\n  {\r\n    return transcoders\r\n      ? objectMap(transcoders, (t) => this.decodeTranscoder(defs, t))\r\n      : {};\r\n  }\r\n\r\n  private decodeTranscoder(defs: Definitions, options: EntityTranscoderOptions)\r\n  {\r\n    return options.encode instanceof Expression\r\n      ? options\r\n      : {\r\n          encode: defs.getExpression(options.encode),\r\n          decode: defs.getExpression(options.decode),\r\n          encodedType: defs.getType(options.encodedType),\r\n        };\r\n  }\r\n\r\n  private decodeIndexes(indexes?: Record<string, EntityIndexOptions | EntityIndex>)\r\n  {\r\n    return indexes\r\n      ? objectMap(indexes, ({ unique, primary, props }, name) => ({\r\n          name,\r\n          props,\r\n          unique,\r\n          primary,\r\n        }))\r\n      : {};\r\n  }\r\n\r\n  public encode(): EntityOptions \r\n  {\r\n    const { name, created, updated, description, meta, type, instances, methods, key, describe, transcoders, indexes } = this;\r\n\r\n    return {\r\n      name,\r\n      created, \r\n      updated,\r\n      description,\r\n      meta,\r\n      type: type.encode(),\r\n      instances: instances.map((i) => type.toJson(i)),\r\n      methods: objectMap(methods, (m) => m.encode()),\r\n      key: key.encode(),\r\n      describe: describe.encode(),\r\n      transcoders: objectMap(transcoders, ({ encode, decode, encodedType }) => ({\r\n        encode: encode.encode(),\r\n        decode: decode.encode(),\r\n        encodedType: encodedType.encode(),\r\n      })),\r\n      indexes: objectMap(indexes, ({ props, unique, primary }) => ({\r\n        props,\r\n        unique,\r\n        primary,\r\n      })),\r\n    };\r\n  }\r\n\r\n  public canStore(defs: Definitions): boolean\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      if (!this.keyType || !defs.keyExpectedType.acceptsType(this.keyType))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const describeType = this.describe.getType(defs, this.getDescribeContext());\r\n\r\n    if (!describeType || !defs.describeExpectedType.acceptsType(describeType))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public updateKeyType(defs: Definitions)\r\n  {\r\n    const keyType = this.key.getType(defs, this.getKeyContext());\r\n\r\n    if (keyType)\r\n    {\r\n      this.keyType = keyType;\r\n    }\r\n  }\r\n\r\n  public renameProp(prop: string, newProp: string)\r\n  {\r\n    let changed = false;\r\n    const transcoder = this.transcoders[prop];\r\n\r\n    if (transcoder)\r\n    {\r\n      delete this.transcoders[prop];\r\n\r\n      this.transcoders[newProp] = transcoder;\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props[i] = newProp;\r\n\r\n        this.updateIndex(index.name, true);\r\n        changed = true;\r\n      }\r\n    });\r\n\r\n    this.trigger('renameProp', this, newProp, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public removeProp(prop: string)\r\n  {\r\n    let changed = false;\r\n\r\n    if (prop in this.transcoders)\r\n    {\r\n      this.removeTranscoder(prop, true);\r\n\r\n      changed = true;\r\n    }\r\n\r\n    objectEach(this.indexes, (index, indexName) =>\r\n    {\r\n      const i = index.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        index.props.splice(i, 1);\r\n        changed = true;\r\n\r\n        if (index.props.length === 0)\r\n        {\r\n          this.removeIndex(indexName, true);\r\n        }\r\n        else\r\n        {\r\n          this.updateIndex(indexName, true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.trigger('removeProp', this, prop);\r\n\r\n    if (changed)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public getEntityProps(): EntityProps\r\n  {\r\n    const primary = this.getPrimary();\r\n    const props: Array<[string, Type]> = primary.props.map((prop, i) => [\r\n      prop,\r\n      primary.types && primary.types[i]\r\n        ? primary.types[i]\r\n        : this.type.options.props[prop]\r\n    ]);\r\n\r\n    return {\r\n      type: EntityKeyType.PRIMARY,\r\n      props,\r\n    };\r\n  }\r\n\r\n  public getKey(run: Runtime, instance: any): any\r\n  {\r\n    const { type, key } = this;\r\n\r\n    return run.run(key, { instance, type });\r\n  }\r\n\r\n  public setKey(instance: any)\r\n  {\r\n    if (this.primaryType === EntityPrimaryType.GIVEN)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const prop = this.getDynamicPrimaryKey();\r\n\r\n    if (instance[prop])\r\n    {\r\n      return;\r\n    }\r\n\r\n    switch (this.primaryType)\r\n    {\r\n      case EntityPrimaryType.AUTO_INCREMENT:\r\n        instance[prop] = this.instances.reduce((a, b) => Math.max(a, b[prop]), 0) + 1;\r\n        break;\r\n      case EntityPrimaryType.UUID:\r\n        instance[prop] = Entity.uuid();\r\n        break;\r\n    }\r\n  }\r\n\r\n  public getDescribe(run: Runtime, instance: any): any\r\n  {\r\n    const { type, describe } = this;\r\n\r\n    return run.run(describe, { instance, type });\r\n  }\r\n\r\n  public getDecodedPropertyTypes(): TypeMap\r\n  {\r\n    return this.type.options.props;\r\n  }\r\n\r\n  public getPropertyTypeFor(forProperty?: string)\r\n  {\r\n    return forProperty\r\n    ? Types.enumForText([forProperty])\r\n    : this.getPropertyType(); \r\n  }\r\n\r\n  public getEncodedPropertyTypes(): TypeMap\r\n  {\r\n    return objectMap(this.type.options.props, \r\n      (type, prop) => prop in this.transcoders\r\n        ? this.transcoders[prop].encodedType\r\n        : type\r\n    );\r\n  }\r\n\r\n  public getEncodedType(): ObjectType\r\n  {\r\n    return Types.object(this.getEncodedPropertyTypes());\r\n  }\r\n\r\n  public getDecodedType(): ObjectType\r\n  {\r\n    return this.type;\r\n  }\r\n\r\n  public getProperties(): string[]\r\n  {\r\n    return Object.keys(this.getDecodedPropertyTypes());\r\n  }\r\n\r\n  public getPropertyType(): EnumType\r\n  {\r\n    return Types.enumForText(this.getProperties());\r\n  }\r\n\r\n  public getKeyReturnType()\r\n  {\r\n    return this.keyType;\r\n  }\r\n\r\n  public getKeyContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getDescribeContext(): Type\r\n  {\r\n    return Types.object({\r\n      instance: this.type,\r\n      type: Types.text(),\r\n    });\r\n  }\r\n\r\n  public getEncoded(run: Runtime, instance: any): any\r\n  {\r\n    const encoded: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      encoded[prop] = this.getEncodedValue(run, instance, prop);\r\n    }\r\n\r\n    return encoded;\r\n  }\r\n\r\n  public getEncodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const encoder = property in transcoders\r\n      ? transcoders[property].encode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return encoder\r\n      ? run.run(encoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getEncodeContext(forProperty?: string): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getDecodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getDecodeExpected(forProperty);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getEncodeExpected(forProperty?: string, defaultType: Type = Types.any())\r\n  {\r\n    return forProperty && forProperty in this.transcoders\r\n      ? this.transcoders[forProperty].encodedType\r\n      : defaultType;\r\n  }\r\n\r\n  public getDecoded(run: Runtime, encoded: any): any\r\n  {\r\n    const instance: any = {};\r\n\r\n    for (const prop in this.getDecodedPropertyTypes())\r\n    {\r\n      instance[prop] = this.getDecodedValue(run, encoded, prop);\r\n    }\r\n\r\n    return instance;\r\n  }\r\n\r\n  public getDecodedValue(run: Runtime, instance: any, property: string): any\r\n  {\r\n    const { name, transcoders } = this;\r\n    const decoder = property in transcoders\r\n      ? transcoders[property].decode\r\n      : null;\r\n    const value = instance[property];\r\n\r\n    return decoder\r\n      ? run.run(decoder, { name, instance, property, value })\r\n      : value;\r\n  }\r\n\r\n  public getDecodeContext(forProperty?: string, overrideValueType?: Type): ObjectType\r\n  {\r\n    const name = Types.enumForText([this.name]);\r\n    const instance = this.getEncodedType();\r\n    const property = this.getPropertyTypeFor(forProperty);\r\n    const value = this.getEncodeExpected(forProperty, overrideValueType);\r\n\r\n    return Types.object({ name, instance, property, value });\r\n  }\r\n\r\n  public getDecodeExpected(forProperty?: string)\r\n  {\r\n    return forProperty\r\n      ? this.type.options.props[forProperty] || Types.any()\r\n      : Types.any();\r\n  }\r\n\r\n  public getIndexExpectedType()\r\n  {\r\n    return Types.set(this.getPropertyType());\r\n  }\r\n\r\n  public getDynamicPrimaryKey(): string\r\n  {\r\n    const existing = this.type.options.props;\r\n\r\n    return !('id' in existing)\r\n      ? 'id'\r\n      : !('_id' in existing)\r\n        ? '_id'\r\n        : '__id';\r\n  }\r\n\r\n  public getPrimaryKeyExpression(separator: string = '/', name: string = 'primary')\r\n  {\r\n    const primary = this.getPrimary(name);\r\n\r\n    return primary.props.length > 1\r\n      ? Exprs.op(ListOps.join, {\r\n          list: primary.props.map((prop) => \r\n            Exprs.get('instance', prop)\r\n          ),\r\n          delimiter: Exprs.const(separator),\r\n          toText: Exprs.op(AnyOps.asText, {\r\n            value: Exprs.get('item'),\r\n          }),\r\n        })\r\n      : Exprs.get('instance', primary.props[0]);\r\n  }\r\n\r\n  public getPrimary(name: string = 'primary', returnDynamic: boolean = true): EntityIndex | null\r\n  {\r\n    const defined = name in this.indexes\r\n      ? this.indexes[name]\r\n      : objectReduce(this.indexes, \r\n          (index, indexName, first) => first ? first : index.primary ? index : first, \r\n        null);\r\n\r\n    if (defined)\r\n    {\r\n      return defined;\r\n    }\r\n\r\n    if (returnDynamic)\r\n    {\r\n      const id = this.getDynamicPrimaryKey();\r\n      const type = Entity.PRIMARY_TYPES[this.primaryType];\r\n\r\n      return {\r\n        name,\r\n        props: [id],\r\n        types: [type],\r\n        unique: true,\r\n        primary: true,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getUniqueIndexes(): EntityIndex[]\r\n  {\r\n    return objectReduce(this.indexes, (index, indexName, unique) => {\r\n      if (index.unique) {\r\n        unique.push(index);\r\n      }\r\n\r\n      return unique;\r\n    }, []);\r\n  }\r\n\r\n  public addPrimary(props: string | string[]): this\r\n  {\r\n    this.addIndex('primary', {\r\n      props: isArray(props) ? props : [props], \r\n      unique: true, \r\n      primary: true\r\n    });\r\n\r\n    this.primaryType = EntityPrimaryType.GIVEN;\r\n\r\n    return this;\r\n  }\r\n\r\n  public addIndex(name: string, options: EntityIndexOptions, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.indexes[name];\r\n    const index: EntityIndex = { ...options, name };\r\n\r\n    this.indexes[name] = index;\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateIndex', this, index, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addIndex', this, index);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    this.trigger('updateIndex', this, index, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeIndex(name: string, delayChange: boolean = false): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    delete this.indexes[name];\r\n\r\n    this.trigger('removeIndex', this, index);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameIndex(name: string, newName: string): this\r\n  {\r\n    const index = this.indexes[name];\r\n\r\n    if (index && name !== newName)\r\n    {\r\n      const previous = { ...index, props: index.props.slice() };\r\n\r\n      index.name = newName;\r\n\r\n      delete this.indexes[name];\r\n\r\n      this.indexes[newName] = index;\r\n\r\n      this.trigger('updateIndex', this, index, previous);\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addTranscoder(defs: Definitions, prop: string, options: EntityTranscoderOptions | EntityTranscoder, delayChange: boolean = false): this\r\n  {\r\n    const previous = this.transcoders[prop];\r\n    const transcoder: EntityTranscoderOptions = this.decodeTranscoder(defs, options);\r\n\r\n    this.transcoders[prop] = transcoder;\r\n\r\n    if (previous)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, previous);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addTranscoder', this, name, transcoder);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      delete this.transcoders[name];\r\n\r\n      this.trigger('removeTranscoder', this, name, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public updateTranscoder(name: string, delayChange: boolean = false): this\r\n  {\r\n    const transcoder = this.transcoders[name];\r\n\r\n    if (transcoder)\r\n    {\r\n      this.trigger('updateTranscoder', this, name, transcoder, transcoder);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addMethod(method: Func, delayChange: boolean = false): this\r\n  {\r\n    const existing = this.methods[method.name];\r\n\r\n    this.methods[method.name] = method;\r\n\r\n    if (existing)\r\n    {\r\n      this.trigger('updateMethod', this, method, existing);\r\n    }\r\n    else\r\n    {\r\n      this.trigger('addMethod', this, method);\r\n    }\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public renameMethod(name: string, newName: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method && name !== newName)\r\n    {\r\n      method.name = newName;\r\n\r\n      delete this.methods[name];\r\n\r\n      this.methods[newName] = method;\r\n\r\n      this.trigger('updateMethod', this, method, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public removeMethod(name: string, delayChange: boolean = false): this\r\n  {\r\n    const method = this.methods[name];\r\n\r\n    if (method)\r\n    {\r\n      delete this.methods[name];\r\n\r\n      this.trigger('removeMethod', this, method);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}","\r\nimport { isObject, isArray, isSet, isString } from '../fns';\r\nimport { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { AnyType } from './Any';\r\nimport { Exprs } from '../Exprs';\r\nimport { Expression } from '../Expression';\r\nimport { SetOps, SetOperations, SetComputeds } from '../ops/SetOps';\r\nimport { ListOps } from '../ops/ListOps';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { Types } from '../Types';\r\nimport { DataTypeRaw, DataTypes } from '../DataTypes';\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst RANDOM_MIN = 2;\r\nconst RANDOM_MAX = 5;\r\n\r\nexport interface SetOptions \r\n{\r\n  value: Type;\r\n}\r\n\r\nexport class SetType extends Type<SetOptions> \r\n{\r\n\r\n  public static STEP_VALUE = 'value';\r\n\r\n  public static id = ID.Set;\r\n\r\n  public static operations = SetOperations;\r\n\r\n  public static computeds = SetComputeds;\r\n\r\n  public static baseType = new SetType({ value: AnyType.baseType });\r\n\r\n  public static decode(data: any[], types: TypeProvider): SetType \r\n  {\r\n    const value = types.getType(data[INDEX_VALUE]);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public static encode(type: SetType): any \r\n  {\r\n    const { value } = type.options;\r\n\r\n    return [this.id, value.encode()];\r\n  }\r\n\r\n  public static describePriority: number = 7;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    if (!isSet(data))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let value: Type = new AnyType({});\r\n\r\n    for (const [setValue] of data.entries())\r\n    {\r\n      value = describer.merge(value, setValue);\r\n    }\r\n\r\n    return new SetType({ value });\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n    const priority = 11;\r\n    const type: DataTypeRaw = 'object';\r\n\r\n    DataTypes.addJson({\r\n      priority,\r\n      fromJson: (json, reader) => {\r\n        if (isObject(json) && isString(json.$any) && json.$any === 'set') {\r\n          return new Set(json.value.map(reader));\r\n        }\r\n      },\r\n      toJson: (json, writer) => {\r\n        if (isSet(json)) {\r\n          return {\r\n            $any: 'set',\r\n            value: Array.from(json.entries()).map(writer),\r\n          };\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCopier({\r\n      priority,\r\n      copy: (x, copy, setObjectCopy) => {\r\n        if (isSet(x)) {\r\n          const newSet = new Set();\r\n\r\n          setObjectCopy(x, newSet);\r\n  \r\n          for (const [value] of x.entries()) {\r\n            newSet.add(copy(value));\r\n          }\r\n  \r\n          return newSet;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addCompare({\r\n      priority,\r\n      type,\r\n      compare: (a, b, compare) => {\r\n        const at = isSet(a);\r\n        const bt = isSet(b);\r\n\r\n        if (at !== bt) return (at ? 1 : 0) - (bt ? 1 : 0);\r\n        \r\n        if (isSet(a) && isSet(b)) {\r\n          let dl = a.size - b.size;\r\n\r\n          if (dl === 0) {\r\n            let less = 0;\r\n            let more = 0;\r\n\r\n            const avalues = Array.from(a);\r\n            const bvalues = Array.from(b);\r\n\r\n            for (let i = 0; i < avalues.length; i++) {\r\n              const c = compare(avalues[i], bvalues[i]);\r\n\r\n              if (c < 0) less++;\r\n              if (c > 0) more++;\r\n            }\r\n\r\n            dl = DataTypes.getCompare(less, more);\r\n          }\r\n\r\n          return dl;\r\n        }\r\n      },\r\n    });\r\n\r\n    DataTypes.addEquals({\r\n      priority,\r\n      type,\r\n      equals: (a, b, equals) => {\r\n        const al = isSet(a);\r\n        const bl = isSet(b);\r\n\r\n        if (al !== bl) return false;\r\n        \r\n        if (isSet(a) && isSet(b))\r\n        {\r\n          if (a.size !== b.size)\r\n          {\r\n            return false\r\n          }\r\n\r\n          for (const value of a)\r\n          {\r\n            if (!b.has(value))\r\n            {\r\n              return false;\r\n            }\r\n          }\r\n\r\n          return true;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  public static forItem(valueOrClass: TypeInput)\r\n  {\r\n    const value = Types.parse(valueOrClass);\r\n    \r\n    return new SetType({ value });\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return SetType.id;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return SetType.operations.map;\r\n  }\r\n\r\n  public merge(type: SetType): void\r\n  {\r\n    const o1 = this.options;\r\n    const o2 = type.options;\r\n\r\n    o1.value = Types.merge(o1.value, o2.value);\r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return [];\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this;\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this;\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof SetType && \r\n      this.options.value.isCompatible(other.options.value, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return false;\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => {\r\n      traverse.step(SetType.STEP_VALUE, this.options.value, (replaceWith) => this.options.value = replaceWith);\r\n    });\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === SetType.STEP_VALUE \r\n      ? this.options.value\r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n\r\n    this.options.value.setParent(this);\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    this.options.value.removeDescribedRestrictions();\r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.create, {});\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return Exprs.and(\r\n      Exprs.op(SetOps.isValid, {\r\n        value: Exprs.get('value'),\r\n      }),\r\n      Exprs.not(Exprs.op(ListOps.contains, {\r\n        list: Exprs.op(SetOps.values, { set: Exprs.get('value') }),\r\n        item: Exprs.null(),\r\n        isEqual: Exprs.not(this.options.value.getValidateExpression()),\r\n      }, {\r\n        value: 'ignore',\r\n        test: 'value',\r\n      })),\r\n    );\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return Exprs.op(SetOps.cmp, {\r\n      value: Exprs.get('value'),\r\n      test: Exprs.get('test'),\r\n    });\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to = value\r\n    return Exprs.op(SetOps.map, {\r\n      set: Exprs.get('value'),\r\n      transform: newValue,\r\n    }, {\r\n      value: 'value',\r\n    });\r\n  }\r\n\r\n  public isValid(test: any): boolean \r\n  {\r\n    if (test instanceof Set || isArray(test))\r\n    {\r\n      const { value } = this.options;\r\n\r\n      return !Array.from(test).some((v) => !value.isValid(v));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public normalize(test: any): any\r\n  {\r\n    const { value } = this.options;\r\n    \r\n    return new Set(Array.from(test).map((v) => value.normalize(v)));\r\n  }\r\n\r\n  public newInstance(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.newInstance(),\r\n    });\r\n  }\r\n\r\n  public clone(): SetType\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new SetType({\r\n      value: value.clone(),\r\n    });\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return SetType.encode(this);\r\n  }\r\n\r\n  public create(): Set<any>\r\n  {\r\n    return new Set();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    const { value } = this.options;\r\n    const n = rnd(RANDOM_MIN, RANDOM_MAX + 1, true);\r\n    const out = new Set<any>();\r\n\r\n    for (let i = 0; i < n; i++)\r\n    {\r\n      const v = value.random(rnd);\r\n\r\n      out.add(v);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  public fromJson(json: Array<any>): Set<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return new Set(json.map((v) => value.fromJson(v)));\r\n  }\r\n\r\n  public toJson(set: Set<any>): Array<any>\r\n  {\r\n    const { value } = this.options;\r\n\r\n    return Array.from(set.entries()).map((v) => value.toJson(v));\r\n  }\r\n\r\n}","\r\nimport { Type, TypeInput, TypeInputMap, TypeClass, TypeResolved } from './Type';\r\nimport { isArray, isMap, MapInput, toMap, isSameClass, isObject, objectMap } from './fns';\r\nimport { NumberType } from './types/Number'\r\nimport { AnyType } from './types/Any';\r\nimport { BooleanType } from './types/Boolean';\r\nimport { DateOptions, DateType } from './types/Date';\r\nimport { TextType, TextOptions } from './types/Text';\r\nimport { EnumType } from './types/Enum';\r\nimport { ObjectType } from './types/Object';\r\nimport { ListType } from './types/List';\r\nimport { ManyType } from './types/Many';\r\nimport { MapType } from './types/Map';\r\nimport { NullType } from './types/Null';\r\nimport { OptionalType } from './types/Optional';\r\nimport { TupleType } from './types/Tuple';\r\nimport { NotType } from './types/Not';\r\nimport { ColorType } from './types/Color';\r\nimport { SetType } from './types/Set';\r\n\r\n\r\nexport class Types\r\n{\r\n\r\n  public static INDEX = Types.index();\r\n\r\n  public static LENGTH = Types.index();\r\n\r\n  public static CHAR = Types.char();\r\n\r\n  public static autoSetParent: boolean = true;\r\n\r\n  public static setParent<T extends Type>(type: T, force: boolean = false): T\r\n  {\r\n    if (this.autoSetParent || force)\r\n    {\r\n      type.setParent();\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  public static any()\r\n  {\r\n    return new AnyType({});\r\n  }\r\n\r\n  public static bool(trues?: Record<string, true>, falses?: Record<string, true>)\r\n  {\r\n    return new BooleanType({ true: trues, false: falses });\r\n  }\r\n\r\n  public static date(options: DateOptions = {})\r\n  {\r\n    return new DateType(options);\r\n  }\r\n\r\n  public static enum(value: TypeInput, key: TypeInput = TextType, constants: MapInput = new Map([]))\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.parse(value),\r\n      key: this.parse(key),\r\n      constants: toMap(constants),\r\n    }));\r\n  }\r\n\r\n  public static enumForText(constants: string[] | Array<[string, string]> | Map<string, string>)\r\n  {\r\n    return this.setParent(new EnumType({\r\n      value: this.text(),\r\n      key: this.text(),\r\n      constants: isMap(constants)\r\n        ? constants\r\n        : isArray(constants[0])\r\n          ? new Map(constants as Array<[string, string]>)\r\n          : new Map((constants as string[]).map((c) => [c, c]))\r\n    }));\r\n  }\r\n\r\n  public static list(item: TypeInput, min?: number, max?: number)\r\n  {\r\n    return this.setParent(new ListType({\r\n      item: this.parse(item),\r\n      min, \r\n      max,\r\n    }));\r\n  }\r\n\r\n  public static many(types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[]): ManyType\r\n  public static many(...types: TypeInput[] | [TypeInput[]]): ManyType\r\n  {\r\n    return this.setParent(new ManyType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static not(types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[]): NotType\r\n  public static not(...types: TypeInput[] | [TypeInput[]]): NotType\r\n  {\r\n    return this.setParent(new NotType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static map(value: TypeInput, key: TypeInput = TextType)\r\n  {\r\n    return this.setParent(new MapType({ \r\n      key: this.parse(key),\r\n      value: this.parse(value)\r\n    }));\r\n  }\r\n\r\n  public static null()\r\n  {\r\n    return NullType.baseType\r\n  }\r\n\r\n  public static number(min?: number, max?: number, whole?: boolean)\r\n  {\r\n    return new NumberType({ min, max, whole });\r\n  }\r\n\r\n  public static int(min?: number, max?: number)\r\n  {\r\n    return new NumberType({ min, max, whole: true });\r\n  }\r\n\r\n  public static index(max?: number)\r\n  {\r\n    return new NumberType({ min: 0, max, whole: true });\r\n  }\r\n\r\n  public static char()\r\n  {\r\n    return new TextType({ min: 1, max: 1 });\r\n  }\r\n\r\n  public static object(props: TypeInputMap = {})\r\n  {\r\n    return this.setParent(new ObjectType({ \r\n      props: this.resolve(props),\r\n    }));\r\n  }\r\n\r\n  public static optional(type: TypeInput): Type\r\n  {\r\n    const innerType = this.parse(type);\r\n\r\n    return this.setParent(innerType.isOptional() ? innerType : new OptionalType(innerType));\r\n  }\r\n\r\n  public static color(options: { hasAlpha?: boolean } = {})\r\n  {\r\n    return this.setParent(new ColorType(options));\r\n  }\r\n\r\n  public static set(value: TypeInput)\r\n  {\r\n    return this.setParent(new SetType({\r\n      value: this.parse(value),\r\n    }));\r\n  }\r\n\r\n  public static text(options: TextOptions = {})\r\n  {\r\n    return new TextType(options);\r\n  }\r\n\r\n  public static tuple(types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[]): TupleType\r\n  public static tuple(...types: TypeInput[] | [TypeInput[]]): TupleType\r\n  {\r\n    return this.setParent(new TupleType(\r\n      isArray(types[0])\r\n        ? types[0].map((t) => this.parse(t))\r\n        : (types as TypeInput[]).map((t) => this.parse(t))\r\n    ));\r\n  }\r\n\r\n  public static parse(input: TypeInput): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : input.baseType.newInstance();\r\n  }\r\n\r\n  public static simplify(type: Type): Type;\r\n  public static simplify(type: Type | null): Type | null;\r\n  public static simplify(type: Type | null): Type | null\r\n  {\r\n    return type ? type.getSimplifiedType() : null;\r\n  }\r\n\r\n  public static resolve<T>(types: T): TypeResolved<T>\r\n  {\r\n    let result: any;\r\n\r\n    if (!types)\r\n    {\r\n    }\r\n    else if (types instanceof Type)\r\n    {\r\n      result = types;\r\n    }\r\n    else if ((types as any).baseType instanceof Type)\r\n    {\r\n      result = (types as any).baseType.newInstance();\r\n    }\r\n    else if (isArray(types))\r\n    {\r\n      result = types.map(t => this.resolve(t));\r\n    }\r\n    else if (isObject(types))\r\n    {\r\n      result = objectMap(types as any, t => this.resolve(t));\r\n    }\r\n\r\n    return result as unknown as TypeResolved<T>;\r\n  }\r\n\r\n  public static reduce(type: Type[]): Type\r\n  {\r\n    return type.length === 1 ? type[0] : new ManyType(type);\r\n  }\r\n\r\n  public static explode(outerType: Type): Type[]\r\n  {\r\n    return outerType instanceof ManyType ? outerType.options : [outerType];\r\n  }\r\n\r\n  public static maybe<M extends Type>(type: Type, maybe: TypeClass<M>)\r\n  {\r\n    if (type instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof OptionalType && type.options instanceof maybe)\r\n    {\r\n      return type;\r\n    }\r\n\r\n    if (type instanceof ManyType) \r\n    {\r\n      const oneOf = type.options.find((t) => t instanceof maybe);\r\n\r\n      if (oneOf) \r\n      {\r\n        return this.optional(oneOf);\r\n      }\r\n\r\n      const oneOfOptional = type.options.find((t) => t instanceof OptionalType && t.options instanceof maybe);\r\n\r\n      if (oneOfOptional) \r\n      {\r\n        return oneOfOptional;\r\n      }\r\n    }\r\n\r\n    return this.optional(maybe);\r\n  }\r\n\r\n  public static mergeMany(readonlyTypes: Type[]): Type | null;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type): Type;\r\n  public static mergeMany(readonlyTypes: Type[], noTypes: Type | null = null): Type | null\r\n  {\r\n    if (readonlyTypes.length === 0)\r\n    {\r\n      return noTypes;\r\n    }\r\n\r\n    if (readonlyTypes.find(t => t instanceof AnyType))\r\n    {\r\n      return AnyType.baseType;\r\n    }\r\n\r\n    const cloned = readonlyTypes.map(t => t ? t.clone() : null);\r\n\r\n    return cloned.reduce((a, b) => a && b ? this.merge(a, b) : a || b);\r\n  }\r\n\r\n  public static merge(a: Type, b: Type): Type\r\n  {\r\n    if (a instanceof AnyType)\r\n    {\r\n      return b;\r\n    }\r\n\r\n    const optional = \r\n      a instanceof OptionalType ||\r\n      b instanceof OptionalType;\r\n\r\n    const ar = a.getRequired();\r\n    const br = b.getRequired();\r\n\r\n    if (isSameClass(ar, br))\r\n    {\r\n      ar.merge(br);\r\n\r\n      return optional ? this.optional(ar) : ar;\r\n    }\r\n\r\n    if (ar instanceof ManyType || br instanceof ManyType)\r\n    {\r\n      const atypes = this.explode(ar);\r\n      const btypes = this.explode(br);\r\n      const an = atypes.length;\r\n\r\n      for (const ktype of btypes)\r\n      {\r\n        let matched = false;\r\n        const koptional = ktype instanceof OptionalType;\r\n        const krequired: Type = koptional ? ktype.options : ktype;\r\n\r\n        for (let i = 0; i < an; i++)\r\n        {\r\n          const itype = atypes[i];\r\n          const ioptional = itype instanceof OptionalType;\r\n          const irequired: Type = ioptional ? itype.options : itype;\r\n\r\n          if (isSameClass(irequired, krequired))\r\n          {\r\n            matched = true;\r\n            irequired.merge(krequired);\r\n\r\n            if (koptional && !ioptional) \r\n            {\r\n              atypes[i] = this.optional(irequired);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!matched)\r\n        {\r\n          atypes.push(ktype);\r\n        }\r\n      }\r\n\r\n      return optional\r\n        ? this.optional(this.reduce(atypes))\r\n        : this.reduce(atypes);\r\n    }\r\n\r\n    return this.many(a, b);\r\n  }\r\n\r\n}","\r\nexport class LinkedNode<T> \r\n{\r\n\r\n  public value: T;\r\n  public next: LinkedNode<T>;\r\n  public prev: LinkedNode<T>;\r\n\r\n  constructor(value: T) \r\n  {\r\n    this.value = value;\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  // List Operations\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public clear() \r\n  {\r\n    this.next = this.prev = this;\r\n  }\r\n\r\n  public addLast(value: T): LinkedNode<T> \r\n  {\r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this.prev);\r\n    \r\n    return node;\r\n  }\r\n\r\n  public addFirst(value: T): LinkedNode<T> \r\n  { \r\n    const node = new LinkedNode(value);\r\n    node.linkAfter(this);\r\n\r\n    return node;\r\n  }\r\n\r\n  public each(callback: (value: T, index: number, node: LinkedNode<T>) => any): number \r\n  {\r\n    const stop = this;\r\n    let curr = this.next;\r\n    let count = 0;\r\n\r\n    while (curr !== stop) \r\n    {\r\n      const next = curr.next;\r\n      callback(curr.value, count, curr);\r\n      curr = next;\r\n      count++;\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  // Item Operations\r\n\r\n  public isRemoved()\r\n  {\r\n    return this.next === this;\r\n  }\r\n\r\n  public remove() \r\n  {\r\n    if (!this.isRemoved()) \r\n    {\r\n      this.next.prev = this.prev;\r\n      this.prev.next = this.next;\r\n      this.next = this.prev = this;\r\n    }\r\n  }\r\n\r\n  public linkAfter(node: LinkedNode<T>) \r\n  {\r\n    this.remove();\r\n    this.next = node.next;\r\n    this.prev = node;\r\n    node.next.prev = this;\r\n    node.next = this;\r\n  }\r\n\r\n}\r\n","import { isArray } from './fns';\r\nimport { LinkedNode } from './LinkedNode';\r\n\r\n\r\n\r\nexport type EventCallback<\r\n  E, \r\n  K extends keyof E = any, \r\n  A extends any[] = EventTypeArgs<E, K>,\r\n  R = EventTypeResult<E, K>  \r\n> = (type: K, ...payload: A) => R;\r\n\r\nexport type EventDefinition<A extends any[], R> = (...args: A) => R;\r\n\r\nexport type EventCallbackMap<E> = \r\n{\r\n  [K in keyof E]?: LinkedNode<EventCallback<E, K>>\r\n};\r\n\r\nexport type EventTypeResult<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<any, infer R>\r\n    ? R\r\n    : never;\r\n\r\nexport type EventTypeArgs<E, K extends keyof E> =\r\n  E[K] extends EventDefinition<infer A, any>\r\n    ? A\r\n    : never;\r\n\r\nexport class EventBase<E> \r\n{\r\n\r\n  private listeners: EventCallbackMap<E> = Object.create(null);\r\n\r\n  public trigger<K extends keyof E, A extends EventTypeArgs<E, K>, R extends EventTypeResult<E, K>>(event: K, ...payload: A): R[] \r\n  {\r\n    const listeners = this.getListeners(event, false);\r\n    const results: R[] = [];\r\n\r\n    if (listeners) \r\n    { \r\n      listeners.each((listener) => results.push(listener(event, ...payload) as R));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  public hasListeners<K extends keyof E>(event: K): boolean\r\n  {\r\n    return this.getListeners(event) !== null;\r\n  }\r\n\r\n  public getListeners<K extends keyof E>(event: K, create?: false): LinkedNode<EventCallback<E, K>> | null;\r\n  public getListeners<K extends keyof E>(event: K, create: true): LinkedNode<EventCallback<E, K>>;\r\n  public getListeners<K extends keyof E>(event: K, create: boolean = true): LinkedNode<EventCallback<E, K>> | null \r\n  {\r\n    let listeners: LinkedNode<EventCallback<E, K>> | undefined = this.listeners[event];\r\n\r\n    if (!listeners && create) \r\n    {\r\n      listeners = this.listeners[event] = new LinkedNode<EventCallback<E, K>>(() => undefined as EventTypeResult<E, K>);\r\n    }\r\n\r\n    return listeners || null;\r\n  }\r\n\r\n  public on<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const events = isArray(event) ? event : [event];\r\n    const nodes = events.map((e) => this.getListeners(e, true).addLast(handler));\r\n    \r\n    return () => nodes.forEach((n) => n.remove());\r\n  }\r\n\r\n  public once<K extends keyof E>(event: K | K[], handler: EventCallback<E, K>): () => void \r\n  {\r\n    const off = this.on(event, (type, ...payload) => {\r\n      off();\r\n      \r\n      return handler(type, ...payload);\r\n    });\r\n\r\n    return off;\r\n  }\r\n\r\n  public off<K extends keyof E = any>(event?: K | K[], handler?: EventCallback<E, K>): this \r\n  {\r\n    if (event) \r\n    {\r\n      if (Array.isArray(event)) \r\n      {\r\n        event.forEach((e) => this.off(e, handler));\r\n      } \r\n      else \r\n      {\r\n        const listeners = this.listeners[event];\r\n\r\n        if (listeners) \r\n        {\r\n          if (handler) \r\n          {\r\n            listeners.each((other, index, node) => {\r\n              if (other === handler) {\r\n                node.remove();\r\n              }\r\n            });\r\n          }\r\n          else \r\n          {\r\n            listeners.clear();\r\n          }\r\n        }\r\n      }\r\n    } \r\n    else \r\n    {\r\n      this.listeners = Object.create(null);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n","import { ObjectType, ObjectOptions } from './types/Object';\r\nimport { TypeMap } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Exprs } from './Exprs';\r\nimport { isEmpty, objectMap, arraySync, isNumber, now } from './fns';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { DataTypes } from './DataTypes';\r\nimport { EventBase } from './EventBase';\r\n\r\n\r\nexport interface FuncOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  description: string;\r\n  meta: any;\r\n  params: any;\r\n  expression: any;\r\n  defaults: any;\r\n  tests: FuncTest[];\r\n}\r\n\r\nexport interface FuncTest\r\n{\r\n  name: string;\r\n  description: string;\r\n  args: any;\r\n  expected: any;\r\n}\r\n\r\nexport interface FuncEvents\r\n{\r\n  changed(func: Func): void;\r\n  renamed(func: Func, oldName: string): void;\r\n  renameParameter(func: Func, param: string, oldParam: string): void;\r\n  removeParameter(func: Func, param: string): void;\r\n  sync(func: Func, options: FuncOptions, defs: Definitions): void;\r\n  addTest(func: Func, test: FuncTest): void;\r\n  removeTest(func: Func, test: FuncTest): void;\r\n  updateTest(func: Func, test: FuncTest): void;\r\n}\r\n\r\nexport class Func extends EventBase<FuncEvents> implements FuncOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<FuncOptions> = {}) {\r\n    return new Func({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      description: '',\r\n      meta: null,\r\n      params: Types.object(),\r\n      expression: Exprs.noop(),\r\n      defaults: {},\r\n      tests: [],\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public description: string;\r\n  public meta: any;\r\n  public params: ObjectType<ObjectOptions>;\r\n  public expression: Expression;\r\n  public defaults: any;\r\n  public tests: FuncTest[];\r\n\r\n  public constructor(options: FuncOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.params = defs.getTypeKind(options.params, ObjectType, Types.object());\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.defaults = this.params.fromJson(options.defaults);\r\n    this.tests = options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) }));\r\n  }\r\n\r\n  public sync(options: FuncOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.params = options instanceof Func\r\n        ? options.params\r\n        : defs.getTypeKind(options.params, ObjectType, Types.object());\r\n      this.expression = options instanceof Func\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n      this.defaults = options instanceof Func\r\n        ? options.defaults\r\n        : this.params.fromJson(options.defaults);\r\n\r\n      arraySync(\r\n        this.tests, \r\n        options instanceof Func\r\n          ? options.tests\r\n          : options.tests.map((t) => ({ ...t, args: this.params.fromJson(t.args) })),\r\n        (a, b) => a.name === b.name || DataTypes.equals(a.args, b.args), \r\n        (target, value) => this.addTest(value, true),\r\n        (target, index) => this.removeTest(index, true),\r\n        (target, index, value, newValue) => this.updateTest(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: FuncOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Func ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): FuncOptions \r\n  {\r\n    const { name, created, updated, description, meta, params, expression, defaults, tests } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      description, \r\n      meta,\r\n      params: params.encode(),\r\n      expression: expression.encode(),\r\n      defaults: params.toJson(defaults),\r\n      tests: tests.map((t) => ({ ...t, args: params.toJson(t.args) })),\r\n    };\r\n  }\r\n\r\n  public renameParameter(name: string, newName: string): boolean\r\n  {\r\n    const paramType = this.params.options.props[name];\r\n\r\n    if (paramType)\r\n    {\r\n      this.params.options.props[newName] = paramType;\r\n      delete this.params.options.props[name];\r\n\r\n      if (name in this.defaults)\r\n      {\r\n        this.defaults[newName] = this.defaults[name];\r\n        delete this.defaults[name];\r\n      }\r\n\r\n      this.trigger('renameParameter', this, newName, name);\r\n      this.changed();\r\n    }\r\n\r\n    return !!paramType;\r\n  }\r\n\r\n  public removeParameter(name: string): boolean\r\n  {\r\n    const exists = name in this.params.options.props[name];\r\n\r\n    if (exists)\r\n    {\r\n      delete this.params.options.props[name];\r\n      delete this.defaults[name];\r\n\r\n      this.trigger('removeParameter', this, name);\r\n      this.changed();\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public addTest(test: FuncTest, delayChange: boolean = false)\r\n  {\r\n    this.tests.push(test);\r\n\r\n    this.trigger('addTest', this, test);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public updateTest(test: FuncTest | number, newTest: FuncTest, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(test)\r\n      ? this.tests[test]\r\n      : test;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newTest);\r\n\r\n      this.trigger('updateTest', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeTest(test: FuncTest | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(test)\r\n      ? test\r\n      : this.tests.indexOf(test);\r\n    const exists = index >= 0 && index < this.tests.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.tests[index];\r\n      \r\n      this.trigger('removeTest', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public getReturnType(defs: DefinitionProvider, paramsTypes: TypeMap = {}) \r\n  {\r\n    const context = Types.object({\r\n      ...this.params.options.props,\r\n      ...paramsTypes,\r\n    });\r\n\r\n    return this.expression.getType(defs, context);\r\n  }\r\n\r\n  public getParamTypes(): ObjectType\r\n  {\r\n    return isEmpty(this.defaults)\r\n      ? this.params\r\n      : Types.object(objectMap(this.params.options.props, (_, prop) => this.getParamType(prop)));\r\n  }\r\n\r\n  public getParamType(param: string)\r\n  {\r\n    const propType = this.params.options.props[param];\r\n\r\n    return propType.isOptional() && param in this.defaults && propType.isValid(this.defaults[param])\r\n      ? propType.getRequired()\r\n      : propType;\r\n  }\r\n\r\n  public getArguments(args: any, returnNew: boolean = true)\r\n  {\r\n    const target = returnNew ? { ...args } : args;\r\n\r\n    for (const prop in this.defaults)\r\n    {\r\n      const propType = this.params.options.props[prop];\r\n\r\n      if (!propType.getRequired().isValid(target[prop]))\r\n      {\r\n        target[prop] = DataTypes.copy(this.defaults[prop]);\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.tests.forEach((test) =>\r\n    {\r\n      test.args = cmd({ value: test.args });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { MapInput, toMap, reverseMap, now } from './fns';\r\nimport { EntityPropPair, EntityProps, EntityKeyType } from './Entity';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\n\r\n\r\nexport interface RelationTypeKey\r\n{\r\n  name: string;\r\n  props: string[];\r\n}\r\n\r\nexport interface RelationOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  kind: RelationKind;\r\n  subject: RelationTypeKey;\r\n  subjectRelationName?: string;\r\n  morphs?: [string, any];\r\n  morphsToRelated?: MapInput<any, string>;\r\n  related: RelationTypeKey[];\r\n  relatedRelationName?: string;\r\n  multiple?: boolean;\r\n  required?: boolean;\r\n  owns?: boolean;\r\n  extension?: boolean;\r\n}\r\n\r\nexport interface EntityRelation\r\n{\r\n  relation: Relation;\r\n  name: string;\r\n  kind: RelationKind;\r\n  related: RelationTypeKey[];\r\n  morphs?: EntityPropPair;\r\n  morphsToRelated?: Map<any, string>;\r\n  relatedToMorphs?: Map<string, any>;\r\n  where?: [string, any];\r\n  itemType: Type;\r\n  relationType: Type;\r\n  cascade: RelationCascade;\r\n  local: string[];\r\n}\r\n\r\nexport enum RelationKind\r\n{\r\n  HAS_MANY,\r\n  BELONGS_TO,\r\n  HAS_ONE,\r\n  ONE,\r\n  HAS_ONE_POLYMORPHIC,\r\n  ONE_POLYMORPHIC,\r\n}\r\n\r\nexport enum RelationCascade\r\n{\r\n  NONE,\r\n  CASCADE,\r\n  SET_NULL,\r\n  RESTRICT\r\n}\r\n\r\nexport interface RelationEvents\r\n{\r\n  changed(relation: Relation): void;\r\n  renamed(relation: Relation, oldName: string): void;\r\n  sync(relation: Relation, options: RelationOptions | Relation, defs: Definitions): void;\r\n}\r\n\r\nexport class Relation extends EventBase<RelationEvents>\r\n{\r\n\r\n  /**\r\n   * A unique name for the relationship between the subject type and related types.\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * When the relation was created.\r\n   */\r\n  public created: number;\r\n\r\n  /**\r\n   * When the relation was last updated.\r\n   */\r\n  public updated: number;\r\n  \r\n  /**\r\n   * A name-props pair for the type that has the foreign key. The name is the\r\n   * aliased type name and the props are the properties on it that reference\r\n   * the related type or types.\r\n   */\r\n  public subject: RelationTypeKey; \r\n  \r\n  /**\r\n   * The name the subject uses to refer to the related types.\r\n   */\r\n  public subjectRelationName: string;\r\n\r\n  /**\r\n   * A name-type pair for a property that exists on the subject type that is \r\n   * used to determine which related type.\r\n   */\r\n  public morphs: EntityPropPair | null;\r\n\r\n  /**\r\n   * A map of values from the morphs property to the related type names.\r\n   */\r\n  public morphsToRelated: Map<any, string>;\r\n\r\n  /**\r\n   * The list of name-prop pairs that the subject type can be related to based\r\n   * on the morph \r\n   */\r\n  public related: RelationTypeKey[];\r\n  \r\n  /**\r\n   * The name the related types use to refer to the subject.\r\n   */\r\n  public relatedRelationName: string;\r\n\r\n  /**\r\n   * A map from related type names to the morph value.\r\n   */\r\n  public relatedToMorphs: Map<string, any>;\r\n\r\n  /**\r\n   * The kind of relation created.\r\n   */\r\n  public kind: RelationKind;\r\n\r\n  /**\r\n   * List or single related instance?\r\n   */\r\n  public multiple: boolean;\r\n\r\n  /**\r\n   * Remove subject if related is removed\r\n   */\r\n  public required: boolean;\r\n\r\n  /**\r\n   * When related is being removed, stop it. I own it. But when subject is\r\n   * removed then remove the related.\r\n   */\r\n  public owns: boolean;\r\n\r\n  /**\r\n   * Related types extend the subject, the subject has a morph value to know\r\n   * which type it is.\r\n   */\r\n  public extension: boolean;\r\n\r\n  /**\r\n   * Needed for retrieving aliased types and their current properties.\r\n   */\r\n  protected defs: Definitions;\r\n\r\n  \r\n  public constructor(defs: Definitions, options: RelationOptions)\r\n  {\r\n    super();\r\n\r\n    this.defs = defs;\r\n    this.name = options.name;\r\n    this.updated = options.updated || now();\r\n    this.created = options.created || now();\r\n    this.kind = options.kind;\r\n    this.subject = options.subject;\r\n    this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n    this.morphs = options.morphs\r\n      ? this.decodeTypePair(options.morphs)\r\n      : null;\r\n    this.morphsToRelated = toMap(options.morphsToRelated);\r\n    this.related = options.related;\r\n    this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n    this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n    this.multiple = !!options.multiple;\r\n    this.required = !!options.required;\r\n    this.owns = !!options.owns;\r\n    this.extension = !!options.extension;\r\n  }\r\n\r\n  public sync(options: RelationOptions | Relation, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.updated = options.updated || now();\r\n      this.created = options.created || now();\r\n      this.kind = options.kind;\r\n      this.subject = options.subject;\r\n      this.subjectRelationName = options.subjectRelationName || options.related[0].name;\r\n      this.morphs = options.morphs\r\n        ? this.decodeTypePair(options.morphs)\r\n        : null;\r\n      this.morphsToRelated = toMap(options.morphsToRelated);\r\n      this.related = options.related;\r\n      this.relatedRelationName = options.relatedRelationName || options.subject.name;\r\n      this.relatedToMorphs = reverseMap(this.morphsToRelated);\r\n      this.multiple = !!options.multiple;\r\n      this.required = !!options.required;\r\n      this.owns = !!options.owns;\r\n      this.extension = !!options.extension;\r\n      \r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: RelationOptions | Relation): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Relation ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  private decodeTypePair([prop, propType]: [string, any]): EntityPropPair\r\n  {\r\n    return [prop, this.defs.getType(propType)];\r\n  }\r\n\r\n  private encodeTypePair(pair: [string, Type] | null): [string, any] | null\r\n  {\r\n    return pair\r\n      ? [pair[0], pair[1].encode()]\r\n      : null;\r\n  }\r\n\r\n  public encode(): RelationOptions\r\n  {\r\n    const { \r\n      name, created, updated,\r\n      kind, subject, subjectRelationName, \r\n      morphs, morphsToRelated, \r\n      related, relatedRelationName, \r\n      multiple, required, owns, extension \r\n    } = this;\r\n\r\n    return {\r\n      name,\r\n      updated,\r\n      created,\r\n      kind,\r\n      subject,\r\n      subjectRelationName,\r\n      morphs: this.encodeTypePair(morphs),\r\n      morphsToRelated: Array.from(morphsToRelated.entries()),\r\n      related,\r\n      relatedRelationName,\r\n      multiple, required, owns, extension,\r\n    };\r\n  }\r\n\r\n  private getRelatedWithName(name: string, related: RelationTypeKey[]): RelationTypeKey | undefined\r\n  {\r\n    return related.find((r) => r.name === name);\r\n  }\r\n\r\n  public rename(name: string, newName: string)\r\n  {\r\n    this.renameReference(name, newName, [this.subject]);\r\n    this.renameReference(name, newName, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renameReference(name: string, newName: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      withName.name = newName;\r\n    }\r\n  }\r\n\r\n  public remove(name: string)\r\n  {\r\n    this.removeReference(name, [this.subject]);\r\n    this.removeReference(name, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removeReference(name: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      related.splice(i, 1);\r\n      related[i].props = [];\r\n    }\r\n  }\r\n\r\n  public renameProp(name: string, prop: string, newProp: string)\r\n  {\r\n    this.renamePropReference(name, prop, newProp, [this.subject]);\r\n    this.renamePropReference(name, prop, newProp, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private renamePropReference(name: string, prop: string, newProp: string, related: RelationTypeKey[])\r\n  {\r\n    const withName = this.getRelatedWithName(name, related);\r\n\r\n    if (withName)\r\n    {\r\n      const i = withName.props.indexOf(prop);\r\n\r\n      if (i !== -1)\r\n      {\r\n        withName.props[i] = newProp;\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeProp(name: string, prop: string)\r\n  {\r\n    this.removePropReference(name, prop, [this.subject]);\r\n    this.removePropReference(name, prop, this.related);\r\n\r\n    this.changed();\r\n  }\r\n\r\n  private removePropReference(name: string, prop: string, related: RelationTypeKey[])\r\n  {\r\n    const i = related.findIndex((r) => r.name === name);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const withName = related[i];\r\n      const k = withName.props.indexOf(prop);\r\n\r\n      if (k !== -1)\r\n      {\r\n        withName.props.splice(k, 1);\r\n\r\n        if (withName.props.length === 0)\r\n        {\r\n          related.splice(i, 1);\r\n\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getPropTypes(related: RelationTypeKey[]): Type[]\r\n  {\r\n    const types: Type[] = [];\r\n\r\n    related.forEach(({ name, props }) => \r\n    {\r\n      const entity = this.defs.getEntity(name);\r\n      const primary = entity.getEntityProps();\r\n\r\n      props.forEach((_, i) =>\r\n      {\r\n        const propType = primary.props[i][1];\r\n\r\n        types[i] = types[i]\r\n          ? Types.merge(types[i], propType)\r\n          : propType.clone();\r\n      });\r\n    });\r\n\r\n    return types;\r\n  }\r\n\r\n  public isEmpty()\r\n  {\r\n    return this.subject.props.length === 0\r\n        || this.related.length === 0;\r\n  }\r\n\r\n  private getItemType(related: RelationTypeKey[]): Type\r\n  {\r\n    const typesResolved = related.map((r) => this.defs.getType(r.name));\r\n    const itemType = typesResolved.length > 1\r\n      ? Types.many(typesResolved)\r\n      : typesResolved[0];\r\n\r\n    return itemType;\r\n  }\r\n\r\n  public getSubjectRelation(subjectName: string): EntityRelation | null\r\n  {\r\n    if (this.subject.name !== subjectName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.subjectRelationName;\r\n    const local = this.subject.props;\r\n    const related = this.related;\r\n    const itemType = this.getItemType(related);\r\n    const cascade = this.owns && this.multiple\r\n      ? RelationCascade.CASCADE\r\n      : this.required\r\n        ? RelationCascade.RESTRICT\r\n        : RelationCascade.SET_NULL;\r\n    const relationType = this.required\r\n      ? itemType\r\n      : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.BELONGS_TO\r\n      : this.kind; \r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.morphs = this.morphs;\r\n      relation.morphsToRelated = this.morphsToRelated;\r\n      relation.relatedToMorphs = this.relatedToMorphs;\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getRelatedRelation(relatedName: string): EntityRelation | null\r\n  {\r\n    const withName = this.getRelatedWithName(relatedName, this.related);\r\n\r\n    if (!withName)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const name = this.relatedRelationName;\r\n    const local = withName.props;\r\n    const related = [this.subject];\r\n    const itemType = this.getItemType(related);\r\n    const cascade = RelationCascade.NONE;\r\n    const relationType = this.multiple\r\n      ? Types.list(itemType)\r\n      : this.required\r\n        ? itemType\r\n        : Types.optional(itemType);\r\n    const kind = this.kind === RelationKind.HAS_MANY\r\n      ? RelationKind.HAS_MANY\r\n      : this.morphs\r\n        ? RelationKind.ONE_POLYMORPHIC\r\n        : RelationKind.ONE;\r\n\r\n    const relation: EntityRelation = {\r\n      relation: this,\r\n      name,\r\n      kind,\r\n      local,\r\n      cascade,\r\n      related,\r\n      itemType,\r\n      relationType,\r\n    };\r\n\r\n    if (this.morphs) {\r\n      relation.where = [\r\n        this.morphs[0],\r\n        this.relatedToMorphs.get(relatedName)\r\n      ];\r\n    }\r\n\r\n    return relation;\r\n  }\r\n\r\n  public getTypeProps(name: string): EntityProps[]\r\n  {\r\n    const typeProps: EntityProps[] = [];\r\n\r\n    if (this.subject.name === name)\r\n    {\r\n      const propTypesList = this.getPropTypes(this.related);\r\n      const props: EntityPropPair[] = this.subject.props.map((prop, i) => [prop, propTypesList[i]]);\r\n\r\n      typeProps.push({\r\n        type: EntityKeyType.FOREIGN,\r\n        props,\r\n        relation: this,\r\n      });\r\n\r\n      if (this.morphs)\r\n      {\r\n        typeProps.push({\r\n          type: EntityKeyType.NONE,\r\n          props: [this.morphs],\r\n          relation: this,\r\n        });\r\n      }\r\n    }\r\n\r\n    return typeProps;\r\n  }\r\n\r\n  // one{id} has many many{one_id}\r\n  public static hasMany(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string, \r\n    many: string, \r\n    oneRelationName?: string, \r\n    manyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.many;\r\n    const subjectRelationName = options.manyRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasMany_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_MANY,\r\n      subject: { \r\n        name: options.many,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps\r\n      }],\r\n      relatedRelationName,\r\n      multiple: true,\r\n      owns: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n      required: options.owns !== false, // tslint:disable-line: no-boolean-literal-compare\r\n    });\r\n  }\r\n\r\n  // oneOfMany{belongsTo_id} belongs to belongsTo{id}\r\n  public static belongsTo(defs: Definitions, options: {\r\n    name?: string,\r\n    oneOfMany: string,\r\n    belongsTo: string, \r\n    oneOfManyRelationName?: string,\r\n    belongsToRelationName?: string, \r\n    foreignKeyPrefix?: string, \r\n    owns?: boolean,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation \r\n  {\r\n    return this.hasMany(defs, {\r\n      name: options.name,\r\n      one: options.belongsTo,\r\n      many: options.oneOfMany,\r\n      oneRelationName: options.belongsToRelationName,\r\n      manyRelationName: options.oneOfManyRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // hasOne{one_id} has one one{id}\r\n  public static hasOne(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    one: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName?: string,\r\n    oneRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const relatedRelationName = options.oneRelationName || options.hasOne;\r\n    const subjectRelationName = options.hasOneRelationName || options.one;\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const name = options.name || (subjectRelationName + '_hasOne_' + relatedRelationName);\r\n    const relatedProps = defs.getEntity(options.one).getPrimary().props;\r\n    const subjectProps = relatedProps.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related: [{\r\n        name: options.one,\r\n        props: relatedProps,\r\n      }],\r\n      relatedRelationName,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n  // one{id} belongs to belongsTo{one_id}\r\n  public static belongsToOne(defs: Definitions, options: {\r\n    name?: string,\r\n    one: string,\r\n    belongsTo: string,\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    oneRelationName?: string,\r\n    belongsToRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    return this.hasOne(defs, {\r\n      name: options.name,\r\n      hasOne: options.belongsTo,\r\n      one: options.one,\r\n      required: options.required,\r\n      owns: options.owns,\r\n      hasOneRelationName: options.belongsToRelationName,\r\n      oneRelationName: options.oneRelationName,\r\n      foreignKeyPrefix: options.foreignKeyPrefix,\r\n    })\r\n  }\r\n\r\n  // hasOne{poly_id, poly_type?} has one a{a_id}, b{b_id}\r\n  public static hasOnePolymorphic(defs: Definitions, options: {\r\n    name?: string,\r\n    hasOne: string,\r\n    morphs: [string, any],\r\n    morphsToRelated: MapInput<any, string>,\r\n    poly: string[],\r\n    required?: boolean,\r\n    owns?: boolean,\r\n    hasOneRelationName: string,\r\n    polyRelationName?: string,\r\n    foreignKeyPrefix?: string,\r\n    created?: number,\r\n    updated?: number,\r\n  }): Relation\r\n  {\r\n    const subjectRelationName = options.hasOneRelationName;\r\n    const relatedRelationName = options.polyRelationName || options.hasOne;\r\n    const name = options.name || (subjectRelationName + '_hasOnePolymorphic_' + relatedRelationName);\r\n    const foreignKeyPrefix = options.foreignKeyPrefix || (subjectRelationName + '_');\r\n    const related = options.poly.map((polyName) => ({\r\n      name: polyName, \r\n      props: defs.getEntity(polyName).getPrimary().props\r\n    }));\r\n    const subjectProps = related[0].props.map((p) => foreignKeyPrefix + p);\r\n\r\n    return new Relation(defs, {\r\n      name,\r\n      created: options.created || now(),\r\n      updated: options.updated || now(),\r\n      kind: RelationKind.HAS_ONE_POLYMORPHIC,\r\n      subject: {\r\n        name: options.hasOne,\r\n        props: subjectProps,\r\n      },\r\n      subjectRelationName,\r\n      related,\r\n      relatedRelationName,\r\n      morphs: options.morphs,\r\n      morphsToRelated: options.morphsToRelated,\r\n      required: options.required,\r\n      owns: options.owns,\r\n    });\r\n  }\r\n\r\n}","import { Type } from './Type';\r\nimport { Expression } from './Expression';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { NoExpression } from './exprs/No';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { arraySync, isNumber, now } from './fns';\r\n\r\n\r\nexport interface ProgramOptions\r\n{\r\n  name: string;\r\n  author: string;\r\n  description: string;\r\n  meta: any;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  datasets: ProgramDataSet[];\r\n  expression: any;\r\n}\r\n\r\nexport interface ProgramDataSet\r\n{\r\n  name: string;\r\n  data: any;\r\n  created: number;\r\n  updated: number;\r\n  meta: any;\r\n}\r\n\r\nexport interface ProgramEvents\r\n{\r\n  changed(program: Program): void;\r\n  renamed(program: Program, oldName: string): void;\r\n  sync(program: Program, options: ProgramOptions, defs: Definitions): void;\r\n  addDataset(program: Program, dataset: ProgramDataSet): void;\r\n  removeDataset(program: Program, dataset: ProgramDataSet): void;\r\n  updateDataset(program: Program, dataset: ProgramDataSet): void;\r\n}\r\n\r\nexport class Program extends EventBase<ProgramEvents> implements ProgramOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ProgramOptions> = {}): Program {\r\n    return new Program({\r\n      name,\r\n      author: '',\r\n      description: '',\r\n      meta: null,\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      datasets: [{\r\n        name: 'Data Set #1',\r\n        data: Object.create(null),\r\n        created: now(),\r\n        updated: now(),\r\n        meta: null,\r\n      }],\r\n      expression: NoExpression.instance,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public author: string;\r\n  public description: string;\r\n  public meta: any;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public datasets: ProgramDataSet[];\r\n  public expression: Expression;\r\n\r\n  public constructor(options: ProgramOptions, defs: Definitions) \r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.author = options.author;\r\n    this.description = options.description;\r\n    this.meta = options.meta;\r\n    this.created = options.created;\r\n    this.updated = options.updated;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.expression = defs.getExpression(options.expression);\r\n    this.datasets = options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) }));\r\n  }\r\n\r\n  public sync(options: ProgramOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.author = options.author;\r\n      this.description = options.description;\r\n      this.meta = options.meta;\r\n      this.created = options.created;\r\n      this.updated = options.updated;\r\n      this.dataType = options instanceof Program\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.expression = options instanceof Program\r\n        ? options.expression\r\n        : defs.getExpression(options.expression);\r\n\r\n      arraySync(\r\n        this.datasets, \r\n        options instanceof Program\r\n          ? options.datasets\r\n          : options.datasets.map((d) => ({ ...d, data: this.dataType.fromJson(d.data) })),\r\n        (a, b) => a.name === b.name || a.created === b.created,\r\n        (target, value) => this.addDataset(value, true),\r\n        (target, index, value) => this.removeDataset(index, true),\r\n        (target, index, value, newValue) => this.updateDataset(value, newValue, true),\r\n      );\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ProgramOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof Program ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ProgramOptions \r\n  {\r\n    const { name, author, description, meta, created, updated, dataType, datasets, expression } = this;\r\n\r\n    return {\r\n      name,\r\n      author,\r\n      description,\r\n      meta,\r\n      created,\r\n      updated,\r\n      dataType: dataType.encode(),\r\n      datasets: datasets.map((d) => ({ ...d, data: dataType.toJson(d.data) })),\r\n      expression: expression.encode(),\r\n    };\r\n  }\r\n\r\n  public addDataset(dataset: ProgramDataSet, delayChange: boolean = false)\r\n  {\r\n    this.datasets.push(dataset);\r\n\r\n    this.trigger('addDataset', this, dataset);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public updateDataset(dataset: ProgramDataSet | number, newDataset: ProgramDataSet, delayChange: boolean = false): boolean\r\n  {\r\n    const target = isNumber(dataset)\r\n      ? this.datasets[dataset]\r\n      : dataset;\r\n    const exists = !!target;\r\n\r\n    if (exists)\r\n    {\r\n      Object.assign(target, newDataset);\r\n\r\n      this.trigger('updateDataset', this, target);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public removeDataset(dataset: ProgramDataSet | number, delayChange: boolean = false): boolean\r\n  {\r\n    const index = isNumber(dataset)\r\n      ? dataset\r\n      : this.datasets.indexOf(dataset);\r\n    const exists = index >= 0 && index < this.datasets.length;\r\n\r\n    if (exists)\r\n    {\r\n      const removed = this.datasets[index];\r\n      \r\n      this.trigger('removeDataset', this, removed);\r\n\r\n      if (!delayChange)\r\n      {\r\n        this.changed();\r\n      }\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    const cmd = runtime.getCommand(transform);\r\n\r\n    this.datasets.forEach((dataset) => \r\n    {\r\n      dataset.data = cmd({ value: dataset.data });\r\n    });\r\n\r\n    this.changed();\r\n  }\r\n  \r\n}","import { Type } from './Type';\r\nimport { Definitions } from './Definitions';\r\nimport { Types } from './Types';\r\nimport { Expression } from './Expression';\r\nimport { Runtime } from './Runtime';\r\nimport { EventBase } from './EventBase';\r\nimport { DataTypes } from './DataTypes';\r\nimport { now } from './fns';\r\n\r\n\r\nexport interface ReferenceDataOptions\r\n{\r\n  name: string;\r\n  created: number;\r\n  updated: number;\r\n  dataType: any;\r\n  data: any;\r\n  meta: any;\r\n}\r\n\r\nexport interface ReferenceDataEvents\r\n{\r\n  changed(data: ReferenceData): void;\r\n  renamed(data: ReferenceData, oldName: string): void;\r\n  sync(data: ReferenceData, options: ReferenceDataOptions, defs: Definitions): void;\r\n}\r\n\r\nexport class ReferenceData extends EventBase<ReferenceDataEvents> implements ReferenceDataOptions\r\n{\r\n\r\n  public static create(defs: Definitions, defaults: Partial<ReferenceDataOptions> = {}) {\r\n    return new ReferenceData({\r\n      name: '',\r\n      created: now(),\r\n      updated: now(),\r\n      dataType: Types.object(),\r\n      data: Object.create(null),\r\n      meta: null,\r\n      ...defaults,\r\n    }, defs);\r\n  }\r\n\r\n  public name: string;\r\n  public created: number;\r\n  public updated: number;\r\n  public dataType: Type;\r\n  public data: any;\r\n  public meta: any;\r\n\r\n  public constructor(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    super();\r\n\r\n    this.name = options.name;\r\n    this.created = options.created || now();\r\n    this.updated = options.updated || now();\r\n    this.meta = options.meta;\r\n    this.dataType = defs.getType(options.dataType);\r\n    this.data = this.dataType.fromJson(options.data);\r\n  }\r\n\r\n  public sync(options: ReferenceDataOptions, defs: Definitions)\r\n  {\r\n    if (this.hasChanges(options))\r\n    {\r\n      this.name = options.name;\r\n      this.created = options.created || now();\r\n      this.updated = options.updated || now();\r\n      this.meta = options.meta;\r\n      this.dataType = options instanceof ReferenceData\r\n        ? options.dataType\r\n        : defs.getType(options.dataType);\r\n      this.data = options instanceof ReferenceData\r\n        ? options.data\r\n        : this.dataType.fromJson(options.data);\r\n\r\n      this.trigger('sync', this, options, defs);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public hasChanges(options: ReferenceDataOptions): boolean\r\n  {\r\n    return !DataTypes.equals(options instanceof ReferenceData ? options.encode() : options, this.encode());\r\n  }\r\n\r\n  public changed()\r\n  {\r\n    this.updated = now();\r\n\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public encode(): ReferenceDataOptions\r\n  {\r\n    const { name, created, updated, meta, dataType, data } = this;\r\n\r\n    return {\r\n      name,\r\n      created,\r\n      updated,\r\n      meta,\r\n      dataType: dataType.encode(),\r\n      data: dataType.toJson(data),\r\n    };\r\n  }\r\n\r\n  public refactor(transform: Expression, runtime: Runtime)\r\n  {\r\n    this.data = runtime.run(transform, { value: this.data });\r\n\r\n    this.changed();\r\n  }\r\n\r\n}\r\n","\r\nimport { Type, TypeProvider, TypeDescribeProvider, TypeSub, TypeCompatibleOptions } from '../Type';\r\nimport { Expression } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { ID } from './ID';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { NullType } from './Null';\r\nimport { Operations } from '../Operation';\r\nimport { Computeds } from '../Computed';\r\n\r\n\r\nconst INDEX_NAME = 1;\r\n\r\nexport class ReferenceType extends Type<string>\r\n{\r\n\r\n  public static STEP_REFERENCED = 'referenced';\r\n\r\n  public static id = ID.Reference;\r\n\r\n  public static operations = new Operations(ID.Reference + ID.Delimiter);\r\n\r\n  public static computeds = new Computeds(ID.Reference + ID.Delimiter);\r\n\r\n  public static baseType = new ReferenceType('', null);\r\n\r\n  public static decode(data: any[], types: TypeProvider): ReferenceType \r\n  {\r\n    const type = data[INDEX_NAME];\r\n\r\n    return new ReferenceType( type, types );\r\n  }\r\n\r\n  public static encode(type: ReferenceType): any \r\n  {\r\n    return [this.id, type.options];\r\n  }\r\n\r\n  public static describePriority: number = -1;\r\n  \r\n  public static describe(data: any, describer: TypeDescribeProvider): Type | null\r\n  {\r\n    return null;\r\n  }\r\n\r\n  public static registered: boolean = false;\r\n\r\n  public static register(): void\r\n  {\r\n\r\n  }\r\n\r\n  protected provider: TypeProvider;\r\n\r\n  public constructor(name: string, provider: TypeProvider)\r\n  {\r\n    super(name);\r\n\r\n    this.provider = provider;\r\n  }\r\n\r\n  public getType()\r\n  {\r\n    if (!this.provider)\r\n    {\r\n      return NullType.baseType;\r\n    }\r\n\r\n    const data = this.provider.getData(this.options);\r\n\r\n    return data ? data.dataType : NullType.baseType;\r\n  }\r\n\r\n  public getOperations()\r\n  {\r\n    return this.getType().getOperations();\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    return ReferenceType.id;\r\n  }\r\n\r\n  public merge(type: ReferenceType): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    return this.getType().getSubType(expr, def, context);\r\n  }\r\n\r\n  public getSubTypes(def: DefinitionProvider): TypeSub[]\r\n  {\r\n    return this.getType().getSubTypes(def);\r\n  }\r\n\r\n  public getExactType(value: any): Type \r\n  {\r\n    return this.getType().getExactType(value);\r\n  }\r\n\r\n  public getSimplifiedType(): Type\r\n  {\r\n    return this.getType().getSimplifiedType();\r\n  }\r\n\r\n  protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean \r\n  {\r\n    return other instanceof ReferenceType\r\n      ? this.getType().isCompatible(other.getType(), options)\r\n      : this.getType().isCompatible(other, options);\r\n  }\r\n\r\n  public isOptional(): boolean\r\n  {\r\n    return this.getType().isOptional();\r\n  }\r\n\r\n  public isSimple(): boolean\r\n  {\r\n    return this.getType().isSimple();\r\n  }\r\n\r\n  protected acceptsOtherTypes(): boolean\r\n  {\r\n    return true;\r\n  }\r\n  \r\n  public traverse<R>(traverse: Traverser<Type, R>): R\r\n  {\r\n    return traverse.enter(this, () => \r\n      traverse.step(ReferenceType.STEP_REFERENCED, this.getType(), (replaceWith) => replaceWith instanceof ReferenceType ? this.options = replaceWith.options : 0)\r\n    );\r\n  }\r\n\r\n  public getTypeFromStep(step: TraverseStep): Type | null\r\n  {\r\n    return step === ReferenceType.STEP_REFERENCED\r\n      ? this.getType() \r\n      : null;\r\n  }\r\n\r\n  public setParent(parent: Type = null): void\r\n  {\r\n    this.parent = parent;\r\n  }\r\n\r\n  public removeDescribedRestrictions(): void\r\n  {\r\n    \r\n  }\r\n\r\n  public getCreateExpression(): Expression\r\n  {\r\n    return this.getType().getCreateExpression();\r\n  }\r\n\r\n  public getValidateExpression(): Expression\r\n  {\r\n    return this.getType().getValidateExpression();\r\n  }\r\n\r\n  public getCompareExpression(): Expression\r\n  {\r\n    return this.getType().getCompareExpression();\r\n  }\r\n\r\n  public getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression\r\n  {\r\n    // from & to === referenced\r\n    return newValue;\r\n  }\r\n  \r\n  public isValid(value: any): boolean \r\n  {\r\n    return this.getType().isValid(value);\r\n  }\r\n\r\n  public normalize(value: any): any\r\n  {\r\n    return this.getType().normalize(value);\r\n  }\r\n\r\n  public newInstance(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public clone(): ReferenceType\r\n  {\r\n    return new ReferenceType(this.options, this.provider);\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    return ReferenceType.encode(this);\r\n  }\r\n\r\n  public create(): any\r\n  {\r\n    return this.getType().create();\r\n  }\r\n\r\n  public random(rnd: (a: number, b: number, whole: boolean) => number): any\r\n  {\r\n    return this.getType().random(rnd);\r\n  }\r\n\r\n  public fromJson(json: any): any\r\n  {\r\n    return this.getType().fromJson(json);\r\n  }\r\n\r\n  public toJson(value: any): any\r\n  {\r\n    return this.getType().toJson(value);\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, isObject } from '../fns';\r\n\r\n\r\nexport type FastMapOptions<T> = Map<string, T> | Record<string, T> | Array<[string, T]> | FastMap<T>;\r\n\r\n\r\nexport class FastMap<T>\r\n{\r\n\r\n  public indexes: Record<string, number>;\r\n  public keys: string[];\r\n  public values: T[];\r\n\r\n  public constructor(options?: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: FastMapOptions<T>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: FastMapOptions<T>)\r\n  {\r\n    if (options instanceof Map)\r\n    {\r\n      for (const [key, value] of options.entries())\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (options instanceof FastMap)\r\n    {\r\n      for (let i = 0; i < options.length(); i++)\r\n      {\r\n        this.set(options.keyAt(i), options.valueAt(i));\r\n      }\r\n    }\r\n    else if (isArray(options))\r\n    {\r\n      for (const [key, value] of options)\r\n      {\r\n        this.set(key, value);\r\n      }\r\n    }\r\n    else if (isObject(options))\r\n    {\r\n      for (const key in options)\r\n      {\r\n        this.set(key, options[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  public sync(options: FastMapOptions<T>, combine?: (original: T, given: T) => void)\r\n  {\r\n    const all = new FastMap(options);\r\n\r\n    this.filter((_, key) => all.has(key));\r\n    \r\n    all.forEach((value, key) => {\r\n      if (this.has(key) && combine) {\r\n        combine(this.get(key), value);\r\n      } else {\r\n        this.set(key, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  public clear()\r\n  {\r\n    this.indexes = Object.create(null);\r\n    this.keys = [];\r\n    this.values = [];\r\n  }\r\n\r\n  public length(): number\r\n  {\r\n    return this.keys.length;\r\n  }\r\n\r\n  public valueAt(i: number): T | undefined\r\n  {\r\n    return this.values[i];\r\n  }\r\n\r\n  public keyAt(i: number): string | undefined\r\n  {\r\n    return this.keys[i];\r\n  }\r\n\r\n  public pairAt(i: number): [string, T] | [undefined, undefined]\r\n  {\r\n    return [this.keys[i], this.values[i]];\r\n  }\r\n\r\n  public has(key: string | T): boolean\r\n  { \r\n    return isString(key) ? key in this.indexes : this.values.includes(key);\r\n  }\r\n\r\n  public set(key: string, value: T)\r\n  {\r\n    const i = this.indexes[key];\r\n\r\n    if (isNumber(i)) \r\n    {\r\n      this.values.splice(i, 1, value);\r\n    } \r\n    else \r\n    {\r\n      this.indexes[key] = this.values.length;\r\n      this.values.push(value);\r\n      this.keys.push(key);\r\n    }\r\n  }\r\n\r\n  public rekey(old: string | T, newKey: string): boolean\r\n  {\r\n    const i = this.indexOf(old);\r\n    const exists = i !== -1;\r\n\r\n    if (exists)\r\n    {\r\n      delete this.indexes[this.keys[i]];\r\n      this.indexes[newKey] = i;\r\n      this.keys.splice(i, 1, newKey);\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  public sort(cmp: (a: T, b: T) => number)\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(av, bv)));\r\n  }\r\n\r\n  public sortByKey(cmp: (a: string, b: string) => number = (a, b) => a.localeCompare(b))\r\n  {\r\n    this.reset(this.toPairs().sort(([ak, av], [bk, bv]) => cmp(ak, bk)));\r\n  }\r\n\r\n  public reindex(): void\r\n  {\r\n    const keys = this.keys;\r\n    const indexes = Object.create(null);\r\n\r\n    for (let i = 0; i < keys.length; i++)\r\n    {\r\n      indexes[keys[i]] = i;\r\n    }\r\n\r\n    this.indexes = indexes;\r\n  }\r\n\r\n  public swap(i: number, k: number): boolean\r\n  {\r\n    if (i === k || i < 0 || k < 0 || i >= this.keys.length || k >= this.keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const ikey = this.keys[i];\r\n    const ivalue = this.values[i];\r\n    const kkey = this.keys[k];\r\n    const kvalue = this.values[k];\r\n\r\n    this.indexes[ikey] = k;\r\n    this.indexes[kkey] = i;\r\n\r\n    this.keys.splice(i, 1, kkey);\r\n    this.keys.splice(k, 1, ikey);\r\n\r\n    this.values.splice(i, 1, kvalue);\r\n    this.values.splice(k, 1, ivalue);\r\n\r\n    return true;\r\n  }\r\n\r\n  public get<O = undefined>(key: string | T, otherwise?: O): T | O\r\n  {\r\n    return isString(key) ? this.values[this.indexes[key]] || otherwise : key;\r\n  }\r\n\r\n  public remove(key: string | T, respectOrder: boolean = false): T | undefined\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i !== -1)\r\n    {\r\n      const { keys, values } = this;\r\n      const removing = values[i];\r\n\r\n      if (respectOrder)\r\n      {\r\n        this.removeAt(i);\r\n      }\r\n      else\r\n      {\r\n        delete this.indexes[keys[i]];\r\n        const lastKey = keys.pop();\r\n        const lastValue = values.pop();\r\n\r\n        if (i !== keys.length)\r\n        {\r\n          keys.splice(i, 1, lastKey);\r\n          values.splice(i, 1, lastValue);\r\n          this.indexes[lastKey] = i;\r\n        }\r\n      }\r\n\r\n      return removing;\r\n    }\r\n  }\r\n\r\n  public removeAt(i: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (i < 0 || i >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    delete this.indexes[keys[i]];\r\n    keys.splice(i, 1);\r\n    values.splice(i, 1);\r\n\r\n    while (++i < keys.length)\r\n    {\r\n      this.indexes[keys[i]]--;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public move(from: number, to: number): boolean\r\n  {\r\n    const { keys, values } = this;\r\n\r\n    if (from < 0 || to < 0 || from >= keys.length || to >= keys.length)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (from !== to)\r\n    {\r\n      const value = values[from];\r\n      const key = keys[from];\r\n\r\n      values.splice(from, 1);\r\n      keys.splice(from, 1);\r\n\r\n      values.splice(to, 0, value);\r\n      keys.splice(to, 0, key);\r\n      \r\n      this.reindex();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public moveToFront(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, 0);\r\n  }\r\n\r\n  public moveToBack(key: string | T): boolean\r\n  {\r\n    const i = this.indexOf(key);\r\n\r\n    if (i === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return this.move(i, this.keys.length - 1);\r\n  }\r\n\r\n  public indexOf(key: string | T): number\r\n  {\r\n    return isString(key) \r\n      ? key in this.indexes\r\n        ? this.indexes[key]\r\n        : -1\r\n      : this.values.indexOf(key);\r\n  }\r\n\r\n  public keyOf(value: T): string | undefined\r\n  {\r\n    const i = this.values.indexOf(value);\r\n\r\n    return i === -1 ? undefined : this.keys[i];\r\n  }\r\n\r\n  public toPairs(): Array<[string, T]>\r\n  {\r\n    return this.values.map((value, i) => [this.keys[i], value]);\r\n  }\r\n\r\n  public toMap(): Map<string, T>\r\n  {\r\n    return new Map(this.toPairs());\r\n  }\r\n\r\n  public toObject(): Record<string, T>\r\n  {\r\n    const obj = Object.create(null);\r\n\r\n    for (let i = 0; i < this.keys.length; i++)\r\n    {\r\n      obj[this.keys[i]] = this.values[i];\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  public clone(): FastMap<T>\r\n  {\r\n    return new FastMap(this);\r\n  }\r\n\r\n  public forEach(iterator: (value: T, key: string) => void)\r\n  {\r\n    const { keys, values } = this;\r\n    let i = 0;\r\n\r\n    while (i < keys.length)\r\n    {\r\n      const key = keys[i];\r\n      const value = values[i];\r\n\r\n      iterator(value, key);\r\n\r\n      if (keys[i] === key)\r\n      {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n\r\n  public filter(pass: (value: T, key: string) => boolean)\r\n  {\r\n    const { values, keys, indexes } = this;\r\n    let passed = 0; \r\n    \r\n    for (let i = 0; i < values.length; i++) \r\n    {\r\n      const value = values[i];\r\n      const key = keys[i];\r\n\r\n      if (pass(value, key))\r\n      {\r\n        values[passed] = value;\r\n        keys[passed] = key;\r\n        indexes[key] = passed;\r\n        passed++;\r\n      }\r\n      else\r\n      {\r\n        delete indexes[key];\r\n      }\r\n    }\r\n\r\n    if (passed < values.length)\r\n    {\r\n      values.splice(passed, values.length - passed);\r\n      keys.splice(passed, keys.length - passed);\r\n    }\r\n  }\r\n\r\n}","import { isString, isNumber, isArray, arraySync } from '../fns';\r\nimport { FastMap, FastMapOptions } from './FastMap';\r\n\r\n\r\nexport interface Named\r\n{\r\n  name: string;\r\n}\r\n\r\nexport type NamedMapOptions<N extends Named> = FastMapOptions<N> | N[];\r\n\r\nexport class NamedMap<N extends Named> extends FastMap<N>\r\n{\r\n\r\n  public static isNamedArray<N extends Named>(x: any): x is N[]\r\n  {\r\n    return isArray(x) && x.length > 0 && isString(x[0].name);\r\n  }\r\n\r\n  public constructor(options?: NamedMapOptions<N>)\r\n  {\r\n    super();\r\n\r\n    if (options)\r\n    {\r\n      this.merge(options);\r\n    }\r\n  }\r\n\r\n  public reset(options: NamedMapOptions<N>)\r\n  {\r\n    this.clear();\r\n    this.merge(options);\r\n  }\r\n\r\n  public merge(options: NamedMapOptions<N>)\r\n  {\r\n    if (NamedMap.isNamedArray(options))\r\n    {\r\n      for (const named of options)\r\n      {\r\n        this.add(named);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      super.merge(options);\r\n    }\r\n  }\r\n\r\n  public sync(options: NamedMapOptions<N>, combine?: (original: N, given: N) => void)\r\n  {\r\n    super.sync(new NamedMap(options), combine);\r\n  }\r\n\r\n  public syncManual<O extends Named = N>(\r\n    sourceOptions: NamedMapOptions<O>,\r\n    add: (target: this, value: O, key: string) => void,\r\n    remove: (target: this, value: N, key: string) => void,\r\n    update: (target: this, value: N, newValue: O, key: string) => void,\r\n    matches?: (a: N, b: O) => boolean,\r\n  ): this {\r\n    const source = new NamedMap<O>(sourceOptions);\r\n\r\n    if (matches) {\r\n      arraySync(\r\n        this.values, \r\n        source.values, \r\n        matches, \r\n        (target, value) => add(this, value, value.name), \r\n        (target, index, value) => remove(this, value, value.name),\r\n        (target, index, value, newValue) => update(this, value, newValue, value.name),\r\n      );\r\n    } else {\r\n      this.forEach((targetValue, targetKey) => {\r\n        const existing = source.get(targetKey);\r\n        if (existing === undefined) {\r\n          remove(this, targetValue, targetKey);\r\n        } else {\r\n          update(this, targetValue, existing, targetKey);\r\n        }\r\n      });\r\n\r\n      source.forEach((sourceValue, sourceKey) => {\r\n        if (!this.has(sourceKey)) {\r\n          add(this, sourceValue, sourceKey);\r\n        }\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public rename(namedInput: string | N, newName: string): boolean\r\n  {\r\n    const named = this.get(namedInput);\r\n    const valid = !!named && named.name !== newName;\r\n    \r\n    if (valid)\r\n    {\r\n      this.rekey(named, newName);\r\n      \r\n      named.name = newName;\r\n    }\r\n\r\n    return valid;\r\n  }\r\n\r\n  public has(named: string | N): boolean\r\n  {\r\n    return this.nameOf(named) in this.indexes;\r\n  }\r\n\r\n  public add(named: N)\r\n  {\r\n    this.set(named.name, named);\r\n  }\r\n\r\n  public nameOf(named: string | N): string\r\n  {\r\n    return isString(named) ? named : named.name;\r\n  }\r\n\r\n  public valueOf(named: string | N): N\r\n  {\r\n    return isString(named) ? this.get(named) : named;\r\n  }\r\n\r\n  public indexOf(named: string | N): number\r\n  {\r\n    const i = this.indexes[this.nameOf(named)];\r\n\r\n    return isNumber(i) ? i : -1;\r\n  }\r\n\r\n  public keyOf(named: N): string | undefined\r\n  {\r\n    return named.name;\r\n  }\r\n\r\n  public clone(): NamedMap<N>\r\n  {\r\n    return new NamedMap(this);\r\n  }\r\n\r\n}","\r\nimport { isArray, objectMap, objectValues, objectEach } from './fns';\r\nimport { Type, TypeClass, TypeParser, TypeMap, TypeCompatibleOptions } from './Type';\r\nimport { Expression, ExpressionClass, ExpressionMap } from './Expression';\r\nimport { Operations, OperationTypes, OperationTypeInput, OperationGeneric, OperationPair, OperationMapping, isOperationTypeFunction, OperationTypeProvider } from './Operation';\r\nimport { Computeds, Computed } from './Computed';\r\nimport { Relation, RelationOptions, EntityRelation } from './Relation';\r\nimport { Program, ProgramOptions, ProgramDataSet } from './Program';\r\nimport { Entity, EntityOptions, EntityProps, EntityTranscoder } from './Entity';\r\nimport { Func, FuncOptions, FuncTest } from './Func';\r\nimport { Types } from './Types';\r\nimport { Traverser } from './Traverser';\r\nimport { ID } from './types/ID';\r\nimport { EntityType } from './types/Entity';\r\nimport { AnyType } from './types/Any';\r\nimport { ManyType } from './types/Many';\r\nimport { ObjectType } from './types/Object';\r\nimport { NullType } from './types/Null';\r\nimport { ConstantExpression } from './exprs/Constant';\r\nimport { GetEntityExpression } from './exprs/GetEntity';\r\nimport { NoExpression } from './exprs/No';\r\nimport { InvokeExpression } from './exprs/Invoke';\r\nimport { MethodExpression } from './exprs/Method';\r\nimport { GetRelationExpression } from './exprs/GetRelation';\r\nimport { Runtime } from './Runtime';\r\nimport { DefinitionProvider } from './DefinitionProvider';\r\nimport { ReferenceDataOptions, ReferenceData } from './ReferenceData';\r\nimport { GetDataExpression } from './exprs/GetData';\r\nimport { ReferenceType } from './types/Reference';\r\nimport { NamedMap } from './maps/NamedMap';\r\nimport { FastMap } from './maps/FastMap';\r\nimport { EventBase } from './EventBase';\r\n\r\n\r\n\r\nexport interface DefinitionsImportOptions\r\n{\r\n  entities?: Record<string, Entity | EntityOptions>;\r\n  functions?: Record<string, Func | FuncOptions>;\r\n  relations?: Record<string, RelationOptions>;\r\n  programs?: Record<string, Program | ProgramOptions>;\r\n  data?: Record<string, ReferenceData | ReferenceDataOptions>;\r\n}\r\n\r\nexport interface DefinitionsOptions extends DefinitionsImportOptions\r\n{\r\n  types?: TypeClass[];\r\n  expressions?: ExpressionClass[];\r\n}\r\n\r\nexport type DefinitionsReferenceSource = \r\n  Program | \r\n  [Program, ProgramDataSet] |\r\n  Entity | \r\n  [Entity, 'key' | 'describe'] |\r\n  [Entity, string, EntityTranscoder] |\r\n  [Entity, string, EntityTranscoder, 'encode' | 'decode'] |\r\n  [Entity, Func] |\r\n  [Entity, Func, 'params' | 'returnType'] |\r\n  [Entity, Func, FuncTest, 'args' | 'expected'] |\r\n  Func | \r\n  [Func, 'params' | 'returnType'] |\r\n  [Func, FuncTest, 'args' | 'expected'] |\r\n  Relation |\r\n  ReferenceData;\r\n\r\nexport type DefinitionsEntityReference = (\r\n  { value: EntityType, root: Type } |\r\n  { value: GetEntityExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport type DefinitionsDataReference = (\r\n  { value: ReferenceType, root: Type } |\r\n  { value: GetDataExpression, root: Expression }\r\n) & { source: DefinitionsReferenceSource };\r\n\r\nexport interface DefinitionsRelationReference\r\n{\r\n  value: GetRelationExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsFunctionReference\r\n{\r\n  value: InvokeExpression;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionReference<E extends Expression>\r\n{\r\n  value: E;\r\n  root: Expression;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeReference<T extends Type>\r\n{\r\n  value: T;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataTypeReference<T extends Type>\r\n{\r\n  type: T;\r\n  data: any;\r\n  root: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsDataInstance\r\n{\r\n  data: any;\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsTypeInstance\r\n{\r\n  type: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsExpressionInstance\r\n{\r\n  expr: Expression;\r\n  context: Type;\r\n  source: DefinitionsReferenceSource;\r\n}\r\n\r\nexport interface DefinitionsEvents\r\n{\r\n  changed(defs: Definitions): void;\r\n  sync(defs: Definitions, options: DefinitionsOptions): void;\r\n\r\n  addRelation(defs: Definitions, relation: Relation): void;\r\n  removeRelation(defs: Definitions, relation: Relation): void;\r\n  updateRelation(defs: Definitions, relation: Relation): void;\r\n  renameRelation(defs: Definitions, relation: Relation, oldName: string): void;\r\n  clearRelations(defs: Definitions, relations: Relation[]): void;\r\n  changedRelations(defs: Definitions): void;\r\n  \r\n  addProgram(defs: Definitions, program: Program): void;\r\n  removeProgram(defs: Definitions, program: Program): void;\r\n  updateProgram(defs: Definitions, program: Program): void;\r\n  renameProgram(defs: Definitions, program: Program, oldName: string): void;\r\n  clearPrograms(defs: Definitions, programs: Program[]): void;\r\n  changedPrograms(defs: Definitions): void;\r\n  \r\n  addEntity(defs: Definitions, entity: Entity): void;\r\n  removeEntity(defs: Definitions, entity: Entity): void;\r\n  updateEntity(defs: Definitions, entity: Entity): void;\r\n  renameEntity(defs: Definitions, entity: Entity, oldName: string): void;\r\n  clearEntities(defs: Definitions, entities: Entity[]): void;\r\n  changedEntities(defs: Definitions): void;\r\n  \r\n  addFunction(defs: Definitions, func: Func): void;\r\n  removeFunction(defs: Definitions, func: Func): void;\r\n  updateFunction(defs: Definitions, func: Func): void;\r\n  renameFunction(defs: Definitions, func: Func, oldName: string): void;\r\n  clearFunctions(defs: Definitions, functions: Func[]): void;\r\n  changedFunctions(defs: Definitions): void;\r\n\r\n  addMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  removeMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  updateMethod(defs: Definitions, method: Func, entity: Entity): void;\r\n  renameMethod(defs: Definitions, method: Func, entity: Entity, oldName: string): void;\r\n  changedMethods(defs: Definitions): void;\r\n  \r\n  addData(defs: Definitions, data: ReferenceData): void;\r\n  removeData(defs: Definitions, data: ReferenceData): void;\r\n  updateData(defs: Definitions, data: ReferenceData): void;\r\n  renameData(defs: Definitions, data: ReferenceData, oldName: string): void;\r\n  clearData(defs: Definitions, data: ReferenceData[]): void;\r\n  changedData(defs: Definitions): void;\r\n}\r\n\r\nexport class Definitions extends EventBase<DefinitionsEvents> implements OperationTypeProvider, DefinitionProvider\r\n{\r\n\r\n  public types: Record<string, TypeClass>;\r\n  public typeList: TypeClass[];\r\n  public describers: TypeClass[];\r\n  public parsers: Record<string, TypeParser>;\r\n  public expressions: Record<string, ExpressionClass>;\r\n  public operations: Operations;\r\n  public computeds: Computeds;\r\n\r\n  public relations: NamedMap<Relation>;\r\n  public programs: NamedMap<Program>;\r\n  public entities: NamedMap<Entity>;\r\n  public functions: NamedMap<Func>;\r\n  public data: NamedMap<ReferenceData>;\r\n\r\n  public keyExpectedType: Type;\r\n  public describeExpectedType: Type;\r\n\r\n  private legacy: boolean = false;\r\n\r\n  public constructor(initial?: DefinitionsOptions)\r\n  { \r\n    super();\r\n\r\n    this.types = Object.create(null);\r\n    this.typeList = [];\r\n    this.describers = [];\r\n    this.expressions = Object.create(null);\r\n    this.operations = new Operations('');\r\n    this.computeds = new Computeds('');\r\n    this.parsers = Object.create(null);\r\n\r\n    this.entities = new NamedMap();\r\n    this.functions = new NamedMap();\r\n    this.relations = new NamedMap();\r\n    this.programs = new NamedMap();\r\n    this.data = new NamedMap();\r\n\r\n    this.keyExpectedType = Types.many(Types.text(), Types.number());\r\n    this.describeExpectedType = Types.text();\r\n\r\n    if (initial) \r\n    {\r\n      this.add(initial);\r\n    }\r\n  }\r\n\r\n  public isLegacy(): boolean\r\n  {\r\n    return this.legacy;\r\n  }\r\n\r\n  public setLegacy(): void\r\n  {\r\n    this.legacy = true;\r\n  }\r\n\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>): Record<string, O>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: false): Record<string, V>;\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode?: boolean): Record<string, O | V>\r\n  private encodeMap<O, V extends { encode(): O }>(map: FastMap<V>, encode: boolean = true): Record<string, O | V>\r\n  {\r\n    return objectMap(map.toObject(), (v) => encode ? v.encode() : v);\r\n  }\r\n\r\n  public extend(deepCopy: boolean = false, initial?: DefinitionsOptions): Definitions\r\n  { \r\n    const copy = new Definitions({\r\n      types: objectValues(this.types),\r\n      expressions: objectValues(this.expressions),\r\n      entities: this.encodeMap(this.entities, deepCopy),\r\n      functions: this.encodeMap(this.functions, deepCopy),\r\n      relations: this.encodeMap(this.relations, deepCopy),\r\n      programs: this.encodeMap(this.programs, deepCopy),\r\n      data: this.encodeMap(this.data, deepCopy),\r\n    });\r\n\r\n    if (initial)\r\n    {\r\n      copy.add(initial);\r\n    }\r\n\r\n    return copy;\r\n  }\r\n  \r\n  public changed()\r\n  {\r\n    this.trigger('changed', this);\r\n  }\r\n\r\n  public add(options: DefinitionsOptions)\r\n  {\r\n    if (options.types) \r\n    {\r\n      options.types.forEach(type => this.addType(type, true));\r\n    }\r\n\r\n    this.sortDescribers();\r\n\r\n    if (options.expressions) \r\n    {\r\n      options.expressions.forEach(expr => this.addExpression(expr));\r\n    }\r\n\r\n    this.import(options);\r\n  }\r\n\r\n  public describe(data: any): Type\r\n  {\r\n    for (const describer of this.describers)\r\n    {\r\n      const type = describer.describe(data, this);\r\n\r\n      if (type)\r\n      {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    return AnyType.baseType;\r\n  }\r\n\r\n  public merge(type: Type, data: any): Type\r\n  {\r\n    return Types.merge(type, this.describe(data));\r\n  }\r\n  \r\n  public sortDescribers()\r\n  {\r\n    this.describers.sort((a, b) => b.describePriority - a.describePriority);\r\n  }\r\n\r\n  public addType<T extends Type>(type: TypeClass<T>, delaySort: boolean = false) \r\n  {\r\n    this.types[type.id] = type;\r\n    this.typeList.push(type);\r\n    this.parsers[type.id] = (data, types) => type.decode(data, types);\r\n    this.describers.push(type);\r\n\r\n    if (!delaySort)\r\n    {\r\n      this.sortDescribers();\r\n    }\r\n\r\n    if (!type.registered)\r\n    {\r\n      type.registered = true;\r\n      type.register();\r\n    }\r\n  }\r\n\r\n  public findEntity(type: Type, options: TypeCompatibleOptions = { strict: true, value: false, exact: false }): string | false\r\n  {\r\n    const found = this.entities.values.find((entity) => entity.type.isCompatible(type, options));\r\n\r\n    return found ? found.name : false;\r\n  }\r\n\r\n  public addData(dataOptions: ReferenceData | Partial<ReferenceDataOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const data = dataOptions instanceof ReferenceData \r\n      ? dataOptions \r\n      : ReferenceData.create(this, dataOptions);\r\n\r\n    const existing = this.data.get(data.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(data, this);\r\n      }\r\n      else\r\n      {\r\n        this.data.add(data);\r\n      }\r\n      \r\n      this.trigger('updateData', this, data);\r\n    }\r\n    else\r\n    {\r\n      this.data.add(data);\r\n\r\n      this.trigger('addData', this, data);\r\n    }\r\n\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getData(name: string): ReferenceData | null\r\n  {\r\n    return this.data.get(name, null);\r\n  }\r\n\r\n  public getDatas(): NamedMap<ReferenceData>\r\n  {\r\n    return this.data;\r\n  }\r\n\r\n  public removeData(dataInput: string | ReferenceData, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n\r\n    if (!data)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getDataReferences(data).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.data.remove(data, respectOrder);\r\n\r\n    this.trigger('removeData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearData(delayChange: boolean = false)\r\n  {\r\n    const data = this.data.values.slice();\r\n\r\n    this.data.clear();\r\n\r\n    this.trigger('clearData', this, data);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameData(dataInput: string | ReferenceData, newName: string, delayChange: boolean = false): false | DefinitionsDataReference[]\r\n  {\r\n    const data = this.data.valueOf(dataInput);\r\n    const oldName = data.name;\r\n    \r\n    if (!this.data.rename(data, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getDataReferences(data);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof ReferenceType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    data.trigger('renamed', data, oldName);\r\n    data.changed();\r\n\r\n    this.trigger('renameData', this, data, oldName);\r\n    this.trigger('changedData', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public addFunction(funcOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const func = funcOptions instanceof Func \r\n      ? funcOptions \r\n      : Func.create(this, funcOptions);\r\n\r\n    const existing = this.functions.get(func.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(func, this);\r\n      }\r\n      else\r\n      {\r\n        this.functions.add(func);\r\n      }\r\n      \r\n      this.trigger('updateFunction', this, func);\r\n    }\r\n    else\r\n    {\r\n      this.functions.add(func);\r\n\r\n      this.trigger('addFunction', this, func);\r\n    }\r\n\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction(name: string): Func | null\r\n  {\r\n    return this.functions.get(name, null);\r\n  }  \r\n\r\n  public getFunctions(): NamedMap<Func>\r\n  {\r\n    return this.functions;\r\n  }\r\n\r\n  public addProgram(programOptions: Program | Partial<ProgramOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const program = programOptions instanceof Program \r\n      ? programOptions \r\n      : Program.create(this, programOptions);\r\n\r\n    const existing = this.programs.get(program.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(program, this);\r\n      }\r\n      else\r\n      {\r\n        this.programs.add(program);\r\n      }\r\n      \r\n      this.trigger('updateProgram', this, program);\r\n    }\r\n    else\r\n    {\r\n      this.programs.add(program);\r\n\r\n      this.trigger('addProgram', this, program);\r\n    }\r\n\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getProgram(name: string): Program | null\r\n  {\r\n    return this.programs.get(name, null);\r\n  }\r\n\r\n  public getPrograms(): NamedMap<Program>\r\n  {\r\n    return this.programs;\r\n  }\r\n\r\n  public removeProgram(programInput: string | Program, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n\r\n    if (!program)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    this.programs.remove(program, respectOrder);\r\n\r\n    this.trigger('removeProgram', this, program);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearPrograms(delayChange: boolean = false)\r\n  {\r\n    const programs = this.programs.values.slice();\r\n\r\n    this.programs.clear();\r\n\r\n    this.trigger('clearPrograms', this, programs);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n  \r\n  public addEntity(entityOptions: Entity | Partial<EntityOptions>, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const entity = entityOptions instanceof Entity\r\n      ? entityOptions\r\n      : Entity.create(this, entityOptions);\r\n\r\n    const existing = this.entities.get(entity.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(entity, this);\r\n      }\r\n      else\r\n      {\r\n        this.entities.add(entity);\r\n      }\r\n      \r\n      this.trigger('updateEntity', this, entity);\r\n    }\r\n    else\r\n    {\r\n      this.entities.add(entity);\r\n\r\n      this.trigger('addEntity', this, entity);\r\n    }\r\n\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getEntity(name: string): Entity | null\r\n  {\r\n    return this.entities.get(name, null);\r\n  }\r\n\r\n  public getEntities(): NamedMap<Entity>\r\n  {\r\n    return this.entities;\r\n  }\r\n\r\n  public addRelation(relationOptions: Relation | RelationOptions, sync: boolean = true, delayChange: boolean = false): this\r\n  {\r\n    const relation = relationOptions instanceof Relation \r\n      ? relationOptions \r\n      : new Relation(this, relationOptions);\r\n\r\n    const existing = this.relations.get(relation.name);\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(relation, this);\r\n      }\r\n      else\r\n      {\r\n        this.relations.add(relation);\r\n      }\r\n      \r\n      this.trigger('updateRelation', this, relation);\r\n    }\r\n    else\r\n    {\r\n      this.relations.add(relation);\r\n\r\n      this.trigger('addRelation', this, relation);\r\n    }\r\n\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getRelation(name: string): Relation | null\r\n  {\r\n    return this.relations.get(name, null);\r\n  }\r\n\r\n  public getRelations(entityName: string): EntityRelation[]\r\n  {\r\n    const relations: EntityRelation[] = [];\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      const subjectRelation = relation.getSubjectRelation(entityName);\r\n\r\n      if (subjectRelation)\r\n      {\r\n        relations.push(subjectRelation);\r\n      }\r\n\r\n      const relatedRelation = relation.getRelatedRelation(entityName);\r\n\r\n      if (relatedRelation)\r\n      {\r\n        relations.push(relatedRelation);\r\n      }\r\n    });\r\n\r\n    return relations;\r\n  }\r\n\r\n  public getEntityProps(name: string): EntityProps[]\r\n  {\r\n    const keys: EntityProps[] = [];\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      keys.push(entity.getEntityProps());\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        keys.push(...relation.getTypeProps(name));\r\n      });\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  public removeRelation(relationInput: string | Relation, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n\r\n    if (!relation)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getRelationReferences(relation).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.remove(relation, respectOrder);\r\n\r\n    this.trigger('removeRelation', this, relation);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearRelations(delayChange: boolean = false)\r\n  {\r\n    const relations = this.relations.values.slice();\r\n\r\n    this.relations.clear();\r\n\r\n    this.trigger('clearRelations', this, relations);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public renameProgram(programInput: string | Program, newName: string, delayChange: boolean = false): boolean\r\n  {\r\n    const program = this.programs.valueOf(programInput);\r\n    const oldName = program.name;\r\n\r\n    if (!this.programs.rename(program, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    program.trigger('renamed', program, oldName);\r\n    program.changed();\r\n\r\n    this.trigger('renameProgram', this, program, oldName);\r\n    this.trigger('changedPrograms', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  public renameEntity(entityInput: string | Entity, newName: string, delayChange: boolean = false): false | DefinitionsEntityReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n    const oldName = entity.name;\r\n\r\n    if (!this.entities.rename(entity, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.relations.forEach((relation) => \r\n    {\r\n      relation.rename(name, newName);\r\n    });\r\n\r\n    const refs = this.getEntityReferences(name);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      if (ref.value instanceof EntityType) \r\n      {\r\n        ref.value.options = newName;\r\n      } \r\n      else \r\n      {\r\n        ref.value.name = newName;\r\n      }\r\n    });\r\n\r\n    const methods = this.getMethodReferences(name);\r\n\r\n    methods.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    entity.trigger('renamed', entity, oldName);\r\n    entity.changed();\r\n\r\n    this.trigger('renameEntity', this, entity, oldName);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameEntityProp(name: string | Entity, prop: string, newProp: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.renameProp(prop, newProp);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.renameProp(entity.name, prop, newProp);\r\n      });\r\n    }\r\n  }\r\n\r\n  public removeEntityProp(name: string | Entity, prop: string)\r\n  {\r\n    const entity = this.entities.get(name);\r\n\r\n    if (entity)\r\n    {\r\n      entity.removeProp(prop);\r\n\r\n      this.relations.forEach((relation) =>\r\n      {\r\n        relation.removeProp(entity.name, prop);\r\n\r\n        if (relation.isEmpty())\r\n        {\r\n          this.relations.remove(relation);\r\n        }\r\n      });\r\n    } \r\n  }\r\n\r\n  public removeEntity(entityInput: string | Entity, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getEntityReferences(entity).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.entities.remove(entity, respectOrder);\r\n\r\n    this.relations.forEach((relation) =>\r\n    {\r\n      relation.remove(name);\r\n\r\n      if (relation.isEmpty())\r\n      {\r\n        this.relations.remove(relation, respectOrder);\r\n      }\r\n    });\r\n\r\n    this.trigger('removeEntity', this, entity);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearEntities(delayChange: boolean = false)\r\n  {\r\n    const entities = this.entities.values.slice();\r\n\r\n    this.entities.clear();\r\n\r\n    this.trigger('clearEntities', this, entities);\r\n    this.trigger('changedEntities', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public refactorEntity(entity: string | Entity, transform: Expression, runtime: Runtime): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const refs = this.getEntityDataReferences(entity);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.root.setParent();\r\n\r\n      const dataTransform = ref.type.getValueChangeAt(transform);\r\n\r\n      ref.data = runtime.run(dataTransform, { value: ref.data });\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameRelation(relationInput: string | Relation, newName: string, delayChange: boolean = false): false | DefinitionsRelationReference[]\r\n  {\r\n    const relation = this.relations.valueOf(relationInput);\r\n    const oldName = relation.name;\r\n\r\n    if (!this.relations.rename(relation, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getRelationReferences(relation);\r\n\r\n    refs.forEach((ref) => \r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    relation.trigger('renamed', relation, oldName);\r\n    relation.changed();\r\n\r\n    this.trigger('renameRelation', this, relation, oldName);\r\n    this.trigger('changedRelations', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunction(funcInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n    const oldName = func.name;\r\n\r\n    if (!this.functions.rename(func, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(func);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    func.trigger('renamed', func, oldName);\r\n    func.changed();\r\n\r\n    this.trigger('renameFunction', this, func, oldName);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameFunctionParameter(funcInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.args[newName] = ref.value.args[oldName];\r\n      delete ref.value.args[oldName];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunctionParameter(funcInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const func = this.functions.get(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!func.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getFunctionReferences(funcInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      delete ref.value.args[name];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeFunction(funcInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const func = this.functions.valueOf(funcInput);\r\n\r\n    if (!func)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (stopWithReferences && this.getFunctionReferences(func).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.functions.remove(func, respectOrder);\r\n\r\n    this.trigger('removeFunction', this, func);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearFunctions(delayChange: boolean = false)\r\n  {\r\n    const functions = this.functions.values.slice();\r\n    \r\n    this.functions.clear();\r\n\r\n    this.trigger('clearFunctions', this, functions);\r\n    this.trigger('changedFunctions', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  public addMethod(entityInput: string | Entity, methodOptions: Func | Partial<FuncOptions>, sync: boolean = true, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = methodOptions instanceof Func \r\n      ? methodOptions \r\n      : Func.create(this, methodOptions);\r\n\r\n    const existing = entity.methods[method.name];\r\n\r\n    if (existing)\r\n    {\r\n      if (sync)\r\n      {\r\n        existing.sync(method, this);\r\n      }\r\n      else\r\n      {\r\n        entity.addMethod(method);\r\n      }\r\n      \r\n      this.trigger('updateMethod', this, method, entity);\r\n    }\r\n    else\r\n    {\r\n      entity.addMethod(method);\r\n\r\n      this.trigger('addMethod', this, method, entity);\r\n    }\r\n\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public renameMethod(entityInput: string | Entity, methodInput: string | Func, newName: string, delayChange: boolean = false): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const oldName = method.name;\r\n\r\n    entity.renameMethod(oldName, newName);\r\n\r\n    const refs = this.getMethodReferences(entity, method);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.name = newName;\r\n    });\r\n\r\n    method.trigger('renamed', method, oldName);\r\n    method.changed();\r\n\r\n    this.trigger('renameMethod', this, method, entity, oldName);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return refs;\r\n  }\r\n\r\n  public renameMethodParameter(entityInput: string | Entity, methodInput: string | Func, oldName: string, newName: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.renameParameter(oldName, newName))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, oldName);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      ref.value.args[newName] = ref.value.args[oldName];\r\n      delete ref.value.args[oldName];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethodParameter(entityInput: string | Entity, methodInput: string | Func, name: string): false | DefinitionsFunctionReference[]\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!method.removeParameter(name))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const refs = this.getMethodReferences(entityInput, methodInput, name);\r\n\r\n    refs.forEach((ref) =>\r\n    {\r\n      delete ref.value.args[name];\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public removeMethod(entityInput: string | Entity, methodInput: string | Func, stopWithReferences: boolean = true, respectOrder: boolean = false, delayChange: boolean = false): boolean\r\n  {\r\n    const entity = this.entities.valueOf(entityInput);\r\n\r\n    if (!entity) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    const method = entity.methods[this.functions.nameOf(methodInput)];\r\n\r\n    if (!method) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (stopWithReferences && this.getMethodReferences(entityInput, methodInput).length > 0)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    entity.removeMethod(method.name);\r\n\r\n\r\n    this.trigger('removeMethod', this, method, entity);\r\n    this.trigger('changedMethods', this);\r\n\r\n    if (!delayChange)\r\n    {\r\n      this.changed();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  \r\n  public getTypeKind<T extends Type>(value: any, kind: TypeClass<T>, otherwise: T | null = null): T | null \r\n  {\r\n    const parsed = this.getType(value);\r\n\r\n    return parsed instanceof kind ? parsed : otherwise;\r\n  }\r\n\r\n  public getType(value: any, otherwise?: Type): Type \r\n  {\r\n    if (value instanceof Type)\r\n    {\r\n      return value;\r\n    }\r\n\r\n    const id = isArray(value) ? value[0] : value;\r\n    const data = isArray(value) ? value : [];\r\n    const parser = this.parsers[id];\r\n\r\n    if (!parser)\r\n    {\r\n      if (this.entities.has(id))\r\n      {\r\n        return this.entities.get(id).type;\r\n      }\r\n\r\n      if (otherwise)\r\n      {\r\n        return otherwise;\r\n      }\r\n      \r\n      throw new Error(`No parser found for ${id} with payload ${JSON.stringify(data)}`);\r\n    }\r\n    \r\n    return parser(data, this);\r\n  }\r\n\r\n  public getBaseTypes(): Type[]\r\n  {\r\n    return this.typeList.map((t) => t.baseType);\r\n  }\r\n\r\n  public getSimpleTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => t.isSimple());\r\n  }\r\n\r\n  public getComplexTypes(): Type[]\r\n  {\r\n    return this.getBaseTypes().filter((t) => !t.isSimple());\r\n  }\r\n\r\n  public getSimpleTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => t.baseType.isSimple());\r\n  }\r\n\r\n  public getComplexTypeClasses(): TypeClass[]\r\n  {\r\n    return this.typeList.filter((t) => !t.baseType.isSimple());\r\n  }\r\n\r\n  public getComputed(id: string): Computed | null\r\n  {\r\n    const comp = this.computeds.get(id);\r\n\r\n    if (comp)\r\n    {\r\n      return comp;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.computeds.get(id) : null;\r\n  }\r\n\r\n  public getComputedReturnType(id: string, valueType: Type | null = null): Type | null\r\n  {\r\n    const comp = this.getComputed(id);\r\n\r\n    if (!comp)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const op = this.getOperation(comp.op);\r\n    const types = this.getOperationTypes(comp.op);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return this.getOperationInputType(types.returnType, { [comp.value]: valueType });\r\n  }\r\n\r\n  public getComputedsFor(valueType: Type): Computed[]\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? typeClass.computeds.list : [];\r\n  }\r\n\r\n  public hasComputed(valueType: Type, id: string): boolean\r\n  {\r\n    const typeClass = this.types[valueType.getId()];\r\n\r\n    return typeClass ? !!typeClass.computeds.get(id) : false;\r\n  }\r\n\r\n  public getOperation(id: string): OperationGeneric | null\r\n  {\r\n    const op = this.operations.get(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.get(id) : null;\r\n  }\r\n\r\n  public getOperationTypes(id: string): OperationTypes<any, any, any> | null\r\n  {\r\n    const op = this.operations.getTypes(id);\r\n\r\n    if (op)\r\n    {\r\n      return op;\r\n    }\r\n\r\n    const [typeName] = id.split(ID.Delimiter);\r\n    const type = this.types[typeName];\r\n\r\n    return type ? type.operations.getTypes(id) : null;\r\n  }\r\n\r\n  public getOperationReturnType(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type): Type | null\r\n  {\r\n    const op = this.getOperation(id);\r\n    const types = this.getOperationTypes(id);\r\n\r\n    if (!op || !types)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const returnType = types.returnType;\r\n\r\n    if (returnType instanceof Type)\r\n    {\r\n      return returnType;\r\n    }\r\n\r\n    if (!isOperationTypeFunction(returnType))\r\n    {\r\n      return returnType.baseType.newInstance();\r\n    }\r\n\r\n    const paramTypes = op.resultDependency.length > 0\r\n      ? this.getOperationParamTypes(id, params, scopeAlias, context, types.rawTypes)\r\n      : {};\r\n\r\n    return this.getOperationInputType(types.returnType, paramTypes);\r\n  }\r\n\r\n  public getOperationExpectedTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!opTypes)\r\n    {\r\n      return {};\r\n    }\r\n\r\n    const paramTypes = this.getOperationParamTypes(id, params, scopeAlias, context, rawTypes);\r\n\r\n    return objectMap(paramTypes, (paramType, name) => this.getOperationInputType(opTypes.params[name] || opTypes.optional[name] || paramType, paramTypes));\r\n  }\r\n\r\n  public getOperationParamTypes(id: string, params: ExpressionMap, scopeAlias: Record<string, string>, context: Type, rawTypes: boolean = false): TypeMap\r\n  {\r\n    const types: TypeMap = {};\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n\r\n    if (!op || !opTypes)\r\n    {\r\n      return types;\r\n    }\r\n    \r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) === -1)\r\n      {\r\n        const paramType = params[param].getType(this, context);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    const { context: paramContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = rawTypes ? scopeType : scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    for (const param in params)\r\n    {\r\n      if (op.hasScope.indexOf(param) !== -1)\r\n      {\r\n        const paramType = params[param].getType(this, paramContext);\r\n\r\n        if (paramType)\r\n        {\r\n          types[param] = rawTypes ? paramType : paramType.getSimplifiedType();\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const param of op.params)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.params[param], types);\r\n      }\r\n    }\r\n\r\n    for (const param of op.optional)\r\n    {\r\n      if (!types[param])\r\n      {\r\n        types[param] = this.getOperationInputType(opTypes.optional[param], types);\r\n      }\r\n    }\r\n\r\n    return types;\r\n  }\r\n\r\n  public getOperationScopeContext(id: string, types: TypeMap, scopeAlias: Record<string, string>, context: Type): Type\r\n  {\r\n    const op = this.getOperation(id);\r\n    const opTypes = this.getOperationTypes(id);\r\n    const { context: scopedContext, scope: scopeTarget } = this.getContextWithScope(context);\r\n    \r\n    for (const scopeParam of op.scope)\r\n    {\r\n      const scopeType = this.getOperationInputType(opTypes.scope[scopeParam], types);\r\n\r\n      if (scopeType)\r\n      {\r\n        const alias = scopeAlias[scopeParam] || scopeParam;\r\n\r\n        scopeTarget[alias] = scopeType.getSimplifiedType();\r\n      }\r\n    }\r\n\r\n    return scopedContext;\r\n  }\r\n\r\n  public getContextWithScope(original: Type, scope: TypeMap = {})\r\n  {\r\n    const context = original instanceof ObjectType\r\n      ? new ObjectType({ props: scope = { ...original.options.props, ...scope }})\r\n      : new ManyType([ new ObjectType({ props: scope }), original ]);\r\n\r\n    return { context, scope };\r\n  }\r\n\r\n  public getContext(original: Type, scope: TypeMap): Type\r\n  {\r\n    return this.getContextWithScope(original, scope).context;\r\n  }\r\n\r\n  public getOperationMapping(fromId: string, fromParamTypes: TypeMap, toId: string): OperationMapping | null\r\n  {\r\n    type ParamTuple = [string, Type, number];\r\n\r\n    const from = this.getOperation(fromId);\r\n    const fromTypes = this.getOperationTypes(toId);\r\n    const fromVars = from.params.concat(from.optional);\r\n    const to = this.getOperation(toId);\r\n    const toTypes = this.getOperationTypes(toId);\r\n    const mapping: Record<string, string> = Object.create(null);\r\n    const mapped: TypeMap = Object.create(null);\r\n    const getParamTypeTuple = (value: Type, key: string): ParamTuple => \r\n      [key, value, fromVars.indexOf(key)];\r\n    const paramTypes = objectValues(fromParamTypes, getParamTypeTuple)\r\n      .filter(([,, index]) => index >= 0)\r\n      .sort(([,, a], [,, b]) => a - b);\r\n\r\n    const getParamTuple = (param: string, typeInput: OperationTypeInput<any>): ParamTuple | null => \r\n    {\r\n      if (paramTypes.length === 0)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      let chosenIndex = -1;\r\n\r\n      if (isOperationTypeFunction(typeInput))\r\n      {\r\n        chosenIndex = paramTypes.findIndex(([, type]) => \r\n          type.acceptsType(Types.parse(typeInput({ ...mapped, [param]: type }, this))));\r\n        \r\n        if (chosenIndex === -1)\r\n        {\r\n          chosenIndex = paramTypes.findIndex(([, type]) =>\r\n            Types.parse(typeInput({ ...mapped, [param]: type}, this)).acceptsType(type));\r\n        }\r\n      }\r\n      else\r\n      {\r\n        const paramType = Types.parse(typeInput);\r\n\r\n        chosenIndex = paramTypes.findIndex(([, type]) => paramType.acceptsType(type));\r\n      }\r\n\r\n      if (chosenIndex === -1)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      const chosen = paramTypes[chosenIndex];\r\n      paramTypes.splice(chosenIndex, 1);\r\n      mapping[chosen[0]] = param;\r\n      mapped[param] = chosen[1];\r\n    };\r\n    \r\n    for (const param of to.params)\r\n    {\r\n      const tuple = getParamTuple(param, toTypes.params[param]);\r\n\r\n      if (tuple === null)\r\n      {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    for (const optional of to.optional)\r\n    {\r\n      getParamTuple(optional, toTypes.optional[optional]);\r\n    }\r\n\r\n    const unmapped = paramTypes.map(([key]) => key);\r\n    \r\n    return { from, fromTypes, to, toTypes, mapping, unmapped };\r\n  }\r\n\r\n  public getOperationInputType(input: OperationTypeInput<any>): Type | null\r\n  public getOperationInputType(input: OperationTypeInput<any>, params: TypeMap): Type\r\n  public getOperationInputType(input: OperationTypeInput<any>, params?: TypeMap): Type\r\n  {\r\n    return input instanceof Type\r\n      ? input\r\n      : 'baseType' in input\r\n        ? input.baseType.clone()\r\n        : params\r\n          ? Types.parse(input(params, this))\r\n          : null;\r\n  }\r\n\r\n  public getOperationsForExpression(expr: Expression, context: Type): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsForType(type.getSimplifiedType()) : [];\r\n  }\r\n\r\n  public getOperationsWithMapping(fromId: string, fromParamTypes: TypeMap): OperationMapping[]\r\n  {\r\n    return this.getOperations()\r\n      .map(({ op }) => this.getOperationMapping(fromId, fromParamTypes, op.id))\r\n      .filter((mapping) => !!mapping);\r\n  }\r\n\r\n  public getOperationsForType(type: Type, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) => \r\n    {\r\n      const paramName = op.params[0];\r\n      const opTypeInput = types.params[paramName];\r\n\r\n      if (opTypeInput) \r\n      {\r\n        const opType = this.getOperationInputType(opTypeInput, { [paramName]: type });\r\n\r\n        if (opType)\r\n        {\r\n          if (type.acceptsType(opType))\r\n          {\r\n            return true;\r\n          }\r\n\r\n          if (acceptsDynamic && \r\n            op.resultDependency.length > 0 && \r\n            isOperationTypeFunction(types.returnType) && \r\n            (opType instanceof AnyType || opType instanceof NullType))\r\n          {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsWithReturnExpression(expr: Expression, context: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    const type = expr.getType(this, context);\r\n\r\n    return type ? this.getOperationsWithReturnType(type.getSimplifiedType(), paramTypes, acceptsDynamic) : [];\r\n  }\r\n\r\n  public getOperationsWithReturnType(type: Type, paramTypes: TypeMap = {}, acceptsDynamic: boolean = false): OperationPair[]\r\n  {\r\n    return this.getOperations(({ op, types }) =>\r\n    {\r\n      const returnType = this.getOperationInputType(types.returnType, paramTypes);\r\n\r\n      if (returnType)\r\n      {\r\n        if (type.acceptsType(returnType))\r\n        {\r\n          return true;\r\n        }\r\n\r\n        if (acceptsDynamic && \r\n          op.resultDependency.length > 0 && \r\n          isOperationTypeFunction(types.returnType) && \r\n          (returnType instanceof AnyType || returnType instanceof NullType))\r\n        {\r\n          return true;\r\n        }\r\n      }      \r\n\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public getOperationsForParamExpressions(params: ExpressionMap, context: Type): OperationPair[]\r\n  {\r\n    return this.getOperationsForParamTypes(objectMap(params, expr => \r\n    {\r\n      const type = expr.getType(this, context);\r\n\r\n      return type ? type.getSimplifiedType() : undefined;\r\n    }));\r\n  }\r\n\r\n  public getOperationsForParamTypes(paramTypes: TypeMap): OperationPair[]\r\n  {\r\n    const paramNames = Object.keys(paramTypes);\r\n\r\n    return this.getOperations(({ types }) => \r\n    {\r\n      for (const param of paramNames)\r\n      {\r\n        const opTypeInput = types.params[param] || types.optional[param];\r\n\r\n        if (!opTypeInput)\r\n        {\r\n          return false;\r\n        }\r\n\r\n        const opType = this.getOperationInputType(opTypeInput, paramTypes);\r\n\r\n        if (!opType || !paramTypes[param].acceptsType(opType))\r\n        {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  public getOperations(onOperation: <P extends string, O extends string, S extends string>(pair: OperationPair<P, O, S>) => boolean = () => true): OperationPair[]\r\n  {\r\n    const ops: OperationPair[] = [];\r\n\r\n    const iterateOperations = (operations: Operations) => \r\n    {\r\n      const map = operations.map;\r\n\r\n      for (const id in map)\r\n      {\r\n        const op = map[id];\r\n        const types = operations.types[id];\r\n        const pair = { op, types };\r\n\r\n        if (onOperation(pair))\r\n        {\r\n          ops.push(pair);\r\n        }\r\n      }\r\n    };\r\n\r\n    iterateOperations(this.operations);\r\n\r\n    objectEach(this.types, t => iterateOperations(t.operations));\r\n\r\n    return ops;\r\n  }\r\n\r\n  public getPathType(path: Expression[], context: Type, stopBefore: number = path.length): Type | null\r\n  {\r\n    let thisType = path[0].getType(this, context);\r\n\r\n    if (!thisType)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    let optional = thisType.isOptional();\r\n\r\n    for (let i = 1; i < stopBefore; i++)\r\n    {\r\n      const node = path[i];\r\n\r\n      thisType = node.isPathNode()\r\n        ? node.getType(this, context, thisType)\r\n        : thisType.getSubType(node, this, context);\r\n\r\n      if (!thisType)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      optional = optional || thisType.isOptional();\r\n    }\r\n\r\n    return optional && !thisType.isOptional() ? Types.optional(thisType) : thisType;\r\n  }\r\n\r\n  public addExpression<T extends Expression>(expr: ExpressionClass<T>) \r\n  {\r\n    this.expressions[expr.id] = expr;\r\n  }\r\n\r\n  public getExpression(value: any): Expression \r\n  {\r\n    if (value instanceof Expression)\r\n    {\r\n      return value;\r\n    }\r\n    else if (isArray(value))\r\n    {\r\n      const exprClass = this.expressions[value[0]];\r\n\r\n      if (!exprClass)\r\n      {\r\n        throw new Error('An expression was not found for: ' + JSON.stringify(value));\r\n      }\r\n\r\n      return exprClass.decode(value, this);\r\n    }\r\n\r\n    return new ConstantExpression(value);\r\n  }\r\n\r\n  public getEntityReferences(entity?: string | Entity): DefinitionsEntityReference[]\r\n  { \r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetEntityExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsEntityReference[]).concat(exprs);\r\n  }\r\n\r\n  public getDataReferences(data?: string | ReferenceData): DefinitionsDataReference[]\r\n  {\r\n    const name = data ? this.data.nameOf(data) : undefined;\r\n\r\n    const types = this.getTypeClassReferences(ReferenceType).filter((match) => {\r\n      return (!name || name === match.value.options);\r\n    });\r\n\r\n    const exprs = this.getExpressionClassReferences(GetDataExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n\r\n    return (types as DefinitionsDataReference[]).concat(exprs);\r\n  }\r\n\r\n  public getEntityDataReferences(entity?: string | Entity): DefinitionsDataTypeReference<EntityType>[]\r\n  {\r\n    const name = entity ? this.entities.nameOf(entity) : undefined;\r\n\r\n    return this.getDataTypeClassReferences(EntityType).filter((match) => {\r\n      return (!name || name === match.type.options);\r\n    });\r\n  }\r\n\r\n  public getRelationReferences(relation?: string | Relation): DefinitionsRelationReference[]\r\n  {\r\n    const name = relation ? this.relations.nameOf(relation) : undefined;\r\n\r\n    return this.getExpressionClassReferences(GetRelationExpression).filter((match) => {\r\n      return (!name || name === match.value.name);\r\n    });\r\n  }\r\n\r\n  public getFunctionReferences(func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const name = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(InvokeExpression).filter((match) => {\r\n      return (!name || name === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getMethodReferences(entity?: string | Entity, func?: string | Func, param?: string): DefinitionsFunctionReference[]\r\n  {\r\n    const entityName = entity ? this.entities.nameOf(entity) : undefined;\r\n    const methodName = func ? this.functions.nameOf(func) : undefined;\r\n\r\n    return this.getExpressionClassReferences(MethodExpression).filter((match) => {\r\n      return (!entityName || entityName === match.value.entity) && (!methodName || methodName === match.value.name) && (!param || param in match.value.args);\r\n    });\r\n  }\r\n\r\n  public getTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsTypeReference<T>[] = [];\r\n\r\n    this.getTypeInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((ref) => {\r\n        if (ref instanceof typeClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataTypeClassReferences<T extends Type>(typeClass: TypeClass<T>): DefinitionsDataTypeReference<T>[]\r\n  {\r\n    const refs: DefinitionsDataTypeReference<T>[] = [];\r\n\r\n    this.getDataInstances().forEach((instance) => {\r\n      instance.type.traverse(new Traverser((type) => {\r\n        if (type instanceof typeClass) {\r\n          refs.push({\r\n            type, \r\n            data: instance.data,\r\n            root: instance.type,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getExpressionClassReferences<E extends Expression>(exprClass: ExpressionClass<E>): DefinitionsExpressionReference<E>[]\r\n  {\r\n    const refs: DefinitionsExpressionReference<E>[] = [];\r\n\r\n    this.getExpressionInstances().forEach((instance) => {\r\n      instance.expr.traverse(new Traverser((ref) => {\r\n        if (ref instanceof exprClass) {\r\n          refs.push({\r\n            value: ref, \r\n            root: instance.expr,\r\n            source: instance.source,\r\n          });\r\n        }\r\n      }));\r\n    });\r\n\r\n    return refs;\r\n  }\r\n\r\n  public getDataInstances(): DefinitionsDataInstance[]\r\n  {\r\n    const instances: DefinitionsDataInstance[] = [];\r\n\r\n\r\n    this.programs.forEach((program) => {\r\n      program.datasets.forEach((dataset) => {\r\n        instances.push({\r\n          data: dataset.data,\r\n          type: program.dataType,\r\n          source: [program, dataset],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      const returnType = func.getReturnType(this);\r\n\r\n      func.tests.forEach((test) => {\r\n        instances.push({\r\n          data: test.args,\r\n          type: func.params,\r\n          source: [func, test, 'args'],\r\n        });\r\n\r\n        instances.push({\r\n          data: test.expected,\r\n          type: returnType,\r\n          source: [func, test, 'expected'],\r\n        });\r\n      });\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        data: data.data,\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      if (entity.instances && entity.instances.length > 0) {\r\n        instances.push({\r\n          data: entity.instances,\r\n          type: Types.list(entity.type),\r\n          source: entity,\r\n        });\r\n      }\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        const returnType = method.getReturnType(this);\r\n\r\n        method.tests.forEach((test) => {\r\n          instances.push({\r\n            data: test.args,\r\n            type: method.params,\r\n            source: [entity, method, test, 'args'],\r\n          });\r\n\r\n          instances.push({\r\n            data: test.expected,\r\n            type: returnType,\r\n            source: [entity, method, test, 'expected'],\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getTypeInstances(dynamic: boolean = false): DefinitionsTypeInstance[]\r\n  {\r\n    const instances: DefinitionsTypeInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        type: program.dataType,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        type: func.params,\r\n        source: [func, 'params'],\r\n      });\r\n\r\n      if (dynamic) {\r\n        instances.push({\r\n          type: func.getReturnType(this),\r\n          source: [func, 'returnType'],\r\n        });\r\n      }\r\n    });\r\n\r\n    this.data.forEach((data) => {\r\n      instances.push({\r\n        type: data.dataType,\r\n        source: data,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      instances.push({\r\n        type: entity.type,\r\n        source: entity,\r\n      });\r\n\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          type: method.params,\r\n          source: [entity, method, 'params'],\r\n        });\r\n\r\n        if (dynamic) {\r\n          instances.push({\r\n            type: method.getReturnType(this),\r\n            source: [entity, method, 'returnType'],\r\n          });\r\n        }\r\n      });\r\n\r\n      if (dynamic) {\r\n        if (entity.key !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getKeyContext(),\r\n            source: [entity, 'key'],\r\n          });\r\n        }\r\n        \r\n        if (entity.describe !== NoExpression.instance) {\r\n          instances.push({\r\n            type: entity.getDescribeContext(),\r\n            source: [entity, 'describe'],\r\n          });\r\n        }\r\n      }\r\n\r\n      objectEach(entity.transcoders, (transcoder, prop) => {\r\n        instances.push({\r\n          type: transcoder.encodedType,\r\n          source: [entity, prop, transcoder],\r\n        });\r\n      });\r\n    });\r\n\r\n    if (dynamic) {\r\n      this.relations.forEach((relation) => {\r\n        if (relation.morphs) {\r\n          instances.push({\r\n            type: relation.morphs[1],\r\n            source: relation,\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    return instances;\r\n  }\r\n\r\n  public getExpressionInstances(): DefinitionsExpressionInstance[]\r\n  {\r\n    const instances: DefinitionsExpressionInstance[] = [];\r\n\r\n    this.programs.forEach((program) => {\r\n      instances.push({\r\n        context: program.dataType,\r\n        expr: program.expression,\r\n        source: program,\r\n      });\r\n    });\r\n\r\n    this.functions.forEach((func) => {\r\n      instances.push({\r\n        context: func.params,\r\n        expr: func.expression,\r\n        source: func,\r\n      });\r\n    });\r\n\r\n    this.entities.forEach((entity) => {\r\n      objectEach(entity.methods, (method) => {\r\n        instances.push({\r\n          context: method.getParamTypes(),\r\n          expr: method.expression,\r\n          source: [entity, method],\r\n        });\r\n      });\r\n\r\n      if (entity.canStore(this)) {\r\n        instances.push({\r\n          context: entity.getKeyContext(),\r\n          expr: entity.key,\r\n          source: [entity, 'key'],\r\n        });\r\n\r\n        instances.push({\r\n          context: entity.getDescribeContext(),\r\n          expr: entity.describe,\r\n          source: [entity, 'describe'],\r\n        });\r\n\r\n        objectEach(entity.transcoders, (transcoder, prop) => {\r\n          instances.push({\r\n            context: entity.getEncodeContext(prop),\r\n            expr: transcoder.encode,\r\n            source: [entity, prop, transcoder, 'encode'],\r\n          });\r\n\r\n          instances.push({\r\n            context: entity.getDecodeContext(prop),\r\n            expr: transcoder.decode,\r\n            source: [entity, prop, transcoder, 'decode'],\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    return instances;\r\n  }\r\n\r\n  public export(): DefinitionsImportOptions\r\n  {\r\n    return {\r\n      entities: this.encodeMap(this.entities),\r\n      functions: this.encodeMap(this.functions),\r\n      relations: this.encodeMap(this.relations),\r\n      programs: this.encodeMap(this.programs),\r\n      data: this.encodeMap(this.data),\r\n    };\r\n  }\r\n\r\n  public sync(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      this.data.syncManual(\r\n        exported.data,\r\n        (map, value) => this.addData(value, false, true),\r\n        (map, value) => this.removeData(value, false, true, true),\r\n        (map, value, newValue) => this.addData(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      this.functions.syncManual(\r\n        exported.functions,\r\n        (map, value) => this.addFunction(value, false, true),\r\n        (map, value) => this.removeFunction(value, false, true, true),\r\n        (map, value, newValue) => this.addFunction(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.entities)\r\n    {\r\n      this.entities.syncManual(\r\n        exported.entities,\r\n        (map, value) => this.addEntity(value, false, true),\r\n        (map, value) => this.removeEntity(value, false, true, true),\r\n        (map, value, newValue) => this.addEntity(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      this.relations.syncManual(\r\n        exported.relations,\r\n        (map, value) => this.addRelation(value, false, true),\r\n        (map, value) => this.removeRelation(value, false, true, true),\r\n        (map, value, newValue) => this.addRelation(newValue, true, true),\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      this.programs.syncManual(\r\n        exported.programs,\r\n        (map, value) => this.addProgram(value, false, true),\r\n        (map, value) => this.removeProgram(value, true, true),\r\n        (map, value, newValue) => this.addProgram(newValue, true, true),\r\n      );\r\n    }\r\n  }\r\n\r\n  public import(exported: DefinitionsImportOptions): void\r\n  {\r\n    if (exported.data)\r\n    {\r\n      objectEach(exported.data, (data) => \r\n        this.addData(data)\r\n      );\r\n    }\r\n\r\n    if (exported.functions)\r\n    {\r\n      objectEach(exported.functions, (func) => \r\n        this.addFunction(func)\r\n      );\r\n    }\r\n\r\n    if (exported.entities) \r\n    {\r\n      objectEach(exported.entities, (instance) => \r\n        this.addEntity(instance)\r\n      );\r\n    }\r\n\r\n    if (exported.relations)\r\n    {\r\n      objectEach(exported.relations, (options) => \r\n        this.addRelation(options)\r\n      );\r\n    }\r\n\r\n    if (exported.programs)\r\n    {\r\n      objectEach(exported.programs, (options) => \r\n        this.addProgram(options)\r\n      );\r\n    }\r\n  }\r\n\r\n}","\r\nimport { Command, CommandBuilder, OperationToCommand, CommandProvider } from './Command';\r\nimport { Definitions } from './Definitions';\r\nimport { Expression, ExpressionClass } from './Expression';\r\nimport { isArray } from './fns';\r\nimport { Operation } from './Operation';\r\nimport { Computed } from './Computed';\r\nimport { Func } from './Func';\r\n\r\n\r\n\r\nexport class Runtime<Context = any, Result = any>\r\n{\r\n\r\n  public static DEFAULT_RETURN_PROPERTY = '$$return';\r\n\r\n  public defs: Definitions;\r\n  public ops: Record<string, OperationToCommand<Context, Result, any, any, any>>;\r\n  public exprs: Record<string, CommandBuilder<Context, Result>>;\r\n  public returnProperty: string;\r\n\r\n  public constructor (defs: Definitions) \r\n  {\r\n    this.defs = defs;\r\n    this.ops = Object.create(null);\r\n    this.exprs = Object.create(null);\r\n    this.returnProperty = Runtime.DEFAULT_RETURN_PROPERTY;\r\n  }\r\n\r\n  public extend(defs?: Definitions): Runtime<Context, Result>\r\n  {\r\n    const copy = new Runtime(defs || this.defs);\r\n\r\n    Object.assign(copy.ops, this.ops);\r\n    Object.assign(copy.exprs, this.exprs);\r\n    copy.returnProperty = this.returnProperty;\r\n\r\n    return copy;\r\n  }\r\n\r\n  public setOperation<P extends string = any, O extends string = any, S extends string = any>(\r\n    operation: Operation<P, O, S, any, any>, \r\n    impl: OperationToCommand<Context, Result, P, O, S>\r\n  ): this \r\n  {\r\n    this.ops[operation.id] = impl;\r\n\r\n    return this;\r\n  }\r\n\r\n  public setExpression<T extends Expression>(type: ExpressionClass<T>, getter: CommandBuilder<Context, Result, T>): this\r\n  {\r\n    this.exprs[type.id] = getter;\r\n\r\n    return this;\r\n  }\r\n\r\n  public getFunction (name: string): Func\r\n  {\r\n    return this.defs.getFunction(name);\r\n  }\r\n\r\n  public getOperation (id: string): OperationToCommand<Context, Result, any, any, any> \r\n  {\r\n    return this.ops[id];\r\n  }\r\n\r\n  public getComputed (id: string): Computed | null \r\n  {\r\n    return this.defs.getComputed(id);\r\n  }\r\n  \r\n  public getOperationScopeDefaults (id: string): Record<string, string>\r\n  {\r\n    const op = this.defs.getOperation(id);\r\n\r\n    return op ? op.scopeDefaults : {};\r\n  }\r\n\r\n  public getExpression (id: string): CommandBuilder<Context, Result>\r\n  {\r\n    return this.exprs[id];\r\n  }\r\n\r\n  public getCommand(expr: Expression, provider: CommandProvider<Context, Result> = this): Command<Context, Result>\r\n  {\r\n    return this.exprs[expr.getId()](expr, provider);\r\n  }\r\n\r\n  public run(expr: any, context: Context, provider: CommandProvider<Context, Result> = this): Result\r\n  {\r\n    return this.eval(expr, provider)(context);\r\n  }\r\n\r\n  public eval (value: any, provider: CommandProvider<Context, Result> = this): Command<Context, Result> \r\n  {\r\n    return isArray(value)\r\n      ? this.getCommand(this.defs.getExpression(value), provider)\r\n      : () => value;\r\n  }\r\n\r\n}","import { Expression, ExpressionProvider } from '../Expression';\r\nimport { DefinitionProvider } from '../DefinitionProvider';\r\nimport { Type } from '../Type';\r\nimport { Traverser, TraverseStep } from '../Traverser';\r\nimport { ValidationHandler } from '../Validate';\r\nimport { PathExpression } from './Path';\r\n\r\n\r\n\r\nconst INDEX_VALUE = 1;\r\nconst INDEX_PATH = 2;\r\n\r\nexport class SubExpression extends Expression \r\n{\r\n\r\n  public static id = 'sub';\r\n\r\n  public static decode(data: any[], exprs: ExpressionProvider): SubExpression \r\n  {\r\n    const value: Expression = exprs.getExpression(data[INDEX_VALUE]);\r\n    const path: Expression[] = data[INDEX_PATH].map((part: any) => exprs.getExpression(part));\r\n\r\n    exprs.setLegacy();\r\n\r\n    return PathExpression.createForLegacy([value, ...path]);\r\n  }\r\n\r\n  public static encode(expr: SubExpression): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getId(): string\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getComplexity(def: DefinitionProvider, context: Type): number\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getScope(): null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public encode(): any \r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public clone(): Expression\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getType(def: DefinitionProvider, context: Type): Type | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public traverse<R>(traverse: Traverser<Expression, R>): R\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public setParent(parent: Expression = null): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n  public validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void\r\n  {\r\n    throw new Error('Sub expression is no longer supported.');\r\n  }\r\n\r\n}","\r\nimport { Definitions } from '../Definitions';\r\n\r\nimport { EntityType } from '../types/Entity';\r\nimport { AnyType } from '../types/Any';\r\nimport { BooleanType } from '../types/Boolean';\r\nimport { ColorType } from '../types/Color';\r\nimport { DateType } from '../types/Date';\r\nimport { EnumType } from '../types/Enum';\r\nimport { ListType } from '../types/List';\r\nimport { ManyType } from '../types/Many';\r\nimport { MapType } from '../types/Map';\r\nimport { NotType } from '../types/Not';\r\nimport { NullType } from '../types/Null';\r\nimport { NumberType } from '../types/Number';\r\nimport { ObjectType } from '../types/Object';\r\nimport { OptionalType } from '../types/Optional';\r\nimport { ReferenceType } from '../types/Reference';\r\nimport { SetType } from '../types/Set';\r\nimport { TextType } from '../types/Text';\r\nimport { TupleType } from '../types/Tuple';\r\n\r\nimport { AndExpression } from '../exprs/And';\r\nimport { ChainExpression } from '../exprs/Chain';\r\nimport { CommentExpression } from '../exprs/Comment';\r\nimport { ComputedExpression } from '../exprs/Computed';\r\nimport { ConstantExpression } from '../exprs/Constant';\r\nimport { DefineExpression } from '../exprs/Define';\r\nimport { DoExpression } from '../exprs/Do';\r\nimport { ForExpression } from '../exprs/For';\r\nimport { GetExpression } from '../exprs/Get';\r\nimport { GetDataExpression } from '../exprs/GetData';\r\nimport { GetEntityExpression } from '../exprs/GetEntity';\r\nimport { GetRelationExpression } from '../exprs/GetRelation';\r\nimport { IfExpression } from '../exprs/If';\r\nimport { InvokeExpression } from '../exprs/Invoke';\r\nimport { MethodExpression } from '../exprs/Method';\r\nimport { NoExpression } from '../exprs/No';\r\nimport { NotExpression } from '../exprs/Not';\r\nimport { ObjectExpression } from '../exprs/Object';\r\nimport { OperationExpression } from '../exprs/Operation';\r\nimport { OrExpression } from '../exprs/Or';\r\nimport { PathExpression } from '../exprs/Path';\r\nimport { ReturnExpression } from '../exprs/Return';\r\nimport { SetExpression } from '../exprs/Set';\r\nimport { SubExpression } from '../exprs/Sub';\r\nimport { SwitchExpression } from '../exprs/Switch';\r\nimport { TemplateExpression } from '../exprs/Template';\r\nimport { TupleExpression } from '../exprs/Tuple';\r\nimport { UpdateExpression } from '../exprs/Update';\r\nimport { WhileExpression } from '../exprs/While';\r\n\r\n\r\n\r\nexport const defs = new Definitions({\r\n  types: [\r\n    EntityType,\r\n    AnyType,\r\n    BooleanType, \r\n    ColorType,\r\n    DateType,\r\n    EnumType,\r\n    ListType, \r\n    ManyType,\r\n    MapType,\r\n    NotType,\r\n    NullType,\r\n    NumberType, \r\n    ObjectType, \r\n    OptionalType,\r\n    ReferenceType,\r\n    SetType,\r\n    TextType,\r\n    TupleType,\r\n  ],\r\n  expressions: [\r\n    AndExpression,\r\n    ChainExpression,\r\n    CommentExpression,\r\n    ComputedExpression,\r\n    ConstantExpression,\r\n    DefineExpression,\r\n    DoExpression,\r\n    ForExpression,\r\n    GetExpression,\r\n    GetDataExpression,\r\n    GetEntityExpression,\r\n    GetRelationExpression,\r\n    IfExpression,\r\n    InvokeExpression,\r\n    MethodExpression,\r\n    NoExpression,\r\n    NotExpression,\r\n    ObjectExpression,\r\n    OperationExpression,\r\n    OrExpression,\r\n    PathExpression,\r\n    ReturnExpression,\r\n    SetExpression,\r\n    SubExpression,    \r\n    SwitchExpression,\r\n    TemplateExpression,\r\n    TupleExpression,\r\n    UpdateExpression,\r\n    WhileExpression,\r\n  ]\r\n});","\r\nimport { EntityType } from '../../types/Entity';\r\nimport { EntityOps } from '../EntityOps';\r\nimport { Types } from '../../Types';\r\nimport { isArray } from '../../fns';\r\nimport { OperationTypeInput, OperationTypeProvider } from '../../Operation';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { NullType } from '../../types/Null';\r\nimport { TextType } from '../../types/Text';\r\nimport { Type } from '../../Type';\r\nimport { EntityRelation } from '../../Relation';\r\n\r\nconst ops = EntityType.operations;\r\n\r\nconst GetNamedType: OperationTypeInput<'name'> = (i, defs) => \r\n  i.name instanceof EntityType\r\n    ? i.name\r\n    : ObjectType.baseType;\r\n\r\nconst GetName: OperationTypeInput<'name'> = (i, defs) => {\r\n  if (i.name instanceof EntityType) {\r\n    return i.name;\r\n  }\r\n  const entities = defs.getEntities().values.map((entity) => new EntityType(entity.name, defs));\r\n  \r\n  return entities.length === 0\r\n    ? NullType.baseType\r\n    : entities.length === 1\r\n      ? entities[0]\r\n      : Types.many(entities);\r\n};\r\n\r\nconst GetTypeRelation = (i: {name?: Type, relation?: Type}, provider: OperationTypeProvider): EntityRelation | EntityRelation[] | null => {\r\n  if (!(i.name instanceof EntityType)) {\r\n    return null;\r\n  }\r\n\r\n  const relations = provider.getRelations(i.name.options);\r\n\r\n  if (i.relation instanceof EnumType) {\r\n    const relationName = i.relation.options.constants.get('relation');\r\n\r\n    if (relationName) {\r\n      const match = relations.find((r) => r.name === relationName);\r\n\r\n      if (match) {\r\n        return match;\r\n      }\r\n    }\r\n  }\r\n\r\n  return relations;\r\n};\r\n\r\nconst GetRelation: OperationTypeInput<'name' | 'relation'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation === null) {\r\n    return NullType.baseType;\r\n  } else if (isArray(typeRelation)) {\r\n    return Types.many(\r\n      typeRelation.map((relation) => Types.enum(\r\n        TextType,\r\n        TextType,\r\n        [['relation', relation.name]],\r\n      ))\r\n    );\r\n  } else {\r\n    return i.relation;\r\n  }\r\n};\r\n\r\nconst GetRelatedRelationType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, defs) => {\r\n  const typeRelation = GetTypeRelation(i, defs);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.relationType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.relationType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\nconst GetRelatedItemType: OperationTypeInput<'name' | 'relation' | 'related'> = (i, provider) => {\r\n  const typeRelation = GetTypeRelation(i, provider);\r\n\r\n  if (typeRelation !== null && !isArray(typeRelation)) {\r\n    if (i.related && typeRelation.itemType.acceptsType(i.related)) {\r\n      return i.related;\r\n    }\r\n    \r\n    return typeRelation.itemType;\r\n  }\r\n\r\n  return NullType.baseType;\r\n};\r\n\r\n\r\nexport const EntityOpsTypes = \r\n{\r\n\r\n  newInstance: ops.setTypes(EntityOps.newInstance, \r\n    GetNamedType,\r\n    { name: GetName }\r\n  ),\r\n\r\n  get: ops.setTypes(EntityOps.get, \r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity) {\r\n        return AnyType;\r\n      }\r\n\r\n      return Types.list(entity.type);\r\n    },\r\n    { name: GetName },\r\n    { where: BooleanType },\r\n    { instance: GetNamedType },\r\n  ),\r\n\r\n  getKey: ops.setTypes(EntityOps.getKey,\r\n    (i, provider) => {\r\n      if (!(i.name instanceof EntityType)) {\r\n        return AnyType;\r\n      }\r\n      const entity = provider.getEntity(i.name.options);\r\n      if (!entity || !entity.key) {\r\n        return AnyType;\r\n      }\r\n\r\n      return entity.keyType;\r\n    },\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  save: ops.setTypes(EntityOps.save, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  remove: ops.setTypes(EntityOps.remove, \r\n    BooleanType,\r\n    { name: GetName, instance: GetNamedType }\r\n  ),\r\n\r\n  setRelated: ops.setTypes(EntityOps.setRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedRelationType }\r\n  ),\r\n\r\n  addRelated: ops.setTypes(EntityOps.addRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  removeRelated: ops.setTypes(EntityOps.removeRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n  clearRelated: ops.setTypes(EntityOps.clearRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation } \r\n  ),\r\n\r\n  getRelated: ops.setTypes(EntityOps.getRelated,\r\n    (i, defs) => GetRelatedRelationType(i, defs),\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation }\r\n  ),\r\n\r\n  isRelated: ops.setTypes(EntityOps.isRelated, \r\n    NumberType,\r\n    { name: GetName, instance: GetNamedType, relation: GetRelation, related: GetRelatedItemType } \r\n  ),\r\n\r\n};\r\n\r\nEntityOpsTypes.newInstance.rawTypes = true;\r\nEntityOpsTypes.get.rawTypes = true;\r\nEntityOpsTypes.getKey.rawTypes = true;\r\nEntityOpsTypes.save.rawTypes = true;\r\nEntityOpsTypes.remove.rawTypes = true;\r\nEntityOpsTypes.setRelated.rawTypes = true;\r\nEntityOpsTypes.addRelated.rawTypes = true;\r\nEntityOpsTypes.removeRelated.rawTypes = true;\r\nEntityOpsTypes.clearRelated.rawTypes = true;\r\nEntityOpsTypes.getRelated.rawTypes = true;\r\nEntityOpsTypes.isRelated.rawTypes = true;\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { AnyOps } from '../AnyOps';\r\nimport { OptionalType } from '../../types/Optional';\r\nimport { ManyType } from '../../types/Many';\r\nimport { NullType } from '../../types/Null';\r\nimport { Type } from '../../Type';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = AnyType.operations;\r\n\r\nexport const AnyOpsTypes = \r\n{\r\n\r\n  // Operations\r\n\r\n  cmp: ops.setTypes(AnyOps.cmp, NumberType, { value: AnyType, test: AnyType }),\r\n\r\n  copy: ops.setTypes(AnyOps.copy, AnyType, { value: AnyType }),\r\n\r\n  isDefined: ops.setTypes(AnyOps.isDefined, \r\n    BooleanType,\r\n    { value: AnyType }\r\n  ),\r\n\r\n  getDefined: ops.setTypes(AnyOps.getDefined, \r\n    BooleanType,\r\n    { value: AnyType, defined: AnyType },\r\n    {},\r\n    { defined: i => i.value instanceof OptionalType ? i.value.options : i.value }\r\n  ),\r\n\r\n  coalesce: ops.setTypes(AnyOps.coalesce, \r\n    i => {\r\n      let optional = true;\r\n      const types: Type[] = [];\r\n      const checkType = (x?: Type) => {\r\n        if (!optional) return;\r\n        \r\n        if (x) {\r\n          let xoptional = x instanceof OptionalType;\r\n          const xinner = xoptional ? x.options as Type : x;\r\n\r\n          if (xinner instanceof ManyType) {\r\n            xinner.options.forEach((y) => {\r\n              const yoptional = y instanceof OptionalType;\r\n              const yinner = yoptional ? y.options as Type : y;\r\n\r\n              xoptional = xoptional || yoptional;\r\n\r\n              if (!types.some(t => t.exactType(yinner))) {\r\n                types.push(yinner);\r\n              }\r\n            });\r\n          }\r\n\r\n          optional = optional && xoptional;\r\n\r\n          if (!types.some(t => t.exactType(xinner))) {\r\n            types.push(xinner);\r\n          }\r\n        }\r\n      };\r\n\r\n      checkType(i.a);\r\n      checkType(i.b);\r\n      checkType(i.c);\r\n      checkType(i.d);\r\n      checkType(i.e);\r\n\r\n      return types.length > 1\r\n        ? optional\r\n          ? Types.optional(new ManyType(types))\r\n          : new ManyType(types)\r\n        : types.length === 1\r\n          ? optional\r\n            ? Types.optional(types[0])\r\n            : types[0]\r\n          : NullType;\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  require: ops.setTypes(AnyOps.require, \r\n    i => i.value instanceof OptionalType\r\n      ? i.value.options\r\n      : i.value || AnyType,\r\n    { value: i => i.value || AnyType },\r\n  ),\r\n\r\n  ternary: ops.setTypes(AnyOps.ternary, \r\n    (i) => {\r\n      if (i.truthy && i.falsy) {\r\n        return Types.mergeMany([i.truthy, i.falsy]);\r\n      } else if (i.truthy) {\r\n        return i.truthy;\r\n      } else if (i.falsy) {\r\n        return i.falsy;\r\n      } else {\r\n        return AnyType;\r\n      }\r\n    },\r\n    { condition: BooleanType, truthy: i => i.truthy || AnyType, falsy: i => i.falsy || AnyType },\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(AnyOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(AnyOps.isEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isNotEqual: ops.setTypes(AnyOps.isNotEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLess: ops.setTypes(AnyOps.isLess, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isLessOrEqual: ops.setTypes(AnyOps.isLessOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreater: ops.setTypes(AnyOps.isGreater, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(AnyOps.isGreaterOrEqual, BooleanType, { value: AnyType, test: AnyType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(AnyOps.asAny, i => i.value || AnyType, { value: AnyType }),\r\n\r\n  asBoolean: ops.setTypes(AnyOps.asBoolean, BooleanType, { value: AnyType }),\r\n\r\n  asColor: ops.setTypes(AnyOps.asColor, ColorType, { value: AnyType }),\r\n\r\n  asDate: ops.setTypes(AnyOps.asDate, DateType, { value: AnyType }),\r\n\r\n  asList: ops.setTypes(AnyOps.asList, i => ListType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asMap: ops.setTypes(AnyOps.asMap, i => MapType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n  asNumber: ops.setTypes(AnyOps.asNumber, NumberType, { value: AnyType }),\r\n\r\n  asObject: ops.setTypes(AnyOps.asObject, ObjectType, { value: AnyType }),\r\n\r\n  asText: ops.setTypes(AnyOps.asText, TextType, { value: AnyType }),\r\n\r\n  asTuple: ops.setTypes(AnyOps.asTuple, i => TupleType.forItem([i.value || AnyType]), { value: AnyType }),\r\n\r\n  asSet: ops.setTypes(AnyOps.asSet, i => SetType.forItem(i.value || AnyType), { value: AnyType }),\r\n\r\n};\r\n","\r\nimport { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { BooleanOps } from '../BooleanOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = BooleanType.operations;\r\n\r\n\r\nexport const BooleanOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(BooleanOps.create, BooleanType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(BooleanOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  and: ops.setTypes(BooleanOps.and, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  or: ops.setTypes(BooleanOps.or, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  xor: ops.setTypes(BooleanOps.xor, BooleanType, { a: BooleanType, b: BooleanType }),\r\n\r\n  not: ops.setTypes(BooleanOps.not, BooleanType, { a: BooleanType }),\r\n\r\n  cmp: ops.setTypes(BooleanOps.cmp, NumberType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(BooleanOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isTrue: ops.setTypes(BooleanOps.isTrue, BooleanType, { value: BooleanType }),\r\n\r\n  isFalse: ops.setTypes(BooleanOps.isFalse, BooleanType, { value: BooleanType }),\r\n\r\n  isEqual: ops.setTypes(BooleanOps.isEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(BooleanOps.isNotEqual, BooleanType, { value: BooleanType, test: BooleanType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(BooleanOps.asAny, AnyType, { value: BooleanType }),\r\n\r\n  asBoolean: ops.setTypes(BooleanOps.asBoolean, i => i.value || BooleanType, { value: BooleanType }),\r\n\r\n  asColor: ops.setTypes(BooleanOps.asColor, ColorType, { value: BooleanType }),\r\n\r\n  asDate: ops.setTypes(BooleanOps.asDate, DateType, { value: BooleanType }),\r\n\r\n  asList: ops.setTypes(BooleanOps.asList, i => ListType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asMap: ops.setTypes(BooleanOps.asMap, i => MapType.forItem(i.value || BooleanType), { value: BooleanType }),\r\n\r\n  asNumber: ops.setTypes(BooleanOps.asNumber, NumberType, { value: BooleanType }),\r\n\r\n  asObject: ops.setTypes(BooleanOps.asObject, ObjectType, { value: BooleanType }),\r\n\r\n  asText: ops.setTypes(BooleanOps.asText, TextType, { value: BooleanType }),\r\n\r\n  asTuple: ops.setTypes(BooleanOps.asTuple, i => TupleType.forItem([i.value || BooleanType]), { value: BooleanType }),\r\n\r\n  asSet: ops.setTypes(BooleanOps.asSet, i => SetType.forItem(i.value || AnyType), { value: BooleanType }),\r\n\r\n};","\r\nimport { ColorType } from '../../types/Color';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ColorOps } from '../ColorOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\nimport { ColorSpaceHSL } from '../../util/color/ColorSpaceHSL';\r\nimport { Color } from '../../util/color/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ColorType.operations;\r\n\r\nexport const ColorComponentEnum = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['r', 'r'],\r\n    ['g', 'g'],\r\n    ['b', 'b'],\r\n    ['a', 'a'],\r\n  ]),\r\n});\r\n\r\nexport const ColorOrNumber = new ManyType([\r\n  ColorType.baseType,\r\n  new NumberType({ }),\r\n]);\r\n\r\nexport const ColorFormats = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Best Fit: #rrggbb or rgb()', 'rgb:bestfit'],\r\n    ['#rgb', 'rgb:hexShort'],\r\n    ['#rrggbb', 'rgb:hex'],\r\n    ['#rrggbbaa', 'rgb:hexLong'],\r\n    ['rgb(r, g, b)', 'rgb:rgb'],\r\n    ['rgba(r, g, b, a)', 'rgb:rgba'],\r\n    ['hsl(h, s, l)', 'hsl:hsl'],\r\n    ['hsla(h, s, l, a)', 'hsl:hsla'],\r\n  ]),\r\n});\r\n\r\nexport const ColorNames = new EnumType({\r\n  key: TextType.baseType,\r\n  value: ColorType.baseType,\r\n  constants: new Map<string, Color>([\r\n    ['Transparent', { r: 255, g: 255, b: 255, a: 0 }],\r\n    ['Alice Blue', { r: 240, g: 248, b: 255, a: 255 }],\r\n    ['Antique White', { r: 250, g: 235, b: 215, a: 255 }],\r\n    ['Aqua', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Aquamarine', { r: 127, g: 255, b: 212, a: 255 }],\r\n    ['Azure', { r: 240, g: 255, b: 255, a: 255 }],\r\n    ['Beige', { r: 245, g: 245, b: 220, a: 255 }],\r\n    ['Bisque', { r: 255, g: 228, b: 196, a: 255 }],\r\n    ['Black', { r: 0, g: 0, b: 0, a: 255 }],\r\n    ['Blanched Almond', { r: 255, g: 235, b: 205, a: 255 }],\r\n    ['Blue', { r: 0, g: 0, b: 255, a: 255 }],\r\n    ['Blue Violet', { r: 138, g: 43, b: 226, a: 255 }],\r\n    ['Brown', { r: 165, g: 42, b: 42, a: 255 }],\r\n    ['Burly Wood', { r: 222, g: 184, b: 135, a: 255 }],\r\n    ['Cadet Blue', { r: 95, g: 158, b: 160, a: 255 }],\r\n    ['Chartreuse', { r: 127, g: 255, b: 0, a: 255 }],\r\n    ['Chocolate', { r: 210, g: 105, b: 30, a: 255 }],\r\n    ['Coral', { r: 255, g: 127, b: 80, a: 255 }],\r\n    ['Cornflower Blue', { r: 100, g: 149, b: 237, a: 255 }],\r\n    ['Cornsilk', { r: 255, g: 248, b: 220, a: 255 }],\r\n    ['Crimson', { r: 220, g: 20, b: 60, a: 255 }],\r\n    ['Cyan', { r: 0, g: 255, b: 255, a: 255 }],\r\n    ['Dark Blue', { r: 0, g: 0, b: 139, a: 255 }],\r\n    ['Dark Cyan', { r: 0, g: 139, b: 139, a: 255 }],\r\n    ['Dark Goldenrod', { r: 184, g: 134, b: 11, a: 255 }],\r\n    ['Dark Gray', { r: 169, g: 169, b: 169, a: 255 }],\r\n    ['Dark Green', { r: 0, g: 100, b: 0, a: 255 }],\r\n    ['Dark Khaki', { r: 189, g: 183, b: 107, a: 255 }],\r\n    ['Dark Magenta', { r: 139, g: 0, b: 139, a: 255 }],\r\n    ['Dark Olive Green', { r: 85, g: 107, b: 47, a: 255 }],\r\n    ['Dark Orange', { r: 255, g: 140, b: 0, a: 255 }],\r\n    ['Dark Orchid', { r: 153, g: 50, b: 204, a: 255 }],\r\n    ['Dark Red', { r: 139, g: 0, b: 0, a: 255 }],\r\n    ['Dark Salmon', { r: 233, g: 150, b: 122, a: 255 }],\r\n    ['Dark Sea Green', { r: 143, g: 188, b: 139, a: 255 }],\r\n    ['Dark Slate Blue', { r: 72, g: 61, b: 139, a: 255 }],\r\n    ['Dark Slate Gray', { r: 47, g: 79, b: 79, a: 255 }],\r\n    ['Dark Turquoise', { r: 0, g: 206, b: 209, a: 255 }],\r\n    ['Dark Violet', { r: 148, g: 0, b: 211, a: 255 }],\r\n    ['Deep Pink', { r: 255, g: 20, b: 147, a: 255 }],\r\n    ['Deep Sky Blue', { r: 0, g: 191, b: 255, a: 255 }],\r\n    ['Dim Gray', { r: 105, g: 105, b: 105, a: 255 }],\r\n    ['Dodger Blue', { r: 30, g: 144, b: 255, a: 255 }],\r\n    ['Firebrick', { r: 178, g: 34, b: 34, a: 255 }],\r\n    ['Floral White', { r: 255, g: 250, b: 240, a: 255 }],\r\n    ['Forest Green', { r: 34, g: 139, b: 34, a: 255 }],\r\n    ['Fuchsia', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Gainsboro', { r: 220, g: 220, b: 220, a: 255 }],\r\n    ['Ghost White', { r: 248, g: 248, b: 255, a: 255 }],\r\n    ['Gold', { r: 255, g: 215, b: 0, a: 255 }],\r\n    ['Goldenrod', { r: 218, g: 165, b: 32, a: 255 }],\r\n    ['Gray', { r: 128, g: 128, b: 128, a: 255 }],\r\n    ['Green', { r: 0, g: 128, b: 0, a: 255 }],\r\n    ['Green Yellow', { r: 173, g: 255, b: 47, a: 255 }],\r\n    ['Honeydew', { r: 240, g: 255, b: 240, a: 255 }],\r\n    ['Hot Pink', { r: 255, g: 105, b: 180, a: 255 }],\r\n    ['Indian Red', { r: 205, g: 92, b: 92, a: 255 }],\r\n    ['Indigo', { r: 75, g: 0, b: 130, a: 255 }],\r\n    ['Ivory', { r: 255, g: 255, b: 240, a: 255 }],\r\n    ['Khaki', { r: 240, g: 230, b: 140, a: 255 }],\r\n    ['Lavender', { r: 230, g: 230, b: 250, a: 255 }],\r\n    ['Lavender Blush', { r: 255, g: 240, b: 245, a: 255 }],\r\n    ['Lawn Green', { r: 124, g: 252, b: 0, a: 255 }],\r\n    ['Lemon Chiffon', { r: 255, g: 250, b: 205, a: 255 }],\r\n    ['Light Blue', { r: 173, g: 216, b: 230, a: 255 }],\r\n    ['Light Coral', { r: 240, g: 128, b: 128, a: 255 }],\r\n    ['Light Cyan', { r: 224, g: 255, b: 255, a: 255 }],\r\n    ['Light Goldenrod Yellow', { r: 250, g: 250, b: 210, a: 255 }],\r\n    ['Light Gray', { r: 211, g: 211, b: 211, a: 255 }],\r\n    ['Light Green', { r: 144, g: 238, b: 144, a: 255 }],\r\n    ['Light Pink', { r: 255, g: 182, b: 193, a: 255 }],\r\n    ['Light Salmon', { r: 255, g: 160, b: 122, a: 255 }],\r\n    ['Light Sea Green', { r: 32, g: 178, b: 170, a: 255 }],\r\n    ['Light Sky Blue', { r: 135, g: 206, b: 250, a: 255 }],\r\n    ['Light Slate Gray', { r: 119, g: 136, b: 153, a: 255 }],\r\n    ['Light Steel Blue', { r: 176, g: 196, b: 222, a: 255 }],\r\n    ['Light Yellow', { r: 255, g: 255, b: 224, a: 255 }],\r\n    ['Lime', { r: 0, g: 255, b: 0, a: 255 }],\r\n    ['LimeGreen', { r: 50, g: 205, b: 50, a: 255 }],\r\n    ['Linen', { r: 250, g: 240, b: 230, a: 255 }],\r\n    ['Magenta', { r: 255, g: 0, b: 255, a: 255 }],\r\n    ['Maroon', { r: 128, g: 0, b: 0, a: 255 }],\r\n    ['Medium Aquamarine', { r: 102, g: 205, b: 170, a: 255 }],\r\n    ['Medium Blue', { r: 0, g: 0, b: 205, a: 255 }],\r\n    ['Medium Orchid', { r: 186, g: 85, b: 211, a: 255 }],\r\n    ['Medium Purple', { r: 147, g: 112, b: 219, a: 255 }],\r\n    ['Medium Sea Green', { r: 60, g: 179, b: 113, a: 255 }],\r\n    ['Medium Slate Blue', { r: 123, g: 104, b: 238, a: 255 }],\r\n    ['Medium Spring Green', { r: 0, g: 250, b: 154, a: 255 }],\r\n    ['Medium Turquoise', { r: 72, g: 209, b: 204, a: 255 }],\r\n    ['Medium VioletRed', { r: 199, g: 21, b: 133, a: 255 }],\r\n    ['Midnight Blue', { r: 25, g: 25, b: 112, a: 255 }],\r\n    ['Mint Cream', { r: 245, g: 255, b: 250, a: 255 }],\r\n    ['Misty Rose', { r: 255, g: 228, b: 225, a: 255 }],\r\n    ['Moccasin', { r: 255, g: 228, b: 181, a: 255 }],\r\n    ['Navajo White', { r: 255, g: 222, b: 173, a: 255 }],\r\n    ['Navy', { r: 0, g: 0, b: 128, a: 255 }],\r\n    ['Old Lace', { r: 253, g: 245, b: 230, a: 255 }],\r\n    ['Olive', { r: 128, g: 128, b: 0, a: 255 }],\r\n    ['Olive Drab', { r: 107, g: 142, b: 35, a: 255 }],\r\n    ['Orange', { r: 255, g: 165, b: 0, a: 255 }],\r\n    ['Orange Red', { r: 255, g: 69, b: 0, a: 255 }],\r\n    ['Orchid', { r: 218, g: 112, b: 214, a: 255 }],\r\n    ['Pale Goldenrod', { r: 238, g: 232, b: 170, a: 255 }],\r\n    ['Pale Green', { r: 152, g: 251, b: 152, a: 255 }],\r\n    ['Pale Turquoise', { r: 175, g: 238, b: 238, a: 255 }],\r\n    ['Pale Violet Red', { r: 219, g: 112, b: 147, a: 255 }],\r\n    ['Papaya Whip', { r: 255, g: 239, b: 213, a: 255 }],\r\n    ['Peach Puff', { r: 255, g: 218, b: 185, a: 255 }],\r\n    ['Peru', { r: 205, g: 133, b: 63, a: 255 }],\r\n    ['Pink', { r: 255, g: 192, b: 203, a: 255 }],\r\n    ['Plum', { r: 221, g: 160, b: 221, a: 255 }],\r\n    ['Powder Blue', { r: 176, g: 224, b: 230, a: 255 }],\r\n    ['Purple', { r: 128, g: 0, b: 128, a: 255 }],\r\n    ['Red', { r: 255, g: 0, b: 0, a: 255 }],\r\n    ['Rosy Brown', { r: 188, g: 143, b: 143, a: 255 }],\r\n    ['Royal Blue', { r: 65, g: 105, b: 225, a: 255 }],\r\n    ['Saddle Brown', { r: 139, g: 69, b: 19, a: 255 }],\r\n    ['Salmon', { r: 250, g: 128, b: 114, a: 255 }],\r\n    ['Sandy Brown', { r: 244, g: 164, b: 96, a: 255 }],\r\n    ['Sea Green', { r: 46, g: 139, b: 87, a: 255 }],\r\n    ['Sea Shell', { r: 255, g: 245, b: 238, a: 255 }],\r\n    ['Sienna', { r: 160, g: 82, b: 45, a: 255 }],\r\n    ['Silver', { r: 192, g: 192, b: 192, a: 255 }],\r\n    ['Sky Blue', { r: 135, g: 206, b: 235, a: 255 }],\r\n    ['Slate Blue', { r: 106, g: 90, b: 205, a: 255 }],\r\n    ['Slate Gray', { r: 112, g: 128, b: 144, a: 255 }],\r\n    ['Snow', { r: 255, g: 250, b: 250, a: 255 }],\r\n    ['Spring Green', { r: 0, g: 255, b: 127, a: 255 }],\r\n    ['Steel Blue', { r: 70, g: 130, b: 180, a: 255 }],\r\n    ['Tan', { r: 210, g: 180, b: 140, a: 255 }],\r\n    ['Teal', { r: 0, g: 128, b: 128, a: 255 }],\r\n    ['Thistle', { r: 216, g: 191, b: 216, a: 255 }],\r\n    ['Tomato', { r: 255, g: 99, b: 71, a: 255 }],\r\n    ['Turquoise', { r: 64, g: 224, b: 208, a: 255 }],\r\n    ['Violet', { r: 238, g: 130, b: 238, a: 255 }],\r\n    ['Wheat', { r: 245, g: 222, b: 179, a: 255 }],\r\n    ['White', { r: 255, g: 255, b: 255, a: 255 }],\r\n    ['White Smoke', { r: 245, g: 245, b: 245, a: 255 }],\r\n    ['Yellow', { r: 255, g: 255, b: 0, a: 255 }],\r\n    ['Yellow Green', { r: 154, g: 205, b: 50, a: 255 }],\r\n  ]),\r\n});\r\n\r\n// a = bottom layer (0 -> 1)\r\n// b = top layer (0 -> 1)\r\n\r\nexport const ColorBlendModes = new EnumType({\r\n  key: TextType.baseType,\r\n  value: TextType.baseType,\r\n  constants: new Map([\r\n    ['Multiply', 'multiply'],         // a * b\r\n    ['Screen', 'screen'],             // 1 - (1 - a)(1 - b)\r\n    ['Overlay', 'overlay'],           // a < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Hard Light', 'hard'],           // b < 0.5 ? 2ab : 1 - 2(1 - a)(1 - b)\r\n    ['Soft Light', 'soft'],           // (1 - 2b)aa + 2ba\r\n    ['Dodge', 'dodge'],               // a / (1 - b)\r\n    ['Burn', 'burn'],                 // (1 - b) / a\r\n    ['Divide', 'divide'],             // a === b ? 1 : b === 0 ? 0 : a / b\r\n    ['Addition', 'add'],              // a + b\r\n    ['Subtract', 'sub'],              // a - b\r\n    ['Difference', 'diff'],           // b - a\r\n    ['Darken Only', 'darken'],        // min(a, b)\r\n    ['Lighten Only', 'lighten'],      // max(a, b)\r\n  ]),\r\n});\r\n\r\n\r\nexport const ColorOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ColorOps.create, ColorType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ColorOps.maybe, \r\n    (i) => Types.maybe(i.value, ColorType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(ColorOps.cmp, \r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ColorOps.copy, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  build: ops.setTypes(ColorOps.build, \r\n    ColorType,\r\n    { r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType }\r\n  ),\r\n\r\n  map: ops.setTypes(ColorOps.map, \r\n    ColorType,\r\n    { value: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  op: ops.setTypes(ColorOps.op, \r\n    ColorType,\r\n    { value: ColorType, test: ColorType, r: NumberType, g: NumberType, b: NumberType },\r\n    { a: NumberType },\r\n    { value: NumberType, test: NumberType, component: ColorComponentEnum }\r\n  ),\r\n\r\n  clamp: ops.setTypes(ColorOps.clamp, \r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  add: ops.setTypes(ColorOps.add, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  adds: ops.setTypes(ColorOps.adds, \r\n    ColorType,\r\n    { value: ColorType, addend: ColorOrNumber, addendScale: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  sub: ops.setTypes(ColorOps.sub, \r\n    ColorType,\r\n    { value: ColorType, subtrahend: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mul: ops.setTypes(ColorOps.mul, \r\n    ColorType,\r\n    { value: ColorType, multiplier: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  div: ops.setTypes(ColorOps.div, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  mod: ops.setTypes(ColorOps.mod, \r\n    ColorType,\r\n    { value: ColorType, divisor: ColorOrNumber },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  format: ops.setTypes(ColorOps.format, \r\n    TextType,\r\n    { value: ColorType, format: ColorFormats }\r\n  ),\r\n\r\n  parse: ops.setTypes(ColorOps.parse, \r\n    Types.optional(ColorType),\r\n    { value: AnyType }\r\n  ),\r\n\r\n  lerp: ops.setTypes(ColorOps.lerp,\r\n    ColorType,\r\n    { start: ColorType, end: ColorType, delta: NumberType }\r\n  ),\r\n\r\n  lighten: ops.setTypes(ColorOps.lighten,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  darken: ops.setTypes(ColorOps.darken,\r\n    ColorType,\r\n    { value: ColorType, amount: NumberType }\r\n  ),\r\n\r\n  toHSL: ops.setTypes(ColorOps.toHSL,\r\n    ColorSpaceHSL.type,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  fromHSL: ops.setTypes(ColorOps.fromHSL,\r\n    ColorType,\r\n    { value: ColorSpaceHSL.type }\r\n  ),\r\n\r\n  luminance: ops.setTypes(ColorOps.luminance,\r\n    NumberType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  contrast: ops.setTypes(ColorOps.contrast,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  invert: ops.setTypes(ColorOps.invert,\r\n    ColorType,\r\n    { value: ColorType },\r\n    { alpha: BooleanType }\r\n  ),\r\n\r\n  opaque: ops.setTypes(ColorOps.opaque,\r\n    ColorType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  alpha: ops.setTypes(ColorOps.alpha,\r\n    ColorType,\r\n    { value: ColorType, alpha: NumberType }\r\n  ),\r\n\r\n  distance: ops.setTypes(ColorOps.distance,\r\n    NumberType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  named: ops.setTypes(ColorOps.named,\r\n    ColorType,\r\n    { name: ColorNames }\r\n  ),\r\n\r\n  getName: ops.setTypes(ColorOps.getName,\r\n    TextType,\r\n    { value: ColorType }\r\n  ),\r\n\r\n  blend: ops.setTypes(ColorOps.blend, \r\n    ColorType,\r\n    { top: ColorType, bottom: ColorType, mode: ColorBlendModes }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ColorOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ColorOps.isEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ColorOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType },\r\n    { epsilon: NumberType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ColorOps.isLess, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ColorOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ColorOps.isGreater, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ColorOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ColorType, test: ColorType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ColorOps.asAny, AnyType, { value: ColorType }),\r\n\r\n  asBoolean: ops.setTypes(ColorOps.asBoolean, BooleanType, { value: ColorType }),\r\n\r\n  asColor: ops.setTypes(ColorOps.asColor, ColorType, { value: ColorType }),\r\n\r\n  asDate: ops.setTypes(ColorOps.asDate, DateType, { value: ColorType }),\r\n\r\n  asList: ops.setTypes(ColorOps.asList, i => ListType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asMap: ops.setTypes(ColorOps.asMap, i => MapType.forItem(i.value || ColorType), { value: ColorType }),\r\n\r\n  asNumber: ops.setTypes(ColorOps.asNumber, NumberType, { value: ColorType }),\r\n\r\n  asObject: ops.setTypes(ColorOps.asObject, i => i.value || ColorType, { value: ColorType }),\r\n\r\n  asText: ops.setTypes(ColorOps.asText, TextType, { value: ColorType }),\r\n\r\n  asTuple: ops.setTypes(ColorOps.asTuple, i => TupleType.forItem([i.value || ColorType]), { value: ColorType }),\r\n\r\n  asSet: ops.setTypes(ColorOps.asSet, i => SetType.forItem(i.value || AnyType), { value: ColorType }),\r\n\r\n};\r\n","import { AnyType } from '../../types/Any';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TextType } from '../../types/Text';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { ManyType } from '../../types/Many';\r\n\r\nimport { DateOps } from '../DateOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = DateType.operations;\r\n\r\nconst DateProperty = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Timestamp', 'timestamp'],\r\n    ['Timestamp (seconds)', 'timestampSeconds'],\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Day of Month', 'dayOfMonth'],\r\n    ['Last Day of Month', 'lastDayOfMonth'],\r\n    ['Day of Year', 'dayOfYear'],\r\n    ['Day of Week', 'dayOfWeek'],\r\n    ['Week', 'week'],\r\n    ['Week of Month', 'weekOfMonth'],\r\n    ['Weekspan of Month', 'weekspanOfMonth'],\r\n    ['Full Week of Month', 'fullWeekOfMonth'],\r\n    ['Last Weekspan of Month', 'lastWeekspanOfMonth'],\r\n    ['Last Full Week of Month', 'lastFullWeekOfMonth'],\r\n    ['Week of Year', 'weekOfYear'],\r\n    ['Weekspan of Year', 'weekspanOfYear'],\r\n    ['Full Week of Year', 'fullWeekOfYear'],\r\n    ['Last Weekspan of Year', 'lastWeekspanOfYear'],\r\n    ['Last Full Week of Year', 'lastFullWeekOfYear'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year'],\r\n    ['Time Identifier', 'timeIdentifier'],\r\n    ['Day Identifier', 'dayIdentifier'],\r\n    ['Week Identifier', 'weekIdentifier'],\r\n    ['Month Identifier', 'monthIdentifier'],\r\n    ['Quarter Identifier', 'quarterIdentifier']\r\n  ])\r\n});\r\n\r\nconst DateUnits = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['Millisecond', 'millis'],\r\n    ['Second', 'second'],\r\n    ['Minute', 'minute'],\r\n    ['Hour', 'hour'],\r\n    ['Day', 'day'],\r\n    ['Week', 'week'],\r\n    ['Month', 'month'],\r\n    ['Quarter', 'quarter'],\r\n    ['Year', 'year']\r\n  ])\r\n});\r\n\r\nconst DateAdjust = new EnumType({\r\n  key: TextType.baseType.newInstance(),\r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['None', 'none'],\r\n    ['Floor', 'floor'],\r\n    ['Ceil', 'ceil'],\r\n    ['Round', 'round'],\r\n    ['Truncate', 'truncate'],\r\n    ['Up', 'up'],\r\n    ['Down', 'down']\r\n  ])\r\n})\r\n\r\n\r\nexport const DateOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(DateOps.create, DateType),\r\n\r\n  now: ops.setTypes(DateOps.now, DateType),\r\n\r\n  today: ops.setTypes(DateOps.today, DateType),\r\n\r\n  tomorrow: ops.setTypes(DateOps.tomorrow, DateType),\r\n\r\n  yesterday: ops.setTypes(DateOps.yesterday, DateType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(DateOps.maybe, \r\n    (i) => Types.maybe(i.value, BooleanType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  parse: ops.setTypes(DateOps.parse, Types.optional(DateType), { value: new ManyType([DateType.baseType, NumberType.baseType, TextType.baseType]) }, { parseAsUTC: BooleanType }),\r\n\r\n  fromText: ops.setTypes(DateOps.fromText, Types.optional(DateType), { value: TextType }, { parseAsUTC: BooleanType }),\r\n\r\n  fromTimestamp: ops.setTypes(DateOps.fromTimestamp, DateType, { value: NumberType }),\r\n\r\n  fromTimestampSeconds: ops.setTypes(DateOps.fromTimestampSeconds, DateType, { value: NumberType }),\r\n\r\n  min: ops.setTypes(DateOps.min, DateType, { value: DateType, test: DateType }),\r\n\r\n  max: ops.setTypes(DateOps.max, DateType, { value: DateType, test: DateType }),\r\n\r\n  get: ops.setTypes(DateOps.get, NumberType, { value: DateType, property: DateProperty }),\r\n\r\n  set: ops.setTypes(DateOps.set, DateType, { value: DateType, property: DateProperty, set: NumberType }),\r\n\r\n  add: ops.setTypes(DateOps.add, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  sub: ops.setTypes(DateOps.sub, DateType, { value: DateType, unit: DateUnits }, { amount: NumberType }),\r\n\r\n  startOf: ops.setTypes(DateOps.startOf, DateType, { value: DateType, unit: DateUnits }),\r\n\r\n  endOf: ops.setTypes(DateOps.endOf, DateType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  daysInMonth: ops.setTypes(DateOps.daysInMonth, NumberType, { value: DateType }),\r\n\r\n  daysInYear: ops.setTypes(DateOps.daysInYear, NumberType, { value: DateType }),\r\n\r\n  weeksInYear: ops.setTypes(DateOps.weeksInYear, NumberType, { value: DateType }),\r\n\r\n  copy: ops.setTypes(DateOps.copy, DateType, { value: DateType }),\r\n\r\n  cmp: ops.setTypes(DateOps.cmp, NumberType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  diff: ops.setTypes(DateOps.diff, NumberType, { value: DateType, test: DateType }, { unit: DateUnits, absolute: BooleanType, adjust: DateAdjust }),\r\n\r\n  timezoneOffset: ops.setTypes(DateOps.timezoneOffset, NumberType, { value: DateType }),\r\n\r\n  // Formatters\r\n\r\n  toText: ops.setTypes(DateOps.toText, TextType, { value: DateType, format: TextType }),\r\n\r\n  toISOText: ops.setTypes(DateOps.toISOText, TextType, { value: DateType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(DateOps.isValid, BooleanType, { value: AnyType }),\r\n \r\n  isEqual: ops.setTypes(DateOps.isEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBefore: ops.setTypes(DateOps.isBefore, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBeforeOrEqual: ops.setTypes(DateOps.isBeforeOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfter: ops.setTypes(DateOps.isAfter, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isAfterOrEqual: ops.setTypes(DateOps.isAfterOrEqual, BooleanType, { value: DateType, test: DateType }, { unit: DateUnits }),\r\n\r\n  isBetween: ops.setTypes(DateOps.isBetween, BooleanType, { value: DateType, start: DateType, end: DateType }, { unit: DateUnits, startInclusive: BooleanType, endInclusive: BooleanType }),\r\n\r\n  isStartOf: ops.setTypes(DateOps.isStartOf, BooleanType, { value: DateType, unit: DateUnits }),\r\n\r\n  isEndOf: ops.setTypes(DateOps.isEndOf, BooleanType, { value: DateType, unit: DateUnits }, { inclusive: BooleanType }),\r\n\r\n  isDST: ops.setTypes(DateOps.isDST, BooleanType, { value: DateType }),\r\n\r\n  isLeapYear: ops.setTypes(DateOps.isLeapYear, BooleanType, { value: DateType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(DateOps.asAny, AnyType, { value: DateType }),\r\n\r\n  asBoolean: ops.setTypes(DateOps.asBoolean, BooleanType, { value: DateType }),\r\n\r\n  asColor: ops.setTypes(DateOps.asColor, ColorType, { value: DateType }),\r\n\r\n  asDate: ops.setTypes(DateOps.asDate, i => i.value || DateType, { value: DateType }),\r\n\r\n  asList: ops.setTypes(DateOps.asList, i => ListType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asMap: ops.setTypes(DateOps.asMap, i => MapType.forItem(i.value || DateType), { value: DateType }),\r\n\r\n  asNumber: ops.setTypes(DateOps.asNumber, NumberType, { value: DateType }),\r\n\r\n  asObject: ops.setTypes(DateOps.asObject, ObjectType, { value: DateType }),\r\n\r\n  asText: ops.setTypes(DateOps.asText, TextType, { value: DateType }),\r\n\r\n  asTuple: ops.setTypes(DateOps.asTuple, i => TupleType.forItem([i.value || DateType]), { value: DateType }),\r\n\r\n  asSet: ops.setTypes(DateOps.asSet, i => SetType.forItem(i.value || AnyType), { value: DateType }),\r\n\r\n};","\r\nimport { Type, TypeInput } from '../../Type';\r\nimport { ListType } from '../../types/List';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { NumberType } from '../../types/Number';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\nimport { MapType } from '../../types/Map';\r\nimport { DateType } from '../../types/Date';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { ListOps } from '../ListOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ListType.operations;\r\n\r\nconst RequireList = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list : otherwise;\r\nconst ListItem = (list?: Type, otherwise?: TypeInput) => list instanceof ListType ? list.options.item : otherwise;\r\nconst GivenList = (i: {list?: Type}) => RequireList(i.list) || ListType;\r\nconst GivenValueList = (i: {value?: Type}) => RequireList(i.value) || ListType;\r\nconst GivenListItem = (i: {list?: Type}) => RequireList(i.list) ? i.list.options.item : AnyType;\r\nconst GivenListItemOptional = (i: {list?: Type}) => Types.optional(GivenListItem(i));\r\nconst GivenValueListItem = (i: {value?: Type}) => RequireList(i.value) ? i.value.options.item : AnyType;\r\nconst GivenReducer = (i: {reduce?: Type, initial?: Type}) => i.reduce || i.initial || AnyType;\r\nconst GivenListCompareScope = { list: GivenList, value: GivenListItem, test: GivenListItem };\r\nconst GivenValueListCompareScope = { list: GivenValueList, value: GivenValueListItem, test: GivenValueListItem };\r\nconst GivenListIterationScope = { list: GivenList, item: GivenListItem, index: NumberType };\r\n\r\nexport const ListOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ListOps.create, ListType),\r\n\r\n  createLike: ops.setTypes(ListOps.createLike, \r\n    GivenList,\r\n    { list: GivenList },\r\n  ),\r\n\r\n  createFor: ops.setTypes(ListOps.createFor, \r\n    i => ListType.forItem(i.item || AnyType),\r\n    { item: i => i.item || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ListOps.maybe, \r\n    (i) => Types.maybe(i.value, ListType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  build: ops.setTypes(ListOps.build, \r\n    i => ListType.forItem(i.item || AnyType), \r\n    { count: NumberType, item: i => i.item || AnyType },\r\n    { sameItem: BooleanType },\r\n    { list: i => ListType.forItem(i.item || AnyType), index: NumberType, last: i => i.item || AnyType, count: NumberType }\r\n  ),\r\n\r\n  get: ops.setTypes(ListOps.get, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  set: ops.setTypes(ListOps.set, \r\n    GivenListItemOptional, \r\n    { list: GivenList, index: NumberType, value: GivenListItem }\r\n  ),\r\n\r\n  add: ops.setTypes(ListOps.add, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addFirst: ops.setTypes(ListOps.addFirst, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  addLast: ops.setTypes(ListOps.addLast, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem }\r\n  ),\r\n\r\n  insert: ops.setTypes(ListOps.insert, \r\n    GivenList,\r\n    { list: GivenList, item: GivenListItem, index: NumberType }\r\n  ),\r\n\r\n  remove: ops.setTypes(ListOps.remove,  \r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  removeFirst: ops.setTypes(ListOps.removeFirst,\r\n    GivenListItemOptional, \r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeLast: ops.setTypes(ListOps.removeLast,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  removeAt: ops.setTypes(ListOps.removeAt,  \r\n    GivenListItemOptional,\r\n    { list: GivenList, index: NumberType }\r\n  ),\r\n\r\n  removeWhere: ops.setTypes(ListOps.removeWhere,  \r\n    GivenList,\r\n    { list: GivenList, where: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  clear: ops.setTypes(ListOps.clear, \r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  contains: ops.setTypes(ListOps.contains,\r\n    BooleanType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  find: ops.setTypes(ListOps.find,\r\n    GivenListItemOptional,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  copy: ops.setTypes(ListOps.copy,\r\n    GivenList,\r\n    { list: GivenList },\r\n    { deepCopy: GivenListItem },\r\n    { copy: GivenListItem }\r\n  ),\r\n\r\n  reverse: ops.setTypes(ListOps.reverse,\r\n    GivenList,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  exclude: ops.setTypes(ListOps.exclude,  \r\n    GivenList,\r\n    { list: GivenList, exclude: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  overlap: ops.setTypes(ListOps.overlap,  \r\n    GivenList,\r\n    { list: GivenList, overlap: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  sort: ops.setTypes(ListOps.sort,   \r\n    GivenList,\r\n    { list: GivenList, compare: NumberType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  shuffle: ops.setTypes(ListOps.shuffle, \r\n    GivenList,\r\n    { list: GivenList },\r\n    { times: NumberType }\r\n  ),\r\n\r\n  unique: ops.setTypes(ListOps.unique,   \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  duplicates: ops.setTypes(ListOps.duplicates,  \r\n    GivenList,\r\n    { list: GivenList, isEqual: BooleanType },\r\n    { once: BooleanType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  take: ops.setTypes(ListOps.take,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  skip: ops.setTypes(ListOps.skip,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  drop: ops.setTypes(ListOps.drop,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  append: ops.setTypes(ListOps.append,\r\n    GivenList,\r\n    { list: GivenList, append: GivenList }\r\n  ),\r\n\r\n  prepend: ops.setTypes(ListOps.prepend,\r\n    GivenList,\r\n    { list: GivenList, prepend: GivenList }\r\n  ),\r\n\r\n  indexOf: ops.setTypes(ListOps.indexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  lastIndexOf: ops.setTypes(ListOps.lastIndexOf,\r\n    NumberType,\r\n    { list: GivenList, item: GivenListItem, isEqual: BooleanType },\r\n    { start: NumberType },\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  findIndex: ops.setTypes(ListOps.findIndex,\r\n    NumberType,\r\n    { list: GivenList, where: BooleanType },\r\n    { reverse: BooleanType, start: NumberType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  last: ops.setTypes(ListOps.last,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  first: ops.setTypes(ListOps.first,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  count: ops.setTypes(ListOps.count,\r\n    NumberType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  randomList: ops.setTypes(ListOps.randomList,\r\n    GivenList,\r\n    { list: GivenList, count: NumberType }\r\n  ),\r\n\r\n  random: ops.setTypes(ListOps.random,\r\n    GivenListItemOptional,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  // Iteration\r\n\r\n  join: ops.setTypes(ListOps.join,\r\n    TextType,\r\n    { list: GivenList },\r\n    { delimiter: TextType, toText: TextType, prefix: TextType, suffix: TextType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  each: ops.setTypes(ListOps.each,\r\n    GivenList,\r\n    { list: GivenList, each: AnyType },\r\n    { reverse: BooleanType },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  filter: ops.setTypes(ListOps.filter,\r\n    GivenList,\r\n    { list: GivenList, filter: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  not: ops.setTypes(ListOps.not,\r\n    GivenList,\r\n    { list: GivenList, not: BooleanType }, \r\n    {}, \r\n    GivenListIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(ListOps.map,\r\n    i => ListType.forItem(i.transform || AnyType),\r\n    { list: GivenList, transform: i => i.transform || AnyType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  split: ops.setTypes(ListOps.split,\r\n    i => Types.object({ pass: GivenList(i), fail: GivenList(i) }),\r\n    { list: GivenList, pass: BooleanType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  reduce: ops.setTypes(ListOps.reduce,\r\n    GivenReducer,\r\n    { list: GivenList, reduce: GivenReducer, initial: GivenReducer },\r\n    {},\r\n    { list: GivenList, item: GivenListItem, reduced: GivenReducer, index: NumberType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ListOps.cmp,\r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  group: ops.setTypes(ListOps.group, \r\n    i => ListType.forItem(Types.object({\r\n      by: i.by || AnyType,\r\n      group: ListType.forItem(i.getValue || GivenListItem(i)),\r\n    })),\r\n    { list: GivenList, by: i => i.by || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toListMap: ops.setTypes(ListOps.toListMap, \r\n    i => MapType.forItem(\r\n      ListType.forItem(i.getValue || GivenListItem(i)), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  toMap: ops.setTypes(ListOps.toMap,\r\n    i => MapType.forItem(\r\n      i.getValue || GivenListItem(i), \r\n      i.getKey || AnyType\r\n    ),\r\n    { list: GivenList, getKey: i => i.getKey || AnyType },\r\n    { getValue: i => i.getValue || GivenListItem(i) },\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Joins\r\n\r\n  joinInner: ops.setTypes(ListOps.joinInner, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinLeft: ops.setTypes(ListOps.joinLeft, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => ListItem(i.a, AnyType), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinRight: ops.setTypes(ListOps.joinRight, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  joinFull: ops.setTypes(ListOps.joinFull, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), on: BooleanType, join: AnyType },\r\n    { },\r\n    { onA: i => ListItem(i.a, AnyType), onB: i => ListItem(i.b, AnyType), joinA: i => Types.optional(ListItem(i.a, AnyType)), joinB: i => Types.optional(ListItem(i.b, AnyType)) }\r\n  ),\r\n\r\n  joinCross: ops.setTypes(ListOps.joinCross, \r\n    i => ListType.forItem(i.join || AnyType),\r\n    { a: i => RequireList(i.a, ListType), b: i => RequireList(i.b, ListType), join: AnyType },\r\n    { },\r\n    { joinA: i => ListItem(i.a, AnyType), joinB: i => ListItem(i.b, AnyType) }\r\n  ),\r\n\r\n  // Aggregates\r\n\r\n  min: ops.setTypes(ListOps.min,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  max: ops.setTypes(ListOps.max,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  sum: ops.setTypes(ListOps.sum,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  avg: ops.setTypes(ListOps.avg,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  std: ops.setTypes(ListOps.std,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  variance: ops.setTypes(ListOps.variance,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  median: ops.setTypes(ListOps.median,\r\n    Types.optional(NumberType),\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitand: ops.setTypes(ListOps.bitand,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitor: ops.setTypes(ListOps.bitor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  bitxor: ops.setTypes(ListOps.bitxor,\r\n    NumberType,\r\n    { list: GivenList, value: NumberType },\r\n    {},\r\n    GivenListIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ListOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEmpty: ops.setTypes(ListOps.isEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isNotEmpty: ops.setTypes(ListOps.isNotEmpty,\r\n    BooleanType,\r\n    { list: GivenList }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ListOps.isEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ListOps.isNotEqual,\r\n    BooleanType,\r\n    { list: GivenList, test: GivenList, isEqual: BooleanType },\r\n    {},\r\n    GivenListCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(ListOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ListOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ListOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ListOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueList, test: GivenValueList, compare: NumberType },\r\n    {},\r\n    GivenValueListCompareScope\r\n  ),\r\n\r\n  // Casts\r\n  \r\n\r\n  asAny: ops.setTypes(ListOps.asAny, \r\n    AnyType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asBoolean: ops.setTypes(ListOps.asBoolean, \r\n    BooleanType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asColor: ops.setTypes(ListOps.asColor, \r\n    ColorType, \r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asDate: ops.setTypes(ListOps.asDate, \r\n    DateType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asList: ops.setTypes(ListOps.asList, \r\n    GivenValueList,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asMap: ops.setTypes(ListOps.asMap,\r\n    i => MapType.forItem(GivenValueListItem(i)),\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asNumber: ops.setTypes(ListOps.asNumber, \r\n    NumberType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asObject: ops.setTypes(ListOps.asObject,\r\n    ObjectType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asText: ops.setTypes(ListOps.asText, \r\n    TextType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asTuple: ops.setTypes(ListOps.asTuple, \r\n    TupleType,\r\n    { value: GivenValueList }\r\n  ),\r\n\r\n  asSet: ops.setTypes(ListOps.asSet, \r\n    i => SetType.forItem(GivenValueListItem(i)), \r\n    { value: GivenValueList }\r\n  ),\r\n  \r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { MapType } from '../../types/Map';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { MapOps } from '../MapOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { objectValues } from '../../fns';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = MapType.operations;\r\n\r\nconst RequireMap = (map?: Type) => map instanceof MapType ? map : undefined;\r\nconst GivenMap = (i: {map?: Type}) => RequireMap(i.map) || MapType;\r\nconst GivenMapValue = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.value : AnyType;\r\nconst GivenMapValueOptional = (i: {map?: Type}) => Types.optional(GivenMapValue(i));\r\nconst GivenMapKey = (i: {map?: Type}) => RequireMap(i.map) ? i.map.options.key : TextType;\r\nconst GivenMapIterationScope = { map: GivenMap, key: GivenMapKey, value: GivenMapValue };\r\n\r\nconst GivenValueMap = (i: {value?: Type}) => RequireMap(i.value) || MapType;\r\nconst GivenValueMapValue = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.value : AnyType;\r\nconst GivenValueMapKey = (i: {value?: Type}) => RequireMap(i.value) ? i.value.options.key : TextType;\r\nconst GivenValueCompareScope = { key: GivenValueMapKey, value: GivenValueMapValue, test: GivenValueMapValue };\r\n\r\nexport const MapOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(MapOps.create, MapType),\r\n\r\n  createLike: ops.setTypes(MapOps.createLike, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n  ),\r\n\r\n  createFor: ops.setTypes(MapOps.createFor, \r\n    i => MapType.forItem(i.value || AnyType, i.key || TextType),\r\n    { value: i => i.value || AnyType },\r\n    { key: i => i.key || TextType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(MapOps.maybe, \r\n    (i) => Types.maybe(i.value, MapType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  get: ops.setTypes(MapOps.get, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  set: ops.setTypes(MapOps.set, \r\n    GivenMapValueOptional,\r\n    { map: GivenMap, key: GivenMapKey, value: GivenMapValue },\r\n    {},\r\n    { existingValue: GivenMapValue }\r\n  ),\r\n\r\n  has: ops.setTypes(MapOps.has, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  delete: ops.setTypes(MapOps.delete, \r\n    BooleanType,\r\n    { map: GivenMap, key: GivenMapKey }\r\n  ),\r\n\r\n  keys: ops.setTypes(MapOps.keys, \r\n    i => ListType.forItem(GivenMapKey(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  values: ops.setTypes(MapOps.values, \r\n    i => ListType.forItem(GivenMapValue(i)),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  entries: ops.setTypes(MapOps.entries, \r\n    i => Types.object({\r\n      keys: ListType.forItem(GivenMapKey(i)),\r\n      values: ListType.forItem(GivenMapValue(i)),\r\n    }),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  pairs: ops.setTypes(MapOps.pairs, \r\n    i => ListType.forItem(Types.object({\r\n      key: GivenMapKey(i),\r\n      value: GivenMapValue(i)\r\n    })),\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  clear: ops.setTypes(MapOps.clear, \r\n    GivenMap,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  count: ops.setTypes(MapOps.count, \r\n    NumberType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  cmp: ops.setTypes(MapOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType },\r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  copy: ops.setTypes(MapOps.copy, \r\n    GivenMap,\r\n    { map: GivenMap },\r\n    { deepCopy: GivenMapValue, deepCopyKey: GivenMapKey },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(MapOps.map, \r\n    i => MapType.forItem(i.transform || GivenMapValue(i), i.transformKey || GivenMapKey(i)),\r\n    { map: GivenMap },\r\n    { transform: i => i.transform || GivenMapValue(i), transformKey: i => i.transformKey || GivenMapKey(i) },\r\n    GivenMapIterationScope\r\n  ),\r\n\r\n  toPlainObject: ops.setTypes(MapOps.toPlainObject,\r\n    AnyType,\r\n    { map: GivenMap }\r\n  ),\r\n\r\n  fromPlainObject: ops.setTypes(MapOps.fromPlainObject, \r\n    (i) => {\r\n      if (!(i.object instanceof ObjectType)) {\r\n        return MapType;\r\n      }\r\n\r\n      const propTypes = objectValues((i.object as ObjectType).options.props);\r\n      \r\n      return MapType.forItem(Types.mergeMany(propTypes, TextType.baseType));\r\n    },\r\n    { object: i => i.object || ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(MapOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(MapOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(MapOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, isEqual: BooleanType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLess: ops.setTypes(MapOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(MapOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreater: ops.setTypes(MapOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(MapOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueMap, test: GivenValueMap, compare: NumberType }, \r\n    {},\r\n    GivenValueCompareScope\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(MapOps.asAny, AnyType, { value: MapType }),\r\n\r\n  asBoolean: ops.setTypes(MapOps.asBoolean, BooleanType, { value: MapType }),\r\n\r\n  asColor: ops.setTypes(MapOps.asColor, ColorType, { value: MapType }),\r\n\r\n  asDate: ops.setTypes(MapOps.asDate, DateType, { value: MapType }),\r\n\r\n  asList: ops.setTypes(MapOps.asList, i => ListType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n  asMap: ops.setTypes(MapOps.asMap, i => i.value || MapType, { value: MapType }),\r\n\r\n  asNumber: ops.setTypes(MapOps.asNumber, i => NumberType, { value: MapType }),\r\n\r\n  asObject: ops.setTypes(MapOps.asObject, ObjectType, { value: MapType }),\r\n\r\n  asText: ops.setTypes(MapOps.asText, TextType, { value: MapType }),\r\n\r\n  asTuple: ops.setTypes(MapOps.asTuple, i => TupleType.forItem([i.value || MapType]), { value: MapType }),\r\n\r\n  asSet: ops.setTypes(MapOps.asSet, i => SetType.forItem(GivenValueMapValue(i)), { value: MapType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { DateType } from '../../types/Date';\r\n\r\nimport { NumberOps } from '../NumberOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { EnumType } from '../../types/Enum';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = NumberType.operations;\r\n\r\n\r\nconst BitMethod = new EnumType({\r\n  key: TextType.baseType.newInstance(), \r\n  value: TextType.baseType.newInstance(),\r\n  constants: new Map([\r\n    ['has the bits', 'contain'],              // value & test === test\r\n    ['does not have the bits', 'notcontain'], // value & test !== test\r\n    ['has some of the bits', 'overlap'],      // value & test !== 0\r\n    ['has none of the bits', 'none'],         // value & test === 0\r\n    ['has the same bits', 'equal'],           // value === test\r\n    ['does not have the same bits', 'not'],   // value !== test\r\n    ['has all bits in', 'subset'],            // test & value === value\r\n  ])\r\n});\r\n\r\n\r\nexport const NumberOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(NumberOps.create, NumberType ),\r\n\r\n  pi: ops.setTypes(NumberOps.pi, NumberType ),\r\n\r\n  pi2: ops.setTypes(NumberOps.pi2, NumberType ),\r\n\r\n  piHalf: ops.setTypes(NumberOps.piHalf, NumberType ),\r\n\r\n  e: ops.setTypes(NumberOps.e, NumberType ),\r\n\r\n  sqrt2: ops.setTypes(NumberOps.sqrt2, NumberType ),\r\n\r\n  sqrt12: ops.setTypes(NumberOps.sqrt12, NumberType ),\r\n\r\n  ln2: ops.setTypes(NumberOps.ln2, NumberType ),\r\n\r\n  ln10: ops.setTypes(NumberOps.ln10, NumberType ),\r\n\r\n  log2e: ops.setTypes(NumberOps.log2e, NumberType ),\r\n\r\n  log10e: ops.setTypes(NumberOps.log10e, NumberType ),\r\n\r\n  // Binary Operations\r\n\r\n  add: ops.setTypes(NumberOps.add, NumberType, { value: NumberType, addend: NumberType }),\r\n\r\n  sub: ops.setTypes(NumberOps.sub, NumberType, { value: NumberType, subtrahend: NumberType }),\r\n\r\n  mul: ops.setTypes(NumberOps.mul, NumberType, { value: NumberType, multiplier: NumberType }),\r\n\r\n  div: ops.setTypes(NumberOps.div, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  mod: ops.setTypes(NumberOps.mod, NumberType, { value: NumberType, divisor: NumberType }),\r\n\r\n  min: ops.setTypes(NumberOps.min, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  max: ops.setTypes(NumberOps.max, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  pow: ops.setTypes(NumberOps.pow, NumberType, { value: NumberType, exponent: NumberType }),\r\n  \r\n  atan2: ops.setTypes(NumberOps.atan2, NumberType, { x: NumberType, y: NumberType }),\r\n  \r\n  hypot: ops.setTypes(NumberOps.hypot, NumberType, { a: NumberType, b: NumberType }),\r\n  \r\n  choose: ops.setTypes(NumberOps.choose, NumberType, { n: NumberType, k: NumberType }),\r\n  \r\n  gcd: ops.setTypes(NumberOps.gcd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitAnd: ops.setTypes(NumberOps.bitAnd, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitOr: ops.setTypes(NumberOps.bitOr, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  bitXor: ops.setTypes(NumberOps.bitXor, NumberType, { a: NumberType, b: NumberType }),\r\n\r\n  cmp: ops.setTypes(NumberOps.cmp, NumberType, { value: NumberType, test: NumberType }),\r\n\r\n  // Unary Operations\r\n\r\n  maybe: ops.setTypes(NumberOps.maybe, \r\n    (i) => Types.maybe(i.value, NumberType),\r\n    { value: AnyType } \r\n  ),\r\n  \r\n  sqrt: ops.setTypes(NumberOps.sqrt, NumberType, { value: NumberType }),\r\n\r\n  sq: ops.setTypes(NumberOps.sq, NumberType, { value: NumberType }),\r\n  \r\n  cbrt: ops.setTypes(NumberOps.cbrt, NumberType, { value: NumberType }),\r\n  \r\n  floor: ops.setTypes(NumberOps.floor, NumberType, { value: NumberType }),\r\n  \r\n  ceil: ops.setTypes(NumberOps.ceil, NumberType, { value: NumberType }),\r\n  \r\n  up: ops.setTypes(NumberOps.up, NumberType, { value: NumberType }),\r\n  \r\n  down: ops.setTypes(NumberOps.down, NumberType, { value: NumberType }),\r\n  \r\n  round: ops.setTypes(NumberOps.round, NumberType, { value: NumberType }),\r\n  \r\n  abs: ops.setTypes(NumberOps.abs, NumberType, { value: NumberType }),\r\n  \r\n  neg: ops.setTypes(NumberOps.neg, NumberType, { value: NumberType }),\r\n  \r\n  sign: ops.setTypes(NumberOps.sign, NumberType, { value: NumberType }),\r\n  \r\n  log: ops.setTypes(NumberOps.log, NumberType, { value: NumberType }),\r\n  \r\n  sin: ops.setTypes(NumberOps.sin, NumberType, { value: NumberType }),\r\n  \r\n  cos: ops.setTypes(NumberOps.cos, NumberType, { value: NumberType }),\r\n  \r\n  tan: ops.setTypes(NumberOps.tan, NumberType, { value: NumberType }),\r\n  \r\n  sinh: ops.setTypes(NumberOps.sinh, NumberType, { value: NumberType }),\r\n  \r\n  cosh: ops.setTypes(NumberOps.cosh, NumberType, { value: NumberType }),\r\n\r\n  asin: ops.setTypes(NumberOps.asin, NumberType, { value: NumberType }),\r\n  \r\n  acos: ops.setTypes(NumberOps.acos, NumberType, { value: NumberType }),\r\n  \r\n  atan: ops.setTypes(NumberOps.atan, NumberType, { value: NumberType }),\r\n  \r\n  factorial: ops.setTypes(NumberOps.factorial, NumberType, { value: NumberType }),\r\n\r\n  bitFlip: ops.setTypes(NumberOps.bitFlip, NumberType, { value: NumberType }),\r\n\r\n  // Other\r\n\r\n  clamp: ops.setTypes(NumberOps.clamp, NumberType, { value: NumberType, min: NumberType, max: NumberType }),\r\n\r\n  triangleHeight: ops.setTypes(NumberOps.triangleHeight, NumberType, { base: NumberType, side1: NumberType, side2: NumberType }),\r\n\r\n  lerp: ops.setTypes(NumberOps.lerp, NumberType, { delta: NumberType, start: NumberType, end: NumberType }),\r\n\r\n  // Generators\r\n\r\n  rnd: ops.setTypes(NumberOps.rnd, NumberType, {}, { min: NumberType, max: NumberType, whole: BooleanType, includeMax: BooleanType }),\r\n\r\n  // Formatters\r\n\r\n  toBaseText: ops.setTypes(NumberOps.toBaseText, TextType, { value: NumberType }, { base: NumberType, minDigits: NumberType }),\r\n\r\n  toText: ops.setTypes(NumberOps.toText, TextType, { value: NumberType }, { prefix: TextType, suffix: TextType, minPlaces: NumberType, maxPlaces: NumberType, useExponent: BooleanType, thousandSeparator: TextType }),\r\n\r\n  toPercent: ops.setTypes(NumberOps.toPercent, TextType, { value: NumberType }, { minPlaces: NumberType, maxPlaces: NumberType, thousandSeparator: TextType }),\r\n\r\n  fromPercent: ops.setTypes(NumberOps.fromPercent, Types.optional(NumberType), { value: TextType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(NumberOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isZero: ops.setTypes(NumberOps.isZero, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isEqual: ops.setTypes(NumberOps.isEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isNotEqual: ops.setTypes(NumberOps.isNotEqual, BooleanType, { value: NumberType, test: NumberType }, { epsilon: NumberType }),\r\n\r\n  isLess: ops.setTypes(NumberOps.isLess, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isLessOrEqual: ops.setTypes(NumberOps.isLessOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreater: ops.setTypes(NumberOps.isGreater, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(NumberOps.isGreaterOrEqual, BooleanType, { value: NumberType, test: NumberType }),\r\n\r\n  isBetween: ops.setTypes(NumberOps.isBetween, BooleanType, { value: NumberType, min: NumberType, max: NumberType }, { minInclusive: BooleanType, maxInclusive: BooleanType }),\r\n\r\n  isWhole: ops.setTypes(NumberOps.isWhole, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isDecimal: ops.setTypes(NumberOps.isDecimal, BooleanType, { value: NumberType }, { epsilon: NumberType }),\r\n\r\n  isPositive: ops.setTypes(NumberOps.isPositive, BooleanType, { value: NumberType }),\r\n\r\n  isNegative: ops.setTypes(NumberOps.isNegative, BooleanType, { value: NumberType }),\r\n\r\n  isDivisible: ops.setTypes(NumberOps.isDivisible, BooleanType, { value: NumberType, by: NumberType }, { epsilon: NumberType }),\r\n\r\n  bitCompare: ops.setTypes(NumberOps.bitCompare, \r\n    BooleanType,\r\n    { value: NumberType, method: BitMethod, test: NumberType },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(NumberOps.asAny, AnyType, { value: NumberType }),\r\n\r\n  asBoolean: ops.setTypes(NumberOps.asBoolean, BooleanType, { value: NumberType }),\r\n\r\n  asColor: ops.setTypes(NumberOps.asColor, ColorType, { value: NumberType }),\r\n\r\n  asDate: ops.setTypes(NumberOps.asDate, DateType, { value: NumberType }),\r\n\r\n  asList: ops.setTypes(NumberOps.asList, i => ListType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asMap: ops.setTypes(NumberOps.asMap, i => MapType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n  asNumber: ops.setTypes(NumberOps.asNumber, i => i.value || NumberType, { value: NumberType }),\r\n\r\n  asObject: ops.setTypes(NumberOps.asObject, ObjectType, { value: NumberType }),\r\n\r\n  asText: ops.setTypes(NumberOps.asText, TextType, { value: NumberType }),\r\n\r\n  asTuple: ops.setTypes(NumberOps.asTuple, i => TupleType.forItem([i.value || NumberType]), { value: NumberType }),\r\n\r\n  asSet: ops.setTypes(NumberOps.asSet, i => SetType.forItem(i.value || NumberType), { value: NumberType }),\r\n\r\n};\r\n","\r\nimport { Type, TypeMap } from '../../Type';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { AnyType } from '../../types/Any';\r\n\r\nimport { ObjectOps } from '../ObjectOps';\r\nimport { DateType } from '../../types/Date';\r\nimport { ListType } from '../../types/List';\r\nimport { MapType } from '../../types/Map';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { OptionalType } from '../../types/Optional';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { EntityType } from '../../types/Entity';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = ObjectType.operations;\r\nconst GivenObject = (i: {object?: Type}) => i.object || ObjectType;\r\n\r\nexport const ObjectOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(ObjectOps.create, \r\n    GivenObject\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(ObjectOps.maybe, \r\n    (i) => Types.maybe(i.value, ObjectType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  has: ops.setTypes(ObjectOps.has, \r\n    BooleanType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  get: ops.setTypes(ObjectOps.get, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  set: ops.setTypes(ObjectOps.set, \r\n    GivenObject,\r\n    { object: GivenObject, key: TextType, value: AnyType },\r\n    {},\r\n    { existingValue: AnyType }\r\n  ),\r\n\r\n  delete: ops.setTypes(ObjectOps.delete, \r\n    AnyType,\r\n    { object: GivenObject, key: TextType }\r\n  ),\r\n\r\n  cmp: ops.setTypes(ObjectOps.cmp, \r\n    NumberType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  copy: ops.setTypes(ObjectOps.copy, \r\n    GivenObject,\r\n    { object: GivenObject }\r\n  ),\r\n\r\n  merge: ops.setTypes(ObjectOps.merge, \r\n    (i) => {\r\n      const props: TypeMap = {};\r\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\r\n\r\n      for (const param of params) \r\n      {\r\n        let paramType = i[param];\r\n\r\n        if (paramType instanceof EntityType)\r\n        {\r\n          paramType = paramType.getType();\r\n        }\r\n\r\n        if (paramType instanceof ObjectType) \r\n        {\r\n          const paramProps = paramType.options.props;\r\n\r\n          for (const prop in paramProps) \r\n          {\r\n            const paramProp = paramProps[prop];\r\n\r\n            if (prop in props && paramProp instanceof OptionalType) \r\n            {\r\n              props[prop] = Types.mergeMany([paramProp, props[prop]]);\r\n            } \r\n            else \r\n            {\r\n              props[prop] = paramProp;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return new ObjectType({ props });\r\n    },\r\n    { a: ObjectType, b: ObjectType },\r\n    { c: ObjectType, d: ObjectType, e: ObjectType }\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(ObjectOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(ObjectOps.isEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(ObjectOps.isNotEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLess: ops.setTypes(ObjectOps.isLess, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(ObjectOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreater: ops.setTypes(ObjectOps.isGreater, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(ObjectOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: ObjectType, test: ObjectType }\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(ObjectOps.asAny, AnyType, { value: ObjectType }),\r\n\r\n  asBoolean: ops.setTypes(ObjectOps.asBoolean, BooleanType, { value: ObjectType }),\r\n\r\n  asColor: ops.setTypes(ObjectOps.asColor, ColorType, { value: ObjectType }),\r\n\r\n  asDate: ops.setTypes(ObjectOps.asDate, DateType, { value: ObjectType }),\r\n\r\n  asList: ops.setTypes(ObjectOps.asList, i => ListType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asMap: ops.setTypes(ObjectOps.asMap, i => MapType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n  asNumber: ops.setTypes(ObjectOps.asNumber, NumberType, { value: ObjectType }),\r\n\r\n  asObject: ops.setTypes(ObjectOps.asObject, i => i.value || ObjectType, { value: ObjectType }),\r\n\r\n  asText: ops.setTypes(ObjectOps.asText, TextType, { value: ObjectType }),\r\n\r\n  asTuple: ops.setTypes(ObjectOps.asTuple, i => TupleType.forItem([i.value || ObjectType]), { value: ObjectType }),\r\n\r\n  asSet: ops.setTypes(ObjectOps.asSet, i => SetType.forItem(i.value || ObjectType), { value: ObjectType }),\r\n\r\n};\r\n","\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { SetOps } from '../SetOps';\r\nimport { ListType } from '../../types/List';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { DateType } from '../../types/Date';\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { ColorType } from '../../types/Color';\r\nimport { MapType } from '../../types/Map';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = SetType.operations;\r\n\r\nconst RequireSet = (set?: Type) => set instanceof SetType ? set : undefined;\r\nconst GivenSet = (i: {set?: Type}) => RequireSet(i.set) || SetType;\r\nconst GivenSetValue = (i: {set?: Type}) => RequireSet(i.set) ? i.set.options.value : AnyType;\r\nconst GivenSetIterationScope = { set: GivenSet, value: GivenSetValue };\r\n\r\nconst GivenValueSet = (i: {value?: Type}) => RequireSet(i.value) || SetType;\r\nconst GivenValueSetValue = (i: {value?: Type}) => RequireSet(i.value) ? i.value.options.value : AnyType;\r\n\r\nexport const SetOpsTypes = \r\n{\r\n\r\n  // Static\r\n\r\n  create: ops.setTypes(SetOps.create, SetType),\r\n\r\n  createLike: ops.setTypes(SetOps.createLike, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n  ),\r\n\r\n  createFor: ops.setTypes(SetOps.createFor, \r\n    i => ListType.forItem(i.value || AnyType),\r\n    { value: i => i.value || AnyType }\r\n  ),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(SetOps.maybe, \r\n    (i) => Types.maybe(i.value, SetType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  add: ops.setTypes(SetOps.add, \r\n    GivenSet,\r\n    { set: GivenSet, value: GivenSetValue },\r\n  ),\r\n\r\n  has: ops.setTypes(SetOps.has, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  delete: ops.setTypes(SetOps.delete, \r\n    BooleanType,\r\n    { set: GivenSet, value: GivenSetValue }\r\n  ),\r\n\r\n  values: ops.setTypes(SetOps.values, \r\n    i => ListType.forItem(GivenSetValue(i)),\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  clear: ops.setTypes(SetOps.clear, \r\n    GivenSet,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  count: ops.setTypes(SetOps.count, \r\n    NumberType,\r\n    { set: GivenSet }\r\n  ),\r\n\r\n  cmp: ops.setTypes(SetOps.cmp, \r\n    NumberType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  copy: ops.setTypes(SetOps.copy, \r\n    GivenSet,\r\n    { set: GivenSet },\r\n    { deepCopy: GivenSetValue },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  map: ops.setTypes(SetOps.map, \r\n    i => SetType.forItem(i.transform || GivenSetValue(i)),\r\n    { set: GivenSet },\r\n    { transform: i => i.transform || GivenSetValue(i) },\r\n    GivenSetIterationScope\r\n  ),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(SetOps.isValid, \r\n    BooleanType, \r\n    { value: AnyType }\r\n  ),\r\n\r\n  isEqual: ops.setTypes(SetOps.isEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isNotEqual: ops.setTypes(SetOps.isNotEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet }, \r\n  ),\r\n\r\n  isLess: ops.setTypes(SetOps.isLess, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isLessOrEqual: ops.setTypes(SetOps.isLessOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreater: ops.setTypes(SetOps.isGreater, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  isGreaterOrEqual: ops.setTypes(SetOps.isGreaterOrEqual, \r\n    BooleanType,\r\n    { value: GivenValueSet, test: GivenValueSet },\r\n  ),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(SetOps.asAny, AnyType, { value: SetType }),\r\n\r\n  asBoolean: ops.setTypes(SetOps.asBoolean, BooleanType, { value: SetType }),\r\n\r\n  asColor: ops.setTypes(SetOps.asColor, ColorType, { value: SetType }),\r\n\r\n  asDate: ops.setTypes(SetOps.asDate, DateType, { value: SetType }),\r\n\r\n  asList: ops.setTypes(SetOps.asList, i => ListType.forItem(GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asMap: ops.setTypes(SetOps.asMap, i => MapType.forItem(GivenValueSetValue(i), GivenValueSetValue(i)), { value: SetType }),\r\n\r\n  asNumber: ops.setTypes(SetOps.asNumber, i => NumberType, { value: SetType }),\r\n\r\n  asObject: ops.setTypes(SetOps.asObject, ObjectType, { value: SetType }),\r\n\r\n  asText: ops.setTypes(SetOps.asText, TextType, { value: SetType }),\r\n\r\n  asTuple: ops.setTypes(SetOps.asTuple, i => TupleType.forItem([i.value || SetType]), { value: SetType }),\r\n\r\n  asSet: ops.setTypes(SetOps.asSet, i => i.value || SetType, { value: SetType }),\r\n\r\n};\r\n","\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { TextType } from '../../types/Text';\r\nimport { ListType } from '../../types/List';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { TupleType } from '../../types/Tuple';\r\n\r\nimport { TextOps } from '../TextOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\n\r\n\r\nconst ops = TextType.operations;\r\nconst TextListType = ListType.forItem(TextType);\r\nconst RegexMatchType = Types.object({\r\n  index: NumberType,\r\n  lastIndex: NumberType,\r\n  input: TextType,\r\n  groups: TextListType,\r\n});\r\n\r\n\r\nexport const TextOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TextOps.create, TextType),\r\n\r\n  uuid: ops.setTypes(TextOps.uuid, TextType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TextOps.maybe, \r\n    (i) => Types.maybe(i.value, TextType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  append: ops.setTypes(TextOps.append, TextType, { value: TextType, append: TextType }),\r\n\r\n  prepend: ops.setTypes(TextOps.prepend, TextType, { value: TextType, prepend: TextType }),\r\n\r\n  lower: ops.setTypes(TextOps.lower, TextType, { value: TextType }),\r\n\r\n  upper: ops.setTypes(TextOps.upper, TextType, { value: TextType }),\r\n\r\n  char: ops.setTypes(TextOps.char, TextType, { value: TextType, index: NumberType }, { outside: TextType }),\r\n\r\n  replace: ops.setTypes(TextOps.replace, TextType, { value: TextType, find: TextType, replace: TextType }),\r\n\r\n  repeat: ops.setTypes(TextOps.repeat, TextType, { value: TextType, times: NumberType }),\r\n\r\n  split: ops.setTypes(TextOps.split, TextListType, { value: TextType, by: TextType }, { limit: NumberType }),\r\n\r\n  chars: ops.setTypes(TextOps.chars, TextListType, { value: TextType }),\r\n\r\n  sub: ops.setTypes(TextOps.sub, TextType, { value: TextType }, { start: NumberType, end: NumberType }),\r\n\r\n  indexOf: ops.setTypes(TextOps.indexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  lastIndexOf: ops.setTypes(TextOps.lastIndexOf, NumberType, { value: TextType, search: TextType }, { start: NumberType }),\r\n\r\n  trim: ops.setTypes(TextOps.trim, TextType, { value: TextType }, { start: BooleanType, end: BooleanType }),\r\n\r\n  startsWith: ops.setTypes(TextOps.startsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  endsWith: ops.setTypes(TextOps.endsWith, BooleanType, { value: TextType, test: TextType }),\r\n\r\n  soundex: ops.setTypes(TextOps.soundex, TextType, { value: TextType }, { max: NumberType, min: NumberType }),\r\n\r\n  metaphone: ops.setTypes(TextOps.metaphone, TextType, { value: TextType }),\r\n\r\n  distance: ops.setTypes(TextOps.distance, NumberType, { value: TextType, test: TextType }),\r\n\r\n  length: ops.setTypes(TextOps.length, NumberType, { value: TextType }),\r\n\r\n  compare: ops.setTypes(TextOps.compare, NumberType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  like: ops.setTypes(TextOps.like, BooleanType, { value: TextType, pattern: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  pad: ops.setTypes(TextOps.pad, TextType, { value: TextType, padding: TextType, min: NumberType }, { max: NumberType, append: BooleanType }),\r\n\r\n  regexTest: ops.setTypes(TextOps.regexTest, BooleanType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexSplit: ops.setTypes(TextOps.regexSplit, TextListType, { value: TextType, regex: TextType }, { limit: NumberType, ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatch: ops.setTypes(TextOps.regexMatch, TextListType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  regexMatchAll: ops.setTypes(TextOps.regexMatchAll, \r\n    ListType.forItem(RegexMatchType), \r\n    { value: TextType, regex: TextType }, \r\n    { ignoreCase: BooleanType, multiline: BooleanType }\r\n  ),\r\n\r\n  regexReplace: ops.setTypes(TextOps.regexReplace, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replacement: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n  ),\r\n\r\n  regexReplaceDynamic: ops.setTypes(TextOps.regexReplaceDynamic, \r\n    TextType, \r\n    { value: TextType, regex: TextType, replace: TextType },\r\n    { all: BooleanType, ignoreCase: BooleanType, multiline: BooleanType },\r\n    { match: RegexMatchType }\r\n  ),\r\n\r\n  regexIndexOf: ops.setTypes(TextOps.regexIndexOf, NumberType, { value: TextType, regex: TextType }, { ignoreCase: BooleanType, multiline: BooleanType }),\r\n\r\n  // Other\r\n\r\n  // Generators\r\n\r\n  // Formatters\r\n\r\n  base64: ops.setTypes(TextOps.base64, TextType, { value: TextType }),\r\n\r\n  unbase64: ops.setTypes(TextOps.unbase64, TextType, { value: TextType }),\r\n\r\n  encodeURI: ops.setTypes(TextOps.encodeURI, TextType, { value: TextType }),\r\n\r\n  decodeURI: ops.setTypes(TextOps.decodeURI, TextType, { value: TextType }),\r\n\r\n  encodeURIComponent: ops.setTypes(TextOps.encodeURIComponent, TextType, { value: TextType }),\r\n\r\n  decodeURIComponent: ops.setTypes(TextOps.decodeURIComponent, TextType, { value: TextType }),\r\n\r\n  md5: ops.setTypes(TextOps.md5, TextType, { value: TextType }),\r\n\r\n  encrypt: ops.setTypes(TextOps.encrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  decrypt: ops.setTypes(TextOps.decrypt, TextType, { value: TextType, secret: TextType }),\r\n\r\n  toNumber: ops.setTypes(TextOps.toNumber, NumberType, { value: TextType }, { invalidValue: NumberType }),\r\n  \r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TextOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEmpty: ops.setTypes(TextOps.isEmpty, BooleanType, { value: TextType }),\r\n\r\n  isNotEmpty: ops.setTypes(TextOps.isNotEmpty, BooleanType, { value: TextType }),\r\n\r\n  isEqual: ops.setTypes(TextOps.isEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isNotEqual: ops.setTypes(TextOps.isNotEqual, BooleanType, { a: TextType, b: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLess: ops.setTypes(TextOps.isLess, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TextOps.isLessOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreater: ops.setTypes(TextOps.isGreater, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TextOps.isGreaterOrEqual, BooleanType, { value: TextType, test: TextType }, { ignoreCase: BooleanType }),\r\n\r\n  isLower: ops.setTypes(TextOps.isLower, BooleanType, { value: TextType }),\r\n\r\n  isUpper: ops.setTypes(TextOps.isUpper, BooleanType, { value: TextType }),\r\n\r\n  isUuid: ops.setTypes(TextOps.isUuid, BooleanType, { value: TextType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TextOps.asAny, AnyType, { value: TextType }),\r\n\r\n  asBoolean: ops.setTypes(TextOps.asBoolean, BooleanType, { value: TextType }),\r\n\r\n  asColor: ops.setTypes(TextOps.asColor, ColorType, { value: TextType }),\r\n\r\n  asDate: ops.setTypes(TextOps.asDate, DateType, { value: TextType }),\r\n\r\n  asList: ops.setTypes(TextOps.asList, i => ListType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asMap: ops.setTypes(TextOps.asMap, i => MapType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n  asNumber: ops.setTypes(TextOps.asNumber, NumberType, { value: TextType }),\r\n\r\n  asObject: ops.setTypes(TextOps.asObject, ObjectType, { value: TextType }),\r\n\r\n  asText: ops.setTypes(TextOps.asText, i => i.value || TextType, { value: TextType }),\r\n\r\n  asTuple: ops.setTypes(TextOps.asTuple, i => TupleType.forItem([i.value || TextType]), { value: TextType }),\r\n\r\n  asSet: ops.setTypes(TextOps.asSet, i => SetType.forItem(i.value || TextType), { value: TextType }),\r\n\r\n};\r\n","\r\nimport { TupleType } from '../../types/Tuple';\r\nimport { NumberType } from '../../types/Number';\r\nimport { BooleanType } from '../../types/Boolean';\r\nimport { AnyType } from '../../types/Any';\r\nimport { DateType } from '../../types/Date';\r\nimport { MapType } from '../../types/Map';\r\nimport { ObjectType } from '../../types/Object';\r\nimport { ListType } from '../../types/List';\r\nimport { TextType } from '../../types/Text';\r\n\r\nimport { TupleOps } from '../TupleOps';\r\nimport { ColorType } from '../../types/Color';\r\nimport { Type } from '../../Type';\r\nimport { SetType } from '../../types/Set';\r\nimport { Types } from '../../Types';\r\nimport { NullType } from '../../types/Null';\r\n\r\n\r\nconst ops = TupleType.operations;\r\n\r\n\r\nexport const TupleOpsTypes = \r\n{\r\n\r\n  // Statics\r\n\r\n  create: ops.setTypes(TupleOps.create, TupleType),\r\n\r\n  // Operations\r\n\r\n  maybe: ops.setTypes(TupleOps.maybe, \r\n    (i) => Types.maybe(i.value, TupleType),\r\n    { value: AnyType } \r\n  ),\r\n\r\n  cmp: ops.setTypes(TupleOps.cmp, NumberType, { value: TupleType, test: TupleType }),\r\n\r\n  copy: ops.setTypes(TupleOps.copy, TupleType, { value: TupleType }),\r\n\r\n  build: ops.setTypes(TupleOps.build, \r\n    (i) => {\r\n      const params: Array<keyof typeof i> = ['a', 'b', 'c', 'd', 'e'];\r\n      let elements: Type[] = [];\r\n      let list = false;\r\n      \r\n      for (const param of params) \r\n      {\r\n        const paramType = i[param];\r\n\r\n        if (paramType) \r\n        {\r\n          if (paramType instanceof TupleType) \r\n          {\r\n            elements = elements.concat(paramType.options);\r\n          }\r\n          else if (paramType instanceof ListType)\r\n          {\r\n            list = true;\r\n            elements.push(paramType.options.item);\r\n          }\r\n          else \r\n          {\r\n            elements.push(paramType);\r\n          }\r\n        }\r\n      }\r\n\r\n      return list\r\n        ? ListType.forItem(Types.mergeMany(elements, NullType.baseType))\r\n        : new TupleType(elements);\r\n    },\r\n    { a: AnyType, b: AnyType },\r\n    { c: AnyType, d: AnyType, e: AnyType }\r\n  ),\r\n\r\n  get: ops.setTypes(TupleOps.get, AnyType, { value: TupleType, index: NumberType }),\r\n\r\n  set: ops.setTypes(TupleOps.set, AnyType, { value: TupleType, index: NumberType, element: AnyType }),\r\n\r\n  // Comparisons\r\n\r\n  isValid: ops.setTypes(TupleOps.isValid, BooleanType, { value: AnyType }),\r\n\r\n  isEqual: ops.setTypes(TupleOps.isEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isNotEqual: ops.setTypes(TupleOps.isNotEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLess: ops.setTypes(TupleOps.isLess, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isLessOrEqual: ops.setTypes(TupleOps.isLessOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreater: ops.setTypes(TupleOps.isGreater, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  isGreaterOrEqual: ops.setTypes(TupleOps.isGreaterOrEqual, BooleanType, { value: TupleType, test: TupleType }),\r\n\r\n  // Casts\r\n\r\n  asAny: ops.setTypes(TupleOps.asAny, AnyType, { value: TupleType }),\r\n\r\n  asBoolean: ops.setTypes(TupleOps.asBoolean, BooleanType, { value: TupleType }),\r\n\r\n  asColor: ops.setTypes(TupleOps.asColor, ColorType, { value: TupleType }),\r\n\r\n  asDate: ops.setTypes(TupleOps.asDate, DateType, { value: TupleType }),\r\n\r\n  asList: ops.setTypes(TupleOps.asList, i => ListType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asMap: ops.setTypes(TupleOps.asMap, i => MapType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n  asNumber: ops.setTypes(TupleOps.asNumber, NumberType, { value: TupleType }),\r\n\r\n  asObject: ops.setTypes(TupleOps.asObject, ObjectType, { value: TupleType }),\r\n\r\n  asText: ops.setTypes(TupleOps.asText, TextType, { value: TupleType }),\r\n\r\n  asTuple: ops.setTypes(TupleOps.asTuple, i => i.value || TupleType, { value: TupleType }),\r\n\r\n  asSet: ops.setTypes(TupleOps.asSet, i => SetType.forItem(i.value || TupleType), { value: TupleType }),\r\n\r\n};\r\n","import { isString } from '../fns';\r\n\r\n\r\nexport type Formatter<T> = (item: T) => string;\r\n\r\nexport interface FormatterMap<T> \r\n{\r\n  [key: string]: Formatter<T>;\r\n}\r\n\r\nexport interface FormatSection<T>\r\n{\r\n  size: number,\r\n  formats: FormatterMap<T>\r\n}\r\n\r\nexport interface FormatEscapes\r\n{\r\n  [first: string]: {\r\n    start: string;\r\n    startEscape: string;\r\n    end: string;\r\n    endEscape: string;\r\n  }\r\n}\r\n\r\nexport class Format<T>\r\n{\r\n\r\n  private cached: FormatterMap<T> = {};\r\n\r\n  private sections: FormatSection<T>[] = [];\r\n\r\n  private escapes: FormatEscapes;\r\n\r\n  public constructor(formats: FormatterMap<T>, escapes: FormatEscapes = {})\r\n  {\r\n    this.add(formats);\r\n    this.escapes = escapes;\r\n  }\r\n\r\n  public add(map: FormatterMap<T>): this\r\n  public add(key: string, formatter: Formatter<T>): this\r\n  public add(keyOrMap: string | FormatterMap<T>, formatter?: Formatter<T>): this\r\n  {\r\n    if (isString(keyOrMap))\r\n    {\r\n      this.getSection(keyOrMap.length).formats[keyOrMap] = formatter;\r\n    }\r\n    else\r\n    {\r\n      for (const key in keyOrMap)\r\n      {\r\n        this.getSection(key.length).formats[key] = keyOrMap[key];\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public getSection(size: number): FormatSection<T>\r\n  {\r\n    const guess = this.sections.length - size;\r\n    const guessSection = this.sections[guess];\r\n\r\n    if (guessSection && guessSection.size === size)\r\n    {\r\n      return guessSection;\r\n    }\r\n\r\n    for (const section of this.sections)\r\n    {\r\n      if (section.size === size)\r\n      {\r\n        return section;\r\n      }\r\n    }\r\n\r\n    const newSection = { size, formats: {} };\r\n\r\n    this.sections.push(newSection);\r\n    this.sortBySize();\r\n\r\n    return newSection;\r\n  }\r\n\r\n  private sortBySize()\r\n  {\r\n    this.sections.sort((a, b) => b.size - a.size);\r\n  }\r\n\r\n  private getEscaped (x: string, i: number): false | [string, number]\r\n  {\r\n    const c = x.charAt(i);\r\n    const escaped = this.escapes[c];\r\n\r\n    if (!escaped)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { start, end, startEscape, endEscape } = escaped;\r\n\r\n    const possibleStart = x.substring(i, i + start.length);\r\n\r\n    if (possibleStart !== start)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const possibleEscapeIndex = i - startEscape.indexOf(start);\r\n    const possibleEscape = x.substring(possibleEscapeIndex, possibleEscapeIndex + startEscape.length);\r\n\r\n    if (possibleEscape === startEscape)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    i += start.length;\r\n\r\n    const endOffset = endEscape.indexOf(end);\r\n    let last = x.indexOf(end, i);\r\n    let content: string = x.substring(i, last);\r\n\r\n    i = last - endOffset;\r\n\r\n    while (last !== -1 && x.substring(i, i + endEscape.length) === endEscape)\r\n    {\r\n      content = content.substring(0, content.length - endOffset);\r\n      content += end;\r\n      i += endEscape.length;\r\n      last = x.indexOf(end, i);\r\n      content += x.substring(i, last);\r\n      i = last - endOffset;\r\n    }\r\n\r\n    if (last === -1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return [content, last + end.length];\r\n  }\r\n\r\n  public getFormatter (format: string, cache: boolean = false): Formatter<T>\r\n  {\r\n    if (format in this.cached)\r\n    {\r\n      return this.cached[format];\r\n    }\r\n\r\n    const sections = this.sections;\r\n    const formats: Formatter<T>[] = [];\r\n    let constant: string = '';\r\n\r\n    for (let i = 0; i < format.length; i++)\r\n    {\r\n      const escaped = this.getEscaped(format, i);\r\n\r\n      if (escaped !== false)\r\n      {\r\n        const [ content, end ] = escaped;\r\n\r\n        constant += content;\r\n        i = end - 1;\r\n\r\n        continue;\r\n      }\r\n\r\n      let handled: boolean = false;\r\n\r\n      for (let k = 0; k < sections.length && !handled; k++)\r\n      {\r\n        const section = sections[ k ];\r\n        const part: string = format.substring( i, i + section.size );\r\n\r\n        if (part.length === section.size)\r\n        {\r\n          const formatter = section.formats[ part ];\r\n\r\n          if (formatter)\r\n          {\r\n            formats.push(formatter);\r\n            i += section.size - 1;\r\n            handled = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (handled)\r\n      {\r\n        if (constant)\r\n        {\r\n          const copy = constant;\r\n\r\n          formats.splice(formats.length - 1, 0, () => copy);\r\n          constant = '';\r\n        }\r\n      }\r\n      else\r\n      {\r\n        constant += format.charAt(i);\r\n      }\r\n    }\r\n\r\n    if (constant)\r\n    {\r\n      formats.push(() => constant);\r\n    }\r\n\r\n    const finalFormatter = (item: T) => \r\n    {\r\n      let formatted: string = '';\r\n\r\n      for (const formatter of formats)\r\n      {\r\n        formatted += formatter(item);\r\n      }\r\n\r\n      return formatted;\r\n    };\r\n\r\n    if (cache)\r\n    {\r\n      this.cached[format] = finalFormatter\r\n    }\r\n\r\n    return finalFormatter;\r\n  }\r\n\r\n  public format (format: string, item: T, cache: boolean = false): string\r\n  {\r\n    return this.getFormatter(format, cache)(item);\r\n  }\r\n\r\n}","\r\nimport { Format } from '../Format';\r\nimport { LocaleOptions } from '../../Locale';\r\nimport { padNumber } from '../../fns';\r\nimport { getQuarter, getDayOfYear, getDayOfWeek, getWeekOfYear, getWeekOfYearISO, getDateOffset } from './DateFunctions';\r\n\r\n\r\n// tslint:disable: no-magic-numbers\r\n\r\n\r\nexport const DateFormat = new Format<[Date, LocaleOptions]>({\r\n  M:          ([day]) => (day.getMonth() + 1) + '',\r\n  Mo:         ([day, locale]) => locale.suffix(day.getMonth() + 1),\r\n  MM:         ([day]) => padNumber(day.getMonth() + 1, 2),\r\n  MMm:        ([day, locale]) => locale.months[3][day.getMonth()],\r\n  MMM:        ([day, locale]) => locale.months[2][day.getMonth()],\r\n  MMMm:       ([day, locale]) => locale.months[1][day.getMonth()],\r\n  MMMM:       ([day, locale]) => locale.months[0][day.getMonth()],\r\n  Q:          ([day]) => (getQuarter(day) + 1) + '',\r\n  Qo:         ([day, locale]) => locale.suffix(getQuarter(day) + 1),\r\n  D:          ([day]) => day.getDate() + '',\r\n  Do:         ([day, locale]) => locale.suffix(day.getDate()),\r\n  DD:         ([day]) => padNumber(day.getDate(), 2),\r\n  DDD:        ([day]) => getDayOfYear(day) + '',\r\n  DDDo:       ([day, locale]) => locale.suffix(getDayOfYear(day)),\r\n  DDDD:       ([day]) => padNumber(getDayOfYear(day), 3),\r\n  d:          ([day]) => day.getDay() + '',\r\n  do:         ([day, locale]) => locale.suffix(day.getDay()),\r\n  dd:         ([day, locale]) => locale.weekdays[3][day.getDay()],\r\n  ddd:        ([day, locale]) => locale.weekdays[2][day.getDay()],\r\n  dddd:       ([day, locale]) => locale.weekdays[0][day.getDay()],\r\n  e:          ([day]) => getDayOfWeek(day) + '',\r\n  E:          ([day]) => (getDayOfWeek(day) + 1) + '',\r\n  eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day)),\r\n  Eo:         ([day, locale]) => locale.suffix(getDayOfWeek(day) + 1),\r\n  w:          ([day]) => getWeekOfYear(day) + '',\r\n  wo:         ([day, locale]) => locale.suffix(getWeekOfYear(day)),\r\n  ww:         ([day]) => padNumber(getWeekOfYear(day), 2),\r\n  W:          ([day]) => getWeekOfYearISO(day) + '',\r\n  Wo:         ([day, locale]) => locale.suffix(getWeekOfYearISO(day)),\r\n  WW:         ([day]) => padNumber(getWeekOfYearISO(day), 2),\r\n  Y:          ([day]) => day.getFullYear() + '',\r\n  YY:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  YYYY:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  gg:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  gggg:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  GG:         ([day]) => padNumber(day.getFullYear() % 100, 2),\r\n  GGGG:       ([day]) => padNumber(day.getFullYear(), 4, 10),\r\n  a:          ([day, locale]) => day.getHours() < 12 ? locale.am : locale.pm,\r\n  A:          ([day, locale]) => day.getHours() < 12 ? locale.am.toUpperCase() : locale.pm.toUpperCase(),\r\n  H:          ([day]) => day.getHours() + '',\r\n  HH:         ([day]) => padNumber(day.getHours(), 2),\r\n  h:          ([day]) => ((day.getHours() % 12) || 12) + '',\r\n  hh:         ([day]) => padNumber((day.getHours() % 12) || 12, 2),\r\n  k:          ([day]) => (day.getHours() + 1) + '',\r\n  kk:         ([day]) => padNumber(day.getHours() + 1, 2),\r\n  m:          ([day]) => day.getMinutes() + '',\r\n  mm:         ([day]) => padNumber(day.getMinutes(), 2),\r\n  s:          ([day]) => day.getSeconds() + '',\r\n  ss:         ([day]) => padNumber(day.getSeconds(), 2),\r\n  S:          ([day]) => padNumber(day.getMilliseconds(), 3, 1),\r\n  SS:         ([day]) => padNumber(day.getMilliseconds(), 3, 2),\r\n  SSS:        ([day]) => padNumber(day.getMilliseconds(), 3),\r\n  SSSS:       ([day]) => padNumber(day.getMilliseconds(), 3) + '0',\r\n  SSSSS:      ([day]) => padNumber(day.getMilliseconds(), 3) + '00',\r\n  SSSSSS:     ([day]) => padNumber(day.getMilliseconds(), 3) + '000',\r\n  SSSSSSS:    ([day]) => padNumber(day.getMilliseconds(), 3) + '0000',\r\n  SSSSSSSS:   ([day]) => padNumber(day.getMilliseconds(), 3) + '00000',\r\n  SSSSSSSSS:  ([day]) => padNumber(day.getMilliseconds(), 3) + '000000',\r\n  z:          ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'short'}).split(' ')[2],\r\n  zz:         ([day]) => day.toLocaleTimeString('en-us', {timeZoneName:'long'}).split(' ')[2],\r\n  Z:          ([day]) => formatOffset(day, ':'),\r\n  ZZ:         ([day]) => formatOffset(day, ''),\r\n  X:          ([day]) => Math.floor(day.valueOf() / 1000) + '',\r\n  x:          ([day]) => day.valueOf() + '',\r\n  LT:         ([day, locale]) => DateFormatter.format(locale.formatLT, [day, locale]),\r\n  LTS:        ([day, locale]) => DateFormatter.format(locale.formatLTS, [day, locale]),\r\n  L:          ([day, locale]) => DateFormatter.format(locale.formatL, [day, locale]),\r\n  l:          ([day, locale]) => DateFormatter.format(locale.formatl, [day, locale]),\r\n  LL:         ([day, locale]) => DateFormatter.format(locale.formatLL, [day, locale]),\r\n  ll:         ([day, locale]) => DateFormatter.format(locale.formatll, [day, locale]),\r\n  LLL:        ([day, locale]) => DateFormatter.format(locale.formatLLL, [day, locale]),\r\n  lll:        ([day, locale]) => DateFormatter.format(locale.formatlll, [day, locale]),\r\n  LLLL:       ([day, locale]) => DateFormatter.format(locale.formatLLLL, [day, locale]),\r\n  llll:       ([day, locale]) => DateFormatter.format(locale.formatllll, [day, locale]),\r\n}, {\r\n  '[': {\r\n    start: '[',\r\n    startEscape: '\\\\[',\r\n    end: ']',\r\n    endEscape: '\\\\]'\r\n  },\r\n  \"'\": {\r\n    start: \"'\",\r\n    startEscape: \"''\",\r\n    end: \"'\",\r\n    endEscape: \"''\"\r\n  }\r\n});\r\n\r\nconst DateFormatter: Format<[Date, LocaleOptions]> = DateFormat;\r\n\r\nfunction formatOffset(day: Date, splitter: string): string\r\n{\r\n  const off = getDateOffset(day);\r\n  const hr = Math.floor(Math.abs(off) / 100);\r\n  const mn = Math.abs(off) % 100;\r\n\r\n  return (off < 0 ? '-' : '+') + padNumber(hr, 2) + splitter + padNumber(mn, 2);\r\n}","\r\nexport * from './fns';\r\n\r\nexport * from './Command';\r\nexport * from './DefinitionProvider';\r\nexport * from './Definitions';\r\nexport * from './DataTypes';\r\nexport * from './Entity';\r\nexport * from './EventBase';\r\nexport * from './Expression';\r\nexport * from './Exprs';\r\nexport * from './Func';\r\nexport * from './LinkedNode';\r\nexport * from './Locale';\r\nexport * from './Operation';\r\nexport * from './Computed';\r\nexport * from './Program';\r\nexport * from './ReferenceData';\r\nexport * from './Relation';\r\nexport * from './Runtime';\r\nexport * from './Type';\r\nexport * from './Types';\r\nexport * from './Traverser';\r\nexport * from './Validate';\r\n\r\nexport * from './maps/FastMap';\r\nexport * from './maps/NamedMap';\r\n\r\nexport * from './types/ID';\r\nexport * from './types/Entity';\r\nexport * from './types/Any';\r\nexport * from './types/Boolean';\r\nexport * from './types/Color';\r\nexport * from './types/Date';\r\nexport * from './types/Enum';\r\nexport * from './types/List';\r\nexport * from './types/Many';\r\nexport * from './types/Map';\r\nexport * from './types/Not';\r\nexport * from './types/Null';\r\nexport * from './types/Number';\r\nexport * from './types/Object';\r\nexport * from './types/Optional';\r\nexport * from './types/Set';\r\nexport * from './types/Text';\r\nexport * from './types/Tuple';\r\n\r\nexport * from './exprs/And';\r\nexport * from './exprs/Chain';\r\nexport * from './exprs/Comment';\r\nexport * from './exprs/Computed';\r\nexport * from './exprs/Constant';\r\nexport * from './exprs/Define';\r\nexport * from './exprs/Do';\r\nexport * from './exprs/For';\r\nexport * from './exprs/Get';\r\nexport * from './exprs/GetData';\r\nexport * from './exprs/GetEntity';\r\nexport * from './exprs/GetRelation';\r\nexport * from './exprs/If';\r\nexport * from './exprs/Invoke';\r\nexport * from './exprs/Method';\r\nexport * from './exprs/No';\r\nexport * from './exprs/Not';\r\nexport * from './exprs/Object';\r\nexport * from './exprs/Operation';\r\nexport * from './exprs/Or';\r\nexport * from './exprs/Path';\r\nexport * from './exprs/Return';\r\nexport * from './exprs/Set';\r\nexport * from './exprs/Sub';\r\nexport * from './exprs/Switch';\r\nexport * from './exprs/Template';\r\nexport * from './exprs/Tuple';\r\nexport * from './exprs/Update';\r\nexport * from './exprs/While';\r\n\r\nexport * from './def';\r\n\r\nexport * from './ops/EntityOps';\r\nexport * from './ops/AnyOps';\r\nexport * from './ops/BooleanOps';\r\nexport * from './ops/ColorOps';\r\nexport * from './ops/DateOps';\r\nexport * from './ops/ListOps';\r\nexport * from './ops/MapOps';\r\nexport * from './ops/NumberOps';\r\nexport * from './ops/ObjectOps';\r\nexport * from './ops/SetOps';\r\nexport * from './ops/TextOps';\r\nexport * from './ops/TupleOps';\r\n\r\nexport * from './ops/types/EntityOpsTypes';\r\nexport * from './ops/types/AnyOpsTypes';\r\nexport * from './ops/types/BooleanOpsTypes';\r\nexport * from './ops/types/ColorOpsTypes';\r\nexport * from './ops/types/DateOpsTypes';\r\nexport * from './ops/types/ListOpsTypes';\r\nexport * from './ops/types/MapOpsTypes';\r\nexport * from './ops/types/NumberOpsTypes';\r\nexport * from './ops/types/ObjectOpsTypes';\r\nexport * from './ops/types/SetOpsTypes';\r\nexport * from './ops/types/TextOpsTypes';\r\nexport * from './ops/types/TupleOpsTypes';\r\n\r\nexport * from './locales';\r\n\r\nexport * from './util/color/Color';\r\nexport * from './util/color/ColorSpace';\r\nexport * from './util/color/ColorSpaceHSL';\r\nexport * from './util/color/ColorSpaceRGB';\r\nexport * from './util/date/DateConstants';\r\nexport * from './util/date/DateFormat';\r\nexport * from './util/date/DateFunctions';\r\nexport * from './util/Format';"],"sourceRoot":""}