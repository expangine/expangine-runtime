import { Expression, ExpressionProvider, ExpressionValue } from '../Expression';
import { DefinitionProvider } from '../DefinitionProvider';
import { Type, TypeMap } from '../Type';
import { Traverser, TraverseStep } from '../Traverser';
import { ValidationHandler } from '../Validate';
export declare type DefineVar = string | Record<string, string | number>;
export declare class DefineExpression extends Expression {
    static STEP_DEFINE: string;
    static STEP_BODY: string;
    static id: string;
    static decode(data: any[], exprs: ExpressionProvider): DefineExpression;
    static encode(expr: DefineExpression): any;
    static cloneVar(v: DefineVar): DefineVar;
    static stringifyVar(v: DefineVar): string;
    define: [DefineVar, Expression][];
    body: Expression;
    constructor(define: [DefineVar, Expression][], body: Expression);
    getId(): string;
    getComplexity(def: DefinitionProvider, context: Type): number;
    isDynamic(): boolean;
    applyToScope(scope: TypeMap, name: DefineVar, type: Type): void;
    getScope(): {};
    encode(): any;
    clone(): Expression;
    getType(def: DefinitionProvider, original: Type): Type | null;
    getContextFor(steps: TraverseStep[], def: DefinitionProvider, context: Type, thisType?: Type): Type;
    traverse<R>(traverse: Traverser<Expression, R>): R;
    getExpressionFromStep(steps: TraverseStep[]): [number, Expression] | null;
    setParent(parent?: Expression): void;
    validate(def: DefinitionProvider, context: Type, handler: ValidationHandler): void;
    mutates(def: DefinitionProvider, arg: string, directly?: boolean): boolean;
    with(name: DefineVar, value: ExpressionValue): DefineExpression;
    with(defines: Record<string, ExpressionValue> | Array<[DefineVar, ExpressionValue]>): DefineExpression;
    run(expr: Expression): DefineExpression;
}
