import { LiveContext, LiveResult, LiveCommand } from '.';
export declare function saveScope<K extends string>(context: LiveContext, scope: Record<string, K>): Record<K, any>;
export declare function restoreScope<K extends string>(context: LiveContext, saved: Record<K, any>): void;
export declare function preserveScope<R = any>(context: LiveContext, props: string[], run: () => R): R;
export declare function _optional(cmd: LiveCommand | undefined, context: LiveContext, defaultValue?: LiveResult): LiveResult;
export declare function _bool(cmd: LiveCommand | undefined, context: LiveContext, defaultValue?: boolean): boolean;
export declare function _typed<T>(isValid: (value: any) => value is T, invalidValueDefault: T): (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: T) => T;
export declare function _typedDynamic<T>(isValid: (value: any) => value is T, invalidValueDefault: () => T): (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: () => T) => T;
export declare const _number: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: number) => number;
export declare const _numberMaybe: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: number) => number;
export declare const _text: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: string) => string;
export declare const _textMaybe: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: string) => string;
export declare const _list: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: () => any[]) => any[];
export declare const _map: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: () => Map<any, any>) => Map<any, any>;
export declare const _object: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: () => any) => any;
export declare const _date: (cmd: import("../..").Command<Record<string, any>, any>, context: Record<string, any>, invalidValue?: () => Date) => Date;
export declare function _asList(getValue: LiveCommand, context: LiveContext): any[];
export declare function _asMap(getValue: LiveCommand, context: LiveContext): Map<string, any>;
export declare function _asObject(getValue: LiveCommand, context: LiveContext): {
    value: any;
};
export declare function _asTuple(getValue: LiveCommand, context: any): any[];
