import { Type, TypeProvider, TypeInput, TypeDescribeProvider, TypeSub, TypeCompatibleOptions, TypeChild } from '../Type';
import { Expression } from '../Expression';
import { DefinitionProvider } from '../DefinitionProvider';
import { Traverser, TraverseStep } from '../Traverser';
export interface MapOptions<K = any, V = any> {
    key: Type<K>;
    value: Type<V>;
}
export declare class MapType<K = any, V = any> extends Type<Map<K, V>, MapOptions<K, V>> {
    static STEP_KEY: string;
    static STEP_VALUE: string;
    static CHILD_KEY: string;
    static CHILD_VALUE: string;
    static id: string;
    static operations: import("..").Operations;
    static computeds: import("..").Computeds;
    static baseType: MapType<string, any>;
    static decode(data: any[], types: TypeProvider): MapType;
    static encode(type: MapType): any;
    static describePriority: number;
    static describe(data: any, describer: TypeDescribeProvider, cache: Map<any, Type>): Type | undefined;
    static registered: boolean;
    static register(): void;
    static forItem(valueOrClass: TypeInput, keyOrClass?: TypeInput): MapType<any, any>;
    getId(): string;
    getOperations(): Record<string, import("..").OperationGeneric>;
    merge(type: MapType): void;
    getSubType(expr: Expression, def: DefinitionProvider, context: Type): Type | undefined;
    getSubTypes(def: DefinitionProvider): TypeSub[];
    getChildType(name: TypeChild): Type | undefined;
    getChildTypes(): TypeChild[];
    getExactType(value: any): Type;
    getSimplifiedType(): Type;
    protected isDeepCompatible(other: Type, options: TypeCompatibleOptions): boolean;
    isOptional(): boolean;
    isSimple(): boolean;
    traverse<R>(traverse: Traverser<Type, R>): R;
    getTypeFromStep(step: TraverseStep): Type | undefined;
    setParent(parent?: Type): void;
    removeDescribedRestrictions(): void;
    getCreateExpression(): Expression;
    getValidateExpression(): Expression;
    getCompareExpression(): Expression;
    getValueChangeExpression(newValue: Expression, from?: TraverseStep, to?: TraverseStep): Expression;
    isValid(test: any): test is Map<K, V>;
    normalize(test: any): any;
    private iterate;
    newInstance(): MapType;
    clone(): MapType;
    encode(): any;
    create(): Map<K, V>;
    random(rnd: (a: number, b: number, whole: boolean) => number): Map<K, V>;
    fromJson(json: Array<[any, any]>): Map<K, V>;
    toJson(map: Map<K, V>): Array<[any, any]>;
}
