export declare const MapOps: {
    create: import("..").Operation<never, never, never>;
    get: import("..").Operation<"map" | "key", never, never>;
    set: import("..").Operation<"value" | "map" | "key", any, "existingValue">;
    has: import("..").Operation<"map" | "key", never, never>;
    delete: import("..").Operation<"map" | "key", never, never>;
    keys: import("..").Operation<"map", never, never>;
    values: import("..").Operation<"map", never, never>;
    entries: import("..").Operation<"map", never, never>;
    clear: import("..").Operation<"map", never, never>;
    count: import("..").Operation<"map", never, never>;
    cmp: import("..").Operation<"value" | "test" | "compare", any, "value" | "test" | "key">;
    copy: import("..").Operation<"map", "deepCopy" | "deepCopyKey", "value" | "map" | "key">;
    map: import("..").Operation<"map", "transform" | "transformKey", "value" | "map" | "key">;
    toPlainObject: import("..").Operation<"map", never, never>;
    isValid: import("..").Operation<"value", never, never>;
    isEqual: import("..").Operation<"value" | "test" | "isEqual", any, "value" | "test" | "key">;
    isNotEqual: import("..").Operation<"value" | "test" | "isEqual", any, "value" | "test" | "key">;
    isLess: import("..").Operation<"value" | "test" | "compare", any, "value" | "test" | "key">;
    isLessOrEqual: import("..").Operation<"value" | "test" | "compare", any, "value" | "test" | "key">;
    isGreater: import("..").Operation<"value" | "test" | "compare", any, "value" | "test" | "key">;
    isGreaterOrEqual: import("..").Operation<"value" | "test" | "compare", any, "value" | "test" | "key">;
    asAny: import("..").Operation<"value", never, never>;
    asBoolean: import("..").Operation<"value", never, never>;
    asDate: import("..").Operation<"value", never, never>;
    asList: import("..").Operation<"value", never, never>;
    asMap: import("..").Operation<"value", never, never>;
    asNumber: import("..").Operation<"value", never, never>;
    asObject: import("..").Operation<"value", never, never>;
    asText: import("..").Operation<"value", never, never>;
    asTuple: import("..").Operation<"value", never, never>;
};
