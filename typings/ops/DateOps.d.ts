import { Operations } from '../Operation';
import { Computeds } from '../Computed';
export declare const DateOperations: Operations;
export declare const DateComputeds: Computeds;
export declare const DateOps: {
    create: import("../Operation").Operation<never, never, never, never, never>;
    now: import("../Operation").Operation<never, never, never, never, never>;
    today: import("../Operation").Operation<never, never, never, never, never>;
    tomorrow: import("../Operation").Operation<never, never, never, never, never>;
    yesterday: import("../Operation").Operation<never, never, never, never, never>;
    maybe: import("../Operation").Operation<"value", never, never, never, never>;
    parse: import("../Operation").Operation<"value", "parseAsUTC", never, never, never>;
    fromText: import("../Operation").Operation<"value", "parseAsUTC", never, never, never>;
    fromTimestamp: import("../Operation").Operation<"value", never, never, never, never>;
    fromTimestampSeconds: import("../Operation").Operation<"value", never, never, never, never>;
    min: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    max: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    get: import("../Operation").Operation<"value" | "property", never, never, never, never>;
    set: import("../Operation").Operation<"set" | "value" | "property", never, never, never, never>;
    add: import("../Operation").Operation<"value" | "unit", "amount", never, never, never>;
    sub: import("../Operation").Operation<"value" | "unit", "amount", never, never, never>;
    startOf: import("../Operation").Operation<"value" | "unit", never, never, never, never>;
    endOf: import("../Operation").Operation<"value" | "unit", "inclusive", never, never, never>;
    daysInMonth: import("../Operation").Operation<"value", never, never, never, never>;
    daysInYear: import("../Operation").Operation<"value", never, never, never, never>;
    weeksInYear: import("../Operation").Operation<"value", never, never, never, never>;
    copy: import("../Operation").Operation<"value", never, never, never, never>;
    cmp: import("../Operation").Operation<"value" | "test", "unit", never, never, never>;
    diff: import("../Operation").Operation<"value" | "test", "unit" | "absolute" | "adjust", never, never, never>;
    timezoneOffset: import("../Operation").Operation<"value", never, never, never, never>;
    toText: import("../Operation").Operation<"value" | "format", never, never, never, never>;
    toISOText: import("../Operation").Operation<"value", never, never, never, never>;
    isValid: import("../Operation").Operation<"value", never, never, never, never>;
    isEqual: import("../Operation").Operation<"value" | "test", "unit", never, never, never>;
    isBefore: import("../Operation").Operation<"value" | "test", "unit", never, never, never>;
    isBeforeOrEqual: import("../Operation").Operation<"value" | "test", "unit", never, never, never>;
    isAfter: import("../Operation").Operation<"value" | "test", "unit", never, never, never>;
    isAfterOrEqual: import("../Operation").Operation<"value" | "test", "unit", never, never, never>;
    isBetween: import("../Operation").Operation<"value" | "start" | "end", "unit" | "startInclusive" | "endInclusive", never, never, never>;
    isStartOf: import("../Operation").Operation<"value" | "unit", never, never, never, never>;
    isEndOf: import("../Operation").Operation<"value" | "unit", "inclusive", never, never, never>;
    isDST: import("../Operation").Operation<"value", never, never, never, never>;
    isLeapYear: import("../Operation").Operation<"value", never, never, never, never>;
    asAny: import("../Operation").Operation<"value", never, never, never, never>;
    asBoolean: import("../Operation").Operation<"value", never, never, never, never>;
    asColor: import("../Operation").Operation<"value", never, never, never, never>;
    asDate: import("../Operation").Operation<"value", never, never, never, never>;
    asList: import("../Operation").Operation<"value", never, never, never, never>;
    asMap: import("../Operation").Operation<"value", never, never, never, never>;
    asNumber: import("../Operation").Operation<"value", never, never, never, never>;
    asObject: import("../Operation").Operation<"value", never, never, never, never>;
    asText: import("../Operation").Operation<"value", never, never, never, never>;
    asTuple: import("../Operation").Operation<"value", never, never, never, never>;
    asSet: import("../Operation").Operation<"value", never, never, never, never>;
};
