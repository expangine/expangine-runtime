import { Operations } from '../Operation';
import { Computeds } from '../Computed';
export declare const ListOperations: Operations;
export declare const ListComputeds: Computeds;
export declare const ListOps: {
    create: import("../Operation").OperationResolved<never, never, never, never, never>;
    createLike: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    createFor: import("../Operation").OperationResolved<"item", never, never, never, "item">;
    maybe: import("../Operation").OperationResolved<"value", never, never, never, never>;
    build: import("../Operation").OperationResolved<"count" | "item", "sameItem", "list" | "index" | "count" | "last", "item", "item">;
    get: import("../Operation").OperationResolved<"list" | "index", never, never, never, "list">;
    set: import("../Operation").OperationResolved<"list" | "value" | "index", never, never, never, "list">;
    add: import("../Operation").OperationResolved<"list" | "item", never, never, never, "list">;
    addFirst: import("../Operation").OperationResolved<"list" | "item", never, never, never, "list">;
    addLast: import("../Operation").OperationResolved<"list" | "item", never, never, never, "list">;
    insert: import("../Operation").OperationResolved<"list" | "index" | "item", never, never, never, "list">;
    remove: import("../Operation").OperationResolved<"list" | "isEqual" | "item", never, "list" | "value" | "test", "isEqual", "list">;
    removeFirst: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    removeLast: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    removeAt: import("../Operation").OperationResolved<"list" | "index", never, never, never, "list">;
    removeWhere: import("../Operation").OperationResolved<"list" | "where", never, "list" | "index" | "item", "where", "list">;
    clear: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    contains: import("../Operation").OperationResolved<"list" | "isEqual" | "item", never, "list" | "value" | "test", "isEqual", never>;
    find: import("../Operation").OperationResolved<"list" | "where", "reverse" | "start", "list" | "index" | "item", "where", "list">;
    copy: import("../Operation").OperationResolved<"list", "deepCopy", "copy", "deepCopy", "list">;
    reverse: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    exclude: import("../Operation").OperationResolved<"list" | "isEqual" | "exclude", never, "list" | "value" | "test", "isEqual", "list">;
    overlap: import("../Operation").OperationResolved<"list" | "isEqual" | "overlap", never, "list" | "value" | "test", "isEqual", "list">;
    sort: import("../Operation").OperationResolved<"list" | "compare", never, "list" | "value" | "test", "compare", "list">;
    shuffle: import("../Operation").OperationResolved<"list", "times", never, never, "list">;
    unique: import("../Operation").OperationResolved<"list" | "isEqual", never, "list" | "value" | "test", "isEqual", "list">;
    duplicates: import("../Operation").OperationResolved<"list" | "isEqual", "once", "list" | "value" | "test", "isEqual", "list">;
    take: import("../Operation").OperationResolved<"list" | "count", never, never, never, "list">;
    skip: import("../Operation").OperationResolved<"list" | "count", never, never, never, "list">;
    drop: import("../Operation").OperationResolved<"list" | "count", never, never, never, "list">;
    append: import("../Operation").OperationResolved<"list" | "append", never, never, never, "list">;
    prepend: import("../Operation").OperationResolved<"list" | "prepend", never, never, never, "list">;
    indexOf: import("../Operation").OperationResolved<"list" | "isEqual" | "item", "start", "list" | "value" | "test", "isEqual", "list">;
    lastIndexOf: import("../Operation").OperationResolved<"list" | "isEqual" | "item", "start", "list" | "value" | "test", "isEqual", "list">;
    findIndex: import("../Operation").OperationResolved<"list" | "where", "reverse" | "start", "list" | "index" | "item", "where", never>;
    last: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    first: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    count: import("../Operation").OperationResolved<"list", never, never, never, never>;
    randomList: import("../Operation").OperationResolved<"list" | "count", never, never, never, "list">;
    random: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    flatten: import("../Operation").OperationResolved<"list", never, never, never, "list">;
    join: import("../Operation").OperationResolved<"list", "toText" | "prefix" | "suffix" | "delimiter", "list" | "index" | "item", "toText", never>;
    each: import("../Operation").OperationResolved<"list" | "each", "reverse", "list" | "index" | "item", "each", "list">;
    filter: import("../Operation").OperationResolved<"list" | "filter", never, "list" | "index" | "item", "filter", "list">;
    not: import("../Operation").OperationResolved<"list" | "not", never, "list" | "index" | "item", "not", "list">;
    map: import("../Operation").OperationResolved<"list" | "transform", never, "list" | "index" | "item", "transform", "list">;
    split: import("../Operation").OperationResolved<"list" | "pass", never, "list" | "index" | "item", "pass", "list">;
    reduce: import("../Operation").OperationResolved<"list" | "reduce" | "initial", never, "list" | "index" | "item" | "reduced", "reduce", "reduce">;
    cmp: import("../Operation").OperationResolved<"value" | "test" | "compare", never, "list" | "value" | "test", "compare", never>;
    group: import("../Operation").OperationResolved<"list" | "by", "getValue", "list" | "index" | "item", "by" | "getValue", "list" | "by" | "getValue">;
    toListMap: import("../Operation").OperationResolved<"list" | "getKey", "getValue", "list" | "index" | "item", "getValue" | "getKey", "list" | "getValue" | "getKey">;
    toMap: import("../Operation").OperationResolved<"list" | "getKey", "getValue", "list" | "index" | "item", "getValue" | "getKey", "list" | "getValue" | "getKey">;
    joinInner: import("../Operation").OperationResolved<"join" | "b" | "a" | "on", never, "onA" | "onB" | "joinA" | "joinB", "join" | "on", "join">;
    joinLeft: import("../Operation").OperationResolved<"join" | "b" | "a" | "on", never, "onA" | "onB" | "joinA" | "joinB", "join" | "on", "join">;
    joinRight: import("../Operation").OperationResolved<"join" | "b" | "a" | "on", never, "onA" | "onB" | "joinA" | "joinB", "join" | "on", "join">;
    joinFull: import("../Operation").OperationResolved<"join" | "b" | "a" | "on", never, "onA" | "onB" | "joinA" | "joinB", "join" | "on", "join">;
    joinCross: import("../Operation").OperationResolved<"join" | "b" | "a", never, "joinA" | "joinB", "join", "join">;
    min: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    max: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    sum: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    avg: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    std: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    variance: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    median: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    bitand: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    bitor: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    bitxor: import("../Operation").OperationResolved<"list" | "value", never, "list" | "index" | "item", "value", never>;
    isValid: import("../Operation").OperationResolved<"value", never, never, never, never>;
    isEmpty: import("../Operation").OperationResolved<"list", never, never, never, never>;
    isNotEmpty: import("../Operation").OperationResolved<"list", never, never, never, never>;
    isEqual: import("../Operation").OperationResolved<"list" | "test" | "isEqual", never, "list" | "value" | "test", "isEqual", never>;
    isNotEqual: import("../Operation").OperationResolved<"list" | "test" | "isEqual", never, "list" | "value" | "test", "isEqual", never>;
    isLess: import("../Operation").OperationResolved<"value" | "test" | "compare", never, "list" | "value" | "test", "compare", never>;
    isLessOrEqual: import("../Operation").OperationResolved<"value" | "test" | "compare", never, "list" | "value" | "test", "compare", never>;
    isGreater: import("../Operation").OperationResolved<"value" | "test" | "compare", never, "list" | "value" | "test", "compare", never>;
    isGreaterOrEqual: import("../Operation").OperationResolved<"value" | "test" | "compare", never, "list" | "value" | "test", "compare", never>;
    asAny: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asBoolean: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asColor: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asDate: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asList: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asMap: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asNumber: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asObject: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asText: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asTuple: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asSet: import("../Operation").OperationResolved<"value", never, never, never, never>;
};
