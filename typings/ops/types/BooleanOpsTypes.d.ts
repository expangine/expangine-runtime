export declare const BooleanOpsTypes: {
    create: import("../..").OperationTypes<never, never, never>;
    maybe: import("../..").OperationTypes<"value", never, never>;
    and: import("../..").OperationTypes<"b" | "a", never, never>;
    or: import("../..").OperationTypes<"b" | "a", never, never>;
    xor: import("../..").OperationTypes<"b" | "a", never, never>;
    not: import("../..").OperationTypes<"a", never, never>;
    cmp: import("../..").OperationTypes<"value" | "test", never, never>;
    isValid: import("../..").OperationTypes<"value", never, never>;
    isTrue: import("../..").OperationTypes<"value", never, never>;
    isFalse: import("../..").OperationTypes<"value", never, never>;
    asAny: import("../..").OperationTypes<"value", never, never>;
    asBoolean: import("../..").OperationTypes<"value", never, never>;
    asColor: import("../..").OperationTypes<"value", never, never>;
    asDate: import("../..").OperationTypes<"value", never, never>;
    asList: import("../..").OperationTypes<"value", never, never>;
    asMap: import("../..").OperationTypes<"value", never, never>;
    asNumber: import("../..").OperationTypes<"value", never, never>;
    asObject: import("../..").OperationTypes<"value", never, never>;
    asText: import("../..").OperationTypes<"value", never, never>;
    asTuple: import("../..").OperationTypes<"value", never, never>;
};
