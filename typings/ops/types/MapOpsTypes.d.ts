export declare const MapOpsTypes: {
    create: import("../..").OperationTypes<never, never, never>;
    maybe: import("../..").OperationTypes<"value", never, never>;
    get: import("../..").OperationTypes<"map" | "key", never, never>;
    set: import("../..").OperationTypes<"map" | "value" | "key", never, "existingValue">;
    has: import("../..").OperationTypes<"map" | "key", never, never>;
    delete: import("../..").OperationTypes<"map" | "key", never, never>;
    keys: import("../..").OperationTypes<"map", never, never>;
    values: import("../..").OperationTypes<"map", never, never>;
    entries: import("../..").OperationTypes<"map", never, never>;
    pairs: import("../..").OperationTypes<"map", never, never>;
    clear: import("../..").OperationTypes<"map", never, never>;
    count: import("../..").OperationTypes<"map", never, never>;
    cmp: import("../..").OperationTypes<"value" | "test" | "compare", never, "value" | "test" | "key">;
    copy: import("../..").OperationTypes<"map", "deepCopy" | "deepCopyKey", "map" | "value" | "key">;
    map: import("../..").OperationTypes<"map", "transform" | "transformKey", "map" | "value" | "key">;
    toPlainObject: import("../..").OperationTypes<"map", never, never>;
    isValid: import("../..").OperationTypes<"value", never, never>;
    isEqual: import("../..").OperationTypes<"value" | "test" | "isEqual", never, "value" | "test" | "key">;
    isNotEqual: import("../..").OperationTypes<"value" | "test" | "isEqual", never, "value" | "test" | "key">;
    isLess: import("../..").OperationTypes<"value" | "test" | "compare", never, "value" | "test" | "key">;
    isLessOrEqual: import("../..").OperationTypes<"value" | "test" | "compare", never, "value" | "test" | "key">;
    isGreater: import("../..").OperationTypes<"value" | "test" | "compare", never, "value" | "test" | "key">;
    isGreaterOrEqual: import("../..").OperationTypes<"value" | "test" | "compare", never, "value" | "test" | "key">;
    asAny: import("../..").OperationTypes<"value", never, never>;
    asBoolean: import("../..").OperationTypes<"value", never, never>;
    asDate: import("../..").OperationTypes<"value", never, never>;
    asList: import("../..").OperationTypes<"value", never, never>;
    asMap: import("../..").OperationTypes<"value", never, never>;
    asNumber: import("../..").OperationTypes<"value", never, never>;
    asObject: import("../..").OperationTypes<"value", never, never>;
    asText: import("../..").OperationTypes<"value", never, never>;
    asTuple: import("../..").OperationTypes<"value", never, never>;
};
