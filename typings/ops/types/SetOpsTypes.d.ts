export declare const SetOpsTypes: {
    create: import("../..").OperationTypes<never, never, never>;
    createLike: import("../..").OperationTypes<"set", never, never>;
    createFor: import("../..").OperationTypes<"value", never, never>;
    maybe: import("../..").OperationTypes<"value", never, never>;
    add: import("../..").OperationTypes<"set" | "value", never, never>;
    has: import("../..").OperationTypes<"set" | "value", never, never>;
    delete: import("../..").OperationTypes<"set" | "value", never, never>;
    values: import("../..").OperationTypes<"set", never, never>;
    clear: import("../..").OperationTypes<"set", never, never>;
    count: import("../..").OperationTypes<"set", never, never>;
    cmp: import("../..").OperationTypes<"value" | "test", never, never>;
    copy: import("../..").OperationTypes<"set", "deepCopy", "set" | "value">;
    map: import("../..").OperationTypes<"set", "transform", "set" | "value">;
    isValid: import("../..").OperationTypes<"value", never, never>;
    isEqual: import("../..").OperationTypes<"value" | "test", never, never>;
    isNotEqual: import("../..").OperationTypes<"value" | "test", never, never>;
    isLess: import("../..").OperationTypes<"value" | "test", never, never>;
    isLessOrEqual: import("../..").OperationTypes<"value" | "test", never, never>;
    isGreater: import("../..").OperationTypes<"value" | "test", never, never>;
    isGreaterOrEqual: import("../..").OperationTypes<"value" | "test", never, never>;
    asAny: import("../..").OperationTypes<"value", never, never>;
    asBoolean: import("../..").OperationTypes<"value", never, never>;
    asColor: import("../..").OperationTypes<"value", never, never>;
    asDate: import("../..").OperationTypes<"value", never, never>;
    asList: import("../..").OperationTypes<"value", never, never>;
    asMap: import("../..").OperationTypes<"value", never, never>;
    asNumber: import("../..").OperationTypes<"value", never, never>;
    asObject: import("../..").OperationTypes<"value", never, never>;
    asText: import("../..").OperationTypes<"value", never, never>;
    asTuple: import("../..").OperationTypes<"value", never, never>;
    asSet: import("../..").OperationTypes<"value", never, never>;
};
