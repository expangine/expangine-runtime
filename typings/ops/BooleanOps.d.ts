import { Operations } from '../Operation';
import { Computeds } from '../Computed';
export declare const BooleanOperations: Operations;
export declare const BooleanComputeds: Computeds;
export declare const BooleanOps: {
    create: import("../Operation").OperationResolved<never, never, never, never, never>;
    maybe: import("../Operation").OperationResolved<"value", never, never, never, never>;
    and: import("../Operation").OperationResolved<"a" | "b", never, never, never, never>;
    or: import("../Operation").OperationResolved<"a" | "b", never, never, never, never>;
    xor: import("../Operation").OperationResolved<"a" | "b", never, never, never, never>;
    not: import("../Operation").OperationResolved<"a", never, never, never, never>;
    cmp: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    isValid: import("../Operation").OperationResolved<"value", never, never, never, never>;
    isTrue: import("../Operation").OperationResolved<"value", never, never, never, never>;
    isFalse: import("../Operation").OperationResolved<"value", never, never, never, never>;
    isEqual: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    isNotEqual: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    asAny: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asBoolean: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asColor: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asDate: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asList: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asMap: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asNumber: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asObject: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asText: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asTuple: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asSet: import("../Operation").OperationResolved<"value", never, never, never, never>;
};
