import { Operations } from '../Operation';
import { Computeds } from '../Computed';
export declare const AnyOperations: Operations;
export declare const AnyComputeds: Computeds;
export declare const AnyOps: {
    cmp: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    copy: import("../Operation").OperationResolved<"value", never, never, never, never>;
    isDefined: import("../Operation").OperationResolved<"value", never, never, never, never>;
    getDefined: import("../Operation").OperationResolved<"value" | "defined", any, "defined", "defined", "value">;
    coalesce: import("../Operation").OperationResolved<"a" | "b", "c" | "d" | "e", any, any, "a" | "b" | "c" | "d" | "e">;
    require: import("../Operation").OperationResolved<"value", any, any, any, "value">;
    ternary: import("../Operation").OperationResolved<"condition" | "truthy" | "falsy", any, any, any, "truthy" | "falsy">;
    isValid: import("../Operation").OperationResolved<"value", never, never, never, never>;
    isEqual: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    isNotEqual: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    isLess: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    isLessOrEqual: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    isGreater: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    isGreaterOrEqual: import("../Operation").OperationResolved<"value" | "test", never, never, never, never>;
    asAny: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asBoolean: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asColor: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asDate: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asList: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asMap: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asNumber: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asObject: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asText: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asTuple: import("../Operation").OperationResolved<"value", never, never, never, never>;
    asSet: import("../Operation").OperationResolved<"value", never, never, never, never>;
};
