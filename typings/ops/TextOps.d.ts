import { Operations } from '../Operation';
export declare const TextOperations: Operations;
export declare const TextOps: {
    create: import("../Operation").Operation<never, never, never, never, never>;
    append: import("../Operation").Operation<"value" | "append", never, never, never, never>;
    prepend: import("../Operation").Operation<"value" | "prepend", never, never, never, never>;
    lower: import("../Operation").Operation<"value", never, never, never, never>;
    upper: import("../Operation").Operation<"value", never, never, never, never>;
    char: import("../Operation").Operation<"value" | "index", "outside", never, "value" | "index" | "outside", "value" | "index" | "outside">;
    replace: import("../Operation").Operation<"replace" | "value" | "find", never, never, never, never>;
    repeat: import("../Operation").Operation<"value" | "times", never, never, never, never>;
    split: import("../Operation").Operation<"value" | "by", "limit", never, "value" | "by" | "limit", "value" | "by" | "limit">;
    chars: import("../Operation").Operation<"value", never, never, never, never>;
    sub: import("../Operation").Operation<"value", "start" | "end", never, "value" | "start" | "end", "value" | "start" | "end">;
    indexOf: import("../Operation").Operation<"search" | "value", "start", never, "search" | "value" | "start", "search" | "value" | "start">;
    lastIndexOf: import("../Operation").Operation<"search" | "value", "start", never, "search" | "value" | "start", "search" | "value" | "start">;
    trim: import("../Operation").Operation<"value", "start" | "end", never, "value" | "start" | "end", "value" | "start" | "end">;
    startsWith: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    endsWith: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    soundex: import("../Operation").Operation<"value", "min" | "max", never, "value" | "min" | "max", "value" | "min" | "max">;
    distance: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    length: import("../Operation").Operation<"value", never, never, never, never>;
    compare: import("../Operation").Operation<"value" | "test", "ignoreCase", never, "value" | "test" | "ignoreCase", "value" | "test" | "ignoreCase">;
    like: import("../Operation").Operation<"value" | "pattern", "ignoreCase", never, "value" | "ignoreCase" | "pattern", "value" | "ignoreCase" | "pattern">;
    pad: import("../Operation").Operation<"value" | "min" | "padding", "max" | "append", never, "value" | "min" | "max" | "append" | "padding", "value" | "min" | "max" | "append" | "padding">;
    toNumber: import("../Operation").Operation<"value", "invalidValue", never, "value" | "invalidValue", "value" | "invalidValue">;
    isValid: import("../Operation").Operation<"value", never, never, never, never>;
    isEmpty: import("../Operation").Operation<"value", never, never, never, never>;
    isNotEmpty: import("../Operation").Operation<"value", never, never, never, never>;
    isEqual: import("../Operation").Operation<"a" | "b", "ignoreCase", never, "a" | "b" | "ignoreCase", "a" | "b" | "ignoreCase">;
    isNotEqual: import("../Operation").Operation<"a" | "b", "ignoreCase", never, "a" | "b" | "ignoreCase", "a" | "b" | "ignoreCase">;
    isLess: import("../Operation").Operation<"value" | "test", "ignoreCase", never, "value" | "test" | "ignoreCase", "value" | "test" | "ignoreCase">;
    isLessOrEqual: import("../Operation").Operation<"value" | "test", "ignoreCase", never, "value" | "test" | "ignoreCase", "value" | "test" | "ignoreCase">;
    isGreater: import("../Operation").Operation<"value" | "test", "ignoreCase", never, "value" | "test" | "ignoreCase", "value" | "test" | "ignoreCase">;
    isGreaterOrEqual: import("../Operation").Operation<"value" | "test", "ignoreCase", never, "value" | "test" | "ignoreCase", "value" | "test" | "ignoreCase">;
    isLower: import("../Operation").Operation<"value", never, never, never, never>;
    isUpper: import("../Operation").Operation<"value", never, never, never, never>;
    asAny: import("../Operation").Operation<"value", never, never, never, never>;
    asBoolean: import("../Operation").Operation<"value", never, never, never, never>;
    asDate: import("../Operation").Operation<"value", never, never, never, never>;
    asList: import("../Operation").Operation<"value", never, never, never, never>;
    asMap: import("../Operation").Operation<"value", never, never, never, never>;
    asNumber: import("../Operation").Operation<"value", never, never, never, never>;
    asObject: import("../Operation").Operation<"value", never, never, never, never>;
    asText: import("../Operation").Operation<"value", never, never, never, never>;
    asTuple: import("../Operation").Operation<"value", never, never, never, never>;
};
