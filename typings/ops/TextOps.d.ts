export declare const TextOps: {
    create: import("..").Operation<never, never, never>;
    append: import("..").Operation<"value" | "append", never, never>;
    prepend: import("..").Operation<"value" | "prepend", never, never>;
    lower: import("..").Operation<"value", never, never>;
    upper: import("..").Operation<"value", never, never>;
    char: import("..").Operation<"value" | "index", "outside", never>;
    replace: import("..").Operation<"replace" | "value" | "find", never, never>;
    repeat: import("..").Operation<"value" | "times", never, never>;
    split: import("..").Operation<"value" | "by", "limit", never>;
    chars: import("..").Operation<"value", never, never>;
    sub: import("..").Operation<"value", "start" | "end", never>;
    indexOf: import("..").Operation<"search" | "value", "start", never>;
    lastIndexOf: import("..").Operation<"search" | "value", "start", never>;
    trim: import("..").Operation<"value", "start" | "end", never>;
    startsWith: import("..").Operation<"value" | "test", never, never>;
    endsWith: import("..").Operation<"value" | "test", never, never>;
    soundex: import("..").Operation<"value", "min" | "max", never>;
    distance: import("..").Operation<"value" | "test", never, never>;
    length: import("..").Operation<"value", never, never>;
    compare: import("..").Operation<"value" | "test", "ignoreCase", never>;
    toNumber: import("..").Operation<"value", "invalidValue", never>;
    isValid: import("..").Operation<"a", never, never>;
    isEmpty: import("..").Operation<"a", never, never>;
    isNotEmpty: import("..").Operation<"a", never, never>;
    isEqual: import("..").Operation<"a" | "b", "ignoreCase", never>;
    isNotEqual: import("..").Operation<"a" | "b", "ignoreCase", never>;
    isLess: import("..").Operation<"value" | "test", "ignoreCase", never>;
    isLessOrEqual: import("..").Operation<"value" | "test", "ignoreCase", never>;
    isGreater: import("..").Operation<"value" | "test", "ignoreCase", never>;
    isGreaterOrEqual: import("..").Operation<"value" | "test", "ignoreCase", never>;
    isLower: import("..").Operation<"value", never, never>;
    isUpper: import("..").Operation<"value", never, never>;
    asAny: import("..").Operation<"value", never, never>;
    asBoolean: import("..").Operation<"value", never, never>;
    asDate: import("..").Operation<"value", never, never>;
    asList: import("..").Operation<"value", never, never>;
    asMap: import("..").Operation<"value", never, never>;
    asNumber: import("..").Operation<"value", never, never>;
    asObject: import("..").Operation<"value", never, never>;
    asText: import("..").Operation<"value", never, never>;
    asTuple: import("..").Operation<"value", never, never>;
};
