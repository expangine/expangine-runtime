import { Operations } from '../Operation';
import { Computeds } from '../Computed';
export declare const NumberOperations: Operations;
export declare const NumberComputeds: Computeds;
export declare const NumberOps: {
    create: import("../Operation").Operation<never, never, never, never, never>;
    pi: import("../Operation").Operation<never, never, never, never, never>;
    pi2: import("../Operation").Operation<never, never, never, never, never>;
    piHalf: import("../Operation").Operation<never, never, never, never, never>;
    e: import("../Operation").Operation<never, never, never, never, never>;
    sqrt2: import("../Operation").Operation<never, never, never, never, never>;
    sqrt12: import("../Operation").Operation<never, never, never, never, never>;
    ln2: import("../Operation").Operation<never, never, never, never, never>;
    ln10: import("../Operation").Operation<never, never, never, never, never>;
    log2e: import("../Operation").Operation<never, never, never, never, never>;
    log10e: import("../Operation").Operation<never, never, never, never, never>;
    add: import("../Operation").Operation<"value" | "addend", never, never, never, never>;
    sub: import("../Operation").Operation<"value" | "subtrahend", never, never, never, never>;
    mul: import("../Operation").Operation<"value" | "multiplier", never, never, never, never>;
    div: import("../Operation").Operation<"value" | "divisor", never, never, never, never>;
    mod: import("../Operation").Operation<"value" | "divisor", never, never, never, never>;
    min: import("../Operation").Operation<"a" | "b", never, never, never, never>;
    max: import("../Operation").Operation<"a" | "b", never, never, never, never>;
    pow: import("../Operation").Operation<"value" | "exponent", never, never, never, never>;
    atan2: import("../Operation").Operation<"x" | "y", never, never, never, never>;
    hypot: import("../Operation").Operation<"a" | "b", never, never, never, never>;
    choose: import("../Operation").Operation<"k" | "n", never, never, never, never>;
    gcd: import("../Operation").Operation<"a" | "b", never, never, never, never>;
    bitAnd: import("../Operation").Operation<"a" | "b", never, never, never, never>;
    bitOr: import("../Operation").Operation<"a" | "b", never, never, never, never>;
    bitXor: import("../Operation").Operation<"a" | "b", never, never, never, never>;
    cmp: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    maybe: import("../Operation").Operation<"value", never, never, never, never>;
    sqrt: import("../Operation").Operation<"value", never, never, never, never>;
    sq: import("../Operation").Operation<"value", never, never, never, never>;
    cbrt: import("../Operation").Operation<"value", never, never, never, never>;
    floor: import("../Operation").Operation<"value", never, never, never, never>;
    ceil: import("../Operation").Operation<"value", never, never, never, never>;
    up: import("../Operation").Operation<"value", never, never, never, never>;
    down: import("../Operation").Operation<"value", never, never, never, never>;
    round: import("../Operation").Operation<"value", never, never, never, never>;
    abs: import("../Operation").Operation<"value", never, never, never, never>;
    neg: import("../Operation").Operation<"value", never, never, never, never>;
    sign: import("../Operation").Operation<"value", never, never, never, never>;
    log: import("../Operation").Operation<"value", never, never, never, never>;
    sin: import("../Operation").Operation<"value", never, never, never, never>;
    cos: import("../Operation").Operation<"value", never, never, never, never>;
    tan: import("../Operation").Operation<"value", never, never, never, never>;
    sinh: import("../Operation").Operation<"value", never, never, never, never>;
    cosh: import("../Operation").Operation<"value", never, never, never, never>;
    asin: import("../Operation").Operation<"value", never, never, never, never>;
    acos: import("../Operation").Operation<"value", never, never, never, never>;
    atan: import("../Operation").Operation<"value", never, never, never, never>;
    factorial: import("../Operation").Operation<"value", never, never, never, never>;
    bitFlip: import("../Operation").Operation<"value", never, never, never, never>;
    clamp: import("../Operation").Operation<"value" | "min" | "max", never, never, never, never>;
    triangleHeight: import("../Operation").Operation<"base" | "side1" | "side2", never, never, never, never>;
    lerp: import("../Operation").Operation<"start" | "end" | "delta", never, never, never, never>;
    rnd: import("../Operation").Operation<never, "min" | "max" | "whole" | "includeMax", never, never, never>;
    toBaseText: import("../Operation").Operation<"value", "base" | "minDigits", never, never, never>;
    toText: import("../Operation").Operation<"value", "prefix" | "suffix" | "minPlaces" | "maxPlaces" | "useExponent" | "thousandSeparator", never, never, never>;
    isValid: import("../Operation").Operation<"value", never, never, never, never>;
    isZero: import("../Operation").Operation<"value", "epsilon", never, never, never>;
    isEqual: import("../Operation").Operation<"value" | "test", "epsilon", never, never, never>;
    isNotEqual: import("../Operation").Operation<"value" | "test", "epsilon", never, never, never>;
    isLess: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    isLessOrEqual: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    isGreater: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    isGreaterOrEqual: import("../Operation").Operation<"value" | "test", never, never, never, never>;
    isBetween: import("../Operation").Operation<"value" | "min" | "max", "minInclusive" | "maxInclusive", never, never, never>;
    isWhole: import("../Operation").Operation<"value", "epsilon", never, never, never>;
    isDecimal: import("../Operation").Operation<"value", "epsilon", never, never, never>;
    isPositive: import("../Operation").Operation<"value", never, never, never, never>;
    isNegative: import("../Operation").Operation<"value", never, never, never, never>;
    isDivisible: import("../Operation").Operation<"value" | "by", "epsilon", never, never, never>;
    asAny: import("../Operation").Operation<"value", never, never, never, never>;
    asBoolean: import("../Operation").Operation<"value", never, never, never, never>;
    asColor: import("../Operation").Operation<"value", never, never, never, never>;
    asDate: import("../Operation").Operation<"value", never, never, never, never>;
    asList: import("../Operation").Operation<"value", never, never, never, never>;
    asMap: import("../Operation").Operation<"value", never, never, never, never>;
    asNumber: import("../Operation").Operation<"value", never, never, never, never>;
    asObject: import("../Operation").Operation<"value", never, never, never, never>;
    asText: import("../Operation").Operation<"value", never, never, never, never>;
    asTuple: import("../Operation").Operation<"value", never, never, never, never>;
};
